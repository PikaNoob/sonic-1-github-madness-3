00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow2size+8
00000000                            lswifi: equ lsrow2size+9
00000000                            
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2943 4144 4520 4341+  Date:		dc.b '(C)CADE CADE C  ' ; Release date
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 003C                  		andi.w	#$3C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4EF9 0000 0000             		jmp	Minecraft	; Minecraft ($20)	
000003BC                            ; ===========================================================================
000003BC                            
000003BC                            CheckSumError:
000003BC 6100 0000                  		bsr.w	VDPSetupGame
000003C0 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003CA 7E3F                       		moveq	#$3F,d7
000003CC                            
000003CC                            CheckSum_Red:
000003CC 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D4 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D8                            
000003D8                            CheckSum_Loop:
000003D8 60FE                       		bra.s	CheckSum_Loop
000003DA                            ; ===========================================================================
000003DA                            
000003DA                            BusError:
000003DA 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003E0 6000                       		bra.s	loc_43A
000003E2                            ; ===========================================================================
000003E2                            
000003E2                            AddressError:
000003E2 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E8 6000                       		bra.s	loc_43A
000003EA                            ; ===========================================================================
000003EA                            
000003EA                            IllegalInstr:
000003EA 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003F0 54AF 0002                  		addq.l	#2,2(sp)
000003F4 6000                       		bra.s	loc_462
000003F6                            ; ===========================================================================
000003F6                            
000003F6                            ZeroDivide:
000003F6 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003FC 6000                       		bra.s	loc_462
000003FE                            ; ===========================================================================
000003FE                            
000003FE                            ChkInstr:
000003FE 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000404 6000                       		bra.s	loc_462
00000406                            ; ===========================================================================
00000406                            
00000406                            TrapvInstr:
00000406 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
0000040C 6000                       		bra.s	loc_462
0000040E                            ; ===========================================================================
0000040E                            
0000040E                            PrivilegeViol:
0000040E 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000414 6000                       		bra.s	loc_462
00000416                            ; ===========================================================================
00000416                            
00000416                            Trace:
00000416 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
0000041C 6000                       		bra.s	loc_462
0000041E                            ; ===========================================================================
0000041E                            
0000041E                            Line1010Emu:
0000041E 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000424 54AF 0002                  		addq.l	#2,2(sp)
00000428 6000                       		bra.s	loc_462
0000042A                            ; ===========================================================================
0000042A                            
0000042A                            Line1111Emu:
0000042A 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
00000430 54AF 0002                  		addq.l	#2,2(sp)
00000434 6000                       		bra.s	loc_462
00000436                            ; ===========================================================================
00000436                            
00000436                            ErrorExcept:
00000436 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000043C 6000                       		bra.s	loc_462
0000043E                            ; ===========================================================================
0000043E                            
0000043E                            loc_43A:
0000043E 46FC 2700                  		move	#$2700,sr
00000442 544F                       		addq.w	#2,sp
00000444 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000448 544F                       		addq.w	#2,sp
0000044A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000450 6100 0000                  		bsr.w	ShowErrorMsg
00000454 202F 0002                  		move.l	2(sp),d0
00000458 6100 0000                  		bsr.w	sub_5BA
0000045C 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000460 6100 0000                  		bsr.w	sub_5BA
00000464 6000                       		bra.s	loc_478
00000466                            ; ===========================================================================
00000466                            
00000466                            loc_462:
00000466 46FC 2700                  		move	#$2700,sr
0000046A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000470 6100 0000                  		bsr.w	ShowErrorMsg
00000474 202F 0002                  		move.l	2(sp),d0
00000478 6100 0000                  		bsr.w	sub_5BA
0000047C                            
0000047C                            loc_478:
0000047C 6100 0000                  		bsr.w	ErrorWaitForC
00000480 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000486 46FC 2300                  		move	#$2300,sr
0000048A 4E73                       		rte	
0000048C                            
0000048C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000048C                            
0000048C                            
0000048C                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000048C 4DF9 00C0 0000             		lea	($C00000).l,a6
00000492 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
0000049C 41F9 0000 0000             		lea	(Art_Text).l,a0
000004A2 323C 027F                  		move.w	#$27F,d1
000004A6                            
000004A6                            Error_LoadGfx:
000004A6 3C98                       		move.w	(a0)+,(a6)
000004A8 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004AC 7000                       		moveq	#0,d0		; clear	d0
000004AE 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004B2 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B6 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004BA 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C4 7212                       		moveq	#$12,d1		; number of characters
000004C6                            
000004C6                            Error_LoopChars:
000004C6 7000                       		moveq	#0,d0
000004C8 1018                       		move.b	(a0)+,d0
000004CA 0640 0790                  		addi.w	#$790,d0
000004CE 3C80                       		move.w	d0,(a6)
000004D0 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D4 4E75                       		rts	
000004D6                            ; End of function ShowErrorMsg
000004D6                            
000004D6                            ; ===========================================================================
000004D6 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004DA 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DE 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004E2 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E6 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004EA 0000                       		dc.w asc_5A6-ErrorText
000004EC 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FF 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000512 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000525 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000538 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000054B 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055E 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000571 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000584 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000597 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005AA 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BE 00                         		even
000005BE                            
000005BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BE                            
000005BE                            
000005BE                            sub_5BA:				; XREF: loc_43A; loc_462
000005BE 3CBC 07CA                  		move.w	#$7CA,(a6)
000005C2 7407                       		moveq	#7,d2
000005C4                            
000005C4                            loc_5C0:
000005C4 E998                       		rol.l	#4,d0
000005C6 6100                       		bsr.s	sub_5CA
000005C8 51CA FFFA                  		dbf	d2,loc_5C0
000005CC 4E75                       		rts	
000005CE                            ; End of function sub_5BA
000005CE                            
000005CE                            
000005CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CE                            
000005CE                            
000005CE                            sub_5CA:				; XREF: sub_5BA
000005CE 3200                       		move.w	d0,d1
000005D0 0241 000F                  		andi.w	#$F,d1
000005D4 0C41 000A                  		cmpi.w	#$A,d1
000005D8 6500                       		bcs.s	loc_5D8
000005DA 5E41                       		addq.w	#7,d1
000005DC                            
000005DC                            loc_5D8:
000005DC 0641 07C0                  		addi.w	#$7C0,d1
000005E0 3C81                       		move.w	d1,(a6)
000005E2 4E75                       		rts	
000005E4                            ; End of function sub_5CA
000005E4                            
000005E4                            
000005E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E4                            
000005E4                            
000005E4                            ErrorWaitForC:				; XREF: loc_478
000005E4 6100 0000                  		bsr.w	ReadJoypads
000005E8 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EE 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005F2 4E75                       		rts	
000005F4                            ; End of function ErrorWaitForC
000005F4                            
000005F4                            ; ===========================================================================
000005F4                            
000005F4                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D34                            Art_Text_end:		even
00000D34                            
00000D34                            ; ===========================================================================
00000D34                            ;VBlank
00000D34                            loc_B10:				; XREF: Vectors
00000D34 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D38 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D3C 6700                       		beq.s	loc_B88
00000D3E 3039 00C0 0004             		move.w	($C00004).l,d0
00000D44 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D4E 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D56 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D5C 6700                       		beq.s	loc_B42
00000D5E 303C 0700                  		move.w	#$700,d0
00000D62                            
00000D62                            loc_B3E:
00000D62 51C8 FFFE                  		dbf	d0,loc_B3E
00000D66                            
00000D66                            loc_B42:
00000D66 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D6A 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D70 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D76 0240 003E                  		andi.w	#$3E,d0
00000D7A 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D7E 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D82                            
00000D82                            loc_B5E:				; XREF: loc_B88
00000D82 4EB9 0000 0000             		jsr	sub_71B4C
00000D88                            
00000D88                            loc_B64:				; XREF: loc_D50
00000D88 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D8C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D90 4E73                       		rte	
00000D92                            ; ===========================================================================
00000D92 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D96 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D9A 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D9E 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000DA2 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DA6 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DAA 0000                       		dc.w loc_E72-off_B6E
00000DAC                            ; ===========================================================================
00000DAC                            
00000DAC                            loc_B88:				; XREF: loc_B10; off_B6E
00000DAC 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DB2 6700                       		beq.s	loc_B9A
00000DB4 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DBA 6600 FFC6                  		bne.w	loc_B5E
00000DBE                            
00000DBE                            loc_B9A:
00000DBE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DC4 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DC8 3039 00C0 0004             		move.w	($C00004).l,d0
00000DCE 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DD4 6700                       		beq.s	loc_BBA
00000DD6 303C 0700                  		move.w	#$700,d0
00000DDA                            
00000DDA                            loc_BB6:
00000DDA 51C8 FFFE                  		dbf	d0,loc_BB6
00000DDE                            
00000DDE                            loc_BBA:
00000DDE 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DE4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DEC                            
00000DEC                            loc_BC8:
00000DEC 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DF4 66F6                       		bne.s	loc_BC8
00000DF6 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DFA 6600                       		bne.s	loc_BFE
00000DFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E02 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E08 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E0E 3ABC 977F                  		move.w	#$977F,(a5)
00000E12 3ABC C000                  		move.w	#$C000,(a5)
00000E16 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E20 6000                       		bra.s	loc_C22
00000E22                            ; ===========================================================================
00000E22                            
00000E22                            loc_BFE:				; XREF: loc_BC8
00000E22 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E28 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E2E 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E34 3ABC 977F                  		move.w	#$977F,(a5)
00000E38 3ABC C000                  		move.w	#$C000,(a5)
00000E3C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E42 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E46                            
00000E46                            loc_C22:				; XREF: loc_BC8
00000E46 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E4A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E52 6000 FF2E                  		bra.w	loc_B5E
00000E56                            ; ===========================================================================
00000E56                            
00000E56                            loc_C32:				; XREF: off_B6E
00000E56 6100 0000                  		bsr.w	sub_106E
00000E5A                            
00000E5A                            loc_C36:				; XREF: off_B6E
00000E5A 4A78 F614                  		tst.w	($FFFFF614).w
00000E5E 6700 0000                  		beq.w	locret_C42
00000E62 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E66                            
00000E66                            locret_C42:
00000E66 4E75                       		rts	
00000E68                            ; ===========================================================================
00000E68                            
00000E68                            loc_C44:				; XREF: off_B6E
00000E68 6100 0000                  		bsr.w	sub_106E
00000E6C 6100 0000                  		bsr.w	sub_6886
00000E70 6100 0000                  		bsr.w	sub_1642
00000E74 4A78 F614                  		tst.w	($FFFFF614).w
00000E78 6700 0000                  		beq.w	locret_C5C
00000E7C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E80                            
00000E80                            locret_C5C:
00000E80 4E75                       		rts	
00000E82                            ; ===========================================================================
00000E82                            
00000E82                            loc_C5E:				; XREF: off_B6E
00000E82 6100 0000                  		bsr.w	sub_106E
00000E86 4E75                       		rts	
00000E88                            ; ===========================================================================
00000E88                            
00000E88                            loc_C64:				; XREF: off_B6E
00000E88 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E8E 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E92                            
00000E92                            loc_C6E:				; XREF: off_B6E
00000E92 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E9A                            
00000E9A                            loc_C76:
00000E9A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000EA2 66F6                       		bne.s	loc_C76		; if not, branch
00000EA4 6100 0000                  		bsr.w	ReadJoypads
00000EA8 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EAC 6600                       		bne.s	loc_CB0
00000EAE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EB4 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EBA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EC0 3ABC 977F                  		move.w	#$977F,(a5)
00000EC4 3ABC C000                  		move.w	#$C000,(a5)
00000EC8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ECE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ED2 6000                       		bra.s	loc_CD4
00000ED4                            ; ===========================================================================
00000ED4                            
00000ED4                            loc_CB0:				; XREF: loc_C76
00000ED4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EDA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EE0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EE6 3ABC 977F                  		move.w	#$977F,(a5)
00000EEA 3ABC C000                  		move.w	#$C000,(a5)
00000EEE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EF4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF8                            
00000EF8                            loc_CD4:				; XREF: loc_C76
00000EF8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F02 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F08 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F0E 3ABC 977F                  		move.w	#$977F,(a5)
00000F12 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F16 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F20 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F26 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F2C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F32 3ABC 977F                  		move.w	#$977F,(a5)
00000F36 3ABC 7800                  		move.w	#$7800,(a5)
00000F3A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F40 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F44 4A38 F767                  		tst.b	($FFFFF767).w
00000F48 6700                       		beq.s	loc_D50
00000F4A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F50 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F56 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F5C 3ABC 977F                  		move.w	#$977F,(a5)
00000F60 3ABC 7000                  		move.w	#$7000,(a5)
00000F64 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F6A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F6E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F74                            
00000F74                            loc_D50:
00000F74 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F7C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F82 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F88 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F8E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F94 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F9A 6400                       		bcc.s	Demo_Time
00000F9C 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000FA2 588F                       		addq.l	#4,sp
00000FA4 6000 FDE2                  		bra.w	loc_B64
00000FA8                            
00000FA8                            ; ---------------------------------------------------------------------------
00000FA8                            ; Subroutine to	run a demo for an amount of time
00000FA8                            ; ---------------------------------------------------------------------------
00000FA8                            
00000FA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FA8                            
00000FA8                            
00000FA8                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FA8 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FAC 4EB9 0000 0000             		jsr	AniArt_Load
00000FB2 4EB9 0000 0000             		jsr	HudUpdate
00000FB8 6100 0000                  		bsr.w	sub_165E
00000FBC 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FC0 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FC4 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FC8                            
00000FC8                            Demo_TimeEnd:
00000FC8 4E75                       		rts	
00000FCA                            ; End of function Demo_Time
00000FCA                            
00000FCA                            ; ===========================================================================
00000FCA                            
00000FCA                            loc_DA6:				; XREF: off_B6E
00000FCA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FD2                            
00000FD2                            loc_DAE:
00000FD2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FDA 66F6                       		bne.s	loc_DAE		; if not, branch
00000FDC 6100 0000                  		bsr.w	ReadJoypads
00000FE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FEC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FF2 3ABC 977F                  		move.w	#$977F,(a5)
00000FF6 3ABC C000                  		move.w	#$C000,(a5)
00000FFA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001000 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001004 4BF9 00C0 0004             		lea	($C00004).l,a5
0000100A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001010 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001016 3ABC 977F                  		move.w	#$977F,(a5)
0000101A 3ABC 7800                  		move.w	#$7800,(a5)
0000101E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001024 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001028 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001034 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000103A 3ABC 977F                  		move.w	#$977F,(a5)
0000103E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001042 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001048 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000104C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001054 6100 0000                  		bsr.w	PalCycle_SS
00001058 4A38 F767                  		tst.b	($FFFFF767).w
0000105C 6700                       		beq.s	loc_E64
0000105E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001064 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000106A 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001070 3ABC 977F                  		move.w	#$977F,(a5)
00001074 3ABC 7000                  		move.w	#$7000,(a5)
00001078 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000107E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001082 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001088                            
00001088                            loc_E64:
00001088 4A78 F614                  		tst.w	($FFFFF614).w
0000108C 6700 0000                  		beq.w	locret_E70
00001090 5378 F614                  		subq.w	#1,($FFFFF614).w
00001094                            
00001094                            locret_E70:
00001094 4E75                       		rts	
00001096                            ; ===========================================================================
00001096                            
00001096                            loc_E72:				; XREF: off_B6E
00001096 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000109E                            
0000109E                            loc_E7A:
0000109E 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010A6 66F6                       		bne.s	loc_E7A		; if not, branch
000010A8 6100 0000                  		bsr.w	ReadJoypads
000010AC 4A38 F64E                  		tst.b	($FFFFF64E).w
000010B0 6600                       		bne.s	loc_EB4
000010B2 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010C4 3ABC 977F                  		move.w	#$977F,(a5)
000010C8 3ABC C000                  		move.w	#$C000,(a5)
000010CC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010D2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D6 6000                       		bra.s	loc_ED8
000010D8                            ; ===========================================================================
000010D8                            
000010D8                            loc_EB4:				; XREF: loc_E7A
000010D8 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DE 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010E4 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010EA 3ABC 977F                  		move.w	#$977F,(a5)
000010EE 3ABC C000                  		move.w	#$C000,(a5)
000010F2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010F8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010FC                            
000010FC                            loc_ED8:				; XREF: loc_E7A
000010FC 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001100 4BF9 00C0 0004             		lea	($C00004).l,a5
00001106 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000110C 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001112                            
00001112                            loc_EEE:
00001112 3ABC 977F                  		move.w	#$977F,(a5)
00001116 3ABC 7C00                  		move.w	#$7C00,(a5)
0000111A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001120 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001124 4BF9 00C0 0004             		lea	($C00004).l,a5
0000112A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001130 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001136 3ABC 977F                  		move.w	#$977F,(a5)
0000113A 3ABC 7800                  		move.w	#$7800,(a5)
0000113E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001144 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001148 4A38 F767                  		tst.b	($FFFFF767).w
0000114C 6700                       		beq.s	loc_F54
0000114E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001154 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000115A 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001160 3ABC 977F                  		move.w	#$977F,(a5)
00001164 3ABC 7000                  		move.w	#$7000,(a5)
00001168 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000116E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001172 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001178                            
00001178                            loc_F54:
00001178 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001180 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001186 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
0000118C 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00001192 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001198 6100 0000                  		bsr.w	LoadTilesAsYouMove
0000119C 4EB9 0000 0000             		jsr	AniArt_Load
000011A2 4EB9 0000 0000             		jsr	HudUpdate
000011A8 6100 0000                  		bsr.w	sub_1642
000011AC 4E75                       		rts	
000011AE                            ; ===========================================================================
000011AE                            
000011AE                            loc_F8A:				; XREF: off_B6E
000011AE 6100 0000                  		bsr.w	sub_106E
000011B2 5238 F628                  		addq.b	#1,($FFFFF628).w
000011B6 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011BC 4E75                       		rts	
000011BE                            ; ===========================================================================
000011BE                            
000011BE                            loc_F9A:				; XREF: off_B6E
000011BE 6100 0000                  		bsr.w	sub_106E
000011C2 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011C6 6000 0000                  		bra.w	sub_1642
000011CA                            ; ===========================================================================
000011CA                            
000011CA                            loc_FA6:				; XREF: off_B6E
000011CA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011D2                            
000011D2                            loc_FAE:
000011D2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011DA 66F6                       		bne.s	loc_FAE		; if not, branch
000011DC 6100 0000                  		bsr.w	ReadJoypads
000011E0 4BF9 00C0 0004             		lea	($C00004).l,a5
000011E6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011EC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011F2 3ABC 977F                  		move.w	#$977F,(a5)
000011F6 3ABC C000                  		move.w	#$C000,(a5)
000011FA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001200 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001204 4BF9 00C0 0004             		lea	($C00004).l,a5
0000120A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001210 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001216 3ABC 977F                  		move.w	#$977F,(a5)
0000121A 3ABC 7800                  		move.w	#$7800,(a5)
0000121E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001224 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001228 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001234 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000123A 3ABC 977F                  		move.w	#$977F,(a5)
0000123E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001242 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001248 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000124C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001254 4A38 F767                  		tst.b	($FFFFF767).w
00001258 6700                       		beq.s	loc_1060
0000125A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001260 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001266 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000126C 3ABC 977F                  		move.w	#$977F,(a5)
00001270 3ABC 7000                  		move.w	#$7000,(a5)
00001274 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000127A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000127E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001284                            
00001284                            loc_1060:
00001284 4A78 F614                  		tst.w	($FFFFF614).w
00001288 6700 0000                  		beq.w	locret_106C
0000128C 5378 F614                  		subq.w	#1,($FFFFF614).w
00001290                            
00001290                            locret_106C:
00001290 4E75                       		rts	
00001292                            
00001292                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001292                            
00001292                            
00001292                            sub_106E:				; XREF: loc_C32; et al
00001292 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000129A                            
0000129A                            loc_1076:
0000129A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000012A2 66F6                       		bne.s	loc_1076	; if not, branch
000012A4 6100 0000                  		bsr.w	ReadJoypads
000012A8 4A38 F64E                  		tst.b	($FFFFF64E).w
000012AC 6600                       		bne.s	loc_10B0
000012AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000012B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012C0 3ABC 977F                  		move.w	#$977F,(a5)
000012C4 3ABC C000                  		move.w	#$C000,(a5)
000012C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012D2 6000                       		bra.s	loc_10D4
000012D4                            ; ===========================================================================
000012D4                            
000012D4                            loc_10B0:				; XREF: sub_106E
000012D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012DA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012E0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012E6 3ABC 977F                  		move.w	#$977F,(a5)
000012EA 3ABC C000                  		move.w	#$C000,(a5)
000012EE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012F8                            
000012F8                            loc_10D4:				; XREF: sub_106E
000012F8 4BF9 00C0 0004             		lea	($C00004).l,a5
000012FE 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001304 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000130A 3ABC 977F                  		move.w	#$977F,(a5)
0000130E 3ABC 7800                  		move.w	#$7800,(a5)
00001312 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001318 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000131C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001322 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001328 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000132E 3ABC 977F                  		move.w	#$977F,(a5)
00001332 3ABC 7C00                  		move.w	#$7C00,(a5)
00001336 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000133C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001340 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001348 4E75                       		rts	
0000134A                            ; End of function sub_106E
0000134A                            
0000134A                            ; ---------------------------------------------------------------------------
0000134A                            ; Subroutine to	move pallets from the RAM to CRAM
0000134A                            ; ---------------------------------------------------------------------------
0000134A                            
0000134A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000134A                            
0000134A                            
0000134A                            PalToCRAM:
0000134A 46FC 2700                  		move	#$2700,sr
0000134E 4A78 F644                  		tst.w	($FFFFF644).w
00001352 6700                       		beq.s	locret_119C
00001354 31FC 0000 F644             		move.w	#0,($FFFFF644).w
0000135A 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000135E 43F9 00C0 0000             		lea	($C00000).l,a1
00001364 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001368 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001370 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 2298                       		move.l	(a0)+,(a1)
00001380 2298                       		move.l	(a0)+,(a1)
00001382 2298                       		move.l	(a0)+,(a1)
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 2298                       		move.l	(a0)+,(a1)
000013AE 2298                       		move.l	(a0)+,(a1)
000013B0 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013B6 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013BA 4A38 F64F                  		tst.b	($FFFFF64F).w
000013BE 6600                       		bne.s	loc_119E
000013C0                            
000013C0                            locret_119C:
000013C0 4E73                       		rte	
000013C2                            ; ===========================================================================
000013C2                            
000013C2                            loc_119E:				; XREF: PalToCRAM
000013C2 4238 F64F                  		clr.b	($FFFFF64F).w
000013C6 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013CA 6100 FBDC                  		bsr.w	Demo_Time
000013CE 4EB9 0000 0000             		jsr	sub_71B4C
000013D4 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013D8 4E73                       		rte	
000013DA                            ; End of function PalToCRAM
000013DA                            
000013DA                            ; ---------------------------------------------------------------------------
000013DA                            ; Subroutine to	initialise joypads
000013DA                            ; ---------------------------------------------------------------------------
000013DA                            
000013DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013DA                            
000013DA                            
000013DA                            JoypadInit:				; XREF: GameClrRAM
000013DA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013E2                            
000013E2                            Joypad_WaitZ80:
000013E2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013EA 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013EC 7040                       		moveq	#$40,d0
000013EE 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013F4 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013FA 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001400 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001408 4E75                       		rts	
0000140A                            ; End of function JoypadInit
0000140A                            
0000140A                            ; ---------------------------------------------------------------------------
0000140A                            ; Subroutine to	read joypad input, and send it to the RAM
0000140A                            ; ---------------------------------------------------------------------------
0000140A                            
0000140A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000140A                            
0000140A                            
0000140A                            ReadJoypads:
0000140A 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
0000140E 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001414 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001416 5449                       		addq.w	#2,a1		; do the second	joypad
00001418                            
00001418                            Joypad_Read:
00001418 12BC 0000                  		move.b	#0,(a1)
0000141C 4E71                       		nop	
0000141E 4E71                       		nop	
00001420 1011                       		move.b	(a1),d0
00001422 E508                       		lsl.b	#2,d0
00001424 0200 00C0                  		andi.b	#$C0,d0
00001428 12BC 0040                  		move.b	#$40,(a1)
0000142C 4E71                       		nop	
0000142E 4E71                       		nop	
00001430 1211                       		move.b	(a1),d1
00001432 0201 003F                  		andi.b	#$3F,d1
00001436 8001                       		or.b	d1,d0
00001438 4600                       		not.b	d0
0000143A 1210                       		move.b	(a0),d1
0000143C B101                       		eor.b	d0,d1
0000143E 10C0                       		move.b	d0,(a0)+
00001440 C200                       		and.b	d0,d1
00001442 10C1                       		move.b	d1,(a0)+
00001444 4E75                       		rts	
00001446                            ; End of function ReadJoypads
00001446                            
00001446                            
00001446                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001446                            
00001446                            
00001446                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001446 41F9 00C0 0004             		lea	($C00004).l,a0
0000144C 43F9 00C0 0000             		lea	($C00000).l,a1
00001452 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001458 7E12                       		moveq	#$12,d7
0000145A                            
0000145A                            VDP_Loop:
0000145A 309A                       		move.w	(a2)+,(a0)
0000145C 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001460                            
00001460 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001466 31C0 F60C                  		move.w	d0,($FFFFF60C).w
0000146A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001470 7000                       		moveq	#0,d0
00001472 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000147C 3E3C 003F                  		move.w	#$3F,d7
00001480                            
00001480                            VDP_ClrCRAM:
00001480 3280                       		move.w	d0,(a1)
00001482 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001486                            
00001486 42B8 F616                  		clr.l	($FFFFF616).w
0000148A 42B8 F61A                  		clr.l	($FFFFF61A).w
0000148E 2F01                       		move.l	d1,-(sp)
00001490 4BF9 00C0 0004             		lea	($C00004).l,a5
00001496 3ABC 8F01                  		move.w	#$8F01,(a5)
0000149A 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000014A0 3ABC 9780                  		move.w	#$9780,(a5)
000014A4 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014AA 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014B2                            
000014B2                            loc_128E:
000014B2 3215                       		move.w	(a5),d1
000014B4 0801 0001                  		btst	#1,d1
000014B8 66F8                       		bne.s	loc_128E
000014BA                            
000014BA 3ABC 8F02                  		move.w	#$8F02,(a5)
000014BE 221F                       		move.l	(sp)+,d1
000014C0 4E75                       		rts	
000014C2                            ; End of function VDPSetupGame
000014C2                            
000014C2                            ; ===========================================================================
000014C2 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014CA 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014D2 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014DA 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014E2 9001 9100 9200             		dc.w $9001, $9100, $9200
000014E8                            
000014E8                            ; ---------------------------------------------------------------------------
000014E8                            ; Subroutine to	clear the screen
000014E8                            ; ---------------------------------------------------------------------------
000014E8                            
000014E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E8                            
000014E8                            
000014E8                            ClearScreen:
000014E8 4BF9 00C0 0004             		lea	($C00004).l,a5
000014EE 3ABC 8F01                  		move.w	#$8F01,(a5)
000014F2 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014F8 3ABC 9780                  		move.w	#$9780,(a5)
000014FC 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001502 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000150A                            
0000150A                            loc_12E6:
0000150A 3215                       		move.w	(a5),d1
0000150C 0801 0001                  		btst	#1,d1
00001510 66F8                       		bne.s	loc_12E6
00001512                            
00001512 3ABC 8F02                  		move.w	#$8F02,(a5)
00001516 4BF9 00C0 0004             		lea	($C00004).l,a5
0000151C 3ABC 8F01                  		move.w	#$8F01,(a5)
00001520 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001526 3ABC 9780                  		move.w	#$9780,(a5)
0000152A 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001530 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001538                            
00001538                            loc_1314:
00001538 3215                       		move.w	(a5),d1
0000153A 0801 0001                  		btst	#1,d1
0000153E 66F8                       		bne.s	loc_1314
00001540                            
00001540 3ABC 8F02                  		move.w	#$8F02,(a5)
00001544 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
0000154C 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001554 43F8 F800                  		lea	($FFFFF800).w,a1
00001558 7000                       		moveq	#0,d0
0000155A 323C 009F                  		move.w	#$9F,d1
0000155E                            
0000155E                            loc_133A:
0000155E 22C0                       		move.l	d0,(a1)+
00001560 51C9 FFFC                  		dbf	d1,loc_133A
00001564                            
00001564 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001568 7000                       		moveq	#0,d0
0000156A 323C 00FF                  		move.w	#$FF,d1
0000156E                            
0000156E                            loc_134A:
0000156E 22C0                       		move.l	d0,(a1)+
00001570 51C9 FFFC                  		dbf	d1,loc_134A
00001574 4E75                       		rts	
00001576                            ; End of function ClearScreen
00001576                            
00001576                            ; ---------------------------------------------------------------------------
00001576                            ; Subroutine to	load the sound driver
00001576                            ; ---------------------------------------------------------------------------
00001576                            
00001576                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001576                            
00001576                            
00001576                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001576 4E71                       		nop	
00001578 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001580 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001588 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000158E 43F9 00A0 0000             		lea	($A00000).l,a1
00001594 6100 0000                  		bsr.w	KosDec		; decompress
00001598 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
000015A0 4E71                       		nop	
000015A2 4E71                       		nop	
000015A4 4E71                       		nop	
000015A6 4E71                       		nop	
000015A8 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015B0 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015B8 4E75                       		rts	
000015BA                            ; End of function SoundDriverLoad
000015BA                            
000015BA                            ; ---------------------------------------------------------------------------
000015BA                            ; Subroutine to	play a sound or	music track
000015BA                            ; ---------------------------------------------------------------------------
000015BA                            
000015BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015BA                            
000015BA                            
000015BA                            PlaySound:
000015BA 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015BE 4E75                       		rts	
000015C0                            ; End of function PlaySound
000015C0                            
000015C0                            ; ---------------------------------------------------------------------------
000015C0                            ; Subroutine to	play a special sound/music (E0-E4)
000015C0                            ;
000015C0                            ; E0 - Fade out
000015C0                            ; E1 - Sega
000015C0                            ; E2 - Speed up
000015C0                            ; E3 - Normal speed
000015C0                            ; E4 - Stop
000015C0                            ; ---------------------------------------------------------------------------
000015C0                            
000015C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015C0                            
000015C0                            
000015C0                            PlaySound_Special:
000015C0 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015C4 4E75                       		rts	
000015C6                            ; End of function PlaySound_Special
000015C6                            
000015C6                            ; ===========================================================================
000015C6                            ; ---------------------------------------------------------------------------
000015C6                            ; Unused sound/music subroutine
000015C6                            ; ---------------------------------------------------------------------------
000015C6                            
000015C6                            PlaySound_Unk:
000015C6 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015CA 4E75                       		rts	
000015CC                            
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            ; Subroutine to	pause the game
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            
000015CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015CC                            
000015CC                            
000015CC                            PauseGame:				; XREF: Level_MainLoop; et al
000015CC 4E71                       		nop	
000015CE 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015D2 6700                       		beq.s	Unpause		; if not, branch
000015D4 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015D8 6600                       		bne.s	loc_13BE	; if yes, branch
000015DA 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015E0 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015E2                            
000015E2                            loc_13BE:
000015E2 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015E8 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015EE                            
000015EE                            loc_13CA:
000015EE 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015F4 6100 0000                  		bsr.w	DelayProgram
000015F8 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015FC 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015FE 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001604 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001606 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
0000160C 4E71                       		nop	
0000160E 6000                       		bra.s	loc_1404
00001610                            ; ===========================================================================
00001610                            
00001610                            Pause_ChkBC:				; XREF: PauseGame
00001610 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001616 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001618 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000161E 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001620                            
00001620                            Pause_ChkStart:				; XREF: PauseGame
00001620 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001626 67C6                       		beq.s	loc_13CA	; if not, branch
00001628                            
00001628                            loc_1404:				; XREF: PauseGame
00001628 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000162E                            
0000162E                            Unpause:				; XREF: PauseGame
0000162E 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001634                            
00001634                            Pause_DoNothing:			; XREF: PauseGame
00001634 4E75                       		rts	
00001636                            ; ===========================================================================
00001636                            
00001636                            Pause_SlowMo:				; XREF: PauseGame
00001636 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
0000163C 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001642 4E75                       		rts	
00001644                            ; End of function PauseGame
00001644                            
00001644                            ; ---------------------------------------------------------------------------
00001644                            ; Subroutine to	display	patterns via the VDP
00001644                            ; ---------------------------------------------------------------------------
00001644                            
00001644                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001644                            
00001644                            
00001644                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001644 4DF9 00C0 0000             		lea	($C00000).l,a6
0000164A 283C 0080 0000             		move.l	#$800000,d4
00001650                            
00001650                            loc_142C:
00001650 2D40 0004                  		move.l	d0,4(a6)
00001654 3601                       		move.w	d1,d3
00001656                            
00001656                            loc_1432:
00001656 3C99                       		move.w	(a1)+,(a6)
00001658 51CB FFFC                  		dbf	d3,loc_1432
0000165C D084                       		add.l	d4,d0
0000165E 51CA FFF0                  		dbf	d2,loc_142C
00001662 4E75                       		rts	
00001664                            ; End of function ShowVDPGraphics
00001664                            
00001664                            ; ---------------------------------------------------------------------------
00001664                            ; Nemesis decompression	algorithm
00001664                            ; ---------------------------------------------------------------------------
00001664                            
00001664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001664                            
00001664                            
00001664                            NemDec:
00001664 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001668 47F9 0000 0000             		lea	(loc_1502).l,a3
0000166E 49F9 00C0 0000             		lea	($C00000).l,a4
00001674 6000                       		bra.s	loc_145C
00001676                            ; ===========================================================================
00001676 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000167A 47F9 0000 0000             		lea	(loc_1518).l,a3
00001680                            
00001680                            loc_145C:				; XREF: NemDec
00001680 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001684 3418                       		move.w	(a0)+,d2
00001686 E34A                       		lsl.w	#1,d2
00001688 6400                       		bcc.s	loc_146A
0000168A D6FC 000A                  		adda.w	#$A,a3
0000168E                            
0000168E                            loc_146A:
0000168E E54A                       		lsl.w	#2,d2
00001690 3A42                       		movea.w	d2,a5
00001692 7608                       		moveq	#8,d3
00001694 7400                       		moveq	#0,d2
00001696 7800                       		moveq	#0,d4
00001698 6100 0000                  		bsr.w	NemDec4
0000169C 1A18                       		move.b	(a0)+,d5
0000169E E145                       		asl.w	#8,d5
000016A0 1A18                       		move.b	(a0)+,d5
000016A2 3C3C 0010                  		move.w	#$10,d6
000016A6 6100                       		bsr.s	NemDec2
000016A8 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016AC 4E75                       		rts	
000016AE                            ; End of function NemDec
000016AE                            
000016AE                            
000016AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AE                            
000016AE                            
000016AE                            NemDec2:				; XREF: NemDec
000016AE 3E06                       		move.w	d6,d7
000016B0 5147                       		subq.w	#8,d7
000016B2 3205                       		move.w	d5,d1
000016B4 EE69                       		lsr.w	d7,d1
000016B6 0C01 00FC                  		cmpi.b	#-4,d1
000016BA 6400                       		bcc.s	loc_14D6
000016BC 0241 00FF                  		andi.w	#$FF,d1
000016C0 D241                       		add.w	d1,d1
000016C2 1031 1000                  		move.b	(a1,d1.w),d0
000016C6 4880                       		ext.w	d0
000016C8 9C40                       		sub.w	d0,d6
000016CA 0C46 0009                  		cmpi.w	#9,d6
000016CE 6400                       		bcc.s	loc_14B2
000016D0 5046                       		addq.w	#8,d6
000016D2 E145                       		asl.w	#8,d5
000016D4 1A18                       		move.b	(a0)+,d5
000016D6                            
000016D6                            loc_14B2:
000016D6 1231 1001                  		move.b	1(a1,d1.w),d1
000016DA 3001                       		move.w	d1,d0
000016DC 0241 000F                  		andi.w	#$F,d1
000016E0 0240 00F0                  		andi.w	#$F0,d0
000016E4                            
000016E4                            loc_14C0:				; XREF: NemDec3
000016E4 E848                       		lsr.w	#4,d0
000016E6                            
000016E6                            loc_14C2:				; XREF: NemDec3
000016E6 E98C                       		lsl.l	#4,d4
000016E8 8801                       		or.b	d1,d4
000016EA 5343                       		subq.w	#1,d3
000016EC 6600                       		bne.s	loc_14D0
000016EE 4ED3                       		jmp	(a3)
000016F0                            ; End of function NemDec2
000016F0                            
000016F0                            
000016F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016F0                            
000016F0                            
000016F0                            NemDec3:				; XREF: loc_1502
000016F0 7800                       		moveq	#0,d4
000016F2 7608                       		moveq	#8,d3
000016F4                            
000016F4                            loc_14D0:				; XREF: NemDec2
000016F4 51C8 FFF0                  		dbf	d0,loc_14C2
000016F8 60B4                       		bra.s	NemDec2
000016FA                            ; ===========================================================================
000016FA                            
000016FA                            loc_14D6:				; XREF: NemDec2
000016FA 5D46                       		subq.w	#6,d6
000016FC 0C46 0009                  		cmpi.w	#9,d6
00001700 6400                       		bcc.s	loc_14E4
00001702 5046                       		addq.w	#8,d6
00001704 E145                       		asl.w	#8,d5
00001706 1A18                       		move.b	(a0)+,d5
00001708                            
00001708                            loc_14E4:				; XREF: NemDec3
00001708 5F46                       		subq.w	#7,d6
0000170A 3205                       		move.w	d5,d1
0000170C EC69                       		lsr.w	d6,d1
0000170E 3001                       		move.w	d1,d0
00001710 0241 000F                  		andi.w	#$F,d1
00001714 0240 0070                  		andi.w	#$70,d0
00001718 0C46 0009                  		cmpi.w	#9,d6
0000171C 64C6                       		bcc.s	loc_14C0
0000171E 5046                       		addq.w	#8,d6
00001720 E145                       		asl.w	#8,d5
00001722 1A18                       		move.b	(a0)+,d5
00001724 60BE                       		bra.s	loc_14C0
00001726                            ; End of function NemDec3
00001726                            
00001726                            ; ===========================================================================
00001726                            
00001726                            loc_1502:				; XREF: NemDec
00001726 2884                       		move.l	d4,(a4)
00001728 534D                       		subq.w	#1,a5
0000172A 380D                       		move.w	a5,d4
0000172C 66C2                       		bne.s	NemDec3
0000172E 4E75                       		rts	
00001730                            ; ===========================================================================
00001730 B982                       		eor.l	d4,d2
00001732 2882                       		move.l	d2,(a4)
00001734 534D                       		subq.w	#1,a5
00001736 380D                       		move.w	a5,d4
00001738 66B6                       		bne.s	NemDec3
0000173A 4E75                       		rts	
0000173C                            ; ===========================================================================
0000173C                            
0000173C                            loc_1518:				; XREF: NemDec
0000173C 28C4                       		move.l	d4,(a4)+
0000173E 534D                       		subq.w	#1,a5
00001740 380D                       		move.w	a5,d4
00001742 66AC                       		bne.s	NemDec3
00001744 4E75                       		rts	
00001746                            ; ===========================================================================
00001746 B982                       		eor.l	d4,d2
00001748 28C2                       		move.l	d2,(a4)+
0000174A 534D                       		subq.w	#1,a5
0000174C 380D                       		move.w	a5,d4
0000174E 66A0                       		bne.s	NemDec3
00001750 4E75                       		rts	
00001752                            
00001752                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001752                            
00001752                            
00001752                            NemDec4:				; XREF: NemDec
00001752 1018                       		move.b	(a0)+,d0
00001754                            
00001754                            loc_1530:
00001754 0C00 00FF                  		cmpi.b	#-1,d0
00001758 6600                       		bne.s	loc_1538
0000175A 4E75                       		rts	
0000175C                            ; ===========================================================================
0000175C                            
0000175C                            loc_1538:				; XREF: NemDec4
0000175C 3E00                       		move.w	d0,d7
0000175E                            
0000175E                            loc_153A:
0000175E 1018                       		move.b	(a0)+,d0
00001760 0C00 0080                  		cmpi.b	#$80,d0
00001764 64EE                       		bcc.s	loc_1530
00001766 1200                       		move.b	d0,d1
00001768 0247 000F                  		andi.w	#$F,d7
0000176C 0241 0070                  		andi.w	#$70,d1
00001770 8E41                       		or.w	d1,d7
00001772 0240 000F                  		andi.w	#$F,d0
00001776 1200                       		move.b	d0,d1
00001778 E149                       		lsl.w	#8,d1
0000177A 8E41                       		or.w	d1,d7
0000177C 7208                       		moveq	#8,d1
0000177E 9240                       		sub.w	d0,d1
00001780 6600                       		bne.s	loc_1568
00001782 1018                       		move.b	(a0)+,d0
00001784 D040                       		add.w	d0,d0
00001786 3387 0000                  		move.w	d7,(a1,d0.w)
0000178A 60D2                       		bra.s	loc_153A
0000178C                            ; ===========================================================================
0000178C                            
0000178C                            loc_1568:				; XREF: NemDec4
0000178C 1018                       		move.b	(a0)+,d0
0000178E E368                       		lsl.w	d1,d0
00001790 D040                       		add.w	d0,d0
00001792 7A01                       		moveq	#1,d5
00001794 E36D                       		lsl.w	d1,d5
00001796 5345                       		subq.w	#1,d5
00001798                            
00001798                            loc_1574:
00001798 3387 0000                  		move.w	d7,(a1,d0.w)
0000179C 5440                       		addq.w	#2,d0
0000179E 51CD FFF8                  		dbf	d5,loc_1574
000017A2 60BA                       		bra.s	loc_153A
000017A4                            ; End of function NemDec4
000017A4                            
000017A4                            ; ---------------------------------------------------------------------------
000017A4                            ; Subroutine to	load pattern load cues
000017A4                            ; ---------------------------------------------------------------------------
000017A4                            
000017A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A4                            
000017A4                            
000017A4                            LoadPLC:
000017A4 48E7 0060                  		movem.l	a1-a2,-(sp)
000017A8 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017AE D040                       		add.w	d0,d0
000017B0 3031 0000                  		move.w	(a1,d0.w),d0
000017B4 43F1 0000                  		lea	(a1,d0.w),a1
000017B8 45F8 F680                  		lea	($FFFFF680).w,a2
000017BC                            
000017BC                            loc_1598:
000017BC 4A92                       		tst.l	(a2)
000017BE 6700                       		beq.s	loc_15A0
000017C0 5C4A                       		addq.w	#6,a2
000017C2 60F8                       		bra.s	loc_1598
000017C4                            ; ===========================================================================
000017C4                            
000017C4                            loc_15A0:				; XREF: LoadPLC
000017C4 3019                       		move.w	(a1)+,d0
000017C6 6B00                       		bmi.s	loc_15AC
000017C8                            
000017C8                            loc_15A4:
000017C8 24D9                       		move.l	(a1)+,(a2)+
000017CA 34D9                       		move.w	(a1)+,(a2)+
000017CC 51C8 FFFA                  		dbf	d0,loc_15A4
000017D0                            
000017D0                            loc_15AC:
000017D0 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017D4 4E75                       		rts	
000017D6                            ; End of function LoadPLC
000017D6                            
000017D6                            
000017D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017D6                            
000017D6                            
000017D6                            LoadPLC2:
000017D6 48E7 0060                  		movem.l	a1-a2,-(sp)
000017DA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017E0 D040                       		add.w	d0,d0
000017E2 3031 0000                  		move.w	(a1,d0.w),d0
000017E6 43F1 0000                  		lea	(a1,d0.w),a1
000017EA 6100                       		bsr.s	ClearPLC
000017EC 45F8 F680                  		lea	($FFFFF680).w,a2
000017F0 3019                       		move.w	(a1)+,d0
000017F2 6B00                       		bmi.s	loc_15D8
000017F4                            
000017F4                            loc_15D0:
000017F4 24D9                       		move.l	(a1)+,(a2)+
000017F6 34D9                       		move.w	(a1)+,(a2)+
000017F8 51C8 FFFA                  		dbf	d0,loc_15D0
000017FC                            
000017FC                            loc_15D8:
000017FC 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001800 4E75                       		rts	
00001802                            ; End of function LoadPLC2
00001802                            
00001802                            ; ---------------------------------------------------------------------------
00001802                            ; Subroutine to	clear the pattern load cues
00001802                            ; ---------------------------------------------------------------------------
00001802                            
00001802                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001802                            
00001802                            
00001802                            ClearPLC:				; XREF: LoadPLC2
00001802 45F8 F680                  		lea	($FFFFF680).w,a2
00001806 701F                       		moveq	#$1F,d0
00001808                            
00001808                            ClearPLC_Loop:
00001808 429A                       		clr.l	(a2)+
0000180A 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000180E 4E75                       		rts	
00001810                            ; End of function ClearPLC
00001810                            
00001810                            ; ---------------------------------------------------------------------------
00001810                            ; Subroutine to	use graphics listed in a pattern load cue
00001810                            ; ---------------------------------------------------------------------------
00001810                            
00001810                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001810                            
00001810                            
00001810                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001810 4AB8 F680                  		tst.l	($FFFFF680).w
00001814 6700                       		beq.s	locret_1640
00001816 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000181A 6600                       		bne.s	locret_1640
0000181C 2078 F680                  		movea.l	($FFFFF680).w,a0
00001820 47F9 0000 1726             		lea	(loc_1502).l,a3
00001826 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000182A 3418                       		move.w	(a0)+,d2
0000182C 6A00                       		bpl.s	loc_160E
0000182E D6FC 000A                  		adda.w	#$A,a3
00001832                            
00001832                            loc_160E:
00001832 0242 7FFF                  		andi.w	#$7FFF,d2
00001836 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
0000183A 6100 FF16                  		bsr.w	NemDec4
0000183E 1A18                       		move.b	(a0)+,d5
00001840 E145                       		asl.w	#8,d5
00001842 1A18                       		move.b	(a0)+,d5
00001844 7C10                       		moveq	#$10,d6
00001846 7000                       		moveq	#0,d0
00001848 21C8 F680                  		move.l	a0,($FFFFF680).w
0000184C 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001850 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001854 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001858 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000185C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001860 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001864                            
00001864                            locret_1640:
00001864 4E75                       		rts	
00001866                            ; End of function RunPLC_RAM
00001866                            
00001866                            
00001866                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001866                            
00001866                            
00001866                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001866 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000186A 6700 0000                  		beq.w	locret_16DA
0000186E 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001874 7000                       		moveq	#0,d0
00001876 3038 F684                  		move.w	($FFFFF684).w,d0
0000187A 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001880 6000                       		bra.s	loc_1676
00001882                            ; End of function sub_1642
00001882                            
00001882                            
00001882                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001882                            
00001882                            
00001882                            sub_165E:				; XREF: Demo_Time
00001882 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001886 6700                       		beq.s	locret_16DA
00001888 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000188E 7000                       		moveq	#0,d0
00001890 3038 F684                  		move.w	($FFFFF684).w,d0
00001894 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000189A                            
0000189A                            loc_1676:				; XREF: sub_1642
0000189A 49F9 00C0 0004             		lea	($C00004).l,a4
000018A0 E588                       		lsl.l	#2,d0
000018A2 E448                       		lsr.w	#2,d0
000018A4 0040 4000                  		ori.w	#$4000,d0
000018A8 4840                       		swap	d0
000018AA 2880                       		move.l	d0,(a4)
000018AC 594C                       		subq.w	#4,a4
000018AE 2078 F680                  		movea.l	($FFFFF680).w,a0
000018B2 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018B6 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018BA 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018BE 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018C2 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018C6 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018CA 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018CE                            
000018CE                            loc_16AA:				; XREF: sub_165E
000018CE 3A7C 0008                  		movea.w	#8,a5
000018D2 6100 FE1C                  		bsr.w	NemDec3
000018D6 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018DA 6700                       		beq.s	loc_16DC
000018DC 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018E0 66EC                       		bne.s	loc_16AA
000018E2 21C8 F680                  		move.l	a0,($FFFFF680).w
000018E6 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018EA 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018EE 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018F2 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018F6 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018FA 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018FE                            
000018FE                            locret_16DA:				; XREF: sub_1642
000018FE 4E75                       		rts	
00001900                            ; ===========================================================================
00001900                            
00001900                            loc_16DC:				; XREF: sub_165E
00001900 41F8 F680                  		lea	($FFFFF680).w,a0
00001904 7015                       		moveq	#$15,d0
00001906                            
00001906                            loc_16E2:				; XREF: sub_165E
00001906 20E8 0006                  		move.l	6(a0),(a0)+
0000190A 51C8 FFFA                  		dbf	d0,loc_16E2
0000190E 4E75                       		rts	
00001910                            ; End of function sub_165E
00001910                            
00001910                            ; ---------------------------------------------------------------------------
00001910                            ; Subroutine to	execute	the pattern load cue
00001910                            ; ---------------------------------------------------------------------------
00001910                            
00001910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001910                            
00001910                            
00001910                            RunPLC_ROM:
00001910 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001916 D040                       		add.w	d0,d0
00001918 3031 0000                  		move.w	(a1,d0.w),d0
0000191C 43F1 0000                  		lea	(a1,d0.w),a1
00001920 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001922                            
00001922                            RunPLC_Loop:
00001922 2059                       		movea.l	(a1)+,a0	; get art pointer
00001924 7000                       		moveq	#0,d0
00001926 3019                       		move.w	(a1)+,d0	; get VRAM address
00001928 E588                       		lsl.l	#2,d0		; divide address by $20
0000192A E448                       		lsr.w	#2,d0
0000192C 0040 4000                  		ori.w	#$4000,d0
00001930 4840                       		swap	d0
00001932 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001938 6100 FD2A                  		bsr.w	NemDec		; decompress
0000193C 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001940 4E75                       		rts	
00001942                            ; End of function RunPLC_ROM
00001942                            
00001942                            ; ---------------------------------------------------------------------------
00001942                            ; Enigma decompression algorithm
00001942                            ; ---------------------------------------------------------------------------
00001942                            
00001942                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001942                            
00001942                            
00001942                            EniDec:
00001942 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001946 3640                       		movea.w	d0,a3
00001948 1018                       		move.b	(a0)+,d0
0000194A 4880                       		ext.w	d0
0000194C 3A40                       		movea.w	d0,a5
0000194E 1818                       		move.b	(a0)+,d4
00001950 E70C                       		lsl.b	#3,d4
00001952 3458                       		movea.w	(a0)+,a2
00001954 D4CB                       		adda.w	a3,a2
00001956 3858                       		movea.w	(a0)+,a4
00001958 D8CB                       		adda.w	a3,a4
0000195A 1A18                       		move.b	(a0)+,d5
0000195C E145                       		asl.w	#8,d5
0000195E 1A18                       		move.b	(a0)+,d5
00001960 7C10                       		moveq	#$10,d6
00001962                            
00001962                            loc_173E:				; XREF: loc_1768
00001962 7007                       		moveq	#7,d0
00001964 3E06                       		move.w	d6,d7
00001966 9E40                       		sub.w	d0,d7
00001968 3205                       		move.w	d5,d1
0000196A EE69                       		lsr.w	d7,d1
0000196C 0241 007F                  		andi.w	#$7F,d1
00001970 3401                       		move.w	d1,d2
00001972 0C41 0040                  		cmpi.w	#$40,d1
00001976 6400                       		bcc.s	loc_1758
00001978 7006                       		moveq	#6,d0
0000197A E24A                       		lsr.w	#1,d2
0000197C                            
0000197C                            loc_1758:
0000197C 6100 0000                  		bsr.w	sub_188C
00001980 0242 000F                  		andi.w	#$F,d2
00001984 E849                       		lsr.w	#4,d1
00001986 D241                       		add.w	d1,d1
00001988 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000198C                            ; End of function EniDec
0000198C                            
0000198C                            ; ===========================================================================
0000198C                            
0000198C                            loc_1768:				; XREF: loc_17B4
0000198C 32CA                       		move.w	a2,(a1)+
0000198E 524A                       		addq.w	#1,a2
00001990 51CA FFFA                  		dbf	d2,loc_1768
00001994 60CC                       		bra.s	loc_173E
00001996                            ; ===========================================================================
00001996                            
00001996                            loc_1772:				; XREF: loc_17B4
00001996 32CC                       		move.w	a4,(a1)+
00001998 51CA FFFC                  		dbf	d2,loc_1772
0000199C 60C4                       		bra.s	loc_173E
0000199E                            ; ===========================================================================
0000199E                            
0000199E                            loc_177A:				; XREF: loc_17B4
0000199E 6100 0000                  		bsr.w	loc_17DC
000019A2                            
000019A2                            loc_177E:
000019A2 32C1                       		move.w	d1,(a1)+
000019A4 51CA FFFC                  		dbf	d2,loc_177E
000019A8 60B8                       		bra.s	loc_173E
000019AA                            ; ===========================================================================
000019AA                            
000019AA                            loc_1786:				; XREF: loc_17B4
000019AA 6100 0000                  		bsr.w	loc_17DC
000019AE                            
000019AE                            loc_178A:
000019AE 32C1                       		move.w	d1,(a1)+
000019B0 5241                       		addq.w	#1,d1
000019B2 51CA FFFA                  		dbf	d2,loc_178A
000019B6 60AA                       		bra.s	loc_173E
000019B8                            ; ===========================================================================
000019B8                            
000019B8                            loc_1794:				; XREF: loc_17B4
000019B8 6100 0000                  		bsr.w	loc_17DC
000019BC                            
000019BC                            loc_1798:
000019BC 32C1                       		move.w	d1,(a1)+
000019BE 5341                       		subq.w	#1,d1
000019C0 51CA FFFA                  		dbf	d2,loc_1798
000019C4 609C                       		bra.s	loc_173E
000019C6                            ; ===========================================================================
000019C6                            
000019C6                            loc_17A2:				; XREF: loc_17B4
000019C6 0C42 000F                  		cmpi.w	#$F,d2
000019CA 6700                       		beq.s	loc_17C4
000019CC                            
000019CC                            loc_17A8:
000019CC 6100 0000                  		bsr.w	loc_17DC
000019D0 32C1                       		move.w	d1,(a1)+
000019D2 51CA FFF8                  		dbf	d2,loc_17A8
000019D6 608A                       		bra.s	loc_173E
000019D8                            ; ===========================================================================
000019D8                            
000019D8                            loc_17B4:				; XREF: EniDec
000019D8 60B2                       		bra.s	loc_1768
000019DA                            ; ===========================================================================
000019DA 60B0                       		bra.s	loc_1768
000019DC                            ; ===========================================================================
000019DC 60B8                       		bra.s	loc_1772
000019DE                            ; ===========================================================================
000019DE 60B6                       		bra.s	loc_1772
000019E0                            ; ===========================================================================
000019E0 60BC                       		bra.s	loc_177A
000019E2                            ; ===========================================================================
000019E2 60C6                       		bra.s	loc_1786
000019E4                            ; ===========================================================================
000019E4 60D2                       		bra.s	loc_1794
000019E6                            ; ===========================================================================
000019E6 60DE                       		bra.s	loc_17A2
000019E8                            ; ===========================================================================
000019E8                            
000019E8                            loc_17C4:				; XREF: loc_17A2
000019E8 5348                       		subq.w	#1,a0
000019EA 0C46 0010                  		cmpi.w	#$10,d6
000019EE 6600                       		bne.s	loc_17CE
000019F0 5348                       		subq.w	#1,a0
000019F2                            
000019F2                            loc_17CE:
000019F2 3008                       		move.w	a0,d0
000019F4 E248                       		lsr.w	#1,d0
000019F6 6400                       		bcc.s	loc_17D6
000019F8 5248                       		addq.w	#1,a0
000019FA                            
000019FA                            loc_17D6:
000019FA 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019FE 4E75                       		rts	
00001A00                            ; ===========================================================================
00001A00                            
00001A00                            loc_17DC:				; XREF: loc_17A2
00001A00 360B                       		move.w	a3,d3
00001A02 1204                       		move.b	d4,d1
00001A04 D201                       		add.b	d1,d1
00001A06 6400                       		bcc.s	loc_17EE
00001A08 5346                       		subq.w	#1,d6
00001A0A 0D05                       		btst	d6,d5
00001A0C 6700                       		beq.s	loc_17EE
00001A0E 0043 8000                  		ori.w	#-$8000,d3
00001A12                            
00001A12                            loc_17EE:
00001A12 D201                       		add.b	d1,d1
00001A14 6400                       		bcc.s	loc_17FC
00001A16 5346                       		subq.w	#1,d6
00001A18 0D05                       		btst	d6,d5
00001A1A 6700                       		beq.s	loc_17FC
00001A1C 0643 4000                  		addi.w	#$4000,d3
00001A20                            
00001A20                            loc_17FC:
00001A20 D201                       		add.b	d1,d1
00001A22 6400                       		bcc.s	loc_180A
00001A24 5346                       		subq.w	#1,d6
00001A26 0D05                       		btst	d6,d5
00001A28 6700                       		beq.s	loc_180A
00001A2A 0643 2000                  		addi.w	#$2000,d3
00001A2E                            
00001A2E                            loc_180A:
00001A2E D201                       		add.b	d1,d1
00001A30 6400                       		bcc.s	loc_1818
00001A32 5346                       		subq.w	#1,d6
00001A34 0D05                       		btst	d6,d5
00001A36 6700                       		beq.s	loc_1818
00001A38 0043 1000                  		ori.w	#$1000,d3
00001A3C                            
00001A3C                            loc_1818:
00001A3C D201                       		add.b	d1,d1
00001A3E 6400                       		bcc.s	loc_1826
00001A40 5346                       		subq.w	#1,d6
00001A42 0D05                       		btst	d6,d5
00001A44 6700                       		beq.s	loc_1826
00001A46 0043 0800                  		ori.w	#$800,d3
00001A4A                            
00001A4A                            loc_1826:
00001A4A 3205                       		move.w	d5,d1
00001A4C 3E06                       		move.w	d6,d7
00001A4E 9E4D                       		sub.w	a5,d7
00001A50 6400                       		bcc.s	loc_1856
00001A52 3C07                       		move.w	d7,d6
00001A54 0646 0010                  		addi.w	#$10,d6
00001A58 4447                       		neg.w	d7
00001A5A EF69                       		lsl.w	d7,d1
00001A5C 1A10                       		move.b	(a0),d5
00001A5E EF3D                       		rol.b	d7,d5
00001A60 DE47                       		add.w	d7,d7
00001A62 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A66 D245                       		add.w	d5,d1
00001A68                            
00001A68                            loc_1844:				; XREF: loc_1868
00001A68 300D                       		move.w	a5,d0
00001A6A D040                       		add.w	d0,d0
00001A6C C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A70 D243                       		add.w	d3,d1
00001A72 1A18                       		move.b	(a0)+,d5
00001A74 E14D                       		lsl.w	#8,d5
00001A76 1A18                       		move.b	(a0)+,d5
00001A78 4E75                       		rts	
00001A7A                            ; ===========================================================================
00001A7A                            
00001A7A                            loc_1856:				; XREF: loc_1826
00001A7A 6700                       		beq.s	loc_1868
00001A7C EE69                       		lsr.w	d7,d1
00001A7E 300D                       		move.w	a5,d0
00001A80 D040                       		add.w	d0,d0
00001A82 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A86 D243                       		add.w	d3,d1
00001A88 300D                       		move.w	a5,d0
00001A8A 6000                       		bra.s	sub_188C
00001A8C                            ; ===========================================================================
00001A8C                            
00001A8C                            loc_1868:				; XREF: loc_1856
00001A8C 7C10                       		moveq	#$10,d6
00001A8E                            
00001A8E                            loc_186A:
00001A8E 60D8                       		bra.s	loc_1844
00001A90                            ; ===========================================================================
00001A90 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AA6 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AB0                            
00001AB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AB0                            
00001AB0                            
00001AB0                            sub_188C:				; XREF: EniDec
00001AB0 9C40                       		sub.w	d0,d6
00001AB2 0C46 0009                  		cmpi.w	#9,d6
00001AB6 6400                       		bcc.s	locret_189A
00001AB8 5046                       		addq.w	#8,d6
00001ABA E145                       		asl.w	#8,d5
00001ABC 1A18                       		move.b	(a0)+,d5
00001ABE                            
00001ABE                            locret_189A:
00001ABE 4E75                       		rts	
00001AC0                            ; End of function sub_188C
00001AC0                            
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            ; Kosinski decompression algorithm
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            
00001AC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC0                            
00001AC0                            
00001AC0                            KosDec:
00001AC0                            
00001AC0 =FFFFFFFE                  var_2		= -2
00001AC0 =FFFFFFFF                  var_1		= -1
00001AC0                            
00001AC0 558F                       		subq.l	#2,sp
00001AC2 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AC6 1E98                       		move.b	(a0)+,(sp)
00001AC8 3A17                       		move.w	(sp),d5
00001ACA 780F                       		moveq	#$F,d4
00001ACC                            
00001ACC                            loc_18A8:
00001ACC E24D                       		lsr.w	#1,d5
00001ACE 40C6                       		move	sr,d6
00001AD0 51CC 0000                  		dbf	d4,loc_18BA
00001AD4 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD8 1E98                       		move.b	(a0)+,(sp)
00001ADA 3A17                       		move.w	(sp),d5
00001ADC 780F                       		moveq	#$F,d4
00001ADE                            
00001ADE                            loc_18BA:
00001ADE 44C6                       		move	d6,ccr
00001AE0 6400                       		bcc.s	loc_18C2
00001AE2 12D8                       		move.b	(a0)+,(a1)+
00001AE4 60E6                       		bra.s	loc_18A8
00001AE6                            ; ===========================================================================
00001AE6                            
00001AE6                            loc_18C2:				; XREF: KosDec
00001AE6 7600                       		moveq	#0,d3
00001AE8 E24D                       		lsr.w	#1,d5
00001AEA 40C6                       		move	sr,d6
00001AEC 51CC 0000                  		dbf	d4,loc_18D6
00001AF0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF4 1E98                       		move.b	(a0)+,(sp)
00001AF6 3A17                       		move.w	(sp),d5
00001AF8 780F                       		moveq	#$F,d4
00001AFA                            
00001AFA                            loc_18D6:
00001AFA 44C6                       		move	d6,ccr
00001AFC 6500                       		bcs.s	loc_1906
00001AFE E24D                       		lsr.w	#1,d5
00001B00 51CC 0000                  		dbf	d4,loc_18EA
00001B04 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B08 1E98                       		move.b	(a0)+,(sp)
00001B0A 3A17                       		move.w	(sp),d5
00001B0C 780F                       		moveq	#$F,d4
00001B0E                            
00001B0E                            loc_18EA:
00001B0E E353                       		roxl.w	#1,d3
00001B10 E24D                       		lsr.w	#1,d5
00001B12 51CC 0000                  		dbf	d4,loc_18FC
00001B16 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B1A 1E98                       		move.b	(a0)+,(sp)
00001B1C 3A17                       		move.w	(sp),d5
00001B1E 780F                       		moveq	#$F,d4
00001B20                            
00001B20                            loc_18FC:
00001B20 E353                       		roxl.w	#1,d3
00001B22 5243                       		addq.w	#1,d3
00001B24 74FF                       		moveq	#-1,d2
00001B26 1418                       		move.b	(a0)+,d2
00001B28 6000                       		bra.s	loc_191C
00001B2A                            ; ===========================================================================
00001B2A                            
00001B2A                            loc_1906:				; XREF: loc_18C2
00001B2A 1018                       		move.b	(a0)+,d0
00001B2C 1218                       		move.b	(a0)+,d1
00001B2E 74FF                       		moveq	#-1,d2
00001B30 1401                       		move.b	d1,d2
00001B32 EB4A                       		lsl.w	#5,d2
00001B34 1400                       		move.b	d0,d2
00001B36 0241 0007                  		andi.w	#7,d1
00001B3A 6700                       		beq.s	loc_1928
00001B3C 1601                       		move.b	d1,d3
00001B3E 5243                       		addq.w	#1,d3
00001B40                            
00001B40                            loc_191C:
00001B40 1031 2000                  		move.b	(a1,d2.w),d0
00001B44 12C0                       		move.b	d0,(a1)+
00001B46 51CB FFF8                  		dbf	d3,loc_191C
00001B4A 6080                       		bra.s	loc_18A8
00001B4C                            ; ===========================================================================
00001B4C                            
00001B4C                            loc_1928:				; XREF: loc_1906
00001B4C 1218                       		move.b	(a0)+,d1
00001B4E 6700                       		beq.s	loc_1938
00001B50 0C01 0001                  		cmpi.b	#1,d1
00001B54 6700 FF76                  		beq.w	loc_18A8
00001B58 1601                       		move.b	d1,d3
00001B5A 60E4                       		bra.s	loc_191C
00001B5C                            ; ===========================================================================
00001B5C                            
00001B5C                            loc_1938:				; XREF: loc_1928
00001B5C 548F                       		addq.l	#2,sp
00001B5E 4E75                       		rts	
00001B60                            ; End of function KosDec
00001B60                            
00001B60                            ; ---------------------------------------------------------------------------
00001B60                            ; Pallet cycling routine loading subroutine
00001B60                            ; ---------------------------------------------------------------------------
00001B60                            
00001B60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B60                            
00001B60                            
00001B60                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B60 7400                       		moveq	#0,d2
00001B62 7000                       		moveq	#0,d0
00001B64 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B68 D040                       		add.w	d0,d0		; multiply by 2
00001B6A 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B6E 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B72                            ; End of function PalCycle_Load
00001B72                            
00001B72                            ; ===========================================================================
00001B72                            ; ---------------------------------------------------------------------------
00001B72                            ; Pallet cycling routines
00001B72                            ; ---------------------------------------------------------------------------
00001B72 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B74 0000                       		dc.w PalCycle_LZ-PalCycle
00001B76 0000                       		dc.w PalCycle_MZ-PalCycle
00001B78 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B7A 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B7C 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B7E 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B80                            
00001B80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B80                            
00001B80                            
00001B80                            PalCycle_Title:				; XREF: TitleScreen
00001B80 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B86 6000                       		bra.s	loc_196A
00001B88                            ; ===========================================================================
00001B88                            
00001B88                            PalCycle_GHZ:				; XREF: PalCycle
00001B88 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B8E                            
00001B8E                            loc_196A:				; XREF: PalCycle_Title
00001B8E 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B92 6A00                       		bpl.s	locret_1990
00001B94 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B9A 3038 F632                  		move.w	($FFFFF632).w,d0
00001B9E 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BA2 0240 0003                  		andi.w	#3,d0
00001BA6 E748                       		lsl.w	#3,d0
00001BA8 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BAC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BB0 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BB4                            
00001BB4                            locret_1990:
00001BB4 4E75                       		rts	
00001BB6                            ; End of function PalCycle_Title
00001BB6                            
00001BB6                            
00001BB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB6                            
00001BB6                            
00001BB6                            PalCycle_LZ:				; XREF: PalCycle
00001BB6 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BBA 6A00                       		bpl.s	loc_19D8
00001BBC 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BC2 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC6 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BCA 0240 0003                  		andi.w	#3,d0
00001BCE E748                       		lsl.w	#3,d0
00001BD0 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BD6 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BDC 6600                       		bne.s	loc_19C0
00001BDE 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BE4                            
00001BE4                            loc_19C0:
00001BE4 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BEC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BF0 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BF4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BF8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BFC                            
00001BFC                            loc_19D8:
00001BFC 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001C00 0240 0007                  		andi.w	#7,d0
00001C04 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C08 6700                       		beq.s	locret_1A3A
00001C0A 7201                       		moveq	#1,d1
00001C0C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C10 6700                       		beq.s	loc_19F0
00001C12 4441                       		neg.w	d1
00001C14                            
00001C14                            loc_19F0:
00001C14 3038 F650                  		move.w	($FFFFF650).w,d0
00001C18 0240 0003                  		andi.w	#3,d0
00001C1C D041                       		add.w	d1,d0
00001C1E 0C40 0003                  		cmpi.w	#3,d0
00001C22 6500                       		bcs.s	loc_1A0A
00001C24 3200                       		move.w	d0,d1
00001C26 7000                       		moveq	#0,d0
00001C28 4A41                       		tst.w	d1
00001C2A 6A00                       		bpl.s	loc_1A0A
00001C2C 7002                       		moveq	#2,d0
00001C2E                            
00001C2E                            loc_1A0A:
00001C2E 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C32 D040                       		add.w	d0,d0
00001C34 3200                       		move.w	d0,d1
00001C36 D040                       		add.w	d0,d0
00001C38 D041                       		add.w	d1,d0
00001C3A 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C40 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C44 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C48 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C4C 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C52 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C56 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C5A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C5E                            
00001C5E                            locret_1A3A:
00001C5E 4E75                       		rts	
00001C60                            ; End of function PalCycle_LZ
00001C60                            
00001C60                            ; ===========================================================================
00001C60 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C68                            ; ===========================================================================
00001C68                            
00001C68                            PalCycle_MZ:				; XREF: PalCycle
00001C68 4E75                       		rts	
00001C6A                            
00001C6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C6A                            
00001C6A                            
00001C6A                            PalCycle_SLZ:				; XREF: PalCycle
00001C6A 4E75                       		rts	
00001C6C                            ; End of function PalCycle_SLZ
00001C6C                            
00001C6C                            
00001C6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C6C                            
00001C6C                            
00001C6C                            PalCycle_SYZ:				; XREF: PalCycle
00001C6C 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C70 6A00                       		bpl.s	locret_1AC6
00001C72 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C78 3038 F632                  		move.w	($FFFFF632).w,d0
00001C7C 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C80 0240 0003                  		andi.w	#3,d0
00001C84 E548                       		lsl.w	#2,d0
00001C86 3200                       		move.w	d0,d1
00001C88 D040                       		add.w	d0,d0
00001C8A 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C90 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C94 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C98 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C9C 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CA2 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CA6 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CAA 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CB0                            
00001CB0                            locret_1AC6:
00001CB0 4E75                       		rts	
00001CB2                            ; End of function PalCycle_SYZ
00001CB2                            
00001CB2                            
00001CB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CB2                            
00001CB2                            
00001CB2                            PalCycle_SBZ:				; XREF: PalCycle
00001CB2 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CB8 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CBC 6700                       		beq.s	loc_1ADA
00001CBE 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CC4                            
00001CC4                            loc_1ADA:
00001CC4 43F8 F650                  		lea	($FFFFF650).w,a1
00001CC8 321A                       		move.w	(a2)+,d1
00001CCA                            
00001CCA                            loc_1AE0:
00001CCA 5311                       		subq.b	#1,(a1)
00001CCC 6B00                       		bmi.s	loc_1AEA
00001CCE 5489                       		addq.l	#2,a1
00001CD0 5C8A                       		addq.l	#6,a2
00001CD2 6000                       		bra.s	loc_1B06
00001CD4                            ; ===========================================================================
00001CD4                            
00001CD4                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CD4 12DA                       		move.b	(a2)+,(a1)+
00001CD6 1011                       		move.b	(a1),d0
00001CD8 5200                       		addq.b	#1,d0
00001CDA B01A                       		cmp.b	(a2)+,d0
00001CDC 6500                       		bcs.s	loc_1AF6
00001CDE 7000                       		moveq	#0,d0
00001CE0                            
00001CE0                            loc_1AF6:
00001CE0 12C0                       		move.b	d0,(a1)+
00001CE2 0240 000F                  		andi.w	#$F,d0
00001CE6 D040                       		add.w	d0,d0
00001CE8 305A                       		movea.w	(a2)+,a0
00001CEA 365A                       		movea.w	(a2)+,a3
00001CEC 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001CF0                            
00001CF0                            loc_1B06:				; XREF: PalCycle_SBZ
00001CF0 51C9 FFD8                  		dbf	d1,loc_1AE0
00001CF4 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CF8 6A00                       		bpl.s	locret_1B64
00001CFA 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D00 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D06 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D0A 6700                       		beq.s	loc_1B2E
00001D0C 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D12 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D18                            
00001D18                            loc_1B2E:
00001D18 72FF                       		moveq	#-1,d1
00001D1A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D1E 6700                       		beq.s	loc_1B38
00001D20 4441                       		neg.w	d1
00001D22                            
00001D22                            loc_1B38:
00001D22 3038 F632                  		move.w	($FFFFF632).w,d0
00001D26 0240 0003                  		andi.w	#3,d0
00001D2A D041                       		add.w	d1,d0
00001D2C 0C40 0003                  		cmpi.w	#3,d0
00001D30 6500                       		bcs.s	loc_1B52
00001D32 3200                       		move.w	d0,d1
00001D34 7000                       		moveq	#0,d0
00001D36 4A41                       		tst.w	d1
00001D38 6A00                       		bpl.s	loc_1B52
00001D3A 7002                       		moveq	#2,d0
00001D3C                            
00001D3C                            loc_1B52:
00001D3C 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D40 D040                       		add.w	d0,d0
00001D42 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D46 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D4A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D4E                            
00001D4E                            locret_1B64:
00001D4E 4E75                       		rts	
00001D50                            ; End of function PalCycle_SBZ
00001D50                            
00001D50                            ; ===========================================================================
00001D50                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D70                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001D90                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DB0                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DC2                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DD4                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E3C                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E60                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001E80                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001E90                            
00001E90                            Pal_SBZCycList:
00001E90                            	include "_inc\SBZ pallet script 1.asm"
00001E90                            ; ---------------------------------------------------------------------------
00001E90                            ; Scrap Brain Zone 1 pallet cycling script
00001E90                            ; ---------------------------------------------------------------------------
00001E90 0008                       	dc.w 8			; number of entries - 1
00001E92 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001E94 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001E96 FB50                       	dc.w $FB50		; RAM address
00001E98 0D08                       	dc.b $D, 8
00001E9A 0000                       	dc.w Pal_SBZCyc2
00001E9C FB52                       	dc.w $FB52
00001E9E 0E08                       	dc.b $E, 8
00001EA0 0000                       	dc.w Pal_SBZCyc3
00001EA2 FB6E                       	dc.w $FB6E
00001EA4 0B08                       	dc.b $B, 8
00001EA6 0000                       	dc.w Pal_SBZCyc5
00001EA8 FB70                       	dc.w $FB70
00001EAA 0708                       	dc.b 7,	8
00001EAC 0000                       	dc.w Pal_SBZCyc6
00001EAE FB72                       	dc.w $FB72
00001EB0 1C10                       	dc.b $1C, $10
00001EB2 0000                       	dc.w Pal_SBZCyc7
00001EB4 FB7E                       	dc.w $FB7E
00001EB6 0303                       	dc.b 3,	3
00001EB8 0000                       	dc.w Pal_SBZCyc8
00001EBA FB78                       	dc.w $FB78
00001EBC 0303                       	dc.b 3,	3
00001EBE 0000                       	dc.w Pal_SBZCyc8+2
00001EC0 FB7A                       	dc.w $FB7A
00001EC2 0303                       	dc.b 3,	3
00001EC4 0000                       	dc.w Pal_SBZCyc8+4
00001EC6 FB7C                       	dc.w $FB7C
00001EC8                            	even
00001EC8                            	even
00001EC8                            
00001EC8                            Pal_SBZCycList2:
00001EC8                            	include "_inc\SBZ pallet script 2.asm"
00001EC8                            ; ---------------------------------------------------------------------------
00001EC8                            ; Scrap Brain Zone 2 pallet cycling script
00001EC8                            ; ---------------------------------------------------------------------------
00001EC8 0006                       	dc.w 6
00001ECA 0708                       	dc.b 7,	8
00001ECC 0000                       	dc.w Pal_SBZCyc1
00001ECE FB50                       	dc.w $FB50
00001ED0 0D08                       	dc.b $D, 8
00001ED2 0000                       	dc.w Pal_SBZCyc2
00001ED4 FB52                       	dc.w $FB52
00001ED6 0908                       	dc.b 9,	8
00001ED8 0000                       	dc.w Pal_SBZCyc9
00001EDA FB70                       	dc.w $FB70
00001EDC 0708                       	dc.b 7,	8
00001EDE 0000                       	dc.w Pal_SBZCyc6
00001EE0 FB72                       	dc.w $FB72
00001EE2 0303                       	dc.b 3,	3
00001EE4 0000                       	dc.w Pal_SBZCyc8
00001EE6 FB78                       	dc.w $FB78
00001EE8 0303                       	dc.b 3,	3
00001EEA 0000                       	dc.w Pal_SBZCyc8+2
00001EEC FB7A                       	dc.w $FB7A
00001EEE 0303                       	dc.b 3,	3
00001EF0 0000                       	dc.w Pal_SBZCyc8+4
00001EF2 FB7C                       	dc.w $FB7C
00001EF4                            	even
00001EF4                            	even
00001EF4                            
00001EF4                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F04                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F14                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F24                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F30                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F40                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F50                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F70                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001F7A                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001F8A                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001F96                            ; ---------------------------------------------------------------------------
00001F96                            ; Subroutine to	fade out and fade in
00001F96                            ; ---------------------------------------------------------------------------
00001F96                            
00001F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F96                            
00001F96                            
00001F96                            Pal_FadeTo:
00001F96 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F9C                            
00001F9C                            Pal_FadeTo2:
00001F9C 7000                       		moveq	#0,d0
00001F9E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FA2 1038 F626                  		move.b	($FFFFF626).w,d0
00001FA6 D0C0                       		adda.w	d0,a0
00001FA8 7200                       		moveq	#0,d1
00001FAA 1038 F627                  		move.b	($FFFFF627).w,d0
00001FAE                            
00001FAE                            Pal_ToBlack:
00001FAE 30C1                       		move.w	d1,(a0)+
00001FB0 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FB4                            
00001FB4 383C 0015                  		move.w	#$15,d4
00001FB8                            
00001FB8                            loc_1DCE:
00001FB8 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FBE 6100 0000                  		bsr.w	DelayProgram
00001FC2 6100                       		bsr.s	Pal_FadeIn
00001FC4 6100 F84A                  		bsr.w	RunPLC_RAM
00001FC8 51CC FFEE                  		dbf	d4,loc_1DCE
00001FCC 4E75                       		rts	
00001FCE                            ; End of function Pal_FadeTo
00001FCE                            
00001FCE                            ; ---------------------------------------------------------------------------
00001FCE                            ; Pallet fade-in subroutine
00001FCE                            ; ---------------------------------------------------------------------------
00001FCE                            
00001FCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCE                            
00001FCE                            
00001FCE                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FCE 7000                       		moveq	#0,d0
00001FD0 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FD4 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001FD8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FDC D0C0                       		adda.w	d0,a0
00001FDE D2C0                       		adda.w	d0,a1
00001FE0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE4                            
00001FE4                            loc_1DFA:
00001FE4 6100                       		bsr.s	Pal_AddColor
00001FE6 51C8 FFFC                  		dbf	d0,loc_1DFA
00001FEA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001FF0 6600                       		bne.s	locret_1E24
00001FF2 7000                       		moveq	#0,d0
00001FF4 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FF8 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001FFC 1038 F626                  		move.b	($FFFFF626).w,d0
00002000 D0C0                       		adda.w	d0,a0
00002002 D2C0                       		adda.w	d0,a1
00002004 1038 F627                  		move.b	($FFFFF627).w,d0
00002008                            
00002008                            loc_1E1E:
00002008 6100                       		bsr.s	Pal_AddColor
0000200A 51C8 FFFC                  		dbf	d0,loc_1E1E
0000200E                            
0000200E                            locret_1E24:
0000200E 4E75                       		rts	
00002010                            ; End of function Pal_FadeIn
00002010                            
00002010                            
00002010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002010                            
00002010                            
00002010                            Pal_AddColor:				; XREF: Pal_FadeIn
00002010 3419                       		move.w	(a1)+,d2
00002012 3610                       		move.w	(a0),d3
00002014 B642                       		cmp.w	d2,d3
00002016 6700                       		beq.s	loc_1E4E
00002018 3203                       		move.w	d3,d1
0000201A 0641 0200                  		addi.w	#$200,d1	; increase blue	value
0000201E B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002020 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002022 30C1                       		move.w	d1,(a0)+	; update pallet
00002024 4E75                       		rts	
00002026                            ; ===========================================================================
00002026                            
00002026                            Pal_AddGreen:				; XREF: Pal_AddColor
00002026 3203                       		move.w	d3,d1
00002028 0641 0020                  		addi.w	#$20,d1		; increase green value
0000202C B242                       		cmp.w	d2,d1
0000202E 6200                       		bhi.s	Pal_AddRed
00002030 30C1                       		move.w	d1,(a0)+	; update pallet
00002032 4E75                       		rts	
00002034                            ; ===========================================================================
00002034                            
00002034                            Pal_AddRed:				; XREF: Pal_AddGreen
00002034 5458                       		addq.w	#2,(a0)+	; increase red value
00002036 4E75                       		rts	
00002038                            ; ===========================================================================
00002038                            
00002038                            loc_1E4E:				; XREF: Pal_AddColor
00002038 5448                       		addq.w	#2,a0
0000203A 4E75                       		rts	
0000203C                            ; End of function Pal_AddColor
0000203C                            
0000203C                            
0000203C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000203C                            
0000203C                            
0000203C                            Pal_FadeFrom:
0000203C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002042 383C 0015                  		move.w	#$15,d4
00002046                            
00002046                            loc_1E5C:
00002046 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000204C 6100 0000                  		bsr.w	DelayProgram
00002050 6100                       		bsr.s	Pal_FadeOut
00002052 6100 F7BC                  		bsr.w	RunPLC_RAM
00002056 51CC FFEE                  		dbf	d4,loc_1E5C
0000205A 4E75                       		rts	
0000205C                            ; End of function Pal_FadeFrom
0000205C                            
0000205C                            ; ---------------------------------------------------------------------------
0000205C                            ; Pallet fade-out subroutine
0000205C                            ; ---------------------------------------------------------------------------
0000205C                            
0000205C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000205C                            
0000205C                            
0000205C                            Pal_FadeOut:				; XREF: Pal_FadeFrom
0000205C 7000                       		moveq	#0,d0
0000205E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002062 1038 F626                  		move.b	($FFFFF626).w,d0
00002066 D0C0                       		adda.w	d0,a0
00002068 1038 F627                  		move.b	($FFFFF627).w,d0
0000206C                            
0000206C                            loc_1E82:
0000206C 6100                       		bsr.s	Pal_DecColor
0000206E 51C8 FFFC                  		dbf	d0,loc_1E82
00002072                            
00002072 7000                       		moveq	#0,d0
00002074 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002078 1038 F626                  		move.b	($FFFFF626).w,d0
0000207C D0C0                       		adda.w	d0,a0
0000207E 1038 F627                  		move.b	($FFFFF627).w,d0
00002082                            
00002082                            loc_1E98:
00002082 6100                       		bsr.s	Pal_DecColor
00002084 51C8 FFFC                  		dbf	d0,loc_1E98
00002088 4E75                       		rts	
0000208A                            ; End of function Pal_FadeOut
0000208A                            
0000208A                            
0000208A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000208A                            
0000208A                            
0000208A                            Pal_DecColor:				; XREF: Pal_FadeOut
0000208A 3410                       		move.w	(a0),d2
0000208C 6700                       		beq.s	loc_1ECC
0000208E 3202                       		move.w	d2,d1
00002090 0241 000E                  		andi.w	#$E,d1
00002094 6700                       		beq.s	Pal_DecGreen
00002096 5558                       		subq.w	#2,(a0)+	; decrease red value
00002098 4E75                       		rts	
0000209A                            ; ===========================================================================
0000209A                            
0000209A                            Pal_DecGreen:				; XREF: Pal_DecColor
0000209A 3202                       		move.w	d2,d1
0000209C 0241 00E0                  		andi.w	#$E0,d1
000020A0 6700                       		beq.s	Pal_DecBlue
000020A2 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020A6 4E75                       		rts	
000020A8                            ; ===========================================================================
000020A8                            
000020A8                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020A8 3202                       		move.w	d2,d1
000020AA 0241 0E00                  		andi.w	#$E00,d1
000020AE 6700                       		beq.s	loc_1ECC
000020B0 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020B4 4E75                       		rts	
000020B6                            ; ===========================================================================
000020B6                            
000020B6                            loc_1ECC:				; XREF: Pal_DecColor
000020B6 5448                       		addq.w	#2,a0
000020B8 4E75                       		rts	
000020BA                            ; End of function Pal_DecColor
000020BA                            
000020BA                            ; ---------------------------------------------------------------------------
000020BA                            ; Subroutine to	fill the pallet	with white (special stage)
000020BA                            ; ---------------------------------------------------------------------------
000020BA                            
000020BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020BA                            
000020BA                            
000020BA                            Pal_MakeWhite:				; XREF: SpecialStage
000020BA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020C0 7000                       		moveq	#0,d0
000020C2 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020C6 1038 F626                  		move.b	($FFFFF626).w,d0
000020CA D0C0                       		adda.w	d0,a0
000020CC 323C 0EEE                  		move.w	#$EEE,d1
000020D0 1038 F627                  		move.b	($FFFFF627).w,d0
000020D4                            
000020D4                            PalWhite_Loop:
000020D4 30C1                       		move.w	d1,(a0)+
000020D6 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000020DA 383C 0015                  		move.w	#$15,d4
000020DE                            
000020DE                            loc_1EF4:
000020DE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020E4 6100 0000                  		bsr.w	DelayProgram
000020E8 6100                       		bsr.s	Pal_WhiteToBlack
000020EA 6100 F724                  		bsr.w	RunPLC_RAM
000020EE 51CC FFEE                  		dbf	d4,loc_1EF4
000020F2 4E75                       		rts	
000020F4                            ; End of function Pal_MakeWhite
000020F4                            
000020F4                            
000020F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020F4                            
000020F4                            
000020F4                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000020F4 7000                       		moveq	#0,d0
000020F6 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020FA 43F8 FB80                  		lea	($FFFFFB80).w,a1
000020FE 1038 F626                  		move.b	($FFFFF626).w,d0
00002102 D0C0                       		adda.w	d0,a0
00002104 D2C0                       		adda.w	d0,a1
00002106 1038 F627                  		move.b	($FFFFF627).w,d0
0000210A                            
0000210A                            loc_1F20:
0000210A 6100                       		bsr.s	Pal_DecColor2
0000210C 51C8 FFFC                  		dbf	d0,loc_1F20
00002110                            
00002110 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002116 6600                       		bne.s	locret_1F4A
00002118 7000                       		moveq	#0,d0
0000211A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000211E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002122 1038 F626                  		move.b	($FFFFF626).w,d0
00002126 D0C0                       		adda.w	d0,a0
00002128 D2C0                       		adda.w	d0,a1
0000212A 1038 F627                  		move.b	($FFFFF627).w,d0
0000212E                            
0000212E                            loc_1F44:
0000212E 6100                       		bsr.s	Pal_DecColor2
00002130 51C8 FFFC                  		dbf	d0,loc_1F44
00002134                            
00002134                            locret_1F4A:
00002134 4E75                       		rts	
00002136                            ; End of function Pal_WhiteToBlack
00002136                            
00002136                            
00002136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002136                            
00002136                            
00002136                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00002136 3419                       		move.w	(a1)+,d2
00002138 3610                       		move.w	(a0),d3
0000213A B642                       		cmp.w	d2,d3
0000213C 6700                       		beq.s	loc_1F78
0000213E 3203                       		move.w	d3,d1
00002140 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002144 6500                       		bcs.s	loc_1F64
00002146 B242                       		cmp.w	d2,d1
00002148 6500                       		bcs.s	loc_1F64
0000214A 30C1                       		move.w	d1,(a0)+
0000214C 4E75                       		rts	
0000214E                            ; ===========================================================================
0000214E                            
0000214E                            loc_1F64:				; XREF: Pal_DecColor2
0000214E 3203                       		move.w	d3,d1
00002150 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002154 6500                       		bcs.s	loc_1F74
00002156 B242                       		cmp.w	d2,d1
00002158 6500                       		bcs.s	loc_1F74
0000215A 30C1                       		move.w	d1,(a0)+
0000215C 4E75                       		rts	
0000215E                            ; ===========================================================================
0000215E                            
0000215E                            loc_1F74:				; XREF: loc_1F64
0000215E 5558                       		subq.w	#2,(a0)+	; decrease red value
00002160 4E75                       		rts	
00002162                            ; ===========================================================================
00002162                            
00002162                            loc_1F78:				; XREF: Pal_DecColor2
00002162 5448                       		addq.w	#2,a0
00002164 4E75                       		rts	
00002166                            ; End of function Pal_DecColor2
00002166                            
00002166                            ; ---------------------------------------------------------------------------
00002166                            ; Subroutine to	make a white flash when	you enter a special stage
00002166                            ; ---------------------------------------------------------------------------
00002166                            
00002166                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002166                            
00002166                            
00002166                            Pal_MakeFlash:				; XREF: SpecialStage
00002166 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000216C 383C 0015                  		move.w	#$15,d4
00002170                            
00002170                            loc_1F86:
00002170 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002176 6100 0000                  		bsr.w	DelayProgram
0000217A 6100                       		bsr.s	Pal_ToWhite
0000217C 6100 F692                  		bsr.w	RunPLC_RAM
00002180 51CC FFEE                  		dbf	d4,loc_1F86
00002184 4E75                       		rts	
00002186                            ; End of function Pal_MakeFlash
00002186                            
00002186                            
00002186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002186                            
00002186                            
00002186                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00002186 7000                       		moveq	#0,d0
00002188 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000218C 1038 F626                  		move.b	($FFFFF626).w,d0
00002190 D0C0                       		adda.w	d0,a0
00002192 1038 F627                  		move.b	($FFFFF627).w,d0
00002196                            
00002196                            loc_1FAC:
00002196 6100                       		bsr.s	Pal_AddColor2
00002198 51C8 FFFC                  		dbf	d0,loc_1FAC
0000219C 7000                       		moveq	#0,d0
0000219E 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021A2 1038 F626                  		move.b	($FFFFF626).w,d0
000021A6 D0C0                       		adda.w	d0,a0
000021A8 1038 F627                  		move.b	($FFFFF627).w,d0
000021AC                            
000021AC                            loc_1FC2:
000021AC 6100                       		bsr.s	Pal_AddColor2
000021AE 51C8 FFFC                  		dbf	d0,loc_1FC2
000021B2 4E75                       		rts	
000021B4                            ; End of function Pal_ToWhite
000021B4                            
000021B4                            
000021B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021B4                            
000021B4                            
000021B4                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021B4 3410                       		move.w	(a0),d2
000021B6 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021BA 6700                       		beq.s	loc_2006
000021BC 3202                       		move.w	d2,d1
000021BE 0241 000E                  		andi.w	#$E,d1
000021C2 0C41 000E                  		cmpi.w	#$E,d1
000021C6 6700                       		beq.s	loc_1FE2
000021C8 5458                       		addq.w	#2,(a0)+	; increase red value
000021CA 4E75                       		rts	
000021CC                            ; ===========================================================================
000021CC                            
000021CC                            loc_1FE2:				; XREF: Pal_AddColor2
000021CC 3202                       		move.w	d2,d1
000021CE 0241 00E0                  		andi.w	#$E0,d1
000021D2 0C41 00E0                  		cmpi.w	#$E0,d1
000021D6 6700                       		beq.s	loc_1FF4
000021D8 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000021DC 4E75                       		rts	
000021DE                            ; ===========================================================================
000021DE                            
000021DE                            loc_1FF4:				; XREF: loc_1FE2
000021DE 3202                       		move.w	d2,d1
000021E0 0241 0E00                  		andi.w	#$E00,d1
000021E4 0C41 0E00                  		cmpi.w	#$E00,d1
000021E8 6700                       		beq.s	loc_2006
000021EA 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000021EE 4E75                       		rts	
000021F0                            ; ===========================================================================
000021F0                            
000021F0                            loc_2006:				; XREF: Pal_AddColor2
000021F0 5448                       		addq.w	#2,a0
000021F2 4E75                       		rts	
000021F4                            ; End of function Pal_AddColor2
000021F4                            
000021F4                            ; ---------------------------------------------------------------------------
000021F4                            ; Pallet cycling routine - Sega	logo
000021F4                            ; ---------------------------------------------------------------------------
000021F4                            
000021F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021F4                            
000021F4                            
000021F4                            PalCycle_Sega:				; XREF: SegaScreen
000021F4 4A38 F635                  		tst.b	($FFFFF635).w
000021F8 6600                       		bne.s	loc_206A
000021FA 43F8 FB20                  		lea	($FFFFFB20).w,a1
000021FE 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002204 7205                       		moveq	#5,d1
00002206 3038 F632                  		move.w	($FFFFF632).w,d0
0000220A                            
0000220A                            loc_2020:
0000220A 6A00                       		bpl.s	loc_202A
0000220C 5448                       		addq.w	#2,a0
0000220E 5341                       		subq.w	#1,d1
00002210 5440                       		addq.w	#2,d0
00002212 60F6                       		bra.s	loc_2020
00002214                            ; ===========================================================================
00002214                            
00002214                            loc_202A:				; XREF: PalCycle_Sega
00002214 3400                       		move.w	d0,d2
00002216 0242 001E                  		andi.w	#$1E,d2
0000221A 6600                       		bne.s	loc_2034
0000221C 5440                       		addq.w	#2,d0
0000221E                            
0000221E                            loc_2034:
0000221E 0C40 0060                  		cmpi.w	#$60,d0
00002222 6400                       		bcc.s	loc_203E
00002224 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002228                            
00002228                            loc_203E:
00002228 5440                       		addq.w	#2,d0
0000222A 51C9 FFE8                  		dbf	d1,loc_202A
0000222E 3038 F632                  		move.w	($FFFFF632).w,d0
00002232 5440                       		addq.w	#2,d0
00002234 3400                       		move.w	d0,d2
00002236 0242 001E                  		andi.w	#$1E,d2
0000223A 6600                       		bne.s	loc_2054
0000223C 5440                       		addq.w	#2,d0
0000223E                            
0000223E                            loc_2054:
0000223E 0C40 0064                  		cmpi.w	#$64,d0
00002242 6D00                       		blt.s	loc_2062
00002244 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000224A 70F4                       		moveq	#-$C,d0
0000224C                            
0000224C                            loc_2062:
0000224C 31C0 F632                  		move.w	d0,($FFFFF632).w
00002250 7001                       		moveq	#1,d0
00002252 4E75                       		rts	
00002254                            ; ===========================================================================
00002254                            
00002254                            loc_206A:				; XREF: loc_202A
00002254 5338 F634                  		subq.b	#1,($FFFFF634).w
00002258 6A00                       		bpl.s	loc_20BC
0000225A 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002260 3038 F632                  		move.w	($FFFFF632).w,d0
00002264 0640 000C                  		addi.w	#$C,d0
00002268 0C40 0030                  		cmpi.w	#$30,d0
0000226C 6500                       		bcs.s	loc_2088
0000226E 7000                       		moveq	#0,d0
00002270 4E75                       		rts	
00002272                            ; ===========================================================================
00002272                            
00002272                            loc_2088:				; XREF: loc_206A
00002272 31C0 F632                  		move.w	d0,($FFFFF632).w
00002276 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000227C 41F0 0000                  		lea	(a0,d0.w),a0
00002280 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002284 22D8                       		move.l	(a0)+,(a1)+
00002286 22D8                       		move.l	(a0)+,(a1)+
00002288 3298                       		move.w	(a0)+,(a1)
0000228A 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000228E 7000                       		moveq	#0,d0
00002290 722C                       		moveq	#$2C,d1
00002292                            
00002292                            loc_20A8:
00002292 3400                       		move.w	d0,d2
00002294 0242 001E                  		andi.w	#$1E,d2
00002298 6600                       		bne.s	loc_20B2
0000229A 5440                       		addq.w	#2,d0
0000229C                            
0000229C                            loc_20B2:
0000229C 3390 0000                  		move.w	(a0),(a1,d0.w)
000022A0 5440                       		addq.w	#2,d0
000022A2 51C9 FFEE                  		dbf	d1,loc_20A8
000022A6                            
000022A6                            loc_20BC:
000022A6 7001                       		moveq	#1,d0
000022A8 4E75                       		rts	
000022AA                            ; End of function PalCycle_Sega
000022AA                            
000022AA                            ; ===========================================================================
000022AA                            
000022AA                            Pal_Sega1:	incbin	pallet\sega1.bin
000022B6                            Pal_Sega2:	incbin	pallet\sega2.bin
000022E6                            
000022E6                            ; ---------------------------------------------------------------------------
000022E6                            ; Subroutines to load pallets
000022E6                            ; ---------------------------------------------------------------------------
000022E6                            
000022E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022E6                            
000022E6                            
000022E6                            PalLoad1:
000022E6 43F9 0000 0000             		lea	(PalPointers).l,a1
000022EC E748                       		lsl.w	#3,d0
000022EE D2C0                       		adda.w	d0,a1
000022F0 2459                       		movea.l	(a1)+,a2
000022F2 3659                       		movea.w	(a1)+,a3
000022F4 D6FC 0080                  		adda.w	#$80,a3
000022F8 3E19                       		move.w	(a1)+,d7
000022FA                            
000022FA                            loc_2110:
000022FA 26DA                       		move.l	(a2)+,(a3)+
000022FC 51CF FFFC                  		dbf	d7,loc_2110
00002300 4E75                       		rts	
00002302                            ; End of function PalLoad1
00002302                            
00002302                            
00002302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002302                            
00002302                            
00002302                            PalLoad2:
00002302 43F9 0000 0000             		lea	(PalPointers).l,a1
00002308 E748                       		lsl.w	#3,d0
0000230A D2C0                       		adda.w	d0,a1
0000230C 2459                       		movea.l	(a1)+,a2
0000230E 3659                       		movea.w	(a1)+,a3
00002310 3E19                       		move.w	(a1)+,d7
00002312                            
00002312                            loc_2128:
00002312 26DA                       		move.l	(a2)+,(a3)+
00002314 51CF FFFC                  		dbf	d7,loc_2128
00002318 4E75                       		rts	
0000231A                            ; End of function PalLoad2
0000231A                            
0000231A                            ; ---------------------------------------------------------------------------
0000231A                            ; Underwater pallet loading subroutine
0000231A                            ; ---------------------------------------------------------------------------
0000231A                            
0000231A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231A                            
0000231A                            
0000231A                            PalLoad3_Water:
0000231A 43F9 0000 0000             		lea	(PalPointers).l,a1
00002320 E748                       		lsl.w	#3,d0
00002322 D2C0                       		adda.w	d0,a1
00002324 2459                       		movea.l	(a1)+,a2
00002326 3659                       		movea.w	(a1)+,a3
00002328 96FC 0080                  		suba.w	#$80,a3
0000232C 3E19                       		move.w	(a1)+,d7
0000232E                            
0000232E                            loc_2144:
0000232E 26DA                       		move.l	(a2)+,(a3)+
00002330 51CF FFFC                  		dbf	d7,loc_2144
00002334 4E75                       		rts	
00002336                            ; End of function PalLoad3_Water
00002336                            
00002336                            
00002336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002336                            
00002336                            
00002336                            PalLoad4_Water:
00002336 43F9 0000 0000             		lea	(PalPointers).l,a1
0000233C E748                       		lsl.w	#3,d0
0000233E D2C0                       		adda.w	d0,a1
00002340 2459                       		movea.l	(a1)+,a2
00002342 3659                       		movea.w	(a1)+,a3
00002344 96FC 0100                  		suba.w	#$100,a3
00002348 3E19                       		move.w	(a1)+,d7
0000234A                            
0000234A                            loc_2160:
0000234A 26DA                       		move.l	(a2)+,(a3)+
0000234C 51CF FFFC                  		dbf	d7,loc_2160
00002350 4E75                       		rts	
00002352                            ; End of function PalLoad4_Water
00002352                            
00002352                            ; ===========================================================================
00002352                            ; ---------------------------------------------------------------------------
00002352                            ; Pallet pointers
00002352                            ; ---------------------------------------------------------------------------
00002352                            PalPointers:
00002352                            	include "_inc\Pallet pointers.asm"
00002352                            ; ---------------------------------------------------------------------------
00002352                            ; Pallet pointers
00002352                            ; ---------------------------------------------------------------------------
00002352 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002356 FB00                       	dc.w $FB00		; RAM address
00002358 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000235A 0000 0000                  	dc.l Pal_Title
0000235E FB00                       	dc.w $FB00
00002360 001F                       	dc.w $1F
00002362 0000 0000                  	dc.l Pal_LevelSel
00002366 FB00                       	dc.w $FB00
00002368 001F                       	dc.w $1F
0000236A 0000 0000                  	dc.l Pal_Sonic
0000236E FB00                       	dc.w $FB00
00002370 0007                       	dc.w 7
00002372 0000 0000                  	dc.l Pal_GHZ
00002376 FB20                       	dc.w $FB20
00002378 0017                       	dc.w $17
0000237A 0000 0000                  	dc.l Pal_LZ
0000237E FB20                       	dc.w $FB20
00002380 0017                       	dc.w $17
00002382 0000 0000                  	dc.l Pal_MZ
00002386 FB20                       	dc.w $FB20
00002388 0017                       	dc.w $17
0000238A 0000 0000                  	dc.l Pal_SLZ
0000238E FB20                       	dc.w $FB20
00002390 0017                       	dc.w $17
00002392 0000 0000                  	dc.l Pal_SYZ
00002396 FB20                       	dc.w $FB20
00002398 0017                       	dc.w $17
0000239A 0000 0000                  	dc.l Pal_SBZ1
0000239E FB20                       	dc.w $FB20
000023A0 0017                       	dc.w $17
000023A2 0000 0000                  	dc.l Pal_Special
000023A6 FB00                       	dc.w $FB00
000023A8 001F                       	dc.w $1F
000023AA 0000 0000                  	dc.l Pal_LZWater
000023AE FB00                       	dc.w $FB00
000023B0 001F                       	dc.w $1F
000023B2 0000 0000                  	dc.l Pal_SBZ3
000023B6 FB20                       	dc.w $FB20
000023B8 0017                       	dc.w $17
000023BA 0000 0000                  	dc.l Pal_SBZ3Water
000023BE FB00                       	dc.w $FB00
000023C0 001F                       	dc.w $1F
000023C2 0000 0000                  	dc.l Pal_SBZ2
000023C6 FB20                       	dc.w $FB20
000023C8 0017                       	dc.w $17
000023CA 0000 0000                  	dc.l Pal_LZSonWater
000023CE FB00                       	dc.w $FB00
000023D0 0007                       	dc.w 7
000023D2 0000 0000                  	dc.l Pal_SBZ3SonWat
000023D6 FB00                       	dc.w $FB00
000023D8 0007                       	dc.w 7
000023DA 0000 0000                  	dc.l Pal_SpeResult
000023DE FB00                       	dc.w $FB00
000023E0 001F                       	dc.w $1F
000023E2 0000 0000                  	dc.l Pal_SpeContinue
000023E6 FB00                       	dc.w $FB00
000023E8 000F                       	dc.w $F
000023EA 0000 0000                  	dc.l Pal_Ending
000023EE FB00                       	dc.w $FB00
000023F0 001F                       	dc.w $1F
000023F2 0000 0000                  	dc.l Pal_Idiot
000023F6 FB20                       	dc.w $FB20
000023F8 0007                       	dc.w 7
000023FA 0000 0000                  	dc.l Pal_Gronic
000023FE FB00                       	dc.w $FB00
00002400 0007                       	dc.w 7
00002402 0000 0000                  	dc.l Pal_LZGroWater
00002406 FB00                       	dc.w $FB00
00002408 0007                       	dc.w 7
0000240A 0000 0000                  	dc.l Pal_SBZ3GroWat
0000240E FB00                       	dc.w $FB00
00002410 0007                       	dc.w 7
00002410 0007                       	dc.w 7
00002412                            
00002412                            ; ---------------------------------------------------------------------------
00002412                            ; Pallet data
00002412                            ; ---------------------------------------------------------------------------
00002412                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002492                            Pal_Title:	incbin	pallet\title.bin
00002512                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002592                            Pal_Sonic:	incbin	pallet\sonic.bin
000025B2                            Pal_GHZ:	incbin	pallet\ghz.bin
00002612                            Pal_LZ:		incbin	pallet\lz.bin
00002672                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000026F2                            Pal_MZ:		incbin	pallet\mz.bin
00002752                            Pal_SLZ:	incbin	pallet\slz.bin
000027B2                            Pal_SYZ:	incbin	pallet\syz.bin
00002812                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002872                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028D2                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002952                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029B2                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A32                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A52                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A72                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002AF2                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B32                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002BB2                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002BD2                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002BF2                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C12                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C32                            
00002C32                            ; ---------------------------------------------------------------------------
00002C32                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002C32                            ; ---------------------------------------------------------------------------
00002C32                            
00002C32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C32                            
00002C32                            
00002C32                            DelayProgram:				; XREF: PauseGame
00002C32 46FC 2300                  		move	#$2300,sr
00002C36                            
00002C36                            loc_29AC:
00002C36 4A38 F62A                  		tst.b	($FFFFF62A).w
00002C3A 66FA                       		bne.s	loc_29AC
00002C3C 4E75                       		rts	
00002C3E                            ; End of function DelayProgram
00002C3E                            
00002C3E                            ; ---------------------------------------------------------------------------
00002C3E                            ; Subroutine to	generate a pseudo-random number	in d0
00002C3E                            ; ---------------------------------------------------------------------------
00002C3E                            
00002C3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C3E                            
00002C3E                            
00002C3E                            RandomNumber:
00002C3E 2238 F636                  		move.l	($FFFFF636).w,d1
00002C42 6600                       		bne.s	loc_29C0
00002C44 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002C4A                            
00002C4A                            loc_29C0:
00002C4A 2001                       		move.l	d1,d0
00002C4C E581                       		asl.l	#2,d1
00002C4E D280                       		add.l	d0,d1
00002C50 E781                       		asl.l	#3,d1
00002C52 D280                       		add.l	d0,d1
00002C54 3001                       		move.w	d1,d0
00002C56 4841                       		swap	d1
00002C58 D041                       		add.w	d1,d0
00002C5A 3200                       		move.w	d0,d1
00002C5C 4841                       		swap	d1
00002C5E 21C1 F636                  		move.l	d1,($FFFFF636).w
00002C62 4E75                       		rts	
00002C64                            ; End of function RandomNumber
00002C64                            
00002C64                            
00002C64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C64                            
00002C64                            
00002C64                            CalcSine:				; XREF: SS_BGAnimate; et al
00002C64 0240 00FF                  		andi.w	#$FF,d0
00002C68 D040                       		add.w	d0,d0
00002C6A 0640 0080                  		addi.w	#$80,d0
00002C6E 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002C72 0440 0080                  		subi.w	#$80,d0
00002C76 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002C7A 4E75                       		rts	
00002C7C                            ; End of function CalcSine
00002C7C                            
00002C7C                            ; ===========================================================================
00002C7C                            
00002C7C                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002EFC                            
00002EFC                            ; ===========================================================================
00002EFC 48E7 6000                  		movem.l	d1-d2,-(sp)
00002F00 3200                       		move.w	d0,d1
00002F02 4841                       		swap	d1
00002F04 7000                       		moveq	#0,d0
00002F06 3200                       		move.w	d0,d1
00002F08 7407                       		moveq	#7,d2
00002F0A                            
00002F0A                            loc_2C80:
00002F0A E599                       		rol.l	#2,d1
00002F0C D040                       		add.w	d0,d0
00002F0E 5240                       		addq.w	#1,d0
00002F10 9240                       		sub.w	d0,d1
00002F12 6400                       		bcc.s	loc_2C9A
00002F14 D240                       		add.w	d0,d1
00002F16 5340                       		subq.w	#1,d0
00002F18 51CA FFF0                  		dbf	d2,loc_2C80
00002F1C E248                       		lsr.w	#1,d0
00002F1E 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002F22 4E75                       		rts	
00002F24                            ; ===========================================================================
00002F24                            
00002F24                            loc_2C9A:
00002F24 5240                       		addq.w	#1,d0
00002F26 51CA FFE2                  		dbf	d2,loc_2C80
00002F2A E248                       		lsr.w	#1,d0
00002F2C 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002F30 4E75                       		rts	
00002F32                            
00002F32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002F32                            
00002F32                            
00002F32                            CalcAngle:
00002F32 48E7 1800                  		movem.l	d3-d4,-(sp)
00002F36 7600                       		moveq	#0,d3
00002F38 7800                       		moveq	#0,d4
00002F3A 3601                       		move.w	d1,d3
00002F3C 3802                       		move.w	d2,d4
00002F3E 8843                       		or.w	d3,d4
00002F40 6700                       		beq.s	loc_2D04
00002F42 3802                       		move.w	d2,d4
00002F44 4A43                       		tst.w	d3
00002F46 6A00 0000                  		bpl.w	loc_2CC2
00002F4A 4443                       		neg.w	d3
00002F4C                            
00002F4C                            loc_2CC2:
00002F4C 4A44                       		tst.w	d4
00002F4E 6A00 0000                  		bpl.w	loc_2CCA
00002F52 4444                       		neg.w	d4
00002F54                            
00002F54                            loc_2CCA:
00002F54 B843                       		cmp.w	d3,d4
00002F56 6400 0000                  		bcc.w	loc_2CDC
00002F5A E18C                       		lsl.l	#8,d4
00002F5C 88C3                       		divu.w	d3,d4
00002F5E 7000                       		moveq	#0,d0
00002F60 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002F64 6000                       		bra.s	loc_2CE6
00002F66                            ; ===========================================================================
00002F66                            
00002F66                            loc_2CDC:				; XREF: CalcAngle
00002F66 E18B                       		lsl.l	#8,d3
00002F68 86C4                       		divu.w	d4,d3
00002F6A 7040                       		moveq	#$40,d0
00002F6C 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002F70                            
00002F70                            loc_2CE6:
00002F70 4A41                       		tst.w	d1
00002F72 6A00 0000                  		bpl.w	loc_2CF2
00002F76 4440                       		neg.w	d0
00002F78 0640 0080                  		addi.w	#$80,d0
00002F7C                            
00002F7C                            loc_2CF2:
00002F7C 4A42                       		tst.w	d2
00002F7E 6A00 0000                  		bpl.w	loc_2CFE
00002F82 4440                       		neg.w	d0
00002F84 0640 0100                  		addi.w	#$100,d0
00002F88                            
00002F88                            loc_2CFE:
00002F88 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F8C 4E75                       		rts	
00002F8E                            ; ===========================================================================
00002F8E                            
00002F8E                            loc_2D04:				; XREF: CalcAngle
00002F8E 303C 0040                  		move.w	#$40,d0
00002F92 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F96 4E75                       		rts	
00002F98                            ; End of function CalcAngle
00002F98                            
00002F98                            ; ===========================================================================
00002F98                            
00002F98                            Angle_Data:	incbin	misc\angles.bin
0000309A                            
0000309A                            ; ===========================================================================
0000309A                            
0000309A                            ; ---------------------------------------------------------------------------
0000309A                            ; Sega screen
0000309A                            ; ---------------------------------------------------------------------------
0000309A                            
0000309A                            SegaScreen:				; XREF: GameModeArray
0000309A 103C 00E4                  		move.b	#$E4,d0
0000309E 6100 E520                  		bsr.w	PlaySound_Special ; stop music
000030A2 6100 E75E                  		bsr.w	ClearPLC
000030A6 6100 EF94                  		bsr.w	Pal_FadeFrom
000030AA 4DF9 00C0 0004             		lea	($C00004).l,a6
000030B0 3CBC 8004                  		move.w	#$8004,(a6)
000030B4 3CBC 8230                  		move.w	#$8230,(a6)
000030B8 3CBC 8407                  		move.w	#$8407,(a6)
000030BC 3CBC 8700                  		move.w	#$8700,(a6)
000030C0 3CBC 8B00                  		move.w	#$8B00,(a6)
000030C4 4238 F64E                  		clr.b	($FFFFF64E).w
000030C8 46FC 2700                  		move	#$2700,sr
000030CC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000030D0 0200 00BF                  		andi.b	#$BF,d0
000030D4 33C0 00C0 0004             		move.w	d0,($C00004).l
000030DA 6100 E40C                  		bsr.w	ClearScreen
000030DE 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000030E8 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000030EE 6100 E574                  		bsr.w	NemDec
000030F2 43F9 00FF 0000             		lea	($FF0000).l,a1
000030F8 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000030FE 303C 0000                  		move.w	#0,d0
00003102 6100 E83E                  		bsr.w	EniDec
00003106 43F9 00FF 0000             		lea	($FF0000).l,a1
0000310C 203C 6510 0003             		move.l	#$65100003,d0
00003112 7217                       		moveq	#$17,d1
00003114 7407                       		moveq	#7,d2
00003116 6100 E52C                  		bsr.w	ShowVDPGraphics
0000311A 43F9 00FF 0180             		lea	($FF0180).l,a1
00003120 203C 4000 0003             		move.l	#$40000003,d0
00003126 7227                       		moveq	#$27,d1
00003128 741B                       		moveq	#$1B,d2
0000312A 6100 E518                  		bsr.w	ShowVDPGraphics
0000312E 7000                       		moveq	#0,d0
00003130 6100 F1D0                  		bsr.w	PalLoad2	; load Sega logo pallet
00003134 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
0000313A 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003140 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00003146 31FC 0000 F660             		move.w	#0,($FFFFF660).w
0000314C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003150 0000 0040                  		ori.b	#$40,d0
00003154 33C0 00C0 0004             		move.w	d0,($C00004).l
0000315A                            
0000315A                            Sega_WaitPallet:
0000315A 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003160 6100 FAD0                  		bsr.w	DelayProgram
00003164 6100 F08E                  		bsr.w	PalCycle_Sega
00003168 66F0                       		bne.s	Sega_WaitPallet
0000316A                            
0000316A 103C 00E1                  		move.b	#$E1,d0
0000316E 6100 E450                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003172 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003178 6100 FAB8                  		bsr.w	DelayProgram
0000317C 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003182                            
00003182                            Sega_WaitEnd:
00003182 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003188 6100 FAA8                  		bsr.w	DelayProgram
0000318C 4A78 F614                  		tst.w	($FFFFF614).w
00003190 6700                       		beq.s	Sega_GotoTitle
00003192 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003198 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
0000319A                            
0000319A                            Sega_GotoTitle:
0000319A 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
000031A0 4E75                       		rts	
000031A2                            ; ===========================================================================
000031A2                            
000031A2                            ; ---------------------------------------------------------------------------
000031A2                            ; Title	screen
000031A2                            ; ---------------------------------------------------------------------------
000031A2                            
000031A2                            TitleScreen:				; XREF: GameModeArray
000031A2 103C 00E4                  		move.b	#$E4,d0
000031A6 6100 E418                  		bsr.w	PlaySound_Special ; stop music
000031AA 6100 EE90                  		bsr.w	Pal_FadeFrom
000031AE 6100 E652                  		bsr.w	ClearPLC
000031B2 46FC 2700                  		move	#$2700,sr
000031B6 6100 E3BE                  		bsr.w	SoundDriverLoad
000031BA 4DF9 00C0 0004             		lea	($C00004).l,a6
000031C0 3CBC 8004                  		move.w	#$8004,(a6)
000031C4 3CBC 8230                  		move.w	#$8230,(a6)
000031C8 3CBC 8407                  		move.w	#$8407,(a6)
000031CC 3CBC 9001                  		move.w	#$9001,(a6)
000031D0 3CBC 9200                  		move.w	#$9200,(a6)
000031D4 3CBC 8B03                  		move.w	#$8B03,(a6)
000031D8 3CBC 8720                  		move.w	#$8720,(a6)
000031DC 4238 F64E                  		clr.b	($FFFFF64E).w
000031E0 6100 E306                  		bsr.w	ClearScreen
000031E4 43F8 D000                  		lea	($FFFFD000).w,a1
000031E8 7000                       		moveq	#0,d0
000031EA 323C 07FF                  		move.w	#$7FF,d1
000031EE                            
000031EE                            Title_ClrObjRam:
000031EE 22C0                       		move.l	d0,(a1)+
000031F0 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000031F4                            
000031F4                            ; gomer
000031F4 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000031FE 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
00003204 6100 E45E                  		bsr.w	NemDec
00003208 7003                       		moveq	#3,d0		; load Sonic's pallet
0000320A 6100 F0DA                  		bsr.w	PalLoad1
0000320E                            
0000320E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003214 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
0000321A 303C 0000                  		move.w	#0,d0
0000321E 6100 E722                  		bsr.w	EniDec
00003222                            ; help how the fuck can i do this IT SHOWS NOTHING
00003222 43F9 00FF 0000             		lea	($FF0000).l,a1
00003228 203C 4000 0003             		move.l	#$40000003,d0
0000322E 7227                       		moveq	#$27,d1
00003230 741B                       		moveq	#$1B,d2
00003232                            
00003232 43F9 00FF 0000             		lea	($FF0000).l,a1
00003238 203C 6000 0003             		move.l	#$60000003,d0
0000323E 7227                       		moveq	#$27,d1
00003240 741B                       		moveq	#$1B,d2
00003242                            
00003242 6100 ED52                  		bsr.w	Pal_FadeTo
00003246 6100 EDF4                  		bsr.w	Pal_FadeFrom
0000324A                            
0000324A                            
0000324A 6100 E29C                  		bsr.w	ClearScreen
0000324E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003258 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
0000325E 6100 E404                  		bsr.w	NemDec
00003262 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
0000326C 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003272 6100 E3F0                  		bsr.w	NemDec
00003276 43F9 00FF 0000             		lea	($FF0000).l,a1
0000327C 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003282 303C 0000                  		move.w	#0,d0
00003286 6100 E6BA                  		bsr.w	EniDec
0000328A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003290 203C 4000 0003             		move.l	#$40000003,d0
00003296 7227                       		moveq	#$27,d1
00003298 741B                       		moveq	#$1B,d2
0000329A 6100 E3A8                  		bsr.w	ShowVDPGraphics
0000329E 6100 ED9C                  		bsr.w	Pal_FadeFrom
000032A2 43F8 FB80                  		lea	($FFFFFB80).w,a1
000032A6 7000                       		moveq	#0,d0
000032A8 323C 001F                  		move.w	#$1F,d1
000032AC                            
000032AC                            Title_ClrPallet:
000032AC 22C0                       		move.l	d0,(a1)+
000032AE 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
000032B2                            
000032B2 7003                       		moveq	#3,d0		; load Sonic's pallet
000032B4 6100 F030                  		bsr.w	PalLoad1
000032B8 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000032BE 4EB9 0000 0000             		jsr	ObjectsLoad
000032C4 4EB9 0000 0000             		jsr	BuildSprites
000032CA 6100 ECCA                  		bsr.w	Pal_FadeTo
000032CE 46FC 2700                  		move	#$2700,sr
000032D2 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
000032DC 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000032E2 6100 E380                  		bsr.w	NemDec
000032E6 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
000032F0 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
000032F6 6100 E36C                  		bsr.w	NemDec
000032FA 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003304 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
0000330A 6100 E358                  		bsr.w	NemDec
0000330E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003314 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
0000331C 4BF9 0000 05F4             		lea	(Art_Text).l,a5
00003322 323C 0BB6                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
00003326                            
00003326                            Title_LoadText:
00003326 2C9D                       		move.l	(a5)+,(a6)
00003328 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
0000332C                            
0000332C 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003332 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003338 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
0000333E 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003344 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
0000334A 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003350 6100 0000                  		bsr.w	LevelSizeLoad
00003354 6100 0000                  		bsr.w	DeformBgLayer
00003358                            
00003358 43F8 B000                  		lea	($FFFFB000).w,a1
0000335C 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003362 303C 0000                  		move.w	#0,d0
00003366 6100 E5DA                  		bsr.w	EniDec
0000336A 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003370 43F9 00FF 0000             		lea	($FF0000).l,a1
00003376 6100 E748                  		bsr.w	KosDec
0000337A 6100 0000                  		bsr.w	LevelLayoutLoad
0000337E                            
0000337E 46FC 2700                  		move	#$2700,sr
00003382 6100 E164                  		bsr.w	ClearScreen
00003386 4BF9 00C0 0004             		lea	($C00004).l,a5
0000338C 4DF9 00C0 0000             		lea	($C00000).l,a6
00003392 47F8 F708                  		lea	($FFFFF708).w,a3
00003396 49F8 A440                  		lea	($FFFFA440).w,a4
0000339A 343C 6000                  		move.w	#$6000,d2
0000339E 6100 0000                  		bsr.w	LoadTilesFromStart2
000033A2 43F9 00FF 0000             		lea	($FF0000).l,a1
000033A8 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000033AE 303C 0000                  		move.w	#0,d0
000033B2 6100 E58E                  		bsr.w	EniDec
000033B6 43F9 00FF 0000             		lea	($FF0000).l,a1
000033BC 203C 4206 0003             		move.l	#$42060003,d0
000033C2 7221                       		moveq	#$21,d1
000033C4 7415                       		moveq	#$15,d2
000033C6 6100 E27C                  		bsr.w	ShowVDPGraphics
000033CA 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000033D4 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000033DA 6100 E288                  		bsr.w	NemDec
000033DE 7001                       		moveq	#1,d0		; load title screen pallet
000033E0 6100 EF04                  		bsr.w	PalLoad1
000033E4 103C 008A                  		move.b	#$8A,d0		; play title screen music
000033E8 6100 E1D6                  		bsr.w	PlaySound_Special
000033EC 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
000033F2 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
000033F8 43F8 D080                  		lea	($FFFFD080).w,a1
000033FC 7000                       		moveq	#0,d0
000033FE 323C 0007                  		move.w	#7,d1
00003402                            
00003402                            Title_ClrObjRam2:
00003402 22C0                       		move.l	d0,(a1)+
00003404 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003408                            
00003408 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
0000340E 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003414 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
0000341A 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003420 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003426 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
0000342C 4EB9 0000 0000             		jsr	ObjectsLoad
00003432 6100 0000                  		bsr.w	DeformBgLayer
00003436 4EB9 0000 0000             		jsr	BuildSprites
0000343C 7000                       		moveq	#0,d0
0000343E 6100 E396                  		bsr.w	LoadPLC2
00003442 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003448 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
0000344E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003452 0000 0040                  		ori.b	#$40,d0
00003456 33C0 00C0 0004             		move.w	d0,($C00004).l
0000345C 6100 EB38                  		bsr.w	Pal_FadeTo
00003460                            
00003460                            loc_317C:
00003460 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003466 6100 F7CA                  		bsr.w	DelayProgram
0000346A 4EB9 0000 0000             		jsr	ObjectsLoad
00003470 6100 0000                  		bsr.w	DeformBgLayer
00003474 4EB9 0000 0000             		jsr	BuildSprites
0000347A 6100 E704                  		bsr.w	PalCycle_Title
0000347E 6100 E390                  		bsr.w	RunPLC_RAM
00003482 3038 D008                  		move.w	($FFFFD008).w,d0
00003486 5440                       		addq.w	#2,d0
00003488 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
0000348C 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003490 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003492 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003498 4E75                       		rts	
0000349A                            ; ===========================================================================
0000349A                            
0000349A                            Title_ChkRegion:
0000349A 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
0000349E 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
000034A0 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
000034A6 6000                       		bra.s	Title_EnterCheat
000034A8                            ; ===========================================================================
000034A8                            
000034A8                            Title_RegionJ:				; XREF: Title_ChkRegion
000034A8 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
000034AE                            
000034AE                            Title_EnterCheat:			; XREF: Title_ChkRegion
000034AE 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000034B2 D0C0                       		adda.w	d0,a0
000034B4 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
000034B8 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
000034BC B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000034BE 6600                       		bne.s	loc_3210	; if not, branch
000034C0 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
000034C4 4A00                       		tst.b	d0
000034C6 6600                       		bne.s	Title_CountC
000034C8 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000034CC 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000034D0 E249                       		lsr.w	#1,d1
000034D2 0241 0003                  		andi.w	#3,d1
000034D6 6700                       		beq.s	Title_PlayRing
000034D8 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000034DC 6A00                       		bpl.s	Title_PlayRing
000034DE 7201                       		moveq	#1,d1
000034E0 1181 1001                  		move.b	d1,1(a0,d1.w)
000034E4                            
000034E4                            Title_PlayRing:
000034E4 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000034EA 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000034EE 6100 E0D0                  		bsr.w	PlaySound_Special
000034F2 6000                       		bra.s	Title_CountC
000034F4                            ; ===========================================================================
000034F4                            
000034F4                            loc_3210:				; XREF: Title_EnterCheat
000034F4 4A00                       		tst.b	d0
000034F6 6700                       		beq.s	Title_CountC
000034F8 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000034FE 6700                       		beq.s	Title_CountC
00003500 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003506                            
00003506                            Title_CountC:
00003506 1038 F605                  		move.b	($FFFFF605).w,d0
0000350A 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
0000350E 6700                       		beq.s	loc_3230	; if not, branch
00003510 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003514                            
00003514                            loc_3230:
00003514 4A78 F614                  		tst.w	($FFFFF614).w
00003518 6700 0000                  		beq.w	Demo
0000351C                            		; (temporary until we have an actual options screen)
0000351C 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
00003522 6700                       		beq.s	@notc
00003524                            
00003524 0A38 0001 FFE8             		eor.b	#1,(v_character) ; sonic/gronic 
0000352A 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
0000352E 6100 E090                  		bsr.w	PlaySound_Special
00003532                            	@notc:
00003532 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003538 6700 FF26                  		beq.w	loc_317C	; if not, branch
0000353C                            
0000353C                            Title_ChkLevSel:
0000353C 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003540 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003544 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
0000354A 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000354E                            		
0000354E                            		
0000354E 7002                       		moveq	#2,d0
00003550 6100 EDB0                  		bsr.w	PalLoad2	; load level select pallet
00003554 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003558 7000                       		moveq	#0,d0
0000355A 323C 00DF                  		move.w	#$DF,d1
0000355E                            
0000355E                            Title_ClrScroll:
0000355E 22C0                       		move.l	d0,(a1)+
00003560 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003564                            
00003564 21C0 F616                  		move.l	d0,($FFFFF616).w
00003568 46FC 2700                  		move	#$2700,sr
0000356C 4DF9 00C0 0000             		lea	($C00000).l,a6
00003572 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
0000357C 323C 03FF                  		move.w	#$3FF,d1
00003580                            
00003580                            Title_ClrVram:
00003580 2C80                       		move.l	d0,(a6)
00003582 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003586                            
00003586 6100 0000                  		bsr.w	LevSelTextLoad
0000358A                            		
0000358A                            		; sound test fix
0000358A 3C38 FF82                  		move.w	($FFFFFF82).w,d6
0000358E 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
00003594                            		
00003594 363C C65F                  		move.w	#$C680-$21,d3 ; selected
00003598 0C46 0014                  		cmpi.w	#$14,d6
0000359C 6700                       		beq.s	@issndtst
0000359E 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
000035A2                            	@issndtst:
000035A2 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
000035A6 31C6 FF82                  		move.w	d6,($FFFFFF82).w
000035AA                            		
000035AA 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
000035AE 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
000035B6                            		
000035B6 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
000035BC 6700                       		beq.s	@issndtst2
000035BE                            		
000035BE 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
000035C4 6100 0000                  		bsr.w	CStringSlop
000035C8 6000                       		bra.s	LevelSelect
000035CA                            	@issndtst2:
000035CA 43F9 0000 0000             		lea	(Controls_SND).l,a1
000035D0 6100 0000                  		bsr.w	CStringSlop
000035D4                            ; ---------------------------------------------------------------------------
000035D4                            ; Level	Select
000035D4                            ; ---------------------------------------------------------------------------
000035D4                            LevelSelect:
000035D4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000035DA 6100 F656                  		bsr.w	DelayProgram
000035DE 6100 0000                  		bsr.w	LevSelControls
000035E2 6100 E22C                  		bsr.w	RunPLC_RAM
000035E6 4AB8 F680                  		tst.l	($FFFFF680).w
000035EA 66E8                       		bne.s	LevelSelect
000035EC 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000035F2 67E0                       		beq.s	LevelSelect	; if not, branch
000035F4 3038 FF82                  		move.w	($FFFFFF82).w,d0
000035F8 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
000035FC 6600                       		bne.s	@dont	; if not, dont blow this place up
000035FE                            			
000035FE 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
00003604 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000360A 6100 F626                  		bsr.w	DelayProgram
0000360E                            	@dont:
0000360E 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
00003612 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003614                            		
00003614 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
0000361A 67B8                       		beq.s	LevelSelect	; if not, branch
0000361C                            		
0000361C 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
00003622 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
00003624                            		
00003624 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003628 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
0000362C                            		
0000362C 4EB9 0000 0000             		jsr		ShowNow_Playing
00003632 60A0                       		bra.s	LevelSelect
00003634                            ; ===========================================================================
00003634                            
00003634                            LevSel_SEGA:				; XREF: LevelSelect
00003634 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
0000363A 4E75                       		rts	
0000363C                            ; ===========================================================================
0000363C                            
0000363C                            LevSel_Ending:				; XREF: LevelSelect
0000363C 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003642 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003648 4E75                       		rts	
0000364A                            ; ===========================================================================
0000364A                            
0000364A                            LevSel_Credits:				; XREF: LevelSelect
0000364A 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003650 103C 0091                  		move.b	#$91,d0
00003654 6100 DF6A                  		bsr.w	PlaySound_Special ; play credits music
00003658 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
0000365E 4E75                       		rts	
00003660                            ; ===========================================================================
00003660                            
00003660                            LevSel_Level_SS:			; XREF: LevelSelect
00003660 D040                       		add.w	d0,d0
00003662 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003666 6B00 FF6C                  		bmi.w	LevelSelect
0000366A 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
0000366E 6600                       		bne.s	LevSel_Level	; if not, branch
00003670 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003676 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
0000367A 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003680 7000                       		moveq	#0,d0
00003682 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003686 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000368A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000368E 4E75                       		rts	
00003690                            ; ===========================================================================
00003690                            
00003690                            LevSel_Level:				; XREF: LevSel_Level_SS
00003690 0240 3FFF                  		andi.w	#$3FFF,d0
00003694 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003698                            
00003698                            PlayLevel:				; XREF: ROM:00003246j ...
00003698 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000369E 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000036A4 7000                       		moveq	#0,d0
000036A6 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000036AA 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000036AE 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000036B2 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
000036B6 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
000036BA 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
000036BE 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
000036C2 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
000036C6 103C 00E0                  		move.b	#$E0,d0
000036CA 6100 DEF4                  		bsr.w	PlaySound_Special ; fade out music
000036CE 4E75                       		rts	
000036D0                            ; ===========================================================================
000036D0                            ; ---------------------------------------------------------------------------
000036D0                            ; Level	select - level pointers
000036D0                            ; ---------------------------------------------------------------------------
000036D0                            LSelectPointers:
000036D0                            		incbin	misc\ls_point.bin
000036FA                            		even
000036FA                            ; ---------------------------------------------------------------------------
000036FA                            ; Level	select codes
000036FA                            ; ---------------------------------------------------------------------------
000036FA                            LevelSelectCode_J:
000036FA                            		incbin	misc\ls_jcode.bin
00003700                            		even
00003700                            
00003700                            LevelSelectCode_US:
00003700                            		incbin	misc\ls_ucode.bin
00003706                            		even
00003706                            ; ===========================================================================
00003706                            
00003706                            ; ---------------------------------------------------------------------------
00003706                            ; Demo mode
00003706                            ; ---------------------------------------------------------------------------
00003706                            
00003706                            Demo:					; XREF: TitleScreen
00003706 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
0000370C                            
0000370C                            loc_33B6:				; XREF: loc_33E4
0000370C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003712 6100 F51E                  		bsr.w	DelayProgram
00003716 6100 0000                  		bsr.w	DeformBgLayer
0000371A 6100 E444                  		bsr.w	PalCycle_Load
0000371E 6100 E0F0                  		bsr.w	RunPLC_RAM
00003722 3038 D008                  		move.w	($FFFFD008).w,d0
00003726 5440                       		addq.w	#2,d0
00003728 31C0 D008                  		move.w	d0,($FFFFD008).w
0000372C 0C40 1C00                  		cmpi.w	#$1C00,d0
00003730 6500                       		bcs.s	loc_33E4
00003732 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003738 4E75                       		rts	
0000373A                            ; ===========================================================================
0000373A                            
0000373A                            loc_33E4:				; XREF: Demo
0000373A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003740 6600 FDFA                  		bne.w	Title_ChkLevSel	; if yes, branch
00003744 4A78 F614                  		tst.w	($FFFFF614).w
00003748 6600 FFC2                  		bne.w	loc_33B6
0000374C 103C 00E0                  		move.b	#$E0,d0
00003750 6100 DE6E                  		bsr.w	PlaySound_Special ; fade out music
00003754 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003758 0240 0007                  		andi.w	#7,d0
0000375C D040                       		add.w	d0,d0
0000375E 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003762 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003766 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
0000376A 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003770 6500                       		bcs.s	loc_3422	; if yes, branch
00003772 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003778                            
00003778                            loc_3422:
00003778 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
0000377E 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003784 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003788 6600                       		bne.s	Demo_Level	; if not, branch
0000378A 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003790 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00003794 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003798                            
00003798                            Demo_Level:
00003798 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
0000379E 7000                       		moveq	#0,d0
000037A0 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000037A4 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000037A8 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000037AC 4E75                       		rts	
000037AE                            ; ===========================================================================
000037AE                            ; ---------------------------------------------------------------------------
000037AE                            ; Levels used in demos
000037AE                            ; ---------------------------------------------------------------------------
000037AE                            Demo_Levels:	incbin	misc\dm_ord1.bin
000037B6                            		even
000037B6                            
000037B6                            ; ---------------------------------------------------------------------------
000037B6                            ; Subroutine to	change what you're selecting in the level select
000037B6                            ; ---------------------------------------------------------------------------
000037B6                            
000037B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000037B6                            
000037B6                            
000037B6                            LevSelControls:				; XREF: LevelSelect
000037B6 1238 F605                  		move.b	($FFFFF605).w,d1
000037BA 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
000037BE 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000037C0 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
000037C4 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
000037C8                            
000037C8                            LevSel_UpDown:
000037C8 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
000037CE 1238 F604                  		move.b	($FFFFF604).w,d1
000037D2 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
000037D6 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
000037DA 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000037DE 0801 0000                  		btst	#0,d1		; is up	pressed?
000037E2 6700                       		beq.s	LevSel_Down	; if not, branch
000037E4 5346                       		subq.w	#1,d6		; move up 1 selection
000037E6 6400                       		bcc.s	LevSel_Down
000037E8 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
000037EA                            
000037EA                            LevSel_Down:
000037EA 0801 0001                  		btst	#1,d1		; is down pressed?
000037EE 6700                       		beq.s	LevSel_Refresh	; if not, branch
000037F0 5246                       		addq.w	#1,d6		; move down 1 selection
000037F2 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000037F6 6500                       		bcs.s	LevSel_Refresh
000037F8 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
000037FA 6000                       		bra.s	LevSel_Refresh
000037FC                            		
000037FC                            LevSel_LR:
000037FC 0801 0002                  		btst	#2,d1		; is left pressed?
00003800 6700                       		beq.s	LevSel_Right	; if not, branch
00003802 0446 0000                  		sub.w	#lsrow2size,d6
00003806 64E2                       		bcc.s	LevSel_Down
00003808 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
0000380C                            LevSel_Right:
0000380C 0801 0003                  		btst	#3,d1		; is right pressed?
00003810 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003812 0646 0000                  		add.w	#lsrow1size,d6
00003816 0C46 0000                  		cmpi.w	#lsselectable+1,d6
0000381A 6500                       		bcs.s	LevSel_Refresh
0000381C 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
00003820                            ; ===========================================================================
00003820                            LevSel_Refresh:
00003820                            		
00003820 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003824 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003828                            		
00003828 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
0000382E 6600                       		bne.s	@exitsndtest
00003830                            		
00003830 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003834 43F9 0000 0000             		lea	(Controls_Normal).l,a1
0000383A 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003842 6100 0000                  		bsr.w	CStringSlop
00003846                            	@exitsndtest:
00003846                            	
00003846 363C C65F                  		move.w	#$C680-$21,d3
0000384A 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
0000384E 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003852                            		
00003852 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
00003858 6600                       		bne.s	@entersndtest
0000385A                            		
0000385A 363C C65F                  		move.w	#$C680-$21,d3
0000385E 43F9 0000 0000             		lea	(Controls_SND).l,a1
00003864 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
0000386C 6100 0000                  		bsr.w	CStringSlop
00003870                            	@entersndtest:
00003870 4E75                       		rts	
00003872                            		
00003872                            LevSel_SndTest:				; XREF: LevSelControls
00003872 1238 F605                  		move.b	($FFFFF605).w,d1
00003876 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
0000387A 6700                       		beq.s	LevSel_NoMove	; if not, branch
0000387C 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
00003882 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
00003886                            		
00003886 1038 FF84                  		move.b	($FFFFFF84).w,d0
0000388A 0801 0002                  		btst	#2,d1		; is left pressed?
0000388E 6700                       		beq.s	SndTest_Right	; if not, branch
00003890 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
00003892                            		; no need the fact it's a byte does the trick
00003892                            
00003892                            SndTest_Right:
00003892 0801 0003                  		btst	#3,d1		; is right pressed?
00003896 6700                       		beq.s	SndTest_A	; if not, branch
00003898 5200                       		addq.b	#1,d0		; add 1	to sound test
0000389A                            		; same here
0000389A                            		
0000389A                            SndTest_A:
0000389A 0801 0006                  		btst	#6,d1		; is A pressed?
0000389E 6700                       		beq.s	SndTest_B	; if not, branch
000038A0 5100                       		subq.b	#8,d0		; subtract $10 to sound test
000038A2 5100                       		subq.b	#8,d0
000038A4                            		
000038A4                            SndTest_B:
000038A4 0801 0004                  		btst	#4,d1		; is B pressed?
000038A8 6700                       		beq.s	SndTest_Refresh	; if not, branch
000038AA 5000                       		addq.b	#8,d0		; add $10 to sound test
000038AC 5000                       		addq.b	#8,d0
000038AE                            
000038AE                            SndTest_Refresh:
000038AE 363C C65F                  		move.w	#$C680-$21,d3
000038B2 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
000038B6 6000 0000                  		bra.w	LevSelSndTest	; refresh text
000038BA                            
000038BA                            LevSel_NoMove:
000038BA 4E75                       		rts	
000038BC                            ; End of function LevSelControls
000038BC                            
000038BC                            ; ---------------------------------------------------------------------------
000038BC                            ; Subroutine to load level select text
000038BC                            ; ---------------------------------------------------------------------------
000038BC                            
000038BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000038BC                            
000038BC                            LevSelTextLoad_loop:
000038BC 2D44 0004                  		move.l	d4,4(a6)
000038C0 6100 0000                  		bsr.w	LevSel_ChgLine
000038C4 0684 0080 0000             		addi.l	#$800000,d4
000038CA 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000038CE 4E75                       		rts
000038D0                            LevSelTextLoad:				; XREF: TitleScreen
000038D0 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000038D6 4DF9 00C0 0000             		lea	($C00000).l,a6
000038DC 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000038E0 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
000038E6                            		
000038E6 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
000038EA 61D0                       		bsr.s	LevSelTextLoad_loop
000038EC                            		
000038EC                            		
000038EC 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
000038F2 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
000038F6 61C4                       		bsr.s	LevSelTextLoad_loop
000038F8 363C C65F                  		move.w	#$C680-$21,d3
000038FC                            		
000038FC                            LevSelHighlightCode:
000038FC 4DF9 00C0 0000             		lea	($C00000).l,a6
00003902 7000                       		moveq	#0,d0
00003904 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003908 3200                       		move.w	d0,d1
0000390A 283C 6086 0003             		move.l	#lsscrpos,d4
00003910                            		
00003910 0C40 0000                  		cmpi.w	#lsrow1size,d0
00003914 6D00                       		blt.s	@notsecond
00003916                            		
00003916 0440 0000                  		sub.w	#lsrow1size,d0
0000391A 0684 0024 0000             		addi.l	#lsoff,d4
00003920                            	@notsecond:
00003920 EF48                       		lsl.w	#7,d0
00003922 4840                       		swap	d0
00003924 D880                       		add.l	d0,d4
00003926 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000392C E749                       		lsl.w	#3,d1
0000392E D241                       		add.w	d1,d1
00003930 D2C1                       		adda.w	d1,a1
00003932 2D44 0004                  		move.l	d4,4(a6)
00003936 6100 0000                  		bsr.w	LevSel_ChgLine
0000393A 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003940 6700                       		beq.s	LevSelSndTest
00003942 4E75                       		rts
00003944                            
00003944                            LevSelSndTest:
00003944 0643 0030                  		add.w	#$30,d3
00003948 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
00003952 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003956 1400                       		move.b	d0,d2
00003958 E808                       		lsr.b	#4,d0
0000395A 6100 0000                  		bsr.w	LevSel_ChgSnd
0000395E 1002                       		move.b	d2,d0
00003960 6100 0000                  		bsr.w	LevSel_ChgSnd
00003964 4E75                       		rts	
00003966                            ; End of function LevSelTextLoad
00003966                            
00003966                            
00003966                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003966                            
00003966                            
00003966                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003966 0240 000F                  		andi.w	#$F,d0
0000396A 0C00 000A                  		cmpi.b	#$A,d0
0000396E 6500                       		bcs.s	loc_3580
00003970 5E00                       		addi.b	#7,d0
00003972                            
00003972                            loc_3580:
00003972 D043                       		add.w	d3,d0
00003974 3C80                       		move.w	d0,(a6)
00003976 4E75                       		rts	
00003978                            ; End of function LevSel_ChgSnd
00003978                            
00003978                            
00003978                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003978                            
00003978                            
00003978                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003978 740F                       		moveq	#$10-1,d2		; number of characters per line
0000397A                            
0000397A                            @loop:
0000397A 7000                       		moveq	#0,d0
0000397C 1019                       		move.b	(a1)+,d0
0000397E 0C00 0020                  		cmpi.b	#$20,d0
00003982 6E00                       		bgt.s	@draw
00003984 3CBC 0000                  		move.w	#0,(a6)
00003988 51CA FFF0                  		dbf	d2,@loop
0000398C 4E75                       		rts	
0000398E                            ; ===========================================================================
0000398E                            
0000398E                            @draw:				; XREF: LevSel_ChgLine
0000398E D043                       		add.w	d3,d0
00003990 3C80                       		move.w	d0,(a6)
00003992 51CA FFE6                  		dbf	d2,@loop
00003996 4E75                       		rts	
00003998                            ; End of function LevSel_ChgLine
00003998                            		
00003998                            CStringSlop_draw:
00003998 D043                       		add.w	d3,d0
0000399A 3C80                       		move.w	d0,(a6)
0000399C                            CStringSlop:				; XREF: LevSelTextLoad
0000399C 7000                       		moveq	#0,d0
0000399E 1019                       		move.b	(a1)+,d0
000039A0 0C00 0020                  		cmpi.b	#$20,d0
000039A4 6EF2                       		bgt.s	CStringSlop_draw
000039A6                            		
000039A6 0C00 0001                  		cmpi.b	#1,d0
000039AA 6700                       		beq.s	@InsertSpaces
000039AC 6500                       		blo.s	@end
000039AE                            		
000039AE 3CBC 0000                  		move.w	#0,(a6)
000039B2 60E8                       		bra.s	CStringSlop
000039B4                            	@end:
000039B4 4E75                       		rts
000039B6                            	@InsertSpaces:
000039B6 7000                       		moveq	#0,d0
000039B8 1019                       		move.b	(a1)+,d0
000039BA                            		
000039BA                            	@insert:
000039BA 3CBC 0000                  		move.w	#0,(a6)
000039BE 51C8 FFFA                  		dbf.w	d0,@insert
000039C2 60D8                       		bra.s	CStringSlop
000039C4                            ; End of function LevSel_ChgLine
000039C4                            
000039C4                            ; ===========================================================================
000039C4                            ; ---------------------------------------------------------------------------
000039C4                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
000039C4                            ; ---------------------------------------------------------------------------
000039C4                            LevelMenuText:	
000039C4 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
000039D4 2020 2020 2020 2020 2020+          dc.b    "               2"
000039E4 2020 2020 2020 2020 2020+          dc.b    "               3"
000039F4 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00003A04 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003A14 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A24 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003A34 2020 2020 2020 2020 2020+          dc.b    "               2"
00003A44 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A54 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00003A64 2020 2020 2020 2020 2020+          dc.b    "               2"
00003A74 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A84                            LMTSecondRow:
00003A84 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003A94 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00003AA4 2020 2020 2020 2020 2020+          dc.b    "               3"
00003AB4 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003AC4 2020 2020 2020 2020 2020+          dc.b    "               2"
00003AD4 2020 2020 2020 2020 2020+          dc.b    "               3"
00003AE4 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003AF4 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003B04 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00003B14 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003B24 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003B34                            LMTSelectableEnd:
00003B34 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003B44                            LMTEnd:
00003B44                            
00003B44                            Now_Playing:
00003B44 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003B54                            		even
00003B54                            NP_Track:
00003B54 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003B5C                            		even
00003B5C                            NP_SFX:
00003B5C 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003B64                            		even
00003B64                            
00003B64                            ShowNow_Playing:
00003B64 1C00                       		move.b	d0,d6
00003B66 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003B6A 43FA FFD8                  		lea	Now_Playing(pc),a1
00003B6E 4DF9 00C0 0000             		lea		($C00000).l,a6
00003B74 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00003B7C 6100 FE1E                  		bsr.w	CStringSlop
00003B80                            		
00003B80 43FA FFD2                  		lea	NP_Track(pc),a1
00003B84 0C06 00A0                  		cmpi.b	#$A0,d6
00003B88 6D00                       		blt.s	@track
00003B8A                            		
00003B8A 43FA FFD0                  		lea	NP_SFX(pc),a1
00003B8E                            	@track:
00003B8E 6100 FE0C                  		bsr.w	CStringSlop
00003B92                            		
00003B92 0643 0030                  		add.w	#$30,d3
00003B96 1006                       		move.b	d6,d0
00003B98 1400                       		move.b	d0,d2
00003B9A E808                       		lsr.b	#4,d0
00003B9C 6100 FDC8                  		bsr.w	LevSel_ChgSnd
00003BA0 1002                       		move.b	d2,d0
00003BA2 6100 FDC2                  		bsr.w	LevSel_ChgSnd
00003BA6 4E75                       		rts	
00003BA8                            
00003BA8                            ; 1 is insert spaces btw
00003BA8                            Controls_Normal:
00003BA8 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00003BB4                            		even		
00003BB4                            Controls_SND:
00003BB4 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00003BDA 00                         		even
00003BDA                            ; ---------------------------------------------------------------------------
00003BDA                            ; Music	playlist
00003BDA                            ; ---------------------------------------------------------------------------
00003BDA                            MusicList1:	incbin	misc\muslist1.bin
00003BE2                            		even
00003BE2                            MusicList2:	incbin	misc\muslist2.bin
00003BE8                            		even
00003BE8                            MusicList3:	incbin	misc\muslist3.bin
00003BEE                            		even
00003BEE                            MusicList4:	incbin	misc\muslist4.bin
00003BF4                            		even
00003BF4                            ; ===========================================================================
00003BF4                            
00003BF4                            ; ---------------------------------------------------------------------------
00003BF4                            ; Level
00003BF4                            ; ---------------------------------------------------------------------------
00003BF4                            
00003BF4                            Level:					; XREF: GameModeArray
00003BF4 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003BFA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003BFE 6B00                       		bmi.s	loc_37B6
00003C00 103C 00E0                  		move.b	#$E0,d0
00003C04 6100 D9BA                  		bsr.w	PlaySound_Special ; fade out music
00003C08                            
00003C08                            loc_37B6:
00003C08 6100 DBF8                  		bsr.w	ClearPLC
00003C0C 6100 E42E                  		bsr.w	Pal_FadeFrom
00003C10 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C14 6B00                       		bmi.s	Level_ClrRam
00003C16 46FC 2700                  		move	#$2700,sr
00003C1A 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003C24 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003C2A 6100 DA38                  		bsr.w	NemDec
00003C2E 46FC 2300                  		move	#$2300,sr
00003C32 7000                       		moveq	#0,d0
00003C34 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003C38 E948                       		lsl.w	#4,d0
00003C3A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003C40 45F2 0000                  		lea	(a2,d0.w),a2
00003C44 7000                       		moveq	#0,d0
00003C46 1012                       		move.b	(a2),d0
00003C48 6700                       		beq.s	loc_37FC
00003C4A 6100 DB58                  		bsr.w	LoadPLC		; load level patterns
00003C4E                            
00003C4E                            loc_37FC:
00003C4E 7001                       		moveq	#1,d0
00003C50 6100 DB52                  		bsr.w	LoadPLC		; load standard	patterns
00003C54                            
00003C54                            Level_ClrRam:
00003C54 43F8 D000                  		lea	($FFFFD000).w,a1
00003C58 7000                       		moveq	#0,d0
00003C5A 323C 07FF                  		move.w	#$7FF,d1
00003C5E                            
00003C5E                            Level_ClrObjRam:
00003C5E 22C0                       		move.l	d0,(a1)+
00003C60 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003C64                            
00003C64 43F8 F628                  		lea	($FFFFF628).w,a1
00003C68 7000                       		moveq	#0,d0
00003C6A 323C 0015                  		move.w	#$15,d1
00003C6E                            
00003C6E                            Level_ClrVars:
00003C6E 22C0                       		move.l	d0,(a1)+
00003C70 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003C74                            
00003C74 43F8 F700                  		lea	($FFFFF700).w,a1
00003C78 7000                       		moveq	#0,d0
00003C7A 323C 003F                  		move.w	#$3F,d1
00003C7E                            
00003C7E                            Level_ClrVars2:
00003C7E 22C0                       		move.l	d0,(a1)+
00003C80 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003C84                            
00003C84 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003C88 7000                       		moveq	#0,d0
00003C8A 323C 0047                  		move.w	#$47,d1
00003C8E                            
00003C8E                            Level_ClrVars3:
00003C8E 22C0                       		move.l	d0,(a1)+
00003C90 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003C94                            
00003C94 46FC 2700                  		move	#$2700,sr
00003C98 6100 D84E                  		bsr.w	ClearScreen
00003C9C 4DF9 00C0 0004             		lea	($C00004).l,a6
00003CA2 3CBC 8B03                  		move.w	#$8B03,(a6)
00003CA6 3CBC 8230                  		move.w	#$8230,(a6)
00003CAA 3CBC 8407                  		move.w	#$8407,(a6)
00003CAE 3CBC 857C                  		move.w	#$857C,(a6)
00003CB2 3CBC 9001                  		move.w	#$9001,(a6)
00003CB6 3CBC 8004                  		move.w	#$8004,(a6)
00003CBA 3CBC 8720                  		move.w	#$8720,(a6)
00003CBE 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003CC4 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003CC8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003CCE 6600                       		bne.s	Level_LoadPal	; if not, branch
00003CD0 3CBC 8014                  		move.w	#$8014,(a6)
00003CD4 7000                       		moveq	#0,d0
00003CD6 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003CDA D040                       		add.w	d0,d0
00003CDC 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003CE2 3031 0000                  		move.w	(a1,d0.w),d0
00003CE6 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003CEA 31C0 F648                  		move.w	d0,($FFFFF648).w
00003CEE 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003CF2 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003CF6 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003CFA 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003D00 6000 0000                  		bra.w	Level_LoadPal
00003D04                            Player_Palette:
00003D04                            		; normal, lz, sbz, blank
00003D04 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003D0C                            		
00003D0C 0015 0016 0017 0000        		dc.w	21,22,23,0 ; Pal_Gronic 
00003D14                            		; add more player palettes
00003D14                            Level_LoadPal:
00003D14 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003D1A 46FC 2300                  		move	#$2300,sr
00003D1E                            
00003D1E 7200                       		moveq	#0,d1
00003D20 1238 FFE8                  		move.b	(v_character),d1
00003D24 D241                       		add.w	d1,d1
00003D26 D241                       		add.w	d1,d1
00003D28 D241                       		add.w	d1,d1
00003D2A 303B 10D8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003D2E                            		
00003D2E 6100 E5D2                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003D32 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003D38 6600                       		bne.s	Level_GetBgm	; if not, branch
00003D3A 303B 10CA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003D3E 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003D44 6600                       		bne.s	Level_WaterPal	; if not, branch
00003D46 303B 10C0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003D4A                            
00003D4A                            Level_WaterPal:
00003D4A 6100 E5CE                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003D4E 4A38 FE30                  		tst.b	($FFFFFE30).w
00003D52 6700                       		beq.s	Level_GetBgm
00003D54 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003D5A                            
00003D5A                            ; NineKode begins here - How to play different songs on different acts
00003D5A                             
00003D5A                            Level_GetBgm:
00003D5A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003D5E 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003D62 7000                       		moveq	#0,d0
00003D64 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003D68                             
00003D68 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003D6E 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003D70 43F9 0000 3BDA             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003D76 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003D78                             
00003D78                            Level_GetBgm2:
00003D78 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003D7E 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003D80 43F9 0000 3BE2             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003D86 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003D88                             
00003D88                            Level_GetBgm3:
00003D88 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003D8E 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003D90 43F9 0000 3BE8             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003D96 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003D98                             
00003D98                            Level_GetBgm4:
00003D98 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003D9E 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003DA0 43F9 0000 3BEE             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003DA6                             
00003DA6                            Level_PlayBgm:
00003DA6 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003DAA 6100 D80E                  		bsr.w	PlaySound	; play music
00003DAE 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003DB4                             
00003DB4                            ; NineKode ends here
00003DB4                            
00003DB4                            Level_TtlCard:
00003DB4 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003DBA 6100 EE76                  		bsr.w	DelayProgram
00003DBE 4EB9 0000 0000             		jsr	ObjectsLoad
00003DC4 4EB9 0000 0000             		jsr	BuildSprites
00003DCA 6100 DA44                  		bsr.w	RunPLC_RAM
00003DCE 3038 D108                  		move.w	($FFFFD108).w,d0
00003DD2 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003DD6 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003DD8 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003DDC 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003DDE 4EB9 0000 0000             		jsr	Hud_Base
00003DE4                            
00003DE4                            loc_3946:
00003DE4 7003                       		moveq	#3,d0
00003DE6 6100 E4FE                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003DEA 6100 0000                  		bsr.w	LevelSizeLoad
00003DEE 6100 0000                  		bsr.w	DeformBgLayer
00003DF2 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003DF8 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003DFC 6100 0000                  		bsr.w	LoadTilesFromStart
00003E00 4EB9 0000 0000             		jsr	FloorLog_Unk
00003E06 6100 0000                  		bsr.w	ColIndexLoad
00003E0A 6100 0000                  		bsr.w	LZWaterEffects
00003E0E 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003E14 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003E18 6B00                       		bmi.s	Level_ChkDebug
00003E1A 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003E20                            
00003E20                            Level_ChkDebug:
00003E20 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003E24 6700                       		beq.s	Level_ChkWater	; if not, branch
00003E26 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003E2C 6700                       		beq.s	Level_ChkWater	; if not, branch
00003E2E 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003E34                            
00003E34                            Level_ChkWater:
00003E34 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003E3A 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003E40 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003E46 6600                       		bne.s	Level_LoadObj	; if not, branch
00003E48 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003E4E 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003E54 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003E5A 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003E60                            
00003E60                            Level_LoadObj:
00003E60 4EB9 0000 0000             		jsr	ObjPosLoad
00003E66 4EB9 0000 0000             		jsr	ObjectsLoad
00003E6C 4EB9 0000 0000             		jsr	BuildSprites
00003E72 7000                       		moveq	#0,d0
00003E74 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003E78 6600                       		bne.s	loc_39E8	; if yes, branch
00003E7A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003E7E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003E82 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003E86                            
00003E86                            loc_39E8:
00003E86 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003E8A 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003E8E 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003E92 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003E96                            		; move.b	d0,($FFFFFE2F).w
00003E96 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003E9C 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003EA0 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003EA4 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003EA8 6100 0000                  		bsr.w	OscillateNumInit
00003EAC 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003EB2 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003EB8 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003EBE 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003EC4 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003ECA 7000                       		moveq	#0,d0
00003ECC 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003ED0 E548                       		lsl.w	#2,d0
00003ED2 2271 0000                  		movea.l	(a1,d0.w),a1
00003ED6 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003EDA 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003EDC 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003EE2 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003EE6 5340                       		subq.w	#1,d0
00003EE8 E548                       		lsl.w	#2,d0
00003EEA 2271 0000                  		movea.l	(a1,d0.w),a1
00003EEE                            
00003EEE                            Level_Demo:
00003EEE 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003EF4 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003EF8 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003EFE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003F02 6A00                       		bpl.s	Level_ChkWaterPal
00003F04 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003F0A 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003F10 6600                       		bne.s	Level_ChkWaterPal
00003F12 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003F18                            
00003F18                            Level_ChkWaterPal:
00003F18 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003F1E 6600                       		bne.s	Level_Delay	; if not, branch
00003F20 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003F22 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003F28 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003F2A 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003F2C                            
00003F2C                            Level_WaterPal2:
00003F2C 6100 E408                  		bsr.w	PalLoad4_Water
00003F30                            
00003F30                            Level_Delay:
00003F30 323C 0003                  		move.w	#3,d1
00003F34                            
00003F34                            Level_DelayLoop:
00003F34 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003F3A 6100 ECF6                  		bsr.w	DelayProgram
00003F3E 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003F42                            
00003F42 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003F48 6100 E052                  		bsr.w	Pal_FadeTo2
00003F4C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003F50 6B00                       		bmi.s	Level_ClrCardArt
00003F52 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003F56 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003F5A 5838 D124                  		addq.b	#4,($FFFFD124).w
00003F5E 5838 D164                  		addq.b	#4,($FFFFD164).w
00003F62 6000                       		bra.s	Level_StartGame
00003F64                            ; ===========================================================================
00003F64                            
00003F64                            Level_ClrCardArt:
00003F64 7002                       		moveq	#2,d0
00003F66 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load explosion patterns
00003F6C 7000                       		moveq	#0,d0
00003F6E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003F72 0640 0015                  		addi.w	#$15,d0
00003F76 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003F7C                            
00003F7C                            Level_StartGame:
00003F7C 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003F82                            
00003F82                            ; ---------------------------------------------------------------------------
00003F82                            ; Main level loop (when	all title card and loading sequences are finished)
00003F82                            ; ---------------------------------------------------------------------------
00003F82                            
00003F82                            Level_MainLoop:
00003F82 6100 D648                  		bsr.w	PauseGame
00003F86 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003F8C 6100 ECA4                  		bsr.w	DelayProgram
00003F90 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003F94 6100 0000                  		bsr.w	MoveSonicInDemo
00003F98 6100 0000                  		bsr.w	LZWaterEffects
00003F9C 4EB9 0000 0000             		jsr	ObjectsLoad
00003FA2 4A78 FE08                  		tst.w	($FFFFFE08).w
00003FA6 6600                       		bne.s	loc_3B10
00003FA8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003FAE 6400                       		bcc.s	loc_3B14
00003FB0                            
00003FB0                            loc_3B10:
00003FB0 6100 0000                  		bsr.w	DeformBgLayer
00003FB4                            
00003FB4                            loc_3B14:
00003FB4 4EB9 0000 0000             		jsr	BuildSprites
00003FBA 4EB9 0000 0000             		jsr	ObjPosLoad
00003FC0 6100 DB9E                  		bsr.w	PalCycle_Load
00003FC4 6100 D84A                  		bsr.w	RunPLC_RAM
00003FC8 6100 0000                  		bsr.w	OscillateNumDo
00003FCC 6100 0000                  		bsr.w	ChangeRingFrame
00003FD0 6100 0000                  		bsr.w	SignpostArtLoad
00003FD4 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003FDA 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003FDC 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003FE0 6600 FC12                  		bne.w	Level		; if yes, branch
00003FE4 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003FEA 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003FEE 4E75                       		rts	
00003FF0                            ; ===========================================================================
00003FF0                            
00003FF0                            Level_ChkDemo:				; XREF: Level_MainLoop
00003FF0 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003FF4 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003FF6 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003FFA 6700                       		beq.s	Level_EndDemo	; if not, branch
00003FFC 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00004002 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00004006 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000400C 4E75                       		rts	
0000400E                            ; ===========================================================================
0000400E                            
0000400E                            Level_EndDemo:				; XREF: Level_ChkDemo
0000400E 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00004014 6600                       		bne.s	loc_3B88	; if not, branch
00004016 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000401C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004020 6A00                       		bpl.s	loc_3B88	; if yes, branch
00004022 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00004028                            
00004028                            loc_3B88:
00004028 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
0000402E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004034 4278 F794                  		clr.w	($FFFFF794).w
00004038                            
00004038                            loc_3B98:
00004038 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000403E 6100 EBF2                  		bsr.w	DelayProgram
00004042 6100 0000                  		bsr.w	MoveSonicInDemo
00004046 4EB9 0000 0000             		jsr	ObjectsLoad
0000404C 4EB9 0000 0000             		jsr	BuildSprites
00004052 4EB9 0000 0000             		jsr	ObjPosLoad
00004058 5378 F794                  		subq.w	#1,($FFFFF794).w
0000405C 6A00                       		bpl.s	loc_3BC8
0000405E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004064 6100 DFF6                  		bsr.w	Pal_FadeOut
00004068                            
00004068                            loc_3BC8:
00004068 4A78 F614                  		tst.w	($FFFFF614).w
0000406C 66CA                       		bne.s	loc_3B98
0000406E 4E75                       		rts	
00004070                            ; ===========================================================================
00004070                            ; ---------------------------------------------------------------------------
00004070                            ; Subroutine to	do special water effects in Labyrinth Zone
00004070                            ; ---------------------------------------------------------------------------
00004070                            
00004070                            LZWaterEffects:				; XREF: Level
00004070 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00004076 6600                       		bne.s	locret_3C28	; if not, branch
00004078 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000407E 6400                       		bcc.s	LZMoveWater
00004080 6100 0000                  		bsr.w	LZWindTunnels
00004084 6100 0000                  		bsr.w	LZWaterSlides
00004088 6100 0000                  		bsr.w	LZDynamicWater
0000408C                            
0000408C                            LZMoveWater:
0000408C 4238 F64E                  		clr.b	($FFFFF64E).w
00004090 7000                       		moveq	#0,d0
00004092 1038 FE60                  		move.b	($FFFFFE60).w,d0
00004096 E248                       		lsr.w	#1,d0
00004098 D078 F648                  		add.w	($FFFFF648).w,d0
0000409C 31C0 F646                  		move.w	d0,($FFFFF646).w
000040A0 3038 F646                  		move.w	($FFFFF646).w,d0
000040A4 9078 F704                  		sub.w	($FFFFF704).w,d0
000040A8 6400                       		bcc.s	loc_3C1A
000040AA 4A40                       		tst.w	d0
000040AC 6A00                       		bpl.s	loc_3C1A
000040AE 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
000040B4 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
000040BA                            
000040BA                            loc_3C1A:
000040BA 0C40 00DF                  		cmpi.w	#$DF,d0
000040BE 6500                       		bcs.s	loc_3C24
000040C0 303C 00DF                  		move.w	#$DF,d0
000040C4                            
000040C4                            loc_3C24:
000040C4 11C0 F625                  		move.b	d0,($FFFFF625).w
000040C8                            
000040C8                            locret_3C28:
000040C8 4E75                       		rts	
000040CA                            ; ===========================================================================
000040CA                            ; ---------------------------------------------------------------------------
000040CA                            ; Labyrinth default water heights
000040CA                            ; ---------------------------------------------------------------------------
000040CA                            WaterHeight:	incbin	misc\lz_heigh.bin
000040D2                            		even
000040D2                            ; ===========================================================================
000040D2                            
000040D2                            ; ---------------------------------------------------------------------------
000040D2                            ; Labyrinth dynamic water routines
000040D2                            ; ---------------------------------------------------------------------------
000040D2                            
000040D2                            LZDynamicWater:				; XREF: LZWaterEffects
000040D2 7000                       		moveq	#0,d0
000040D4 1038 FE11                  		move.b	($FFFFFE11).w,d0
000040D8 D040                       		add.w	d0,d0
000040DA 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000040DE 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000040E2 7200                       		moveq	#0,d1
000040E4 1238 F64C                  		move.b	($FFFFF64C).w,d1
000040E8 3038 F64A                  		move.w	($FFFFF64A).w,d0
000040EC 9078 F648                  		sub.w	($FFFFF648).w,d0
000040F0 6700                       		beq.s	locret_3C5A
000040F2 6400                       		bcc.s	loc_3C56
000040F4 4441                       		neg.w	d1
000040F6                            
000040F6                            loc_3C56:
000040F6 D378 F648                  		add.w	d1,($FFFFF648).w
000040FA                            
000040FA                            locret_3C5A:
000040FA 4E75                       		rts	
000040FC                            ; ===========================================================================
000040FC 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000040FE 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004100 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004102 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004104                            ; ===========================================================================
00004104                            
00004104                            DynWater_LZ1:				; XREF: DynWater_Index
00004104 3038 F700                  		move.w	($FFFFF700).w,d0
00004108 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000410C 6600                       		bne.s	loc_3CD0
0000410E 323C 00B8                  		move.w	#$B8,d1
00004112 0C40 0600                  		cmpi.w	#$600,d0
00004116 6500                       		bcs.s	loc_3CB4
00004118 323C 0108                  		move.w	#$108,d1
0000411C 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00004122 6500                       		bcs.s	loc_3CBA
00004124 0C40 0C00                  		cmpi.w	#$C00,d0
00004128 6500                       		bcs.s	loc_3CB4
0000412A 323C 0318                  		move.w	#$318,d1
0000412E 0C40 1080                  		cmpi.w	#$1080,d0
00004132 6500                       		bcs.s	loc_3CB4
00004134 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
0000413A 323C 05C8                  		move.w	#$5C8,d1
0000413E 0C40 1380                  		cmpi.w	#$1380,d0
00004142 6500                       		bcs.s	loc_3CB4
00004144 323C 03A8                  		move.w	#$3A8,d1
00004148 B278 F648                  		cmp.w	($FFFFF648).w,d1
0000414C 6600                       		bne.s	loc_3CB4
0000414E 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004154                            
00004154                            loc_3CB4:
00004154 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004158 4E75                       		rts	
0000415A                            ; ===========================================================================
0000415A                            
0000415A                            loc_3CBA:				; XREF: DynWater_LZ1
0000415A 0C40 0C80                  		cmpi.w	#$C80,d0
0000415E 65F4                       		bcs.s	loc_3CB4
00004160 323C 00E8                  		move.w	#$E8,d1
00004164 0C40 1500                  		cmpi.w	#$1500,d0
00004168 65EA                       		bcs.s	loc_3CB4
0000416A 323C 0108                  		move.w	#$108,d1
0000416E 60E4                       		bra.s	loc_3CB4
00004170                            ; ===========================================================================
00004170                            
00004170                            loc_3CD0:				; XREF: DynWater_LZ1
00004170 5302                       		subq.b	#1,d2
00004172 6600                       		bne.s	locret_3CF4
00004174 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
0000417A 6400                       		bcc.s	locret_3CF4
0000417C 323C 03A8                  		move.w	#$3A8,d1
00004180 0C40 1300                  		cmpi.w	#$1300,d0
00004184 6500                       		bcs.s	loc_3CF0
00004186 323C 0108                  		move.w	#$108,d1
0000418A 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004190                            
00004190                            loc_3CF0:
00004190 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004194                            
00004194                            locret_3CF4:
00004194 4E75                       		rts	
00004196                            ; ===========================================================================
00004196                            
00004196                            DynWater_LZ2:				; XREF: DynWater_Index
00004196 3038 F700                  		move.w	($FFFFF700).w,d0
0000419A 323C 0328                  		move.w	#$328,d1
0000419E 0C40 0500                  		cmpi.w	#$500,d0
000041A2 6500                       		bcs.s	loc_3D12
000041A4 323C 03C8                  		move.w	#$3C8,d1
000041A8 0C40 0B00                  		cmpi.w	#$B00,d0
000041AC 6500                       		bcs.s	loc_3D12
000041AE 323C 0428                  		move.w	#$428,d1
000041B2                            
000041B2                            loc_3D12:
000041B2 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041B6 4E75                       		rts	
000041B8                            ; ===========================================================================
000041B8                            
000041B8                            DynWater_LZ3:				; XREF: DynWater_Index
000041B8 3038 F700                  		move.w	($FFFFF700).w,d0
000041BC 1438 F64D                  		move.b	($FFFFF64D).w,d2
000041C0 6600                       		bne.s	loc_3D5E
000041C2 323C 0900                  		move.w	#$900,d1
000041C6 0C40 0600                  		cmpi.w	#$600,d0
000041CA 6500                       		bcs.s	loc_3D54
000041CC 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
000041D2 6500                       		bcs.s	loc_3D54
000041D4 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000041DA 6400                       		bcc.s	loc_3D54
000041DC 323C 04C8                  		move.w	#$4C8,d1
000041E0 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
000041E6 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
000041EC 303C 00B7                  		move.w	#$B7,d0
000041F0 6100 D3CE                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
000041F4                            
000041F4                            loc_3D54:
000041F4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041F8 31C1 F648                  		move.w	d1,($FFFFF648).w
000041FC 4E75                       		rts	
000041FE                            ; ===========================================================================
000041FE                            
000041FE                            loc_3D5E:				; XREF: DynWater_LZ3
000041FE 5302                       		subq.b	#1,d2
00004200 6600                       		bne.s	loc_3DA8
00004202 323C 04C8                  		move.w	#$4C8,d1
00004206 0C40 0770                  		cmpi.w	#$770,d0
0000420A 6500                       		bcs.s	loc_3DA2
0000420C 323C 0308                  		move.w	#$308,d1
00004210 0C40 1400                  		cmpi.w	#$1400,d0
00004214 6500                       		bcs.s	loc_3DA2
00004216 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
0000421C 6700                       		beq.s	loc_3D8E
0000421E 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00004224 6400                       		bcc.s	loc_3D8E
00004226 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
0000422C 6400                       		bcc.s	loc_3DA2
0000422E                            
0000422E                            loc_3D8E:
0000422E 323C 0508                  		move.w	#$508,d1
00004232 31C1 F648                  		move.w	d1,($FFFFF648).w
00004236 0C40 1770                  		cmpi.w	#$1770,d0
0000423A 6500                       		bcs.s	loc_3DA2
0000423C 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004242                            
00004242                            loc_3DA2:
00004242 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004246 4E75                       		rts	
00004248                            ; ===========================================================================
00004248                            
00004248                            loc_3DA8:
00004248 5302                       		subq.b	#1,d2
0000424A 6600                       		bne.s	loc_3DD2
0000424C 323C 0508                  		move.w	#$508,d1
00004250 0C40 1860                  		cmpi.w	#$1860,d0
00004254 6500                       		bcs.s	loc_3DCC
00004256 323C 0188                  		move.w	#$188,d1
0000425A 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000425E 6400                       		bcc.s	loc_3DC6
00004260 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004264 6600                       		bne.s	loc_3DCC
00004266                            
00004266                            loc_3DC6:
00004266 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
0000426C                            
0000426C                            loc_3DCC:
0000426C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004270 4E75                       		rts	
00004272                            ; ===========================================================================
00004272                            
00004272                            loc_3DD2:
00004272 5302                       		subq.b	#1,d2
00004274 6600                       		bne.s	loc_3E0E
00004276 323C 0188                  		move.w	#$188,d1
0000427A 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000427E 6500                       		bcs.s	loc_3E04
00004280 323C 0900                  		move.w	#$900,d1
00004284 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004288 6500                       		bcs.s	loc_3E04
0000428A 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004290 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004296 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
0000429C 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
000042A2 4E75                       		rts	
000042A4                            ; ===========================================================================
000042A4                            
000042A4                            loc_3E04:
000042A4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000042A8 31C1 F648                  		move.w	d1,($FFFFF648).w
000042AC 4E75                       		rts	
000042AE                            ; ===========================================================================
000042AE                            
000042AE                            loc_3E0E:
000042AE 0C40 1E00                  		cmpi.w	#$1E00,d0
000042B2 6500                       		bcs.s	locret_3E1A
000042B4 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
000042BA                            
000042BA                            locret_3E1A:
000042BA 4E75                       		rts	
000042BC                            ; ===========================================================================
000042BC                            
000042BC                            DynWater_SBZ3:				; XREF: DynWater_Index
000042BC 323C 0228                  		move.w	#$228,d1
000042C0 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
000042C6 6500                       		bcs.s	loc_3E2C
000042C8 323C 04C8                  		move.w	#$4C8,d1
000042CC                            
000042CC                            loc_3E2C:
000042CC 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000042D0 4E75                       		rts
000042D2                            
000042D2                            ; ---------------------------------------------------------------------------
000042D2                            ; Labyrinth Zone "wind tunnels"	subroutine
000042D2                            ; ---------------------------------------------------------------------------
000042D2                            
000042D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000042D2                            
000042D2                            
000042D2                            LZWindTunnels:				; XREF: LZWaterEffects
000042D2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000042D6 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
000042DA 45F9 0000 0000             		lea	(LZWind_Data).l,a2
000042E0 7000                       		moveq	#0,d0
000042E2 1038 FE11                  		move.b	($FFFFFE11).w,d0
000042E6 E748                       		lsl.w	#3,d0
000042E8 D4C0                       		adda.w	d0,a2
000042EA 7200                       		moveq	#0,d1
000042EC 4A38 FE11                  		tst.b	($FFFFFE11).w
000042F0 6600                       		bne.s	loc_3E56
000042F2 7201                       		moveq	#1,d1
000042F4 514A                       		subq.w	#8,a2
000042F6                            
000042F6                            loc_3E56:
000042F6 43F8 D000                  		lea	($FFFFD000).w,a1
000042FA                            
000042FA                            LZWind_Loop:
000042FA 3029 0008                  		move.w	8(a1),d0
000042FE B052                       		cmp.w	(a2),d0
00004300 6500 0000                  		bcs.w	loc_3EF4
00004304 B06A 0004                  		cmp.w	4(a2),d0
00004308 6400 0000                  		bcc.w	loc_3EF4
0000430C 3429 000C                  		move.w	$C(a1),d2
00004310 B46A 0002                  		cmp.w	2(a2),d2
00004314 6500                       		bcs.s	loc_3EF4
00004316 B46A 0006                  		cmp.w	6(a2),d2
0000431A 6400                       		bcc.s	loc_3EF4
0000431C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004320 0200 003F                  		andi.b	#$3F,d0
00004324 6600                       		bne.s	loc_3E90
00004326 303C 00D0                  		move.w	#$D0,d0
0000432A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rushing water sound
00004330                            
00004330                            loc_3E90:
00004330 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00004334 6600 0000                  		bne.w	locret_3F0A
00004338 0C29 0004 0024             		cmpi.b	#4,$24(a1)
0000433E 6400                       		bcc.s	loc_3F06
00004340 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00004346 0440 0080                  		subi.w	#$80,d0
0000434A B052                       		cmp.w	(a2),d0
0000434C 6400                       		bcc.s	LZWind_Move
0000434E 7002                       		moveq	#2,d0
00004350 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004356 6600                       		bne.s	loc_3EBA
00004358 4440                       		neg.w	d0
0000435A                            
0000435A                            loc_3EBA:
0000435A D169 000C                  		add.w	d0,$C(a1)
0000435E                            
0000435E                            LZWind_Move:
0000435E 5869 0008                  		addq.w	#4,8(a1)
00004362 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004368 337C 0000 0012             		move.w	#0,$12(a1)
0000436E 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004374 08E9 0001 0022             		bset	#1,$22(a1)
0000437A 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004380 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004382 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004386                            
00004386                            LZWind_MoveDown:
00004386 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0000438C 6700                       		beq.s	locret_3EF2	; if not, branch
0000438E 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004392                            
00004392                            locret_3EF2:
00004392 4E75                       		rts	
00004394                            ; ===========================================================================
00004394                            
00004394                            loc_3EF4:				; XREF: LZWindTunnels
00004394 504A                       		addq.w	#8,a2
00004396 51C9 FF62                  		dbf	d1,LZWind_Loop
0000439A 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0000439E 6700                       		beq.s	locret_3F0A
000043A0 137C 0000 001C             		move.b	#0,$1C(a1)
000043A6                            
000043A6                            loc_3F06:
000043A6 4238 F7C7                  		clr.b	($FFFFF7C7).w
000043AA                            
000043AA                            locret_3F0A:
000043AA 4E75                       		rts	
000043AC                            ; End of function LZWindTunnels
000043AC                            
000043AC                            ; ===========================================================================
000043AC 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
000043B4 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
000043C6 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
000043D4                            					; XREF: LZWindTunnels
000043D4                            		even
000043D4                            
000043D4                            ; ---------------------------------------------------------------------------
000043D4                            ; Labyrinth Zone water slide subroutine
000043D4                            ; ---------------------------------------------------------------------------
000043D4                            
000043D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000043D4                            
000043D4                            
000043D4                            LZWaterSlides:				; XREF: LZWaterEffects
000043D4 43F8 D000                  		lea	($FFFFD000).w,a1
000043D8 0829 0001 0022             		btst	#1,$22(a1)
000043DE 6600                       		bne.s	loc_3F6A
000043E0 3029 000C                  		move.w	$C(a1),d0
000043E4 E248                       		lsr.w	#1,d0
000043E6 0240 0380                  		andi.w	#$380,d0
000043EA 1229 0008                  		move.b	8(a1),d1
000043EE 0241 007F                  		andi.w	#$7F,d1
000043F2 D041                       		add.w	d1,d0
000043F4 45F8 A400                  		lea	($FFFFA400).w,a2
000043F8 1032 0000                  		move.b	(a2,d0.w),d0
000043FC 45FA 0000                  		lea	byte_3FCF(pc),a2
00004400 7206                       		moveq	#6,d1
00004402                            
00004402                            loc_3F62:
00004402 B022                       		cmp.b	-(a2),d0
00004404 57C9 FFFC                  		dbeq	d1,loc_3F62
00004408 6700                       		beq.s	LZSlide_Move
0000440A                            
0000440A                            loc_3F6A:
0000440A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0000440E 6700                       		beq.s	locret_3F7A
00004410 337C 0005 003E             		move.w	#5,$3E(a1)
00004416 4238 F7CA                  		clr.b	($FFFFF7CA).w
0000441A                            
0000441A                            locret_3F7A:
0000441A 4E75                       		rts	
0000441C                            ; ===========================================================================
0000441C                            
0000441C                            LZSlide_Move:				; XREF: LZWaterSlides
0000441C 0C41 0003                  		cmpi.w	#3,d1
00004420 6400                       		bcc.s	loc_3F84
00004422 4E71                       		nop	
00004424                            
00004424                            loc_3F84:
00004424 08A9 0000 0022             		bclr	#0,$22(a1)
0000442A 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
0000442E 1340 0014                  		move.b	d0,$14(a1)
00004432 6A00                       		bpl.s	loc_3F9A
00004434 08E9 0000 0022             		bset	#0,$22(a1)
0000443A                            
0000443A                            loc_3F9A:
0000443A 4229 0015                  		clr.b	$15(a1)
0000443E 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00004444 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
0000444A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000444E 0200 001F                  		andi.b	#$1F,d0
00004452 6600                       		bne.s	locret_3FBE
00004454 303C 00D0                  		move.w	#$D0,d0
00004458 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play water sound
0000445E                            
0000445E                            locret_3FBE:
0000445E 4E75                       		rts	
00004460                            ; End of function LZWaterSlides
00004460                            
00004460                            ; ===========================================================================
00004460 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
0000446F 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004470                            		even
00004470                            
00004470                            ; ---------------------------------------------------------------------------
00004470                            ; Subroutine to	move Sonic in demo mode
00004470                            ; ---------------------------------------------------------------------------
00004470                            
00004470                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004470                            
00004470                            
00004470                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004470 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004474 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004476 4E75                       		rts	
00004478                            ; ===========================================================================
00004478                            
00004478                            ; This is an unused subroutine for recording a demo
00004478                            
00004478                            MoveDemo_Record:
00004478 43F9 0008 0000             		lea	($80000).l,a1
0000447E 3038 F790                  		move.w	($FFFFF790).w,d0
00004482 D2C0                       		adda.w	d0,a1
00004484 1038 F604                  		move.b	($FFFFF604).w,d0
00004488 B011                       		cmp.b	(a1),d0
0000448A 6600                       		bne.s	loc_3FFA
0000448C 5229 0001                  		addq.b	#1,1(a1)
00004490 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004496 6700                       		beq.s	loc_3FFA
00004498 4E75                       		rts	
0000449A                            ; ===========================================================================
0000449A                            
0000449A                            loc_3FFA:				; XREF: MoveDemo_Record
0000449A 1340 0002                  		move.b	d0,2(a1)
0000449E 137C 0000 0003             		move.b	#0,3(a1)
000044A4 5478 F790                  		addq.w	#2,($FFFFF790).w
000044A8 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
000044AE 4E75                       		rts	
000044B0                            ; ===========================================================================
000044B0                            
000044B0                            MoveDemo_On:				; XREF: MoveSonicInDemo
000044B0 4A38 F604                  		tst.b	($FFFFF604).w
000044B4 6A00                       		bpl.s	loc_4022
000044B6 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000044BA 6B00                       		bmi.s	loc_4022
000044BC 11FC 0004 F600             		move.b	#4,($FFFFF600).w
000044C2                            
000044C2                            loc_4022:
000044C2 43F9 0000 0000             		lea	(Demo_Index).l,a1
000044C8 7000                       		moveq	#0,d0
000044CA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000044CE 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
000044D4 6600                       		bne.s	loc_4038
000044D6 7006                       		moveq	#6,d0
000044D8                            
000044D8                            loc_4038:
000044D8 E548                       		lsl.w	#2,d0
000044DA 2271 0000                  		movea.l	(a1,d0.w),a1
000044DE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000044E2 6A00                       		bpl.s	loc_4056
000044E4 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
000044EA 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000044EE 5340                       		subq.w	#1,d0
000044F0 E548                       		lsl.w	#2,d0
000044F2 2271 0000                  		movea.l	(a1,d0.w),a1
000044F6                            
000044F6                            loc_4056:
000044F6 3038 F790                  		move.w	($FFFFF790).w,d0
000044FA D2C0                       		adda.w	d0,a1
000044FC 1011                       		move.b	(a1),d0
000044FE 41F8 F604                  		lea	($FFFFF604).w,a0
00004502 1200                       		move.b	d0,d1
00004504 1410                       		move.b	(a0),d2
00004506 B500                       		eor.b	d2,d0
00004508 10C1                       		move.b	d1,(a0)+
0000450A C001                       		and.b	d1,d0
0000450C 10C0                       		move.b	d0,(a0)+
0000450E 5338 F792                  		subq.b	#1,($FFFFF792).w
00004512 6400                       		bcc.s	locret_407E
00004514 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
0000451A 5478 F790                  		addq.w	#2,($FFFFF790).w
0000451E                            
0000451E                            locret_407E:
0000451E 4E75                       		rts	
00004520                            ; End of function MoveSonicInDemo
00004520                            
00004520                            ; ===========================================================================
00004520                            ; ---------------------------------------------------------------------------
00004520                            ; Demo sequence	pointers
00004520                            ; ---------------------------------------------------------------------------
00004520                            Demo_Index:
00004520                            	include "_inc\Demo pointers for intro.asm"
00004520                            ; ---------------------------------------------------------------------------
00004520                            ; Demo sequence	pointers
00004520                            ; ---------------------------------------------------------------------------
00004520 0000 0000                  	dc.l Demo_GHZ
00004524 0000 0000                  	dc.l Demo_GHZ
00004528 0000 0000                  	dc.l Demo_MZ
0000452C 0000 0000                  	dc.l Demo_MZ
00004530 0000 0000                  	dc.l Demo_SYZ
00004534 0000 0000                  	dc.l Demo_SYZ
00004538 0000 0000                  	dc.l Demo_SS
0000453C 0000 0000                  	dc.l Demo_SS
0000453C 0000 0000                  	dc.l Demo_SS
00004540                            
00004540                            Demo_EndIndex:
00004540                            	include "_inc\Demo pointers for ending.asm"
00004540                            ; ---------------------------------------------------------------------------
00004540                            ; Demo (ending) sequence pointers
00004540                            ; ---------------------------------------------------------------------------
00004540 0000 0000                  	dc.l Demo_EndGHZ1
00004544 0000 0000                  	dc.l Demo_EndMZ
00004548 0000 0000                  	dc.l Demo_EndSYZ
0000454C 0000 0000                  	dc.l Demo_EndLZ
00004550 0000 0000                  	dc.l Demo_EndSLZ
00004554 0000 0000                  	dc.l Demo_EndSBZ1
00004558 0000 0000                  	dc.l Demo_EndSBZ2
0000455C 0000 0000                  	dc.l Demo_EndGHZ2
0000455C 0000 0000                  	dc.l Demo_EndGHZ2
00004560                            
00004560 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004570 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004580 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004590                            		even
00004590                            
00004590                            ; ---------------------------------------------------------------------------
00004590                            ; Collision index loading subroutine
00004590                            ; ---------------------------------------------------------------------------
00004590                            
00004590                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004590                            
00004590                            
00004590                            ColIndexLoad:				; XREF: Level
00004590 7000                       		moveq	#0,d0
00004592 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004596 E548                       		lsl.w	#2,d0
00004598 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
0000459E 4E75                       		rts	
000045A0                            ; End of function ColIndexLoad
000045A0                            
000045A0                            ; ===========================================================================
000045A0                            ; ---------------------------------------------------------------------------
000045A0                            ; Collision index pointers
000045A0                            ; ---------------------------------------------------------------------------
000045A0                            ColPointers:
000045A0                            	include "_inc\Collision index pointers.asm"
000045A0                            ; ---------------------------------------------------------------------------
000045A0                            ; Collision index pointers
000045A0                            ; ---------------------------------------------------------------------------
000045A0 0000 0000                  	dc.l Col_GHZ
000045A4 0000 0000                  	dc.l Col_LZ
000045A8 0000 0000                  	dc.l Col_MZ
000045AC 0000 0000                  	dc.l Col_SLZ
000045B0 0000 0000                  	dc.l Col_SYZ
000045B4 0000 0000                  	dc.l Col_SBZ
000045B4 0000 0000                  	dc.l Col_SBZ
000045B8                            
000045B8                            ; ---------------------------------------------------------------------------
000045B8                            ; Oscillating number subroutine
000045B8                            ; ---------------------------------------------------------------------------
000045B8                            
000045B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045B8                            
000045B8                            
000045B8                            OscillateNumInit:			; XREF: Level
000045B8 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000045BC 45F9 0000 0000             		lea	(Osc_Data).l,a2
000045C2 7220                       		moveq	#$20,d1
000045C4                            
000045C4                            Osc_Loop:
000045C4 32DA                       		move.w	(a2)+,(a1)+
000045C6 51C9 FFFC                  		dbf	d1,Osc_Loop
000045CA 4E75                       		rts	
000045CC                            ; End of function OscillateNumInit
000045CC                            
000045CC                            ; ===========================================================================
000045CC 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
000045D0 0000 0080                  		dc.w 0,	$80
000045D4 0000 0080                  		dc.w 0,	$80
000045D8 0000 0080                  		dc.w 0,	$80
000045DC 0000 0080                  		dc.w 0,	$80
000045E0 0000 0080                  		dc.w 0,	$80
000045E4 0000 0080                  		dc.w 0,	$80
000045E8 0000 0080                  		dc.w 0,	$80
000045EC 0000 0080                  		dc.w 0,	$80
000045F0 0000 50F0                  		dc.w 0,	$50F0
000045F4 011E 2080                  		dc.w $11E, $2080
000045F8 00B4 3080                  		dc.w $B4, $3080
000045FC 010E 5080                  		dc.w $10E, $5080
00004600 01C2 7080                  		dc.w $1C2, $7080
00004604 0276 0080                  		dc.w $276, $80
00004608 0000 0080                  		dc.w 0,	$80
0000460C 0000                       		dc.w 0
0000460E                            		even
0000460E                            
0000460E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000460E                            
0000460E                            
0000460E                            OscillateNumDo:				; XREF: Level
0000460E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004614 6400                       		bcc.s	locret_41C4
00004616 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000461A 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004620 3619                       		move.w	(a1)+,d3
00004622 720F                       		moveq	#$F,d1
00004624                            
00004624                            loc_4184:
00004624 341A                       		move.w	(a2)+,d2
00004626 381A                       		move.w	(a2)+,d4
00004628 0303                       		btst	d1,d3
0000462A 6600                       		bne.s	loc_41A4
0000462C 3029 0002                  		move.w	2(a1),d0
00004630 D042                       		add.w	d2,d0
00004632 3340 0002                  		move.w	d0,2(a1)
00004636 D151                       		add.w	d0,0(a1)
00004638 B811                       		cmp.b	0(a1),d4
0000463A 6200                       		bhi.s	loc_41BA
0000463C 03C3                       		bset	d1,d3
0000463E 6000                       		bra.s	loc_41BA
00004640                            ; ===========================================================================
00004640                            
00004640                            loc_41A4:				; XREF: OscillateNumDo
00004640 3029 0002                  		move.w	2(a1),d0
00004644 9042                       		sub.w	d2,d0
00004646 3340 0002                  		move.w	d0,2(a1)
0000464A D151                       		add.w	d0,0(a1)
0000464C B811                       		cmp.b	0(a1),d4
0000464E 6300                       		bls.s	loc_41BA
00004650 0383                       		bclr	d1,d3
00004652                            
00004652                            loc_41BA:
00004652 5849                       		addq.w	#4,a1
00004654 51C9 FFCE                  		dbf	d1,loc_4184
00004658 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
0000465C                            
0000465C                            locret_41C4:
0000465C 4E75                       		rts	
0000465E                            ; End of function OscillateNumDo
0000465E                            
0000465E                            ; ===========================================================================
0000465E 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004662 0002 0018                  		dc.w 2,	$18
00004666 0002 0020                  		dc.w 2,	$20
0000466A 0002 0030                  		dc.w 2,	$30
0000466E 0004 0020                  		dc.w 4,	$20
00004672 0008 0008                  		dc.w 8,	8
00004676 0008 0040                  		dc.w 8,	$40
0000467A 0004 0040                  		dc.w 4,	$40
0000467E 0002 0050                  		dc.w 2,	$50
00004682 0002 0050                  		dc.w 2,	$50
00004686 0002 0020                  		dc.w 2,	$20
0000468A 0003 0030                  		dc.w 3,	$30
0000468E 0005 0050                  		dc.w 5,	$50
00004692 0007 0070                  		dc.w 7,	$70
00004696 0002 0010                  		dc.w 2,	$10
0000469A 0002 0010                  		dc.w 2,	$10
0000469E                            		even
0000469E                            
0000469E                            ; ---------------------------------------------------------------------------
0000469E                            ; Subroutine to	change object animation	variables (rings, giant	rings)
0000469E                            ; ---------------------------------------------------------------------------
0000469E                            
0000469E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000469E                            
0000469E                            
0000469E                            ChangeRingFrame:			; XREF: Level
0000469E 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
000046A2 6A00                       		bpl.s	loc_421C
000046A4 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
000046AA 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
000046AE 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
000046B4                            
000046B4                            loc_421C:
000046B4 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
000046B8 6A00                       		bpl.s	loc_4232
000046BA 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
000046C0 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
000046C4 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
000046CA                            
000046CA                            loc_4232:
000046CA 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
000046CE 6A00                       		bpl.s	loc_4250
000046D0 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
000046D6 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
000046DA 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
000046E0 6500                       		bcs.s	loc_4250
000046E2 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
000046E8                            
000046E8                            loc_4250:
000046E8 4A38 FEC6                  		tst.b	($FFFFFEC6).w
000046EC 6700                       		beq.s	locret_4272
000046EE 7000                       		moveq	#0,d0
000046F0 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000046F4 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
000046F8 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
000046FC EF58                       		rol.w	#7,d0
000046FE 0240 0003                  		andi.w	#3,d0
00004702 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004706 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0000470A                            
0000470A                            locret_4272:
0000470A 4E75                       		rts	
0000470C                            ; End of function ChangeRingFrame
0000470C                            
0000470C                            ; ---------------------------------------------------------------------------
0000470C                            ; End-of-act signpost pattern loading subroutine
0000470C                            ; ---------------------------------------------------------------------------
0000470C                            
0000470C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000470C                            
0000470C                            
0000470C                            SignpostArtLoad:			; XREF: Level
0000470C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004710 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004714 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
0000471A 6700                       		beq.s	Signpost_Exit	; if yes, branch
0000471C 3038 F700                  		move.w	($FFFFF700).w,d0
00004720 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004724 0441 0100                  		subi.w	#$100,d1
00004728 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
0000472A 6D00                       		blt.s	Signpost_Exit	; if not, branch
0000472C 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004730 6700                       		beq.s	Signpost_Exit
00004732 B278 F728                  		cmp.w	($FFFFF728).w,d1
00004736 6700                       		beq.s	Signpost_Exit
00004738 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
0000473C 7012                       		moveq	#$12,d0
0000473E 6000 D096                  		bra.w	LoadPLC2	; load signpost	patterns
00004742                            ; ===========================================================================
00004742                            
00004742                            Signpost_Exit:
00004742 4E75                       		rts	
00004744                            ; End of function SignpostArtLoad
00004744                            
00004744                            ; ===========================================================================
00004744                            Demo_GHZ:	incbin	demodata\i_ghz.bin
000047C4                            Demo_MZ:	incbin	demodata\i_mz.bin
000048F4                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004974                            Demo_SS:	incbin	demodata\i_ss.bin
00004A74                            ; ===========================================================================
00004A74                            
00004A74                            ; ---------------------------------------------------------------------------
00004A74                            ; Special Stage
00004A74                            ; ---------------------------------------------------------------------------
00004A74                            
00004A74                            SpecialStage:				; XREF: GameModeArray
00004A74 303C 00CA                  		move.w	#$CA,d0
00004A78 6100 CB46                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004A7C 6100 D6E8                  		bsr.w	Pal_MakeFlash
00004A80 46FC 2700                  		move	#$2700,sr
00004A84 4DF9 00C0 0004             		lea	($C00004).l,a6
00004A8A 3CBC 8B03                  		move.w	#$8B03,(a6)
00004A8E 3CBC 8004                  		move.w	#$8004,(a6)
00004A92 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004A98 3CBC 9011                  		move.w	#$9011,(a6)
00004A9C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004AA0 0200 00BF                  		andi.b	#$BF,d0
00004AA4 33C0 00C0 0004             		move.w	d0,($C00004).l
00004AAA 6100 CA3C                  		bsr.w	ClearScreen
00004AAE 46FC 2300                  		move	#$2300,sr
00004AB2 4BF9 00C0 0004             		lea	($C00004).l,a5
00004AB8 3ABC 8F01                  		move.w	#$8F01,(a5)
00004ABC 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004AC2 3ABC 9780                  		move.w	#$9780,(a5)
00004AC6 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004ACC 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004AD4                            
00004AD4                            loc_463C:
00004AD4 3215                       		move.w	(a5),d1
00004AD6 0801 0001                  		btst	#1,d1
00004ADA 66F8                       		bne.s	loc_463C
00004ADC 3ABC 8F02                  		move.w	#$8F02,(a5)
00004AE0 6100 0000                  		bsr.w	SS_BGLoad
00004AE4 7014                       		moveq	#$14,d0
00004AE6 6100 CE28                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004AEA 43F8 D000                  		lea	($FFFFD000).w,a1
00004AEE 7000                       		moveq	#0,d0
00004AF0 323C 07FF                  		move.w	#$7FF,d1
00004AF4                            
00004AF4                            SS_ClrObjRam:
00004AF4 22C0                       		move.l	d0,(a1)+
00004AF6 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004AFA                            
00004AFA 43F8 F700                  		lea	($FFFFF700).w,a1
00004AFE 7000                       		moveq	#0,d0
00004B00 323C 003F                  		move.w	#$3F,d1
00004B04                            
00004B04                            SS_ClrRam:
00004B04 22C0                       		move.l	d0,(a1)+
00004B06 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004B0A                            
00004B0A 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004B0E 7000                       		moveq	#0,d0
00004B10 323C 0027                  		move.w	#$27,d1
00004B14                            
00004B14                            SS_ClrRam2:
00004B14 22C0                       		move.l	d0,(a1)+
00004B16 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004B1A                            
00004B1A 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004B1E 7000                       		moveq	#0,d0
00004B20 323C 007F                  		move.w	#$7F,d1
00004B24                            
00004B24                            SS_ClrNemRam:
00004B24 22C0                       		move.l	d0,(a1)+
00004B26 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004B2A                            
00004B2A 4238 F64E                  		clr.b	($FFFFF64E).w
00004B2E 4278 FE02                  		clr.w	($FFFFFE02).w
00004B32 700A                       		moveq	#$A,d0
00004B34 6100 D7B0                  		bsr.w	PalLoad1	; load special stage pallet
00004B38 4EB9 0000 0000             		jsr	SS_Load
00004B3E 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004B46 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004B4E 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004B54 6100 0000                  		bsr.w	PalCycle_SS
00004B58 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004B5C 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00004B62 303C 0089                  		move.w	#$89,d0
00004B66 6100 CA52                  		bsr.w	PlaySound	; play special stage BG	music
00004B6A 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004B70 43F9 0000 4520             		lea	(Demo_Index).l,a1
00004B76 7006                       		moveq	#6,d0
00004B78 E548                       		lsl.w	#2,d0
00004B7A 2271 0000                  		movea.l	(a1,d0.w),a1
00004B7E 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004B84 5338 F792                  		subq.b	#1,($FFFFF792).w
00004B88 4278 FE20                  		clr.w	($FFFFFE20).w
00004B8C 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004B90 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004B96 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004B9C 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004BA0 6700                       		beq.s	SS_NoDebug	; if not, branch
00004BA2 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004BA8 6700                       		beq.s	SS_NoDebug	; if not, branch
00004BAA 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004BB0                            
00004BB0                            SS_NoDebug:
00004BB0 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004BB4 0000 0040                  		ori.b	#$40,d0
00004BB8 33C0 00C0 0004             		move.w	d0,($C00004).l
00004BBE 6100 D4FA                  		bsr.w	Pal_MakeWhite
00004BC2                            
00004BC2                            ; ---------------------------------------------------------------------------
00004BC2                            ; Main Special Stage loop
00004BC2                            ; ---------------------------------------------------------------------------
00004BC2                            
00004BC2                            SS_MainLoop:
00004BC2 6100 CA08                  		bsr.w	PauseGame
00004BC6 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004BCC 6100 E064                  		bsr.w	DelayProgram
00004BD0 6100 F89E                  		bsr.w	MoveSonicInDemo
00004BD4 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004BDA 4EB9 0000 0000             		jsr	ObjectsLoad
00004BE0 4EB9 0000 0000             		jsr	BuildSprites
00004BE6 4EB9 0000 0000             		jsr	SS_ShowLayout
00004BEC 6100 0000                  		bsr.w	SS_BGAnimate
00004BF0 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004BF4 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004BF6 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004BFA 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004BFE                            
00004BFE                            SS_ChkEnd:
00004BFE 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004C04 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004C08                            
00004C08 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004C0C 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004C10 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004C16 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004C1C 6500                       		bcs.s	SS_End		; if not, branch
00004C1E 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004C22                            
00004C22                            SS_End:
00004C22 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004C28 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004C2E 4278 F794                  		clr.w	($FFFFF794).w
00004C32                            
00004C32                            SS_EndLoop:
00004C32 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004C38 6100 DFF8                  		bsr.w	DelayProgram
00004C3C 6100 F832                  		bsr.w	MoveSonicInDemo
00004C40 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004C46 4EB9 0000 0000             		jsr	ObjectsLoad
00004C4C 4EB9 0000 0000             		jsr	BuildSprites
00004C52 4EB9 0000 0000             		jsr	SS_ShowLayout
00004C58 6100 0000                  		bsr.w	SS_BGAnimate
00004C5C 5378 F794                  		subq.w	#1,($FFFFF794).w
00004C60 6A00                       		bpl.s	loc_47D4
00004C62 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004C68 6100 D51C                  		bsr.w	Pal_ToWhite
00004C6C                            
00004C6C                            loc_47D4:
00004C6C 4A78 F614                  		tst.w	($FFFFF614).w
00004C70 66C0                       		bne.s	SS_EndLoop
00004C72                            
00004C72 46FC 2700                  		move	#$2700,sr
00004C76 4DF9 00C0 0004             		lea	($C00004).l,a6
00004C7C 3CBC 8230                  		move.w	#$8230,(a6)
00004C80 3CBC 8407                  		move.w	#$8407,(a6)
00004C84 3CBC 9001                  		move.w	#$9001,(a6)
00004C88 6100 C85E                  		bsr.w	ClearScreen
00004C8C 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004C96 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004C9C 6100 C9C6                  		bsr.w	NemDec
00004CA0 4EB9 0000 0000             		jsr	Hud_Base
00004CA6 46FC 2300                  		move	#$2300,sr
00004CAA 7011                       		moveq	#$11,d0
00004CAC 6100 D654                  		bsr.w	PalLoad2	; load results screen pallet
00004CB0 7000                       		moveq	#0,d0
00004CB2 6100 CB22                  		bsr.w	LoadPLC2
00004CB6 701B                       		moveq	#$1B,d0
00004CB8 6100 CAEA                  		bsr.w	LoadPLC		; load results screen patterns
00004CBC 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004CC2 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004CC8 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004CCC C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004CD0 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004CD4 303C 008E                  		move.w	#$8E,d0
00004CD8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004CDE 43F8 D000                  		lea	($FFFFD000).w,a1
00004CE2 7000                       		moveq	#0,d0
00004CE4 323C 07FF                  		move.w	#$7FF,d1
00004CE8                            
00004CE8                            SS_EndClrObjRam:
00004CE8 22C0                       		move.l	d0,(a1)+
00004CEA 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004CEE                            
00004CEE 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004CF4                            
00004CF4                            SS_NormalExit:
00004CF4 6100 C8D6                  		bsr.w	PauseGame
00004CF8 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004CFE 6100 DF32                  		bsr.w	DelayProgram
00004D02 4EB9 0000 0000             		jsr	ObjectsLoad
00004D08 4EB9 0000 0000             		jsr	BuildSprites
00004D0E 6100 CB00                  		bsr.w	RunPLC_RAM
00004D12 4A78 FE02                  		tst.w	($FFFFFE02).w
00004D16 67DC                       		beq.s	SS_NormalExit
00004D18 4AB8 F680                  		tst.l	($FFFFF680).w
00004D1C 66D6                       		bne.s	SS_NormalExit
00004D1E 303C 00CA                  		move.w	#$CA,d0
00004D22 6100 C89C                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004D26 6100 D43E                  		bsr.w	Pal_MakeFlash
00004D2A 4E75                       		rts	
00004D2C                            ; ===========================================================================
00004D2C                            
00004D2C                            SS_ToSegaScreen:
00004D2C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004D32 4E75                       		rts
00004D34                            
00004D34                            ; ---------------------------------------------------------------------------
00004D34                            ; Special stage	background loading subroutine
00004D34                            ; ---------------------------------------------------------------------------
00004D34                            
00004D34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D34                            
00004D34                            
00004D34                            SS_BGLoad:				; XREF: SpecialStage
00004D34 43F9 00FF 0000             		lea	($FF0000).l,a1
00004D3A 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004D40 303C 4051                  		move.w	#$4051,d0
00004D44 6100 CBFC                  		bsr.w	EniDec
00004D48 263C 5000 0001             		move.l	#$50000001,d3
00004D4E 45F9 00FF 0080             		lea	($FF0080).l,a2
00004D54 7E06                       		moveq	#6,d7
00004D56                            
00004D56                            loc_48BE:
00004D56 2003                       		move.l	d3,d0
00004D58 7C03                       		moveq	#3,d6
00004D5A 7800                       		moveq	#0,d4
00004D5C 0C47 0003                  		cmpi.w	#3,d7
00004D60 6400                       		bcc.s	loc_48CC
00004D62 7801                       		moveq	#1,d4
00004D64                            
00004D64                            loc_48CC:
00004D64 7A07                       		moveq	#7,d5
00004D66                            
00004D66                            loc_48CE:
00004D66 224A                       		movea.l	a2,a1
00004D68 0A04 0001                  		eori.b	#1,d4
00004D6C 6600                       		bne.s	loc_48E2
00004D6E 0C47 0006                  		cmpi.w	#6,d7
00004D72 6600                       		bne.s	loc_48F2
00004D74 43F9 00FF 0000             		lea	($FF0000).l,a1
00004D7A                            
00004D7A                            loc_48E2:
00004D7A 48E7 F800                  		movem.l	d0-d4,-(sp)
00004D7E 7207                       		moveq	#7,d1
00004D80 7407                       		moveq	#7,d2
00004D82 6100 C8C0                  		bsr.w	ShowVDPGraphics
00004D86 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004D8A                            
00004D8A                            loc_48F2:
00004D8A 0680 0010 0000             		addi.l	#$100000,d0
00004D90 51CD FFD4                  		dbf	d5,loc_48CE
00004D94 0680 0380 0000             		addi.l	#$3800000,d0
00004D9A 0A04 0001                  		eori.b	#1,d4
00004D9E 51CE FFC4                  		dbf	d6,loc_48CC
00004DA2 0683 1000 0000             		addi.l	#$10000000,d3
00004DA8 6A00                       		bpl.s	loc_491C
00004DAA 4843                       		swap	d3
00004DAC 0683 0000 C000             		addi.l	#$C000,d3
00004DB2 4843                       		swap	d3
00004DB4                            
00004DB4                            loc_491C:
00004DB4 D4FC 0080                  		adda.w	#$80,a2
00004DB8 51CF FF9C                  		dbf	d7,loc_48BE
00004DBC 43F9 00FF 0000             		lea	($FF0000).l,a1
00004DC2 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004DC8 303C 4000                  		move.w	#$4000,d0
00004DCC 6100 CB74                  		bsr.w	EniDec
00004DD0 43F9 00FF 0000             		lea	($FF0000).l,a1
00004DD6 203C 4000 0003             		move.l	#$40000003,d0
00004DDC 723F                       		moveq	#$3F,d1
00004DDE 741F                       		moveq	#$1F,d2
00004DE0 6100 C862                  		bsr.w	ShowVDPGraphics
00004DE4 43F9 00FF 0000             		lea	($FF0000).l,a1
00004DEA 203C 5000 0003             		move.l	#$50000003,d0
00004DF0 723F                       		moveq	#$3F,d1
00004DF2 743F                       		moveq	#$3F,d2
00004DF4 6100 C84E                  		bsr.w	ShowVDPGraphics
00004DF8 4E75                       		rts	
00004DFA                            ; End of function SS_BGLoad
00004DFA                            
00004DFA                            ; ---------------------------------------------------------------------------
00004DFA                            ; Pallet cycling routine - special stage
00004DFA                            ; ---------------------------------------------------------------------------
00004DFA                            
00004DFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004DFA                            
00004DFA                            
00004DFA                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004DFA 4A78 F63A                  		tst.w	($FFFFF63A).w
00004DFE 6600                       		bne.s	locret_49E6
00004E00 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004E04 6A00                       		bpl.s	locret_49E6
00004E06 4DF9 00C0 0004             		lea	($C00004).l,a6
00004E0C 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004E10 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004E14 0240 001F                  		andi.w	#$1F,d0
00004E18 E548                       		lsl.w	#2,d0
00004E1A 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004E20 D0C0                       		adda.w	d0,a0
00004E22 1018                       		move.b	(a0)+,d0
00004E24 6A00                       		bpl.s	loc_4992
00004E26 303C 01FF                  		move.w	#$1FF,d0
00004E2A                            
00004E2A                            loc_4992:
00004E2A 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004E2E 7000                       		moveq	#0,d0
00004E30 1018                       		move.b	(a0)+,d0
00004E32 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004E36 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004E3C 43F1 0000                  		lea	(a1,d0.w),a1
00004E40 303C 8200                  		move.w	#-$7E00,d0
00004E44 1019                       		move.b	(a1)+,d0
00004E46 3C80                       		move.w	d0,(a6)
00004E48 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004E4C 303C 8400                  		move.w	#-$7C00,d0
00004E50 1018                       		move.b	(a0)+,d0
00004E52 3C80                       		move.w	d0,(a6)
00004E54 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004E5E 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004E66 7000                       		moveq	#0,d0
00004E68 1018                       		move.b	(a0)+,d0
00004E6A 6B00                       		bmi.s	loc_49E8
00004E6C 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004E72 D2C0                       		adda.w	d0,a1
00004E74 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004E78 24D9                       		move.l	(a1)+,(a2)+
00004E7A 24D9                       		move.l	(a1)+,(a2)+
00004E7C 24D9                       		move.l	(a1)+,(a2)+
00004E7E                            
00004E7E                            locret_49E6:
00004E7E 4E75                       		rts	
00004E80                            ; ===========================================================================
00004E80                            
00004E80                            loc_49E8:				; XREF: PalCycle_SS
00004E80 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004E84 0C40 008A                  		cmpi.w	#$8A,d0
00004E88 6500                       		bcs.s	loc_49F4
00004E8A 5241                       		addq.w	#1,d1
00004E8C                            
00004E8C                            loc_49F4:
00004E8C C2FC 002A                  		mulu.w	#$2A,d1
00004E90 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004E96 D2C1                       		adda.w	d1,a1
00004E98 0240 007F                  		andi.w	#$7F,d0
00004E9C 0880 0000                  		bclr	#0,d0
00004EA0 6700                       		beq.s	loc_4A18
00004EA2 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004EA6 24D1                       		move.l	(a1),(a2)+
00004EA8 24E9 0004                  		move.l	4(a1),(a2)+
00004EAC 24E9 0008                  		move.l	8(a1),(a2)+
00004EB0                            
00004EB0                            loc_4A18:
00004EB0 D2FC 000C                  		adda.w	#$C,a1
00004EB4 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004EB8 0C40 000A                  		cmpi.w	#$A,d0
00004EBC 6500                       		bcs.s	loc_4A2E
00004EBE 0440 000A                  		subi.w	#$A,d0
00004EC2 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004EC6                            
00004EC6                            loc_4A2E:
00004EC6 3200                       		move.w	d0,d1
00004EC8 D040                       		add.w	d0,d0
00004ECA D041                       		add.w	d1,d0
00004ECC D2C0                       		adda.w	d0,a1
00004ECE 24D9                       		move.l	(a1)+,(a2)+
00004ED0 34D9                       		move.w	(a1)+,(a2)+
00004ED2 4E75                       		rts	
00004ED4                            ; End of function PalCycle_SS
00004ED4                            
00004ED4                            ; ===========================================================================
00004ED4 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004EE4                            					; XREF: PalCycle_SS
00004EE4 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004EF4 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004F04 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004F14 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004F24 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004F34 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004F44 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004F54                            		even
00004F54 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004F62                            					; XREF: PalCycle_SS
00004F62                            		even
00004F62                            
00004F62                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004FAA                            		even
00004FAA                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
0000507C                            		even
0000507C                            
0000507C                            ; ---------------------------------------------------------------------------
0000507C                            ; Subroutine to	make the special stage background animated
0000507C                            ; ---------------------------------------------------------------------------
0000507C                            
0000507C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000507C                            
0000507C                            
0000507C                            SS_BGAnimate:				; XREF: SpecialStage
0000507C 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005080 6600                       		bne.s	loc_4BF6
00005082 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00005088 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000508E                            
0000508E                            loc_4BF6:
0000508E 0C40 0008                  		cmpi.w	#8,d0
00005092 6400                       		bcc.s	loc_4C4E
00005094 0C40 0006                  		cmpi.w	#6,d0
00005098 6600                       		bne.s	loc_4C10
0000509A 5278 F718                  		addq.w	#1,($FFFFF718).w
0000509E 5278 F70C                  		addq.w	#1,($FFFFF70C).w
000050A2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000050A8                            
000050A8                            loc_4C10:
000050A8 7000                       		moveq	#0,d0
000050AA 3038 F708                  		move.w	($FFFFF708).w,d0
000050AE 4440                       		neg.w	d0
000050B0 4840                       		swap	d0
000050B2 43F9 0000 0000             		lea	(byte_4CCC).l,a1
000050B8 47F8 AA00                  		lea	($FFFFAA00).w,a3
000050BC 7609                       		moveq	#9,d3
000050BE                            
000050BE                            loc_4C26:
000050BE 302B 0002                  		move.w	2(a3),d0
000050C2 6100 DBA0                  		bsr.w	CalcSine
000050C6 7400                       		moveq	#0,d2
000050C8 1419                       		move.b	(a1)+,d2
000050CA C1C2                       		muls.w	d2,d0
000050CC E080                       		asr.l	#8,d0
000050CE 36C0                       		move.w	d0,(a3)+
000050D0 1419                       		move.b	(a1)+,d2
000050D2 4882                       		ext.w	d2
000050D4 D55B                       		add.w	d2,(a3)+
000050D6 51CB FFE6                  		dbf	d3,loc_4C26
000050DA 47F8 AA00                  		lea	($FFFFAA00).w,a3
000050DE 45F9 0000 0000             		lea	(byte_4CB8).l,a2
000050E4 6000                       		bra.s	loc_4C7E
000050E6                            ; ===========================================================================
000050E6                            
000050E6                            loc_4C4E:				; XREF: SS_BGAnimate
000050E6 0C40 000C                  		cmpi.w	#$C,d0
000050EA 6600                       		bne.s	loc_4C74
000050EC 5378 F718                  		subq.w	#1,($FFFFF718).w
000050F0 47F8 AB00                  		lea	($FFFFAB00).w,a3
000050F4 243C 0001 8000             		move.l	#$18000,d2
000050FA 7206                       		moveq	#6,d1
000050FC                            
000050FC                            loc_4C64:
000050FC 2013                       		move.l	(a3),d0
000050FE 9082                       		sub.l	d2,d0
00005100 26C0                       		move.l	d0,(a3)+
00005102 0482 0000 2000             		subi.l	#$2000,d2
00005108 51C9 FFF2                  		dbf	d1,loc_4C64
0000510C                            
0000510C                            loc_4C74:
0000510C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005110 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005116                            
00005116                            loc_4C7E:
00005116 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000511A 3038 F718                  		move.w	($FFFFF718).w,d0
0000511E 4440                       		neg.w	d0
00005120 4840                       		swap	d0
00005122 7600                       		moveq	#0,d3
00005124 161A                       		move.b	(a2)+,d3
00005126 3438 F70C                  		move.w	($FFFFF70C).w,d2
0000512A 4442                       		neg.w	d2
0000512C 0242 00FF                  		andi.w	#$FF,d2
00005130 E54A                       		lsl.w	#2,d2
00005132                            
00005132                            loc_4C9A:
00005132 301B                       		move.w	(a3)+,d0
00005134 544B                       		addq.w	#2,a3
00005136 7200                       		moveq	#0,d1
00005138 121A                       		move.b	(a2)+,d1
0000513A 5341                       		subq.w	#1,d1
0000513C                            
0000513C                            loc_4CA4:
0000513C 2380 2000                  		move.l	d0,(a1,d2.w)
00005140 5842                       		addq.w	#4,d2
00005142 0242 03FC                  		andi.w	#$3FC,d2
00005146 51C9 FFF4                  		dbf	d1,loc_4CA4
0000514A 51CB FFE6                  		dbf	d3,loc_4C9A
0000514E 4E75                       		rts	
00005150                            ; End of function SS_BGAnimate
00005150                            
00005150                            ; ===========================================================================
00005150 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
0000515C                            		even
0000515C 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005164                            		even
00005164 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005178                            		even
00005178                            					; XREF: SS_BGAnimate
00005178                            ; ===========================================================================
00005178                            
00005178                            ; ---------------------------------------------------------------------------
00005178                            ; Continue screen
00005178                            ; ---------------------------------------------------------------------------
00005178                            
00005178                            ContinueScreen:				; XREF: GameModeArray
00005178 6100 CEC2                  		bsr.w	Pal_FadeFrom
0000517C 46FC 2700                  		move	#$2700,sr
00005180 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005184 0200 00BF                  		andi.b	#$BF,d0
00005188 33C0 00C0 0004             		move.w	d0,($C00004).l
0000518E 4DF9 00C0 0004             		lea	($C00004).l,a6
00005194 3CBC 8004                  		move.w	#$8004,(a6)
00005198 3CBC 8700                  		move.w	#$8700,(a6)
0000519C 6100 C34A                  		bsr.w	ClearScreen
000051A0 43F8 D000                  		lea	($FFFFD000).w,a1
000051A4 7000                       		moveq	#0,d0
000051A6 323C 07FF                  		move.w	#$7FF,d1
000051AA                            
000051AA                            Cont_ClrObjRam:
000051AA 22C0                       		move.l	d0,(a1)+
000051AC 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
000051B0                            
000051B0 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000051BA 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000051C0 6100 C4A2                  		bsr.w	NemDec
000051C4 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
000051CE 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
000051D4 6100 C48E                  		bsr.w	NemDec
000051D8 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
000051E2 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
000051E8 6100 C47A                  		bsr.w	NemDec
000051EC 720A                       		moveq	#10,d1
000051EE 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000051F4 7012                       		moveq	#$12,d0
000051F6 6100 D0EE                  		bsr.w	PalLoad1	; load continue	screen pallet
000051FA 103C 0090                  		move.b	#$90,d0
000051FE 6100 C3BA                  		bsr.w	PlaySound	; play continue	music
00005202 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00005208 42B8 F700                  		clr.l	($FFFFF700).w
0000520C 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00005214 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
0000521A 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00005220 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00005226 11FC 0003 D098             		move.b	#3,($FFFFD098).w
0000522C 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00005232 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00005238 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
0000523E 4EB9 0000 0000             		jsr	ObjectsLoad
00005244 4EB9 0000 0000             		jsr	BuildSprites
0000524A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000524E 0000 0040                  		ori.b	#$40,d0
00005252 33C0 00C0 0004             		move.w	d0,($C00004).l
00005258 6100 CD3C                  		bsr.w	Pal_FadeTo
0000525C                            
0000525C                            ; ---------------------------------------------------------------------------
0000525C                            ; Continue screen main loop
0000525C                            ; ---------------------------------------------------------------------------
0000525C                            
0000525C                            Cont_MainLoop:
0000525C 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005262 6100 D9CE                  		bsr.w	DelayProgram
00005266 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000526C 6400                       		bcc.s	loc_4DF2
0000526E 46FC 2700                  		move	#$2700,sr
00005272 3238 F614                  		move.w	($FFFFF614).w,d1
00005276 82FC 003C                  		divu.w	#$3C,d1
0000527A 0281 0000 000F             		andi.l	#$F,d1
00005280 4EB9 0000 0000             		jsr	ContScrCounter
00005286 46FC 2300                  		move	#$2300,sr
0000528A                            
0000528A                            loc_4DF2:
0000528A 4EB9 0000 0000             		jsr	ObjectsLoad
00005290 4EB9 0000 0000             		jsr	BuildSprites
00005296 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
0000529C 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
0000529E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000052A4 64B6                       		bcc.s	Cont_MainLoop
000052A6 4A78 F614                  		tst.w	($FFFFF614).w
000052AA 6600 FFB0                  		bne.w	Cont_MainLoop
000052AE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000052B4 4E75                       		rts	
000052B6                            ; ===========================================================================
000052B6                            
000052B6                            Cont_GotoLevel:				; XREF: Cont_MainLoop
000052B6 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000052BC 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000052C2 7000                       		moveq	#0,d0
000052C4 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000052C8 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000052CC 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000052D0 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
000052D4 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
000052D8 4E75                       		rts	
000052DA                            ; ===========================================================================
000052DA                            
000052DA                            ; ---------------------------------------------------------------------------
000052DA                            ; Object 80 - Continue screen elements
000052DA                            ; ---------------------------------------------------------------------------
000052DA                            
000052DA                            Obj80:					; XREF: Obj_Index
000052DA 7000                       		moveq	#0,d0
000052DC 1028 0024                  		move.b	$24(a0),d0
000052E0 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
000052E4 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
000052E8                            ; ===========================================================================
000052E8 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
000052EA 0000                       		dc.w Obj80_Display-Obj80_Index
000052EC 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
000052EE 0000                       		dc.w Obj80_ChkType-Obj80_Index
000052F0                            ; ===========================================================================
000052F0                            
000052F0                            Obj80_Main:				; XREF: Obj80_Index
000052F0 5428 0024                  		addq.b	#2,$24(a0)
000052F4 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000052FC 317C 8500 0002             		move.w	#$8500,2(a0)
00005302 117C 0000 0001             		move.b	#0,1(a0)
00005308 117C 003C 0019             		move.b	#$3C,$19(a0)
0000530E 317C 0120 0008             		move.w	#$120,8(a0)
00005314 317C 00C0 000A             		move.w	#$C0,$A(a0)
0000531A 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00005320                            
00005320                            Obj80_Display:				; XREF: Obj80_Index
00005320 4EF9 0000 0000             		jmp	DisplaySprite
00005326                            ; ===========================================================================
00005326                            Obj80_MiniSonicPos:
00005326 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005338 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005344                            ; ===========================================================================
00005344                            
00005344                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00005344 2248                       		movea.l	a0,a1
00005346 45F9 0000 5326             		lea	(Obj80_MiniSonicPos).l,a2
0000534C 7200                       		moveq	#0,d1
0000534E 1238 FE18                  		move.b	($FFFFFE18).w,d1
00005352 5501                       		subq.b	#2,d1
00005354 6400                       		bcc.s	loc_4EC4
00005356 4EF9 0000 0000             		jmp	DeleteObject
0000535C                            ; ===========================================================================
0000535C                            
0000535C                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
0000535C 7601                       		moveq	#1,d3
0000535E 0C01 000E                  		cmpi.b	#$E,d1
00005362 6500                       		bcs.s	loc_4ED0
00005364 7600                       		moveq	#0,d3
00005366 720E                       		moveq	#$E,d1
00005368                            
00005368                            loc_4ED0:
00005368 1401                       		move.b	d1,d2
0000536A 0202 0001                  		andi.b	#1,d2
0000536E                            
0000536E                            Obj80_MiniSonLoop:
0000536E 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00005372 335A 0008                  		move.w	(a2)+,8(a1)
00005376 4A02                       		tst.b	d2
00005378 6700                       		beq.s	loc_4EEA
0000537A 0469 000A 0008             		subi.w	#$A,8(a1)
00005380                            
00005380                            loc_4EEA:
00005380 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005386 137C 0006 001A             		move.b	#6,$1A(a1)
0000538C 137C 0006 0024             		move.b	#6,$24(a1)
00005392 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
0000539A 337C 8551 0002             		move.w	#$8551,2(a1)
000053A0 137C 0000 0001             		move.b	#0,1(a1)
000053A6 43E9 0040                  		lea	$40(a1),a1
000053AA 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
000053AE 43E9 FFC0                  		lea	-$40(a1),a1
000053B2 1343 0028                  		move.b	d3,$28(a1)
000053B6                            
000053B6                            Obj80_ChkType:				; XREF: Obj80_Index
000053B6 4A28 0028                  		tst.b	$28(a0)
000053BA 6700                       		beq.s	loc_4F40
000053BC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000053C2 6500                       		bcs.s	loc_4F40
000053C4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000053C8 0200 0001                  		andi.b	#1,d0
000053CC 6600                       		bne.s	loc_4F40
000053CE 4A78 D010                  		tst.w	($FFFFD010).w
000053D2 6600                       		bne.s	Obj80_Delete
000053D4 4E75                       		rts	
000053D6                            ; ===========================================================================
000053D6                            
000053D6                            loc_4F40:				; XREF: Obj80_ChkType
000053D6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000053DA 0200 000F                  		andi.b	#$F,d0
000053DE 6600                       		bne.s	Obj80_Display2
000053E0 0868 0000 001A             		bchg	#0,$1A(a0)
000053E6                            
000053E6                            Obj80_Display2:
000053E6 4EF9 0000 0000             		jmp	DisplaySprite
000053EC                            ; ===========================================================================
000053EC                            
000053EC                            Obj80_Delete:				; XREF: Obj80_ChkType
000053EC 4EF9 0000 0000             		jmp	DeleteObject
000053F2                            ; ===========================================================================
000053F2                            
000053F2                            ; ---------------------------------------------------------------------------
000053F2                            ; Object 81 - Sonic on the continue screen
000053F2                            ; ---------------------------------------------------------------------------
000053F2                            
000053F2                            Obj81:					; XREF: Obj_Index
000053F2 7000                       		moveq	#0,d0
000053F4 1028 0024                  		move.b	$24(a0),d0
000053F8 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000053FC 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00005400 4EF9 0000 0000             		jmp	DisplaySprite
00005406                            ; ===========================================================================
00005406 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00005408 0000                       		dc.w Obj81_ChkLand-Obj81_Index
0000540A 0000                       		dc.w Obj81_Animate-Obj81_Index
0000540C 0000                       		dc.w Obj81_Run-Obj81_Index
0000540E                            ; ===========================================================================
0000540E                            
0000540E                            Obj81_Main:				; XREF: Obj81_Index
0000540E 5428 0024                  		addq.b	#2,$24(a0)
00005412 317C 00A0 0008             		move.w	#$A0,8(a0)
00005418 317C 00C0 000C             		move.w	#$C0,$C(a0)
0000541E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005426 317C 0780 0002             		move.w	#$780,2(a0)
0000542C 117C 0004 0001             		move.b	#4,1(a0)
00005432 117C 0002 0018             		move.b	#2,$18(a0)
00005438 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
0000543E 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00005444                            
00005444                            Obj81_ChkLand:				; XREF: Obj81_Index
00005444 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
0000544A 6600                       		bne.s	Obj81_ShowFall	; if not, branch
0000544C 5428 0024                  		addq.b	#2,$24(a0)
00005450 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005454 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
0000545C 317C 8500 0002             		move.w	#$8500,2(a0)
00005462 117C 0000 001C             		move.b	#0,$1C(a0)
00005468 6000                       		bra.s	Obj81_Animate
0000546A                            ; ===========================================================================
0000546A                            
0000546A                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
0000546A 4EB9 0000 0000             		jsr	SpeedToPos
00005470 4EB9 0000 0000             		jsr	Sonic_Animate
00005476 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000547C                            ; ===========================================================================
0000547C                            
0000547C                            Obj81_Animate:				; XREF: Obj81_Index
0000547C 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005480 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005482 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005488 4EF9 0000 0000             		jmp	AnimateSprite
0000548E                            ; ===========================================================================
0000548E                            
0000548E                            Obj81_GetUp:				; XREF: Obj81_Animate
0000548E 5428 0024                  		addq.b	#2,$24(a0)
00005492 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000549A 317C 0780 0002             		move.w	#$780,2(a0)
000054A0 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
000054A6 4268 0014                  		clr.w	$14(a0)
000054AA 5168 000C                  		subq.w	#8,$C(a0)
000054AE 103C 00E0                  		move.b	#$E0,d0
000054B2 6100 C10C                  		bsr.w	PlaySound_Special ; fade out music
000054B6                            
000054B6                            Obj81_Run:				; XREF: Obj81_Index
000054B6 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
000054BC 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
000054BE 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
000054C4 6000                       		bra.s	Obj81_ShowRun
000054C6                            ; ===========================================================================
000054C6                            
000054C6                            Obj81_AddSpeed:				; XREF: Obj81_Run
000054C6 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
000054CC                            
000054CC                            Obj81_ShowRun:				; XREF: Obj81_Run
000054CC 4EB9 0000 0000             		jsr	SpeedToPos
000054D2 4EB9 0000 0000             		jsr	Sonic_Animate
000054D8 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000054DE                            ; ===========================================================================
000054DE                            Ani_obj81:
000054DE                            	include "_anim\obj81.asm"
000054DE                            ; ---------------------------------------------------------------------------
000054DE                            ; Animation script - Sonic on the continue screen
000054DE                            ; ---------------------------------------------------------------------------
000054DE 0000                       		dc.w byte_504A-Ani_obj81
000054E0 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
000054EC 00                         		even
000054EC 00                         		even
000054EC                            
000054EC                            ; ---------------------------------------------------------------------------
000054EC                            ; Sprite mappings - Continue screen
000054EC                            ; ---------------------------------------------------------------------------
000054EC                            Map_obj80:
000054EC                            	include "_maps\obj80.asm"
000054EC                            ; ---------------------------------------------------------------------------
000054EC                            ; Sprite mappings - Continue screen
000054EC                            ; ---------------------------------------------------------------------------
000054EC 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
000054F0 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000054F4 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
000054F8 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000054FC 0B                         byte_5066:	dc.b $B
000054FD F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005502 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005507 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
0000550C F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005511 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005516 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
0000551B F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005520 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005525 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
0000552A 3805 2021 08               		dc.b $38, 5, $20, $21, 8
0000552F 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005534 03                         byte_509E:	dc.b 3
00005535 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
0000553A F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000553F F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005544 03                         byte_50AE:	dc.b 3
00005545 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
0000554A F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000554F F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005554 03                         byte_50BE:	dc.b 3
00005555 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
0000555A F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000555F F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005564 02                         byte_50CE:	dc.b 2
00005565 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
0000556A 6009 2800 00               		dc.b $60, 9, $28, 0, 0
0000556F 01                         byte_50D9:	dc.b 1
00005570 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005575 01                         byte_50DF:	dc.b 1
00005576 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
0000557C 00                         		even
0000557C 00                         		even
0000557C                            
0000557C                            ; ===========================================================================
0000557C                            ; ---------------------------------------------------------------------------
0000557C                            ; Ending sequence in Green Hill	Zone
0000557C                            ; ---------------------------------------------------------------------------
0000557C                            
0000557C                            EndingSequence:				; XREF: GameModeArray
0000557C 103C 00E4                  		move.b	#$E4,d0
00005580 6100 C03E                  		bsr.w	PlaySound_Special ; stop music
00005584 6100 CAB6                  		bsr.w	Pal_FadeFrom
00005588 43F8 D000                  		lea	($FFFFD000).w,a1
0000558C 7000                       		moveq	#0,d0
0000558E 323C 07FF                  		move.w	#$7FF,d1
00005592                            
00005592                            End_ClrObjRam:
00005592 22C0                       		move.l	d0,(a1)+
00005594 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005598                            
00005598 43F8 F628                  		lea	($FFFFF628).w,a1
0000559C 7000                       		moveq	#0,d0
0000559E 323C 0015                  		move.w	#$15,d1
000055A2                            
000055A2                            End_ClrRam:
000055A2 22C0                       		move.l	d0,(a1)+
000055A4 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
000055A8                            
000055A8 43F8 F700                  		lea	($FFFFF700).w,a1
000055AC 7000                       		moveq	#0,d0
000055AE 323C 003F                  		move.w	#$3F,d1
000055B2                            
000055B2                            End_ClrRam2:
000055B2 22C0                       		move.l	d0,(a1)+
000055B4 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
000055B8                            
000055B8 43F8 FE60                  		lea	($FFFFFE60).w,a1
000055BC 7000                       		moveq	#0,d0
000055BE 323C 0047                  		move.w	#$47,d1
000055C2                            
000055C2                            End_ClrRam3:
000055C2 22C0                       		move.l	d0,(a1)+
000055C4 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
000055C8                            
000055C8 46FC 2700                  		move	#$2700,sr
000055CC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000055D0 0200 00BF                  		andi.b	#$BF,d0
000055D4 33C0 00C0 0004             		move.w	d0,($C00004).l
000055DA 6100 BF0C                  		bsr.w	ClearScreen
000055DE 4DF9 00C0 0004             		lea	($C00004).l,a6
000055E4 3CBC 8B03                  		move.w	#$8B03,(a6)
000055E8 3CBC 8230                  		move.w	#$8230,(a6)
000055EC 3CBC 8407                  		move.w	#$8407,(a6)
000055F0 3CBC 857C                  		move.w	#$857C,(a6)
000055F4 3CBC 9001                  		move.w	#$9001,(a6)
000055F8 3CBC 8004                  		move.w	#$8004,(a6)
000055FC 3CBC 8720                  		move.w	#$8720,(a6)
00005600 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005606 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000560A 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005610 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005616 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000561C 6700                       		beq.s	End_LoadData	; if yes, branch
0000561E 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005624                            
00005624                            End_LoadData:
00005624 701C                       		moveq	#$1C,d0
00005626 6100 C2E8                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
0000562A 4EB9 0000 0000             		jsr	Hud_Base
00005630 6100 0000                  		bsr.w	LevelSizeLoad
00005634 6100 0000                  		bsr.w	DeformBgLayer
00005638 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000563E 6100 0000                  		bsr.w	MainLoadBlockLoad
00005642 6100 0000                  		bsr.w	LoadTilesFromStart
00005646 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
0000564E 46FC 2300                  		move	#$2300,sr
00005652 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005658 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
0000565C 6100 C462                  		bsr.w	KosDec
00005660 7003                       		moveq	#3,d0
00005662 6100 CC82                  		bsr.w	PalLoad1	; load Sonic's pallet
00005666 303C 008B                  		move.w	#$8B,d0
0000566A 6100 BF4E                  		bsr.w	PlaySound	; play ending sequence music
0000566E 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005674 6700                       		beq.s	End_LoadSonic	; if not, branch
00005676 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000567C                            
0000567C                            End_LoadSonic:
0000567C 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005682 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005688 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000568E 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005694 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
0000569A 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000056A0 4EB9 0000 0000             		jsr	ObjPosLoad
000056A6 4EB9 0000 0000             		jsr	ObjectsLoad
000056AC 4EB9 0000 0000             		jsr	BuildSprites
000056B2 7000                       		moveq	#0,d0
000056B4 31C0 FE20                  		move.w	d0,($FFFFFE20).w
000056B8 21C0 FE22                  		move.l	d0,($FFFFFE22).w
000056BC 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
000056C0 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
000056C4 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
000056C8 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
000056CC 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000056D0 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000056D4 31C0 FE02                  		move.w	d0,($FFFFFE02).w
000056D8 31C0 FE04                  		move.w	d0,($FFFFFE04).w
000056DC 6100 EEDA                  		bsr.w	OscillateNumInit
000056E0 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
000056E6 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
000056EC 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
000056F2 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000056F8 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000056FE 6100 D532                  		bsr.w	DelayProgram
00005702 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005706 0000 0040                  		ori.b	#$40,d0
0000570A 33C0 00C0 0004             		move.w	d0,($C00004).l
00005710 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005716 6100 C87E                  		bsr.w	Pal_FadeTo
0000571A                            
0000571A                            ; ---------------------------------------------------------------------------
0000571A                            ; Main ending sequence loop
0000571A                            ; ---------------------------------------------------------------------------
0000571A                            
0000571A                            End_MainLoop:
0000571A 6100 BEB0                  		bsr.w	PauseGame
0000571E 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005724 6100 D50C                  		bsr.w	DelayProgram
00005728 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000572C 6100 0000                  		bsr.w	End_MoveSonic
00005730 4EB9 0000 0000             		jsr	ObjectsLoad
00005736 6100 0000                  		bsr.w	DeformBgLayer
0000573A 4EB9 0000 0000             		jsr	BuildSprites
00005740 4EB9 0000 0000             		jsr	ObjPosLoad
00005746 6100 C418                  		bsr.w	PalCycle_Load
0000574A 6100 EEC2                  		bsr.w	OscillateNumDo
0000574E 6100 EF4E                  		bsr.w	ChangeRingFrame
00005752 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005758 6700                       		beq.s	loc_52DA	; if yes, branch
0000575A 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00005760 103C 0091                  		move.b	#$91,d0
00005764 6100 BE5A                  		bsr.w	PlaySound_Special ; play credits music
00005768 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
0000576E 4E75                       		rts	
00005770                            ; ===========================================================================
00005770                            
00005770                            loc_52DA:
00005770 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005774 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005778                            
00005778 4278 FE02                  		clr.w	($FFFFFE02).w
0000577C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005782 4278 F794                  		clr.w	($FFFFF794).w
00005786                            
00005786                            End_AllEmlds:				; XREF: loc_5334
00005786 6100 BE44                  		bsr.w	PauseGame
0000578A 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005790 6100 D4A0                  		bsr.w	DelayProgram
00005794 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005798 6100 0000                  		bsr.w	End_MoveSonic
0000579C 4EB9 0000 0000             		jsr	ObjectsLoad
000057A2 6100 0000                  		bsr.w	DeformBgLayer
000057A6 4EB9 0000 0000             		jsr	BuildSprites
000057AC 4EB9 0000 0000             		jsr	ObjPosLoad
000057B2 6100 EE5A                  		bsr.w	OscillateNumDo
000057B6 6100 EEE6                  		bsr.w	ChangeRingFrame
000057BA 5378 F794                  		subq.w	#1,($FFFFF794).w
000057BE 6A00                       		bpl.s	loc_5334
000057C0 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000057C6 6100 C9BE                  		bsr.w	Pal_ToWhite
000057CA                            
000057CA                            loc_5334:
000057CA 4A78 FE02                  		tst.w	($FFFFFE02).w
000057CE 6700 FFB6                  		beq.w	End_AllEmlds
000057D2 4278 FE02                  		clr.w	($FFFFFE02).w
000057D6 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
000057DC 4BF9 00C0 0004             		lea	($C00004).l,a5
000057E2 4DF9 00C0 0000             		lea	($C00000).l,a6
000057E8 47F8 F700                  		lea	($FFFFF700).w,a3
000057EC 49F8 A400                  		lea	($FFFFA400).w,a4
000057F0 343C 4000                  		move.w	#$4000,d2
000057F4 6100 0000                  		bsr.w	LoadTilesFromStart2
000057F8 7013                       		moveq	#$13,d0
000057FA 6100 CAEA                  		bsr.w	PalLoad1	; load ending pallet
000057FE 6100 C8BA                  		bsr.w	Pal_MakeWhite
00005802 6000 FF16                  		bra.w	End_MainLoop
00005806                            
00005806                            ; ---------------------------------------------------------------------------
00005806                            ; Subroutine controlling Sonic on the ending sequence
00005806                            ; ---------------------------------------------------------------------------
00005806                            
00005806                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005806                            
00005806                            
00005806                            End_MoveSonic:				; XREF: End_MainLoop
00005806 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
0000580A 6600                       		bne.s	End_MoveSonic2
0000580C 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005812 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005814 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005818 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
0000581E 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005824 4E75                       		rts	
00005826                            ; ===========================================================================
00005826                            
00005826                            End_MoveSonic2:				; XREF: End_MoveSonic
00005826 5500                       		subq.b	#2,d0
00005828 6600                       		bne.s	End_MoveSonic3
0000582A 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005830 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005832 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005836 7000                       		moveq	#0,d0
00005838 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
0000583C 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00005840 31C0 D014                  		move.w	d0,($FFFFD014).w
00005844 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
0000584A 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00005850 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005856 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
0000585C 4E75                       		rts	
0000585E                            ; ===========================================================================
0000585E                            
0000585E                            End_MoveSonic3:				; XREF: End_MoveSonic
0000585E 5500                       		subq.b	#2,d0
00005860 6600                       		bne.s	End_MoveSonExit
00005862 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005866 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
0000586C 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005872 4278 D024                  		clr.w	($FFFFD024).w
00005876                            
00005876                            End_MoveSonExit:
00005876 4E75                       		rts	
00005878                            ; End of function End_MoveSonic
00005878                            
00005878                            ; ===========================================================================
00005878                            ; ---------------------------------------------------------------------------
00005878                            ; Object 87 - Sonic on ending sequence
00005878                            ; ---------------------------------------------------------------------------
00005878                            
00005878                            Obj87:					; XREF: Obj_Index
00005878 7000                       		moveq	#0,d0
0000587A 1028 0025                  		move.b	$25(a0),d0
0000587E 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005882 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005886 4EF9 0000 0000             		jmp	DisplaySprite
0000588C                            ; ===========================================================================
0000588C 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005890 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005894 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005898 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
0000589C 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
000058A0                            ; ===========================================================================
000058A0                            
000058A0                            Obj87_Main:				; XREF: Obj87_Index
000058A0 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000058A6 6700                       		beq.s	Obj87_Main2	; if yes, branch
000058A8 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
000058AE 317C 00D8 0030             		move.w	#$D8,$30(a0)
000058B4 4E75                       		rts	
000058B6                            ; ===========================================================================
000058B6                            
000058B6                            Obj87_Main2:				; XREF: Obj87_Main
000058B6 5428 0025                  		addq.b	#2,$25(a0)
000058BA 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000058C2 317C 03E1 0002             		move.w	#$3E1,2(a0)
000058C8 117C 0004 0001             		move.b	#4,1(a0)
000058CE 4228 0022                  		clr.b	$22(a0)
000058D2 117C 0002 0018             		move.b	#2,$18(a0)
000058D8 117C 0000 001A             		move.b	#0,$1A(a0)
000058DE 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
000058E4                            
000058E4                            Obj87_MakeEmlds:			; XREF: Obj87_Index
000058E4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000058E8 6600                       		bne.s	Obj87_Wait
000058EA 5428 0025                  		addq.b	#2,$25(a0)
000058EE 317C 0001 001C             		move.w	#1,$1C(a0)
000058F4 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
000058FA                            
000058FA                            Obj87_Wait:
000058FA 4E75                       		rts	
000058FC                            ; ===========================================================================
000058FC                            
000058FC                            Obj87_LookUp:				; XREF: Obj87_Index
000058FC 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005904 6600                       		bne.s	locret_5480
00005906 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
0000590C 317C 005A 0030             		move.w	#$5A,$30(a0)
00005912 5428 0025                  		addq.b	#2,$25(a0)
00005916                            
00005916                            locret_5480:
00005916 4E75                       		rts	
00005918                            ; ===========================================================================
00005918                            
00005918                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005918 5368 0030                  		subq.w	#1,$30(a0)
0000591C 6600                       		bne.s	Obj87_Wait2
0000591E 43F8 D400                  		lea	($FFFFD400).w,a1
00005922 323C 00FF                  		move.w	#$FF,d1
00005926                            
00005926                            Obj87_ClrLoop:
00005926 4299                       		clr.l	(a1)+
00005928 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
0000592C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005932 5428 0025                  		addq.b	#2,$25(a0)
00005936 117C 0001 001C             		move.b	#1,$1C(a0)
0000593C 317C 003C 0030             		move.w	#$3C,$30(a0)
00005942                            
00005942                            Obj87_Wait2:
00005942 4E75                       		rts	
00005944                            ; ===========================================================================
00005944                            
00005944                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005944 5368 0030                  		subq.w	#1,$30(a0)
00005948 6600                       		bne.s	Obj87_Wait3
0000594A 5428 0025                  		addq.b	#2,$25(a0)
0000594E 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005954 117C 0002 001C             		move.b	#2,$1C(a0)
0000595A 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005960                            
00005960                            Obj87_Wait3:
00005960 4E75                       		rts	
00005962                            ; ===========================================================================
00005962                            
00005962                            Obj87_Animate:				; XREF: Obj87_Index
00005962 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005968 4EF9 0000 0000             		jmp	AnimateSprite
0000596E                            ; ===========================================================================
0000596E                            
0000596E                            Obj87_Leap:				; XREF: Obj87_Index
0000596E 5368 0030                  		subq.w	#1,$30(a0)
00005972 6600                       		bne.s	Obj87_Wait4
00005974 5428 0025                  		addq.b	#2,$25(a0)
00005978 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005980 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005986 117C 0004 0001             		move.b	#4,1(a0)
0000598C 4228 0022                  		clr.b	$22(a0)
00005990 117C 0002 0018             		move.b	#2,$18(a0)
00005996 117C 0005 001A             		move.b	#5,$1A(a0)
0000599C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
000059A2 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000059A8 60B8                       		bra.s	Obj87_Animate
000059AA                            ; ===========================================================================
000059AA                            
000059AA                            Obj87_Wait4:				; XREF: Obj87_Leap
000059AA 4E75                       		rts	
000059AC                            ; ===========================================================================
000059AC                            Ani_obj87:
000059AC                            	include "_anim\obj87.asm"
000059AC                            ; ---------------------------------------------------------------------------
000059AC                            ; Animation script - Sonic on the ending sequence
000059AC                            ; ---------------------------------------------------------------------------
000059AC 0000                       		dc.w byte_551C-Ani_obj87
000059AE 0000                       		dc.w byte_552A-Ani_obj87
000059B0 0000                       		dc.w byte_5534-Ani_obj87
000059B2 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
000059C0 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
000059CA 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
000059D2                            		even
000059D2                            		even
000059D2                            
000059D2                            ; ===========================================================================
000059D2                            ; ---------------------------------------------------------------------------
000059D2                            ; Object 88 - chaos emeralds on	the ending sequence
000059D2                            ; ---------------------------------------------------------------------------
000059D2                            
000059D2                            Obj88:					; XREF: Obj_Index
000059D2 7000                       		moveq	#0,d0
000059D4 1028 0024                  		move.b	$24(a0),d0
000059D8 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
000059DC 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
000059E0 4EF9 0000 0000             		jmp	DisplaySprite
000059E6                            ; ===========================================================================
000059E6 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
000059E8 0000                       		dc.w Obj88_Move-Obj88_Index
000059EA                            ; ===========================================================================
000059EA                            
000059EA                            Obj88_Main:				; XREF: Obj88_Index
000059EA 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
000059F0 6700                       		beq.s	Obj88_Main2
000059F2 588F                       		addq.l	#4,sp
000059F4 4E75                       		rts	
000059F6                            ; ===========================================================================
000059F6                            
000059F6                            Obj88_Main2:				; XREF: Obj88_Main
000059F6 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
000059FC 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005A02 2248                       		movea.l	a0,a1
00005A04 7600                       		moveq	#0,d3
00005A06 7401                       		moveq	#1,d2
00005A08 7205                       		moveq	#5,d1
00005A0A                            
00005A0A                            Obj88_MainLoop:
00005A0A 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005A0E 5429 0024                  		addq.b	#2,$24(a1)
00005A12 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005A1A 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005A20 137C 0004 0001             		move.b	#4,1(a1)
00005A26 137C 0001 0018             		move.b	#1,$18(a1)
00005A2C 3368 0008 0038             		move.w	8(a0),$38(a1)
00005A32 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005A38 1342 001C                  		move.b	d2,$1C(a1)
00005A3C 1342 001A                  		move.b	d2,$1A(a1)
00005A40 5202                       		addq.b	#1,d2
00005A42 1343 0026                  		move.b	d3,$26(a1)
00005A46 0603 002A                  		addi.b	#$2A,d3
00005A4A 43E9 0040                  		lea	$40(a1),a1
00005A4E 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005A52                            
00005A52                            Obj88_Move:				; XREF: Obj88_Index
00005A52 3028 003E                  		move.w	$3E(a0),d0
00005A56 D168 0026                  		add.w	d0,$26(a0)
00005A5A 1028 0026                  		move.b	$26(a0),d0
00005A5E 4EB9 0000 2C64             		jsr	(CalcSine).l
00005A64 7800                       		moveq	#0,d4
00005A66 1828 003C                  		move.b	$3C(a0),d4
00005A6A C3C4                       		muls.w	d4,d1
00005A6C E081                       		asr.l	#8,d1
00005A6E C1C4                       		muls.w	d4,d0
00005A70 E080                       		asr.l	#8,d0
00005A72 D268 0038                  		add.w	$38(a0),d1
00005A76 D068 003A                  		add.w	$3A(a0),d0
00005A7A 3141 0008                  		move.w	d1,8(a0)
00005A7E 3140 000C                  		move.w	d0,$C(a0)
00005A82 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005A88 6700                       		beq.s	loc_55FA
00005A8A 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005A90                            
00005A90                            loc_55FA:
00005A90 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005A96 6700                       		beq.s	loc_5608
00005A98 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005A9E                            
00005A9E                            loc_5608:
00005A9E 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005AA4 6700                       		beq.s	locret_5614
00005AA6 5368 003A                  		subq.w	#1,$3A(a0)
00005AAA                            
00005AAA                            locret_5614:
00005AAA 4E75                       		rts	
00005AAC                            ; ===========================================================================
00005AAC                            ; ---------------------------------------------------------------------------
00005AAC                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005AAC                            ; ---------------------------------------------------------------------------
00005AAC                            
00005AAC                            Obj89:					; XREF: Obj_Index
00005AAC 7000                       		moveq	#0,d0
00005AAE 1028 0024                  		move.b	$24(a0),d0
00005AB2 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005AB6 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005ABA                            ; ===========================================================================
00005ABA 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005ABC 0000                       		dc.w Obj89_Move-Obj89_Index
00005ABE 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005AC0                            ; ===========================================================================
00005AC0                            
00005AC0                            Obj89_Main:				; XREF: Obj89_Index
00005AC0 5428 0024                  		addq.b	#2,$24(a0)
00005AC4 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005ACA 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005AD0 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005AD8 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005ADE 117C 0000 0001             		move.b	#0,1(a0)
00005AE4 117C 0000 0018             		move.b	#0,$18(a0)
00005AEA                            
00005AEA                            Obj89_Move:				; XREF: Obj89_Index
00005AEA 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005AF0 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005AF2 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005AF8 4EB9 0000 0000             		jsr	DisplaySprite
00005AFE                            ; ===========================================================================
00005AFE                            
00005AFE                            Obj89_Delay:				; XREF: Obj89_Move
00005AFE 5428 0024                  		addq.b	#2,$24(a0)
00005B02 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005B08                            
00005B08                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005B08 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005B0C 6A00                       		bpl.s	Obj89_Display
00005B0E 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005B14                            
00005B14                            Obj89_Display:
00005B14 4EB9 0000 0000             		jsr	DisplaySprite
00005B1A                            ; ===========================================================================
00005B1A                            ; ---------------------------------------------------------------------------
00005B1A                            ; Sprite mappings - Sonic on the ending	sequence
00005B1A                            ; ---------------------------------------------------------------------------
00005B1A                            Map_obj87:
00005B1A                            	include "_maps\obj87.asm"
00005B1A                            ; ---------------------------------------------------------------------------
00005B1A                            ; Sprite mappings - Sonic on the ending	sequence
00005B1A                            ; ---------------------------------------------------------------------------
00005B1A 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005B1E 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005B22 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005B26 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005B2A 02                         byte_5690:	dc.b 2
00005B2B EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005B30 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005B35 03                         byte_569B:	dc.b 3
00005B36 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005B3B EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005B40 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005B45 02                         byte_56AB:	dc.b 2
00005B46 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005B4B FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005B50 02                         byte_56B6:	dc.b 2
00005B51 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005B56 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005B5B 02                         byte_56C1:	dc.b 2
00005B5C EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005B61 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005B66 03                         byte_56CC:	dc.b 3
00005B67 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005B6C EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005B71 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005B76 07                         byte_56DC:	dc.b 7
00005B77 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005B7C BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005B81 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005B86 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005B8B DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005B90 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005B95 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005B9A 18                         byte_5700:	dc.b $18
00005B9B 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005BA0 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005BA5 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005BAA 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005BAF A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005BB4 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005BB9 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005BBE A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005BC3 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005BC8 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005BCD A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005BD2 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005BD7 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005BDC B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005BE1 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005BE6 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005BEB D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005BF0 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005BF5 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005BFA E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005BFF D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005C04 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005C09 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005C0E F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005C14 00                         		even
00005C14 00                         		even
00005C14                            
00005C14                            ; ---------------------------------------------------------------------------
00005C14                            ; Sprite mappings - chaos emeralds on the ending sequence
00005C14                            ; ---------------------------------------------------------------------------
00005C14                            Map_obj88:
00005C14                            	include "_maps\obj88.asm"
00005C14                            ; ---------------------------------------------------------------------------
00005C14                            ; Sprite mappings - chaos emeralds on the ending sequence
00005C14                            ; ---------------------------------------------------------------------------
00005C14 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005C18 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005C1C 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005C20 0000                       		dc.w byte_57AC-Map_obj88
00005C22 01                         byte_5788:	dc.b 1
00005C23 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005C28 01                         byte_578E:	dc.b 1
00005C29 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005C2E 01                         byte_5794:	dc.b 1
00005C2F F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005C34 01                         byte_579A:	dc.b 1
00005C35 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005C3A 01                         byte_57A0:	dc.b 1
00005C3B F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005C40 01                         byte_57A6:	dc.b 1
00005C41 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005C46 01                         byte_57AC:	dc.b 1
00005C47 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005C4C                            		even
00005C4C                            		even
00005C4C                            
00005C4C                            ; ---------------------------------------------------------------------------
00005C4C                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005C4C                            ; ---------------------------------------------------------------------------
00005C4C                            Map_obj89:
00005C4C                            	include "_maps\obj89.asm"
00005C4C                            ; ---------------------------------------------------------------------------
00005C4C                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005C4C                            ; ---------------------------------------------------------------------------
00005C4C 0000                       		dc.w byte_57B4-Map_obj89
00005C4E 03                         byte_57B4:	dc.b 3
00005C4F F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005C54 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005C59 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005C5E                            		even
00005C5E                            		even
00005C5E                            
00005C5E                            ; ===========================================================================
00005C5E                            ; ---------------------------------------------------------------------------
00005C5E                            ; Credits ending sequence
00005C5E                            ; ---------------------------------------------------------------------------
00005C5E                            
00005C5E                            Credits:				; XREF: GameModeArray
00005C5E 6100 BBA2                  		bsr.w	ClearPLC
00005C62 6100 C3D8                  		bsr.w	Pal_FadeFrom
00005C66 4DF9 00C0 0004             		lea	($C00004).l,a6
00005C6C 3CBC 8004                  		move.w	#$8004,(a6)
00005C70 3CBC 8230                  		move.w	#$8230,(a6)
00005C74 3CBC 8407                  		move.w	#$8407,(a6)
00005C78 3CBC 9001                  		move.w	#$9001,(a6)
00005C7C 3CBC 9200                  		move.w	#$9200,(a6)
00005C80 3CBC 8B03                  		move.w	#$8B03,(a6)
00005C84 3CBC 8720                  		move.w	#$8720,(a6)
00005C88 4238 F64E                  		clr.b	($FFFFF64E).w
00005C8C 6100 B85A                  		bsr.w	ClearScreen
00005C90 43F8 D000                  		lea	($FFFFD000).w,a1
00005C94 7000                       		moveq	#0,d0
00005C96 323C 07FF                  		move.w	#$7FF,d1
00005C9A                            
00005C9A                            Cred_ClrObjRam:
00005C9A 22C0                       		move.l	d0,(a1)+
00005C9C 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005CA0                            
00005CA0 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005CAA 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005CB0 6100 B9B2                  		bsr.w	NemDec
00005CB4 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005CB8 7000                       		moveq	#0,d0
00005CBA 323C 001F                  		move.w	#$1F,d1
00005CBE                            
00005CBE                            Cred_ClrPallet:
00005CBE 22C0                       		move.l	d0,(a1)+
00005CC0 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005CC4                            
00005CC4 7003                       		moveq	#3,d0
00005CC6 6100 C61E                  		bsr.w	PalLoad1	; load Sonic's pallet
00005CCA 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005CD0 4EB9 0000 0000             		jsr	ObjectsLoad
00005CD6 4EB9 0000 0000             		jsr	BuildSprites
00005CDC 6100 0000                  		bsr.w	EndingDemoLoad
00005CE0 7000                       		moveq	#0,d0
00005CE2 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005CE6 E948                       		lsl.w	#4,d0
00005CE8 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005CEE 45F2 0000                  		lea	(a2,d0.w),a2
00005CF2 7000                       		moveq	#0,d0
00005CF4 1012                       		move.b	(a2),d0
00005CF6 6700                       		beq.s	loc_5862
00005CF8 6100 BAAA                  		bsr.w	LoadPLC		; load level patterns
00005CFC                            
00005CFC                            loc_5862:
00005CFC 7001                       		moveq	#1,d0
00005CFE 6100 BAA4                  		bsr.w	LoadPLC		; load standard	level patterns
00005D02 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005D08 6100 C28C                  		bsr.w	Pal_FadeTo
00005D0C                            
00005D0C                            Cred_WaitLoop:
00005D0C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005D12 6100 CF1E                  		bsr.w	DelayProgram
00005D16 6100 BAF8                  		bsr.w	RunPLC_RAM
00005D1A 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005D1E 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005D20 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005D24 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005D26 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005D2C 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005D30 4E75                       		rts	
00005D32                            
00005D32                            ; ---------------------------------------------------------------------------
00005D32                            ; Ending sequence demo loading subroutine
00005D32                            ; ---------------------------------------------------------------------------
00005D32                            
00005D32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005D32                            
00005D32                            
00005D32                            EndingDemoLoad:				; XREF: Credits
00005D32 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005D36 0240 000F                  		andi.w	#$F,d0
00005D3A D040                       		add.w	d0,d0
00005D3C 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005D40 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005D44 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005D48 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005D4E 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005D50 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005D56 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005D5C 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005D62 7000                       		moveq	#0,d0
00005D64 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005D68 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005D6C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005D70 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005D74 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005D7A 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005D7C 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005D82 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005D86 303C 0008                  		move.w	#8,d0
00005D8A                            
00005D8A                            EndDemo_LampLoad:
00005D8A 24D9                       		move.l	(a1)+,(a2)+
00005D8C 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005D90                            
00005D90                            EndDemo_Exit:
00005D90 4E75                       		rts	
00005D92                            ; End of function EndingDemoLoad
00005D92                            
00005D92                            ; ===========================================================================
00005D92                            ; ---------------------------------------------------------------------------
00005D92                            ; Levels used in the end sequence demos
00005D92                            ; ---------------------------------------------------------------------------
00005D92                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005DA2                            
00005DA2                            ; ---------------------------------------------------------------------------
00005DA2                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005DA2                            ; ---------------------------------------------------------------------------
00005DA2                            EndDemo_LampVar:
00005DA2 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005DA4 0A00 062C 000D             		dc.w $A00, $62C, $D
00005DAA 0000 0000                  		dc.l 0
00005DAE 0000                       		dc.b 0,	0
00005DB0 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005DC4 0101                       		dc.b 1,	1
00005DC6                            ; ===========================================================================
00005DC6                            ; ---------------------------------------------------------------------------
00005DC6                            ; "TRY AGAIN" and "END"	screens
00005DC6                            ; ---------------------------------------------------------------------------
00005DC6                            
00005DC6                            TryAgainEnd:				; XREF: Credits
00005DC6 6100 BA3A                  		bsr.w	ClearPLC
00005DCA 6100 C270                  		bsr.w	Pal_FadeFrom
00005DCE 4DF9 00C0 0004             		lea	($C00004).l,a6
00005DD4 3CBC 8004                  		move.w	#$8004,(a6)
00005DD8 3CBC 8230                  		move.w	#$8230,(a6)
00005DDC 3CBC 8407                  		move.w	#$8407,(a6)
00005DE0 3CBC 9001                  		move.w	#$9001,(a6)
00005DE4 3CBC 9200                  		move.w	#$9200,(a6)
00005DE8 3CBC 8B03                  		move.w	#$8B03,(a6)
00005DEC 3CBC 8720                  		move.w	#$8720,(a6)
00005DF0 4238 F64E                  		clr.b	($FFFFF64E).w
00005DF4 6100 B6F2                  		bsr.w	ClearScreen
00005DF8 43F8 D000                  		lea	($FFFFD000).w,a1
00005DFC 7000                       		moveq	#0,d0
00005DFE 323C 07FF                  		move.w	#$7FF,d1
00005E02                            
00005E02                            TryAg_ClrObjRam:
00005E02 22C0                       		move.l	d0,(a1)+
00005E04 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005E08                            
00005E08 701D                       		moveq	#$1D,d0
00005E0A 6100 BB04                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005E0E 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005E12 7000                       		moveq	#0,d0
00005E14 323C 001F                  		move.w	#$1F,d1
00005E18                            
00005E18                            TryAg_ClrPallet:
00005E18 22C0                       		move.l	d0,(a1)+
00005E1A 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005E1E                            
00005E1E 7013                       		moveq	#$13,d0
00005E20 6100 C4C4                  		bsr.w	PalLoad1	; load ending pallet
00005E24 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005E28 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005E2E 4EB9 0000 0000             		jsr	ObjectsLoad
00005E34 4EB9 0000 0000             		jsr	BuildSprites
00005E3A 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005E40 6100 C154                  		bsr.w	Pal_FadeTo
00005E44                            
00005E44                            ; ---------------------------------------------------------------------------
00005E44                            ; "TRY AGAIN" and "END"	screen main loop
00005E44                            ; ---------------------------------------------------------------------------
00005E44                            TryAg_MainLoop:
00005E44 6100 B786                  		bsr.w	PauseGame
00005E48 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005E4E 6100 CDE2                  		bsr.w	DelayProgram
00005E52 4EB9 0000 0000             		jsr	ObjectsLoad
00005E58 4EB9 0000 0000             		jsr	BuildSprites
00005E5E 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005E64 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005E66 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005E6A 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005E6C 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005E72 67D0                       		beq.s	TryAg_MainLoop
00005E74                            
00005E74                            TryAg_Exit:
00005E74 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005E7A 4E75                       		rts	
00005E7C                            
00005E7C                            ; ===========================================================================
00005E7C                            ; ---------------------------------------------------------------------------
00005E7C                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005E7C                            ; ---------------------------------------------------------------------------
00005E7C                            
00005E7C                            Obj8B:					; XREF: Obj_Index
00005E7C 7000                       		moveq	#0,d0
00005E7E 1028 0024                  		move.b	$24(a0),d0
00005E82 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005E86 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005E8A 4EF9 0000 0000             		jmp	DisplaySprite
00005E90                            ; ===========================================================================
00005E90 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005E92 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005E94 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005E96 0000                       		dc.w loc_5A8E-Obj8B_Index
00005E98                            ; ===========================================================================
00005E98                            
00005E98                            Obj8B_Main:				; XREF: Obj8B_Index
00005E98 5428 0024                  		addq.b	#2,$24(a0)
00005E9C 317C 0120 0008             		move.w	#$120,8(a0)
00005EA2 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005EA8 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005EB0 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005EB6 117C 0000 0001             		move.b	#0,1(a0)
00005EBC 117C 0002 0018             		move.b	#2,$18(a0)
00005EC2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005EC8 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005ECE 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005ED0 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005ED6 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005EDC 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005EE2 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005EE8                            
00005EE8                            Obj8B_Animate:				; XREF: Obj8B_Index
00005EE8 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005EEE 4EF9 0000 0000             		jmp	AnimateSprite
00005EF4                            ; ===========================================================================
00005EF4                            
00005EF4                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005EF4 5428 0024                  		addq.b	#2,$24(a0)
00005EF8 7002                       		moveq	#2,d0
00005EFA 0828 0000 001C             		btst	#0,$1C(a0)
00005F00 6700                       		beq.s	loc_5A6A
00005F02 4440                       		neg.w	d0
00005F04                            
00005F04                            loc_5A6A:
00005F04 43F8 D800                  		lea	($FFFFD800).w,a1
00005F08 7205                       		moveq	#5,d1
00005F0A                            
00005F0A                            loc_5A70:
00005F0A 1340 003E                  		move.b	d0,$3E(a1)
00005F0E 3400                       		move.w	d0,d2
00005F10 E742                       		asl.w	#3,d2
00005F12 D529 0026                  		add.b	d2,$26(a1)
00005F16 43E9 0040                  		lea	$40(a1),a1
00005F1A 51C9 FFEE                  		dbf	d1,loc_5A70
00005F1E 5228 001A                  		addq.b	#1,$1A(a0)
00005F22 317C 0070 0030             		move.w	#112,$30(a0)
00005F28                            
00005F28                            loc_5A8E:				; XREF: Obj8B_Index
00005F28 5368 0030                  		subq.w	#1,$30(a0)
00005F2C 6A00                       		bpl.s	locret_5AA0
00005F2E 0868 0000 001C             		bchg	#0,$1C(a0)
00005F34 117C 0002 0024             		move.b	#2,$24(a0)
00005F3A                            
00005F3A                            locret_5AA0:
00005F3A 4E75                       		rts	
00005F3C                            ; ===========================================================================
00005F3C                            Ani_obj8B:
00005F3C                            	include "_anim\obj8B.asm"
00005F3C                            ; ---------------------------------------------------------------------------
00005F3C                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005F3C                            ; ---------------------------------------------------------------------------
00005F3C 0000                       		dc.w byte_5AA8-Ani_obj8B
00005F3E 0000                       		dc.w byte_5AAC-Ani_obj8B
00005F40 0000                       		dc.w byte_5AB0-Ani_obj8B
00005F42 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005F46 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005F4A 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005F5C                            		even
00005F5C                            		even
00005F5C                            
00005F5C                            ; ===========================================================================
00005F5C                            ; ---------------------------------------------------------------------------
00005F5C                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005F5C                            ; ---------------------------------------------------------------------------
00005F5C                            
00005F5C                            Obj8C:					; XREF: Obj_Index
00005F5C 7000                       		moveq	#0,d0
00005F5E 1028 0024                  		move.b	$24(a0),d0
00005F62 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005F66 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005F6A 4EF9 0000 0000             		jmp	DisplaySprite
00005F70                            ; ===========================================================================
00005F70 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005F72 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005F74                            ; ===========================================================================
00005F74                            
00005F74                            Obj8C_Main:				; XREF: Obj8C_Index
00005F74 2248                       		movea.l	a0,a1
00005F76 7400                       		moveq	#0,d2
00005F78 7600                       		moveq	#0,d3
00005F7A 7205                       		moveq	#5,d1
00005F7C 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005F80                            
00005F80                            Obj8C_MakeEms:				; XREF: loc_5B42
00005F80 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005F84 5429 0024                  		addq.b	#2,$24(a1)
00005F88 237C 0000 5C14 0004        		move.l	#Map_obj88,4(a1)
00005F90 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005F96 137C 0000 0001             		move.b	#0,1(a1)
00005F9C 137C 0001 0018             		move.b	#1,$18(a1)
00005FA2 337C 0104 0008             		move.w	#$104,8(a1)
00005FA8 337C 0120 0038             		move.w	#$120,$38(a1)
00005FAE 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005FB4 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005FBA 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005FC0 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005FC4                            
00005FC4                            Obj8C_ChkEms:
00005FC4 7000                       		moveq	#0,d0
00005FC6 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005FCA 5340                       		subq.w	#1,d0
00005FCC 6500                       		bcs.s	loc_5B42
00005FCE                            
00005FCE                            Obj8C_ChkEmLoop:
00005FCE B433 0000                  		cmp.b	(a3,d0.w),d2
00005FD2 6600                       		bne.s	loc_5B3E
00005FD4 5202                       		addq.b	#1,d2
00005FD6 60EC                       		bra.s	Obj8C_ChkEms
00005FD8                            ; ===========================================================================
00005FD8                            
00005FD8                            loc_5B3E:
00005FD8 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005FDC                            
00005FDC                            loc_5B42:
00005FDC 1342 001A                  		move.b	d2,$1A(a1)
00005FE0 5229 001A                  		addq.b	#1,$1A(a1)
00005FE4 5202                       		addq.b	#1,d2
00005FE6 137C 0080 0026             		move.b	#$80,$26(a1)
00005FEC 1343 001E                  		move.b	d3,$1E(a1)
00005FF0 1343 001F                  		move.b	d3,$1F(a1)
00005FF4 0643 000A                  		addi.w	#$A,d3
00005FF8 43E9 0040                  		lea	$40(a1),a1
00005FFC 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00006000                            
00006000                            Obj8C_Move:				; XREF: Obj8C_Index
00006000 4A68 003E                  		tst.w	$3E(a0)
00006004 6700                       		beq.s	locret_5BBA
00006006 4A28 001E                  		tst.b	$1E(a0)
0000600A 6700                       		beq.s	loc_5B78
0000600C 5328 001E                  		subq.b	#1,$1E(a0)
00006010 6600                       		bne.s	loc_5B80
00006012                            
00006012                            loc_5B78:
00006012 3028 003E                  		move.w	$3E(a0),d0
00006016 D168 0026                  		add.w	d0,$26(a0)
0000601A                            
0000601A                            loc_5B80:
0000601A 1028 0026                  		move.b	$26(a0),d0
0000601E 6700                       		beq.s	loc_5B8C
00006020 0C00 0080                  		cmpi.b	#$80,d0
00006024 6600                       		bne.s	loc_5B96
00006026                            
00006026                            loc_5B8C:
00006026 4268 003E                  		clr.w	$3E(a0)
0000602A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00006030                            
00006030                            loc_5B96:
00006030 4EB9 0000 2C64             		jsr	(CalcSine).l
00006036 7800                       		moveq	#0,d4
00006038 1828 003C                  		move.b	$3C(a0),d4
0000603C C3C4                       		muls.w	d4,d1
0000603E E081                       		asr.l	#8,d1
00006040 C1C4                       		muls.w	d4,d0
00006042 E080                       		asr.l	#8,d0
00006044 D268 0038                  		add.w	$38(a0),d1
00006048 D068 003A                  		add.w	$3A(a0),d0
0000604C 3141 0008                  		move.w	d1,8(a0)
00006050 3140 000A                  		move.w	d0,$A(a0)
00006054                            
00006054                            locret_5BBA:
00006054 4E75                       		rts	
00006056                            ; ===========================================================================
00006056                            ; ---------------------------------------------------------------------------
00006056                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00006056                            ; ---------------------------------------------------------------------------
00006056                            Map_obj8B:
00006056                            	include "_maps\obj8B.asm"
00006056                            ; ---------------------------------------------------------------------------
00006056                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006056                            ; ---------------------------------------------------------------------------
00006056 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
0000605A 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
0000605E 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00006062 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00006066 08                         byte_5BCC:	dc.b 8
00006067 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
0000606C F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006071 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006076 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
0000607B 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006080 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006085 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000608A 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000608F 08                         byte_5BF5:	dc.b 8
00006090 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006095 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
0000609A E805 0800 00               		dc.b $E8, 5, 8,	0, 0
0000609F F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
000060A4 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000060A9 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000060AE 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000060B3 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000060B8 08                         byte_5C1E:	dc.b 8
000060B9 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
000060BE F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
000060C3 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
000060C8 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
000060CD 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
000060D2 0106 0823 00               		dc.b 1,	6, 8, $23, 0
000060D7 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000060DC 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000060E1 08                         byte_5C47:	dc.b 8
000060E2 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
000060E7 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
000060EC E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
000060F1 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
000060F6 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000060FB 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006100 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006105 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000610A 0C                         byte_5C70:	dc.b $C
0000610B ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006110 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006115 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
0000611A 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
0000611F ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006124 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006129 0504 0835 00               		dc.b 5,	4, 8, $35, 0
0000612E 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006133 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006138 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
0000613D 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006142 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006147 0A                         byte_5CAD:	dc.b $A
00006148 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
0000614D DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006152 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006157 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
0000615C DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006161 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006166 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000616B 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006170 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006175 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
0000617A 0A                         byte_5CE0:	dc.b $A
0000617B C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006180 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006185 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
0000618A C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
0000618F E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006194 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006199 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000619E 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
000061A3 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
000061A8 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
000061AD 0C                         byte_5D13:	dc.b $C
000061AE F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
000061B3 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
000061B8 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
000061BD 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
000061C2 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
000061C7 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
000061CC 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
000061D1 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
000061D6 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
000061DB 180C 0087 00               		dc.b $18, $C, 0, $87, 0
000061E0 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000061E5 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000061EA                            		even
000061EA                            		even
000061EA                            
000061EA                            ; ---------------------------------------------------------------------------
000061EA                            ; Ending sequence demos
000061EA                            ; ---------------------------------------------------------------------------
000061EA                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00006218                            		even
00006218                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006258                            		even
00006258                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006288                            		even
00006288                            Demo_EndLZ:	incbin	demodata\e_lz.bin
000062B8                            		even
000062B8                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
000062D8                            		even
000062D8                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000062F8                            		even
000062F8                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00006328                            		even
00006328                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006358                            		even
00006358                            
00006358                            ; ---------------------------------------------------------------------------
00006358                            ; Subroutine to	load level boundaries and start	locations
00006358                            ; ---------------------------------------------------------------------------
00006358                            
00006358                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006358                            
00006358                            
00006358                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006358 7000                       		moveq	#0,d0
0000635A 11C0 F740                  		move.b	d0,($FFFFF740).w
0000635E 11C0 F741                  		move.b	d0,($FFFFF741).w
00006362 11C0 F746                  		move.b	d0,($FFFFF746).w
00006366 11C0 F748                  		move.b	d0,($FFFFF748).w
0000636A 11C0 F742                  		move.b	d0,($FFFFF742).w
0000636E 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006372 ED08                       		lsl.b	#6,d0
00006374 E848                       		lsr.w	#4,d0
00006376 3200                       		move.w	d0,d1
00006378 D040                       		add.w	d0,d0
0000637A D041                       		add.w	d1,d0
0000637C 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006380 3018                       		move.w	(a0)+,d0
00006382 31C0 F730                  		move.w	d0,($FFFFF730).w
00006386 2018                       		move.l	(a0)+,d0
00006388 21C0 F728                  		move.l	d0,($FFFFF728).w
0000638C 21C0 F720                  		move.l	d0,($FFFFF720).w
00006390 2018                       		move.l	(a0)+,d0
00006392 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006396 21C0 F724                  		move.l	d0,($FFFFF724).w
0000639A 3038 F728                  		move.w	($FFFFF728).w,d0
0000639E 0640 0240                  		addi.w	#$240,d0
000063A2 31C0 F732                  		move.w	d0,($FFFFF732).w
000063A6 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
000063AC 3018                       		move.w	(a0)+,d0
000063AE 31C0 F73E                  		move.w	d0,($FFFFF73E).w
000063B2 6000 0000                  		bra.w	LevSz_ChkLamp
000063B6                            ; ===========================================================================
000063B6                            ; ---------------------------------------------------------------------------
000063B6                            ; Level size array and ending start location array
000063B6                            ; ---------------------------------------------------------------------------
000063B6                            LevelSizeArray:	incbin	misc\lvl_size.bin
00006506                            		even
00006506                            
00006506                            EndingStLocArray:
00006506                            		incbin	misc\sloc_end.bin
00006526                            		even
00006526                            
00006526                            ; ===========================================================================
00006526                            
00006526                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006526 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
0000652A 6700                       		beq.s	LevSz_StartLoc	; if not, branch
0000652C 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006532 3238 D008                  		move.w	($FFFFD008).w,d1
00006536 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000653A 6000                       		bra.s	loc_60D0
0000653C                            ; ===========================================================================
0000653C                            
0000653C                            LevSz_StartLoc:				; XREF: LevelSizeLoad
0000653C 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006540 ED08                       		lsl.b	#6,d0
00006542 E848                       		lsr.w	#4,d0
00006544 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006548 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000654C 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
0000654E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006552 5340                       		subq.w	#1,d0
00006554 E548                       		lsl.w	#2,d0
00006556 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
0000655A                            
0000655A                            LevSz_SonicPos:
0000655A 7200                       		moveq	#0,d1
0000655C 3219                       		move.w	(a1)+,d1
0000655E 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00006562 7000                       		moveq	#0,d0
00006564 3011                       		move.w	(a1),d0
00006566 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
0000656A                            
0000656A                            loc_60D0:				; XREF: LevSz_ChkLamp
0000656A 0441 00A0                  		subi.w	#$A0,d1
0000656E 6400                       		bcc.s	loc_60D8
00006570 7200                       		moveq	#0,d1
00006572                            
00006572                            loc_60D8:
00006572 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006576 B242                       		cmp.w	d2,d1
00006578 6500                       		bcs.s	loc_60E2
0000657A 3202                       		move.w	d2,d1
0000657C                            
0000657C                            loc_60E2:
0000657C 31C1 F700                  		move.w	d1,($FFFFF700).w
00006580 0440 0060                  		subi.w	#$60,d0
00006584 6400                       		bcc.s	loc_60EE
00006586 7000                       		moveq	#0,d0
00006588                            
00006588                            loc_60EE:
00006588 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
0000658C 6D00                       		blt.s	loc_60F8
0000658E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006592                            
00006592                            loc_60F8:
00006592 31C0 F704                  		move.w	d0,($FFFFF704).w
00006596 6100 0000                  		bsr.w	BgScrollSpeed
0000659A 7000                       		moveq	#0,d0
0000659C 1038 FE10                  		move.b	($FFFFFE10).w,d0
000065A0 E508                       		lsl.b	#2,d0
000065A2 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
000065A8 6000 0000                  		bra.w	LevSz_Unk
000065AC                            ; ===========================================================================
000065AC                            ; ---------------------------------------------------------------------------
000065AC                            ; Sonic	start location array
000065AC                            ; ---------------------------------------------------------------------------
000065AC                            StartLocArray:	incbin	misc\sloc_lev.bin
0000661C                            		even
0000661C                            
0000661C                            ; ---------------------------------------------------------------------------
0000661C                            ; Which	256x256	tiles contain loops or roll-tunnels
0000661C                            ; ---------------------------------------------------------------------------
0000661C                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
0000661C                            ; loop,	loop, tunnel, tunnel
0000661C                            ; ---------------------------------------------------------------------------
0000661C                            LoopTileNums:	incbin	misc\loopnums.bin
00006638                            		even
00006638                            
00006638                            ; ===========================================================================
00006638                            
00006638                            LevSz_Unk:				; XREF: LevelSizeLoad
00006638 7000                       		moveq	#0,d0
0000663A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000663E E748                       		lsl.w	#3,d0
00006640 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006644 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006648 24D9                       		move.l	(a1)+,(a2)+
0000664A 24D9                       		move.l	(a1)+,(a2)+
0000664C 4E75                       		rts	
0000664E                            ; End of function LevelSizeLoad
0000664E                            
0000664E                            ; ===========================================================================
0000664E 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006656 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000665E 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006666 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000666E 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006676 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000667E 0070 0100 0100 0100        		dc.l $700100, $1000100
00006686                            
00006686                            ; ---------------------------------------------------------------------------
00006686                            ; Subroutine to	set scroll speed of some backgrounds
00006686                            ; ---------------------------------------------------------------------------
00006686                            
00006686                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006686                            
00006686                            
00006686                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006686 4A38 FE30                  		tst.b	($FFFFFE30).w
0000668A 6600                       		bne.s	loc_6206
0000668C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006690 31C0 F714                  		move.w	d0,($FFFFF714).w
00006694 31C1 F708                  		move.w	d1,($FFFFF708).w
00006698 31C1 F710                  		move.w	d1,($FFFFF710).w
0000669C 31C1 F718                  		move.w	d1,($FFFFF718).w
000066A0                            
000066A0                            loc_6206:
000066A0 7400                       		moveq	#0,d2
000066A2 1438 FE10                  		move.b	($FFFFFE10).w,d2
000066A6 D442                       		add.w	d2,d2
000066A8 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000066AC 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000066B0                            ; End of function BgScrollSpeed
000066B0                            
000066B0                            ; ===========================================================================
000066B0 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000066B4 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000066B8 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000066BC 0000                       		dc.w BgScroll_End-BgScroll_Index
000066BE                            ; ===========================================================================
000066BE                            
000066BE                            BgScroll_GHZ:				; XREF: BgScroll_Index
000066BE 6000 0000                  		bra.w	Deform_GHZ
000066C2                            ; ===========================================================================
000066C2                            
000066C2                            BgScroll_LZ:				; XREF: BgScroll_Index
000066C2 E280                       		asr.l	#1,d0
000066C4 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000066C8 4E75                       		rts	
000066CA                            ; ===========================================================================
000066CA                            
000066CA                            BgScroll_MZ:				; XREF: BgScroll_Index
000066CA 4E75                       		rts	
000066CC                            ; ===========================================================================
000066CC                            
000066CC                            BgScroll_SLZ:				; XREF: BgScroll_Index
000066CC E280                       		asr.l	#1,d0
000066CE 0640 00C0                  		addi.w	#$C0,d0
000066D2 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000066D6 4E75                       		rts	
000066D8                            ; ===========================================================================
000066D8                            
000066D8                            BgScroll_SYZ:				; XREF: BgScroll_Index
000066D8 E980                       		asl.l	#4,d0
000066DA 2400                       		move.l	d0,d2
000066DC E380                       		asl.l	#1,d0
000066DE D082                       		add.l	d2,d0
000066E0 E080                       		asr.l	#8,d0
000066E2 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000066E6 31C0 F714                  		move.w	d0,($FFFFF714).w
000066EA 4E75                       		rts	
000066EC                            ; ===========================================================================
000066EC                            
000066EC                            BgScroll_SBZ:				; XREF: BgScroll_Index
000066EC E980                       		asl.l	#4,d0
000066EE E380                       		asl.l	#1,d0
000066F0 E080                       		asr.l	#8,d0
000066F2 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000066F6 4E75                       		rts	
000066F8                            ; ===========================================================================
000066F8                            
000066F8                            BgScroll_End:				; XREF: BgScroll_Index
000066F8 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000066FE 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006704 4E75                       		rts	
00006706                            ; ===========================================================================
00006706 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
0000670C 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006712 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006718 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000671E 4E75                       		rts
00006720                            
00006720                            ; ---------------------------------------------------------------------------
00006720                            ; Background layer deformation subroutines
00006720                            ; ---------------------------------------------------------------------------
00006720                            
00006720                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006720                            
00006720                            
00006720                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006720 4A38 F744                  		tst.b	($FFFFF744).w
00006724 6700                       		beq.s	loc_628E
00006726 4E75                       		rts	
00006728                            ; ===========================================================================
00006728                            
00006728                            loc_628E:
00006728 4278 F754                  		clr.w	($FFFFF754).w
0000672C 4278 F756                  		clr.w	($FFFFF756).w
00006730 4278 F758                  		clr.w	($FFFFF758).w
00006734 4278 F75A                  		clr.w	($FFFFF75A).w
00006738 6100 0000                  		bsr.w	ScrollHoriz
0000673C 6100 0000                  		bsr.w	ScrollVertical
00006740 6100 0000                  		bsr.w	DynScrResizeLoad
00006744 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
0000674A 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00006750 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006756 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000675C 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00006762 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006768 7000                       		moveq	#0,d0
0000676A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000676E D040                       		add.w	d0,d0
00006770 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006774 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006778                            ; End of function DeformBgLayer
00006778                            
00006778                            ; ===========================================================================
00006778                            ; ---------------------------------------------------------------------------
00006778                            ; Offset index for background layer deformation	code
00006778                            ; ---------------------------------------------------------------------------
00006778 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
0000677C 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006780 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006784 0000                       		dc.w Deform_GHZ-Deform_Index
00006786                            ; ---------------------------------------------------------------------------
00006786                            ; Green	Hill Zone background layer deformation code
00006786                            ; ---------------------------------------------------------------------------
00006786                            
00006786                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006786                            
00006786                            
00006786                            Deform_GHZ:				; XREF: Deform_Index
00006786 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000678A 48C4                       		ext.l	d4
0000678C EB84                       		asl.l	#5,d4
0000678E 2204                       		move.l	d4,d1
00006790 E384                       		asl.l	#1,d4
00006792 D881                       		add.l	d1,d4
00006794 7A00                       		moveq	#0,d5
00006796 6100 0000                  		bsr.w	ScrollBlock1
0000679A 6100 0000                  		bsr.w	ScrollBlock4
0000679E 43F8 CC00                  		lea	($FFFFCC00).w,a1
000067A2 3038 F704                  		move.w	($FFFFF704).w,d0
000067A6 0240 07FF                  		andi.w	#$7FF,d0
000067AA EA48                       		lsr.w	#5,d0
000067AC 4440                       		neg.w	d0
000067AE 0640 0026                  		addi.w	#$26,d0
000067B2 31C0 F714                  		move.w	d0,($FFFFF714).w
000067B6 3800                       		move.w	d0,d4
000067B8 6100 0000                  		bsr.w	ScrollBlock3
000067BC 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000067C2 323C 006F                  		move.w	#$6F,d1
000067C6 9244                       		sub.w	d4,d1
000067C8 3038 F700                  		move.w	($FFFFF700).w,d0
000067CC 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
000067D2 6600                       		bne.s	loc_633C
000067D4 7000                       		moveq	#0,d0
000067D6                            
000067D6                            loc_633C:
000067D6 4440                       		neg.w	d0
000067D8 4840                       		swap	d0
000067DA 3038 F708                  		move.w	($FFFFF708).w,d0
000067DE 4440                       		neg.w	d0
000067E0                            
000067E0                            loc_6346:
000067E0 22C0                       		move.l	d0,(a1)+
000067E2 51C9 FFFC                  		dbf	d1,loc_6346
000067E6 323C 0027                  		move.w	#$27,d1
000067EA 3038 F710                  		move.w	($FFFFF710).w,d0
000067EE 4440                       		neg.w	d0
000067F0                            
000067F0                            loc_6356:
000067F0 22C0                       		move.l	d0,(a1)+
000067F2 51C9 FFFC                  		dbf	d1,loc_6356
000067F6 3038 F710                  		move.w	($FFFFF710).w,d0
000067FA 0640 0000                  		addi.w	#0,d0
000067FE 3438 F700                  		move.w	($FFFFF700).w,d2
00006802 0642 FE00                  		addi.w	#-$200,d2
00006806 9440                       		sub.w	d0,d2
00006808 48C2                       		ext.l	d2
0000680A E182                       		asl.l	#8,d2
0000680C 85FC 0068                  		divs.w	#$68,d2
00006810 48C2                       		ext.l	d2
00006812 E182                       		asl.l	#8,d2
00006814 7600                       		moveq	#0,d3
00006816 3600                       		move.w	d0,d3
00006818 323C 0047                  		move.w	#$47,d1
0000681C D244                       		add.w	d4,d1
0000681E                            
0000681E                            loc_6384:
0000681E 3003                       		move.w	d3,d0
00006820 4440                       		neg.w	d0
00006822 22C0                       		move.l	d0,(a1)+
00006824 4843                       		swap	d3
00006826 D682                       		add.l	d2,d3
00006828 4843                       		swap	d3
0000682A 51C9 FFF2                  		dbf	d1,loc_6384
0000682E 4E75                       		rts	
00006830                            ; End of function Deform_GHZ
00006830                            
00006830                            ; ---------------------------------------------------------------------------
00006830                            ; Labyrinth Zone background layer deformation code
00006830                            ; ---------------------------------------------------------------------------
00006830                            
00006830                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006830                            
00006830                            
00006830                            Deform_LZ:				; XREF: Deform_Index
00006830 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006834 48C4                       		ext.l	d4
00006836 EF84                       		asl.l	#7,d4
00006838 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000683C 48C5                       		ext.l	d5
0000683E EF85                       		asl.l	#7,d5
00006840 6100 0000                  		bsr.w	ScrollBlock1
00006844 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000684A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000684E 323C 00DF                  		move.w	#$DF,d1
00006852 3038 F700                  		move.w	($FFFFF700).w,d0
00006856 4440                       		neg.w	d0
00006858 4840                       		swap	d0
0000685A 3038 F708                  		move.w	($FFFFF708).w,d0
0000685E 4440                       		neg.w	d0
00006860                            
00006860                            loc_63C6:
00006860 22C0                       		move.l	d0,(a1)+
00006862 51C9 FFFC                  		dbf	d1,loc_63C6
00006866 3038 F646                  		move.w	($FFFFF646).w,d0
0000686A 9078 F704                  		sub.w	($FFFFF704).w,d0
0000686E 4E75                       		rts	
00006870                            ; End of function Deform_LZ
00006870                            
00006870                            ; ---------------------------------------------------------------------------
00006870                            ; Marble Zone background layer deformation code
00006870                            ; ---------------------------------------------------------------------------
00006870                            
00006870                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006870                            
00006870                            
00006870                            Deform_MZ:				; XREF: Deform_Index
00006870 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006874 48C4                       		ext.l	d4
00006876 ED84                       		asl.l	#6,d4
00006878 2204                       		move.l	d4,d1
0000687A E384                       		asl.l	#1,d4
0000687C D881                       		add.l	d1,d4
0000687E 7A00                       		moveq	#0,d5
00006880 6100 0000                  		bsr.w	ScrollBlock1
00006884 303C 0200                  		move.w	#$200,d0
00006888 3238 F704                  		move.w	($FFFFF704).w,d1
0000688C 0441 01C8                  		subi.w	#$1C8,d1
00006890 6500                       		bcs.s	loc_6402
00006892 3401                       		move.w	d1,d2
00006894 D241                       		add.w	d1,d1
00006896 D242                       		add.w	d2,d1
00006898 E441                       		asr.w	#2,d1
0000689A D041                       		add.w	d1,d0
0000689C                            
0000689C                            loc_6402:
0000689C 31C0 F714                  		move.w	d0,($FFFFF714).w
000068A0 6100 0000                  		bsr.w	ScrollBlock3
000068A4 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000068AA 43F8 CC00                  		lea	($FFFFCC00).w,a1
000068AE 323C 00DF                  		move.w	#$DF,d1
000068B2 3038 F700                  		move.w	($FFFFF700).w,d0
000068B6 4440                       		neg.w	d0
000068B8 4840                       		swap	d0
000068BA 3038 F708                  		move.w	($FFFFF708).w,d0
000068BE 4440                       		neg.w	d0
000068C0                            
000068C0                            loc_6426:
000068C0 22C0                       		move.l	d0,(a1)+
000068C2 51C9 FFFC                  		dbf	d1,loc_6426
000068C6 4E75                       		rts	
000068C8                            ; End of function Deform_MZ
000068C8                            
000068C8                            ; ---------------------------------------------------------------------------
000068C8                            ; Star Light Zone background layer deformation code
000068C8                            ; ---------------------------------------------------------------------------
000068C8                            
000068C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068C8                            
000068C8                            
000068C8                            Deform_SLZ:				; XREF: Deform_Index
000068C8 3838 F73A                  		move.w	($FFFFF73A).w,d4
000068CC 48C4                       		ext.l	d4
000068CE EB84                       		asl.l	#5,d4
000068D0 2204                       		move.l	d4,d1
000068D2 E384                       		asl.l	#1,d4
000068D4 D881                       		add.l	d1,d4
000068D6 7A00                       		moveq	#0,d5
000068D8 6100 0000                  		bsr.w	ScrollBlock1
000068DC 6100 0000                  		bsr.w	ScrollBlock3
000068E0 43F8 CC00                  		lea	($FFFFCC00).w,a1
000068E4                            	;	move.w	($FFFFF704).w,d0
000068E4                            	;	andi.w	#$7FF,d0
000068E4 EA48                       		lsr.w	#5,d0
000068E6 4440                       		neg.w	d0
000068E8 0640 0026                  		addi.w	#$26,d0
000068EC 31C0 F714                  		move.w	d0,($FFFFF714).w
000068F0 3800                       		move.w	d0,d4
000068F2                            	;	bsr.w	ScrollBlock3
000068F2 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
000068F8 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
000068FC                            
000068FC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006900 4440                       		neg.w	d0			; negate (positive to negative)
00006902 4840                       		swap	d0			; send to the left side of d0
00006904 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006908 45F8 A800                  		lea	($FFFFA800).w,a2
0000690C 069A 0000 5000             		addi.l	#$5000,(a2)+
00006912 069A 0000 C000             		addi.l	#$C000,(a2)+
00006918 3038 A800                  		move.w	($FFFFA800).w,d0
0000691C 4440                       		neg.w	d0			; negate (positive to negative)
0000691E E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006920 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006924                            slz_DeformLoop_1:
00006924 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006926 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
0000692A                            
0000692A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000692E 4440                       		neg.w	d0			; negate (positive to negative)
00006930 4840                       		swap	d0			; send to the left side of d0
00006932 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006936 45F8 A800                  		lea	($FFFFA800).w,a2
0000693A 069A 0000 5000             		addi.l	#$5000,(a2)+
00006940 069A 0000 C000             		addi.l	#$C000,(a2)+
00006946 3038 A800                  		move.w	($FFFFA800).w,d0
0000694A 4440                       		neg.w	d0			; negate (positive to negative)
0000694C E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
0000694E 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006952                            slz_DeformLoop_2:
00006952 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006954 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
00006958                            
00006958 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000695C 4440                       		neg.w	d0			; negate (positive to negative)
0000695E 4840                       		swap	d0			; send to the left side of d0
00006960 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006964 45F8 A800                  		lea	($FFFFA800).w,a2
00006968 069A 0000 5000             		addi.l	#$5000,(a2)+
0000696E 069A 0000 C000             		addi.l	#$C000,(a2)+
00006974 3038 A800                  		move.w	($FFFFA800).w,d0
00006978 4440                       		neg.w	d0			; negate (positive to negative)
0000697A E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
0000697C 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006980                            slz_DeformLoop_3:
00006980 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006982 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006986                            
00006986 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000698A 4440                       		neg.w	d0			; negate (positive to negative)
0000698C 4840                       		swap	d0			; send to the left side of d0
0000698E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006992 45F8 A800                  		lea	($FFFFA800).w,a2
00006996 069A 0000 5000             		addi.l	#$5000,(a2)+
0000699C 069A 0000 C000             		addi.l	#$C000,(a2)+
000069A2 3038 A800                  		move.w	($FFFFA800).w,d0
000069A6 4440                       		neg.w	d0			; negate (positive to negative)
000069A8 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000069AA 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069AE                            slz_DeformLoop_4:
000069AE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069B0 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
000069B4                            
000069B4 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069B8 4440                       		neg.w	d0			; negate (positive to negative)
000069BA 4840                       		swap	d0			; send to the left side of d0
000069BC 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069C0 45F8 A800                  		lea	($FFFFA800).w,a2
000069C4 069A 0000 5000             		addi.l	#$5000,(a2)+
000069CA 069A 0000 C000             		addi.l	#$C000,(a2)+
000069D0 3038 A800                  		move.w	($FFFFA800).w,d0
000069D4 4440                       		neg.w	d0			; negate (positive to negative)
000069D6 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
000069D8 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069DC                            slz_DeformLoop_5:
000069DC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069DE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
000069E2                            
000069E2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069E6 4440                       		neg.w	d0			; negate (positive to negative)
000069E8 4840                       		swap	d0			; send to the left side of d0
000069EA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069EE 4440                       		neg.w	d0			; negate (positive to negative)
000069F0 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
000069F2 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069F6                            slz_DeformLoop_6:
000069F6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069F8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
000069FC                            
000069FC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A00 4440                       		neg.w	d0			; negate (positive to negative)
00006A02 4840                       		swap	d0			; send to the left side of d0
00006A04 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A08 4440                       		neg.w	d0			; negate (positive to negative)
00006A0A EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006A0C 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A10                            slz_DeformLoop_7:
00006A10 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A12 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006A16                            
00006A16 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A1A 4440                       		neg.w	d0			; negate (positive to negative)
00006A1C 4840                       		swap	d0			; send to the left side of d0
00006A1E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A22 4440                       		neg.w	d0			; negate (positive to negative)
00006A24 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006A26 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A2A                            slz_DeformLoop_8:
00006A2A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A2C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006A30                            
00006A30 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A34 4440                       		neg.w	d0			; negate (positive to negative)
00006A36 4840                       		swap	d0			; send to the left side of d0
00006A38 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A3C 4440                       		neg.w	d0			; negate (positive to negative)
00006A3E EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006A40 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A44                            slz_DeformLoop_9:
00006A44 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A46 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006A4A                            
00006A4A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A4E 4440                       		neg.w	d0			; negate (positive to negative)
00006A50 4840                       		swap	d0			; send to the left side of d0
00006A52 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A56 4440                       		neg.w	d0			; negate (positive to negative)
00006A58 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006A5A 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A5E                            slz_DeformLoop_10:
00006A5E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A60 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006A64                            
00006A64 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A68 4440                       		neg.w	d0			; negate (positive to negative)
00006A6A 4840                       		swap	d0			; send to the left side of d0
00006A6C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A70 4440                       		neg.w	d0			; negate (positive to negative)
00006A72 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006A74 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A78                            slz_DeformLoop_11:
00006A78 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A7A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006A7E                            
00006A7E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A82 4440                       		neg.w	d0			; negate (positive to negative)
00006A84 4840                       		swap	d0			; send to the left side of d0
00006A86 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A8A 4440                       		neg.w	d0			; negate (positive to negative)
00006A8C E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006A8E 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A92                            slz_DeformLoop_12:
00006A92 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A94 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006A98                            
00006A98 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A9C 4440                       		neg.w	d0			; negate (positive to negative)
00006A9E 4840                       		swap	d0			; send to the left side of d0
00006AA0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AA4 4440                       		neg.w	d0			; negate (positive to negative)
00006AA6 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006AA8 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AAC                            slz_DeformLoop_13:
00006AAC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AAE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006AB2 4E75                       		rts	
00006AB4                            ; End of function Deform_SLZ
00006AB4 4E75                       		rts	
00006AB6                            ; End of function Deform_SLZ_2
00006AB6                            
00006AB6                            ; ---------------------------------------------------------------------------
00006AB6                            ; Spring Yard Zone background layer deformation	code
00006AB6                            ; ---------------------------------------------------------------------------
00006AB6                            
00006AB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AB6                            
00006AB6                            
00006AB6                            Deform_SYZ:				; XREF: Deform_Index
00006AB6 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006ABA 48C4                       		ext.l	d4
00006ABC ED84                       		asl.l	#6,d4
00006ABE 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006AC2 48C5                       		ext.l	d5
00006AC4 E985                       		asl.l	#4,d5
00006AC6 2205                       		move.l	d5,d1
00006AC8 E385                       		asl.l	#1,d5
00006ACA DA81                       		add.l	d1,d5
00006ACC 6100 0000                  		bsr.w	ScrollBlock1
00006AD0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006AD6 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006ADA 323C 00DF                  		move.w	#$DF,d1
00006ADE 3038 F700                  		move.w	($FFFFF700).w,d0
00006AE2 4440                       		neg.w	d0
00006AE4 4840                       		swap	d0
00006AE6 3038 F708                  		move.w	($FFFFF708).w,d0
00006AEA 4440                       		neg.w	d0
00006AEC                            
00006AEC                            loc_653C:
00006AEC 22C0                       		move.l	d0,(a1)+
00006AEE 51C9 FFFC                  		dbf	d1,loc_653C
00006AF2 4E75                       		rts	
00006AF4                            ; End of function Deform_SYZ
00006AF4                            
00006AF4                            ; ---------------------------------------------------------------------------
00006AF4                            ; Scrap	Brain Zone background layer deformation	code
00006AF4                            ; ---------------------------------------------------------------------------
00006AF4                            
00006AF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AF4                            
00006AF4                            
00006AF4                            Deform_SBZ:				; XREF: Deform_Index
00006AF4 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006AF8 48C4                       		ext.l	d4
00006AFA ED84                       		asl.l	#6,d4
00006AFC 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006B00 48C5                       		ext.l	d5
00006B02 E985                       		asl.l	#4,d5
00006B04 E385                       		asl.l	#1,d5
00006B06 6100 0000                  		bsr.w	ScrollBlock1
00006B0A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006B10 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006B14 323C 00DF                  		move.w	#$DF,d1
00006B18 3038 F700                  		move.w	($FFFFF700).w,d0
00006B1C 4440                       		neg.w	d0
00006B1E 4840                       		swap	d0
00006B20 3038 F708                  		move.w	($FFFFF708).w,d0
00006B24 4440                       		neg.w	d0
00006B26                            
00006B26                            loc_6576:
00006B26 22C0                       		move.l	d0,(a1)+
00006B28 51C9 FFFC                  		dbf	d1,loc_6576
00006B2C 4E75                       		rts	
00006B2E                            ; End of function Deform_SBZ
00006B2E                            
00006B2E                            ; ---------------------------------------------------------------------------
00006B2E                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006B2E                            ; ---------------------------------------------------------------------------
00006B2E                            
00006B2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B2E                            
00006B2E                            
00006B2E                            ScrollHoriz:				; XREF: DeformBgLayer
00006B2E 3838 F700                  		move.w	($FFFFF700).w,d4
00006B32 6100                       		bsr.s	ScrollHoriz2
00006B34 3038 F700                  		move.w	($FFFFF700).w,d0
00006B38 0240 0010                  		andi.w	#$10,d0
00006B3C 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006B40 B300                       		eor.b	d1,d0
00006B42 6600                       		bne.s	locret_65B0
00006B44 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006B4A 3038 F700                  		move.w	($FFFFF700).w,d0
00006B4E 9044                       		sub.w	d4,d0
00006B50 6A00                       		bpl.s	loc_65AA
00006B52 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006B58 4E75                       		rts	
00006B5A                            ; ===========================================================================
00006B5A                            
00006B5A                            loc_65AA:
00006B5A 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006B60                            
00006B60                            locret_65B0:
00006B60 4E75                       		rts	
00006B62                            ; End of function ScrollHoriz
00006B62                            
00006B62                            
00006B62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B62                            
00006B62                            
00006B62                            ScrollHoriz2:				; XREF: ScrollHoriz
00006B62 3038 D008                  		move.w	($FFFFD008).w,d0
00006B66 9078 F700                  		sub.w	($FFFFF700).w,d0
00006B6A 0440 0090                  		subi.w	#$90,d0
00006B6E 6500                       		bcs.s	loc_65F6
00006B70 0440 0010                  		subi.w	#$10,d0
00006B74 6400                       		bcc.s	loc_65CC
00006B76 4278 F73A                  		clr.w	($FFFFF73A).w
00006B7A 4E75                       		rts	
00006B7C                            ; ===========================================================================
00006B7C                            
00006B7C                            loc_65CC:
00006B7C 0C40 0010                  		cmpi.w	#$10,d0
00006B80 6500                       		bcs.s	loc_65D6
00006B82 303C 0010                  		move.w	#$10,d0
00006B86                            
00006B86                            loc_65D6:
00006B86 D078 F700                  		add.w	($FFFFF700).w,d0
00006B8A B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006B8E 6D00                       		blt.s	loc_65E4
00006B90 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006B94                            
00006B94                            loc_65E4:
00006B94 3200                       		move.w	d0,d1
00006B96 9278 F700                  		sub.w	($FFFFF700).w,d1
00006B9A E141                       		asl.w	#8,d1
00006B9C 31C0 F700                  		move.w	d0,($FFFFF700).w
00006BA0 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006BA4 4E75                       		rts	
00006BA6                            ; ===========================================================================
00006BA6                            
00006BA6                            loc_65F6:				; XREF: ScrollHoriz2
00006BA6 D078 F700                  		add.w	($FFFFF700).w,d0
00006BAA B078 F728                  		cmp.w	($FFFFF728).w,d0
00006BAE 6EE4                       		bgt.s	loc_65E4
00006BB0 3038 F728                  		move.w	($FFFFF728).w,d0
00006BB4 60DE                       		bra.s	loc_65E4
00006BB6                            ; End of function ScrollHoriz2
00006BB6                            
00006BB6                            ; ===========================================================================
00006BB6 4A40                       		tst.w	d0
00006BB8 6A00                       		bpl.s	loc_6610
00006BBA 303C FFFE                  		move.w	#-2,d0
00006BBE 60E6                       		bra.s	loc_65F6
00006BC0                            ; ===========================================================================
00006BC0                            
00006BC0                            loc_6610:
00006BC0 303C 0002                  		move.w	#2,d0
00006BC4 60B6                       		bra.s	loc_65CC
00006BC6                            
00006BC6                            ; ---------------------------------------------------------------------------
00006BC6                            ; Subroutine to	scroll the level vertically as Sonic moves
00006BC6                            ; ---------------------------------------------------------------------------
00006BC6                            
00006BC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BC6                            
00006BC6                            
00006BC6                            ScrollVertical:				; XREF: DeformBgLayer
00006BC6 7200                       		moveq	#0,d1
00006BC8 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006BCC 9078 F704                  		sub.w	($FFFFF704).w,d0
00006BD0 0838 0002 D022             		btst	#2,($FFFFD022).w
00006BD6 6700                       		beq.s	loc_662A
00006BD8 5B40                       		subq.w	#5,d0
00006BDA                            
00006BDA                            loc_662A:
00006BDA 0838 0001 D022             		btst	#1,($FFFFD022).w
00006BE0 6700                       		beq.s	loc_664A
00006BE2 0640 0020                  		addi.w	#$20,d0
00006BE6 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006BEA 6500                       		bcs.s	loc_6696
00006BEC 0440 0040                  		subi.w	#$40,d0
00006BF0 6400                       		bcc.s	loc_6696
00006BF2 4A38 F75C                  		tst.b	($FFFFF75C).w
00006BF6 6600                       		bne.s	loc_66A8
00006BF8 6000                       		bra.s	loc_6656
00006BFA                            ; ===========================================================================
00006BFA                            
00006BFA                            loc_664A:
00006BFA 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006BFE 6600                       		bne.s	loc_665C
00006C00 4A38 F75C                  		tst.b	($FFFFF75C).w
00006C04 6600                       		bne.s	loc_66A8
00006C06                            
00006C06                            loc_6656:
00006C06 4278 F73C                  		clr.w	($FFFFF73C).w
00006C0A 4E75                       		rts	
00006C0C                            ; ===========================================================================
00006C0C                            
00006C0C                            loc_665C:
00006C0C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006C12 6600                       		bne.s	loc_6684
00006C14 3238 D014                  		move.w	($FFFFD014).w,d1
00006C18 6A00                       		bpl.s	loc_666C
00006C1A 4441                       		neg.w	d1
00006C1C                            
00006C1C                            loc_666C:
00006C1C 0C41 0800                  		cmpi.w	#$800,d1
00006C20 6400                       		bcc.s	loc_6696
00006C22 323C 0600                  		move.w	#$600,d1
00006C26 0C40 0006                  		cmpi.w	#6,d0
00006C2A 6E00                       		bgt.s	loc_66F6
00006C2C 0C40 FFFA                  		cmpi.w	#-6,d0
00006C30 6D00                       		blt.s	loc_66C0
00006C32 6000                       		bra.s	loc_66AE
00006C34                            ; ===========================================================================
00006C34                            
00006C34                            loc_6684:
00006C34 323C 0200                  		move.w	#$200,d1
00006C38 0C40 0002                  		cmpi.w	#2,d0
00006C3C 6E00                       		bgt.s	loc_66F6
00006C3E 0C40 FFFE                  		cmpi.w	#-2,d0
00006C42 6D00                       		blt.s	loc_66C0
00006C44 6000                       		bra.s	loc_66AE
00006C46                            ; ===========================================================================
00006C46                            
00006C46                            loc_6696:
00006C46 323C 1000                  		move.w	#$1000,d1
00006C4A 0C40 0010                  		cmpi.w	#$10,d0
00006C4E 6E00                       		bgt.s	loc_66F6
00006C50 0C40 FFF0                  		cmpi.w	#-$10,d0
00006C54 6D00                       		blt.s	loc_66C0
00006C56 6000                       		bra.s	loc_66AE
00006C58                            ; ===========================================================================
00006C58                            
00006C58                            loc_66A8:
00006C58 7000                       		moveq	#0,d0
00006C5A 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006C5E                            
00006C5E                            loc_66AE:
00006C5E 7200                       		moveq	#0,d1
00006C60 3200                       		move.w	d0,d1
00006C62 D278 F704                  		add.w	($FFFFF704).w,d1
00006C66 4A40                       		tst.w	d0
00006C68 6A00 0000                  		bpl.w	loc_6700
00006C6C 6000 0000                  		bra.w	loc_66CC
00006C70                            ; ===========================================================================
00006C70                            
00006C70                            loc_66C0:
00006C70 4441                       		neg.w	d1
00006C72 48C1                       		ext.l	d1
00006C74 E181                       		asl.l	#8,d1
00006C76 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006C7A 4841                       		swap	d1
00006C7C                            
00006C7C                            loc_66CC:
00006C7C B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006C80 6E00                       		bgt.s	loc_6724
00006C82 0C41 FF00                  		cmpi.w	#-$100,d1
00006C86 6E00                       		bgt.s	loc_66F0
00006C88 0241 07FF                  		andi.w	#$7FF,d1
00006C8C 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006C92 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006C98 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006C9E 6000                       		bra.s	loc_6724
00006CA0                            ; ===========================================================================
00006CA0                            
00006CA0                            loc_66F0:
00006CA0 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006CA4 6000                       		bra.s	loc_6724
00006CA6                            ; ===========================================================================
00006CA6                            
00006CA6                            loc_66F6:
00006CA6 48C1                       		ext.l	d1
00006CA8 E181                       		asl.l	#8,d1
00006CAA D2B8 F704                  		add.l	($FFFFF704).w,d1
00006CAE 4841                       		swap	d1
00006CB0                            
00006CB0                            loc_6700:
00006CB0 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006CB4 6D00                       		blt.s	loc_6724
00006CB6 0441 0800                  		subi.w	#$800,d1
00006CBA 6500                       		bcs.s	loc_6720
00006CBC 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006CC2 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006CC8 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006CCE 6000                       		bra.s	loc_6724
00006CD0                            ; ===========================================================================
00006CD0                            
00006CD0                            loc_6720:
00006CD0 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006CD4                            
00006CD4                            loc_6724:
00006CD4 3838 F704                  		move.w	($FFFFF704).w,d4
00006CD8 4841                       		swap	d1
00006CDA 2601                       		move.l	d1,d3
00006CDC 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006CE0 E09B                       		ror.l	#8,d3
00006CE2 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006CE6 21C1 F704                  		move.l	d1,($FFFFF704).w
00006CEA 3038 F704                  		move.w	($FFFFF704).w,d0
00006CEE 0240 0010                  		andi.w	#$10,d0
00006CF2 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006CF6 B300                       		eor.b	d1,d0
00006CF8 6600                       		bne.s	locret_6766
00006CFA 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006D00 3038 F704                  		move.w	($FFFFF704).w,d0
00006D04 9044                       		sub.w	d4,d0
00006D06 6A00                       		bpl.s	loc_6760
00006D08 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006D0E 4E75                       		rts	
00006D10                            ; ===========================================================================
00006D10                            
00006D10                            loc_6760:
00006D10 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006D16                            
00006D16                            locret_6766:
00006D16 4E75                       		rts	
00006D18                            ; End of function ScrollVertical
00006D18                            
00006D18                            
00006D18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D18                            
00006D18                            
00006D18                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006D18 2438 F708                  		move.l	($FFFFF708).w,d2
00006D1C 2002                       		move.l	d2,d0
00006D1E D084                       		add.l	d4,d0
00006D20 21C0 F708                  		move.l	d0,($FFFFF708).w
00006D24 2200                       		move.l	d0,d1
00006D26 4841                       		swap	d1
00006D28 0241 0010                  		andi.w	#$10,d1
00006D2C 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006D30 B701                       		eor.b	d3,d1
00006D32 6600                       		bne.s	loc_679C
00006D34 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006D3A 9082                       		sub.l	d2,d0
00006D3C 6A00                       		bpl.s	loc_6796
00006D3E 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006D44 6000                       		bra.s	loc_679C
00006D46                            ; ===========================================================================
00006D46                            
00006D46                            loc_6796:
00006D46 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006D4C                            
00006D4C                            loc_679C:
00006D4C 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006D50 2003                       		move.l	d3,d0
00006D52 D085                       		add.l	d5,d0
00006D54 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006D58 2200                       		move.l	d0,d1
00006D5A 4841                       		swap	d1
00006D5C 0241 0010                  		andi.w	#$10,d1
00006D60 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006D64 B501                       		eor.b	d2,d1
00006D66 6600                       		bne.s	locret_67D0
00006D68 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006D6E 9083                       		sub.l	d3,d0
00006D70 6A00                       		bpl.s	loc_67CA
00006D72 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006D78 4E75                       		rts	
00006D7A                            ; ===========================================================================
00006D7A                            
00006D7A                            loc_67CA:
00006D7A 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006D80                            
00006D80                            locret_67D0:
00006D80 4E75                       		rts	
00006D82                            ; End of function ScrollBlock1
00006D82                            
00006D82                            
00006D82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D82                            
00006D82                            
00006D82                            ScrollBlock2:				; XREF: Deform_SLZ
00006D82 2438 F708                  		move.l	($FFFFF708).w,d2
00006D86 2002                       		move.l	d2,d0
00006D88 D084                       		add.l	d4,d0
00006D8A 21C0 F708                  		move.l	d0,($FFFFF708).w
00006D8E 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006D92 2003                       		move.l	d3,d0
00006D94 D085                       		add.l	d5,d0
00006D96 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006D9A 2200                       		move.l	d0,d1
00006D9C 4841                       		swap	d1
00006D9E 0241 0010                  		andi.w	#$10,d1
00006DA2 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006DA6 B501                       		eor.b	d2,d1
00006DA8 6600                       		bne.s	locret_6812
00006DAA 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006DB0 9083                       		sub.l	d3,d0
00006DB2 6A00                       		bpl.s	loc_680C
00006DB4 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006DBA 4E75                       		rts	
00006DBC                            ; ===========================================================================
00006DBC                            
00006DBC                            loc_680C:
00006DBC 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006DC2                            
00006DC2                            locret_6812:
00006DC2 4E75                       		rts	
00006DC4                            ; End of function ScrollBlock2
00006DC4                            
00006DC4                            
00006DC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DC4                            
00006DC4                            
00006DC4                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006DC4 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006DC8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006DCC 3200                       		move.w	d0,d1
00006DCE 0241 0010                  		andi.w	#$10,d1
00006DD2 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006DD6 B501                       		eor.b	d2,d1
00006DD8 6600                       		bne.s	locret_6842
00006DDA 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006DE0 9043                       		sub.w	d3,d0
00006DE2 6A00                       		bpl.s	loc_683C
00006DE4 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006DEA 4E75                       		rts	
00006DEC                            ; ===========================================================================
00006DEC                            
00006DEC                            loc_683C:
00006DEC 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006DF2                            
00006DF2                            locret_6842:
00006DF2 4E75                       		rts	
00006DF4                            ; End of function ScrollBlock3
00006DF4                            
00006DF4                            
00006DF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DF4                            
00006DF4                            
00006DF4                            ScrollBlock4:				; XREF: Deform_GHZ
00006DF4 3438 F710                  		move.w	($FFFFF710).w,d2
00006DF8 3638 F714                  		move.w	($FFFFF714).w,d3
00006DFC 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006E00 48C0                       		ext.l	d0
00006E02 EF80                       		asl.l	#7,d0
00006E04 D1B8 F710                  		add.l	d0,($FFFFF710).w
00006E08 3038 F710                  		move.w	($FFFFF710).w,d0
00006E0C 0240 0010                  		andi.w	#$10,d0
00006E10 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006E14 B300                       		eor.b	d1,d0
00006E16 6600                       		bne.s	locret_6884
00006E18 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006E1E 3038 F710                  		move.w	($FFFFF710).w,d0
00006E22 9042                       		sub.w	d2,d0
00006E24 6A00                       		bpl.s	loc_687E
00006E26 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006E2C 6000                       		bra.s	locret_6884
00006E2E                            ; ===========================================================================
00006E2E                            
00006E2E                            loc_687E:
00006E2E 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006E34                            
00006E34                            locret_6884:
00006E34 4E75                       		rts	
00006E36                            ; End of function ScrollBlock4
00006E36                            
00006E36                            
00006E36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E36                            
00006E36                            
00006E36                            sub_6886:				; XREF: loc_C44
00006E36 4BF9 00C0 0004             		lea	($C00004).l,a5
00006E3C 4DF9 00C0 0000             		lea	($C00000).l,a6
00006E42 45F8 F756                  		lea	($FFFFF756).w,a2
00006E46 47F8 F708                  		lea	($FFFFF708).w,a3
00006E4A 49F8 A440                  		lea	($FFFFA440).w,a4
00006E4E 343C 6000                  		move.w	#$6000,d2
00006E52 6100 0000                  		bsr.w	sub_6954
00006E56 45F8 F758                  		lea	($FFFFF758).w,a2
00006E5A 47F8 F710                  		lea	($FFFFF710).w,a3
00006E5E 6000 0000                  		bra.w	sub_69F4
00006E62                            ; End of function sub_6886
00006E62                            
00006E62                            ; ---------------------------------------------------------------------------
00006E62                            ; Subroutine to	display	correct	tiles as you move
00006E62                            ; ---------------------------------------------------------------------------
00006E62                            
00006E62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E62                            
00006E62                            
00006E62                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006E62 4BF9 00C0 0004             		lea	($C00004).l,a5
00006E68 4DF9 00C0 0000             		lea	($C00000).l,a6
00006E6E 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006E72 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006E76 49F8 A440                  		lea	($FFFFA440).w,a4
00006E7A 343C 6000                  		move.w	#$6000,d2
00006E7E 6100 0000                  		bsr.w	sub_6954
00006E82 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006E86 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006E8A 6100 0000                  		bsr.w	sub_69F4
00006E8E 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006E92 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006E96 49F8 A400                  		lea	($FFFFA400).w,a4
00006E9A 343C 4000                  		move.w	#$4000,d2
00006E9E 4A12                       		tst.b	(a2)
00006EA0 6700                       		beq.s	locret_6952
00006EA2 0892 0000                  		bclr	#0,(a2)
00006EA6 6700                       		beq.s	loc_6908
00006EA8 78F0                       		moveq	#-$10,d4
00006EAA 7AF0                       		moveq	#-$10,d5
00006EAC 6100 0000                  		bsr.w	sub_6C20
00006EB0 78F0                       		moveq	#-$10,d4
00006EB2 7AF0                       		moveq	#-$10,d5
00006EB4 6100 0000                  		bsr.w	sub_6AD8
00006EB8                            
00006EB8                            loc_6908:
00006EB8 0892 0001                  		bclr	#1,(a2)
00006EBC 6700                       		beq.s	loc_6922
00006EBE 383C 00E0                  		move.w	#$E0,d4
00006EC2 7AF0                       		moveq	#-$10,d5
00006EC4 6100 0000                  		bsr.w	sub_6C20
00006EC8 383C 00E0                  		move.w	#$E0,d4
00006ECC 7AF0                       		moveq	#-$10,d5
00006ECE 6100 0000                  		bsr.w	sub_6AD8
00006ED2                            
00006ED2                            loc_6922:
00006ED2 0892 0002                  		bclr	#2,(a2)
00006ED6 6700                       		beq.s	loc_6938
00006ED8 78F0                       		moveq	#-$10,d4
00006EDA 7AF0                       		moveq	#-$10,d5
00006EDC 6100 0000                  		bsr.w	sub_6C20
00006EE0 78F0                       		moveq	#-$10,d4
00006EE2 7AF0                       		moveq	#-$10,d5
00006EE4 6100 0000                  		bsr.w	sub_6B04
00006EE8                            
00006EE8                            loc_6938:
00006EE8 0892 0003                  		bclr	#3,(a2)
00006EEC 6700                       		beq.s	locret_6952
00006EEE 78F0                       		moveq	#-$10,d4
00006EF0 3A3C 0140                  		move.w	#$140,d5
00006EF4 6100 0000                  		bsr.w	sub_6C20
00006EF8 78F0                       		moveq	#-$10,d4
00006EFA 3A3C 0140                  		move.w	#$140,d5
00006EFE 6100 0000                  		bsr.w	sub_6B04
00006F02                            
00006F02                            locret_6952:
00006F02 4E75                       		rts	
00006F04                            ; End of function LoadTilesAsYouMove
00006F04                            
00006F04                            
00006F04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F04                            
00006F04                            
00006F04                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006F04 4A12                       		tst.b	(a2)
00006F06 6700 0000                  		beq.w	locret_69F2
00006F0A 0892 0000                  		bclr	#0,(a2)
00006F0E 6700                       		beq.s	loc_6972
00006F10 78F0                       		moveq	#-$10,d4
00006F12 7AF0                       		moveq	#-$10,d5
00006F14 6100 0000                  		bsr.w	sub_6C20
00006F18 78F0                       		moveq	#-$10,d4
00006F1A 7AF0                       		moveq	#-$10,d5
00006F1C 7C1F                       		moveq	#$1F,d6
00006F1E 6100 0000                  		bsr.w	sub_6ADA
00006F22                            
00006F22                            loc_6972:
00006F22 0892 0001                  		bclr	#1,(a2)
00006F26 6700                       		beq.s	loc_698E
00006F28 383C 00E0                  		move.w	#$E0,d4
00006F2C 7AF0                       		moveq	#-$10,d5
00006F2E 6100 0000                  		bsr.w	sub_6C20
00006F32 383C 00E0                  		move.w	#$E0,d4
00006F36 7AF0                       		moveq	#-$10,d5
00006F38 7C1F                       		moveq	#$1F,d6
00006F3A 6100 0000                  		bsr.w	sub_6ADA
00006F3E                            
00006F3E                            loc_698E:
00006F3E 0892 0002                  		bclr	#2,(a2)
00006F42 6700                       		beq.s	loc_69BE
00006F44 78F0                       		moveq	#-$10,d4
00006F46 7AF0                       		moveq	#-$10,d5
00006F48 6100 0000                  		bsr.w	sub_6C20
00006F4C 78F0                       		moveq	#-$10,d4
00006F4E 7AF0                       		moveq	#-$10,d5
00006F50 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006F54 322B 0004                  		move.w	4(a3),d1
00006F58 0241 FFF0                  		andi.w	#-$10,d1
00006F5C 9C41                       		sub.w	d1,d6
00006F5E 6D00                       		blt.s	loc_69BE
00006F60 E84E                       		lsr.w	#4,d6
00006F62 0C46 000F                  		cmpi.w	#$F,d6
00006F66 6500                       		bcs.s	loc_69BA
00006F68 7C0F                       		moveq	#$F,d6
00006F6A                            
00006F6A                            loc_69BA:
00006F6A 6100 0000                  		bsr.w	sub_6B06
00006F6E                            
00006F6E                            loc_69BE:
00006F6E 0892 0003                  		bclr	#3,(a2)
00006F72 6700                       		beq.s	locret_69F2
00006F74 78F0                       		moveq	#-$10,d4
00006F76 3A3C 0140                  		move.w	#$140,d5
00006F7A 6100 0000                  		bsr.w	sub_6C20
00006F7E 78F0                       		moveq	#-$10,d4
00006F80 3A3C 0140                  		move.w	#$140,d5
00006F84 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006F88 322B 0004                  		move.w	4(a3),d1
00006F8C 0241 FFF0                  		andi.w	#-$10,d1
00006F90 9C41                       		sub.w	d1,d6
00006F92 6D00                       		blt.s	locret_69F2
00006F94 E84E                       		lsr.w	#4,d6
00006F96 0C46 000F                  		cmpi.w	#$F,d6
00006F9A 6500                       		bcs.s	loc_69EE
00006F9C 7C0F                       		moveq	#$F,d6
00006F9E                            
00006F9E                            loc_69EE:
00006F9E 6100 0000                  		bsr.w	sub_6B06
00006FA2                            
00006FA2                            locret_69F2:
00006FA2 4E75                       		rts	
00006FA4                            ; End of function sub_6954
00006FA4                            
00006FA4                            
00006FA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FA4                            
00006FA4                            
00006FA4                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006FA4 4A12                       		tst.b	(a2)
00006FA6 6700 0000                  		beq.w	locret_6A80
00006FAA 0892 0002                  		bclr	#2,(a2)
00006FAE 6700                       		beq.s	loc_6A3E
00006FB0 0C53 0010                  		cmpi.w	#$10,(a3)
00006FB4 6500                       		bcs.s	loc_6A3E
00006FB6 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006FBA 322B 0004                  		move.w	4(a3),d1
00006FBE 0241 FFF0                  		andi.w	#-$10,d1
00006FC2 9841                       		sub.w	d1,d4
00006FC4 3F04                       		move.w	d4,-(sp)
00006FC6 7AF0                       		moveq	#-$10,d5
00006FC8 6100 0000                  		bsr.w	sub_6C20
00006FCC 381F                       		move.w	(sp)+,d4
00006FCE 7AF0                       		moveq	#-$10,d5
00006FD0 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006FD4 322B 0004                  		move.w	4(a3),d1
00006FD8 0241 FFF0                  		andi.w	#-$10,d1
00006FDC 9C41                       		sub.w	d1,d6
00006FDE 6D00                       		blt.s	loc_6A3E
00006FE0 E84E                       		lsr.w	#4,d6
00006FE2 0446 000E                  		subi.w	#$E,d6
00006FE6 6400                       		bcc.s	loc_6A3E
00006FE8 4446                       		neg.w	d6
00006FEA 6100 0000                  		bsr.w	sub_6B06
00006FEE                            
00006FEE                            loc_6A3E:
00006FEE 0892 0003                  		bclr	#3,(a2)
00006FF2 6700                       		beq.s	locret_6A80
00006FF4 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006FF8 322B 0004                  		move.w	4(a3),d1
00006FFC 0241 FFF0                  		andi.w	#-$10,d1
00007000 9841                       		sub.w	d1,d4
00007002 3F04                       		move.w	d4,-(sp)
00007004 3A3C 0140                  		move.w	#$140,d5
00007008 6100 0000                  		bsr.w	sub_6C20
0000700C 381F                       		move.w	(sp)+,d4
0000700E 3A3C 0140                  		move.w	#$140,d5
00007012 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007016 322B 0004                  		move.w	4(a3),d1
0000701A 0241 FFF0                  		andi.w	#-$10,d1
0000701E 9C41                       		sub.w	d1,d6
00007020 6D00                       		blt.s	locret_6A80
00007022 E84E                       		lsr.w	#4,d6
00007024 0446 000E                  		subi.w	#$E,d6
00007028 6400                       		bcc.s	locret_6A80
0000702A 4446                       		neg.w	d6
0000702C 6100 0000                  		bsr.w	sub_6B06
00007030                            
00007030                            locret_6A80:
00007030 4E75                       		rts	
00007032                            ; End of function sub_69F4
00007032                            
00007032                            ; ===========================================================================
00007032 4A12                       		tst.b	(a2)
00007034 6700                       		beq.s	locret_6AD6
00007036 0892 0002                  		bclr	#2,(a2)
0000703A 6700                       		beq.s	loc_6AAC
0000703C 383C 00D0                  		move.w	#$D0,d4
00007040 322B 0004                  		move.w	4(a3),d1
00007044 0241 FFF0                  		andi.w	#-$10,d1
00007048 9841                       		sub.w	d1,d4
0000704A 3F04                       		move.w	d4,-(sp)
0000704C 7AF0                       		moveq	#-$10,d5
0000704E 6100 0000                  		bsr.w	sub_6C3C
00007052 381F                       		move.w	(sp)+,d4
00007054 7AF0                       		moveq	#-$10,d5
00007056 7C02                       		moveq	#2,d6
00007058 6100 0000                  		bsr.w	sub_6B06
0000705C                            
0000705C                            loc_6AAC:
0000705C 0892 0003                  		bclr	#3,(a2)
00007060 6700                       		beq.s	locret_6AD6
00007062 383C 00D0                  		move.w	#$D0,d4
00007066 322B 0004                  		move.w	4(a3),d1
0000706A 0241 FFF0                  		andi.w	#-$10,d1
0000706E 9841                       		sub.w	d1,d4
00007070 3F04                       		move.w	d4,-(sp)
00007072 3A3C 0140                  		move.w	#$140,d5
00007076 6100 0000                  		bsr.w	sub_6C3C
0000707A 381F                       		move.w	(sp)+,d4
0000707C 3A3C 0140                  		move.w	#$140,d5
00007080 7C02                       		moveq	#2,d6
00007082 6100 0000                  		bsr.w	sub_6B06
00007086                            
00007086                            locret_6AD6:
00007086 4E75                       		rts	
00007088                            
00007088                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007088                            
00007088                            
00007088                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00007088 7C15                       		moveq	#$15,d6
0000708A                            ; End of function sub_6AD8
0000708A                            
0000708A                            
0000708A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000708A                            
0000708A                            
0000708A                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
0000708A 2E3C 0080 0000             		move.l	#$800000,d7
00007090 2200                       		move.l	d0,d1
00007092                            
00007092                            loc_6AE2:
00007092 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007096 6100 0000                  		bsr.w	sub_6BD6
0000709A 2001                       		move.l	d1,d0
0000709C 6100 0000                  		bsr.w	sub_6B32
000070A0 5801                       		addq.b	#4,d1
000070A2 0201 007F                  		andi.b	#$7F,d1
000070A6 4CDF 0030                  		movem.l	(sp)+,d4-d5
000070AA 0645 0010                  		addi.w	#$10,d5
000070AE 51CE FFE2                  		dbf	d6,loc_6AE2
000070B2 4E75                       		rts	
000070B4                            ; End of function sub_6ADA
000070B4                            
000070B4                            
000070B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070B4                            
000070B4                            
000070B4                            sub_6B04:				; XREF: LoadTilesAsYouMove
000070B4 7C0F                       		moveq	#$F,d6
000070B6                            ; End of function sub_6B04
000070B6                            
000070B6                            
000070B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070B6                            
000070B6                            
000070B6                            sub_6B06:				; XREF: sub_6954
000070B6 2E3C 0080 0000             		move.l	#$800000,d7
000070BC 2200                       		move.l	d0,d1
000070BE                            
000070BE                            loc_6B0E:
000070BE 48E7 0C00                  		movem.l	d4-d5,-(sp)
000070C2 6100 0000                  		bsr.w	sub_6BD6
000070C6 2001                       		move.l	d1,d0
000070C8 6100 0000                  		bsr.w	sub_6B32
000070CC 0641 0100                  		addi.w	#$100,d1
000070D0 0241 0FFF                  		andi.w	#$FFF,d1
000070D4 4CDF 0030                  		movem.l	(sp)+,d4-d5
000070D8 0644 0010                  		addi.w	#$10,d4
000070DC 51CE FFE0                  		dbf	d6,loc_6B0E
000070E0 4E75                       		rts	
000070E2                            ; End of function sub_6B06
000070E2                            
000070E2                            
000070E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070E2                            
000070E2                            
000070E2                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
000070E2 8042                       		or.w	d2,d0
000070E4 4840                       		swap	d0
000070E6 0810 0004                  		btst	#4,(a0)
000070EA 6600                       		bne.s	loc_6B6E
000070EC 0810 0003                  		btst	#3,(a0)
000070F0 6600                       		bne.s	loc_6B4E
000070F2 2A80                       		move.l	d0,(a5)
000070F4 2C99                       		move.l	(a1)+,(a6)
000070F6 D087                       		add.l	d7,d0
000070F8 2A80                       		move.l	d0,(a5)
000070FA 2C99                       		move.l	(a1)+,(a6)
000070FC 4E75                       		rts	
000070FE                            ; ===========================================================================
000070FE                            
000070FE                            loc_6B4E:
000070FE 2A80                       		move.l	d0,(a5)
00007100 2819                       		move.l	(a1)+,d4
00007102 0A84 0800 0800             		eori.l	#$8000800,d4
00007108 4844                       		swap	d4
0000710A 2C84                       		move.l	d4,(a6)
0000710C D087                       		add.l	d7,d0
0000710E 2A80                       		move.l	d0,(a5)
00007110 2819                       		move.l	(a1)+,d4
00007112 0A84 0800 0800             		eori.l	#$8000800,d4
00007118 4844                       		swap	d4
0000711A 2C84                       		move.l	d4,(a6)
0000711C 4E75                       		rts	
0000711E                            ; ===========================================================================
0000711E                            
0000711E                            loc_6B6E:
0000711E 0810 0003                  		btst	#3,(a0)
00007122 6600                       		bne.s	loc_6B90
00007124 2A80                       		move.l	d0,(a5)
00007126 2A19                       		move.l	(a1)+,d5
00007128 2819                       		move.l	(a1)+,d4
0000712A 0A84 1000 1000             		eori.l	#$10001000,d4
00007130 2C84                       		move.l	d4,(a6)
00007132 D087                       		add.l	d7,d0
00007134 2A80                       		move.l	d0,(a5)
00007136 0A85 1000 1000             		eori.l	#$10001000,d5
0000713C 2C85                       		move.l	d5,(a6)
0000713E 4E75                       		rts	
00007140                            ; ===========================================================================
00007140                            
00007140                            loc_6B90:
00007140 2A80                       		move.l	d0,(a5)
00007142 2A19                       		move.l	(a1)+,d5
00007144 2819                       		move.l	(a1)+,d4
00007146 0A84 1800 1800             		eori.l	#$18001800,d4
0000714C 4844                       		swap	d4
0000714E 2C84                       		move.l	d4,(a6)
00007150 D087                       		add.l	d7,d0
00007152 2A80                       		move.l	d0,(a5)
00007154 0A85 1800 1800             		eori.l	#$18001800,d5
0000715A 4845                       		swap	d5
0000715C 2C85                       		move.l	d5,(a6)
0000715E 4E75                       		rts	
00007160                            ; End of function sub_6B32
00007160                            
00007160                            ; ===========================================================================
00007160 4E75                       		rts	
00007162                            ; ===========================================================================
00007162 2A80                       		move.l	d0,(a5)
00007164 3A3C 2000                  		move.w	#$2000,d5
00007168 3819                       		move.w	(a1)+,d4
0000716A D845                       		add.w	d5,d4
0000716C 3C84                       		move.w	d4,(a6)
0000716E 3819                       		move.w	(a1)+,d4
00007170 D845                       		add.w	d5,d4
00007172 3C84                       		move.w	d4,(a6)
00007174 D087                       		add.l	d7,d0
00007176 2A80                       		move.l	d0,(a5)
00007178 3819                       		move.w	(a1)+,d4
0000717A D845                       		add.w	d5,d4
0000717C 3C84                       		move.w	d4,(a6)
0000717E 3819                       		move.w	(a1)+,d4
00007180 D845                       		add.w	d5,d4
00007182 3C84                       		move.w	d4,(a6)
00007184 4E75                       		rts	
00007186                            
00007186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007186                            
00007186                            
00007186                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007186 43F8 B000                  		lea	($FFFFB000).w,a1
0000718A D86B 0004                  		add.w	4(a3),d4
0000718E DA53                       		add.w	(a3),d5
00007190 3604                       		move.w	d4,d3
00007192 E24B                       		lsr.w	#1,d3
00007194 0243 0380                  		andi.w	#$380,d3
00007198 E64D                       		lsr.w	#3,d5
0000719A 3005                       		move.w	d5,d0
0000719C EA48                       		lsr.w	#5,d0
0000719E 0240 007F                  		andi.w	#$7F,d0
000071A2 D043                       		add.w	d3,d0
000071A4 76FF                       		moveq	#-1,d3
000071A6 1634 0000                  		move.b	(a4,d0.w),d3
000071AA 6700                       		beq.s	locret_6C1E
000071AC 5303                       		subq.b	#1,d3
000071AE 0243 007F                  		andi.w	#$7F,d3
000071B2 EE5B                       		ror.w	#7,d3
000071B4 D844                       		add.w	d4,d4
000071B6 0244 01E0                  		andi.w	#$1E0,d4
000071BA 0245 001E                  		andi.w	#$1E,d5
000071BE D644                       		add.w	d4,d3
000071C0 D645                       		add.w	d5,d3
000071C2 2043                       		movea.l	d3,a0
000071C4 3610                       		move.w	(a0),d3
000071C6 0243 03FF                  		andi.w	#$3FF,d3
000071CA E74B                       		lsl.w	#3,d3
000071CC D2C3                       		adda.w	d3,a1
000071CE                            
000071CE                            locret_6C1E:
000071CE 4E75                       		rts	
000071D0                            ; End of function sub_6BD6
000071D0                            
000071D0                            
000071D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071D0                            
000071D0                            
000071D0                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
000071D0 D86B 0004                  		add.w	4(a3),d4
000071D4 DA53                       		add.w	(a3),d5
000071D6 0244 00F0                  		andi.w	#$F0,d4
000071DA 0245 01F0                  		andi.w	#$1F0,d5
000071DE E94C                       		lsl.w	#4,d4
000071E0 E44D                       		lsr.w	#2,d5
000071E2 D845                       		add.w	d5,d4
000071E4 7003                       		moveq	#3,d0
000071E6 4840                       		swap	d0
000071E8 3004                       		move.w	d4,d0
000071EA 4E75                       		rts	
000071EC                            ; End of function sub_6C20
000071EC                            
000071EC                            
000071EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071EC                            ; not used
000071EC                            
000071EC                            
000071EC                            sub_6C3C:
000071EC D86B 0004                  		add.w	4(a3),d4
000071F0 DA53                       		add.w	(a3),d5
000071F2 0244 00F0                  		andi.w	#$F0,d4
000071F6 0245 01F0                  		andi.w	#$1F0,d5
000071FA E94C                       		lsl.w	#4,d4
000071FC E44D                       		lsr.w	#2,d5
000071FE D845                       		add.w	d5,d4
00007200 7002                       		moveq	#2,d0
00007202 4840                       		swap	d0
00007204 3004                       		move.w	d4,d0
00007206 4E75                       		rts	
00007208                            ; End of function sub_6C3C
00007208                            
00007208                            ; ---------------------------------------------------------------------------
00007208                            ; Subroutine to	load tiles as soon as the level	appears
00007208                            ; ---------------------------------------------------------------------------
00007208                            
00007208                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007208                            
00007208                            
00007208                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00007208 4BF9 00C0 0004             		lea	($C00004).l,a5
0000720E 4DF9 00C0 0000             		lea	($C00000).l,a6
00007214 47F8 F700                  		lea	($FFFFF700).w,a3
00007218 49F8 A400                  		lea	($FFFFA400).w,a4
0000721C 343C 4000                  		move.w	#$4000,d2
00007220 6100                       		bsr.s	LoadTilesFromStart2
00007222 47F8 F708                  		lea	($FFFFF708).w,a3
00007226 49F8 A440                  		lea	($FFFFA440).w,a4
0000722A 343C 6000                  		move.w	#$6000,d2
0000722E                            ; End of function LoadTilesFromStart
0000722E                            
0000722E                            
0000722E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000722E                            
0000722E                            
0000722E                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
0000722E 78F0                       		moveq	#-$10,d4
00007230 7C0F                       		moveq	#$F,d6
00007232                            
00007232                            loc_6C82:
00007232 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007236 7A00                       		moveq	#0,d5
00007238 3204                       		move.w	d4,d1
0000723A 6100 FF94                  		bsr.w	sub_6C20
0000723E 3801                       		move.w	d1,d4
00007240 7A00                       		moveq	#0,d5
00007242 7C1F                       		moveq	#$1F,d6
00007244 6100 FE44                  		bsr.w	sub_6ADA
00007248 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000724C 0644 0010                  		addi.w	#$10,d4
00007250 51CE FFE0                  		dbf	d6,loc_6C82
00007254 4E75                       		rts	
00007256                            ; End of function LoadTilesFromStart2
00007256                            
00007256                            ; ---------------------------------------------------------------------------
00007256                            ; Main Load Block loading subroutine
00007256                            ; ---------------------------------------------------------------------------
00007256                            
00007256                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007256                            
00007256                            
00007256                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007256 7000                       		moveq	#0,d0
00007258 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000725C E948                       		lsl.w	#4,d0
0000725E 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007264 45F2 0000                  		lea	(a2,d0.w),a2
00007268 2F0A                       		move.l	a2,-(sp)
0000726A 588A                       		addq.l	#4,a2
0000726C 205A                       		movea.l	(a2)+,a0
0000726E 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007272 303C 0000                  		move.w	#0,d0
00007276 6100 A6CA                  		bsr.w	EniDec
0000727A 205A                       		movea.l	(a2)+,a0
0000727C 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007282 6100 A83C                  		bsr.w	KosDec
00007286 6100 0000                  		bsr.w	LevelLayoutLoad
0000728A 301A                       		move.w	(a2)+,d0
0000728C 3012                       		move.w	(a2),d0
0000728E 0240 00FF                  		andi.w	#$FF,d0
00007292 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007298 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
0000729A 700C                       		moveq	#$C,d0		; use SB3 pallet
0000729C                            
0000729C                            MLB_ChkSBZPal:
0000729C 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
000072A2 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
000072A4 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000072AA 6600                       		bne.s	MLB_NormalPal	; if not, branch
000072AC                            
000072AC                            MLB_UsePal0E:
000072AC 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
000072AE                            
000072AE                            MLB_NormalPal:
000072AE 6100 B036                  		bsr.w	PalLoad1	; load pallet (based on	d0)
000072B2 245F                       		movea.l	(sp)+,a2
000072B4 584A                       		addq.w	#4,a2
000072B6 7000                       		moveq	#0,d0
000072B8 1012                       		move.b	(a2),d0
000072BA 6700                       		beq.s	locret_6D10
000072BC 6100 A4E6                  		bsr.w	LoadPLC		; load pattern load cues
000072C0                            
000072C0                            locret_6D10:
000072C0 4E75                       		rts	
000072C2                            ; End of function MainLoadBlockLoad
000072C2                            
000072C2                            ; ---------------------------------------------------------------------------
000072C2                            ; Level	layout loading subroutine
000072C2                            ; ---------------------------------------------------------------------------
000072C2                            
000072C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072C2                            
000072C2                            
000072C2                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
000072C2 47F8 A400                  		lea	($FFFFA400).w,a3
000072C6 323C 01FF                  		move.w	#$1FF,d1
000072CA 7000                       		moveq	#0,d0
000072CC                            
000072CC                            LevLoad_ClrRam:
000072CC 26C0                       		move.l	d0,(a3)+
000072CE 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
000072D2                            
000072D2 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
000072D6 7200                       		moveq	#0,d1
000072D8 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
000072DC 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
000072E0 7202                       		moveq	#2,d1
000072E2                            ; End of function LevelLayoutLoad
000072E2                            
000072E2                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
000072E2                            
000072E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072E2                            
000072E2                            
000072E2                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
000072E2 3038 FE10                  		move.w	($FFFFFE10).w,d0
000072E6 ED08                       		lsl.b	#6,d0
000072E8 EA48                       		lsr.w	#5,d0
000072EA 3400                       		move.w	d0,d2
000072EC D040                       		add.w	d0,d0
000072EE D042                       		add.w	d2,d0
000072F0 D041                       		add.w	d1,d0
000072F2 43F9 0000 0000             		lea	(Level_Index).l,a1
000072F8 3031 0000                  		move.w	(a1,d0.w),d0
000072FC 43F1 0000                  		lea	(a1,d0.w),a1
00007300 7200                       		moveq	#0,d1
00007302 3401                       		move.w	d1,d2
00007304 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007306 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007308                            
00007308                            LevLoad_NumRows:
00007308 3001                       		move.w	d1,d0
0000730A 204B                       		movea.l	a3,a0
0000730C                            
0000730C                            LevLoad_Row:
0000730C 10D9                       		move.b	(a1)+,(a0)+
0000730E 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007312 47EB 0080                  		lea	$80(a3),a3	; do next row
00007316 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
0000731A 4E75                       		rts	
0000731C                            ; End of function LevelLayoutLoad2
0000731C                            
0000731C                            ; ---------------------------------------------------------------------------
0000731C                            ; Dynamic screen resize	loading	subroutine
0000731C                            ; ---------------------------------------------------------------------------
0000731C                            
0000731C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000731C                            
0000731C                            
0000731C                            DynScrResizeLoad:			; XREF: DeformBgLayer
0000731C 7000                       		moveq	#0,d0
0000731E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007322 D040                       		add.w	d0,d0
00007324 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007328 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
0000732C 7202                       		moveq	#2,d1
0000732E 3038 F726                  		move.w	($FFFFF726).w,d0
00007332 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007336 6700                       		beq.s	locret_6DAA
00007338 6400                       		bcc.s	loc_6DAC
0000733A 4441                       		neg.w	d1
0000733C 3038 F704                  		move.w	($FFFFF704).w,d0
00007340 B078 F726                  		cmp.w	($FFFFF726).w,d0
00007344 6300                       		bls.s	loc_6DA0
00007346 31C0 F72E                  		move.w	d0,($FFFFF72E).w
0000734A 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007350                            
00007350                            loc_6DA0:
00007350 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007354 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000735A                            
0000735A                            locret_6DAA:
0000735A 4E75                       		rts	
0000735C                            ; ===========================================================================
0000735C                            
0000735C                            loc_6DAC:				; XREF: DynScrResizeLoad
0000735C 3038 F704                  		move.w	($FFFFF704).w,d0
00007360 5040                       		addq.w	#8,d0
00007362 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007366 6500                       		bcs.s	loc_6DC4
00007368 0838 0001 D022             		btst	#1,($FFFFD022).w
0000736E 6700                       		beq.s	loc_6DC4
00007370 D241                       		add.w	d1,d1
00007372 D241                       		add.w	d1,d1
00007374                            
00007374                            loc_6DC4:
00007374 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007378 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000737E 4E75                       		rts	
00007380                            ; End of function DynScrResizeLoad
00007380                            
00007380                            ; ===========================================================================
00007380                            ; ---------------------------------------------------------------------------
00007380                            ; Offset index for dynamic screen resizing
00007380                            ; ---------------------------------------------------------------------------
00007380 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007384 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007388 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
0000738C 0000                       		dc.w Resize_Ending-Resize_Index
0000738E                            ; ===========================================================================
0000738E                            ; ---------------------------------------------------------------------------
0000738E                            ; Green	Hill Zone dynamic screen resizing
0000738E                            ; ---------------------------------------------------------------------------
0000738E                            
0000738E                            Resize_GHZ:				; XREF: Resize_Index
0000738E 7000                       		moveq	#0,d0
00007390 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007394 D040                       		add.w	d0,d0
00007396 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
0000739A 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
0000739E                            ; ===========================================================================
0000739E 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
000073A0 0000                       		dc.w Resize_GHZ2-Resize_GHZx
000073A2 0000                       		dc.w Resize_GHZ3-Resize_GHZx
000073A4                            ; ===========================================================================
000073A4                            
000073A4                            Resize_GHZ1:
000073A4 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
000073AA 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
000073B0 6500                       		bcs.s	locret_6E08	; if not, branch
000073B2 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
000073B8                            
000073B8                            locret_6E08:
000073B8 4E75                       		rts	
000073BA                            ; ===========================================================================
000073BA                            
000073BA                            Resize_GHZ2:
000073BA 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000073C0 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
000073C6 6500                       		bcs.s	locret_6E3A
000073C8 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000073CE 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
000073D4 6500                       		bcs.s	locret_6E3A
000073D6 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000073DC 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
000073E2 6500                       		bcs.s	locret_6E3A
000073E4 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000073EA                            
000073EA                            locret_6E3A:
000073EA 4E75                       		rts	
000073EC                            ; ===========================================================================
000073EC                            
000073EC                            Resize_GHZ3:
000073EC 7000                       		moveq	#0,d0
000073EE 1038 F742                  		move.b	($FFFFF742).w,d0
000073F2 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000073F6 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000073FA                            ; ===========================================================================
000073FA 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
000073FC 0000                       		dc.w Resize_GHZ3boss-off_6E4A
000073FE 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007400                            ; ===========================================================================
00007400                            
00007400                            Resize_GHZ3main:
00007400 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007406 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
0000740C 6500                       		bcs.s	locret_6E96
0000740E 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007414 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000741A 6500                       		bcs.s	locret_6E96
0000741C 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007422 6500                       		bcs.s	loc_6E98
00007424 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000742A 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007430 6400                       		bcc.s	loc_6E8E
00007432 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00007438 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
0000743E                            
0000743E                            loc_6E8E:
0000743E 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007444 6400                       		bcc.s	loc_6E98
00007446                            
00007446                            locret_6E96:
00007446 4E75                       		rts	
00007448                            ; ===========================================================================
00007448                            
00007448                            loc_6E98:
00007448 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000744E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007452 4E75                       		rts	
00007454                            ; ===========================================================================
00007454                            
00007454                            Resize_GHZ3boss:
00007454 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000745A 6400                       		bcc.s	loc_6EB0
0000745C 5538 F742                  		subq.b	#2,($FFFFF742).w
00007460                            
00007460                            loc_6EB0:
00007460 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007466 6500                       		bcs.s	locret_6EE8
00007468 6100 0000                  		bsr.w	SingleObjLoad
0000746C 6600                       		bne.s	loc_6ED0
0000746E 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007472 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007478 337C 0280 000C             		move.w	#$280,$C(a1)
0000747E                            
0000747E                            loc_6ED0:
0000747E 303C 008C                  		move.w	#$8C,d0
00007482 6100 A136                  		bsr.w	PlaySound	; play boss music
00007486 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000748C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007490 7011                       		moveq	#$11,d0
00007492 6000 A310                  		bra.w	LoadPLC		; load boss patterns
00007496                            ; ===========================================================================
00007496                            
00007496                            locret_6EE8:
00007496 4E75                       		rts	
00007498                            ; ===========================================================================
00007498                            
00007498                            Resize_GHZ3end:
00007498 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000749E 4E75                       		rts	
000074A0                            ; ===========================================================================
000074A0                            ; ---------------------------------------------------------------------------
000074A0                            ; Labyrinth Zone dynamic screen	resizing
000074A0                            ; ---------------------------------------------------------------------------
000074A0                            
000074A0                            Resize_LZ:				; XREF: Resize_Index
000074A0 7000                       		moveq	#0,d0
000074A2 1038 FE11                  		move.b	($FFFFFE11).w,d0
000074A6 D040                       		add.w	d0,d0
000074A8 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
000074AC 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
000074B0                            ; ===========================================================================
000074B0 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
000074B2 0000                       		dc.w Resize_LZ12-Resize_LZx
000074B4 0000                       		dc.w Resize_LZ3-Resize_LZx
000074B6 0000                       		dc.w Resize_SBZ3-Resize_LZx
000074B8                            ; ===========================================================================
000074B8                            
000074B8                            Resize_LZ12:
000074B8 4E75                       		rts	
000074BA                            ; ===========================================================================
000074BA                            
000074BA                            Resize_LZ3:
000074BA 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
000074BE 6700                       		beq.s	loc_6F28	; if not, branch
000074C0 43F8 A506                  		lea	($FFFFA506).w,a1
000074C4 0C11 0007                  		cmpi.b	#7,(a1)
000074C8 6700                       		beq.s	loc_6F28
000074CA 12BC 0007                  		move.b	#7,(a1)		; modify level layout
000074CE 303C 00B7                  		move.w	#$B7,d0
000074D2 6100 A0EC                  		bsr.w	PlaySound_Special ; play rumbling sound
000074D6                            
000074D6                            loc_6F28:
000074D6 4A38 F742                  		tst.b	($FFFFF742).w
000074DA 6600                       		bne.s	locret_6F64
000074DC 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
000074E2 6500                       		bcs.s	locret_6F62
000074E4 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
000074EA 6400                       		bcc.s	locret_6F62
000074EC 6100 0000                  		bsr.w	SingleObjLoad
000074F0 6600                       		bne.s	loc_6F4A
000074F2 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
000074F6                            
000074F6                            loc_6F4A:
000074F6 303C 008C                  		move.w	#$8C,d0
000074FA 6100 A0BE                  		bsr.w	PlaySound	; play boss music
000074FE 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007504 5438 F742                  		addq.b	#2,($FFFFF742).w
00007508 7011                       		moveq	#$11,d0
0000750A 6000 A298                  		bra.w	LoadPLC		; load boss patterns
0000750E                            ; ===========================================================================
0000750E                            
0000750E                            locret_6F62:
0000750E 4E75                       		rts	
00007510                            ; ===========================================================================
00007510                            
00007510                            locret_6F64:
00007510 4E75                       		rts	
00007512                            ; ===========================================================================
00007512                            
00007512                            Resize_SBZ3:
00007512 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007518 6500                       		bcs.s	locret_6F8C
0000751A 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00007520 6400                       		bcc.s	locret_6F8C	; if not, branch
00007522 4238 FE30                  		clr.b	($FFFFFE30).w
00007526 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000752C 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007532 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007538                            
00007538                            locret_6F8C:
00007538 4E75                       		rts	
0000753A                            ; ===========================================================================
0000753A                            ; ---------------------------------------------------------------------------
0000753A                            ; Marble Zone dynamic screen resizing
0000753A                            ; ---------------------------------------------------------------------------
0000753A                            
0000753A                            Resize_MZ:				; XREF: Resize_Index
0000753A 7000                       		moveq	#0,d0
0000753C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007540 D040                       		add.w	d0,d0
00007542 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00007546 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
0000754A                            ; ===========================================================================
0000754A 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
0000754C 0000                       		dc.w Resize_MZ2-Resize_MZx
0000754E 0000                       		dc.w Resize_MZ3-Resize_MZx
00007550                            ; ===========================================================================
00007550                            
00007550                            Resize_MZ1:
00007550 7000                       		moveq	#0,d0
00007552 1038 F742                  		move.b	($FFFFF742).w,d0
00007556 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
0000755A 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
0000755E                            ; ===========================================================================
0000755E 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007560 0000                       		dc.w loc_6FEA-off_6FB2
00007562 0000                       		dc.w loc_702E-off_6FB2
00007564 0000                       		dc.w loc_7050-off_6FB2
00007566                            ; ===========================================================================
00007566                            
00007566                            loc_6FBA:
00007566 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
0000756C 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007572 6500                       		bcs.s	locret_6FE8
00007574 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
0000757A 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007580 6500                       		bcs.s	locret_6FE8
00007582 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007588 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000758E 6500                       		bcs.s	locret_6FE8
00007590 5438 F742                  		addq.b	#2,($FFFFF742).w
00007594                            
00007594                            locret_6FE8:
00007594 4E75                       		rts	
00007596                            ; ===========================================================================
00007596                            
00007596                            loc_6FEA:
00007596 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000759C 6400                       		bcc.s	loc_6FF8
0000759E 5538 F742                  		subq.b	#2,($FFFFF742).w
000075A2 4E75                       		rts	
000075A4                            ; ===========================================================================
000075A4                            
000075A4                            loc_6FF8:
000075A4 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000075AA 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
000075B0 6400                       		bcc.s	locret_702C
000075B2 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
000075B8 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000075BE 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
000075C4 6400                       		bcc.s	locret_702C
000075C6 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000075CC 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000075D2 6500                       		bcs.s	locret_702C
000075D4 5438 F742                  		addq.b	#2,($FFFFF742).w
000075D8                            
000075D8                            locret_702C:
000075D8 4E75                       		rts	
000075DA                            ; ===========================================================================
000075DA                            
000075DA                            loc_702E:
000075DA 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
000075E0 6400                       		bcc.s	loc_703C
000075E2 5538 F742                  		subq.b	#2,($FFFFF742).w
000075E6 4E75                       		rts	
000075E8                            ; ===========================================================================
000075E8                            
000075E8                            loc_703C:
000075E8 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
000075EE 6500                       		bcs.s	locret_704E
000075F0 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
000075F6 5438 F742                  		addq.b	#2,($FFFFF742).w
000075FA                            
000075FA                            locret_704E:
000075FA 4E75                       		rts	
000075FC                            ; ===========================================================================
000075FC                            
000075FC                            loc_7050:
000075FC 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007602 6500                       		bcs.s	locret_7072
00007604 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000760A 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007610 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007616 6500                       		bcs.s	locret_7072
00007618 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000761E                            
0000761E                            locret_7072:
0000761E 4E75                       		rts	
00007620                            ; ===========================================================================
00007620                            
00007620                            Resize_MZ2:
00007620 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007626 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000762C 6500                       		bcs.s	locret_7088
0000762E 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007634                            
00007634                            locret_7088:
00007634 4E75                       		rts	
00007636                            ; ===========================================================================
00007636                            
00007636                            Resize_MZ3:
00007636 7000                       		moveq	#0,d0
00007638 1038 F742                  		move.b	($FFFFF742).w,d0
0000763C 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007640 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007644                            ; ===========================================================================
00007644 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007646 0000                       		dc.w Resize_MZ3end-off_7098
00007648                            ; ===========================================================================
00007648                            
00007648                            Resize_MZ3boss:
00007648 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000764E 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007654 6500                       		bcs.s	locret_70E8
00007656 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000765C 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00007662 6500                       		bcs.s	locret_70E8
00007664 6100 0000                  		bsr.w	SingleObjLoad
00007668 6600                       		bne.s	loc_70D0
0000766A 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
0000766E 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007674 337C 022C 000C             		move.w	#$22C,$C(a1)
0000767A                            
0000767A                            loc_70D0:
0000767A 303C 008C                  		move.w	#$8C,d0
0000767E 6100 9F3A                  		bsr.w	PlaySound	; play boss music
00007682 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007688 5438 F742                  		addq.b	#2,($FFFFF742).w
0000768C 7011                       		moveq	#$11,d0
0000768E 6000 A114                  		bra.w	LoadPLC		; load boss patterns
00007692                            ; ===========================================================================
00007692                            
00007692                            locret_70E8:
00007692 4E75                       		rts	
00007694                            ; ===========================================================================
00007694                            
00007694                            Resize_MZ3end:
00007694 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000769A 4E75                       		rts	
0000769C                            ; ===========================================================================
0000769C                            ; ---------------------------------------------------------------------------
0000769C                            ; Star Light Zone dynamic screen resizing
0000769C                            ; ---------------------------------------------------------------------------
0000769C                            
0000769C                            Resize_SLZ:				; XREF: Resize_Index
0000769C 7000                       		moveq	#0,d0
0000769E 1038 FE11                  		move.b	($FFFFFE11).w,d0
000076A2 D040                       		add.w	d0,d0
000076A4 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
000076A8 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
000076AC                            ; ===========================================================================
000076AC 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
000076AE 0000                       		dc.w Resize_SLZ2-Resize_SLZx
000076B0 0000                       		dc.w Resize_SLZ3-Resize_SLZx
000076B2                            ; ===========================================================================
000076B2                            
000076B2                            Resize_SLZ1:
000076B2 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
000076B8 4E75                       		rts	
000076BA                            
000076BA                            Resize_SLZ2:
000076BA 4E75                       		rts	
000076BC                            ; ===========================================================================
000076BC                            
000076BC                            Resize_SLZ3:
000076BC 7000                       		moveq	#0,d0
000076BE 1038 F742                  		move.b	($FFFFF742).w,d0
000076C2 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000076C6 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000076CA                            ; ===========================================================================
000076CA 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
000076CC 0000                       		dc.w Resize_SLZ3boss-off_7118
000076CE 0000                       		dc.w Resize_SLZ3end-off_7118
000076D0                            ; ===========================================================================
000076D0                            
000076D0                            Resize_SLZ3main:
000076D0 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
000076D6 6500                       		bcs.s	locret_7130
000076D8 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000076DE 5438 F742                  		addq.b	#2,($FFFFF742).w
000076E2                            
000076E2                            locret_7130:
000076E2 4E75                       		rts	
000076E4                            ; ===========================================================================
000076E4                            
000076E4                            Resize_SLZ3boss:
000076E4 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
000076EA 6500                       		bcs.s	locret_715C
000076EC 6100 0000                  		bsr.w	SingleObjLoad
000076F0 6600                       		bne.s	loc_7144
000076F2 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
000076F6                            
000076F6                            loc_7144:
000076F6 303C 008C                  		move.w	#$8C,d0
000076FA 6100 9EBE                  		bsr.w	PlaySound	; play boss music
000076FE 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007704 5438 F742                  		addq.b	#2,($FFFFF742).w
00007708 7011                       		moveq	#$11,d0
0000770A 6000 A098                  		bra.w	LoadPLC		; load boss patterns
0000770E                            ; ===========================================================================
0000770E                            
0000770E                            locret_715C:
0000770E 4E75                       		rts	
00007710                            ; ===========================================================================
00007710                            
00007710                            Resize_SLZ3end:
00007710 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007716 4E75                       		rts
00007718 4E75                       		rts
0000771A                            ; ===========================================================================
0000771A                            ; ---------------------------------------------------------------------------
0000771A                            ; Spring Yard Zone dynamic screen resizing
0000771A                            ; ---------------------------------------------------------------------------
0000771A                            
0000771A                            Resize_SYZ:				; XREF: Resize_Index
0000771A 7000                       		moveq	#0,d0
0000771C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007720 D040                       		add.w	d0,d0
00007722 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007726 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
0000772A                            ; ===========================================================================
0000772A 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
0000772C 0000                       		dc.w Resize_SYZ2-Resize_SYZx
0000772E 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007730                            ; ===========================================================================
00007730                            
00007730                            Resize_SYZ1:
00007730 4E75                       		rts	
00007732                            ; ===========================================================================
00007732                            
00007732                            Resize_SYZ2:
00007732 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007738 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
0000773E 6500                       		bcs.s	locret_71A2
00007740 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00007746 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
0000774C 6500                       		bcs.s	locret_71A2
0000774E 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007754                            
00007754                            locret_71A2:
00007754 4E75                       		rts	
00007756                            ; ===========================================================================
00007756                            
00007756                            Resize_SYZ3:
00007756 7000                       		moveq	#0,d0
00007758 1038 F742                  		move.b	($FFFFF742).w,d0
0000775C 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007760 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007764                            ; ===========================================================================
00007764 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00007766 0000                       		dc.w Resize_SYZ3boss-off_71B2
00007768 0000                       		dc.w Resize_SYZ3end-off_71B2
0000776A                            ; ===========================================================================
0000776A                            
0000776A                            Resize_SYZ3main:
0000776A 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007770 6500                       		bcs.s	locret_71CE
00007772 6100 0000                  		bsr.w	SingleObjLoad
00007776 6600                       		bne.s	locret_71CE
00007778 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
0000777C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007780                            
00007780                            locret_71CE:
00007780 4E75                       		rts	
00007782                            ; ===========================================================================
00007782                            
00007782                            Resize_SYZ3boss:
00007782 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00007788 6500                       		bcs.s	locret_7200
0000778A 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007790 6100 0000                  		bsr.w	SingleObjLoad
00007794 6600                       		bne.s	loc_71EC
00007796 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
0000779A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000779E                            
0000779E                            loc_71EC:
0000779E 303C 008C                  		move.w	#$8C,d0
000077A2 6100 9E16                  		bsr.w	PlaySound	; play boss music
000077A6 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000077AC 7011                       		moveq	#$11,d0
000077AE 6000 9FF4                  		bra.w	LoadPLC		; load boss patterns
000077B2                            ; ===========================================================================
000077B2                            
000077B2                            locret_7200:
000077B2 4E75                       		rts	
000077B4                            ; ===========================================================================
000077B4                            
000077B4                            Resize_SYZ3end:
000077B4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000077BA 4E75                       		rts	
000077BC                            ; ===========================================================================
000077BC                            ; ---------------------------------------------------------------------------
000077BC                            ; Scrap	Brain Zone dynamic screen resizing
000077BC                            ; ---------------------------------------------------------------------------
000077BC                            
000077BC                            Resize_SBZ:				; XREF: Resize_Index
000077BC 7000                       		moveq	#0,d0
000077BE 1038 FE11                  		move.b	($FFFFFE11).w,d0
000077C2 D040                       		add.w	d0,d0
000077C4 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
000077C8 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
000077CC                            ; ===========================================================================
000077CC 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
000077CE 0000                       		dc.w Resize_SBZ2-Resize_SBZx
000077D0 0000                       		dc.w Resize_FZ-Resize_SBZx
000077D2                            ; ===========================================================================
000077D2                            
000077D2                            Resize_SBZ1:
000077D2 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000077D8 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
000077DE 6500                       		bcs.s	locret_7242
000077E0 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
000077E6 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
000077EC 6500                       		bcs.s	locret_7242
000077EE 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
000077F4                            
000077F4                            locret_7242:
000077F4 4E75                       		rts	
000077F6                            ; ===========================================================================
000077F6                            
000077F6                            Resize_SBZ2:
000077F6 7000                       		moveq	#0,d0
000077F8 1038 F742                  		move.b	($FFFFF742).w,d0
000077FC 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007800 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007804                            ; ===========================================================================
00007804 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007806 0000                       		dc.w Resize_SBZ2boss-off_7252
00007808 0000                       		dc.w Resize_SBZ2boss2-off_7252
0000780A 0000                       		dc.w Resize_SBZ2end-off_7252
0000780C                            ; ===========================================================================
0000780C                            
0000780C                            Resize_SBZ2main:
0000780C 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007812 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007818 6500                       		bcs.s	locret_727A
0000781A 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007820 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007826 6500                       		bcs.s	locret_727A
00007828 5438 F742                  		addq.b	#2,($FFFFF742).w
0000782C                            
0000782C                            locret_727A:
0000782C 4E75                       		rts	
0000782E                            ; ===========================================================================
0000782E                            
0000782E                            Resize_SBZ2boss:
0000782E 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007834 6500                       		bcs.s	locret_7298
00007836 6100 0000                  		bsr.w	SingleObjLoad
0000783A 6600                       		bne.s	locret_7298
0000783C 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007840 5438 F742                  		addq.b	#2,($FFFFF742).w
00007844 701E                       		moveq	#$1E,d0
00007846 6000 9F5C                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
0000784A                            ; ===========================================================================
0000784A                            
0000784A                            locret_7298:
0000784A 4E75                       		rts	
0000784C                            ; ===========================================================================
0000784C                            
0000784C                            Resize_SBZ2boss2:
0000784C 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007852 6500                       		bcs.s	loc_72B6
00007854 6100 0000                  		bsr.w	SingleObjLoad
00007858 6600                       		bne.s	loc_72B0
0000785A 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
0000785E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007862                            
00007862                            loc_72B0:
00007862 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007868                            
00007868                            loc_72B6:
00007868 6000                       		bra.s	loc_72C2
0000786A                            ; ===========================================================================
0000786A                            
0000786A                            Resize_SBZ2end:
0000786A 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007870 6500                       		bcs.s	loc_72C2
00007872 4E75                       		rts	
00007874                            ; ===========================================================================
00007874                            
00007874                            loc_72C2:
00007874 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000787A 4E75                       		rts	
0000787C                            ; ===========================================================================
0000787C                            
0000787C                            Resize_FZ:
0000787C 7000                       		moveq	#0,d0
0000787E 1038 F742                  		move.b	($FFFFF742).w,d0
00007882 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007886 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
0000788A                            ; ===========================================================================
0000788A 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
0000788E 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007892 0000                       		dc.w Resize_FZend2-off_72D8
00007894                            ; ===========================================================================
00007894                            
00007894                            Resize_FZmain:
00007894 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
0000789A 6500                       		bcs.s	loc_72F4
0000789C 5438 F742                  		addq.b	#2,($FFFFF742).w
000078A0 701F                       		moveq	#$1F,d0
000078A2 6100 9F00                  		bsr.w	LoadPLC		; load FZ boss patterns
000078A6                            
000078A6                            loc_72F4:
000078A6 60CC                       		bra.s	loc_72C2
000078A8                            ; ===========================================================================
000078A8                            
000078A8                            Resize_FZboss:
000078A8 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
000078AE 6500                       		bcs.s	loc_7312
000078B0 6100 0000                  		bsr.w	SingleObjLoad
000078B4 6600                       		bne.s	loc_7312
000078B6 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
000078BA 5438 F742                  		addq.b	#2,($FFFFF742).w
000078BE 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000078C4                            
000078C4                            loc_7312:
000078C4 60AE                       		bra.s	loc_72C2
000078C6                            ; ===========================================================================
000078C6                            
000078C6                            Resize_FZend:
000078C6 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
000078CC 6500                       		bcs.s	loc_7320
000078CE 5438 F742                  		addq.b	#2,($FFFFF742).w
000078D2                            
000078D2                            loc_7320:
000078D2 60A0                       		bra.s	loc_72C2
000078D4                            ; ===========================================================================
000078D4                            
000078D4                            locret_7322:
000078D4 4E75                       		rts	
000078D6                            ; ===========================================================================
000078D6                            
000078D6                            Resize_FZend2:
000078D6 609C                       		bra.s	loc_72C2
000078D8                            ; ===========================================================================
000078D8                            ; ---------------------------------------------------------------------------
000078D8                            ; Ending sequence dynamic screen resizing (empty)
000078D8                            ; ---------------------------------------------------------------------------
000078D8                            
000078D8                            Resize_Ending:				; XREF: Resize_Index
000078D8 4E75                       		rts	
000078DA                            ; ===========================================================================
000078DA                            ; ---------------------------------------------------------------------------
000078DA                            ; Object 11 - GHZ bridge
000078DA                            ; ---------------------------------------------------------------------------
000078DA                            
000078DA                            Obj11:					; XREF: Obj_Index
000078DA 7000                       		moveq	#0,d0
000078DC 1028 0024                  		move.b	$24(a0),d0
000078E0 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
000078E4 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
000078E8                            ; ===========================================================================
000078E8 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
000078EC 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
000078F0 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
000078F4                            ; ===========================================================================
000078F4                            
000078F4                            Obj11_Main:				; XREF: Obj11_Index
000078F4 5428 0024                  		addq.b	#2,$24(a0)
000078F8 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007900 317C 438E 0002             		move.w	#$438E,2(a0)
00007906 117C 0004 0001             		move.b	#4,1(a0)
0000790C 117C 0003 0018             		move.b	#3,$18(a0)
00007912 117C 0080 0019             		move.b	#$80,$19(a0)
00007918 3428 000C                  		move.w	$C(a0),d2
0000791C 3628 0008                  		move.w	8(a0),d3
00007920 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007922 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007926 7200                       		moveq	#0,d1
00007928 1212                       		move.b	(a2),d1		; copy a2 to d1
0000792A 14FC 0000                  		move.b	#0,(a2)+
0000792E 3001                       		move.w	d1,d0
00007930 E248                       		lsr.w	#1,d0
00007932 E948                       		lsl.w	#4,d0
00007934 9640                       		sub.w	d0,d3
00007936 5501                       		subq.b	#2,d1
00007938 6500                       		bcs.s	Obj11_Action
0000793A                            
0000793A                            Obj11_MakeBdg:
0000793A 6100 0000                  		bsr.w	SingleObjLoad
0000793E 6600                       		bne.s	Obj11_Action
00007940 5228 0028                  		addq.b	#1,$28(a0)
00007944 B668 0008                  		cmp.w	8(a0),d3
00007948 6600                       		bne.s	loc_73B8
0000794A 0643 0010                  		addi.w	#$10,d3
0000794E 3142 000C                  		move.w	d2,$C(a0)
00007952 3142 003C                  		move.w	d2,$3C(a0)
00007956 3A08                       		move.w	a0,d5
00007958 0445 D000                  		subi.w	#-$3000,d5
0000795C EC4D                       		lsr.w	#6,d5
0000795E 0245 007F                  		andi.w	#$7F,d5
00007962 14C5                       		move.b	d5,(a2)+
00007964 5228 0028                  		addq.b	#1,$28(a0)
00007968                            
00007968                            loc_73B8:				; XREF: ROM:00007398j
00007968 3A09                       		move.w	a1,d5
0000796A 0445 D000                  		subi.w	#-$3000,d5
0000796E EC4D                       		lsr.w	#6,d5
00007970 0245 007F                  		andi.w	#$7F,d5
00007974 14C5                       		move.b	d5,(a2)+
00007976 137C 000A 0024             		move.b	#$A,$24(a1)
0000797C 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
0000797E 3342 000C                  		move.w	d2,$C(a1)
00007982 3342 003C                  		move.w	d2,$3C(a1)
00007986 3343 0008                  		move.w	d3,8(a1)
0000798A 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007992 337C 438E 0002             		move.w	#$438E,2(a1)
00007998 137C 0004 0001             		move.b	#4,1(a1)
0000799E 137C 0003 0018             		move.b	#3,$18(a1)
000079A4 137C 0008 0019             		move.b	#8,$19(a1)
000079AA 0643 0010                  		addi.w	#$10,d3
000079AE 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
000079B2                            
000079B2                            Obj11_Action:				; XREF: Obj11_Index
000079B2 6100                       		bsr.s	Obj11_Solid
000079B4 4A28 003E                  		tst.b	$3E(a0)
000079B8 6700                       		beq.s	Obj11_Display
000079BA 5928 003E                  		subq.b	#4,$3E(a0)
000079BE 6100 0000                  		bsr.w	Obj11_Bend
000079C2                            
000079C2                            Obj11_Display:
000079C2 6100 0000                  		bsr.w	DisplaySprite
000079C6 6000 0000                  		bra.w	Obj11_ChkDel
000079CA                            
000079CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079CA                            
000079CA                            
000079CA                            Obj11_Solid:				; XREF: Obj11_Action
000079CA 7200                       		moveq	#0,d1
000079CC 1228 0028                  		move.b	$28(a0),d1
000079D0 E749                       		lsl.w	#3,d1
000079D2 3401                       		move.w	d1,d2
000079D4 5041                       		addq.w	#8,d1
000079D6 D442                       		add.w	d2,d2
000079D8 43F8 D000                  		lea	($FFFFD000).w,a1
000079DC 4A69 0012                  		tst.w	$12(a1)
000079E0 6B00 0000                  		bmi.w	locret_751E
000079E4 3029 0008                  		move.w	8(a1),d0
000079E8 9068 0008                  		sub.w	8(a0),d0
000079EC D041                       		add.w	d1,d0
000079EE 6B00 0000                  		bmi.w	locret_751E
000079F2 B042                       		cmp.w	d2,d0
000079F4 6400 0000                  		bcc.w	locret_751E
000079F8 6000                       		bra.s	Platform2
000079FA                            ; End of function Obj11_Solid
000079FA                            
000079FA                            ; ---------------------------------------------------------------------------
000079FA                            ; Platform subroutine
000079FA                            ; ---------------------------------------------------------------------------
000079FA                            
000079FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079FA                            
000079FA                            
000079FA                            PlatformObject:
000079FA 43F8 D000                  		lea	($FFFFD000).w,a1
000079FE 4A69 0012                  		tst.w	$12(a1)
00007A02 6B00 0000                  		bmi.w	locret_751E
00007A06 3029 0008                  		move.w	8(a1),d0
00007A0A 9068 0008                  		sub.w	8(a0),d0
00007A0E D041                       		add.w	d1,d0
00007A10 6B00 0000                  		bmi.w	locret_751E
00007A14 D241                       		add.w	d1,d1
00007A16 B041                       		cmp.w	d1,d0
00007A18 6400 0000                  		bcc.w	locret_751E
00007A1C                            
00007A1C                            Platform2:
00007A1C 3028 000C                  		move.w	$C(a0),d0
00007A20 5140                       		subq.w	#8,d0
00007A22                            
00007A22                            Platform3:
00007A22 3429 000C                  		move.w	$C(a1),d2
00007A26 1229 0016                  		move.b	$16(a1),d1
00007A2A 4881                       		ext.w	d1
00007A2C D242                       		add.w	d2,d1
00007A2E 5841                       		addq.w	#4,d1
00007A30 9041                       		sub.w	d1,d0
00007A32 6200 0000                  		bhi.w	locret_751E
00007A36 0C40 FFF0                  		cmpi.w	#-$10,d0
00007A3A 6500 0000                  		bcs.w	locret_751E
00007A3E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007A42 6B00 0000                  		bmi.w	locret_751E
00007A46 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007A4C 6400 0000                  		bcc.w	locret_751E
00007A50 D440                       		add.w	d0,d2
00007A52 5642                       		addq.w	#3,d2
00007A54 3342 000C                  		move.w	d2,$C(a1)
00007A58 5428 0024                  		addq.b	#2,$24(a0)
00007A5C                            
00007A5C                            loc_74AE:
00007A5C 0829 0003 0022             		btst	#3,$22(a1)
00007A62 6700                       		beq.s	loc_74DC
00007A64 7000                       		moveq	#0,d0
00007A66 1029 003D                  		move.b	$3D(a1),d0
00007A6A ED48                       		lsl.w	#6,d0
00007A6C 0680 00FF D000             		addi.l	#$FFD000,d0
00007A72 2440                       		movea.l	d0,a2
00007A74 08AA 0003 0022             		bclr	#3,$22(a2)
00007A7A 422A 0025                  		clr.b	$25(a2)
00007A7E 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007A84 6600                       		bne.s	loc_74DC
00007A86 552A 0024                  		subq.b	#2,$24(a2)
00007A8A                            
00007A8A                            loc_74DC:
00007A8A 3008                       		move.w	a0,d0
00007A8C 0440 D000                  		subi.w	#-$3000,d0
00007A90 EC48                       		lsr.w	#6,d0
00007A92 0240 007F                  		andi.w	#$7F,d0
00007A96 1340 003D                  		move.b	d0,$3D(a1)
00007A9A 137C 0000 0026             		move.b	#0,$26(a1)
00007AA0 337C 0000 0012             		move.w	#0,$12(a1)
00007AA6 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007AAC 0829 0001 0022             		btst	#1,$22(a1)
00007AB2 6700                       		beq.s	loc_7512
00007AB4 2F08                       		move.l	a0,-(sp)
00007AB6 2049                       		movea.l	a1,a0
00007AB8 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007ABE 205F                       		movea.l	(sp)+,a0
00007AC0                            
00007AC0                            loc_7512:
00007AC0 08E9 0003 0022             		bset	#3,$22(a1)
00007AC6 08E8 0003 0022             		bset	#3,$22(a0)
00007ACC                            
00007ACC                            locret_751E:
00007ACC 4E75                       		rts	
00007ACE                            ; End of function PlatformObject
00007ACE                            
00007ACE                            ; ---------------------------------------------------------------------------
00007ACE                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007ACE                            ; ---------------------------------------------------------------------------
00007ACE                            
00007ACE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007ACE                            
00007ACE                            
00007ACE                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007ACE 43F8 D000                  		lea	($FFFFD000).w,a1
00007AD2 4A69 0012                  		tst.w	$12(a1)
00007AD6 6B00 FFF4                  		bmi.w	locret_751E
00007ADA 3029 0008                  		move.w	8(a1),d0
00007ADE 9068 0008                  		sub.w	8(a0),d0
00007AE2 D041                       		add.w	d1,d0
00007AE4 6BE6                       		bmi.s	locret_751E
00007AE6 D241                       		add.w	d1,d1
00007AE8 B041                       		cmp.w	d1,d0
00007AEA 64E0                       		bcc.s	locret_751E
00007AEC 0828 0000 0001             		btst	#0,1(a0)
00007AF2 6700                       		beq.s	loc_754A
00007AF4 4640                       		not.w	d0
00007AF6 D041                       		add.w	d1,d0
00007AF8                            
00007AF8                            loc_754A:
00007AF8 E248                       		lsr.w	#1,d0
00007AFA 7600                       		moveq	#0,d3
00007AFC 1632 0000                  		move.b	(a2,d0.w),d3
00007B00 3028 000C                  		move.w	$C(a0),d0
00007B04 9043                       		sub.w	d3,d0
00007B06 6000 FF1A                  		bra.w	Platform3
00007B0A                            ; End of function SlopeObject
00007B0A                            
00007B0A                            
00007B0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B0A                            
00007B0A                            
00007B0A                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007B0A 43F8 D000                  		lea	($FFFFD000).w,a1
00007B0E 4A69 0012                  		tst.w	$12(a1)
00007B12 6B00 FFB8                  		bmi.w	locret_751E
00007B16 3029 0008                  		move.w	8(a1),d0
00007B1A 9068 0008                  		sub.w	8(a0),d0
00007B1E D041                       		add.w	d1,d0
00007B20 6B00 FFAA                  		bmi.w	locret_751E
00007B24 D241                       		add.w	d1,d1
00007B26 B041                       		cmp.w	d1,d0
00007B28 6400 FFA2                  		bcc.w	locret_751E
00007B2C 3028 000C                  		move.w	$C(a0),d0
00007B30 9043                       		sub.w	d3,d0
00007B32 6000 FEEE                  		bra.w	Platform3
00007B36                            ; End of function Obj15_Solid
00007B36                            
00007B36                            ; ===========================================================================
00007B36                            
00007B36                            Obj11_Action2:				; XREF: Obj11_Index
00007B36 6100                       		bsr.s	Obj11_WalkOff
00007B38 6100 0000                  		bsr.w	DisplaySprite
00007B3C 6000 0000                  		bra.w	Obj11_ChkDel
00007B40                            
00007B40                            ; ---------------------------------------------------------------------------
00007B40                            ; Subroutine allowing Sonic to walk off a bridge
00007B40                            ; ---------------------------------------------------------------------------
00007B40                            
00007B40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B40                            
00007B40                            
00007B40                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007B40 7200                       		moveq	#0,d1
00007B42 1228 0028                  		move.b	$28(a0),d1
00007B46 E749                       		lsl.w	#3,d1
00007B48 3401                       		move.w	d1,d2
00007B4A 5041                       		addq.w	#8,d1
00007B4C 6100                       		bsr.s	ExitPlatform2
00007B4E 6400                       		bcc.s	locret_75BE
00007B50 E848                       		lsr.w	#4,d0
00007B52 1140 003F                  		move.b	d0,$3F(a0)
00007B56 1028 003E                  		move.b	$3E(a0),d0
00007B5A 0C00 0040                  		cmpi.b	#$40,d0
00007B5E 6700                       		beq.s	loc_75B6
00007B60 5828 003E                  		addq.b	#4,$3E(a0)
00007B64                            
00007B64                            loc_75B6:
00007B64 6100 0000                  		bsr.w	Obj11_Bend
00007B68 6100 0000                  		bsr.w	Obj11_MoveSonic
00007B6C                            
00007B6C                            locret_75BE:
00007B6C 4E75                       		rts	
00007B6E                            ; End of function Obj11_WalkOff
00007B6E                            
00007B6E                            ; ---------------------------------------------------------------------------
00007B6E                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007B6E                            ; ---------------------------------------------------------------------------
00007B6E                            
00007B6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B6E                            
00007B6E                            
00007B6E                            ExitPlatform:
00007B6E 3401                       		move.w	d1,d2
00007B70                            
00007B70                            ExitPlatform2:
00007B70 D442                       		add.w	d2,d2
00007B72 43F8 D000                  		lea	($FFFFD000).w,a1
00007B76 0829 0001 0022             		btst	#1,$22(a1)
00007B7C 6600                       		bne.s	loc_75E0
00007B7E 3029 0008                  		move.w	8(a1),d0
00007B82 9068 0008                  		sub.w	8(a0),d0
00007B86 D041                       		add.w	d1,d0
00007B88 6B00                       		bmi.s	loc_75E0
00007B8A B042                       		cmp.w	d2,d0
00007B8C 6500                       		bcs.s	locret_75F2
00007B8E                            
00007B8E                            loc_75E0:
00007B8E 08A9 0003 0022             		bclr	#3,$22(a1)
00007B94 117C 0002 0024             		move.b	#2,$24(a0)
00007B9A 08A8 0003 0022             		bclr	#3,$22(a0)
00007BA0                            
00007BA0                            locret_75F2:
00007BA0 4E75                       		rts	
00007BA2                            ; End of function ExitPlatform
00007BA2                            
00007BA2                            
00007BA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BA2                            
00007BA2                            
00007BA2                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007BA2 7000                       		moveq	#0,d0
00007BA4 1028 003F                  		move.b	$3F(a0),d0
00007BA8 1030 0029                  		move.b	$29(a0,d0.w),d0
00007BAC ED48                       		lsl.w	#6,d0
00007BAE 0680 00FF D000             		addi.l	#$FFD000,d0
00007BB4 2440                       		movea.l	d0,a2
00007BB6 43F8 D000                  		lea	($FFFFD000).w,a1
00007BBA 302A 000C                  		move.w	$C(a2),d0
00007BBE 5140                       		subq.w	#8,d0
00007BC0 7200                       		moveq	#0,d1
00007BC2 1229 0016                  		move.b	$16(a1),d1
00007BC6 9041                       		sub.w	d1,d0
00007BC8 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007BCC 4E75                       		rts	
00007BCE                            ; End of function Obj11_MoveSonic
00007BCE                            
00007BCE                            
00007BCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BCE                            
00007BCE                            
00007BCE                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007BCE 1028 003E                  		move.b	$3E(a0),d0
00007BD2 6100 B090                  		bsr.w	CalcSine
00007BD6 3800                       		move.w	d0,d4
00007BD8 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007BDE 7000                       		moveq	#0,d0
00007BE0 1028 0028                  		move.b	$28(a0),d0
00007BE4 E948                       		lsl.w	#4,d0
00007BE6 7600                       		moveq	#0,d3
00007BE8 1628 003F                  		move.b	$3F(a0),d3
00007BEC 3403                       		move.w	d3,d2
00007BEE D640                       		add.w	d0,d3
00007BF0 7A00                       		moveq	#0,d5
00007BF2 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007BF8 1A35 3000                  		move.b	(a5,d3.w),d5
00007BFC 0243 000F                  		andi.w	#$F,d3
00007C00 E94B                       		lsl.w	#4,d3
00007C02 47F4 3000                  		lea	(a4,d3.w),a3
00007C06 45E8 0029                  		lea	$29(a0),a2
00007C0A                            
00007C0A                            loc_765C:
00007C0A 7000                       		moveq	#0,d0
00007C0C 101A                       		move.b	(a2)+,d0
00007C0E ED48                       		lsl.w	#6,d0
00007C10 0680 00FF D000             		addi.l	#$FFD000,d0
00007C16 2240                       		movea.l	d0,a1
00007C18 7000                       		moveq	#0,d0
00007C1A 101B                       		move.b	(a3)+,d0
00007C1C 5240                       		addq.w	#1,d0
00007C1E C0C5                       		mulu.w	d5,d0
00007C20 C0C4                       		mulu.w	d4,d0
00007C22 4840                       		swap	d0
00007C24 D069 003C                  		add.w	$3C(a1),d0
00007C28 3340 000C                  		move.w	d0,$C(a1)
00007C2C 51CA FFDC                  		dbf	d2,loc_765C
00007C30 7000                       		moveq	#0,d0
00007C32 1028 0028                  		move.b	$28(a0),d0
00007C36 7600                       		moveq	#0,d3
00007C38 1628 003F                  		move.b	$3F(a0),d3
00007C3C 5203                       		addq.b	#1,d3
00007C3E 9600                       		sub.b	d0,d3
00007C40 4403                       		neg.b	d3
00007C42 6B00                       		bmi.s	locret_76CA
00007C44 3403                       		move.w	d3,d2
00007C46 E94B                       		lsl.w	#4,d3
00007C48 47F4 3000                  		lea	(a4,d3.w),a3
00007C4C D6C2                       		adda.w	d2,a3
00007C4E 5342                       		subq.w	#1,d2
00007C50 6500                       		bcs.s	locret_76CA
00007C52                            
00007C52                            loc_76A4:
00007C52 7000                       		moveq	#0,d0
00007C54 101A                       		move.b	(a2)+,d0
00007C56 ED48                       		lsl.w	#6,d0
00007C58 0680 00FF D000             		addi.l	#$FFD000,d0
00007C5E 2240                       		movea.l	d0,a1
00007C60 7000                       		moveq	#0,d0
00007C62 1023                       		move.b	-(a3),d0
00007C64 5240                       		addq.w	#1,d0
00007C66 C0C5                       		mulu.w	d5,d0
00007C68 C0C4                       		mulu.w	d4,d0
00007C6A 4840                       		swap	d0
00007C6C D069 003C                  		add.w	$3C(a1),d0
00007C70 3340 000C                  		move.w	d0,$C(a1)
00007C74 51CA FFDC                  		dbf	d2,loc_76A4
00007C78                            
00007C78                            locret_76CA:
00007C78 4E75                       		rts	
00007C7A                            ; End of function Obj11_Bend
00007C7A                            
00007C7A                            ; ===========================================================================
00007C7A                            ; ---------------------------------------------------------------------------
00007C7A                            ; GHZ bridge-bending data
00007C7A                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007C7A                            ; ---------------------------------------------------------------------------
00007C7A                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007D8A                            		even
00007D8A                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007E8A                            		even
00007E8A                            
00007E8A                            ; ===========================================================================
00007E8A                            
00007E8A                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007E8A 3028 0008                  		move.w	8(a0),d0
00007E8E 0240 FF80                  		andi.w	#$FF80,d0
00007E92 3238 F700                  		move.w	($FFFFF700).w,d1
00007E96 0441 0080                  		subi.w	#$80,d1
00007E9A 0241 FF80                  		andi.w	#$FF80,d1
00007E9E 9041                       		sub.w	d1,d0
00007EA0 0C40 0280                  		cmpi.w	#$280,d0
00007EA4 6200 0000                  		bhi.w	Obj11_DelAll
00007EA8 4E75                       		rts	
00007EAA                            ; ===========================================================================
00007EAA                            
00007EAA                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007EAA 7400                       		moveq	#0,d2
00007EAC 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007EB0 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007EB2 5302                       		subq.b	#1,d2		; subtract 1
00007EB4 6500                       		bcs.s	Obj11_Delete
00007EB6                            
00007EB6                            Obj11_DelLoop:
00007EB6 7000                       		moveq	#0,d0
00007EB8 101A                       		move.b	(a2)+,d0
00007EBA ED48                       		lsl.w	#6,d0
00007EBC 0680 00FF D000             		addi.l	#$FFD000,d0
00007EC2 2240                       		movea.l	d0,a1
00007EC4 B048                       		cmp.w	a0,d0
00007EC6 6700                       		beq.s	loc_791E
00007EC8 6100 0000                  		bsr.w	DeleteObject2
00007ECC                            
00007ECC                            loc_791E:
00007ECC 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007ED0                            
00007ED0                            Obj11_Delete:
00007ED0 6100 0000                  		bsr.w	DeleteObject
00007ED4 4E75                       		rts	
00007ED6                            ; ===========================================================================
00007ED6                            
00007ED6                            Obj11_Delete2:				; XREF: Obj11_Index
00007ED6 6100 0000                  		bsr.w	DeleteObject
00007EDA 4E75                       		rts	
00007EDC                            ; ===========================================================================
00007EDC                            
00007EDC                            Obj11_Display2:				; XREF: Obj11_Index
00007EDC 6100 0000                  		bsr.w	DisplaySprite
00007EE0 4E75                       		rts	
00007EE2                            ; ===========================================================================
00007EE2                            ; ---------------------------------------------------------------------------
00007EE2                            ; Sprite mappings - GHZ	bridge
00007EE2                            ; ---------------------------------------------------------------------------
00007EE2                            Map_obj11:
00007EE2                            	include "_maps\obj11.asm"
00007EE2                            ; ---------------------------------------------------------------------------
00007EE2                            ; Sprite mappings - GHZ	bridge
00007EE2                            ; ---------------------------------------------------------------------------
00007EE2 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007EE6 0000                       		dc.w byte_794B-Map_obj11
00007EE8 01                         byte_793A:	dc.b 1
00007EE9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007EEE 02                         byte_7940:	dc.b 2
00007EEF F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007EF4 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007EF9 01                         byte_794B:	dc.b 1
00007EFA FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007F00 00                         		even
00007F00 00                         		even
00007F00                            
00007F00                            ; ===========================================================================
00007F00                            ; ---------------------------------------------------------------------------
00007F00                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007F00                            ;	    - spiked ball on a chain (SBZ)
00007F00                            ; ---------------------------------------------------------------------------
00007F00                            
00007F00                            Obj15:					; XREF: Obj_Index
00007F00 7000                       		moveq	#0,d0
00007F02 1028 0024                  		move.b	$24(a0),d0
00007F06 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007F0A 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007F0E                            ; ===========================================================================
00007F0E 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007F12 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007F16 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007F1A 0000                       		dc.w Obj15_Action-Obj15_Index
00007F1C                            ; ===========================================================================
00007F1C                            
00007F1C                            Obj15_Main:				; XREF: Obj15_Index
00007F1C 5428 0024                  		addq.b	#2,$24(a0)
00007F20 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007F28 317C 4380 0002             		move.w	#$4380,2(a0)
00007F2E 117C 0004 0001             		move.b	#4,1(a0)
00007F34 117C 0003 0018             		move.b	#3,$18(a0)
00007F3A 117C 0018 0019             		move.b	#$18,$19(a0)
00007F40 117C 0008 0016             		move.b	#8,$16(a0)
00007F46 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007F4C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007F52 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007F58 6600                       		bne.s	Obj15_NotSLZ
00007F5A 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007F62 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007F68 117C 0020 0019             		move.b	#$20,$19(a0)
00007F6E 117C 0010 0016             		move.b	#$10,$16(a0)
00007F74 117C 0099 0020             		move.b	#$99,$20(a0)
00007F7A                            
00007F7A                            Obj15_NotSLZ:
00007F7A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007F80 6600                       		bne.s	Obj15_SetLength
00007F82 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007F8A 317C 0391 0002             		move.w	#$391,2(a0)
00007F90 117C 0018 0019             		move.b	#$18,$19(a0)
00007F96 117C 0018 0016             		move.b	#$18,$16(a0)
00007F9C 117C 0086 0020             		move.b	#$86,$20(a0)
00007FA2 117C 000C 0024             		move.b	#$C,$24(a0)
00007FA8                            
00007FA8                            Obj15_SetLength:
00007FA8 1810                       		move.b	0(a0),d4
00007FAA 7200                       		moveq	#0,d1
00007FAC 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00007FB0 1212                       		move.b	(a2),d1		; move a2 to d1
00007FB2 3F01                       		move.w	d1,-(sp)
00007FB4 0241 000F                  		andi.w	#$F,d1
00007FB8 14FC 0000                  		move.b	#0,(a2)+
00007FBC 3601                       		move.w	d1,d3
00007FBE E94B                       		lsl.w	#4,d3
00007FC0 5003                       		addq.b	#8,d3
00007FC2 1143 003C                  		move.b	d3,$3C(a0)
00007FC6 5103                       		subq.b	#8,d3
00007FC8 4A28 001A                  		tst.b	$1A(a0)
00007FCC 6700                       		beq.s	Obj15_MakeChain
00007FCE 5003                       		addq.b	#8,d3
00007FD0 5341                       		subq.w	#1,d1
00007FD2                            
00007FD2                            Obj15_MakeChain:
00007FD2 6100 0000                  		bsr.w	SingleObjLoad
00007FD6 6600                       		bne.s	loc_7A92
00007FD8 5228 0028                  		addq.b	#1,$28(a0)
00007FDC 3A09                       		move.w	a1,d5
00007FDE 0445 D000                  		subi.w	#-$3000,d5
00007FE2 EC4D                       		lsr.w	#6,d5
00007FE4 0245 007F                  		andi.w	#$7F,d5
00007FE8 14C5                       		move.b	d5,(a2)+
00007FEA 137C 000A 0024             		move.b	#$A,$24(a1)
00007FF0 1284                       		move.b	d4,0(a1)	; load swinging	object
00007FF2 2368 0004 0004             		move.l	4(a0),4(a1)
00007FF8 3368 0002 0002             		move.w	2(a0),2(a1)
00007FFE 08A9 0006 0002             		bclr	#6,2(a1)
00008004 137C 0004 0001             		move.b	#4,1(a1)
0000800A 137C 0004 0018             		move.b	#4,$18(a1)
00008010 137C 0008 0019             		move.b	#8,$19(a1)
00008016 137C 0001 001A             		move.b	#1,$1A(a1)
0000801C 1343 003C                  		move.b	d3,$3C(a1)
00008020 0403 0010                  		subi.b	#$10,d3
00008024 6400                       		bcc.s	loc_7A8E
00008026 137C 0002 001A             		move.b	#2,$1A(a1)
0000802C 137C 0003 0018             		move.b	#3,$18(a1)
00008032 08E9 0006 0002             		bset	#6,2(a1)
00008038                            
00008038                            loc_7A8E:
00008038 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
0000803C                            
0000803C                            loc_7A92:
0000803C 3A08                       		move.w	a0,d5
0000803E 0445 D000                  		subi.w	#-$3000,d5
00008042 EC4D                       		lsr.w	#6,d5
00008044 0245 007F                  		andi.w	#$7F,d5
00008048 14C5                       		move.b	d5,(a2)+
0000804A 317C 4080 0026             		move.w	#$4080,$26(a0)
00008050 317C FE00 003E             		move.w	#-$200,$3E(a0)
00008056 321F                       		move.w	(sp)+,d1
00008058 0801 0004                  		btst	#4,d1		; is object type $8X ?
0000805C 6700                       		beq.s	loc_7AD4	; if not, branch
0000805E 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00008066 317C 43AA 0002             		move.w	#$43AA,2(a0)
0000806C 117C 0001 001A             		move.b	#1,$1A(a0)
00008072 117C 0002 0018             		move.b	#2,$18(a0)
00008078 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
0000807E                            
0000807E                            loc_7AD4:
0000807E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00008084 6700                       		beq.s	Obj15_Action	; if yes, branch
00008086                            
00008086                            Obj15_SetSolid:				; XREF: Obj15_Index
00008086 7200                       		moveq	#0,d1
00008088 1228 0019                  		move.b	$19(a0),d1
0000808C 7600                       		moveq	#0,d3
0000808E 1628 0016                  		move.b	$16(a0),d3
00008092 6100 FA76                  		bsr.w	Obj15_Solid
00008096                            
00008096                            Obj15_Action:				; XREF: Obj15_Index
00008096 6100 0000                  		bsr.w	Obj15_Move
0000809A 6100 0000                  		bsr.w	DisplaySprite
0000809E 6000 0000                  		bra.w	Obj15_ChkDel
000080A2                            ; ===========================================================================
000080A2                            
000080A2                            Obj15_Action2:				; XREF: Obj15_Index
000080A2 7200                       		moveq	#0,d1
000080A4 1228 0019                  		move.b	$19(a0),d1
000080A8 6100 FAC4                  		bsr.w	ExitPlatform
000080AC 3F28 0008                  		move.w	8(a0),-(sp)
000080B0 6100 0000                  		bsr.w	Obj15_Move
000080B4 341F                       		move.w	(sp)+,d2
000080B6 7600                       		moveq	#0,d3
000080B8 1628 0016                  		move.b	$16(a0),d3
000080BC 5203                       		addq.b	#1,d3
000080BE 6100 0000                  		bsr.w	MvSonicOnPtfm
000080C2 6100 0000                  		bsr.w	DisplaySprite
000080C6 6000 0000                  		bra.w	Obj15_ChkDel
000080CA                            
000080CA 4E75                       		rts
000080CC                            
000080CC                            ; ---------------------------------------------------------------------------
000080CC                            ; Subroutine to	change Sonic's position with a platform
000080CC                            ; ---------------------------------------------------------------------------
000080CC                            
000080CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080CC                            
000080CC                            
000080CC                            MvSonicOnPtfm:
000080CC 43F8 D000                  		lea	($FFFFD000).w,a1
000080D0 3028 000C                  		move.w	$C(a0),d0
000080D4 9043                       		sub.w	d3,d0
000080D6 6000                       		bra.s	MvSonic2
000080D8                            ; End of function MvSonicOnPtfm
000080D8                            
000080D8                            ; ---------------------------------------------------------------------------
000080D8                            ; Subroutine to	change Sonic's position with a platform
000080D8                            ; ---------------------------------------------------------------------------
000080D8                            
000080D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000080D8                            
000080D8                            
000080D8                            MvSonicOnPtfm2:
000080D8 43F8 D000                  		lea	($FFFFD000).w,a1
000080DC 3028 000C                  		move.w	$C(a0),d0
000080E0 0440 0009                  		subi.w	#9,d0
000080E4                            
000080E4                            MvSonic2:
000080E4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000080E8 6B00                       		bmi.s	locret_7B62
000080EA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000080F0 6400                       		bcc.s	locret_7B62
000080F2 4A78 FE08                  		tst.w	($FFFFFE08).w
000080F6 6600                       		bne.s	locret_7B62
000080F8 7200                       		moveq	#0,d1
000080FA 1229 0016                  		move.b	$16(a1),d1
000080FE 9041                       		sub.w	d1,d0
00008100 3340 000C                  		move.w	d0,$C(a1)
00008104 9468 0008                  		sub.w	8(a0),d2
00008108 9569 0008                  		sub.w	d2,8(a1)
0000810C                            
0000810C                            locret_7B62:
0000810C 4E75                       		rts	
0000810E                            ; End of function MvSonicOnPtfm2
0000810E                            
0000810E                            
0000810E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000810E                            
0000810E                            
0000810E                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
0000810E 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008112 323C 0080                  		move.w	#$80,d1
00008116 0828 0000 0022             		btst	#0,$22(a0)
0000811C 6700                       		beq.s	loc_7B78
0000811E 4440                       		neg.w	d0
00008120 D041                       		add.w	d1,d0
00008122                            
00008122                            loc_7B78:
00008122 6000                       		bra.s	Obj15_Move2
00008124                            ; End of function Obj15_Move
00008124                            
00008124                            
00008124                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008124                            
00008124                            
00008124                            Obj48_Move:				; XREF: Obj48_Display2
00008124 4A28 003D                  		tst.b	$3D(a0)
00008128 6600                       		bne.s	loc_7B9C
0000812A 3028 003E                  		move.w	$3E(a0),d0
0000812E 5040                       		addq.w	#8,d0
00008130 3140 003E                  		move.w	d0,$3E(a0)
00008134 D168 0026                  		add.w	d0,$26(a0)
00008138 0C40 0200                  		cmpi.w	#$200,d0
0000813C 6600                       		bne.s	loc_7BB6
0000813E 117C 0001 003D             		move.b	#1,$3D(a0)
00008144 6000                       		bra.s	loc_7BB6
00008146                            ; ===========================================================================
00008146                            
00008146                            loc_7B9C:
00008146 3028 003E                  		move.w	$3E(a0),d0
0000814A 5140                       		subq.w	#8,d0
0000814C 3140 003E                  		move.w	d0,$3E(a0)
00008150 D168 0026                  		add.w	d0,$26(a0)
00008154 0C40 FE00                  		cmpi.w	#-$200,d0
00008158 6600                       		bne.s	loc_7BB6
0000815A 117C 0000 003D             		move.b	#0,$3D(a0)
00008160                            
00008160                            loc_7BB6:
00008160 1028 0026                  		move.b	$26(a0),d0
00008164                            ; End of function Obj48_Move
00008164                            
00008164                            
00008164                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008164                            
00008164                            
00008164                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008164 6100 AAFE                  		bsr.w	CalcSine
00008168 3428 0038                  		move.w	$38(a0),d2
0000816C 3628 003A                  		move.w	$3A(a0),d3
00008170 45E8 0028                  		lea	$28(a0),a2
00008174 7C00                       		moveq	#0,d6
00008176 1C1A                       		move.b	(a2)+,d6
00008178                            
00008178                            loc_7BCE:
00008178 7800                       		moveq	#0,d4
0000817A 181A                       		move.b	(a2)+,d4
0000817C ED4C                       		lsl.w	#6,d4
0000817E 0684 00FF D000             		addi.l	#$FFD000,d4
00008184 2244                       		movea.l	d4,a1
00008186 7800                       		moveq	#0,d4
00008188 1829 003C                  		move.b	$3C(a1),d4
0000818C 2A04                       		move.l	d4,d5
0000818E C9C0                       		muls.w	d0,d4
00008190 E084                       		asr.l	#8,d4
00008192 CBC1                       		muls.w	d1,d5
00008194 E085                       		asr.l	#8,d5
00008196 D842                       		add.w	d2,d4
00008198 DA43                       		add.w	d3,d5
0000819A 3344 000C                  		move.w	d4,$C(a1)
0000819E 3345 0008                  		move.w	d5,8(a1)
000081A2 51CE FFD4                  		dbf	d6,loc_7BCE
000081A6 4E75                       		rts	
000081A8                            ; End of function Obj15_Move2
000081A8                            
000081A8                            ; ===========================================================================
000081A8                            
000081A8                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
000081A8 3028 003A                  		move.w	$3A(a0),d0
000081AC 0240 FF80                  		andi.w	#$FF80,d0
000081B0 3238 F700                  		move.w	($FFFFF700).w,d1
000081B4 0441 0080                  		subi.w	#$80,d1
000081B8 0241 FF80                  		andi.w	#$FF80,d1
000081BC 9041                       		sub.w	d1,d0
000081BE 0C40 0280                  		cmpi.w	#$280,d0
000081C2 6200 0000                  		bhi.w	Obj15_DelAll
000081C6 4E75                       		rts	
000081C8                            ; ===========================================================================
000081C8                            
000081C8                            Obj15_DelAll:				; XREF: Obj15_ChkDel
000081C8 7400                       		moveq	#0,d2
000081CA 45E8 0028                  		lea	$28(a0),a2
000081CE 141A                       		move.b	(a2)+,d2
000081D0                            
000081D0                            Obj15_DelLoop:
000081D0 7000                       		moveq	#0,d0
000081D2 101A                       		move.b	(a2)+,d0
000081D4 ED48                       		lsl.w	#6,d0
000081D6 0680 00FF D000             		addi.l	#$FFD000,d0
000081DC 2240                       		movea.l	d0,a1
000081DE 6100 0000                  		bsr.w	DeleteObject2
000081E2 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
000081E6 4E75                       		rts	
000081E8                            ; ===========================================================================
000081E8                            
000081E8                            Obj15_Delete:				; XREF: Obj15_Index
000081E8 6100 0000                  		bsr.w	DeleteObject
000081EC 4E75                       		rts	
000081EE                            ; ===========================================================================
000081EE                            
000081EE                            Obj15_Display:				; XREF: Obj15_Index
000081EE 6000 0000                  		bra.w	DisplaySprite
000081F2                            ; ===========================================================================
000081F2                            ; ---------------------------------------------------------------------------
000081F2                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000081F2                            ; ---------------------------------------------------------------------------
000081F2                            Map_obj15:
000081F2                            	include "_maps\obj15ghz.asm"
000081F2                            ; ---------------------------------------------------------------------------
000081F2                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000081F2                            ; ---------------------------------------------------------------------------
000081F2 0000                       		dc.w byte_7C4E-Map_obj15
000081F4 0000                       		dc.w byte_7C59-Map_obj15
000081F6 0000                       		dc.w byte_7C5F-Map_obj15
000081F8 02                         byte_7C4E:	dc.b 2
000081F9 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000081FE F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008203 01                         byte_7C59:	dc.b 1
00008204 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008209 01                         byte_7C5F:	dc.b 1
0000820A F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008210 00                         		even
00008210 00                         		even
00008210                            
00008210                            ; ---------------------------------------------------------------------------
00008210                            ; Sprite mappings - SLZ	swinging platforms
00008210                            ; ---------------------------------------------------------------------------
00008210                            Map_obj15a:
00008210                            	include "_maps\obj15slz.asm"
00008210                            ; ---------------------------------------------------------------------------
00008210                            ; Sprite mappings - SLZ	swinging platforms
00008210                            ; ---------------------------------------------------------------------------
00008210 0000                       		dc.w byte_7C6C-Map_obj15a
00008212 0000                       		dc.w byte_7C95-Map_obj15a
00008214 0000                       		dc.w byte_7C9B-Map_obj15a
00008216 08                         byte_7C6C:	dc.b 8
00008217 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000821C F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008221 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008226 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
0000822B 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008230 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008235 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
0000823A 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
0000823F 01                         byte_7C95:	dc.b 1
00008240 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008245 01                         byte_7C9B:	dc.b 1
00008246 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
0000824C 00                         		even
0000824C 00                         		even
0000824C                            
0000824C                            ; ===========================================================================
0000824C                            ; ---------------------------------------------------------------------------
0000824C                            ; Object 17 - helix of spikes on a pole	(GHZ)
0000824C                            ; ---------------------------------------------------------------------------
0000824C                            
0000824C                            Obj17:					; XREF: Obj_Index
0000824C 7000                       		moveq	#0,d0
0000824E 1028 0024                  		move.b	$24(a0),d0
00008252 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008256 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
0000825A                            ; ===========================================================================
0000825A 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
0000825C 0000                       		dc.w Obj17_Action-Obj17_Index
0000825E 0000                       		dc.w Obj17_Action-Obj17_Index
00008260 0000                       		dc.w Obj17_Delete-Obj17_Index
00008262 0000                       		dc.w Obj17_Display-Obj17_Index
00008264                            ; ===========================================================================
00008264                            
00008264                            Obj17_Main:				; XREF: Obj17_Index
00008264 5428 0024                  		addq.b	#2,$24(a0)
00008268 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008270 317C 4398 0002             		move.w	#$4398,2(a0)
00008276 117C 0007 0022             		move.b	#7,$22(a0)
0000827C 117C 0004 0001             		move.b	#4,1(a0)
00008282 117C 0003 0018             		move.b	#3,$18(a0)
00008288 117C 0008 0019             		move.b	#8,$19(a0)
0000828E 3428 000C                  		move.w	$C(a0),d2
00008292 3628 0008                  		move.w	8(a0),d3
00008296 1810                       		move.b	0(a0),d4
00008298 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000829C 7200                       		moveq	#0,d1
0000829E 1212                       		move.b	(a2),d1		; move a2 to d1
000082A0 14FC 0000                  		move.b	#0,(a2)+
000082A4 3001                       		move.w	d1,d0
000082A6 E248                       		lsr.w	#1,d0
000082A8 E948                       		lsl.w	#4,d0
000082AA 9640                       		sub.w	d0,d3
000082AC 5501                       		subq.b	#2,d1
000082AE 6500                       		bcs.s	Obj17_Action
000082B0 7C00                       		moveq	#0,d6
000082B2                            
000082B2                            Obj17_MakeHelix:
000082B2 6100 0000                  		bsr.w	SingleObjLoad
000082B6 6600                       		bne.s	Obj17_Action
000082B8 5228 0028                  		addq.b	#1,$28(a0)
000082BC 3A09                       		move.w	a1,d5
000082BE 0445 D000                  		subi.w	#$D000,d5
000082C2 EC4D                       		lsr.w	#6,d5
000082C4 0245 007F                  		andi.w	#$7F,d5
000082C8 14C5                       		move.b	d5,(a2)+
000082CA 137C 0008 0024             		move.b	#8,$24(a1)
000082D0 1284                       		move.b	d4,0(a1)
000082D2 3342 000C                  		move.w	d2,$C(a1)
000082D6 3343 0008                  		move.w	d3,8(a1)
000082DA 2368 0004 0004             		move.l	4(a0),4(a1)
000082E0 337C 4398 0002             		move.w	#$4398,2(a1)
000082E6 137C 0004 0001             		move.b	#4,1(a1)
000082EC 137C 0003 0018             		move.b	#3,$18(a1)
000082F2 137C 0008 0019             		move.b	#8,$19(a1)
000082F8 1346 003E                  		move.b	d6,$3E(a1)
000082FC 5206                       		addq.b	#1,d6
000082FE 0206 0007                  		andi.b	#7,d6
00008302 0643 0010                  		addi.w	#$10,d3
00008306 B668 0008                  		cmp.w	8(a0),d3
0000830A 6600                       		bne.s	loc_7D78
0000830C 1146 003E                  		move.b	d6,$3E(a0)
00008310 5206                       		addq.b	#1,d6
00008312 0206 0007                  		andi.b	#7,d6
00008316 0643 0010                  		addi.w	#$10,d3
0000831A 5228 0028                  		addq.b	#1,$28(a0)
0000831E                            
0000831E                            loc_7D78:
0000831E 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008322                            
00008322                            Obj17_Action:				; XREF: Obj17_Index
00008322 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008326 6100 0000                  		bsr.w	DisplaySprite
0000832A 6000 0000                  		bra.w	Obj17_ChkDel
0000832E                            
0000832E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000832E                            
0000832E                            
0000832E                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
0000832E 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008332 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008338 D028 003E                  		add.b	$3E(a0),d0
0000833C 0200 0007                  		andi.b	#7,d0
00008340 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008344 6600                       		bne.s	locret_7DA6
00008346 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
0000834C                            
0000834C                            locret_7DA6:
0000834C 4E75                       		rts	
0000834E                            ; End of function Obj17_RotateSpikes
0000834E                            
0000834E                            ; ===========================================================================
0000834E                            
0000834E                            Obj17_ChkDel:				; XREF: Obj17_Action
0000834E 3028 0008                  		move.w	8(a0),d0
00008352 0240 FF80                  		andi.w	#$FF80,d0
00008356 3238 F700                  		move.w	($FFFFF700).w,d1
0000835A 0441 0080                  		subi.w	#$80,d1
0000835E 0241 FF80                  		andi.w	#$FF80,d1
00008362 9041                       		sub.w	d1,d0
00008364 0C40 0280                  		cmpi.w	#$280,d0
00008368 6200 0000                  		bhi.w	Obj17_DelAll
0000836C 4E75                       		rts	
0000836E                            ; ===========================================================================
0000836E                            
0000836E                            Obj17_DelAll:				; XREF: Obj17_ChkDel
0000836E 7400                       		moveq	#0,d2
00008370 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008374 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008376 5502                       		subq.b	#2,d2
00008378 6500                       		bcs.s	Obj17_Delete
0000837A                            
0000837A                            Obj17_DelLoop:
0000837A 7000                       		moveq	#0,d0
0000837C 101A                       		move.b	(a2)+,d0
0000837E ED48                       		lsl.w	#6,d0
00008380 0680 00FF D000             		addi.l	#$FFD000,d0
00008386 2240                       		movea.l	d0,a1
00008388 6100 0000                  		bsr.w	DeleteObject2	; delete object
0000838C 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008390                            
00008390                            Obj17_Delete:				; XREF: Obj17_Index
00008390 6100 0000                  		bsr.w	DeleteObject
00008394 4E75                       		rts	
00008396                            ; ===========================================================================
00008396                            
00008396                            Obj17_Display:				; XREF: Obj17_Index
00008396 6100 FF96                  		bsr.w	Obj17_RotateSpikes
0000839A 6000 0000                  		bra.w	DisplaySprite
0000839E                            ; ===========================================================================
0000839E                            ; ---------------------------------------------------------------------------
0000839E                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000839E                            ; ---------------------------------------------------------------------------
0000839E                            Map_obj17:
0000839E                            	include "_maps\obj17.asm"
0000839E                            ; ---------------------------------------------------------------------------
0000839E                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000839E                            ; ---------------------------------------------------------------------------
0000839E 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
000083A2 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
000083A6 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
000083AA 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
000083AE 01                         byte_7E08:	dc.b 1
000083AF F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
000083B4 01                         byte_7E0E:	dc.b 1
000083B5 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
000083BA 01                         byte_7E14:	dc.b 1
000083BB F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
000083C0 01                         byte_7E1A:	dc.b 1
000083C1 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
000083C6 01                         byte_7E20:	dc.b 1
000083C7 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
000083CC 01                         byte_7E26:	dc.b 1
000083CD 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
000083D2 01                         byte_7E2C:	dc.b 1
000083D3 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
000083D8                            		even
000083D8                            		even
000083D8                            
000083D8                            ; ===========================================================================
000083D8                            ; ---------------------------------------------------------------------------
000083D8                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000083D8                            ; ---------------------------------------------------------------------------
000083D8                            
000083D8                            Obj18:					; XREF: Obj_Index
000083D8 7000                       		moveq	#0,d0
000083DA 1028 0024                  		move.b	$24(a0),d0
000083DE 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
000083E2 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
000083E6                            ; ===========================================================================
000083E6 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
000083E8 0000                       		dc.w Obj18_Solid-Obj18_Index
000083EA 0000                       		dc.w Obj18_Action2-Obj18_Index
000083EC 0000                       		dc.w Obj18_Delete-Obj18_Index
000083EE 0000                       		dc.w Obj18_Action-Obj18_Index
000083F0                            ; ===========================================================================
000083F0                            
000083F0                            Obj18_Main:				; XREF: Obj18_Index
000083F0 5428 0024                  		addq.b	#2,$24(a0)
000083F4 317C 4000 0002             		move.w	#$4000,2(a0)
000083FA 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008402 117C 0020 0019             		move.b	#$20,$19(a0)
00008408 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
0000840E 6600                       		bne.s	Obj18_NotSYZ
00008410 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008418 117C 0020 0019             		move.b	#$20,$19(a0)
0000841E                            
0000841E                            Obj18_NotSYZ:
0000841E 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008424 6600                       		bne.s	Obj18_NotSLZ
00008426 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
0000842E 117C 0020 0019             		move.b	#$20,$19(a0)
00008434 317C 4000 0002             		move.w	#$4000,2(a0)
0000843A 117C 0003 0028             		move.b	#3,$28(a0)
00008440                            
00008440                            Obj18_NotSLZ:
00008440 117C 0004 0001             		move.b	#4,1(a0)
00008446 117C 0004 0018             		move.b	#4,$18(a0)
0000844C 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008452 3168 000C 0034             		move.w	$C(a0),$34(a0)
00008458 3168 0008 0032             		move.w	8(a0),$32(a0)
0000845E 317C 0080 0026             		move.w	#$80,$26(a0)
00008464 7200                       		moveq	#0,d1
00008466 1028 0028                  		move.b	$28(a0),d0
0000846A 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
0000846E 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008470 5201                       		addq.b	#1,d1		; use frame #1
00008472 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008478                            
00008478                            Obj18_SetFrame:
00008478 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
0000847C                            
0000847C                            Obj18_Solid:				; XREF: Obj18_Index
0000847C 4A28 0038                  		tst.b	$38(a0)
00008480 6700                       		beq.s	loc_7EE0
00008482 5928 0038                  		subq.b	#4,$38(a0)
00008486                            
00008486                            loc_7EE0:
00008486 7200                       		moveq	#0,d1
00008488 1228 0019                  		move.b	$19(a0),d1
0000848C 6100 F56C                  		bsr.w	PlatformObject
00008490                            
00008490                            Obj18_Action:				; XREF: Obj18_Index
00008490 6100 0000                  		bsr.w	Obj18_Move
00008494 6100 0000                  		bsr.w	Obj18_Nudge
00008498 6100 0000                  		bsr.w	DisplaySprite
0000849C 6000 0000                  		bra.w	Obj18_ChkDel
000084A0                            ; ===========================================================================
000084A0                            
000084A0                            Obj18_Action2:				; XREF: Obj18_Index
000084A0 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000084A6 6700                       		beq.s	loc_7F06
000084A8 5828 0038                  		addq.b	#4,$38(a0)
000084AC                            
000084AC                            loc_7F06:
000084AC 7200                       		moveq	#0,d1
000084AE 1228 0019                  		move.b	$19(a0),d1
000084B2 6100 F6BA                  		bsr.w	ExitPlatform
000084B6 3F28 0008                  		move.w	8(a0),-(sp)
000084BA 6100 0000                  		bsr.w	Obj18_Move
000084BE 6100 0000                  		bsr.w	Obj18_Nudge
000084C2 341F                       		move.w	(sp)+,d2
000084C4 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000084C8 6100 0000                  		bsr.w	DisplaySprite
000084CC 6000 0000                  		bra.w	Obj18_ChkDel
000084D0                            
000084D0 4E75                       		rts
000084D2                            
000084D2                            ; ---------------------------------------------------------------------------
000084D2                            ; Subroutine to	move platform slightly when you	stand on it
000084D2                            ; ---------------------------------------------------------------------------
000084D2                            
000084D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084D2                            
000084D2                            
000084D2                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
000084D2 1028 0038                  		move.b	$38(a0),d0
000084D6 6100 A78C                  		bsr.w	CalcSine
000084DA 323C 0400                  		move.w	#$400,d1
000084DE C1C1                       		muls.w	d1,d0
000084E0 4840                       		swap	d0
000084E2 D068 002C                  		add.w	$2C(a0),d0
000084E6 3140 000C                  		move.w	d0,$C(a0)
000084EA 4E75                       		rts	
000084EC                            ; End of function Obj18_Nudge
000084EC                            
000084EC                            ; ---------------------------------------------------------------------------
000084EC                            ; Subroutine to	move platforms
000084EC                            ; ---------------------------------------------------------------------------
000084EC                            
000084EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084EC                            
000084EC                            
000084EC                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
000084EC 7000                       		moveq	#0,d0
000084EE 1028 0028                  		move.b	$28(a0),d0
000084F2 0240 000F                  		andi.w	#$F,d0
000084F6 D040                       		add.w	d0,d0
000084F8 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000084FC 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00008500                            ; End of function Obj18_Move
00008500                            
00008500                            ; ===========================================================================
00008500 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00008504 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008508 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
0000850C 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00008510 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00008514 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00008518 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
0000851A                            ; ===========================================================================
0000851A                            
0000851A                            Obj18_Type00:
0000851A 4E75                       		rts			; platform 00 doesn't move
0000851C                            ; ===========================================================================
0000851C                            
0000851C                            Obj18_Type05:
0000851C 3028 0032                  		move.w	$32(a0),d0
00008520 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008524 4401                       		neg.b	d1		; reverse platform-motion
00008526 0601 0040                  		addi.b	#$40,d1
0000852A 6000                       		bra.s	Obj18_01_Move
0000852C                            ; ===========================================================================
0000852C                            
0000852C                            Obj18_Type01:
0000852C 3028 0032                  		move.w	$32(a0),d0
00008530 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008534 0401 0040                  		subi.b	#$40,d1
00008538                            
00008538                            Obj18_01_Move:
00008538 4881                       		ext.w	d1
0000853A D041                       		add.w	d1,d0
0000853C 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008540 6000 0000                  		bra.w	Obj18_ChgMotion
00008544                            ; ===========================================================================
00008544                            
00008544                            Obj18_Type0C:
00008544 3028 0034                  		move.w	$34(a0),d0
00008548 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000854C 4401                       		neg.b	d1		; reverse platform-motion
0000854E 0601 0030                  		addi.b	#$30,d1
00008552 6000                       		bra.s	Obj18_02_Move
00008554                            ; ===========================================================================
00008554                            
00008554                            Obj18_Type0B:
00008554 3028 0034                  		move.w	$34(a0),d0
00008558 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000855C 0401 0030                  		subi.b	#$30,d1
00008560 6000                       		bra.s	Obj18_02_Move
00008562                            ; ===========================================================================
00008562                            
00008562                            Obj18_Type06:
00008562 3028 0034                  		move.w	$34(a0),d0
00008566 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000856A 4401                       		neg.b	d1		; reverse platform-motion
0000856C 0601 0040                  		addi.b	#$40,d1
00008570 6000                       		bra.s	Obj18_02_Move
00008572                            ; ===========================================================================
00008572                            
00008572                            Obj18_Type02:
00008572 3028 0034                  		move.w	$34(a0),d0
00008576 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000857A 0401 0040                  		subi.b	#$40,d1
0000857E                            
0000857E                            Obj18_02_Move:
0000857E 4881                       		ext.w	d1
00008580 D041                       		add.w	d1,d0
00008582 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008586 6000 0000                  		bra.w	Obj18_ChgMotion
0000858A                            ; ===========================================================================
0000858A                            
0000858A                            Obj18_Type03:
0000858A 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000858E 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008590 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00008596 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00008598 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
0000859E                            
0000859E                            Obj18_03_NoMove:
0000859E 4E75                       		rts	
000085A0                            ; ===========================================================================
000085A0                            
000085A0                            Obj18_03_Wait:
000085A0 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000085A4 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
000085A6 317C 0020 003A             		move.w	#32,$3A(a0)
000085AC 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
000085B0 4E75                       		rts	
000085B2                            ; ===========================================================================
000085B2                            
000085B2                            Obj18_Type04:
000085B2 4A68 003A                  		tst.w	$3A(a0)
000085B6 6700                       		beq.s	loc_8048
000085B8 5368 003A                  		subq.w	#1,$3A(a0)
000085BC 6600                       		bne.s	loc_8048
000085BE 0828 0003 0022             		btst	#3,$22(a0)
000085C4 6700                       		beq.s	loc_8042
000085C6 08E9 0001 0022             		bset	#1,$22(a1)
000085CC 08A9 0003 0022             		bclr	#3,$22(a1)
000085D2 137C 0002 0024             		move.b	#2,$24(a1)
000085D8 08A8 0003 0022             		bclr	#3,$22(a0)
000085DE 4228 0025                  		clr.b	$25(a0)
000085E2 3368 0012 0012             		move.w	$12(a0),$12(a1)
000085E8                            
000085E8                            loc_8042:
000085E8 117C 0008 0024             		move.b	#8,$24(a0)
000085EE                            
000085EE                            loc_8048:
000085EE 2628 002C                  		move.l	$2C(a0),d3
000085F2 3028 0012                  		move.w	$12(a0),d0
000085F6 48C0                       		ext.l	d0
000085F8 E180                       		asl.l	#8,d0
000085FA D680                       		add.l	d0,d3
000085FC 2143 002C                  		move.l	d3,$2C(a0)
00008600 0668 0038 0012             		addi.w	#$38,$12(a0)
00008606 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000860A 0640 00E0                  		addi.w	#$E0,d0
0000860E B068 002C                  		cmp.w	$2C(a0),d0
00008612 6400                       		bcc.s	locret_8074
00008614 117C 0006 0024             		move.b	#6,$24(a0)
0000861A                            
0000861A                            locret_8074:
0000861A 4E75                       		rts	
0000861C                            ; ===========================================================================
0000861C                            
0000861C                            Obj18_Type07:
0000861C 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008620 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008622 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008626 7000                       		moveq	#0,d0
00008628 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
0000862C E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
0000862E 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008632 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008634 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0000863A                            
0000863A                            Obj18_07_NoMove:
0000863A 4E75                       		rts	
0000863C                            ; ===========================================================================
0000863C                            
0000863C                            Obj18_07_Wait:
0000863C 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008640 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008642 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008646 4E75                       		rts	
00008648                            ; ===========================================================================
00008648                            
00008648                            Obj18_Type08:
00008648 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
0000864C 3028 0034                  		move.w	$34(a0),d0
00008650 0440 0200                  		subi.w	#$200,d0
00008654 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00008658 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
0000865A 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
0000865E                            
0000865E                            Obj18_08_NoStop:
0000865E 4E75                       		rts	
00008660                            ; ===========================================================================
00008660                            
00008660                            Obj18_Type0A:
00008660 3028 0034                  		move.w	$34(a0),d0
00008664 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008668 0401 0040                  		subi.b	#$40,d1
0000866C 4881                       		ext.w	d1
0000866E E241                       		asr.w	#1,d1
00008670 D041                       		add.w	d1,d0
00008672 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008676                            
00008676                            Obj18_ChgMotion:
00008676 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
0000867C 4E75                       		rts	
0000867E                            ; ===========================================================================
0000867E                            
0000867E                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
0000867E 3028 0032                  		move.w	$32(a0),d0
00008682 0240 FF80                  		andi.w	#$FF80,d0
00008686 3238 F700                  		move.w	($FFFFF700).w,d1
0000868A 0441 0080                  		subi.w	#$80,d1
0000868E 0241 FF80                  		andi.w	#$FF80,d1
00008692 9041                       		sub.w	d1,d0
00008694 0C40 0280                  		cmpi.w	#$280,d0
00008698 6200                       		bhi.s	Obj18_Delete
0000869A 4E75                       		rts	
0000869C                            ; ===========================================================================
0000869C                            
0000869C                            Obj18_Delete:				; XREF: Obj18_Index
0000869C 6000 0000                  		bra.w	DeleteObject
000086A0                            ; ===========================================================================
000086A0                            ; ---------------------------------------------------------------------------
000086A0                            ; Sprite mappings - unused
000086A0                            ; ---------------------------------------------------------------------------
000086A0                            Map_obj18x:
000086A0                            	include "_maps\obj18x.asm"
000086A0                            ; ---------------------------------------------------------------------------
000086A0                            ; Sprite mappings - unused
000086A0                            ; ---------------------------------------------------------------------------
000086A0 0000                       		dc.w byte_80FE-Map_obj18x
000086A2 0000                       		dc.w byte_8109-Map_obj18x
000086A4 02                         byte_80FE:	dc.b 2
000086A5 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
000086AA F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
000086AF 0A                         byte_8109:	dc.b $A
000086B0 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
000086B5 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000086BA 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000086BF 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000086C4 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000086C9 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000086CE 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000086D3 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
000086D8 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
000086DD 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
000086E2                            		even
000086E2                            		even
000086E2                            
000086E2                            ; ---------------------------------------------------------------------------
000086E2                            ; Sprite mappings - GHZ	platforms
000086E2                            ; ---------------------------------------------------------------------------
000086E2                            Map_obj18:
000086E2                            	include "_maps\obj18ghz.asm"
000086E2                            ; ---------------------------------------------------------------------------
000086E2                            ; Sprite mappings - GHZ	platforms
000086E2                            ; ---------------------------------------------------------------------------
000086E2 0000                       		dc.w byte_8140-Map_obj18
000086E4 0000                       		dc.w byte_8155-Map_obj18
000086E6 04                         byte_8140:	dc.b 4
000086E7 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
000086EC F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
000086F1 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
000086F6 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
000086FB 0A                         byte_8155:	dc.b $A
000086FC F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008701 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008706 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
0000870B 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008710 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00008715 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
0000871A 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
0000871F 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008724 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00008729 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
0000872E                            		even
0000872E                            		even
0000872E                            
0000872E                            ; ---------------------------------------------------------------------------
0000872E                            ; Sprite mappings - SYZ	platforms
0000872E                            ; ---------------------------------------------------------------------------
0000872E                            Map_obj18a:
0000872E                            	include "_maps\obj18syz.asm"
0000872E                            ; ---------------------------------------------------------------------------
0000872E                            ; Sprite mappings - SYZ	platforms
0000872E                            ; ---------------------------------------------------------------------------
0000872E 0000                       		dc.w byte_818A-Map_obj18a
00008730 03                         byte_818A:	dc.b 3
00008731 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008736 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
0000873B F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008740                            		even
00008740                            		even
00008740                            
00008740                            ; ---------------------------------------------------------------------------
00008740                            ; Sprite mappings - SLZ	platforms
00008740                            ; ---------------------------------------------------------------------------
00008740                            Map_obj18b:
00008740                            	include "_maps\obj18slz.asm"
00008740                            ; ---------------------------------------------------------------------------
00008740                            ; Sprite mappings - SLZ	platforms
00008740                            ; ---------------------------------------------------------------------------
00008740 0000                       		dc.w byte_819C-Map_obj18b
00008742 02                         byte_819C:	dc.b 2
00008743 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00008748 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
0000874E 00                         		even
0000874E 00                         		even
0000874E                            
0000874E                            ; ===========================================================================
0000874E                            ; ---------------------------------------------------------------------------
0000874E                            ; Object 19 - blank
0000874E                            ; ---------------------------------------------------------------------------
0000874E                            
0000874E                            Obj19:					; XREF: Obj_Index
0000874E 4E75                       		rts	
00008750                            ; ===========================================================================
00008750                            ; ---------------------------------------------------------------------------
00008750                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008750                            ; ---------------------------------------------------------------------------
00008750                            Map_obj48:
00008750                            	include "_maps\obj48.asm"
00008750                            ; ---------------------------------------------------------------------------
00008750                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008750                            ; ---------------------------------------------------------------------------
00008750 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008754 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008758 06                         byte_81B2:	dc.b 6
00008759 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
0000875E F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008763 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008768 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0000876D 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008772 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008777 04                         byte_81D1:	dc.b 4
00008778 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
0000877D E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008782 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008787 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
0000878C 04                         byte_81E6:	dc.b 4
0000878D E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008792 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008797 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
0000879C 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000087A1 04                         byte_81FB:	dc.b 4
000087A2 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000087A7 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000087AC 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000087B1 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000087B6                            		even
000087B6                            		even
000087B6                            
000087B6                            ; ===========================================================================
000087B6                            ; ---------------------------------------------------------------------------
000087B6                            ; Object 1A - GHZ collapsing ledge
000087B6                            ; ---------------------------------------------------------------------------
000087B6                            
000087B6                            Obj1A:					; XREF: Obj_Index
000087B6 7000                       		moveq	#0,d0
000087B8 1028 0024                  		move.b	$24(a0),d0
000087BC 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
000087C0 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
000087C4                            ; ===========================================================================
000087C4 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
000087C8 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
000087CC 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
000087D0                            ; ===========================================================================
000087D0                            
000087D0                            Obj1A_Main:				; XREF: Obj1A_Index
000087D0 5428 0024                  		addq.b	#2,$24(a0)
000087D4 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
000087DC 317C 4000 0002             		move.w	#$4000,2(a0)
000087E2 0028 0004 0001             		ori.b	#4,1(a0)
000087E8 117C 0004 0018             		move.b	#4,$18(a0)
000087EE 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
000087F4 117C 0064 0019             		move.b	#$64,$19(a0)
000087FA 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008800 117C 0038 0016             		move.b	#$38,$16(a0)
00008806 08E8 0004 0001             		bset	#4,1(a0)
0000880C                            
0000880C                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
0000880C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008810 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008812 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008816 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
0000881A 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000881E                            
0000881E                            Obj1A_Slope:
0000881E 323C 0030                  		move.w	#$30,d1
00008822 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008828 6100 F2A4                  		bsr.w	SlopeObject
0000882C 6000 0000                  		bra.w	MarkObjGone
00008830                            ; ===========================================================================
00008830                            
00008830                            Obj1A_Touch:				; XREF: Obj1A_Index
00008830 4A28 0038                  		tst.b	$38(a0)
00008834 6700 0000                  		beq.w	loc_847A
00008838 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000883E 5328 0038                  		subq.b	#1,$38(a0)
00008842                            
00008842                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008842                            
00008842                            
00008842                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008842 323C 0030                  		move.w	#$30,d1
00008846 6100 F326                  		bsr.w	ExitPlatform
0000884A 323C 0030                  		move.w	#$30,d1
0000884E 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008854 3428 0008                  		move.w	8(a0),d2
00008858 6100 0000                  		bsr.w	SlopeObject2
0000885C 6000 0000                  		bra.w	MarkObjGone
00008860                            ; End of function Obj1A_WalkOff
00008860                            
00008860                            ; ===========================================================================
00008860                            
00008860                            Obj1A_Display:				; XREF: Obj1A_Index
00008860 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008864 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008866 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000886A 6600 0000                  		bne.w	loc_82D0	; if yes, branch
0000886E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008872 6000 0000                  		bra.w	DisplaySprite
00008876                            ; ===========================================================================
00008876                            
00008876                            loc_82D0:				; XREF: Obj1A_Display
00008876 5328 0038                  		subq.b	#1,$38(a0)
0000887A 6100 FFC6                  		bsr.w	Obj1A_WalkOff
0000887E 43F8 D000                  		lea	($FFFFD000).w,a1
00008882 0829 0003 0022             		btst	#3,$22(a1)
00008888 6700                       		beq.s	loc_82FC
0000888A 4A28 0038                  		tst.b	$38(a0)
0000888E 6600                       		bne.s	locret_8308
00008890 08A9 0003 0022             		bclr	#3,$22(a1)
00008896 08A9 0005 0022             		bclr	#5,$22(a1)
0000889C 137C 0001 001D             		move.b	#1,$1D(a1)
000088A2                            
000088A2                            loc_82FC:
000088A2 117C 0000 003A             		move.b	#0,$3A(a0)
000088A8 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
000088AE                            
000088AE                            locret_8308:
000088AE 4E75                       		rts	
000088B0                            ; ===========================================================================
000088B0                            
000088B0                            Obj1A_TimeZero:				; XREF: Obj1A_Display
000088B0 6100 0000                  		bsr.w	ObjectFall
000088B4 6100 0000                  		bsr.w	DisplaySprite
000088B8 4A28 0001                  		tst.b	1(a0)
000088BC 6A00                       		bpl.s	Obj1A_Delete
000088BE 4E75                       		rts	
000088C0                            ; ===========================================================================
000088C0                            
000088C0                            Obj1A_Delete:				; XREF: Obj1A_Index
000088C0 6100 0000                  		bsr.w	DeleteObject
000088C4 4E75                       		rts	
000088C6                            ; ===========================================================================
000088C6                            ; ---------------------------------------------------------------------------
000088C6                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000088C6                            ; ---------------------------------------------------------------------------
000088C6                            
000088C6                            Obj53:					; XREF: Obj_Index
000088C6 7000                       		moveq	#0,d0
000088C8 1028 0024                  		move.b	$24(a0),d0
000088CC 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
000088D0 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
000088D4                            ; ===========================================================================
000088D4 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
000088D8 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
000088DC 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
000088E0                            ; ===========================================================================
000088E0                            
000088E0                            Obj53_Main:				; XREF: Obj53_Index
000088E0 5428 0024                  		addq.b	#2,$24(a0)
000088E4 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
000088EC 317C 42B8 0002             		move.w	#$42B8,2(a0)
000088F2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000088F8 6600                       		bne.s	Obj53_NotSLZ
000088FA 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008900 5428 001A                  		addq.b	#2,$1A(a0)
00008904                            
00008904                            Obj53_NotSLZ:
00008904 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000890A 6600                       		bne.s	Obj53_NotSBZ
0000890C 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008912                            
00008912                            Obj53_NotSBZ:
00008912 0028 0004 0001             		ori.b	#4,1(a0)
00008918 117C 0004 0018             		move.b	#4,$18(a0)
0000891E 117C 0007 0038             		move.b	#7,$38(a0)
00008924 117C 0044 0019             		move.b	#$44,$19(a0)
0000892A                            
0000892A                            Obj53_ChkTouch:				; XREF: Obj53_Index
0000892A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000892E 6700                       		beq.s	Obj53_Solid	; if not, branch
00008930 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008934 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008938 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000893C                            
0000893C                            Obj53_Solid:
0000893C 323C 0020                  		move.w	#$20,d1
00008940 6100 F0B8                  		bsr.w	PlatformObject
00008944 4A28 0028                  		tst.b	$28(a0)
00008948 6A00                       		bpl.s	Obj53_MarkAsGone
0000894A 0829 0003 0022             		btst	#3,$22(a1)
00008950 6700                       		beq.s	Obj53_MarkAsGone
00008952 08A8 0000 0001             		bclr	#0,1(a0)
00008958 3029 0008                  		move.w	8(a1),d0
0000895C 9068 0008                  		sub.w	8(a0),d0
00008960 6400                       		bcc.s	Obj53_MarkAsGone
00008962 08E8 0000 0001             		bset	#0,1(a0)
00008968                            
00008968                            Obj53_MarkAsGone:
00008968 6000 0000                  		bra.w	MarkObjGone
0000896C                            ; ===========================================================================
0000896C                            
0000896C                            Obj53_Touch:				; XREF: Obj53_Index
0000896C 4A28 0038                  		tst.b	$38(a0)
00008970 6700 0000                  		beq.w	loc_8458
00008974 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000897A 5328 0038                  		subq.b	#1,$38(a0)
0000897E                            
0000897E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000897E                            
0000897E                            
0000897E                            Obj53_WalkOff:				; XREF: Obj53_Index
0000897E 323C 0020                  		move.w	#$20,d1
00008982 6100 F1EA                  		bsr.w	ExitPlatform
00008986 3428 0008                  		move.w	8(a0),d2
0000898A 6100 F74C                  		bsr.w	MvSonicOnPtfm2
0000898E 6000 0000                  		bra.w	MarkObjGone
00008992                            ; End of function Obj53_WalkOff
00008992                            
00008992                            ; ===========================================================================
00008992                            
00008992                            Obj53_Display:				; XREF: Obj53_Index
00008992 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008996 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008998 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000899C 6600 0000                  		bne.w	loc_8402	; if yes, branch
000089A0 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000089A4 6000 0000                  		bra.w	DisplaySprite
000089A8                            ; ===========================================================================
000089A8                            
000089A8                            loc_8402:
000089A8 5328 0038                  		subq.b	#1,$38(a0)
000089AC 6100 FFD0                  		bsr.w	Obj53_WalkOff
000089B0 43F8 D000                  		lea	($FFFFD000).w,a1
000089B4 0829 0003 0022             		btst	#3,$22(a1)
000089BA 6700                       		beq.s	loc_842E
000089BC 4A28 0038                  		tst.b	$38(a0)
000089C0 6600                       		bne.s	locret_843A
000089C2 08A9 0003 0022             		bclr	#3,$22(a1)
000089C8 08A9 0005 0022             		bclr	#5,$22(a1)
000089CE 137C 0001 001D             		move.b	#1,$1D(a1)
000089D4                            
000089D4                            loc_842E:
000089D4 117C 0000 003A             		move.b	#0,$3A(a0)
000089DA 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
000089E0                            
000089E0                            locret_843A:
000089E0 4E75                       		rts	
000089E2                            ; ===========================================================================
000089E2                            
000089E2                            Obj53_TimeZero:				; XREF: Obj53_Display
000089E2 6100 0000                  		bsr.w	ObjectFall
000089E6 6100 0000                  		bsr.w	DisplaySprite
000089EA 4A28 0001                  		tst.b	1(a0)
000089EE 6A00                       		bpl.s	Obj53_Delete
000089F0 4E75                       		rts	
000089F2                            ; ===========================================================================
000089F2                            
000089F2                            Obj53_Delete:				; XREF: Obj53_Index
000089F2 6100 0000                  		bsr.w	DeleteObject
000089F6 4E75                       		rts	
000089F8                            ; ===========================================================================
000089F8                            
000089F8                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
000089F8 117C 0000 003A             		move.b	#0,$3A(a0)
000089FE                            
000089FE                            loc_8458:				; XREF: Obj53_Touch
000089FE 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008A04 0828 0000 0028             		btst	#0,$28(a0)
00008A0A 6700                       		beq.s	loc_846C
00008A0C 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008A12                            
00008A12                            loc_846C:
00008A12 7207                       		moveq	#7,d1
00008A14 5228 001A                  		addq.b	#1,$1A(a0)
00008A18 6000                       		bra.s	loc_8486
00008A1A                            ; ===========================================================================
00008A1A                            
00008A1A                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008A1A 117C 0000 003A             		move.b	#0,$3A(a0)
00008A20                            
00008A20                            loc_847A:				; XREF: Obj1A_Touch
00008A20 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008A26 7218                       		moveq	#$18,d1
00008A28 5428 001A                  		addq.b	#2,$1A(a0)
00008A2C                            
00008A2C                            loc_8486:				; XREF: Obj53_Collapse
00008A2C 7000                       		moveq	#0,d0
00008A2E 1028 001A                  		move.b	$1A(a0),d0
00008A32 D040                       		add.w	d0,d0
00008A34 2668 0004                  		movea.l	4(a0),a3
00008A38 D6F3 0000                  		adda.w	(a3,d0.w),a3
00008A3C 524B                       		addq.w	#1,a3
00008A3E 08E8 0005 0001             		bset	#5,1(a0)
00008A44 1810                       		move.b	0(a0),d4
00008A46 1A28 0001                  		move.b	1(a0),d5
00008A4A 2248                       		movea.l	a0,a1
00008A4C 6000                       		bra.s	loc_84B2
00008A4E                            ; ===========================================================================
00008A4E                            
00008A4E                            loc_84AA:
00008A4E 6100 0000                  		bsr.w	SingleObjLoad
00008A52 6600                       		bne.s	loc_84F2
00008A54 5A4B                       		addq.w	#5,a3
00008A56                            
00008A56                            loc_84B2:
00008A56 137C 0006 0024             		move.b	#6,$24(a1)
00008A5C 1284                       		move.b	d4,0(a1)
00008A5E 234B 0004                  		move.l	a3,4(a1)
00008A62 1345 0001                  		move.b	d5,1(a1)
00008A66 3368 0008 0008             		move.w	8(a0),8(a1)
00008A6C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008A72 3368 0002 0002             		move.w	2(a0),2(a1)
00008A78 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008A7E 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008A84 135C 0038                  		move.b	(a4)+,$38(a1)
00008A88 B3C8                       		cmpa.l	a0,a1
00008A8A 6400                       		bcc.s	loc_84EE
00008A8C 6100 0000                  		bsr.w	DisplaySprite2
00008A90                            
00008A90                            loc_84EE:
00008A90 51C9 FFBC                  		dbf	d1,loc_84AA
00008A94                            
00008A94                            loc_84F2:
00008A94 6100 0000                  		bsr.w	DisplaySprite
00008A98 303C 00B9                  		move.w	#$B9,d0
00008A9C 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008AA2                            ; ===========================================================================
00008AA2                            ; ---------------------------------------------------------------------------
00008AA2                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008AA2                            ; ---------------------------------------------------------------------------
00008AA2 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008AB2 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008ABC 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008AC4 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008ACC                            
00008ACC                            ; ---------------------------------------------------------------------------
00008ACC                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008ACC                            ; ---------------------------------------------------------------------------
00008ACC                            
00008ACC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008ACC                            
00008ACC                            
00008ACC                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008ACC 43F8 D000                  		lea	($FFFFD000).w,a1
00008AD0 0829 0003 0022             		btst	#3,$22(a1)
00008AD6 6700                       		beq.s	locret_856E
00008AD8 3029 0008                  		move.w	8(a1),d0
00008ADC 9068 0008                  		sub.w	8(a0),d0
00008AE0 D041                       		add.w	d1,d0
00008AE2 E248                       		lsr.w	#1,d0
00008AE4 0828 0000 0001             		btst	#0,1(a0)
00008AEA 6700                       		beq.s	loc_854E
00008AEC 4640                       		not.w	d0
00008AEE D041                       		add.w	d1,d0
00008AF0                            
00008AF0                            loc_854E:
00008AF0 7200                       		moveq	#0,d1
00008AF2 1232 0000                  		move.b	(a2,d0.w),d1
00008AF6 3028 000C                  		move.w	$C(a0),d0
00008AFA 9041                       		sub.w	d1,d0
00008AFC 7200                       		moveq	#0,d1
00008AFE 1229 0016                  		move.b	$16(a1),d1
00008B02 9041                       		sub.w	d1,d0
00008B04 3340 000C                  		move.w	d0,$C(a1)
00008B08 9468 0008                  		sub.w	8(a0),d2
00008B0C 9569 0008                  		sub.w	d2,8(a1)
00008B10                            
00008B10                            locret_856E:
00008B10 4E75                       		rts	
00008B12                            ; End of function SlopeObject2
00008B12                            
00008B12                            ; ===========================================================================
00008B12                            ; ---------------------------------------------------------------------------
00008B12                            ; Collision data for GHZ collapsing ledge
00008B12                            ; ---------------------------------------------------------------------------
00008B12                            Obj1A_SlopeData:
00008B12                            		incbin	misc\ghzledge.bin
00008B42                            		even
00008B42                            
00008B42                            ; ---------------------------------------------------------------------------
00008B42                            ; Sprite mappings - GHZ	collapsing ledge
00008B42                            ; ---------------------------------------------------------------------------
00008B42                            Map_obj1A:
00008B42                            	include "_maps\obj1A.asm"
00008B42                            ; ---------------------------------------------------------------------------
00008B42                            ; Sprite mappings - GHZ	collapsing ledge
00008B42                            ; ---------------------------------------------------------------------------
00008B42 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008B46 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008B4A 10                         byte_85A8:	dc.b $10
00008B4B C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008B50 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008B55 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008B5A E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008B5F D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008B64 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008B69 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008B6E F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008B73 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008B78 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008B7D 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008B82 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008B87 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008B8C 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008B91 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008B96 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008B9B 10                         byte_85F9:	dc.b $10
00008B9C C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008BA1 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008BA6 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008BAB E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008BB0 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008BB5 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008BBA F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008BBF F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008BC4 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008BC9 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008BCE 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008BD3 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008BD8 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008BDD 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008BE2 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008BE7 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008BEC 19                         byte_864A:	dc.b $19
00008BED C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008BF2 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008BF7 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008BFC D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008C01 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008C06 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008C0B E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008C10 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008C15 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008C1A D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008C1F F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008C24 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008C29 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008C2E F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008C33 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008C38 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008C3D 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008C42 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008C47 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008C4C 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008C51 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008C56 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008C5B 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008C60 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008C65 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008C6A 19                         byte_86C8:	dc.b $19
00008C6B C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008C70 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008C75 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008C7A D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008C7F E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008C84 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008C89 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008C8E E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008C93 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008C98 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008C9D F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008CA2 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008CA7 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008CAC F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008CB1 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008CB6 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008CBB 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008CC0 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008CC5 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008CCA 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008CCF 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008CD4 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008CD9 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008CDE 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008CE3 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008CE8                            		even
00008CE8                            		even
00008CE8                            
00008CE8                            ; ---------------------------------------------------------------------------
00008CE8                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008CE8                            ; ---------------------------------------------------------------------------
00008CE8                            Map_obj53:
00008CE8                            	include "_maps\obj53.asm"
00008CE8                            ; ---------------------------------------------------------------------------
00008CE8                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008CE8                            ; ---------------------------------------------------------------------------
00008CE8 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008CEC 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008CF0 04                         byte_874E:	dc.b 4
00008CF1 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008CF6 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008CFB F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008D00 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008D05 08                         byte_8763:	dc.b 8
00008D06 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008D0B F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008D10 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008D15 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008D1A 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008D1F 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008D24 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008D29 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008D2E 04                         byte_878C:	dc.b 4
00008D2F F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008D34 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008D39 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008D3E 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008D43 08                         byte_87A1:	dc.b 8
00008D44 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008D49 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008D4E F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008D53 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008D58 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008D5D 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008D62 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008D67 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008D6C                            		even
00008D6C                            		even
00008D6C                            
00008D6C                            ; ===========================================================================
00008D6C                            ; ---------------------------------------------------------------------------
00008D6C                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008D6C                            ; ---------------------------------------------------------------------------
00008D6C                            
00008D6C                            Obj1C:					; XREF: Obj_Index
00008D6C 7000                       		moveq	#0,d0
00008D6E 1028 0024                  		move.b	$24(a0),d0
00008D72 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008D76 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008D7A                            ; ===========================================================================
00008D7A 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008D7C 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008D7E                            ; ===========================================================================
00008D7E                            
00008D7E                            Obj1C_Main:				; XREF: Obj1C_Index
00008D7E 5428 0024                  		addq.b	#2,$24(a0)
00008D82 7000                       		moveq	#0,d0
00008D84 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008D88 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008D8C 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008D90 2159 0004                  		move.l	(a1)+,4(a0)
00008D94 3159 0002                  		move.w	(a1)+,2(a0)
00008D98 0028 0004 0001             		ori.b	#4,1(a0)
00008D9E 1159 001A                  		move.b	(a1)+,$1A(a0)
00008DA2 1159 0019                  		move.b	(a1)+,$19(a0)
00008DA6 1159 0018                  		move.b	(a1)+,$18(a0)
00008DAA 1159 0020                  		move.b	(a1)+,$20(a0)
00008DAE                            
00008DAE                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008DAE 3028 0008                  		move.w	8(a0),d0
00008DB2 0240 FF80                  		andi.w	#$FF80,d0
00008DB6 3238 F700                  		move.w	($FFFFF700).w,d1
00008DBA 0441 0080                  		subi.w	#$80,d1
00008DBE 0241 FF80                  		andi.w	#$FF80,d1
00008DC2 9041                       		sub.w	d1,d0
00008DC4 0C40 0280                  		cmpi.w	#$280,d0
00008DC8 6200 0000                  		bhi.w	DeleteObject
00008DCC 6000 0000                  		bra.w	DisplaySprite
00008DD0                            ; ===========================================================================
00008DD0                            ; ---------------------------------------------------------------------------
00008DD0                            ; Variables for	object $1C are stored in an array
00008DD0                            ; ---------------------------------------------------------------------------
00008DD0 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008DD4 44D8                       		dc.w $44D8		; VRAM setting
00008DD6 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008DDA 0000 0000                  		dc.l Map_obj1C
00008DDE 44D8                       		dc.w $44D8
00008DE0 0008 0200                  		dc.b 0,	8, 2, 0
00008DE4 0000 0000                  		dc.l Map_obj1C
00008DE8 44D8                       		dc.w $44D8
00008DEA 0008 0200                  		dc.b 0,	8, 2, 0
00008DEE 0000 7EE2                  		dc.l Map_obj11
00008DF2 438E                       		dc.w $438E
00008DF4 0110 0100                  		dc.b 1,	$10, 1,	0
00008DF8                            ; ---------------------------------------------------------------------------
00008DF8                            ; Sprite mappings - SLZ	lava thrower
00008DF8                            ; ---------------------------------------------------------------------------
00008DF8                            Map_obj1C:
00008DF8                            	include "_maps\obj1C.asm"
00008DF8                            ; ---------------------------------------------------------------------------
00008DF8                            ; Sprite mappings - SLZ	lava thrower
00008DF8                            ; ---------------------------------------------------------------------------
00008DF8 0000                       		dc.w byte_8858-Map_obj1C
00008DFA 01                         byte_8858:	dc.b 1
00008DFB F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008E00                            		even
00008E00                            		even
00008E00                            
00008E00                            ; ===========================================================================
00008E00                            ; ---------------------------------------------------------------------------
00008E00                            ; Object 1D - switch that activates when Sonic touches it
00008E00                            ; (this	is not used anywhere in	the game)
00008E00                            ; ---------------------------------------------------------------------------
00008E00                            
00008E00                            Obj1D:					; XREF: Obj_Index
00008E00 7000                       		moveq	#0,d0
00008E02 1028 0024                  		move.b	$24(a0),d0
00008E06 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008E0A 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008E0E                            ; ===========================================================================
00008E0E 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008E10 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008E12 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008E14                            ; ===========================================================================
00008E14                            
00008E14                            Obj1D_Main:				; XREF: Obj1D_Index
00008E14 5428 0024                  		addq.b	#2,$24(a0)
00008E18 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008E20 317C 4000 0002             		move.w	#$4000,2(a0)
00008E26 117C 0004 0001             		move.b	#4,1(a0)
00008E2C 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008E32 117C 0010 0019             		move.b	#$10,$19(a0)
00008E38 117C 0005 0018             		move.b	#5,$18(a0)
00008E3E                            
00008E3E                            Obj1D_Action:				; XREF: Obj1D_Index
00008E3E 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008E44 323C 0010                  		move.w	#$10,d1
00008E48 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008E4C 6700                       		beq.s	Obj1D_ChkDel
00008E4E 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008E52 7001                       		moveq	#1,d0
00008E54 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008E58                            
00008E58                            Obj1D_ChkDel:
00008E58 6100 0000                  		bsr.w	DisplaySprite
00008E5C 3028 0008                  		move.w	8(a0),d0
00008E60 0240 FF80                  		andi.w	#$FF80,d0
00008E64 3238 F700                  		move.w	($FFFFF700).w,d1
00008E68 0441 0080                  		subi.w	#$80,d1
00008E6C 0241 FF80                  		andi.w	#$FF80,d1
00008E70 9041                       		sub.w	d1,d0
00008E72 0C40 0280                  		cmpi.w	#$280,d0
00008E76 6200 0000                  		bhi.w	Obj1D_Delete
00008E7A 4E75                       		rts	
00008E7C                            ; ===========================================================================
00008E7C                            
00008E7C                            Obj1D_Delete:				; XREF: Obj1D_Index
00008E7C 6100 0000                  		bsr.w	DeleteObject
00008E80 4E75                       		rts	
00008E82                            ; ---------------------------------------------------------------------------
00008E82                            ; Subroutine to	check if Sonic touches the object
00008E82                            ; ---------------------------------------------------------------------------
00008E82                            
00008E82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E82                            
00008E82                            
00008E82                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008E82 43F8 D000                  		lea	($FFFFD000).w,a1
00008E86 3029 0008                  		move.w	8(a1),d0
00008E8A 9068 0008                  		sub.w	8(a0),d0
00008E8E D041                       		add.w	d1,d0
00008E90 6B00                       		bmi.s	loc_8918
00008E92 D241                       		add.w	d1,d1
00008E94 B041                       		cmp.w	d1,d0
00008E96 6400                       		bcc.s	loc_8918
00008E98 3429 000C                  		move.w	$C(a1),d2
00008E9C 1229 0016                  		move.b	$16(a1),d1
00008EA0 4881                       		ext.w	d1
00008EA2 D242                       		add.w	d2,d1
00008EA4 3028 000C                  		move.w	$C(a0),d0
00008EA8 0440 0010                  		subi.w	#$10,d0
00008EAC 9041                       		sub.w	d1,d0
00008EAE 6200                       		bhi.s	loc_8918
00008EB0 0C40 FFF0                  		cmpi.w	#-$10,d0
00008EB4 6500                       		bcs.s	loc_8918
00008EB6 70FF                       		moveq	#-1,d0
00008EB8 4E75                       		rts	
00008EBA                            ; ===========================================================================
00008EBA                            
00008EBA                            loc_8918:
00008EBA 7000                       		moveq	#0,d0
00008EBC 4E75                       		rts	
00008EBE                            ; End of function Obj1D_ChkTouch
00008EBE                            
00008EBE                            ; ===========================================================================
00008EBE                            ; ---------------------------------------------------------------------------
00008EBE                            ; Sprite mappings - object 1D
00008EBE                            ; ---------------------------------------------------------------------------
00008EBE                            Map_obj1D:
00008EBE                            	include "_maps\obj1D.asm"
00008EBE                            ; ---------------------------------------------------------------------------
00008EBE                            ; Sprite mappings - object 1D
00008EBE                            ; ---------------------------------------------------------------------------
00008EBE 0000                       		dc.w byte_891E-Map_obj1D
00008EC0 04                         byte_891E:	dc.b 4
00008EC1 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008EC6 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008ECB E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008ED0 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008ED6 00                         		even
00008ED6 00                         		even
00008ED6                            
00008ED6                            ; ===========================================================================
00008ED6                            ; ---------------------------------------------------------------------------
00008ED6                            ; Object 2A - doors (SBZ)
00008ED6                            ; ---------------------------------------------------------------------------
00008ED6                            
00008ED6                            Obj2A:					; XREF: Obj_Index
00008ED6 7000                       		moveq	#0,d0
00008ED8 1028 0024                  		move.b	$24(a0),d0
00008EDC 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008EE0 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008EE4                            ; ===========================================================================
00008EE4 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008EE6 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008EE8                            ; ===========================================================================
00008EE8                            
00008EE8                            Obj2A_Main:				; XREF: Obj2A_Index
00008EE8 5428 0024                  		addq.b	#2,$24(a0)
00008EEC 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008EF4 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008EFA 0028 0004 0001             		ori.b	#4,1(a0)
00008F00 117C 0008 0019             		move.b	#8,$19(a0)
00008F06 117C 0004 0018             		move.b	#4,$18(a0)
00008F0C                            
00008F0C                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008F0C 323C 0040                  		move.w	#$40,d1
00008F10 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008F14 3038 D008                  		move.w	($FFFFD008).w,d0
00008F18 D041                       		add.w	d1,d0
00008F1A B068 0008                  		cmp.w	8(a0),d0
00008F1E 6500                       		bcs.s	Obj2A_Animate
00008F20 9041                       		sub.w	d1,d0
00008F22 9041                       		sub.w	d1,d0
00008F24 B068 0008                  		cmp.w	8(a0),d0
00008F28 6400                       		bcc.s	Obj2A_Animate
00008F2A D041                       		add.w	d1,d0
00008F2C B068 0008                  		cmp.w	8(a0),d0
00008F30 6400                       		bcc.s	loc_899A
00008F32 0828 0000 0022             		btst	#0,$22(a0)
00008F38 6600                       		bne.s	Obj2A_Animate
00008F3A 6000                       		bra.s	Obj2A_Open
00008F3C                            ; ===========================================================================
00008F3C                            
00008F3C                            loc_899A:				; XREF: Obj2A_OpenShut
00008F3C 0828 0000 0022             		btst	#0,$22(a0)
00008F42 6700                       		beq.s	Obj2A_Animate
00008F44                            
00008F44                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00008F44 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008F4A                            
00008F4A                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008F4A 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00008F50 6100 0000                  		bsr.w	AnimateSprite
00008F54 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008F58 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008F5A 323C 0011                  		move.w	#$11,d1
00008F5E 343C 0020                  		move.w	#$20,d2
00008F62 3602                       		move.w	d2,d3
00008F64 5243                       		addq.w	#1,d3
00008F66 3828 0008                  		move.w	8(a0),d4
00008F6A 6100 0000                  		bsr.w	SolidObject
00008F6E                            
00008F6E                            Obj2A_MarkAsUsed:
00008F6E 6000 0000                  		bra.w	MarkObjGone
00008F72                            ; ===========================================================================
00008F72                            Ani_obj2A:
00008F72                            	include "_anim\obj2A.asm"
00008F72                            ; ---------------------------------------------------------------------------
00008F72                            ; Animation script - doors (SBZ)
00008F72                            ; ---------------------------------------------------------------------------
00008F72 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00008F74 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00008F76 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00008F82 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00008F8E                            		even
00008F8E                            		even
00008F8E                            
00008F8E                            ; ---------------------------------------------------------------------------
00008F8E                            ; Sprite mappings - doors (SBZ)
00008F8E                            ; ---------------------------------------------------------------------------
00008F8E                            Map_obj2A:
00008F8E                            	include "_maps\obj2A.asm"
00008F8E                            ; ---------------------------------------------------------------------------
00008F8E                            ; Sprite mappings - doors (SBZ)
00008F8E                            ; ---------------------------------------------------------------------------
00008F8E 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00008F92 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00008F96 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00008F9A 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00008F9E 0000                       		dc.w byte_8A56-Map_obj2A
00008FA0 02                         byte_89FE:	dc.b 2
00008FA1 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00008FA6 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00008FAB 02                         byte_8A09:	dc.b 2
00008FAC DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00008FB1 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00008FB6 02                         byte_8A14:	dc.b 2
00008FB7 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00008FBC 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00008FC1 02                         byte_8A1F:	dc.b 2
00008FC2 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00008FC7 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00008FCC 02                         byte_8A2A:	dc.b 2
00008FCD D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00008FD2 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00008FD7 02                         byte_8A35:	dc.b 2
00008FD8 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00008FDD 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00008FE2 02                         byte_8A40:	dc.b 2
00008FE3 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00008FE8 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00008FED 02                         byte_8A4B:	dc.b 2
00008FEE C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00008FF3 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00008FF8 02                         byte_8A56:	dc.b 2
00008FF9 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00008FFE 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00009004 00                         		even
00009004 00                         		even
00009004                            
00009004                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009004                            
00009004                            
00009004                            Obj44_SolidWall:			; XREF: Obj44_Solid
00009004 6100 0000                  		bsr.w	Obj44_SolidWall2
00009008 6700                       		beq.s	loc_8AA8
0000900A 6B00 0000                  		bmi.w	loc_8AC4
0000900E 4A40                       		tst.w	d0
00009010 6700 0000                  		beq.w	loc_8A92
00009014 6B00                       		bmi.s	loc_8A7C
00009016 4A69 0010                  		tst.w	$10(a1)
0000901A 6B00                       		bmi.s	loc_8A92
0000901C 6000                       		bra.s	loc_8A82
0000901E                            ; ===========================================================================
0000901E                            
0000901E                            loc_8A7C:
0000901E 4A69 0010                  		tst.w	$10(a1)
00009022 6A00                       		bpl.s	loc_8A92
00009024                            
00009024                            loc_8A82:
00009024 9169 0008                  		sub.w	d0,8(a1)
00009028 337C 0000 0014             		move.w	#0,$14(a1)
0000902E 337C 0000 0010             		move.w	#0,$10(a1)
00009034                            
00009034                            loc_8A92:
00009034 0829 0001 0022             		btst	#1,$22(a1)
0000903A 6600                       		bne.s	loc_8AB6
0000903C 08E9 0005 0022             		bset	#5,$22(a1)
00009042 08E8 0005 0022             		bset	#5,$22(a0)
00009048 4E75                       		rts	
0000904A                            ; ===========================================================================
0000904A                            
0000904A                            loc_8AA8:
0000904A 0828 0005 0022             		btst	#5,$22(a0)
00009050 6700                       		beq.s	locret_8AC2
00009052 337C 0001 001C             		move.w	#1,$1C(a1)
00009058                            
00009058                            loc_8AB6:
00009058 08A8 0005 0022             		bclr	#5,$22(a0)
0000905E 08A9 0005 0022             		bclr	#5,$22(a1)
00009064                            
00009064                            locret_8AC2:
00009064 4E75                       		rts	
00009066                            ; ===========================================================================
00009066                            
00009066                            loc_8AC4:
00009066 4A69 0012                  		tst.w	$12(a1)
0000906A 6A00                       		bpl.s	locret_8AD8
0000906C 4A43                       		tst.w	d3
0000906E 6A00                       		bpl.s	locret_8AD8
00009070 9769 000C                  		sub.w	d3,$C(a1)
00009074 337C 0000 0012             		move.w	#0,$12(a1)
0000907A                            
0000907A                            locret_8AD8:
0000907A 4E75                       		rts	
0000907C                            ; End of function Obj44_SolidWall
0000907C                            
0000907C                            
0000907C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000907C                            
0000907C                            
0000907C                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
0000907C 43F8 D000                  		lea	($FFFFD000).w,a1
00009080 3029 0008                  		move.w	8(a1),d0
00009084 9068 0008                  		sub.w	8(a0),d0
00009088 D041                       		add.w	d1,d0
0000908A 6B00                       		bmi.s	loc_8B48
0000908C 3601                       		move.w	d1,d3
0000908E D643                       		add.w	d3,d3
00009090 B043                       		cmp.w	d3,d0
00009092 6200                       		bhi.s	loc_8B48
00009094 1629 0016                  		move.b	$16(a1),d3
00009098 4883                       		ext.w	d3
0000909A D443                       		add.w	d3,d2
0000909C 3629 000C                  		move.w	$C(a1),d3
000090A0 9668 000C                  		sub.w	$C(a0),d3
000090A4 D642                       		add.w	d2,d3
000090A6 6B00                       		bmi.s	loc_8B48
000090A8 3802                       		move.w	d2,d4
000090AA D844                       		add.w	d4,d4
000090AC B644                       		cmp.w	d4,d3
000090AE 6400                       		bcc.s	loc_8B48
000090B0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000090B4 6B00                       		bmi.s	loc_8B48
000090B6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000090BC 6400                       		bcc.s	loc_8B48
000090BE 4A78 FE08                  		tst.w	($FFFFFE08).w
000090C2 6600                       		bne.s	loc_8B48
000090C4 3A00                       		move.w	d0,d5
000090C6 B240                       		cmp.w	d0,d1
000090C8 6400                       		bcc.s	loc_8B30
000090CA D241                       		add.w	d1,d1
000090CC 9041                       		sub.w	d1,d0
000090CE 3A00                       		move.w	d0,d5
000090D0 4445                       		neg.w	d5
000090D2                            
000090D2                            loc_8B30:
000090D2 3203                       		move.w	d3,d1
000090D4 B443                       		cmp.w	d3,d2
000090D6 6400                       		bcc.s	loc_8B3C
000090D8 9644                       		sub.w	d4,d3
000090DA 3203                       		move.w	d3,d1
000090DC 4441                       		neg.w	d1
000090DE                            
000090DE                            loc_8B3C:
000090DE BA41                       		cmp.w	d1,d5
000090E0 6200                       		bhi.s	loc_8B44
000090E2 7801                       		moveq	#1,d4
000090E4 4E75                       		rts	
000090E6                            ; ===========================================================================
000090E6                            
000090E6                            loc_8B44:
000090E6 78FF                       		moveq	#-1,d4
000090E8 4E75                       		rts	
000090EA                            ; ===========================================================================
000090EA                            
000090EA                            loc_8B48:
000090EA 7800                       		moveq	#0,d4
000090EC 4E75                       		rts	
000090EE                            ; End of function Obj44_SolidWall2
000090EE                            
000090EE                            ; ===========================================================================
000090EE                            ; ---------------------------------------------------------------------------
000090EE                            ; Object 1E - Ball Hog enemy (SBZ)
000090EE                            ; ---------------------------------------------------------------------------
000090EE                            
000090EE                            Obj1E:					; XREF: Obj_Index
000090EE 7000                       		moveq	#0,d0
000090F0 1028 0024                  		move.b	$24(a0),d0
000090F4 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
000090F8 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
000090FC                            ; ===========================================================================
000090FC 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
000090FE 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009100                            ; ===========================================================================
00009100                            
00009100                            Obj1E_Main:				; XREF: Obj1E_Index
00009100 117C 0013 0016             		move.b	#$13,$16(a0)
00009106 117C 0008 0017             		move.b	#8,$17(a0)
0000910C 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009114 317C 2302 0002             		move.w	#$2302,2(a0)
0000911A 117C 0004 0001             		move.b	#4,1(a0)
00009120 117C 0004 0018             		move.b	#4,$18(a0)
00009126 117C 0005 0020             		move.b	#5,$20(a0)
0000912C 117C 000C 0019             		move.b	#$C,$19(a0)
00009132 6100 0000                  		bsr.w	ObjectFall
00009136 4EB9 0000 0000             		jsr	ObjHitFloor
0000913C 4A41                       		tst.w	d1
0000913E 6A00                       		bpl.s	locret_8BAC
00009140 D368 000C                  		add.w	d1,$C(a0)
00009144 317C 0000 0012             		move.w	#0,$12(a0)
0000914A 5428 0024                  		addq.b	#2,$24(a0)
0000914E                            
0000914E                            locret_8BAC:
0000914E 4E75                       		rts	
00009150                            ; ===========================================================================
00009150                            
00009150                            Obj1E_Action:				; XREF: Obj1E_Index
00009150 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009156 6100 0000                  		bsr.w	AnimateSprite
0000915A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009160 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009162 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009166 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009168 6000                       		bra.s	Obj1E_MarkAsGone
0000916A                            ; ===========================================================================
0000916A                            
0000916A                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000916A 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
0000916E                            
0000916E                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
0000916E 6000 0000                  		bra.w	MarkObjGone
00009172                            ; ===========================================================================
00009172                            
00009172                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009172 117C 0001 0032             		move.b	#1,$32(a0)
00009178 6100 0000                  		bsr.w	SingleObjLoad
0000917C 6600                       		bne.s	loc_8C1A
0000917E 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009182 3368 0008 0008             		move.w	8(a0),8(a1)
00009188 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000918E 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009194 337C 0000 0012             		move.w	#0,$12(a1)
0000919A 70FC                       		moveq	#-4,d0
0000919C 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
000091A2 6700                       		beq.s	loc_8C0A	; if not, branch
000091A4 4440                       		neg.w	d0
000091A6 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
000091AA                            
000091AA                            loc_8C0A:
000091AA D169 0008                  		add.w	d0,8(a1)
000091AE 0669 000C 000C             		addi.w	#$C,$C(a1)
000091B4 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
000091BA                            
000091BA                            loc_8C1A:
000091BA 60B2                       		bra.s	Obj1E_MarkAsGone
000091BC                            ; ===========================================================================
000091BC                            ; ---------------------------------------------------------------------------
000091BC                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
000091BC                            ; ---------------------------------------------------------------------------
000091BC                            
000091BC                            Obj20:					; XREF: Obj_Index
000091BC 7000                       		moveq	#0,d0
000091BE 1028 0024                  		move.b	$24(a0),d0
000091C2 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
000091C6 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
000091CA                            ; ===========================================================================
000091CA 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
000091CC 0000                       		dc.w Obj20_Bounce-Obj20_Index
000091CE                            ; ===========================================================================
000091CE                            
000091CE                            Obj20_Main:				; XREF: Obj20_Index
000091CE 5428 0024                  		addq.b	#2,$24(a0)
000091D2 117C 0007 0016             		move.b	#7,$16(a0)
000091D8 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000091E0 317C 2302 0002             		move.w	#$2302,2(a0)
000091E6 117C 0004 0001             		move.b	#4,1(a0)
000091EC 117C 0003 0018             		move.b	#3,$18(a0)
000091F2 117C 0087 0020             		move.b	#$87,$20(a0)
000091F8 117C 0008 0019             		move.b	#8,$19(a0)
000091FE 7000                       		moveq	#0,d0
00009200 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009204 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00009208 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
0000920C 117C 0004 001A             		move.b	#4,$1A(a0)
00009212                            
00009212                            Obj20_Bounce:				; XREF: Obj20_Index
00009212 4EB9 0000 0000             		jsr	ObjectFall
00009218 4A68 0012                  		tst.w	$12(a0)
0000921C 6B00                       		bmi.s	Obj20_ChkExplode
0000921E 4EB9 0000 0000             		jsr	ObjHitFloor
00009224 4A41                       		tst.w	d1
00009226 6A00                       		bpl.s	Obj20_ChkExplode
00009228 D368 000C                  		add.w	d1,$C(a0)
0000922C 317C FD00 0012             		move.w	#-$300,$12(a0)
00009232 4A03                       		tst.b	d3
00009234 6700                       		beq.s	Obj20_ChkExplode
00009236 6B00                       		bmi.s	loc_8CA4
00009238 4A68 0010                  		tst.w	$10(a0)
0000923C 6A00                       		bpl.s	Obj20_ChkExplode
0000923E 4468 0010                  		neg.w	$10(a0)
00009242 6000                       		bra.s	Obj20_ChkExplode
00009244                            ; ===========================================================================
00009244                            
00009244                            loc_8CA4:				; XREF: Obj20_Bounce
00009244 4A68 0010                  		tst.w	$10(a0)
00009248 6B00                       		bmi.s	Obj20_ChkExplode
0000924A 4468 0010                  		neg.w	$10(a0)
0000924E                            
0000924E                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
0000924E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009252 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009254 10BC 0024                  		move.b	#$24,0(a0)
00009258 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
0000925C 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009262 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009266                            ; ===========================================================================
00009266                            
00009266                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009266 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000926A 6A00                       		bpl.s	Obj20_Display
0000926C 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009272 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00009278                            
00009278                            Obj20_Display:
00009278 6100 0000                  		bsr.w	DisplaySprite
0000927C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009280 0640 00E0                  		addi.w	#$E0,d0
00009284 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00009288 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000928C 4E75                       		rts	
0000928E                            ; ===========================================================================
0000928E                            ; ---------------------------------------------------------------------------
0000928E                            ; Object 24 - explosion	from a destroyed monitor
0000928E                            ; ---------------------------------------------------------------------------
0000928E                            
0000928E                            Obj24:					; XREF: Obj_Index
0000928E 7000                       		moveq	#0,d0
00009290 1028 0024                  		move.b	$24(a0),d0
00009294 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00009298 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
0000929C                            ; ===========================================================================
0000929C 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000929E 0000                       		dc.w Obj24_Animate-Obj24_Index
000092A0                            ; ===========================================================================
000092A0                            
000092A0                            Obj24_Main:				; XREF: Obj24_Index
000092A0 5428 0024                  		addq.b	#2,$24(a0)
000092A4 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
000092AC 317C 041C 0002             		move.w	#$41C,2(a0)
000092B2 117C 0004 0001             		move.b	#4,1(a0)
000092B8 117C 0001 0018             		move.b	#1,$18(a0)
000092BE 117C 0000 0020             		move.b	#0,$20(a0)
000092C4 117C 000C 0019             		move.b	#$C,$19(a0)
000092CA 117C 0009 001E             		move.b	#9,$1E(a0)
000092D0 117C 0000 001A             		move.b	#0,$1A(a0)
000092D6 303C 00A5                  		move.w	#$A5,d0
000092DA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play explosion sound
000092E0                            
000092E0                            Obj24_Animate:				; XREF: Obj24_Index
000092E0 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000092E4 6A00                       		bpl.s	Obj24_Display
000092E6 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
000092EC 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000092F0 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
000092F6 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000092FA                            
000092FA                            Obj24_Display:
000092FA 6000 0000                  		bra.w	DisplaySprite
000092FE                            ; ===========================================================================
000092FE                            ; ---------------------------------------------------------------------------
000092FE                            ; Object 27 - explosion	from a destroyed enemy
000092FE                            ; ---------------------------------------------------------------------------
000092FE                            
000092FE                            Obj27:					; XREF: Obj_Index
000092FE 7000                       		moveq	#0,d0
00009300 1028 0024                  		move.b	$24(a0),d0
00009304 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00009308 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
0000930C                            ; ===========================================================================
0000930C 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
0000930E 0000                       		dc.w Obj27_Main-Obj27_Index
00009310 0000                       		dc.w Obj27_Animate-Obj27_Index
00009312                            ; ===========================================================================
00009312                            
00009312                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00009312 5428 0024                  		addq.b	#2,$24(a0)
00009316 6100 0000                  		bsr.w	SingleObjLoad
0000931A 6600                       		bne.s	Obj27_Main
0000931C 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00009320 3368 0008 0008             		move.w	8(a0),8(a1)
00009326 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000932C 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009332                            
00009332                            Obj27_Main:				; XREF: Obj27_Index
00009332 5428 0024                  		addq.b	#2,$24(a0)
00009336 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
0000933E 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009344 117C 0004 0001             		move.b	#4,1(a0)
0000934A 117C 0001 0018             		move.b	#1,$18(a0)
00009350 117C 0000 0020             		move.b	#0,$20(a0)
00009356 117C 000C 0019             		move.b	#$C,$19(a0)
0000935C                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000935C 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009362 117C 0000 001A             		move.b	#0,$1A(a0)
00009368 303C 00C1                  		move.w	#$C1,d0
0000936C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009372                            
00009372 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
00009378 1028 0028                  		move.b	$28(a0),d0
0000937C 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
00009382 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
00009388                            
00009388                            Obj27_Animate:				; XREF: Obj27_Index
00009388 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000938C 6A00                       		bpl.s	Obj27_Display
0000938E                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000938E 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009394 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009398 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000939E 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000093A2                            
000093A2                            Obj27_Display:
000093A2 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
000093A8 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
000093AE 6000 0000                  		bra.w	DisplaySprite
000093B2                            ; ===========================================================================
000093B2                            ; ---------------------------------------------------------------------------
000093B2                            Obj27_ExplosionXYSpd:
000093B2                            		; dc.w	-$350, -$300	; Left
000093B2                            		; dc.w	-$200, -$450	; Near middle (left)
000093B2                            		; dc.w	0, -$500	; Middle
000093B2                            		; dc.w	$200, -$450	; Near middle (right)
000093B2                            		; dc.w	$350, -$300	; Right
000093B2                            
000093B2 FEB0 FC00                  		dc.w	-$150, -$400	; Left
000093B6 FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
000093BA 0000 FA00                  		dc.w	0, -$600	; Middle
000093BE 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
000093C2 0150 FC00                  		dc.w	$150, -$400	; Right
000093C6                            
000093C6 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
000093E0                            ; ---------------------------------------------------------------------------
000093E0                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
000093E0                            ; ---------------------------------------------------------------------------
000093E0                            
000093E0                            Obj3F:					; XREF: Obj_Index
000093E0 7000                       		moveq	#0,d0
000093E2 1028 0024                  		move.b	$24(a0),d0
000093E6 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
000093EA 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
000093EE                            ; ===========================================================================
000093EE 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
000093F0 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
000093F2                            ; ===========================================================================
000093F2                            
000093F2                            Obj3F_Main:				; XREF: Obj3F_Index
000093F2 5428 0024                  		addq.b	#2,$24(a0)
000093F6 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
000093FE 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009404 117C 0004 0001             		move.b	#4,1(a0)
0000940A 117C 0001 0018             		move.b	#1,$18(a0)
00009410 117C 0000 0020             		move.b	#0,$20(a0)
00009416 117C 000C 0019             		move.b	#$C,$19(a0)
0000941C 117C 0007 001E             		move.b	#7,$1E(a0)
00009422 117C 0000 001A             		move.b	#0,$1A(a0)
00009428 303C 00C4                  		move.w	#$C4,d0
0000942C 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00009432                            ; ===========================================================================
00009432                            Ani_obj1E:
00009432                            	include "_anim\obj1E.asm"
00009432                            ; ---------------------------------------------------------------------------
00009432                            ; Animation script - doors (SBZ)
00009432                            ; ---------------------------------------------------------------------------
00009432 0000                       		dc.w byte_8E4A-Ani_obj1E
00009434 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
0000944C 00                         		even
0000944C 00                         		even
0000944C                            
0000944C                            ; ---------------------------------------------------------------------------
0000944C                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000944C                            ; ---------------------------------------------------------------------------
0000944C                            Map_obj1E:
0000944C                            	include "_maps\obj1E.asm"
0000944C                            ; ---------------------------------------------------------------------------
0000944C                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000944C                            ; ---------------------------------------------------------------------------
0000944C 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
00009450 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
00009454 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
00009458 02                         byte_8E6E:	dc.b 2
00009459 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000945E FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00009463 02                         byte_8E79:	dc.b 2
00009464 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00009469 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
0000946E 02                         byte_8E84:	dc.b 2
0000946F F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00009474 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
00009479 02                         byte_8E8F:	dc.b 2
0000947A E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
0000947F F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00009484 01                         byte_8E9A:	dc.b 1
00009485 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000948A 01                         byte_8EA0:	dc.b 1
0000948B F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00009490                            		even
00009490                            		even
00009490                            
00009490                            ; ---------------------------------------------------------------------------
00009490                            ; Sprite mappings - explosion
00009490                            ; ---------------------------------------------------------------------------
00009490                            Map_obj24:
00009490                            	include "_maps\obj24.asm"
00009490                            ; ---------------------------------------------------------------------------
00009490                            ; Sprite mappings - explosion
00009490                            ; ---------------------------------------------------------------------------
00009490 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009494 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00009498 01                         byte_8EAE:	dc.b 1
00009499 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000949E 01                         byte_8EB4:	dc.b 1
0000949F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000094A4 01                         byte_8EBA:	dc.b 1
000094A5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000094AA 01                         byte_8EC0:	dc.b 1
000094AB F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
000094B0                            		even
000094B0                            		even
000094B0                            
000094B0                            ; ---------------------------------------------------------------------------
000094B0                            ; Sprite mappings - explosion
000094B0                            ; ---------------------------------------------------------------------------
000094B0 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
000094B4 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
000094B8 0000                       		dc.w byte_8EF7-Map_obj27
000094BA 01                         byte_8ED0:	dc.b 1
000094BB F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
000094C0 01                         byte_8ED6:	dc.b 1
000094C1 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
000094C6 01                         byte_8EDC:	dc.b 1
000094C7 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
000094CC 04                         byte_8EE2:	dc.b 4
000094CD EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
000094D2 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
000094D7 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
000094DC FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
000094E1 04                         byte_8EF7:	dc.b 4
000094E2 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
000094E7 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
000094EC 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
000094F1 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
000094F6                            		even
000094F6                            ; ---------------------------------------------------------------------------
000094F6                            ; Sprite mappings - explosion from when	a boss is destroyed
000094F6                            ; ---------------------------------------------------------------------------
000094F6 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
000094F8 0000                       		dc.w byte_8F16-Map_obj3F
000094FA 0000                       		dc.w byte_8F1C-Map_obj3F
000094FC FFD6                       		dc.w byte_8EE2-Map_obj3F
000094FE FFEB                       		dc.w byte_8EF7-Map_obj3F
00009500 01                         byte_8F16:	dc.b 1
00009501 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00009506 01                         byte_8F1C:	dc.b 1
00009507 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000950C                            		even
0000950C                            ; ===========================================================================
0000950C                            ; ---------------------------------------------------------------------------
0000950C                            ; Object 28 - animals
0000950C                            ; ---------------------------------------------------------------------------
0000950C                            
0000950C                            Obj28:					; XREF: Obj_Index
0000950C 7000                       		moveq	#0,d0
0000950E 1028 0024                  		move.b	$24(a0),d0
00009512 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00009516 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000951A                            ; ===========================================================================
0000951A 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000951E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009522 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00009526 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000952A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000952E 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00009532 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00009536 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000953A 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000953E 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00009542 0000                       		dc.w loc_92D6-Obj28_Index
00009544                            
00009544 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
00009550                            
00009550 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009554 0000 0000                  		dc.l Map_obj28
00009558 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000955C 0000 0000                  		dc.l Map_obj28a		; mappings address
00009560 FE80 FD00                  		dc.w $FE80, $FD00
00009564 0000 0000                  		dc.l Map_obj28
00009568 FEC0 FE80                  		dc.w $FEC0, $FE80
0000956C 0000 0000                  		dc.l Map_obj28a
00009570 FE40 FD00                  		dc.w $FE40, $FD00
00009574 0000 0000                  		dc.l Map_obj28b
00009578 FD00 FC00                  		dc.w $FD00, $FC00
0000957C 0000 0000                  		dc.l Map_obj28a
00009580 FD80 FC80                  		dc.w $FD80, $FC80
00009584 0000 0000                  		dc.l Map_obj28b
00009588                            
00009588 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00009598 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
000095A8 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
000095B4                            
000095B4 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
000095C8 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
000095DC 0000 0000                  		dc.l Map_obj28b
000095E0                            
000095E0 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
000095F2 0565 05B3                  		dc.w $565, $5B3
000095F6                            ; ===========================================================================
000095F6                            
000095F6                            Obj28_Ending:				; XREF: Obj28_Index
000095F6 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
000095FA 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
000095FE 7000                       		moveq	#0,d0
00009600 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009604 D040                       		add.w	d0,d0		; multiply d0 by 2
00009606 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000960A 0440 0014                  		subi.w	#$14,d0
0000960E 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009614 D040                       		add.w	d0,d0
00009616 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000961C 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009620 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009626 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000962C 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00009632 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009638 117C 000C 0016             		move.b	#$C,$16(a0)
0000963E 117C 0004 0001             		move.b	#4,1(a0)
00009644 08E8 0000 0001             		bset	#0,1(a0)
0000964A 117C 0006 0018             		move.b	#6,$18(a0)
00009650 117C 0008 0019             		move.b	#8,$19(a0)
00009656 117C 0007 001E             		move.b	#7,$1E(a0)
0000965C 6000 0000                  		bra.w	DisplaySprite
00009660                            ; ===========================================================================
00009660                            
00009660                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009660 5428 0024                  		addq.b	#2,$24(a0)
00009664 6100 95D8                  		bsr.w	RandomNumber
00009668 0240 0001                  		andi.w	#1,d0
0000966C 7200                       		moveq	#0,d1
0000966E 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009672 D241                       		add.w	d1,d1
00009674 D240                       		add.w	d0,d1
00009676 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000967A 1031 1000                  		move.b	(a1,d1.w),d0
0000967E 1140 0030                  		move.b	d0,$30(a0)
00009682 E748                       		lsl.w	#3,d0
00009684 43FA FECA                  		lea	Obj28_Variables(pc),a1
00009688 D2C0                       		adda.w	d0,a1
0000968A 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000968E 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009692 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00009696 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000969C 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
000096A2 6700                       		beq.s	loc_90C0	; if yes, branch
000096A4 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
000096AA                            
000096AA                            loc_90C0:
000096AA 117C 000C 0016             		move.b	#$C,$16(a0)
000096B0 117C 0004 0001             		move.b	#4,1(a0)
000096B6 08E8 0000 0001             		bset	#0,1(a0)
000096BC 117C 0006 0018             		move.b	#6,$18(a0)
000096C2 117C 0008 0019             		move.b	#8,$19(a0)
000096C8 117C 0007 001E             		move.b	#7,$1E(a0)
000096CE 117C 0002 001A             		move.b	#2,$1A(a0)
000096D4 317C FC00 0012             		move.w	#-$400,$12(a0)
000096DA 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000096DE 6600                       		bne.s	loc_911C
000096E0 6100 0000                  		bsr.w	SingleObjLoad
000096E4 6600                       		bne.s	Obj28_Display
000096E6 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000096EA 3368 0008 0008             		move.w	8(a0),8(a1)
000096F0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000096F6 3028 003E                  		move.w	$3E(a0),d0
000096FA E248                       		lsr.w	#1,d0
000096FC 1340 001A                  		move.b	d0,$1A(a1)
00009700                            
00009700                            Obj28_Display:
00009700 6000 0000                  		bra.w	DisplaySprite
00009704                            ; ===========================================================================
00009704                            
00009704                            loc_911C:
00009704 117C 0012 0024             		move.b	#$12,$24(a0)
0000970A 4268 0010                  		clr.w	$10(a0)
0000970E 6000 0000                  		bra.w	DisplaySprite
00009712                            ; ===========================================================================
00009712                            
00009712                            loc_912A:				; XREF: Obj28_Index
00009712 4A28 0001                  		tst.b	1(a0)
00009716 6A00 0000                  		bpl.w	DeleteObject
0000971A 6100 0000                  		bsr.w	ObjectFall
0000971E 4A68 0012                  		tst.w	$12(a0)
00009722 6B00                       		bmi.s	loc_9180
00009724 4EB9 0000 0000             		jsr	ObjHitFloor
0000972A 4A41                       		tst.w	d1
0000972C 6A00                       		bpl.s	loc_9180
0000972E D368 000C                  		add.w	d1,$C(a0)
00009732 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009738 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000973E 117C 0001 001A             		move.b	#1,$1A(a0)
00009744 1028 0030                  		move.b	$30(a0),d0
00009748 D000                       		add.b	d0,d0
0000974A 5800                       		addq.b	#4,d0
0000974C 1140 0024                  		move.b	d0,$24(a0)
00009750 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009754 6700                       		beq.s	loc_9180
00009756 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
0000975C 6700                       		beq.s	loc_9180
0000975E 4468 0010                  		neg.w	$10(a0)
00009762 0868 0000 0001             		bchg	#0,1(a0)
00009768                            
00009768                            loc_9180:
00009768 6000 0000                  		bra.w	DisplaySprite
0000976C                            ; ===========================================================================
0000976C                            
0000976C                            loc_9184:				; XREF: Obj28_Index
0000976C 6100 0000                  		bsr.w	ObjectFall
00009770 117C 0001 001A             		move.b	#1,$1A(a0)
00009776 4A68 0012                  		tst.w	$12(a0)
0000977A 6B00                       		bmi.s	loc_91AE
0000977C 117C 0000 001A             		move.b	#0,$1A(a0)
00009782 4EB9 0000 0000             		jsr	ObjHitFloor
00009788 4A41                       		tst.w	d1
0000978A 6A00                       		bpl.s	loc_91AE
0000978C D368 000C                  		add.w	d1,$C(a0)
00009790 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009796                            
00009796                            loc_91AE:
00009796 4A28 0028                  		tst.b	$28(a0)
0000979A 6600                       		bne.s	loc_9224
0000979C 4A28 0001                  		tst.b	1(a0)
000097A0 6A00 0000                  		bpl.w	DeleteObject
000097A4 6000 0000                  		bra.w	DisplaySprite
000097A8                            ; ===========================================================================
000097A8                            
000097A8                            loc_91C0:				; XREF: Obj28_Index
000097A8 6100 0000                  		bsr.w	SpeedToPos
000097AC 0668 0018 0012             		addi.w	#$18,$12(a0)
000097B2 4A68 0012                  		tst.w	$12(a0)
000097B6 6B00                       		bmi.s	loc_91FC
000097B8 4EB9 0000 0000             		jsr	ObjHitFloor
000097BE 4A41                       		tst.w	d1
000097C0 6A00                       		bpl.s	loc_91FC
000097C2 D368 000C                  		add.w	d1,$C(a0)
000097C6 3168 0034 0012             		move.w	$34(a0),$12(a0)
000097CC 4A28 0028                  		tst.b	$28(a0)
000097D0 6700                       		beq.s	loc_91FC
000097D2 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
000097D8 6700                       		beq.s	loc_91FC
000097DA 4468 0010                  		neg.w	$10(a0)
000097DE 0868 0000 0001             		bchg	#0,1(a0)
000097E4                            
000097E4                            loc_91FC:
000097E4 5328 001E                  		subq.b	#1,$1E(a0)
000097E8 6A00                       		bpl.s	loc_9212
000097EA 117C 0001 001E             		move.b	#1,$1E(a0)
000097F0 5228 001A                  		addq.b	#1,$1A(a0)
000097F4 0228 0001 001A             		andi.b	#1,$1A(a0)
000097FA                            
000097FA                            loc_9212:
000097FA 4A28 0028                  		tst.b	$28(a0)
000097FE 6600                       		bne.s	loc_9224
00009800 4A28 0001                  		tst.b	1(a0)
00009804 6A00 0000                  		bpl.w	DeleteObject
00009808 6000 0000                  		bra.w	DisplaySprite
0000980C                            ; ===========================================================================
0000980C                            
0000980C                            loc_9224:				; XREF: Obj28_Index
0000980C 3028 0008                  		move.w	8(a0),d0
00009810 9078 D008                  		sub.w	($FFFFD008).w,d0
00009814 6500                       		bcs.s	loc_923C
00009816 0440 0180                  		subi.w	#$180,d0
0000981A 6A00                       		bpl.s	loc_923C
0000981C 4A28 0001                  		tst.b	1(a0)
00009820 6A00 0000                  		bpl.w	DeleteObject
00009824                            
00009824                            loc_923C:
00009824 6000 0000                  		bra.w	DisplaySprite
00009828                            ; ===========================================================================
00009828                            
00009828                            loc_9240:				; XREF: Obj28_Index
00009828 4A28 0001                  		tst.b	1(a0)
0000982C 6A00 0000                  		bpl.w	DeleteObject
00009830 5368 0036                  		subq.w	#1,$36(a0)
00009834 6600 0000                  		bne.w	loc_925C
00009838 117C 0002 0024             		move.b	#2,$24(a0)
0000983E 117C 0003 0018             		move.b	#3,$18(a0)
00009844                            
00009844                            loc_925C:
00009844 6000 0000                  		bra.w	DisplaySprite
00009848                            ; ===========================================================================
00009848                            
00009848                            loc_9260:				; XREF: Obj28_Index
00009848 6100 0000                  		bsr.w	sub_9404
0000984C 6400                       		bcc.s	loc_927C
0000984E 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009854 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000985A 117C 000E 0024             		move.b	#$E,$24(a0)
00009860 6000 FF46                  		bra.w	loc_91C0
00009864                            ; ===========================================================================
00009864                            
00009864                            loc_927C:
00009864 6000 FFA6                  		bra.w	loc_9224
00009868                            ; ===========================================================================
00009868                            
00009868                            loc_9280:				; XREF: Obj28_Index
00009868 6100 0000                  		bsr.w	sub_9404
0000986C 6A00                       		bpl.s	loc_92B6
0000986E 4268 0010                  		clr.w	$10(a0)
00009872 4268 0032                  		clr.w	$32(a0)
00009876 6100 0000                  		bsr.w	SpeedToPos
0000987A 0668 0018 0012             		addi.w	#$18,$12(a0)
00009880 6100 0000                  		bsr.w	loc_93C4
00009884 6100 0000                  		bsr.w	loc_93EC
00009888 5328 001E                  		subq.b	#1,$1E(a0)
0000988C 6A00                       		bpl.s	loc_92B6
0000988E 117C 0001 001E             		move.b	#1,$1E(a0)
00009894 5228 001A                  		addq.b	#1,$1A(a0)
00009898 0228 0001 001A             		andi.b	#1,$1A(a0)
0000989E                            
0000989E                            loc_92B6:
0000989E 6000 FF6C                  		bra.w	loc_9224
000098A2                            ; ===========================================================================
000098A2                            
000098A2                            loc_92BA:				; XREF: Obj28_Index
000098A2 6100 0000                  		bsr.w	sub_9404
000098A6 6A00                       		bpl.s	loc_9310
000098A8 3168 0032 0010             		move.w	$32(a0),$10(a0)
000098AE 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098B4 117C 0004 0024             		move.b	#4,$24(a0)
000098BA 6000 FEB0                  		bra.w	loc_9184
000098BE                            ; ===========================================================================
000098BE                            
000098BE                            loc_92D6:				; XREF: Obj28_Index
000098BE 6100 0000                  		bsr.w	ObjectFall
000098C2 117C 0001 001A             		move.b	#1,$1A(a0)
000098C8 4A68 0012                  		tst.w	$12(a0)
000098CC 6B00                       		bmi.s	loc_9310
000098CE 117C 0000 001A             		move.b	#0,$1A(a0)
000098D4 4EB9 0000 0000             		jsr	ObjHitFloor
000098DA 4A41                       		tst.w	d1
000098DC 6A00                       		bpl.s	loc_9310
000098DE 4628 0029                  		not.b	$29(a0)
000098E2 6600                       		bne.s	loc_9306
000098E4 4468 0010                  		neg.w	$10(a0)
000098E8 0868 0000 0001             		bchg	#0,1(a0)
000098EE                            
000098EE                            loc_9306:
000098EE D368 000C                  		add.w	d1,$C(a0)
000098F2 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098F8                            
000098F8                            loc_9310:
000098F8 6000 FF12                  		bra.w	loc_9224
000098FC                            ; ===========================================================================
000098FC                            
000098FC                            loc_9314:				; XREF: Obj28_Index
000098FC 6100 0000                  		bsr.w	sub_9404
00009900 6A00                       		bpl.s	loc_932E
00009902 4268 0010                  		clr.w	$10(a0)
00009906 4268 0032                  		clr.w	$32(a0)
0000990A 6100 0000                  		bsr.w	ObjectFall
0000990E 6100 0000                  		bsr.w	loc_93C4
00009912 6100 0000                  		bsr.w	loc_93EC
00009916                            
00009916                            loc_932E:
00009916 6000 FEF4                  		bra.w	loc_9224
0000991A                            ; ===========================================================================
0000991A                            
0000991A                            loc_9332:				; XREF: Obj28_Index
0000991A 6100 0000                  		bsr.w	sub_9404
0000991E 6A00                       		bpl.s	loc_936C
00009920 6100 0000                  		bsr.w	ObjectFall
00009924 117C 0001 001A             		move.b	#1,$1A(a0)
0000992A 4A68 0012                  		tst.w	$12(a0)
0000992E 6B00                       		bmi.s	loc_936C
00009930 117C 0000 001A             		move.b	#0,$1A(a0)
00009936 4EB9 0000 0000             		jsr	ObjHitFloor
0000993C 4A41                       		tst.w	d1
0000993E 6A00                       		bpl.s	loc_936C
00009940 4468 0010                  		neg.w	$10(a0)
00009944 0868 0000 0001             		bchg	#0,1(a0)
0000994A D368 000C                  		add.w	d1,$C(a0)
0000994E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009954                            
00009954                            loc_936C:
00009954 6000 FEB6                  		bra.w	loc_9224
00009958                            ; ===========================================================================
00009958                            
00009958                            loc_9370:				; XREF: Obj28_Index
00009958 6100 0000                  		bsr.w	sub_9404
0000995C 6A00                       		bpl.s	loc_93C0
0000995E 6100 0000                  		bsr.w	SpeedToPos
00009962 0668 0018 0012             		addi.w	#$18,$12(a0)
00009968 4A68 0012                  		tst.w	$12(a0)
0000996C 6B00                       		bmi.s	loc_93AA
0000996E 4EB9 0000 0000             		jsr	ObjHitFloor
00009974 4A41                       		tst.w	d1
00009976 6A00                       		bpl.s	loc_93AA
00009978 4628 0029                  		not.b	$29(a0)
0000997C 6600                       		bne.s	loc_93A0
0000997E 4468 0010                  		neg.w	$10(a0)
00009982 0868 0000 0001             		bchg	#0,1(a0)
00009988                            
00009988                            loc_93A0:
00009988 D368 000C                  		add.w	d1,$C(a0)
0000998C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009992                            
00009992                            loc_93AA:
00009992 5328 001E                  		subq.b	#1,$1E(a0)
00009996 6A00                       		bpl.s	loc_93C0
00009998 117C 0001 001E             		move.b	#1,$1E(a0)
0000999E 5228 001A                  		addq.b	#1,$1A(a0)
000099A2 0228 0001 001A             		andi.b	#1,$1A(a0)
000099A8                            
000099A8                            loc_93C0:
000099A8 6000 FE62                  		bra.w	loc_9224
000099AC                            ; ===========================================================================
000099AC                            
000099AC                            loc_93C4:
000099AC 117C 0001 001A             		move.b	#1,$1A(a0)
000099B2 4A68 0012                  		tst.w	$12(a0)
000099B6 6B00                       		bmi.s	locret_93EA
000099B8 117C 0000 001A             		move.b	#0,$1A(a0)
000099BE 4EB9 0000 0000             		jsr	ObjHitFloor
000099C4 4A41                       		tst.w	d1
000099C6 6A00                       		bpl.s	locret_93EA
000099C8 D368 000C                  		add.w	d1,$C(a0)
000099CC 3168 0034 0012             		move.w	$34(a0),$12(a0)
000099D2                            
000099D2                            locret_93EA:
000099D2 4E75                       		rts	
000099D4                            ; ===========================================================================
000099D4                            
000099D4                            loc_93EC:
000099D4 08E8 0000 0001             		bset	#0,1(a0)
000099DA 3028 0008                  		move.w	8(a0),d0
000099DE 9078 D008                  		sub.w	($FFFFD008).w,d0
000099E2 6400                       		bcc.s	locret_9402
000099E4 08A8 0000 0001             		bclr	#0,1(a0)
000099EA                            
000099EA                            locret_9402:
000099EA 4E75                       		rts	
000099EC                            
000099EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000099EC                            
000099EC                            
000099EC                            sub_9404:
000099EC 3038 D008                  		move.w	($FFFFD008).w,d0
000099F0 9068 0008                  		sub.w	8(a0),d0
000099F4 0440 00B8                  		subi.w	#$B8,d0
000099F8 4E75                       		rts	
000099FA                            ; End of function sub_9404
000099FA                            
000099FA                            ; ===========================================================================
000099FA                            ; ---------------------------------------------------------------------------
000099FA                            ; Object 29 - points that appear when you destroy something
000099FA                            ; ---------------------------------------------------------------------------
000099FA                            
000099FA                            Obj29:					; XREF: Obj_Index
000099FA 7000                       		moveq	#0,d0
000099FC 1028 0024                  		move.b	$24(a0),d0
00009A00 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009A04 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009A08 6000 0000                  		bra.w	DisplaySprite
00009A0C                            ; ===========================================================================
00009A0C 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009A0E 0000                       		dc.w Obj29_Slower-Obj29_Index
00009A10                            ; ===========================================================================
00009A10                            
00009A10                            Obj29_Main:				; XREF: Obj29_Index
00009A10 5428 0024                  		addq.b	#2,$24(a0)
00009A14 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009A1C 317C 2797 0002             		move.w	#$2797,2(a0)
00009A22 117C 0004 0001             		move.b	#4,1(a0)
00009A28 117C 0001 0018             		move.b	#1,$18(a0)
00009A2E 117C 0008 0019             		move.b	#8,$19(a0)
00009A34 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009A3A                            
00009A3A                            Obj29_Slower:				; XREF: Obj29_Index
00009A3A 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009A3E 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009A42 6100 0000                  		bsr.w	SpeedToPos
00009A46 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009A4C 4E75                       		rts	
00009A4E                            ; ===========================================================================
00009A4E                            ; ---------------------------------------------------------------------------
00009A4E                            ; Sprite mappings - animals
00009A4E                            ; ---------------------------------------------------------------------------
00009A4E                            Map_obj28:
00009A4E                            	include "_maps\obj28.asm"
00009A4E                            ; ---------------------------------------------------------------------------
00009A4E                            ; Sprite mappings - animals
00009A4E                            ; ---------------------------------------------------------------------------
00009A4E 0000                       		dc.w byte_9472-Map_obj28
00009A50 0000                       		dc.w byte_9478-Map_obj28
00009A52 0000                       		dc.w byte_946C-Map_obj28
00009A54 01                         byte_946C:	dc.b 1
00009A55 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009A5A 01                         byte_9472:	dc.b 1
00009A5B F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009A60 01                         byte_9478:	dc.b 1
00009A61 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009A66                            		even
00009A66                            		even
00009A66                            
00009A66                            Map_obj28a:
00009A66                            	include "_maps\obj28a.asm"
00009A66                            ; ---------------------------------------------------------------------------
00009A66                            ; Sprite mappings - animals
00009A66                            ; ---------------------------------------------------------------------------
00009A66 0000                       		dc.w byte_948A-Map_obj28a
00009A68 0000                       		dc.w byte_9490-Map_obj28a
00009A6A 0000                       		dc.w byte_9484-Map_obj28a
00009A6C 01                         byte_9484:	dc.b 1
00009A6D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009A72 01                         byte_948A:	dc.b 1
00009A73 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009A78 01                         byte_9490:	dc.b 1
00009A79 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009A7E                            		even
00009A7E                            		even
00009A7E                            
00009A7E                            Map_obj28b:
00009A7E                            	include "_maps\obj28b.asm"
00009A7E                            ; ---------------------------------------------------------------------------
00009A7E                            ; Sprite mappings - animals
00009A7E                            ; ---------------------------------------------------------------------------
00009A7E 0000                       		dc.w byte_94A2-Map_obj28b
00009A80 0000                       		dc.w byte_94A8-Map_obj28b
00009A82 0000                       		dc.w byte_949C-Map_obj28b
00009A84 01                         byte_949C:	dc.b 1
00009A85 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009A8A 01                         byte_94A2:	dc.b 1
00009A8B FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009A90 01                         byte_94A8:	dc.b 1
00009A91 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009A96                            		even
00009A96                            		even
00009A96                            
00009A96                            ; ---------------------------------------------------------------------------
00009A96                            ; Sprite mappings - points that	appear when you	destroy	something
00009A96                            ; ---------------------------------------------------------------------------
00009A96                            Map_obj29:
00009A96                            	include "_maps\obj29.asm"
00009A96                            ; ---------------------------------------------------------------------------
00009A96                            ; Sprite mappings - points that	appear when you	destroy	something
00009A96                            ; ---------------------------------------------------------------------------
00009A96 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009A9A 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009A9E 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009AA2 0000                       		dc.w byte_94E5-Map_obj29
00009AA4 01                         byte_94BC:	dc.b 1
00009AA5 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009AAA 01                         byte_94C2:	dc.b 1
00009AAB FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009AB0 01                         byte_94C8:	dc.b 1
00009AB1 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009AB6 01                         byte_94CE:	dc.b 1
00009AB7 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009ABC 01                         byte_94D4:	dc.b 1
00009ABD FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009AC2 02                         byte_94DA:	dc.b 2
00009AC3 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009AC8 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009ACD 02                         byte_94E5:	dc.b 2
00009ACE FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009AD3 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009AD8                            		even
00009AD8                            		even
00009AD8                            
00009AD8                            ; ===========================================================================
00009AD8                            ; ---------------------------------------------------------------------------
00009AD8                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009AD8                            ; ---------------------------------------------------------------------------
00009AD8                            
00009AD8                            Obj1F:					; XREF: Obj_Index
00009AD8 7000                       		moveq	#0,d0
00009ADA 1028 0024                  		move.b	$24(a0),d0
00009ADE 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009AE2 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009AE6                            ; ===========================================================================
00009AE6 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009AE8 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009AEA 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009AEC 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009AEE 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009AF0                            ; ===========================================================================
00009AF0                            
00009AF0                            Obj1F_Main:				; XREF: Obj1F_Index
00009AF0 117C 0010 0016             		move.b	#$10,$16(a0)
00009AF6 117C 0008 0017             		move.b	#8,$17(a0)
00009AFC 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009B04 317C 0400 0002             		move.w	#$400,2(a0)
00009B0A 117C 0004 0001             		move.b	#4,1(a0)
00009B10 117C 0003 0018             		move.b	#3,$18(a0)
00009B16 117C 0006 0020             		move.b	#6,$20(a0)
00009B1C 117C 0015 0019             		move.b	#$15,$19(a0)
00009B22 6100 0000                  		bsr.w	ObjectFall
00009B26 4EB9 0000 0000             		jsr	ObjHitFloor
00009B2C 4A41                       		tst.w	d1
00009B2E 6A00                       		bpl.s	locret_955A
00009B30 D368 000C                  		add.w	d1,$C(a0)
00009B34 1143 0026                  		move.b	d3,$26(a0)
00009B38 317C 0000 0012             		move.w	#0,$12(a0)
00009B3E 5428 0024                  		addq.b	#2,$24(a0)
00009B42                            
00009B42                            locret_955A:
00009B42 4E75                       		rts	
00009B44                            ; ===========================================================================
00009B44                            
00009B44                            Obj1F_Action:				; XREF: Obj1F_Index
00009B44 7000                       		moveq	#0,d0
00009B46 1028 0025                  		move.b	$25(a0),d0
00009B4A 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009B4E 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009B52 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009B58 6100 0000                  		bsr.w	AnimateSprite
00009B5C 6000 0000                  		bra.w	MarkObjGone
00009B60                            ; ===========================================================================
00009B60 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009B62 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009B64                            ; ===========================================================================
00009B64                            
00009B64                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009B64 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009B68 6A00                       		bpl.s	locret_95B6
00009B6A 4A28 0001                  		tst.b	1(a0)
00009B6E 6A00                       		bpl.s	Obj1F_Move
00009B70 0868 0001 0032             		bchg	#1,$32(a0)
00009B76 6600                       		bne.s	Obj1F_MakeFire
00009B78                            
00009B78                            Obj1F_Move:
00009B78 5428 0025                  		addq.b	#2,$25(a0)
00009B7C 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009B82 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009B88 6100 0000                  		bsr.w	Obj1F_SetAni
00009B8C 5600                       		addq.b	#3,d0
00009B8E 1140 001C                  		move.b	d0,$1C(a0)
00009B92 0868 0000 0022             		bchg	#0,$22(a0)
00009B98 6600                       		bne.s	locret_95B6
00009B9A 4468 0010                  		neg.w	$10(a0)		; change direction
00009B9E                            
00009B9E                            locret_95B6:
00009B9E 4E75                       		rts	
00009BA0                            ; ===========================================================================
00009BA0                            
00009BA0                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009BA0 317C 003B 0030             		move.w	#$3B,$30(a0)
00009BA6 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009BAC 6100 0000                  		bsr.w	SingleObjLoad
00009BB0 6600                       		bne.s	Obj1F_MakeFire2
00009BB2 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009BB6 137C 0006 0024             		move.b	#6,$24(a1)
00009BBC 3368 0008 0008             		move.w	8(a0),8(a1)
00009BC2 0469 0010 0008             		subi.w	#$10,8(a1)
00009BC8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009BCE 337C FF00 0010             		move.w	#-$100,$10(a1)
00009BD4                            
00009BD4                            Obj1F_MakeFire2:
00009BD4 6100 0000                  		bsr.w	SingleObjLoad
00009BD8 6600                       		bne.s	locret_9618
00009BDA 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009BDE 137C 0006 0024             		move.b	#6,$24(a1)
00009BE4 3368 0008 0008             		move.w	8(a0),8(a1)
00009BEA 0669 0010 0008             		addi.w	#$10,8(a1)
00009BF0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009BF6 337C 0100 0010             		move.w	#$100,$10(a1)
00009BFC                            
00009BFC                            locret_9618:
00009BFC 4E75                       		rts	
00009BFE                            ; ===========================================================================
00009BFE                            
00009BFE                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009BFE 5368 0030                  		subq.w	#1,$30(a0)
00009C02 6B00                       		bmi.s	loc_966E
00009C04 6100 0000                  		bsr.w	SpeedToPos
00009C08 0868 0000 0032             		bchg	#0,$32(a0)
00009C0E 6600                       		bne.s	loc_9654
00009C10 3628 0008                  		move.w	8(a0),d3
00009C14 0643 0010                  		addi.w	#$10,d3
00009C18 0828 0000 0022             		btst	#0,$22(a0)
00009C1E 6700                       		beq.s	loc_9640
00009C20 0443 0020                  		subi.w	#$20,d3
00009C24                            
00009C24                            loc_9640:
00009C24 4EB9 0000 0000             		jsr	ObjHitFloor2
00009C2A 0C41 FFF8                  		cmpi.w	#-8,d1
00009C2E 6D00                       		blt.s	loc_966E
00009C30 0C41 000C                  		cmpi.w	#$C,d1
00009C34 6C00                       		bge.s	loc_966E
00009C36 4E75                       		rts	
00009C38                            ; ===========================================================================
00009C38                            
00009C38                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009C38 4EB9 0000 0000             		jsr	ObjHitFloor
00009C3E D368 000C                  		add.w	d1,$C(a0)
00009C42 1143 0026                  		move.b	d3,$26(a0)
00009C46 6100 0000                  		bsr.w	Obj1F_SetAni
00009C4A 5600                       		addq.b	#3,d0
00009C4C 1140 001C                  		move.b	d0,$1C(a0)
00009C50 4E75                       		rts	
00009C52                            ; ===========================================================================
00009C52                            
00009C52                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009C52 5528 0025                  		subq.b	#2,$25(a0)
00009C56 317C 003B 0030             		move.w	#59,$30(a0)
00009C5C 317C 0000 0010             		move.w	#0,$10(a0)
00009C62 6100 0000                  		bsr.w	Obj1F_SetAni
00009C66 1140 001C                  		move.b	d0,$1C(a0)
00009C6A 4E75                       		rts	
00009C6C                            ; ---------------------------------------------------------------------------
00009C6C                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009C6C                            ; ---------------------------------------------------------------------------
00009C6C                            
00009C6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C6C                            
00009C6C                            
00009C6C                            Obj1F_SetAni:				; XREF: loc_966E
00009C6C 7000                       		moveq	#0,d0
00009C6E 1628 0026                  		move.b	$26(a0),d3
00009C72 6B00                       		bmi.s	loc_96A4
00009C74 0C03 0006                  		cmpi.b	#6,d3
00009C78 6500                       		bcs.s	locret_96A2
00009C7A 7001                       		moveq	#1,d0
00009C7C 0828 0000 0022             		btst	#0,$22(a0)
00009C82 6600                       		bne.s	locret_96A2
00009C84 7002                       		moveq	#2,d0
00009C86                            
00009C86                            locret_96A2:
00009C86 4E75                       		rts	
00009C88                            ; ===========================================================================
00009C88                            
00009C88                            loc_96A4:				; XREF: Obj1F_SetAni
00009C88 0C03 00FA                  		cmpi.b	#-6,d3
00009C8C 6200                       		bhi.s	locret_96B6
00009C8E 7002                       		moveq	#2,d0
00009C90 0828 0000 0022             		btst	#0,$22(a0)
00009C96 6600                       		bne.s	locret_96B6
00009C98 7001                       		moveq	#1,d0
00009C9A                            
00009C9A                            locret_96B6:
00009C9A 4E75                       		rts	
00009C9C                            ; End of function Obj1F_SetAni
00009C9C                            
00009C9C                            ; ===========================================================================
00009C9C                            
00009C9C                            Obj1F_Delete:				; XREF: Obj1F_Index
00009C9C 6100 0000                  		bsr.w	DeleteObject
00009CA0 4E75                       		rts	
00009CA2                            ; ===========================================================================
00009CA2                            ; ---------------------------------------------------------------------------
00009CA2                            ; Sub-object - missile that the	Crabmeat throws
00009CA2                            ; ---------------------------------------------------------------------------
00009CA2                            
00009CA2                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009CA2 5428 0024                  		addq.b	#2,$24(a0)
00009CA6 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009CAE 317C 0400 0002             		move.w	#$400,2(a0)
00009CB4 117C 0004 0001             		move.b	#4,1(a0)
00009CBA 117C 0003 0018             		move.b	#3,$18(a0)
00009CC0 117C 0087 0020             		move.b	#$87,$20(a0)
00009CC6 117C 0008 0019             		move.b	#8,$19(a0)
00009CCC 317C FC00 0012             		move.w	#-$400,$12(a0)
00009CD2 117C 0007 001C             		move.b	#7,$1C(a0)
00009CD8                            
00009CD8                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009CD8 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009CDE 6100 0000                  		bsr.w	AnimateSprite
00009CE2 6100 0000                  		bsr.w	ObjectFall
00009CE6 6100 0000                  		bsr.w	DisplaySprite
00009CEA 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009CEE 0640 00E0                  		addi.w	#$E0,d0
00009CF2 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009CF6 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009CF8 4E75                       		rts	
00009CFA                            ; ===========================================================================
00009CFA                            
00009CFA                            Obj1F_Delete2:
00009CFA 6000 0000                  		bra.w	DeleteObject
00009CFE                            ; ===========================================================================
00009CFE                            Ani_obj1F:
00009CFE                            	include "_anim\obj1F.asm"
00009CFE                            ; ---------------------------------------------------------------------------
00009CFE                            ; Animation script - Crabmeat enemy
00009CFE                            ; ---------------------------------------------------------------------------
00009CFE 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009D04 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009D0A 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009D0E 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009D12 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009D16 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009D1A 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009D20 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009D26 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009D2C 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009D30 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009D34                            		even
00009D34                            		even
00009D34                            
00009D34                            ; ---------------------------------------------------------------------------
00009D34                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009D34                            ; ---------------------------------------------------------------------------
00009D34                            Map_obj1F:
00009D34                            	include "_maps\obj1F.asm"
00009D34                            Map_1514:
00009D34 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009D36 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009D38 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009D3A 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009D3C 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009D3E 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009D40 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009D42 03                         Map_1514_E: 	dc.b $3
00009D43 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009D48 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009D4D F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009D52 03                         Map_1514_1E: 	dc.b $3
00009D53 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009D58 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009D5D F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009D62 03                         Map_1514_2E: 	dc.b $3
00009D63 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009D68 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009D6D F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009D72 03                         Map_1514_3E: 	dc.b $3
00009D73 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009D78 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009D7D F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009D82 03                         Map_1514_4E: 	dc.b $3
00009D83 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009D88 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009D8D F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009D92 01                         Map_1514_5E: 	dc.b $1
00009D93 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
00009D98 01                         Map_1514_64: 	dc.b $1
00009D99 F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
00009D9E                            	even
00009D9E                            	even
00009D9E                            
00009D9E                            ; ===========================================================================
00009D9E                            ; ---------------------------------------------------------------------------
00009D9E                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009D9E                            ; ---------------------------------------------------------------------------
00009D9E                            
00009D9E                            Obj22:					; XREF: Obj_Index
00009D9E 7000                       		moveq	#0,d0
00009DA0 1028 0024                  		move.b	$24(a0),d0
00009DA4 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009DA8 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009DAC                            ; ===========================================================================
00009DAC 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009DAE 0000                       		dc.w Obj22_Action-Obj22_Index
00009DB0 0000                       		dc.w Obj22_Delete-Obj22_Index
00009DB2                            ; ===========================================================================
00009DB2                            
00009DB2                            Obj22_Main:				; XREF: Obj22_Index
00009DB2 5428 0024                  		addq.b	#2,$24(a0)
00009DB6 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009DBE 317C 0444 0002             		move.w	#$444,2(a0)
00009DC4 117C 0004 0001             		move.b	#4,1(a0)
00009DCA 117C 0003 0018             		move.b	#3,$18(a0)
00009DD0 117C 0008 0020             		move.b	#8,$20(a0)
00009DD6 117C 0018 0019             		move.b	#$18,$19(a0)
00009DDC                            
00009DDC                            Obj22_Action:				; XREF: Obj22_Index
00009DDC 7000                       		moveq	#0,d0
00009DDE 1028 0025                  		move.b	$25(a0),d0
00009DE2 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009DE6 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009DEA 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009DF0 6100 0000                  		bsr.w	AnimateSprite
00009DF4 6000 0000                  		bra.w	MarkObjGone
00009DF8                            ; ===========================================================================
00009DF8 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009DFA 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009DFC                            ; ===========================================================================
00009DFC                            
00009DFC                            Obj22_Move:				; XREF: Obj22_Index2
00009DFC 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009E00 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009E02 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009E08 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009E0A 5428 0025                  		addq.b	#2,$25(a0)
00009E0E 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009E14 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009E1A 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009E20 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009E26 6600                       		bne.s	locret_986C	; if not, branch
00009E28 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009E2C                            
00009E2C                            locret_986C:
00009E2C 4E75                       		rts	
00009E2E                            ; ===========================================================================
00009E2E                            
00009E2E                            Obj22_Fire:				; XREF: Obj22_Move
00009E2E 6100 0000                  		bsr.w	SingleObjLoad
00009E32 6600                       		bne.s	locret_98D0
00009E34 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009E38 3368 0008 0008             		move.w	8(a0),8(a1)
00009E3E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009E44 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009E4A 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009E50 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009E56 303C 0018                  		move.w	#$18,d0
00009E5A 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009E60 6600                       		bne.s	loc_98AA	; if not, branch
00009E62 4440                       		neg.w	d0
00009E64 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009E68                            
00009E68                            loc_98AA:
00009E68 D169 0008                  		add.w	d0,8(a1)
00009E6C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009E72 337C 000E 0032             		move.w	#$E,$32(a1)
00009E78 2348 003C                  		move.l	a0,$3C(a1)
00009E7C 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009E82 317C 003B 0032             		move.w	#$3B,$32(a0)
00009E88 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009E8E                            
00009E8E                            locret_98D0:
00009E8E 4E75                       		rts	
00009E90                            ; ===========================================================================
00009E90                            
00009E90                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009E90 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009E94 6B00                       		bmi.s	Obj22_ChgDir
00009E96 6100 0000                  		bsr.w	SpeedToPos
00009E9A 4A28 0034                  		tst.b	$34(a0)
00009E9E 6600                       		bne.s	locret_992A
00009EA0 3038 D008                  		move.w	($FFFFD008).w,d0
00009EA4 9068 0008                  		sub.w	8(a0),d0
00009EA8 6A00                       		bpl.s	Obj22_SetNrSonic
00009EAA 4440                       		neg.w	d0
00009EAC                            
00009EAC                            Obj22_SetNrSonic:
00009EAC 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009EB0 6400                       		bcc.s	locret_992A	; if not, branch
00009EB2 4A28 0001                  		tst.b	1(a0)
00009EB6 6A00                       		bpl.s	locret_992A
00009EB8 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009EBE 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009EC4 6000                       		bra.s	Obj22_Stop
00009EC6                            ; ===========================================================================
00009EC6                            
00009EC6                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009EC6 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009ECC 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
00009ED2 317C 003B 0032             		move.w	#59,$32(a0)
00009ED8                            
00009ED8                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009ED8 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009EDC 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009EE2 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009EE8                            
00009EE8                            locret_992A:
00009EE8 4E75                       		rts	
00009EEA                            ; ===========================================================================
00009EEA                            
00009EEA                            Obj22_Delete:				; XREF: Obj22_Index
00009EEA 6100 0000                  		bsr.w	DeleteObject
00009EEE 4E75                       		rts	
00009EF0                            ; ===========================================================================
00009EF0                            ; ---------------------------------------------------------------------------
00009EF0                            ; Object 23 - missile that Buzz	Bomber throws
00009EF0                            ; ---------------------------------------------------------------------------
00009EF0                            
00009EF0                            Obj23:					; XREF: Obj_Index
00009EF0 7000                       		moveq	#0,d0
00009EF2 1028 0024                  		move.b	$24(a0),d0
00009EF6 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009EFA 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009EFE                            ; ===========================================================================
00009EFE 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009F00 0000                       		dc.w Obj23_Animate-Obj23_Index
00009F02 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009F04 0000                       		dc.w Obj23_Delete-Obj23_Index
00009F06 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009F08                            ; ===========================================================================
00009F08                            
00009F08                            Obj23_Main:				; XREF: Obj23_Index
00009F08 5368 0032                  		subq.w	#1,$32(a0)
00009F0C 6A00                       		bpl.s	Obj23_ChkCancel
00009F0E 5428 0024                  		addq.b	#2,$24(a0)
00009F12 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009F1A 317C 2444 0002             		move.w	#$2444,2(a0)
00009F20 117C 0004 0001             		move.b	#4,1(a0)
00009F26 117C 0003 0018             		move.b	#3,$18(a0)
00009F2C 117C 0008 0019             		move.b	#8,$19(a0)
00009F32 0228 0003 0022             		andi.b	#3,$22(a0)
00009F38 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
00009F3C 6700                       		beq.s	Obj23_Animate	; if not, branch
00009F3E 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00009F44 117C 0087 0020             		move.b	#$87,$20(a0)
00009F4A 117C 0001 001C             		move.b	#1,$1C(a0)
00009F50 6000                       		bra.s	Obj23_Animate2
00009F52                            ; ===========================================================================
00009F52                            
00009F52                            Obj23_Animate:				; XREF: Obj23_Index
00009F52 6100                       		bsr.s	Obj23_ChkCancel
00009F54 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009F5A 6100 0000                  		bsr.w	AnimateSprite
00009F5E 6000 0000                  		bra.w	DisplaySprite
00009F62                            ; ---------------------------------------------------------------------------
00009F62                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009F62                            ; destroyed, and if it has, then cancel	the missile
00009F62                            ; ---------------------------------------------------------------------------
00009F62                            
00009F62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F62                            
00009F62                            
00009F62                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009F62 2268 003C                  		movea.l	$3C(a0),a1
00009F66 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009F6A 6700                       		beq.s	Obj23_Delete	; if yes, branch
00009F6C 4E75                       		rts	
00009F6E                            ; End of function Obj23_ChkCancel
00009F6E                            
00009F6E                            ; ===========================================================================
00009F6E                            
00009F6E                            Obj23_FromBuzz:				; XREF: Obj23_Index
00009F6E 0828 0007 0022             		btst	#7,$22(a0)
00009F74 6600                       		bne.s	Obj23_Explode
00009F76 117C 0087 0020             		move.b	#$87,$20(a0)
00009F7C 117C 0001 001C             		move.b	#1,$1C(a0)
00009F82 6100 0000                  		bsr.w	SpeedToPos
00009F86 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009F8C 6100 0000                  		bsr.w	AnimateSprite
00009F90 6100 0000                  		bsr.w	DisplaySprite
00009F94 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009F98 0640 00E0                  		addi.w	#$E0,d0
00009F9C B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009FA0 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00009FA2 4E75                       		rts	
00009FA4                            ; ===========================================================================
00009FA4                            
00009FA4                            Obj23_Explode:				; XREF: Obj23_FromBuzz
00009FA4 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
00009FA8 117C 0000 0024             		move.b	#0,$24(a0)
00009FAE 6000 F2DE                  		bra.w	Obj24
00009FB2                            ; ===========================================================================
00009FB2                            
00009FB2                            Obj23_Delete:				; XREF: Obj23_Index
00009FB2 6100 0000                  		bsr.w	DeleteObject
00009FB6 4E75                       		rts	
00009FB8                            ; ===========================================================================
00009FB8                            
00009FB8                            Obj23_FromNewt:				; XREF: Obj23_Index
00009FB8 4A28 0001                  		tst.b	1(a0)
00009FBC 6AF4                       		bpl.s	Obj23_Delete
00009FBE 6100 0000                  		bsr.w	SpeedToPos
00009FC2                            
00009FC2                            Obj23_Animate2:				; XREF: Obj23_Main
00009FC2 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009FC8 6100 0000                  		bsr.w	AnimateSprite
00009FCC 6100 0000                  		bsr.w	DisplaySprite
00009FD0 4E75                       		rts	
00009FD2                            ; ===========================================================================
00009FD2                            Ani_obj22:
00009FD2                            	include "_anim\obj22.asm"
00009FD2                            ; ---------------------------------------------------------------------------
00009FD2                            ; Animation script - Buzz Bomber enemy
00009FD2                            ; ---------------------------------------------------------------------------
00009FD2 0000                       		dc.w byte_9A1E-Ani_obj22
00009FD4 0000                       		dc.w byte_9A22-Ani_obj22
00009FD6 0000                       		dc.w byte_9A26-Ani_obj22
00009FD8 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
00009FDC 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
00009FE0 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
00009FE4                            		even
00009FE4                            		even
00009FE4                            
00009FE4                            Ani_obj23:
00009FE4                            	include "_anim\obj23.asm"
00009FE4                            ; ---------------------------------------------------------------------------
00009FE4                            ; Animation script - missile that Buzz Bomber throws
00009FE4                            ; ---------------------------------------------------------------------------
00009FE4 0000                       		dc.w byte_9A2E-Ani_obj23
00009FE6 0000                       		dc.w byte_9A32-Ani_obj23
00009FE8 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
00009FEC 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
00009FF0                            		even
00009FF0                            		even
00009FF0                            
00009FF0                            ; ---------------------------------------------------------------------------
00009FF0                            ; Sprite mappings - Buzz Bomber	enemy
00009FF0                            ; ---------------------------------------------------------------------------
00009FF0                            Map_obj22:
00009FF0                            	include "_maps\obj22.asm"
00009FF0                            Map_e97a:
00009FF0 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
00009FF2 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
00009FF4 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
00009FF6 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
00009FF8 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
00009FFA 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
00009FFC 06                         Map_e97a_C: 	dc.b $6
00009FFD F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A002 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A007 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A00C 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A011 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A016 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A01B 06                         Map_e97a_2B: 	dc.b $6
0000A01C F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A021 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A026 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A02B 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A030 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A035 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A03A 07                         Map_e97a_4A: 	dc.b $7
0000A03B 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000A040 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A045 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A04A 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A04F 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A054 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A059 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A05E 07                         Map_e97a_6E: 	dc.b $7
0000A05F 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A064 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A069 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A06E 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A073 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A078 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A07D F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A082 06                         Map_e97a_92: 	dc.b $6
0000A083 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A088 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A08D 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A092 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A097 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A09C F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A0A1 04                         Map_e97a_B1: 	dc.b $4
0000A0A2 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A0A7 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A0AC 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A0B1 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A0B6                            	even
0000A0B6                            	even
0000A0B6                            
0000A0B6                            ; ---------------------------------------------------------------------------
0000A0B6                            ; Sprite mappings - missile that Buzz Bomber throws
0000A0B6                            ; ---------------------------------------------------------------------------
0000A0B6                            Map_obj23:
0000A0B6                            	include "_maps\obj23.asm"
0000A0B6                            ; ---------------------------------------------------------------------------
0000A0B6                            ; Sprite mappings - missile that Buzz Bomber throws
0000A0B6                            ; ---------------------------------------------------------------------------
0000A0B6 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A0BA 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A0BE 01                         byte_9B0E:	dc.b 1
0000A0BF F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A0C4 01                         byte_9B14:	dc.b 1
0000A0C5 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A0CA 01                         byte_9B1A:	dc.b 1
0000A0CB F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A0D0 01                         byte_9B20:	dc.b 1
0000A0D1 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A0D6                            		even
0000A0D6                            		even
0000A0D6                            
0000A0D6                            ; ===========================================================================
0000A0D6                            ; ---------------------------------------------------------------------------
0000A0D6                            ; Object 25 - rings
0000A0D6                            ; ---------------------------------------------------------------------------
0000A0D6                            
0000A0D6                            Obj25:					; XREF: Obj_Index
0000A0D6 7000                       		moveq	#0,d0
0000A0D8 1028 0024                  		move.b	$24(a0),d0
0000A0DC 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A0E0 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A0E4                            ; ===========================================================================
0000A0E4 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A0E6 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A0E8 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A0EA 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A0EC 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A0EE                            ; ---------------------------------------------------------------------------
0000A0EE                            ; Distances between rings (format: horizontal, vertical)
0000A0EE                            ; ---------------------------------------------------------------------------
0000A0EE 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A0F0 1800                       		dc.b $18, 0		; horizontal normal
0000A0F2 2000                       		dc.b $20, 0		; horizontal wide
0000A0F4 0010                       		dc.b 0,	$10		; vertical tight
0000A0F6 0018                       		dc.b 0,	$18		; vertical normal
0000A0F8 0020                       		dc.b 0,	$20		; vertical wide
0000A0FA 1010                       		dc.b $10, $10		; diagonal
0000A0FC 1818                       		dc.b $18, $18
0000A0FE 2020                       		dc.b $20, $20
0000A100 F010                       		dc.b $F0, $10
0000A102 E818                       		dc.b $E8, $18
0000A104 E020                       		dc.b $E0, $20
0000A106 1008                       		dc.b $10, 8
0000A108 1810                       		dc.b $18, $10
0000A10A F008                       		dc.b $F0, 8
0000A10C E810                       		dc.b $E8, $10
0000A10E                            ; ===========================================================================
0000A10E                            
0000A10E                            Obj25_Main:				; XREF: Obj25_Index
0000A10E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A112 7000                       		moveq	#0,d0
0000A114 1028 0023                  		move.b	$23(a0),d0
0000A118 45F2 0002                  		lea	2(a2,d0.w),a2
0000A11C 1812                       		move.b	(a2),d4
0000A11E 1228 0028                  		move.b	$28(a0),d1
0000A122 1001                       		move.b	d1,d0
0000A124 0241 0007                  		andi.w	#7,d1
0000A128 0C41 0007                  		cmpi.w	#7,d1
0000A12C 6600                       		bne.s	loc_9B80
0000A12E 7206                       		moveq	#6,d1
0000A130                            
0000A130                            loc_9B80:
0000A130 4841                       		swap	d1
0000A132 323C 0000                  		move.w	#0,d1
0000A136 E808                       		lsr.b	#4,d0
0000A138 D040                       		add.w	d0,d0
0000A13A 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A13E 4885                       		ext.w	d5
0000A140 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A144 4886                       		ext.w	d6
0000A146 2248                       		movea.l	a0,a1
0000A148 3428 0008                  		move.w	8(a0),d2
0000A14C 3628 000C                  		move.w	$C(a0),d3
0000A150 E20C                       		lsr.b	#1,d4
0000A152 6500                       		bcs.s	loc_9C02
0000A154 0892 0007                  		bclr	#7,(a2)
0000A158 6000                       		bra.s	loc_9BBA
0000A15A                            ; ===========================================================================
0000A15A                            
0000A15A                            Obj25_MakeRings:
0000A15A 4841                       		swap	d1
0000A15C E20C                       		lsr.b	#1,d4
0000A15E 6500                       		bcs.s	loc_9C02
0000A160 0892 0007                  		bclr	#7,(a2)
0000A164 6100 0000                  		bsr.w	SingleObjLoad
0000A168 6600                       		bne.s	loc_9C0E
0000A16A                            
0000A16A                            loc_9BBA:				; XREF: Obj25_Main
0000A16A 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A16E 5429 0024                  		addq.b	#2,$24(a1)
0000A172 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A176 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A17C 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A180 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A188 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A18E 137C 0004 0001             		move.b	#4,1(a1)
0000A194 137C 0002 0018             		move.b	#2,$18(a1)
0000A19A 137C 0047 0020             		move.b	#$47,$20(a1)
0000A1A0 137C 0008 0019             		move.b	#8,$19(a1)
0000A1A6 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A1AC 1341 0034                  		move.b	d1,$34(a1)
0000A1B0                            
0000A1B0                            loc_9C02:
0000A1B0 5241                       		addq.w	#1,d1
0000A1B2 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A1B4 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A1B6 4841                       		swap	d1
0000A1B8 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A1BC                            
0000A1BC                            loc_9C0E:
0000A1BC 0812 0000                  		btst	#0,(a2)
0000A1C0 6600 0000                  		bne.w	DeleteObject
0000A1C4                            
0000A1C4                            Obj25_Animate:				; XREF: Obj25_Index
0000A1C4 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A1CA 6100 0000                  		bsr.w	DisplaySprite
0000A1CE 3028 0032                  		move.w	$32(a0),d0
0000A1D2 0240 FF80                  		andi.w	#$FF80,d0
0000A1D6 3238 F700                  		move.w	($FFFFF700).w,d1
0000A1DA 0441 0080                  		subi.w	#$80,d1
0000A1DE 0241 FF80                  		andi.w	#$FF80,d1
0000A1E2 9041                       		sub.w	d1,d0
0000A1E4 0C40 0280                  		cmpi.w	#$280,d0
0000A1E8 6200                       		bhi.s	Obj25_Delete
0000A1EA 4E75                       		rts	
0000A1EC                            ; ===========================================================================
0000A1EC                            
0000A1EC                            Obj25_Collect:				; XREF: Obj25_Index
0000A1EC 5428 0024                  		addq.b	#2,$24(a0)
0000A1F0 117C 0000 0020             		move.b	#0,$20(a0)
0000A1F6 117C 0001 0018             		move.b	#1,$18(a0)
0000A1FC 6100 0000                  		bsr.w	CollectRing
0000A200 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A204 7000                       		moveq	#0,d0
0000A206 1028 0023                  		move.b	$23(a0),d0
0000A20A 1228 0034                  		move.b	$34(a0),d1
0000A20E 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A212                            
0000A212                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A212 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A218 6100 0000                  		bsr.w	AnimateSprite
0000A21C 6000 0000                  		bra.w	DisplaySprite
0000A220                            ; ===========================================================================
0000A220                            
0000A220                            Obj25_Delete:				; XREF: Obj25_Index
0000A220 6000 0000                  		bra.w	DeleteObject
0000A224                            
0000A224                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A224                            
0000A224                            
0000A224                            CollectRing:				; XREF: Obj25_Collect
0000A224 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A228 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A22E 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A232 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A238 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A23A 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A240 6700                       		beq.s	loc_9CA4
0000A242 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A248 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A24A 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A250 6600                       		bne.s	Obj25_PlaySnd
0000A252                            
0000A252                            loc_9CA4:
0000A252 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A256 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A25A 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A25E                            
0000A25E                            Obj25_PlaySnd:
0000A25E 4EF9 0000 15C0             		jmp	(PlaySound_Special).l
0000A264                            ; End of function CollectRing
0000A264                            
0000A264                            ; ===========================================================================
0000A264                            ; ---------------------------------------------------------------------------
0000A264                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A264                            ; ---------------------------------------------------------------------------
0000A264                            
0000A264                            Obj37:					; XREF: Obj_Index
0000A264 7000                       		moveq	#0,d0
0000A266 1028 0024                  		move.b	$24(a0),d0
0000A26A 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A26E 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A272                            ; ===========================================================================
0000A272 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A274 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A276 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A278 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A27A 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A27C                            ; ===========================================================================
0000A27C                            
0000A27C                            Obj37_CountRings:			; XREF: Obj37_Index
0000A27C 2248                       		movea.l	a0,a1
0000A27E 7A00                       		moveq	#0,d5
0000A280 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A284 7020                       		moveq	#32,d0
0000A286 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A288 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A28A 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A28C                            
0000A28C                            loc_9CDE:
0000A28C 5345                       		subq.w	#1,d5
0000A28E 383C 0288                  		move.w	#$288,d4
0000A292 6000                       		bra.s	Obj37_MakeRings
0000A294                            ; ===========================================================================
0000A294                            
0000A294                            Obj37_Loop:
0000A294 6100 0000                  		bsr.w	SingleObjLoad
0000A298 6600 0000                  		bne.w	Obj37_ResetCounter
0000A29C                            
0000A29C                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A29C 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A2A0 5429 0024                  		addq.b	#2,$24(a1)
0000A2A4 137C 0008 0016             		move.b	#8,$16(a1)
0000A2AA 137C 0008 0017             		move.b	#8,$17(a1)
0000A2B0 3368 0008 0008             		move.w	8(a0),8(a1)
0000A2B6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A2BC 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A2C4 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A2CA 137C 0004 0001             		move.b	#4,1(a1)
0000A2D0 137C 0003 0018             		move.b	#3,$18(a1)
0000A2D6 137C 0047 0020             		move.b	#$47,$20(a1)
0000A2DC 137C 0008 0019             		move.b	#8,$19(a1)
0000A2E2 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A2E8 4A44                       		tst.w	d4
0000A2EA 6B00                       		bmi.s	loc_9D62
0000A2EC 3004                       		move.w	d4,d0
0000A2EE 6100 8974                  		bsr.w	CalcSine
0000A2F2 3404                       		move.w	d4,d2
0000A2F4 E04A                       		lsr.w	#8,d2
0000A2F6 E560                       		asl.w	d2,d0
0000A2F8 E561                       		asl.w	d2,d1
0000A2FA 3400                       		move.w	d0,d2
0000A2FC 3601                       		move.w	d1,d3
0000A2FE 0604 0010                  		addi.b	#$10,d4
0000A302 6400                       		bcc.s	loc_9D62
0000A304 0444 0080                  		subi.w	#$80,d4
0000A308 6400                       		bcc.s	loc_9D62
0000A30A 383C 0288                  		move.w	#$288,d4
0000A30E                            
0000A30E                            loc_9D62:
0000A30E 3342 0010                  		move.w	d2,$10(a1)
0000A312 3343 0012                  		move.w	d3,$12(a1)
0000A316 4442                       		neg.w	d2
0000A318 4444                       		neg.w	d4
0000A31A 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A31E                            
0000A31E                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A31E 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A324 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A32A 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A330 303C 00C6                  		move.w	#$C6,d0
0000A334 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A33A                            
0000A33A                            Obj37_Bounce:				; XREF: Obj37_Index
0000A33A 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A340 6100 0000                  		bsr.w	SpeedToPos
0000A344 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A34A 6B00                       		bmi.s	Obj37_ChkDel
0000A34C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A350 D007                       		add.b	d7,d0
0000A352 0200 0003                  		andi.b	#3,d0
0000A356 6600                       		bne.s	Obj37_ChkDel
0000A358 4EB9 0000 0000             		jsr	ObjHitFloor
0000A35E 4A41                       		tst.w	d1
0000A360 6A00                       		bpl.s	Obj37_ChkDel
0000A362 D368 000C                  		add.w	d1,$C(a0)
0000A366 3028 0012                  		move.w	$12(a0),d0
0000A36A E440                       		asr.w	#2,d0
0000A36C 9168 0012                  		sub.w	d0,$12(a0)
0000A370 4468 0012                  		neg.w	$12(a0)
0000A374                            
0000A374                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A374 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A378 6700                       		beq.s	Obj37_Delete
0000A37A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A37E 0640 00E0                  		addi.w	#$E0,d0
0000A382 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A386 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A388 6000 0000                  		bra.w	DisplaySprite
0000A38C                            ; ===========================================================================
0000A38C                            
0000A38C                            Obj37_Collect:				; XREF: Obj37_Index
0000A38C 5428 0024                  		addq.b	#2,$24(a0)
0000A390 117C 0000 0020             		move.b	#0,$20(a0)
0000A396 117C 0001 0018             		move.b	#1,$18(a0)
0000A39C 6100 FE86                  		bsr.w	CollectRing
0000A3A0                            
0000A3A0                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A3A0 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A3A6 6100 0000                  		bsr.w	AnimateSprite
0000A3AA 6000 0000                  		bra.w	DisplaySprite
0000A3AE                            ; ===========================================================================
0000A3AE                            
0000A3AE                            Obj37_Delete:				; XREF: Obj37_Index
0000A3AE 6000 0000                  		bra.w	DeleteObject
0000A3B2                            ; ===========================================================================
0000A3B2                            ; ---------------------------------------------------------------------------
0000A3B2                            ; Object 4B - giant ring for entry to special stage
0000A3B2                            ; ---------------------------------------------------------------------------
0000A3B2                            
0000A3B2                            Obj4B:					; XREF: Obj_Index
0000A3B2 7000                       		moveq	#0,d0
0000A3B4 1028 0024                  		move.b	$24(a0),d0
0000A3B8 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A3BC 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A3C0                            ; ===========================================================================
0000A3C0 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A3C2 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A3C4 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A3C6 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A3C8                            ; ===========================================================================
0000A3C8                            
0000A3C8                            Obj4B_Main:				; XREF: Obj4B_Index
0000A3C8 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A3D0 317C 2400 0002             		move.w	#$2400,2(a0)
0000A3D6 0028 0004 0001             		ori.b	#4,1(a0)
0000A3DC 117C 0040 0019             		move.b	#$40,$19(a0)
0000A3E2 4A28 0001                  		tst.b	1(a0)
0000A3E6 6A00                       		bpl.s	Obj4B_Animate
0000A3E8 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A3EE 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A3F2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A3F8 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A3FA 4E75                       		rts	
0000A3FC                            ; ===========================================================================
0000A3FC                            
0000A3FC                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A3FC 5428 0024                  		addq.b	#2,$24(a0)
0000A400 117C 0002 0018             		move.b	#2,$18(a0)
0000A406 117C 0052 0020             		move.b	#$52,$20(a0)
0000A40C 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A412                            
0000A412                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A412 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A418 3028 0008                  		move.w	8(a0),d0
0000A41C 0240 FF80                  		andi.w	#$FF80,d0
0000A420 3238 F700                  		move.w	($FFFFF700).w,d1
0000A424 0441 0080                  		subi.w	#$80,d1
0000A428 0241 FF80                  		andi.w	#$FF80,d1
0000A42C 9041                       		sub.w	d1,d0
0000A42E 0C40 0280                  		cmpi.w	#$280,d0
0000A432 6200 0000                  		bhi.w	DeleteObject
0000A436 6000 0000                  		bra.w	DisplaySprite
0000A43A                            ; ===========================================================================
0000A43A                            
0000A43A                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A43A 5528 0024                  		subq.b	#2,$24(a0)
0000A43E 117C 0000 0020             		move.b	#0,$20(a0)
0000A444 6100 0000                  		bsr.w	SingleObjLoad
0000A448 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A44C 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A450 3368 0008 0008             		move.w	8(a0),8(a1)
0000A456 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A45C 2348 003C                  		move.l	a0,$3C(a1)
0000A460 3038 D008                  		move.w	($FFFFD008).w,d0
0000A464 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A468 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A46A 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A470                            
0000A470                            Obj4B_PlaySnd:
0000A470 303C 00C3                  		move.w	#$C3,d0
0000A474 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A47A 6096                       		bra.s	Obj4B_Animate
0000A47C                            ; ===========================================================================
0000A47C                            
0000A47C                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A47C 6000 0000                  		bra.w	DeleteObject
0000A480                            ; ===========================================================================
0000A480                            ; ---------------------------------------------------------------------------
0000A480                            ; Object 7C - flash effect when	you collect the	giant ring
0000A480                            ; ---------------------------------------------------------------------------
0000A480                            
0000A480                            Obj7C:					; XREF: Obj_Index
0000A480 7000                       		moveq	#0,d0
0000A482 1028 0024                  		move.b	$24(a0),d0
0000A486 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A48A 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A48E                            ; ===========================================================================
0000A48E 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A490 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A492 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A494                            ; ===========================================================================
0000A494                            
0000A494                            Obj7C_Main:				; XREF: Obj7C_Index
0000A494 5428 0024                  		addq.b	#2,$24(a0)
0000A498 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A4A0 317C 2462 0002             		move.w	#$2462,2(a0)
0000A4A6 0028 0004 0001             		ori.b	#4,1(a0)
0000A4AC 117C 0000 0018             		move.b	#0,$18(a0)
0000A4B2 117C 0020 0019             		move.b	#$20,$19(a0)
0000A4B8 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A4BE                            
0000A4BE                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A4BE 6100                       		bsr.s	Obj7C_Collect
0000A4C0 3028 0008                  		move.w	8(a0),d0
0000A4C4 0240 FF80                  		andi.w	#$FF80,d0
0000A4C8 3238 F700                  		move.w	($FFFFF700).w,d1
0000A4CC 0441 0080                  		subi.w	#$80,d1
0000A4D0 0241 FF80                  		andi.w	#$FF80,d1
0000A4D4 9041                       		sub.w	d1,d0
0000A4D6 0C40 0280                  		cmpi.w	#$280,d0
0000A4DA 6200 0000                  		bhi.w	DeleteObject
0000A4DE 6000 0000                  		bra.w	DisplaySprite
0000A4E2                            
0000A4E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A4E2                            
0000A4E2                            
0000A4E2                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A4E2 5328 001E                  		subq.b	#1,$1E(a0)
0000A4E6 6A00                       		bpl.s	locret_9F76
0000A4E8 117C 0001 001E             		move.b	#1,$1E(a0)
0000A4EE 5228 001A                  		addq.b	#1,$1A(a0)
0000A4F2 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A4F8 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A4FA 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A500 6600                       		bne.s	locret_9F76	; if not, branch
0000A502 2268 003C                  		movea.l	$3C(a0),a1
0000A506 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A50C 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A512 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A518 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A51C 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A520                            
0000A520                            locret_9F76:
0000A520 4E75                       		rts	
0000A522                            ; ===========================================================================
0000A522                            
0000A522                            Obj7C_End:				; XREF: Obj7C_Collect
0000A522 5428 0024                  		addq.b	#2,$24(a0)
0000A526 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A52C 588F                       		addq.l	#4,sp
0000A52E 4E75                       		rts	
0000A530                            ; End of function Obj7C_Collect
0000A530                            
0000A530                            ; ===========================================================================
0000A530                            
0000A530                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A530 6000 0000                  		bra.w	DeleteObject
0000A534                            ; ===========================================================================
0000A534                            Ani_obj25:
0000A534                            	include "_anim\obj25.asm"
0000A534                            ; ---------------------------------------------------------------------------
0000A534                            ; Animation script - ring
0000A534                            ; ---------------------------------------------------------------------------
0000A534 0000                       		dc.w byte_9F8C-Ani_obj25
0000A536 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A53C                            		even
0000A53C                            		even
0000A53C                            
0000A53C                            ; ---------------------------------------------------------------------------
0000A53C                            ; Sprite mappings - rings
0000A53C                            ; ---------------------------------------------------------------------------
0000A53C                            Map_obj25:
0000A53C                            	include "_maps\obj25.asm"
0000A53C                            ; ---------------------------------------------------------------------------
0000A53C                            ; Sprite mappings - rings
0000A53C                            ; ---------------------------------------------------------------------------
0000A53C 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A540 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A544 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A548 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A54C 01                         byte_9FA2:	dc.b 1
0000A54D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A552 01                         byte_9FA8:	dc.b 1
0000A553 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A558 01                         byte_9FAE:	dc.b 1
0000A559 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A55E 01                         byte_9FB4:	dc.b 1
0000A55F F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A564 01                         byte_9FBA:	dc.b 1
0000A565 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A56A 01                         byte_9FC0:	dc.b 1
0000A56B F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A570 01                         byte_9FC6:	dc.b 1
0000A571 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A576 01                         byte_9FCC:	dc.b 1
0000A577 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A57C                            		even
0000A57C                            		even
0000A57C                            
0000A57C                            ; ---------------------------------------------------------------------------
0000A57C                            ; Sprite mappings - giant ring
0000A57C                            ; ---------------------------------------------------------------------------
0000A57C                            Map_obj4B:
0000A57C                            	include "_maps\obj4B.asm"
0000A57C                            ; ---------------------------------------------------------------------------
0000A57C                            ; Sprite mappings - giant ring
0000A57C                            ; ---------------------------------------------------------------------------
0000A57C 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A580 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A584 0A                         byte_9FDA:	dc.b $A
0000A585 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A58A E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A58F E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A594 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A599 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A59E F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A5A3 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A5A8 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A5AD 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A5B2 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A5B7 08                         byte_A00D:	dc.b 8
0000A5B8 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A5BD E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A5C2 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A5C7 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A5CC F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A5D1 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A5D6 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A5DB 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A5E0 04                         byte_A036:	dc.b 4
0000A5E1 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A5E6 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A5EB 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A5F0 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A5F5 08                         byte_A04B:	dc.b 8
0000A5F6 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A5FB E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A600 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A605 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A60A F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A60F 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A614 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A619 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A61E                            		even
0000A61E                            		even
0000A61E                            
0000A61E                            ; ---------------------------------------------------------------------------
0000A61E                            ; Sprite mappings - flash effect when you collect the giant ring
0000A61E                            ; ---------------------------------------------------------------------------
0000A61E                            Map_obj7C:
0000A61E                            	include "_maps\obj7C.asm"
0000A61E                            ; ---------------------------------------------------------------------------
0000A61E                            ; Sprite mappings - flash effect when you collect the giant ring
0000A61E                            ; ---------------------------------------------------------------------------
0000A61E 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A622 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A626 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A62A 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A62E 02                         byte_A084:	dc.b 2
0000A62F E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A634 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A639 04                         byte_A08F:	dc.b 4
0000A63A E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A63F E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A644 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A649 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A64E 04                         byte_A0A4:	dc.b 4
0000A64F E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A654 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A659 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A65E 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A663 04                         byte_A0B9:	dc.b 4
0000A664 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A669 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A66E 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A673 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A678 04                         byte_A0CE:	dc.b 4
0000A679 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A67E E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A683 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A688 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A68D 04                         byte_A0E3:	dc.b 4
0000A68E E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A693 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A698 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A69D 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A6A2 02                         byte_A0F8:	dc.b 2
0000A6A3 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A6A8 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A6AD 04                         byte_A103:	dc.b 4
0000A6AE E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A6B3 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A6B8 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A6BD 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A6C2                            		even
0000A6C2                            		even
0000A6C2                            
0000A6C2                            ; ===========================================================================
0000A6C2                            ; ---------------------------------------------------------------------------
0000A6C2                            ; Object 26 - monitors
0000A6C2                            ; ---------------------------------------------------------------------------
0000A6C2                            
0000A6C2                            Obj26:					; XREF: Obj_Index
0000A6C2 7000                       		moveq	#0,d0
0000A6C4 1028 0024                  		move.b	$24(a0),d0
0000A6C8 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A6CC 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A6D0                            ; ===========================================================================
0000A6D0 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A6D2 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A6D4 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A6D6 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A6D8 0000                       		dc.w Obj26_Display-Obj26_Index
0000A6DA                            ; ===========================================================================
0000A6DA                            
0000A6DA                            Obj26_Main:				; XREF: Obj26_Index
0000A6DA 5428 0024                  		addq.b	#2,$24(a0)
0000A6DE 117C 000E 0016             		move.b	#$E,$16(a0)
0000A6E4 117C 000E 0017             		move.b	#$E,$17(a0)
0000A6EA 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A6F2 317C 0680 0002             		move.w	#$680,2(a0)
0000A6F8 117C 0004 0001             		move.b	#4,1(a0)
0000A6FE 117C 0003 0018             		move.b	#3,$18(a0)
0000A704 117C 000F 0019             		move.b	#$F,$19(a0)
0000A70A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A70E 7000                       		moveq	#0,d0
0000A710 1028 0023                  		move.b	$23(a0),d0
0000A714 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A71A 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A720 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A722 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A728 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A72E 4E75                       		rts	
0000A730                            ; ===========================================================================
0000A730                            
0000A730                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A730 117C 0046 0020             		move.b	#$46,$20(a0)
0000A736 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A73C                            
0000A73C                            Obj26_Solid:				; XREF: Obj26_Index
0000A73C 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A740 6700                       		beq.s	loc_A1EC	; if not, branch
0000A742 5500                       		subq.b	#2,d0
0000A744 6600                       		bne.s	Obj26_Fall
0000A746 7200                       		moveq	#0,d1
0000A748 1228 0019                  		move.b	$19(a0),d1
0000A74C 0641 000B                  		addi.w	#$B,d1
0000A750 6100 D41C                  		bsr.w	ExitPlatform
0000A754 0829 0003 0022             		btst	#3,$22(a1)
0000A75A 6600 0000                  		bne.w	loc_A1BC
0000A75E 4228 0025                  		clr.b	$25(a0)
0000A762 6000 0000                  		bra.w	Obj26_Animate
0000A766                            ; ===========================================================================
0000A766                            
0000A766                            loc_A1BC:				; XREF: Obj26_Solid
0000A766 363C 0010                  		move.w	#$10,d3
0000A76A 3428 0008                  		move.w	8(a0),d2
0000A76E 6100 D95C                  		bsr.w	MvSonicOnPtfm
0000A772 6000 0000                  		bra.w	Obj26_Animate
0000A776                            ; ===========================================================================
0000A776                            
0000A776                            Obj26_Fall:				; XREF: Obj26_Solid
0000A776 6100 0000                  		bsr.w	ObjectFall
0000A77A 4EB9 0000 0000             		jsr	ObjHitFloor
0000A780 4A41                       		tst.w	d1
0000A782 6A00 0000                  		bpl.w	Obj26_Animate
0000A786 D368 000C                  		add.w	d1,$C(a0)
0000A78A 4268 0012                  		clr.w	$12(a0)
0000A78E 4228 0025                  		clr.b	$25(a0)
0000A792 6000 0000                  		bra.w	Obj26_Animate
0000A796                            ; ===========================================================================
0000A796                            
0000A796                            loc_A1EC:				; XREF: Obj26_Solid
0000A796 323C 001A                  		move.w	#$1A,d1
0000A79A 343C 000F                  		move.w	#$F,d2
0000A79E 6100 0000                  		bsr.w	Obj26_SolidSides
0000A7A2 6700 0000                  		beq.w	loc_A25C
0000A7A6 4A69 0012                  		tst.w	$12(a1)
0000A7AA 6B00                       		bmi.s	loc_A20A
0000A7AC 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A7B2 6700                       		beq.s	loc_A25C	; if yes, branch
0000A7B4                            
0000A7B4                            loc_A20A:
0000A7B4 4A41                       		tst.w	d1
0000A7B6 6A00                       		bpl.s	loc_A220
0000A7B8 9769 000C                  		sub.w	d3,$C(a1)
0000A7BC 6100 D29E                  		bsr.w	loc_74AE
0000A7C0 117C 0002 0025             		move.b	#2,$25(a0)
0000A7C6 6000 0000                  		bra.w	Obj26_Animate
0000A7CA                            ; ===========================================================================
0000A7CA                            
0000A7CA                            loc_A220:
0000A7CA 4A40                       		tst.w	d0
0000A7CC 6700 0000                  		beq.w	loc_A246
0000A7D0 6B00                       		bmi.s	loc_A230
0000A7D2 4A69 0010                  		tst.w	$10(a1)
0000A7D6 6B00                       		bmi.s	loc_A246
0000A7D8 6000                       		bra.s	loc_A236
0000A7DA                            ; ===========================================================================
0000A7DA                            
0000A7DA                            loc_A230:
0000A7DA 4A69 0010                  		tst.w	$10(a1)
0000A7DE 6A00                       		bpl.s	loc_A246
0000A7E0                            
0000A7E0                            loc_A236:
0000A7E0 9169 0008                  		sub.w	d0,8(a1)
0000A7E4 337C 0000 0014             		move.w	#0,$14(a1)
0000A7EA 337C 0000 0010             		move.w	#0,$10(a1)
0000A7F0                            
0000A7F0                            loc_A246:
0000A7F0 0829 0001 0022             		btst	#1,$22(a1)
0000A7F6 6600                       		bne.s	loc_A26A
0000A7F8 08E9 0005 0022             		bset	#5,$22(a1)
0000A7FE 08E8 0005 0022             		bset	#5,$22(a0)
0000A804 6000                       		bra.s	Obj26_Animate
0000A806                            ; ===========================================================================
0000A806                            
0000A806                            loc_A25C:
0000A806 0828 0005 0022             		btst	#5,$22(a0)
0000A80C 6700                       		beq.s	Obj26_Animate
0000A80E 337C 0001 001C             		move.w	#1,$1C(a1)
0000A814                            
0000A814                            loc_A26A:
0000A814 08A8 0005 0022             		bclr	#5,$22(a0)
0000A81A 08A9 0005 0022             		bclr	#5,$22(a1)
0000A820                            
0000A820                            Obj26_Animate:				; XREF: Obj26_Index
0000A820 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A826 6100 0000                  		bsr.w	AnimateSprite
0000A82A                            
0000A82A                            Obj26_Display:				; XREF: Obj26_Index
0000A82A 6100 0000                  		bsr.w	DisplaySprite
0000A82E 3028 0008                  		move.w	8(a0),d0
0000A832 0240 FF80                  		andi.w	#$FF80,d0
0000A836 3238 F700                  		move.w	($FFFFF700).w,d1
0000A83A 0441 0080                  		subi.w	#$80,d1
0000A83E 0241 FF80                  		andi.w	#$FF80,d1
0000A842 9041                       		sub.w	d1,d0
0000A844 0C40 0280                  		cmpi.w	#$280,d0
0000A848 6200 0000                  		bhi.w	DeleteObject
0000A84C 4E75                       		rts	
0000A84E                            ; ===========================================================================
0000A84E                            
0000A84E                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A84E 5428 0024                  		addq.b	#2,$24(a0)
0000A852 117C 0000 0020             		move.b	#0,$20(a0)
0000A858 6100 0000                  		bsr.w	SingleObjLoad
0000A85C 6600                       		bne.s	Obj26_Explode
0000A85E 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A862 3368 0008 0008             		move.w	8(a0),8(a1)
0000A868 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A86E 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A874 7400                       		moveq	#0,d2	; GMZ
0000A876 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A878                            
0000A878                            Obj26_Explode:
0000A878 6100 0000                  		bsr.w	SingleObjLoad
0000A87C 6600                       		bne.s	Obj26_SetBroken
0000A87E 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A882 5429 0024                  		addq.b	#2,$24(a1)
0000A886 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A88A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A890 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A896                            
0000A896                            Obj26_NextExplosion:
0000A896 5802                       		addq.b	#4,d2
0000A898 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A89C                            
0000A89C                            Obj26_SetBroken:
0000A89C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A8A0 7000                       		moveq	#0,d0
0000A8A2 1028 0023                  		move.b	$23(a0),d0
0000A8A6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A8AC 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A8B2 6000 0000                  		bra.w	DisplaySprite
0000A8B6                            ; ===========================================================================
0000A8B6                            ; ---------------------------------------------------------------------------
0000A8B6                            ; Object 2E - contents of monitors
0000A8B6                            ; ---------------------------------------------------------------------------
0000A8B6                            
0000A8B6                            Obj2E:					; XREF: Obj_Index
0000A8B6 7000                       		moveq	#0,d0
0000A8B8 1028 0024                  		move.b	$24(a0),d0
0000A8BC 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A8C0 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A8C4 6000 0000                  		bra.w	DisplaySprite
0000A8C8                            ; ===========================================================================
0000A8C8 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A8CA 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A8CC 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A8CE                            ; ===========================================================================
0000A8CE                            
0000A8CE                            Obj2E_Main:				; XREF: Obj2E_Index
0000A8CE 5428 0024                  		addq.b	#2,$24(a0)
0000A8D2 317C 0680 0002             		move.w	#$680,2(a0)
0000A8D8 117C 0024 0001             		move.b	#$24,1(a0)
0000A8DE 117C 0003 0018             		move.b	#3,$18(a0)
0000A8E4 117C 0008 0019             		move.b	#8,$19(a0)
0000A8EA 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A8F0 7000                       		moveq	#0,d0
0000A8F2 1028 001C                  		move.b	$1C(a0),d0
0000A8F6 5400                       		addq.b	#2,d0
0000A8F8 1140 001A                  		move.b	d0,$1A(a0)
0000A8FC 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A902 D000                       		add.b	d0,d0
0000A904 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A908 5249                       		addq.w	#1,a1
0000A90A 2149 0004                  		move.l	a1,4(a0)
0000A90E                            
0000A90E                            Obj2E_Move:				; XREF: Obj2E_Index
0000A90E 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A912 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A916 6100 0000                  		bsr.w	SpeedToPos
0000A91A 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A920 4E75                       		rts	
0000A922                            ; ===========================================================================
0000A922                            
0000A922                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A922 5428 0024                  		addq.b	#2,$24(a0)
0000A926 317C 001D 001E             		move.w	#29,$1E(a0)
0000A92C 1028 001C                  		move.b	$1C(a0),d0
0000A930 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A934 6600                       		bne.s	Obj2E_ChkSonic
0000A936 4E75                       		rts			; Eggman monitor does nothing
0000A938                            ; ===========================================================================
0000A938                            
0000A938                            Obj2E_ChkSonic:
0000A938 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A93C 6600                       		bne.s	Obj2E_ChkShoes
0000A93E                            
0000A93E                            ExtraLife:
0000A93E 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A942 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A946 303C 0088                  		move.w	#$88,d0
0000A94A 4EF9 0000 15BA             		jmp	(PlaySound).l	; play extra life music
0000A950                            ; ===========================================================================
0000A950                            
0000A950                            Obj2E_ChkShoes:
0000A950 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A954 6600                       		bne.s	Obj2E_ChkShield
0000A956 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A95C 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A962 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A968 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A96E 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A974 303C 00E2                  		move.w	#$E2,d0
0000A978 4EF9 0000 15BA             		jmp	(PlaySound).l	; Speed	up the music
0000A97E                            ; ===========================================================================
0000A97E                            
0000A97E                            Obj2E_ChkShield:
0000A97E 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000A982 6600                       		bne.s	Obj2E_ChkInvinc
0000A984 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000A98A 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000A990 303C 00AF                  		move.w	#$AF,d0
0000A994 4EF9 0000 15BA             		jmp	(PlaySound).l	; play shield sound
0000A99A                            ; ===========================================================================
0000A99A                            
0000A99A                            Obj2E_ChkInvinc:
0000A99A 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000A99E 6600                       		bne.s	Obj2E_ChkRings
0000A9A0 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000A9A6 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000A9AC 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000A9B2 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000A9B8 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000A9BE 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000A9C4 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000A9CA 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000A9D0 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000A9D6 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000A9DC 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000A9E0 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000A9E2 303C 0087                  		move.w	#$87,d0
0000A9E6 4EF9 0000 15BA             		jmp	(PlaySound).l	; play invincibility music
0000A9EC                            ; ===========================================================================
0000A9EC                            
0000A9EC                            Obj2E_NoMusic:
0000A9EC 4E75                       		rts	
0000A9EE                            ; ===========================================================================
0000A9EE                            
0000A9EE                            Obj2E_ChkRings:
0000A9EE 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000A9F2 6600                       		bne.s	Obj2E_ChkS
0000A9F4 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000A9FA 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000AA00 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AA06 6500                       		bcs.s	Obj2E_RingSound
0000AA08 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AA0E 6700 FF2E                  		beq.w	ExtraLife
0000AA12 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AA18 6500                       		bcs.s	Obj2E_RingSound
0000AA1A 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000AA20 6700 FF1C                  		beq.w	ExtraLife
0000AA24                            
0000AA24                            Obj2E_RingSound:
0000AA24 303C 00B5                  		move.w	#$B5,d0
0000AA28 4EF9 0000 15BA             		jmp	(PlaySound).l	; play ring sound
0000AA2E                            ; ===========================================================================
0000AA2E                            
0000AA2E                            Obj2E_ChkS:
0000AA2E 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000AA32 6600                       		bne.s	Obj2E_ChkEnd
0000AA34                            		; nop	
0000AA34 7201                       		moveq	#1,d1
0000AA36 B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000AA3A                            
0000AA3A                            Obj2E_ChkEnd:
0000AA3A 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AA3C                            ; ===========================================================================
0000AA3C                            
0000AA3C                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AA3C 5368 001E                  		subq.w	#1,$1E(a0)
0000AA40 6B00 0000                  		bmi.w	DeleteObject
0000AA44 4E75                       		rts	
0000AA46                            ; ---------------------------------------------------------------------------
0000AA46                            ; Subroutine to	make the sides of a monitor solid
0000AA46                            ; ---------------------------------------------------------------------------
0000AA46                            
0000AA46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AA46                            
0000AA46                            
0000AA46                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AA46 43F8 D000                  		lea	($FFFFD000).w,a1
0000AA4A 3029 0008                  		move.w	8(a1),d0
0000AA4E 9068 0008                  		sub.w	8(a0),d0
0000AA52 D041                       		add.w	d1,d0
0000AA54 6B00                       		bmi.s	loc_A4E6
0000AA56 3601                       		move.w	d1,d3
0000AA58 D643                       		add.w	d3,d3
0000AA5A B043                       		cmp.w	d3,d0
0000AA5C 6200                       		bhi.s	loc_A4E6
0000AA5E 1629 0016                  		move.b	$16(a1),d3
0000AA62 4883                       		ext.w	d3
0000AA64 D443                       		add.w	d3,d2
0000AA66 3629 000C                  		move.w	$C(a1),d3
0000AA6A 9668 000C                  		sub.w	$C(a0),d3
0000AA6E D642                       		add.w	d2,d3
0000AA70 6B00                       		bmi.s	loc_A4E6
0000AA72 D442                       		add.w	d2,d2
0000AA74 B642                       		cmp.w	d2,d3
0000AA76 6400                       		bcc.s	loc_A4E6
0000AA78 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AA7C 6B00                       		bmi.s	loc_A4E6
0000AA7E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AA84 6400                       		bcc.s	loc_A4E6
0000AA86 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AA8A 6600                       		bne.s	loc_A4E6
0000AA8C B240                       		cmp.w	d0,d1
0000AA8E 6400                       		bcc.s	loc_A4DC
0000AA90 D241                       		add.w	d1,d1
0000AA92 9041                       		sub.w	d1,d0
0000AA94                            
0000AA94                            loc_A4DC:
0000AA94 0C43 0010                  		cmpi.w	#$10,d3
0000AA98 6500                       		bcs.s	loc_A4EA
0000AA9A                            
0000AA9A                            loc_A4E2:
0000AA9A 7201                       		moveq	#1,d1
0000AA9C 4E75                       		rts	
0000AA9E                            ; ===========================================================================
0000AA9E                            
0000AA9E                            loc_A4E6:
0000AA9E 7200                       		moveq	#0,d1
0000AAA0 4E75                       		rts	
0000AAA2                            ; ===========================================================================
0000AAA2                            
0000AAA2                            loc_A4EA:
0000AAA2 7200                       		moveq	#0,d1
0000AAA4 1228 0019                  		move.b	$19(a0),d1
0000AAA8 5841                       		addq.w	#4,d1
0000AAAA 3401                       		move.w	d1,d2
0000AAAC D442                       		add.w	d2,d2
0000AAAE D269 0008                  		add.w	8(a1),d1
0000AAB2 9268 0008                  		sub.w	8(a0),d1
0000AAB6 6BE2                       		bmi.s	loc_A4E2
0000AAB8 B242                       		cmp.w	d2,d1
0000AABA 64DE                       		bcc.s	loc_A4E2
0000AABC 72FF                       		moveq	#-1,d1
0000AABE 4E75                       		rts	
0000AAC0                            ; End of function Obj26_SolidSides
0000AAC0                            
0000AAC0                            ; ===========================================================================
0000AAC0                            Ani_obj26:
0000AAC0                            	include "_anim\obj26.asm"
0000AAC0                            ; ---------------------------------------------------------------------------
0000AAC0                            ; Animation script - monitors
0000AAC0                            ; ---------------------------------------------------------------------------
0000AAC0 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000AAC6 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000AACC 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000AAD2 0000                       		dc.w byte_A582-Ani_obj26
0000AAD4 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000AADA 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000AAE6 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000AAF2 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000AAFE 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000AB0A 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000AB16 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000AB22 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000AB2E 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000AB3A 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000AB42                            		even
0000AB42                            		even
0000AB42                            
0000AB42                            ; ---------------------------------------------------------------------------
0000AB42                            ; Sprite mappings - monitors
0000AB42                            ; ---------------------------------------------------------------------------
0000AB42                            Map_obj26:
0000AB42                            	include "_maps\obj26.asm"
0000AB42                            ; ================================================================================
0000AB42                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000AB42                            ; ================================================================================
0000AB42                            
0000AB42                            DATAY1U343IF3L:
0000AB42 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000AB46 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000AB4A 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000AB4E 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000AB52 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000AB56 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000AB5A 05                         DATAY1U343IF3L_0: dc.b $5
0000AB5B E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB60 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB65 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB6A 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB6F 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB74 06                         DATAY1U343IF3L_1: dc.b $6
0000AB75 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AB7A E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB7F 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB84 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB89 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB8E 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB93 05                         DATAY1U343IF3L_2: dc.b $5
0000AB94 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB99 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB9E E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ABA3 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ABA8 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ABAD 05                         DATAY1U343IF3L_3: dc.b $5
0000ABAE E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ABB3 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ABB8 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ABBD 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ABC2 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ABC7 06                         DATAY1U343IF3L_4: dc.b $6
0000ABC8 F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000ABCD E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ABD2 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ABD7 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ABDC 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ABE1 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ABE6 06                         DATAY1U343IF3L_5: dc.b $6
0000ABE7 F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000ABEC E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ABF1 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ABF6 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ABFB 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC00 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC05 06                         DATAY1U343IF3L_6: dc.b $6
0000AC06 F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AC0B E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC10 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC15 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC1A 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC1F 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC24 06                         DATAY1U343IF3L_7: dc.b $6
0000AC25 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AC2A E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC2F 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC34 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC39 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC3E 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC43 06                         DATAY1U343IF3L_8: dc.b $6
0000AC44 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AC49 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC4E 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC53 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC58 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC5D 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC62 06                         DATAY1U343IF3L_9: dc.b $6
0000AC63 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AC68 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC6D 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC72 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC77 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC7C 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC81 05                         DATAY1U343IF3L_A: dc.b $5
0000AC82 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC87 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC8C E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC91 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC96 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC9B 01                         DATAY1U343IF3L_B: dc.b $1
0000AC9C FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000ACA2 00                         	even
0000ACA2 00                         	even
0000ACA2                            
0000ACA2                            ; ===========================================================================
0000ACA2                            ; ---------------------------------------------------------------------------
0000ACA2                            ; Object 0E - Sonic on the title screen
0000ACA2                            ; ---------------------------------------------------------------------------
0000ACA2                            
0000ACA2                            Obj0E:					; XREF: Obj_Index
0000ACA2 7000                       		moveq	#0,d0
0000ACA4 1028 0024                  		move.b	$24(a0),d0
0000ACA8 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000ACAC 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000ACB0                            ; ===========================================================================
0000ACB0 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000ACB2 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000ACB4 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000ACB6 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000ACB8                            ; ===========================================================================
0000ACB8                            
0000ACB8                            Obj0E_Main:				; XREF: Obj0E_Index
0000ACB8 5428 0024                  		addq.b	#2,$24(a0)
0000ACBC 317C 00F0 0008             		move.w	#$F0,8(a0)
0000ACC2 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000ACC8 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000ACD0 317C 2300 0002             		move.w	#$2300,2(a0)
0000ACD6 117C 0001 0018             		move.b	#1,$18(a0)
0000ACDC 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000ACE2 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000ACE8 6100 0000                  		bsr.w	AnimateSprite
0000ACEC                            
0000ACEC                            Obj0E_Delay:				; XREF: Obj0E_Index
0000ACEC 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000ACF0 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000ACF2 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000ACF6 6000 0000                  		bra.w	DisplaySprite
0000ACFA                            ; ===========================================================================
0000ACFA                            
0000ACFA                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000ACFA 4E75                       		rts	
0000ACFC                            ; ===========================================================================
0000ACFC                            
0000ACFC                            Obj0E_Move:				; XREF: Obj0E_Index
0000ACFC 5168 000A                  		subq.w	#8,$A(a0)
0000AD00 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000AD06 6600                       		bne.s	Obj0E_Display
0000AD08 5428 0024                  		addq.b	#2,$24(a0)
0000AD0C                            
0000AD0C                            Obj0E_Display:
0000AD0C 6000 0000                  		bra.w	DisplaySprite
0000AD10                            ; ===========================================================================
0000AD10 4E75                       		rts	
0000AD12                            ; ===========================================================================
0000AD12                            
0000AD12                            Obj0E_Animate:				; XREF: Obj0E_Index
0000AD12 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AD18 6100 0000                  		bsr.w	AnimateSprite
0000AD1C 6000 0000                  		bra.w	DisplaySprite
0000AD20                            ; ===========================================================================
0000AD20 4E75                       		rts	
0000AD22                            ; ===========================================================================
0000AD22                            ; ---------------------------------------------------------------------------
0000AD22                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000AD22                            ; ---------------------------------------------------------------------------
0000AD22                            
0000AD22                            Obj0F:					; XREF: Obj_Index
0000AD22 7000                       		moveq	#0,d0
0000AD24 1028 0024                  		move.b	$24(a0),d0
0000AD28 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000AD2C 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000AD30 6000 0000                  		bra.w	DisplaySprite
0000AD34                            ; ===========================================================================
0000AD34 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000AD36 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000AD38 0000                       		dc.w locret_A6F8-Obj0F_Index
0000AD3A                            ; ===========================================================================
0000AD3A                            
0000AD3A                            Obj0F_Main:				; XREF: Obj0F_Index
0000AD3A 5428 0024                  		addq.b	#2,$24(a0)
0000AD3E 317C 00D0 0008             		move.w	#$D0,8(a0)
0000AD44 317C 0130 000A             		move.w	#$130,$A(a0)
0000AD4A 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000AD52 317C 0200 0002             		move.w	#$200,2(a0)
0000AD58 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000AD5E 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000AD60 5428 0024                  		addq.b	#2,$24(a0)
0000AD64 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000AD6A 6600                       		bne.s	locret_A6F8	; if not, branch
0000AD6C 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000AD72 317C 0170 0008             		move.w	#$170,8(a0)
0000AD78 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000AD7E                            
0000AD7E                            locret_A6F8:				; XREF: Obj0F_Index
0000AD7E 4E75                       		rts	
0000AD80                            ; ===========================================================================
0000AD80                            
0000AD80                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000AD80 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000AD86 6000 0000                  		bra.w	AnimateSprite
0000AD8A                            ; ===========================================================================
0000AD8A                            Ani_obj0E:
0000AD8A                            	include "_anim\obj0E.asm"
0000AD8A                            ; ---------------------------------------------------------------------------
0000AD8A                            ; Animation script - Sonic on the title screen
0000AD8A                            ; ---------------------------------------------------------------------------
0000AD8A 0000                       		dc.w byte_A706-Ani_obj0E
0000AD8C 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AD98                            		even
0000AD98                            		even
0000AD98                            
0000AD98                            Ani_obj0F:
0000AD98                            	include "_anim\obj0F.asm"
0000AD98                            ; ---------------------------------------------------------------------------
0000AD98                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AD98                            ; ---------------------------------------------------------------------------
0000AD98 0000                       		dc.w byte_A714-Ani_obj0F
0000AD9A 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AD9E                            		even
0000AD9E                            		even
0000AD9E                            
0000AD9E                            ; ---------------------------------------------------------------------------
0000AD9E                            ; Subroutine to	animate	a sprite using an animation script
0000AD9E                            ; ---------------------------------------------------------------------------
0000AD9E                            
0000AD9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AD9E                            
0000AD9E                            
0000AD9E                            AnimateSprite:
0000AD9E 7000                       		moveq	#0,d0
0000ADA0 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000ADA4 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000ADA8 6700                       		beq.s	Anim_Run	; if not, branch
0000ADAA 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000ADAE 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000ADB4 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000ADBA                            
0000ADBA                            Anim_Run:
0000ADBA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000ADBE 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000ADC0 D040                       		add.w	d0,d0
0000ADC2 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000ADC6 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000ADCA 7200                       		moveq	#0,d1
0000ADCC 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000ADD0 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000ADD4 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000ADD6                            
0000ADD6                            Anim_Next:
0000ADD6 1200                       		move.b	d0,d1
0000ADD8 0200 001F                  		andi.b	#$1F,d0
0000ADDC 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000ADE0 1028 0022                  		move.b	$22(a0),d0
0000ADE4 E719                       		rol.b	#3,d1
0000ADE6 B101                       		eor.b	d0,d1
0000ADE8 0201 0003                  		andi.b	#3,d1
0000ADEC 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000ADF2 8328 0001                  		or.b	d1,1(a0)
0000ADF6 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000ADFA                            
0000ADFA                            Anim_Wait:
0000ADFA 4E75                       		rts	
0000ADFC                            ; ===========================================================================
0000ADFC                            
0000ADFC                            Anim_End_FF:
0000ADFC 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000ADFE 6600                       		bne.s	Anim_End_FE	; if not, branch
0000AE00 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000AE06 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000AE0A 60CA                       		bra.s	Anim_Next
0000AE0C                            ; ===========================================================================
0000AE0C                            
0000AE0C                            Anim_End_FE:
0000AE0C 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000AE0E 6600                       		bne.s	Anim_End_FD	; if not, branch
0000AE10 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000AE14 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000AE18 9200                       		sub.b	d0,d1
0000AE1A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000AE1E 60B6                       		bra.s	Anim_Next
0000AE20                            ; ===========================================================================
0000AE20                            
0000AE20                            Anim_End_FD:
0000AE20 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000AE22 6600                       		bne.s	Anim_End_FC	; if not, branch
0000AE24 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000AE2A                            
0000AE2A                            Anim_End_FC:
0000AE2A 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000AE2C 6600                       		bne.s	Anim_End_FB	; if not, branch
0000AE2E 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000AE32                            
0000AE32                            Anim_End_FB:
0000AE32 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000AE34 6600                       		bne.s	Anim_End_FA	; if not, branch
0000AE36 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AE3C 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000AE40                            
0000AE40                            Anim_End_FA:
0000AE40 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000AE42 6600                       		bne.s	Anim_End	; if not, branch
0000AE44 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000AE48                            
0000AE48                            Anim_End:
0000AE48 4E75                       		rts	
0000AE4A                            ; End of function AnimateSprite
0000AE4A                            
0000AE4A                            ; ===========================================================================
0000AE4A                            ; ---------------------------------------------------------------------------
0000AE4A                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AE4A                            ; ---------------------------------------------------------------------------
0000AE4A                            Map_obj0F:
0000AE4A                            	include "_maps\obj0F.asm"
0000AE4A                            ; ---------------------------------------------------------------------------
0000AE4A                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AE4A                            ; ---------------------------------------------------------------------------
0000AE4A 0000                       		dc.w byte_A7CD-Map_obj0F
0000AE4C 0000                       		dc.w byte_A7CC-Map_obj0F
0000AE4E 0000                       		dc.w byte_A7EB-Map_obj0F
0000AE50 0000                       		dc.w byte_A882-Map_obj0F
0000AE52 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000AE53 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000AE58 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AE5D 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AE62 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AE67 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AE6C 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AE71 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AE72 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AE77 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AE7C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AE81 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AE86 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AE8B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AE90 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AE95 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AE9A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AE9F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AEA4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AEA9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AEAE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AEB3 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AEB8 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AEBD D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AEC2 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AEC7 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AECC D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AED1 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AED6 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AEDB F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AEE0 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AEE5 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AEEA F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AEEF F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AEF4 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AEF9 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AEFE F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF03 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF08 01                         byte_A882:	dc.b 1			; "TM"
0000AF09 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000AF0E                            		even
0000AF0E                            		even
0000AF0E                            
0000AF0E                            ; ---------------------------------------------------------------------------
0000AF0E                            ; Sprite mappings - Sonic on the title screen
0000AF0E                            ; ---------------------------------------------------------------------------
0000AF0E                            Map_obj0E:
0000AF0E                            	include "_maps\obj0E.asm"
0000AF0E                            ; ================================================================================
0000AF0E                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000AF0E                            ; ================================================================================
0000AF0E                            
0000AF0E                            DATAGKI0HYDQBXP:
0000AF0E 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000AF12 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000AF16 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000AF1A 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000AF1E 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000AF1F 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000AF24 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000AF29 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000AF2E 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000AF33 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000AF38 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000AF3D 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000AF42 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000AF47 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000AF48 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000AF4D 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000AF52 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000AF57 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000AF5C 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000AF61 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000AF66 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000AF6B 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000AF70 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000AF75 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000AF7A 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000AF7F 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000AF80 F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000AF85 F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000AF8A F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000AF8F 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000AF94 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000AF99 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000AF9E 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000AFA3 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000AFA8 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000AFAD 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000AFB2 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000AFB7 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000AFB8 FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000AFBD F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000AFC2 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000AFC7 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000AFCC 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000AFD1 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000AFD6 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000AFDB 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000AFE0 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000AFE5 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000AFEA 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000AFEB F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000AFF0 F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000AFF5 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000AFFA 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000AFFF 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000B004 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000B009 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000B00E 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000B013 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000B018 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000B01D 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000B022 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000B027 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000B02C 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000B031 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000B036 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000B03B 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000B03C 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B041 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B046 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B04B 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B050 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B055 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B05A 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B05F EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B064 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B069 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B06E 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B073 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000B074 EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000B079 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000B07E 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B083 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B088 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B08D 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B092 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B097 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B09C 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B0A1 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B0A6 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B0AB 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B0B0 EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000B0B5 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B0BA 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000B0BF 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000B0C0 EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000B0C5 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000B0CA 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000B0CF EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B0D4 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B0D9 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B0DE EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B0E3 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B0E8 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B0ED EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B0F2 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B0F7 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B0FC EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B101 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B106 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B10C 00                         	even
0000B10C 00                         	even
0000B10C                            
0000B10C                            ; ===========================================================================
0000B10C                            ; ---------------------------------------------------------------------------
0000B10C                            ; Object 2B - Chopper enemy (GHZ)
0000B10C                            ; ---------------------------------------------------------------------------
0000B10C                            
0000B10C                            Obj2B:					; XREF: Obj_Index
0000B10C 7000                       		moveq	#0,d0
0000B10E 1028 0024                  		move.b	$24(a0),d0
0000B112 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B116 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B11A 6000 0000                  		bra.w	MarkObjGone
0000B11E                            ; ===========================================================================
0000B11E 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B120 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B122                            ; ===========================================================================
0000B122                            
0000B122                            Obj2B_Main:				; XREF: Obj2B_Index
0000B122 5428 0024                  		addq.b	#2,$24(a0)
0000B126 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B12E 317C 047B 0002             		move.w	#$47B,2(a0)
0000B134 117C 0004 0001             		move.b	#4,1(a0)
0000B13A 117C 0004 0018             		move.b	#4,$18(a0)
0000B140 117C 0009 0020             		move.b	#9,$20(a0)
0000B146 117C 0010 0019             		move.b	#$10,$19(a0)
0000B14C 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B152 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B158                            
0000B158                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B158 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B15E 6100 FC3E                  		bsr.w	AnimateSprite
0000B162 6100 0000                  		bsr.w	SpeedToPos
0000B166 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B16C 3028 0030                  		move.w	$30(a0),d0
0000B170 B068 000C                  		cmp.w	$C(a0),d0
0000B174 6400                       		bcc.s	Obj2B_ChgAni
0000B176 3140 000C                  		move.w	d0,$C(a0)
0000B17A 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B180                            
0000B180                            Obj2B_ChgAni:
0000B180 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B186 0440 00C0                  		subi.w	#$C0,d0
0000B18A B068 000C                  		cmp.w	$C(a0),d0
0000B18E 6400                       		bcc.s	locret_ABB6
0000B190 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B196 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B19A 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B19C 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B1A2                            
0000B1A2                            locret_ABB6:
0000B1A2 4E75                       		rts	
0000B1A4                            ; ===========================================================================
0000B1A4                            Ani_obj2B:
0000B1A4                            	include "_anim\obj2B.asm"
0000B1A4                            ; ---------------------------------------------------------------------------
0000B1A4                            ; Animation script - Chopper enemy
0000B1A4                            ; ---------------------------------------------------------------------------
0000B1A4 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B1A6 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B1A8 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B1AA 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B1AE 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B1B2 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B1B6 00                         		even
0000B1B6 00                         		even
0000B1B6                            
0000B1B6                            ; ---------------------------------------------------------------------------
0000B1B6                            ; Sprite mappings - Chopper enemy (GHZ)
0000B1B6                            ; ---------------------------------------------------------------------------
0000B1B6                            Map_obj2B:
0000B1B6                            	include "_maps\obj2B.asm"
0000B1B6                            Map_1ff1:
0000B1B6 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000B1B8 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000B1BA 02                         Map_1ff1_4: 	dc.b $2
0000B1BB E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000B1C0 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B1C5 02                         Map_1ff1_F: 	dc.b $2
0000B1C6 E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000B1CB 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B1D0                            	even
0000B1D0                            	even
0000B1D0                            
0000B1D0                            ; ===========================================================================
0000B1D0                            ; ---------------------------------------------------------------------------
0000B1D0                            ; Object 2C - Jaws enemy (LZ)
0000B1D0                            ; ---------------------------------------------------------------------------
0000B1D0                            
0000B1D0                            Obj2C:					; XREF: Obj_Index
0000B1D0 7000                       		moveq	#0,d0
0000B1D2 1028 0024                  		move.b	$24(a0),d0
0000B1D6 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B1DA 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B1DE                            ; ===========================================================================
0000B1DE 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B1E0 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B1E2                            ; ===========================================================================
0000B1E2                            
0000B1E2                            Obj2C_Main:				; XREF: Obj2C_Index
0000B1E2 5428 0024                  		addq.b	#2,$24(a0)
0000B1E6 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B1EE 317C 2486 0002             		move.w	#$2486,2(a0)
0000B1F4 0028 0004 0001             		ori.b	#4,1(a0)
0000B1FA 117C 000A 0020             		move.b	#$A,$20(a0)
0000B200 117C 0004 0018             		move.b	#4,$18(a0)
0000B206 117C 0010 0019             		move.b	#$10,$19(a0)
0000B20C 7000                       		moveq	#0,d0
0000B20E 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B212 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B214 5340                       		subq.w	#1,d0
0000B216 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B21A 3140 0032                  		move.w	d0,$32(a0)
0000B21E 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B224 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B22A 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B22C 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B230                            
0000B230                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B230 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B234 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B236 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B23C 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B240 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B246 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B24C                            
0000B24C                            Obj2C_Animate:
0000B24C 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B252 6100 FB4A                  		bsr.w	AnimateSprite
0000B256 6100 0000                  		bsr.w	SpeedToPos
0000B25A 6000 0000                  		bra.w	MarkObjGone
0000B25E                            ; ===========================================================================
0000B25E                            Ani_obj2C:
0000B25E                            	include "_anim\obj2C.asm"
0000B25E                            ; ---------------------------------------------------------------------------
0000B25E                            ; Animation script - Jaws enemy
0000B25E                            ; ---------------------------------------------------------------------------
0000B25E 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B260 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B266                            		even
0000B266                            		even
0000B266                            
0000B266                            ; ---------------------------------------------------------------------------
0000B266                            ; Sprite mappings - Jaws enemy (LZ)
0000B266                            ; ---------------------------------------------------------------------------
0000B266                            Map_obj2C:
0000B266                            	include "_maps\obj2C.asm"
0000B266                            ; ---------------------------------------------------------------------------
0000B266                            ; Sprite mappings - Jaws enemy (LZ)
0000B266                            ; ---------------------------------------------------------------------------
0000B266 0000                       		dc.w byte_AC78-Map_obj2C
0000B268 0000                       		dc.w byte_AC83-Map_obj2C
0000B26A 0000                       		dc.w byte_AC8E-Map_obj2C
0000B26C 0000                       		dc.w byte_AC99-Map_obj2C
0000B26E 02                         byte_AC78:	dc.b 2
0000B26F F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B274 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B279 02                         byte_AC83:	dc.b 2
0000B27A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B27F F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B284 02                         byte_AC8E:	dc.b 2
0000B285 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B28A F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B28F 02                         byte_AC99:	dc.b 2
0000B290 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B295 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B29A                            		even
0000B29A                            		even
0000B29A                            
0000B29A                            ; ===========================================================================
0000B29A                            ; ---------------------------------------------------------------------------
0000B29A                            ; Object 2D - Burrobot enemy (LZ)
0000B29A                            ; ---------------------------------------------------------------------------
0000B29A                            
0000B29A                            Obj2D:					; XREF: Obj_Index
0000B29A 7000                       		moveq	#0,d0
0000B29C 1028 0024                  		move.b	$24(a0),d0
0000B2A0 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B2A4 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B2A8                            ; ===========================================================================
0000B2A8 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B2AA 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B2AC                            ; ===========================================================================
0000B2AC                            
0000B2AC                            Obj2D_Main:				; XREF: Obj2D_Index
0000B2AC 5428 0024                  		addq.b	#2,$24(a0)
0000B2B0 117C 0013 0016             		move.b	#$13,$16(a0)
0000B2B6 117C 0008 0017             		move.b	#8,$17(a0)
0000B2BC 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B2C4 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B2CA 0028 0004 0001             		ori.b	#4,1(a0)
0000B2D0 117C 0004 0018             		move.b	#4,$18(a0)
0000B2D6 117C 0005 0020             		move.b	#5,$20(a0)
0000B2DC 117C 000C 0019             		move.b	#$C,$19(a0)
0000B2E2 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B2E6 117C 0002 001C             		move.b	#2,$1C(a0)
0000B2EC                            
0000B2EC                            Obj2D_Action:				; XREF: Obj2D_Index
0000B2EC 7000                       		moveq	#0,d0
0000B2EE 1028 0025                  		move.b	$25(a0),d0
0000B2F2 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B2F6 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B2FA 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B300 6100 FA9C                  		bsr.w	AnimateSprite
0000B304 6000 0000                  		bra.w	MarkObjGone
0000B308                            ; ===========================================================================
0000B308 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B30A 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B30C 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B30E 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B310                            ; ===========================================================================
0000B310                            
0000B310                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B310 5368 0030                  		subq.w	#1,$30(a0)
0000B314 6A00                       		bpl.s	locret_AD42
0000B316 5428 0025                  		addq.b	#2,$25(a0)
0000B31A 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B320 317C 0080 0010             		move.w	#$80,$10(a0)
0000B326 117C 0001 001C             		move.b	#1,$1C(a0)
0000B32C 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B332 6700                       		beq.s	locret_AD42
0000B334 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B338                            
0000B338                            locret_AD42:
0000B338 4E75                       		rts	
0000B33A                            ; ===========================================================================
0000B33A                            
0000B33A                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B33A 5368 0030                  		subq.w	#1,$30(a0)
0000B33E 6B00                       		bmi.s	loc_AD84
0000B340 6100 0000                  		bsr.w	SpeedToPos
0000B344 0868 0000 0032             		bchg	#0,$32(a0)
0000B34A 6600                       		bne.s	loc_AD78
0000B34C 3628 0008                  		move.w	8(a0),d3
0000B350 0643 000C                  		addi.w	#$C,d3
0000B354 0828 0000 0022             		btst	#0,$22(a0)
0000B35A 6600                       		bne.s	loc_AD6A
0000B35C 0443 0018                  		subi.w	#$18,d3
0000B360                            
0000B360                            loc_AD6A:
0000B360 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B366 0C41 000C                  		cmpi.w	#$C,d1
0000B36A 6C00                       		bge.s	loc_AD84
0000B36C 4E75                       		rts	
0000B36E                            ; ===========================================================================
0000B36E                            
0000B36E                            loc_AD78:				; XREF: Obj2D_Move
0000B36E 4EB9 0000 0000             		jsr	ObjHitFloor
0000B374 D368 000C                  		add.w	d1,$C(a0)
0000B378 4E75                       		rts	
0000B37A                            ; ===========================================================================
0000B37A                            
0000B37A                            loc_AD84:				; XREF: Obj2D_Move
0000B37A 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B380 6700                       		beq.s	loc_ADA4
0000B382 5528 0025                  		subq.b	#2,$25(a0)
0000B386 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B38C 317C 0000 0010             		move.w	#0,$10(a0)
0000B392 117C 0000 001C             		move.b	#0,$1C(a0)
0000B398 4E75                       		rts	
0000B39A                            ; ===========================================================================
0000B39A                            
0000B39A                            loc_ADA4:
0000B39A 5428 0025                  		addq.b	#2,$25(a0)
0000B39E 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B3A4 117C 0002 001C             		move.b	#2,$1C(a0)
0000B3AA 4E75                       		rts	
0000B3AC                            ; ===========================================================================
0000B3AC                            
0000B3AC                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B3AC 6100 0000                  		bsr.w	SpeedToPos
0000B3B0 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B3B6 6B00                       		bmi.s	locret_ADF0
0000B3B8 117C 0003 001C             		move.b	#3,$1C(a0)
0000B3BE 4EB9 0000 0000             		jsr	ObjHitFloor
0000B3C4 4A41                       		tst.w	d1
0000B3C6 6A00                       		bpl.s	locret_ADF0
0000B3C8 D368 000C                  		add.w	d1,$C(a0)
0000B3CC 317C 0000 0012             		move.w	#0,$12(a0)
0000B3D2 117C 0001 001C             		move.b	#1,$1C(a0)
0000B3D8 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B3DE 5528 0025                  		subq.b	#2,$25(a0)
0000B3E2 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B3E6                            
0000B3E6                            locret_ADF0:
0000B3E6 4E75                       		rts	
0000B3E8                            ; ===========================================================================
0000B3E8                            
0000B3E8                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B3E8 343C 0060                  		move.w	#$60,d2
0000B3EC 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B3F0 6400                       		bcc.s	locret_AE20
0000B3F2 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B3F6 9068 000C                  		sub.w	$C(a0),d0
0000B3FA 6400                       		bcc.s	locret_AE20
0000B3FC 0C40 FF80                  		cmpi.w	#-$80,d0
0000B400 6500                       		bcs.s	locret_AE20
0000B402 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B406 6600                       		bne.s	locret_AE20
0000B408 5528 0025                  		subq.b	#2,$25(a0)
0000B40C 3141 0010                  		move.w	d1,$10(a0)
0000B410 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B416                            
0000B416                            locret_AE20:
0000B416 4E75                       		rts	
0000B418                            
0000B418                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B418                            
0000B418                            
0000B418                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B418 323C 0080                  		move.w	#$80,d1
0000B41C 08E8 0000 0022             		bset	#0,$22(a0)
0000B422 3038 D008                  		move.w	($FFFFD008).w,d0
0000B426 9068 0008                  		sub.w	8(a0),d0
0000B42A 6400                       		bcc.s	loc_AE40
0000B42C 4440                       		neg.w	d0
0000B42E 4441                       		neg.w	d1
0000B430 08A8 0000 0022             		bclr	#0,$22(a0)
0000B436                            
0000B436                            loc_AE40:
0000B436 B042                       		cmp.w	d2,d0
0000B438 4E75                       		rts	
0000B43A                            ; End of function Obj2D_ChkSonic2
0000B43A                            
0000B43A                            ; ===========================================================================
0000B43A                            Ani_obj2D:
0000B43A                            	include "_anim\obj2D.asm"
0000B43A                            ; ---------------------------------------------------------------------------
0000B43A                            ; Animation script - Burrobot enemy but craig
0000B43A                            ; ---------------------------------------------------------------------------
0000B43A 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B43C 0000                       		dc.w byte_AE50-Ani_obj2D
0000B43E 0000                       		dc.w byte_AE54-Ani_obj2D
0000B440 0000                       		dc.w byte_AE58-Ani_obj2D
0000B442 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B445 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B449 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B457 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B45A                            		even
0000B45A                            		even
0000B45A                            
0000B45A                            ; ---------------------------------------------------------------------------
0000B45A                            ; Sprite mappings - Burrobot enemy (LZ)
0000B45A                            ; ---------------------------------------------------------------------------
0000B45A                            Map_obj2D:
0000B45A                            	include "_maps\obj2D.asm"
0000B45A                            Map_e3a3:
0000B45A 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B45C 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B45E 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B460 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B462 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B464 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B466 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B468 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B46A 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B46C 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B46E 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B470 02                         Map_e3a3_16: 	dc.b $2
0000B471 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B476 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B47B 02                         Map_e3a3_21: 	dc.b $2
0000B47C EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B481 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B486 02                         Map_e3a3_2C: 	dc.b $2
0000B487 EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B48C 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B491 02                         Map_e3a3_37: 	dc.b $2
0000B492 EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B497 FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B49C 02                         Map_e3a3_42: 	dc.b $2
0000B49D EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B4A2 FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B4A7 02                         Map_e3a3_4D: 	dc.b $2
0000B4A8 EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B4AD FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B4B2 02                         Map_e3a3_58: 	dc.b $2
0000B4B3 EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B4B8 FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B4BD 02                         Map_e3a3_63: 	dc.b $2
0000B4BE EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B4C3 FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B4C8 02                         Map_e3a3_6E: 	dc.b $2
0000B4C9 EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B4CE FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B4D3 02                         Map_e3a3_79: 	dc.b $2
0000B4D4 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B4D9 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B4DE 02                         Map_e3a3_84: 	dc.b $2
0000B4DF EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B4E4 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B4EA 00                         	even
0000B4EA 00                         	even
0000B4EA                            
0000B4EA                            ; ===========================================================================
0000B4EA                            ; ---------------------------------------------------------------------------
0000B4EA                            ; Object 2F - large moving platforms (MZ)
0000B4EA                            ; ---------------------------------------------------------------------------
0000B4EA                            
0000B4EA                            Obj2F:					; XREF: Obj_Index
0000B4EA 7000                       		moveq	#0,d0
0000B4EC 1028 0024                  		move.b	$24(a0),d0
0000B4F0 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B4F4 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B4F8                            ; ===========================================================================
0000B4F8 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B4FA 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B4FC                            
0000B4FC 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B4FE 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B500 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B502 0140                       		dc.b 1,	$40
0000B504 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B506 0220                       		dc.b 2,	$20
0000B508                            ; ===========================================================================
0000B508                            
0000B508                            Obj2F_Main:				; XREF: Obj2F_Index
0000B508 5428 0024                  		addq.b	#2,$24(a0)
0000B50C 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B514 317C C000 0002             		move.w	#$C000,2(a0)
0000B51A 117C 0004 0001             		move.b	#4,1(a0)
0000B520 117C 0005 0018             		move.b	#5,$18(a0)
0000B526 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B52C 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B532 7000                       		moveq	#0,d0
0000B534 1028 0028                  		move.b	$28(a0),d0
0000B538 E448                       		lsr.w	#2,d0
0000B53A 0240 001C                  		andi.w	#$1C,d0
0000B53E 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B542 3019                       		move.w	(a1)+,d0
0000B544 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B548 214A 0030                  		move.l	a2,$30(a0)
0000B54C 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B550 1151 0019                  		move.b	(a1),$19(a0)
0000B554 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B55A 117C 0040 0016             		move.b	#$40,$16(a0)
0000B560 08E8 0004 0001             		bset	#4,1(a0)
0000B566                            
0000B566                            Obj2F_Action:				; XREF: Obj2F_Index
0000B566 6100 0000                  		bsr.w	Obj2F_Types
0000B56A 4A28 0025                  		tst.b	$25(a0)
0000B56E 6700                       		beq.s	Obj2F_Solid
0000B570 7200                       		moveq	#0,d1
0000B572 1228 0019                  		move.b	$19(a0),d1
0000B576 0641 000B                  		addi.w	#$B,d1
0000B57A 6100 C5F2                  		bsr.w	ExitPlatform
0000B57E 0829 0003 0022             		btst	#3,$22(a1)
0000B584 6600 0000                  		bne.w	Obj2F_Slope
0000B588 4228 0025                  		clr.b	$25(a0)
0000B58C 6000                       		bra.s	Obj2F_Display
0000B58E                            ; ===========================================================================
0000B58E                            
0000B58E                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B58E 7200                       		moveq	#0,d1
0000B590 1228 0019                  		move.b	$19(a0),d1
0000B594 0641 000B                  		addi.w	#$B,d1
0000B598 2468 0030                  		movea.l	$30(a0),a2
0000B59C 3428 0008                  		move.w	8(a0),d2
0000B5A0 6100 D52A                  		bsr.w	SlopeObject2
0000B5A4 6000                       		bra.s	Obj2F_Display
0000B5A6                            ; ===========================================================================
0000B5A6                            
0000B5A6                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B5A6 7200                       		moveq	#0,d1
0000B5A8 1228 0019                  		move.b	$19(a0),d1
0000B5AC 0641 000B                  		addi.w	#$B,d1
0000B5B0 343C 0020                  		move.w	#$20,d2
0000B5B4 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B5BA 6600                       		bne.s	loc_AF8E
0000B5BC 343C 0030                  		move.w	#$30,d2
0000B5C0                            
0000B5C0                            loc_AF8E:
0000B5C0 2468 0030                  		movea.l	$30(a0),a2
0000B5C4 6100 0000                  		bsr.w	SolidObject2F
0000B5C8                            
0000B5C8                            Obj2F_Display:				; XREF: Obj2F_Action
0000B5C8 6100 0000                  		bsr.w	DisplaySprite
0000B5CC 6000 0000                  		bra.w	Obj2F_ChkDel
0000B5D0                            
0000B5D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B5D0                            
0000B5D0                            
0000B5D0                            Obj2F_Types:				; XREF: Obj2F_Action
0000B5D0 7000                       		moveq	#0,d0
0000B5D2 1028 0028                  		move.b	$28(a0),d0
0000B5D6 0240 0007                  		andi.w	#7,d0
0000B5DA D040                       		add.w	d0,d0
0000B5DC 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B5E0 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B5E4                            ; End of function Obj2F_Types
0000B5E4                            
0000B5E4                            ; ===========================================================================
0000B5E4 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B5E6 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B5E8 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B5EA 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B5EC 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B5EE 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B5F0                            ; ===========================================================================
0000B5F0                            
0000B5F0                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B5F0 4E75                       		rts			; type 00 platform doesn't move
0000B5F2                            ; ===========================================================================
0000B5F2                            
0000B5F2                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B5F2 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B5F6 323C 0020                  		move.w	#$20,d1
0000B5FA 6000                       		bra.s	Obj2F_Move
0000B5FC                            ; ===========================================================================
0000B5FC                            
0000B5FC                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B5FC 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B600 323C 0030                  		move.w	#$30,d1
0000B604 6000                       		bra.s	Obj2F_Move
0000B606                            ; ===========================================================================
0000B606                            
0000B606                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B606 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B60A 323C 0040                  		move.w	#$40,d1
0000B60E 6000                       		bra.s	Obj2F_Move
0000B610                            ; ===========================================================================
0000B610                            
0000B610                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B610 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B614 323C 0060                  		move.w	#$60,d1
0000B618                            
0000B618                            Obj2F_Move:
0000B618 0828 0003 0028             		btst	#3,$28(a0)
0000B61E 6700                       		beq.s	loc_AFF2
0000B620 4440                       		neg.w	d0
0000B622 D041                       		add.w	d1,d0
0000B624                            
0000B624                            loc_AFF2:
0000B624 3228 002C                  		move.w	$2C(a0),d1
0000B628 9240                       		sub.w	d0,d1
0000B62A 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B62E 4E75                       		rts	
0000B630                            ; ===========================================================================
0000B630                            
0000B630                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B630 1028 0034                  		move.b	$34(a0),d0
0000B634 4A28 0025                  		tst.b	$25(a0)
0000B638 6600                       		bne.s	loc_B010
0000B63A 5500                       		subq.b	#2,d0
0000B63C 6400                       		bcc.s	loc_B01C
0000B63E 7000                       		moveq	#0,d0
0000B640 6000                       		bra.s	loc_B01C
0000B642                            ; ===========================================================================
0000B642                            
0000B642                            loc_B010:
0000B642 5800                       		addq.b	#4,d0
0000B644 0C00 0040                  		cmpi.b	#$40,d0
0000B648 6500                       		bcs.s	loc_B01C
0000B64A 103C 0040                  		move.b	#$40,d0
0000B64E                            
0000B64E                            loc_B01C:
0000B64E 1140 0034                  		move.b	d0,$34(a0)
0000B652 4EB9 0000 2C64             		jsr	(CalcSine).l
0000B658 E848                       		lsr.w	#4,d0
0000B65A 3200                       		move.w	d0,d1
0000B65C D068 002C                  		add.w	$2C(a0),d0
0000B660 3140 000C                  		move.w	d0,$C(a0)
0000B664 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B66A 6600                       		bne.s	loc_B07A
0000B66C 4A28 0035                  		tst.b	$35(a0)
0000B670 6600                       		bne.s	loc_B07A
0000B672 117C 0001 0035             		move.b	#1,$35(a0)
0000B678 6100 0000                  		bsr.w	SingleObjLoad2
0000B67C 6600                       		bne.s	loc_B07A
0000B67E 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B682 3368 0008 0008             		move.w	8(a0),8(a1)
0000B688 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B68E 5069 002C                  		addq.w	#8,$2C(a1)
0000B692 5769 002C                  		subq.w	#3,$2C(a1)
0000B696 0469 0040 0008             		subi.w	#$40,8(a1)
0000B69C 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B6A2 2348 0038                  		move.l	a0,$38(a1)
0000B6A6 2448                       		movea.l	a0,a2
0000B6A8 6100                       		bsr.s	sub_B09C
0000B6AA                            
0000B6AA                            loc_B07A:
0000B6AA 7400                       		moveq	#0,d2
0000B6AC 45E8 0036                  		lea	$36(a0),a2
0000B6B0 141A                       		move.b	(a2)+,d2
0000B6B2 5302                       		subq.b	#1,d2
0000B6B4 6500                       		bcs.s	locret_B09A
0000B6B6                            
0000B6B6                            loc_B086:
0000B6B6 7000                       		moveq	#0,d0
0000B6B8 101A                       		move.b	(a2)+,d0
0000B6BA ED48                       		lsl.w	#6,d0
0000B6BC 0640 D000                  		addi.w	#-$3000,d0
0000B6C0 3240                       		movea.w	d0,a1
0000B6C2 3341 003C                  		move.w	d1,$3C(a1)
0000B6C6 51CA FFEE                  		dbf	d2,loc_B086
0000B6CA                            
0000B6CA                            locret_B09A:
0000B6CA 4E75                       		rts	
0000B6CC                            
0000B6CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B6CC                            
0000B6CC                            
0000B6CC                            sub_B09C:
0000B6CC 45EA 0036                  		lea	$36(a2),a2
0000B6D0 7000                       		moveq	#0,d0
0000B6D2 1012                       		move.b	(a2),d0
0000B6D4 5212                       		addq.b	#1,(a2)
0000B6D6 45F2 0001                  		lea	1(a2,d0.w),a2
0000B6DA 3009                       		move.w	a1,d0
0000B6DC 0440 D000                  		subi.w	#-$3000,d0
0000B6E0 EC48                       		lsr.w	#6,d0
0000B6E2 0240 007F                  		andi.w	#$7F,d0
0000B6E6 1480                       		move.b	d0,(a2)
0000B6E8 4E75                       		rts	
0000B6EA                            ; End of function sub_B09C
0000B6EA                            
0000B6EA                            ; ===========================================================================
0000B6EA                            
0000B6EA                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B6EA 4A28 0035                  		tst.b	$35(a0)
0000B6EE 6700                       		beq.s	loc_B0C6
0000B6F0 4A28 0001                  		tst.b	1(a0)
0000B6F4 6A00                       		bpl.s	Obj2F_DelFlames
0000B6F6                            
0000B6F6                            loc_B0C6:
0000B6F6 3028 002A                  		move.w	$2A(a0),d0
0000B6FA 0240 FF80                  		andi.w	#$FF80,d0
0000B6FE 3238 F700                  		move.w	($FFFFF700).w,d1
0000B702 0441 0080                  		subi.w	#$80,d1
0000B706 0241 FF80                  		andi.w	#$FF80,d1
0000B70A 9041                       		sub.w	d1,d0
0000B70C 0C40 0280                  		cmpi.w	#$280,d0
0000B710 6200 0000                  		bhi.w	DeleteObject
0000B714 4E75                       		rts	
0000B716                            ; ===========================================================================
0000B716                            
0000B716                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B716 7400                       		moveq	#0,d2
0000B718                            
0000B718                            loc_B0E8:
0000B718 45E8 0036                  		lea	$36(a0),a2
0000B71C 1412                       		move.b	(a2),d2
0000B71E 421A                       		clr.b	(a2)+
0000B720 5302                       		subq.b	#1,d2
0000B722 6500                       		bcs.s	locret_B116
0000B724                            
0000B724                            loc_B0F4:
0000B724 7000                       		moveq	#0,d0
0000B726 1012                       		move.b	(a2),d0
0000B728 421A                       		clr.b	(a2)+
0000B72A ED48                       		lsl.w	#6,d0
0000B72C 0640 D000                  		addi.w	#-$3000,d0
0000B730 3240                       		movea.w	d0,a1
0000B732 6100 0000                  		bsr.w	DeleteObject2
0000B736 51CA FFEC                  		dbf	d2,loc_B0F4
0000B73A 117C 0000 0035             		move.b	#0,$35(a0)
0000B740 117C 0000 0034             		move.b	#0,$34(a0)
0000B746                            
0000B746                            locret_B116:
0000B746 4E75                       		rts	
0000B748                            ; ===========================================================================
0000B748                            ; ---------------------------------------------------------------------------
0000B748                            ; Collision data for large moving platforms (MZ)
0000B748                            ; ---------------------------------------------------------------------------
0000B748                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B794                            		even
0000B794                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B7C0                            		even
0000B7C0                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B80C                            		even
0000B80C                            ; ===========================================================================
0000B80C                            ; ---------------------------------------------------------------------------
0000B80C                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B80C                            ; (appears when	you walk on sinking platforms)
0000B80C                            ; ---------------------------------------------------------------------------
0000B80C                            
0000B80C                            Obj35:					; XREF: Obj_Index
0000B80C 7000                       		moveq	#0,d0
0000B80E 1028 0024                  		move.b	$24(a0),d0
0000B812 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B816 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B81A                            ; ===========================================================================
0000B81A 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B81C 0000                       		dc.w loc_B238-Obj35_Index
0000B81E 0000                       		dc.w Obj35_Move-Obj35_Index
0000B820                            ; ===========================================================================
0000B820                            
0000B820                            Obj35_Main:				; XREF: Obj35_Index
0000B820 5428 0024                  		addq.b	#2,$24(a0)
0000B824 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B82C 317C 0345 0002             		move.w	#$345,2(a0)
0000B832 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B838 117C 0004 0001             		move.b	#4,1(a0)
0000B83E 117C 0001 0018             		move.b	#1,$18(a0)
0000B844 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B84A 117C 0008 0019             		move.b	#8,$19(a0)
0000B850 303C 00C8                  		move.w	#$C8,d0
0000B854 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000B85A 4A28 0028                  		tst.b	$28(a0)
0000B85E 6700                       		beq.s	loc_B238
0000B860 5428 0024                  		addq.b	#2,$24(a0)
0000B864 6000 0000                  		bra.w	Obj35_Move
0000B868                            ; ===========================================================================
0000B868                            
0000B868                            loc_B238:				; XREF: Obj35_Index
0000B868 2268 0030                  		movea.l	$30(a0),a1
0000B86C 3228 0008                  		move.w	8(a0),d1
0000B870 9268 002A                  		sub.w	$2A(a0),d1
0000B874 0641 000C                  		addi.w	#$C,d1
0000B878 3001                       		move.w	d1,d0
0000B87A E248                       		lsr.w	#1,d0
0000B87C 1031 0000                  		move.b	(a1,d0.w),d0
0000B880 4440                       		neg.w	d0
0000B882 D068 002C                  		add.w	$2C(a0),d0
0000B886 3400                       		move.w	d0,d2
0000B888 D068 003C                  		add.w	$3C(a0),d0
0000B88C 3140 000C                  		move.w	d0,$C(a0)
0000B890 0C41 0084                  		cmpi.w	#$84,d1
0000B894 6400                       		bcc.s	loc_B2B0
0000B896 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B89E 0C41 0080                  		cmpi.w	#$80,d1
0000B8A2 6400                       		bcc.s	loc_B2B0
0000B8A4 2028 0008                  		move.l	8(a0),d0
0000B8A8 0680 0008 0000             		addi.l	#$80000,d0
0000B8AE 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B8B4 6600                       		bne.s	loc_B2B0
0000B8B6 6100 0000                  		bsr.w	SingleObjLoad2
0000B8BA 6600                       		bne.s	loc_B2B0
0000B8BC 12BC 0035                  		move.b	#$35,0(a1)
0000B8C0 3368 0008 0008             		move.w	8(a0),8(a1)
0000B8C6 3342 002C                  		move.w	d2,$2C(a1)
0000B8CA 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B8D0 137C 0001 0028             		move.b	#1,$28(a1)
0000B8D6 2468 0038                  		movea.l	$38(a0),a2
0000B8DA 6100 FDF0                  		bsr.w	sub_B09C
0000B8DE                            
0000B8DE                            loc_B2B0:
0000B8DE 6000                       		bra.s	Obj35_Animate
0000B8E0                            ; ===========================================================================
0000B8E0                            
0000B8E0                            Obj35_Move:				; XREF: Obj35_Index
0000B8E0 3028 002C                  		move.w	$2C(a0),d0
0000B8E4 D068 003C                  		add.w	$3C(a0),d0
0000B8E8 3140 000C                  		move.w	d0,$C(a0)
0000B8EC                            
0000B8EC                            Obj35_Animate:				; XREF: loc_B238
0000B8EC 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B8F2 6100 F4AA                  		bsr.w	AnimateSprite
0000B8F6 6000 0000                  		bra.w	DisplaySprite
0000B8FA                            ; ===========================================================================
0000B8FA                            Ani_obj35:
0000B8FA                            	include "_anim\obj35.asm"
0000B8FA                            ; ---------------------------------------------------------------------------
0000B8FA                            ; Animation script - fireball that sits on the	floor (MZ)
0000B8FA                            ; ---------------------------------------------------------------------------
0000B8FA 0000                       		dc.w byte_B2CE-Ani_obj35
0000B8FC 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B902                            		even
0000B902                            		even
0000B902                            
0000B902                            ; ---------------------------------------------------------------------------
0000B902                            ; Sprite mappings - large moving platforms (MZ)
0000B902                            ; ---------------------------------------------------------------------------
0000B902                            Map_obj2F:
0000B902                            	include "_maps\obj2F.asm"
0000B902                            ; ---------------------------------------------------------------------------
0000B902                            ; Sprite mappings - large moving platforms (MZ)
0000B902                            ; ---------------------------------------------------------------------------
0000B902 0000                       		dc.w byte_B2DA-Map_obj2F
0000B904 0000                       		dc.w byte_B31C-Map_obj2F
0000B906 0000                       		dc.w byte_B34F-Map_obj2F
0000B908 0D                         byte_B2DA:	dc.b $D
0000B909 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B90E F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B913 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B918 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B91D F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B922 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B927 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B92C D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B931 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B936 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B93B 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B940 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B945 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B94A 0A                         byte_B31C:	dc.b $A
0000B94B D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B950 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B955 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B95A C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B95F E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B964 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B969 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B96E E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B973 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B978 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B97D 06                         byte_B34F:	dc.b 6
0000B97E D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000B983 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B988 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000B98D D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000B992 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B997 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000B99C                            		even
0000B99C                            		even
0000B99C                            
0000B99C                            ; ---------------------------------------------------------------------------
0000B99C                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B99C                            ; ---------------------------------------------------------------------------
0000B99C                            Map_obj14:
0000B99C                            	include "_maps\obj14.asm"
0000B99C                            ; --------------------------------------------------------------------------------
0000B99C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B99C                            ; --------------------------------------------------------------------------------
0000B99C                            
0000B99C                            SME_C6wT7:	
0000B99C 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000B9A0 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000B9A4 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000B9A8 01                         SME_C6wT7_C:	dc.b 1	
0000B9A9 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000B9AE 01                         SME_C6wT7_12:	dc.b 1	
0000B9AF E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000B9B4 02                         SME_C6wT7_18:	dc.b 2	
0000B9B5 EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000B9BA E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000B9BF 01                         SME_C6wT7_23:	dc.b 1	
0000B9C0 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000B9C5 01                         SME_C6wT7_29:	dc.b 1	
0000B9C6 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000B9CB 01                         SME_C6wT7_2F:	dc.b 1	
0000B9CC F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000B9D2 00                         		even
0000B9D2 00                         		even
0000B9D2                            
0000B9D2                            ; ===========================================================================
0000B9D2                            ; ---------------------------------------------------------------------------
0000B9D2                            ; Object 30 - large green glassy blocks	(MZ)
0000B9D2                            ; ---------------------------------------------------------------------------
0000B9D2                            
0000B9D2                            Obj30:					; XREF: Obj_Index
0000B9D2 7000                       		moveq	#0,d0
0000B9D4 1028 0024                  		move.b	$24(a0),d0
0000B9D8 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000B9DC 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000B9E0 3028 0008                  		move.w	8(a0),d0
0000B9E4 0240 FF80                  		andi.w	#$FF80,d0
0000B9E8 3238 F700                  		move.w	($FFFFF700).w,d1
0000B9EC 0441 0080                  		subi.w	#$80,d1
0000B9F0 0241 FF80                  		andi.w	#$FF80,d1
0000B9F4 9041                       		sub.w	d1,d0
0000B9F6 0C40 0280                  		cmpi.w	#$280,d0
0000B9FA 6200 0000                  		bhi.w	Obj30_Delete
0000B9FE 6000 0000                  		bra.w	DisplaySprite
0000BA02                            ; ===========================================================================
0000BA02                            
0000BA02                            Obj30_Delete:
0000BA02 6000 0000                  		bra.w	DeleteObject
0000BA06                            ; ===========================================================================
0000BA06 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BA08 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BA0A 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BA0C 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BA0E 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BA10                            
0000BA10 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BA13 0400 01                    		dc.b 4,	0, 1
0000BA16 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BA19 0800 01                    		dc.b 8,	0, 1
0000BA1C                            ; ===========================================================================
0000BA1C                            
0000BA1C                            Obj30_Main:				; XREF: Obj30_Index
0000BA1C 45F9 0000 BA10             		lea	(Obj30_Vars1).l,a2
0000BA22 7201                       		moveq	#1,d1
0000BA24 117C 0048 0016             		move.b	#$48,$16(a0)
0000BA2A 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BA30 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BA32 45F9 0000 BA16             		lea	(Obj30_Vars2).l,a2
0000BA38 7201                       		moveq	#1,d1
0000BA3A 117C 0038 0016             		move.b	#$38,$16(a0)
0000BA40                            
0000BA40                            loc_B40C:
0000BA40 2248                       		movea.l	a0,a1
0000BA42 6000                       		bra.s	Obj30_Load	; load main object
0000BA44                            ; ===========================================================================
0000BA44                            
0000BA44                            Obj30_Loop:
0000BA44 6100 0000                  		bsr.w	SingleObjLoad2
0000BA48 6600                       		bne.s	loc_B480
0000BA4A                            
0000BA4A                            Obj30_Load:				; XREF: Obj30_Main
0000BA4A 135A 0024                  		move.b	(a2)+,$24(a1)
0000BA4E 12BC 0030                  		move.b	#$30,0(a1)
0000BA52 3368 0008 0008             		move.w	8(a0),8(a1)
0000BA58 101A                       		move.b	(a2)+,d0
0000BA5A 4880                       		ext.w	d0
0000BA5C D068 000C                  		add.w	$C(a0),d0
0000BA60 3340 000C                  		move.w	d0,$C(a1)
0000BA64 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BA6C 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BA72 137C 0004 0001             		move.b	#4,1(a1)
0000BA78 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BA7E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BA84 137C 0020 0019             		move.b	#$20,$19(a1)
0000BA8A 137C 0004 0018             		move.b	#4,$18(a1)
0000BA90 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BA94 2348 003C                  		move.l	a0,$3C(a1)
0000BA98 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BA9C                            
0000BA9C 137C 0010 0019             		move.b	#$10,$19(a1)
0000BAA2 137C 0003 0018             		move.b	#3,$18(a1)
0000BAA8 5029 0028                  		addq.b	#8,$28(a1)
0000BAAC 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BAB2                            
0000BAB2                            loc_B480:
0000BAB2 317C 0090 0032             		move.w	#$90,$32(a0)
0000BAB8 08E8 0004 0001             		bset	#4,1(a0)
0000BABE                            
0000BABE                            Obj30_Block012:				; XREF: Obj30_Index
0000BABE 6100 0000                  		bsr.w	Obj30_Types
0000BAC2 323C 002B                  		move.w	#$2B,d1
0000BAC6 343C 0048                  		move.w	#$48,d2
0000BACA 363C 0049                  		move.w	#$49,d3
0000BACE 3828 0008                  		move.w	8(a0),d4
0000BAD2 6000 0000                  		bra.w	SolidObject
0000BAD6                            ; ===========================================================================
0000BAD6                            
0000BAD6                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BAD6 2268 003C                  		movea.l	$3C(a0),a1
0000BADA 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BAE0 6000 0000                  		bra.w	Obj30_Types
0000BAE4                            ; ===========================================================================
0000BAE4                            
0000BAE4                            Obj30_Block34:				; XREF: Obj30_Index
0000BAE4 6100 0000                  		bsr.w	Obj30_Types
0000BAE8 323C 002B                  		move.w	#$2B,d1
0000BAEC 343C 0038                  		move.w	#$38,d2
0000BAF0 363C 0039                  		move.w	#$39,d3
0000BAF4 3828 0008                  		move.w	8(a0),d4
0000BAF8 6000 0000                  		bra.w	SolidObject
0000BAFC                            ; ===========================================================================
0000BAFC                            
0000BAFC                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BAFC 2268 003C                  		movea.l	$3C(a0),a1
0000BB00 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BB06 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BB0C 6000 0002                  		bra.w	*+4
0000BB10                            
0000BB10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB10                            
0000BB10                            
0000BB10                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BB10 7000                       		moveq	#0,d0
0000BB12 1028 0028                  		move.b	$28(a0),d0
0000BB16 0240 0007                  		andi.w	#7,d0
0000BB1A D040                       		add.w	d0,d0
0000BB1C 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BB20 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BB24                            ; End of function Obj30_Types
0000BB24                            
0000BB24                            ; ===========================================================================
0000BB24 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BB26 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BB28 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BB2A 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BB2C 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BB2E                            ; ===========================================================================
0000BB2E                            
0000BB2E                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BB2E 4E75                       		rts	
0000BB30                            ; ===========================================================================
0000BB30                            
0000BB30                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BB30 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BB34 323C 0040                  		move.w	#$40,d1
0000BB38 6000                       		bra.s	loc_B514
0000BB3A                            ; ===========================================================================
0000BB3A                            
0000BB3A                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BB3A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BB3E 323C 0040                  		move.w	#$40,d1
0000BB42 4440                       		neg.w	d0
0000BB44 D041                       		add.w	d1,d0
0000BB46                            
0000BB46                            loc_B514:				; XREF: Obj30_Type01
0000BB46 0828 0003 0028             		btst	#3,$28(a0)
0000BB4C 6700                       		beq.s	loc_B526
0000BB4E 4440                       		neg.w	d0
0000BB50 D041                       		add.w	d1,d0
0000BB52 E208                       		lsr.b	#1,d0
0000BB54 0640 0020                  		addi.w	#$20,d0
0000BB58                            
0000BB58                            loc_B526:
0000BB58 6000 0000                  		bra.w	loc_B5EE
0000BB5C                            ; ===========================================================================
0000BB5C                            
0000BB5C                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BB5C 0828 0003 0028             		btst	#3,$28(a0)
0000BB62 6700                       		beq.s	loc_B53E
0000BB64 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BB68 0440 0010                  		subi.w	#$10,d0
0000BB6C 6000 0000                  		bra.w	loc_B5EE
0000BB70                            ; ===========================================================================
0000BB70                            
0000BB70                            loc_B53E:
0000BB70 0828 0003 0022             		btst	#3,$22(a0)
0000BB76 6600                       		bne.s	loc_B54E
0000BB78 08A8 0000 0034             		bclr	#0,$34(a0)
0000BB7E 6000                       		bra.s	loc_B582
0000BB80                            ; ===========================================================================
0000BB80                            
0000BB80                            loc_B54E:
0000BB80 4A28 0034                  		tst.b	$34(a0)
0000BB84 6600                       		bne.s	loc_B582
0000BB86 117C 0001 0034             		move.b	#1,$34(a0)
0000BB8C 08E8 0000 0035             		bset	#0,$35(a0)
0000BB92 6700                       		beq.s	loc_B582
0000BB94 08E8 0007 0034             		bset	#7,$34(a0)
0000BB9A 317C 0010 0036             		move.w	#$10,$36(a0)
0000BBA0 117C 000A 0038             		move.b	#$A,$38(a0)
0000BBA6 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BBAC 6600                       		bne.s	loc_B582
0000BBAE 317C 0040 0036             		move.w	#$40,$36(a0)
0000BBB4                            
0000BBB4                            loc_B582:
0000BBB4 4A28 0034                  		tst.b	$34(a0)
0000BBB8 6A00                       		bpl.s	loc_B5AA
0000BBBA 4A28 0038                  		tst.b	$38(a0)
0000BBBE 6700                       		beq.s	loc_B594
0000BBC0 5328 0038                  		subq.b	#1,$38(a0)
0000BBC4 6600                       		bne.s	loc_B5AA
0000BBC6                            
0000BBC6                            loc_B594:
0000BBC6 4A68 0032                  		tst.w	$32(a0)
0000BBCA 6700                       		beq.s	loc_B5A4
0000BBCC 5368 0032                  		subq.w	#1,$32(a0)
0000BBD0 5368 0036                  		subq.w	#1,$36(a0)
0000BBD4 6600                       		bne.s	loc_B5AA
0000BBD6                            
0000BBD6                            loc_B5A4:
0000BBD6 08A8 0007 0034             		bclr	#7,$34(a0)
0000BBDC                            
0000BBDC                            loc_B5AA:
0000BBDC 3028 0032                  		move.w	$32(a0),d0
0000BBE0 6000                       		bra.s	loc_B5EE
0000BBE2                            ; ===========================================================================
0000BBE2                            
0000BBE2                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BBE2 0828 0003 0028             		btst	#3,$28(a0)
0000BBE8 6700                       		beq.s	Obj30_ChkSwitch
0000BBEA 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BBEE 0440 0010                  		subi.w	#$10,d0
0000BBF2 6000                       		bra.s	loc_B5EE
0000BBF4                            ; ===========================================================================
0000BBF4                            
0000BBF4                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BBF4 4A28 0034                  		tst.b	$34(a0)
0000BBF8 6600                       		bne.s	loc_B5E0
0000BBFA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BBFE 7000                       		moveq	#0,d0
0000BC00 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BC04 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BC06 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BC0A 6700                       		beq.s	loc_B5EA	; if not, branch
0000BC0C 117C 0001 0034             		move.b	#1,$34(a0)
0000BC12                            
0000BC12                            loc_B5E0:
0000BC12 4A68 0032                  		tst.w	$32(a0)
0000BC16 6700                       		beq.s	loc_B5EA
0000BC18 5568 0032                  		subq.w	#2,$32(a0)
0000BC1C                            
0000BC1C                            loc_B5EA:
0000BC1C 3028 0032                  		move.w	$32(a0),d0
0000BC20                            
0000BC20                            loc_B5EE:
0000BC20 3228 0030                  		move.w	$30(a0),d1
0000BC24 9240                       		sub.w	d0,d1
0000BC26 3141 000C                  		move.w	d1,$C(a0)
0000BC2A 4E75                       		rts	
0000BC2C                            ; ===========================================================================
0000BC2C                            ; ---------------------------------------------------------------------------
0000BC2C                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BC2C                            ; ---------------------------------------------------------------------------
0000BC2C                            Map_obj30:
0000BC2C                            	include "_maps\obj30.asm"
0000BC2C                            ; ---------------------------------------------------------------------------
0000BC2C                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BC2C                            ; ---------------------------------------------------------------------------
0000BC2C 0000                       		dc.w byte_B600-Map_obj30
0000BC2E 0000                       		dc.w byte_B63D-Map_obj30
0000BC30 0000                       		dc.w byte_B648-Map_obj30
0000BC32 0C                         byte_B600:	dc.b $C
0000BC33 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BC38 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BC3D C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BC42 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BC47 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BC4C E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BC51 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BC56 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BC5B 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BC60 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BC65 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BC6A 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BC6F 02                         byte_B63D:	dc.b 2
0000BC70 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BC75 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BC7A 0A                         byte_B648:	dc.b $A
0000BC7B C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BC80 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BC85 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BC8A D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BC8F F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BC94 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BC99 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BC9E 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BCA3 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BCA8 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BCAE 00                         		even
0000BCAE 00                         		even
0000BCAE                            
0000BCAE                            ; ===========================================================================
0000BCAE                            ; ---------------------------------------------------------------------------
0000BCAE                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BCAE                            ; ---------------------------------------------------------------------------
0000BCAE                            
0000BCAE                            Obj31:					; XREF: Obj_Index
0000BCAE 7000                       		moveq	#0,d0
0000BCB0 1028 0024                  		move.b	$24(a0),d0
0000BCB4 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BCB8 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BCBC                            ; ===========================================================================
0000BCBC 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BCBE 0000                       		dc.w loc_B798-Obj31_Index
0000BCC0 0000                       		dc.w loc_B7FE-Obj31_Index
0000BCC2 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BCC4 0000                       		dc.w loc_B7E2-Obj31_Index
0000BCC6                            
0000BCC6 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BCC8 0100                       		dc.b 1,	0
0000BCCA                            
0000BCCA 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BCCD 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BCD0 08CC 03                    		dc.b 8,	$CC, 3
0000BCD3 06F0 02                    		dc.b 6,	$F0, 2
0000BCD6                            
0000BCD6 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BCDA 5000 7800                  		dc.w $5000, $7800
0000BCDE 3800 5800                  		dc.w $3800, $5800
0000BCE2 B800                       		dc.w $B800
0000BCE4                            ; ===========================================================================
0000BCE4                            
0000BCE4                            Obj31_Main:				; XREF: Obj31_Index
0000BCE4 7000                       		moveq	#0,d0
0000BCE6 1028 0028                  		move.b	$28(a0),d0
0000BCEA 6A00                       		bpl.s	loc_B6CE
0000BCEC 0240 007F                  		andi.w	#$7F,d0
0000BCF0 D040                       		add.w	d0,d0
0000BCF2 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BCF6 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BCFA 101A                       		move.b	(a2)+,d0
0000BCFC 1140 0028                  		move.b	d0,$28(a0)
0000BD00                            
0000BD00                            loc_B6CE:
0000BD00 0200 000F                  		andi.b	#$F,d0
0000BD04 D040                       		add.w	d0,d0
0000BD06 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BD0A 4A40                       		tst.w	d0
0000BD0C 6600                       		bne.s	loc_B6E0
0000BD0E 3142 0032                  		move.w	d2,$32(a0)
0000BD12                            
0000BD12                            loc_B6E0:
0000BD12 45F9 0000 BCCA             		lea	(Obj31_Var).l,a2
0000BD18 2248                       		movea.l	a0,a1
0000BD1A 7203                       		moveq	#3,d1
0000BD1C 6000                       		bra.s	Obj31_MakeStomper
0000BD1E                            ; ===========================================================================
0000BD1E                            
0000BD1E                            Obj31_Loop:
0000BD1E 6100 0000                  		bsr.w	SingleObjLoad2
0000BD22 6600 0000                  		bne.w	Obj31_SetSize
0000BD26                            
0000BD26                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BD26 135A 0024                  		move.b	(a2)+,$24(a1)
0000BD2A 12BC 0031                  		move.b	#$31,0(a1)
0000BD2E 3368 0008 0008             		move.w	8(a0),8(a1)
0000BD34 101A                       		move.b	(a2)+,d0
0000BD36 4880                       		ext.w	d0
0000BD38 D068 000C                  		add.w	$C(a0),d0
0000BD3C 3340 000C                  		move.w	d0,$C(a1)
0000BD40 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BD48 337C 0300 0002             		move.w	#$300,2(a1)
0000BD4E 137C 0004 0001             		move.b	#4,1(a1)
0000BD54 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BD5A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BD60 137C 0010 0019             		move.b	#$10,$19(a1)
0000BD66 3342 0034                  		move.w	d2,$34(a1)
0000BD6A 137C 0004 0018             		move.b	#4,$18(a1)
0000BD70 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BD74 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BD7A 6600                       		bne.s	loc_B76A
0000BD7C 5341                       		subq.w	#1,d1
0000BD7E 1028 0028                  		move.b	$28(a0),d0
0000BD82 0240 00F0                  		andi.w	#$F0,d0
0000BD86 0C40 0020                  		cmpi.w	#$20,d0
0000BD8A 679A                       		beq.s	Obj31_MakeStomper
0000BD8C 137C 0038 0019             		move.b	#$38,$19(a1)
0000BD92 137C 0090 0020             		move.b	#$90,$20(a1)
0000BD98 5241                       		addq.w	#1,d1
0000BD9A                            
0000BD9A                            loc_B76A:
0000BD9A 2348 003C                  		move.l	a0,$3C(a1)
0000BD9E 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BDA2                            
0000BDA2 137C 0003 0018             		move.b	#3,$18(a1)
0000BDA8                            
0000BDA8                            Obj31_SetSize:
0000BDA8 7000                       		moveq	#0,d0
0000BDAA 1028 0028                  		move.b	$28(a0),d0
0000BDAE E648                       		lsr.w	#3,d0
0000BDB0 0200 000E                  		andi.b	#$E,d0
0000BDB4 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BDB8 115A 0019                  		move.b	(a2)+,$19(a0)
0000BDBC 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BDC0 6000                       		bra.s	loc_B798
0000BDC2                            ; ===========================================================================
0000BDC2 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BDC4 3009                       		dc.b $30, 9
0000BDC6 100A                       		dc.b $10, $A
0000BDC8                            ; ===========================================================================
0000BDC8                            
0000BDC8                            loc_B798:				; XREF: Obj31_Index
0000BDC8 6100 0000                  		bsr.w	Obj31_Types
0000BDCC 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BDD2 7200                       		moveq	#0,d1
0000BDD4 1228 0019                  		move.b	$19(a0),d1
0000BDD8 0641 000B                  		addi.w	#$B,d1
0000BDDC 343C 000C                  		move.w	#$C,d2
0000BDE0 363C 000D                  		move.w	#$D,d3
0000BDE4 3828 0008                  		move.w	8(a0),d4
0000BDE8 6100 0000                  		bsr.w	SolidObject
0000BDEC 0828 0003 0022             		btst	#3,$22(a0)
0000BDF2 6700                       		beq.s	Obj31_Display
0000BDF4 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BDFA 6400                       		bcc.s	Obj31_Display
0000BDFC 2448                       		movea.l	a0,a2
0000BDFE 41F8 D000                  		lea	($FFFFD000).w,a0
0000BE02 4EB9 0000 0000             		jsr	KillSonic
0000BE08 204A                       		movea.l	a2,a0
0000BE0A                            
0000BE0A                            Obj31_Display:
0000BE0A 6100 0000                  		bsr.w	DisplaySprite
0000BE0E 6000 0000                  		bra.w	Obj31_ChkDel
0000BE12                            ; ===========================================================================
0000BE12                            
0000BE12                            loc_B7E2:				; XREF: Obj31_Index
0000BE12 117C 0080 0016             		move.b	#$80,$16(a0)
0000BE18 08E8 0004 0001             		bset	#4,1(a0)
0000BE1E 2268 003C                  		movea.l	$3C(a0),a1
0000BE22 1029 0032                  		move.b	$32(a1),d0
0000BE26 EA08                       		lsr.b	#5,d0
0000BE28 5600                       		addq.b	#3,d0
0000BE2A 1140 001A                  		move.b	d0,$1A(a0)
0000BE2E                            
0000BE2E                            loc_B7FE:				; XREF: Obj31_Index
0000BE2E 2268 003C                  		movea.l	$3C(a0),a1
0000BE32 7000                       		moveq	#0,d0
0000BE34 1029 0032                  		move.b	$32(a1),d0
0000BE38 D068 0030                  		add.w	$30(a0),d0
0000BE3C 3140 000C                  		move.w	d0,$C(a0)
0000BE40                            
0000BE40                            Obj31_Display2:				; XREF: Obj31_Index
0000BE40 6100 0000                  		bsr.w	DisplaySprite
0000BE44                            
0000BE44                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BE44 3028 0008                  		move.w	8(a0),d0
0000BE48 0240 FF80                  		andi.w	#$FF80,d0
0000BE4C 3238 F700                  		move.w	($FFFFF700).w,d1
0000BE50 0441 0080                  		subi.w	#$80,d1
0000BE54 0241 FF80                  		andi.w	#$FF80,d1
0000BE58 9041                       		sub.w	d1,d0
0000BE5A 0C40 0280                  		cmpi.w	#$280,d0
0000BE5E 6200 0000                  		bhi.w	DeleteObject
0000BE62 4E75                       		rts	
0000BE64                            ; ===========================================================================
0000BE64                            
0000BE64                            Obj31_Types:				; XREF: loc_B798
0000BE64 1028 0028                  		move.b	$28(a0),d0
0000BE68 0240 000F                  		andi.w	#$F,d0
0000BE6C D040                       		add.w	d0,d0
0000BE6E 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BE72 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BE76                            ; ===========================================================================
0000BE76 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BE78 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BE7A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BE7C 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BE7E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BE80 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BE82 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BE84                            ; ===========================================================================
0000BE84                            
0000BE84                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BE84 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BE88 7000                       		moveq	#0,d0
0000BE8A 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BE8E 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BE92 6700                       		beq.s	loc_B8A8	; if not, branch
0000BE94 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BE98 6A00                       		bpl.s	loc_B872
0000BE9A 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BEA0 6700                       		beq.s	loc_B8A0
0000BEA2                            
0000BEA2                            loc_B872:
0000BEA2 4A68 0032                  		tst.w	$32(a0)
0000BEA6 6700                       		beq.s	loc_B8A0
0000BEA8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BEAC 0200 000F                  		andi.b	#$F,d0
0000BEB0 6600                       		bne.s	loc_B892
0000BEB2 4A28 0001                  		tst.b	1(a0)
0000BEB6 6A00                       		bpl.s	loc_B892
0000BEB8 303C 00C7                  		move.w	#$C7,d0
0000BEBC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BEC2                            
0000BEC2                            loc_B892:
0000BEC2 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BEC8 6400                       		bcc.s	Obj31_Restart
0000BECA 317C 0000 0032             		move.w	#0,$32(a0)
0000BED0                            
0000BED0                            loc_B8A0:
0000BED0 317C 0000 0012             		move.w	#0,$12(a0)
0000BED6 6000                       		bra.s	Obj31_Restart
0000BED8                            ; ===========================================================================
0000BED8                            
0000BED8                            loc_B8A8:				; XREF: Obj31_Type00
0000BED8 3228 0034                  		move.w	$34(a0),d1
0000BEDC B268 0032                  		cmp.w	$32(a0),d1
0000BEE0 6700                       		beq.s	Obj31_Restart
0000BEE2 3028 0012                  		move.w	$12(a0),d0
0000BEE6 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BEEC D168 0032                  		add.w	d0,$32(a0)
0000BEF0 B268 0032                  		cmp.w	$32(a0),d1
0000BEF4 6200                       		bhi.s	Obj31_Restart
0000BEF6 3141 0032                  		move.w	d1,$32(a0)
0000BEFA 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BF00 4A28 0001                  		tst.b	1(a0)
0000BF04 6A00                       		bpl.s	Obj31_Restart
0000BF06 303C 00BD                  		move.w	#$BD,d0
0000BF0A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BF10                            
0000BF10                            Obj31_Restart:
0000BF10 7000                       		moveq	#0,d0
0000BF12 1028 0032                  		move.b	$32(a0),d0
0000BF16 D068 0030                  		add.w	$30(a0),d0
0000BF1A 3140 000C                  		move.w	d0,$C(a0)
0000BF1E 4E75                       		rts	
0000BF20                            ; ===========================================================================
0000BF20                            
0000BF20                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000BF20 4A68 0036                  		tst.w	$36(a0)
0000BF24 6700                       		beq.s	loc_B938
0000BF26 4A68 0038                  		tst.w	$38(a0)
0000BF2A 6700                       		beq.s	loc_B902
0000BF2C 5368 0038                  		subq.w	#1,$38(a0)
0000BF30 6000                       		bra.s	loc_B97C
0000BF32                            ; ===========================================================================
0000BF32                            
0000BF32                            loc_B902:
0000BF32 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BF36 0200 000F                  		andi.b	#$F,d0
0000BF3A 6600                       		bne.s	loc_B91C
0000BF3C 4A28 0001                  		tst.b	1(a0)
0000BF40 6A00                       		bpl.s	loc_B91C
0000BF42 303C 00C7                  		move.w	#$C7,d0
0000BF46 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BF4C                            
0000BF4C                            loc_B91C:
0000BF4C 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BF52 6400                       		bcc.s	loc_B97C
0000BF54 317C 0000 0032             		move.w	#0,$32(a0)
0000BF5A 317C 0000 0012             		move.w	#0,$12(a0)
0000BF60 317C 0000 0036             		move.w	#0,$36(a0)
0000BF66 6000                       		bra.s	loc_B97C
0000BF68                            ; ===========================================================================
0000BF68                            
0000BF68                            loc_B938:				; XREF: Obj31_Type01
0000BF68 3228 0034                  		move.w	$34(a0),d1
0000BF6C B268 0032                  		cmp.w	$32(a0),d1
0000BF70 6700                       		beq.s	loc_B97C
0000BF72 3028 0012                  		move.w	$12(a0),d0
0000BF76 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BF7C D168 0032                  		add.w	d0,$32(a0)
0000BF80 B268 0032                  		cmp.w	$32(a0),d1
0000BF84 6200                       		bhi.s	loc_B97C
0000BF86 3141 0032                  		move.w	d1,$32(a0)
0000BF8A 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BF90 317C 0001 0036             		move.w	#1,$36(a0)
0000BF96 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BF9C 4A28 0001                  		tst.b	1(a0)
0000BFA0 6A00                       		bpl.s	loc_B97C
0000BFA2 303C 00BD                  		move.w	#$BD,d0
0000BFA6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BFAC                            
0000BFAC                            loc_B97C:
0000BFAC 6000 FF62                  		bra.w	Obj31_Restart
0000BFB0                            ; ===========================================================================
0000BFB0                            
0000BFB0                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000BFB0 3038 D008                  		move.w	($FFFFD008).w,d0
0000BFB4 9068 0008                  		sub.w	8(a0),d0
0000BFB8 6400                       		bcc.s	loc_B98C
0000BFBA 4440                       		neg.w	d0
0000BFBC                            
0000BFBC                            loc_B98C:
0000BFBC 0C40 0090                  		cmpi.w	#$90,d0
0000BFC0 6400                       		bcc.s	loc_B996
0000BFC2 5228 0028                  		addq.b	#1,$28(a0)
0000BFC6                            
0000BFC6                            loc_B996:
0000BFC6 6000 FF48                  		bra.w	Obj31_Restart
0000BFCA                            ; ===========================================================================
0000BFCA                            ; ---------------------------------------------------------------------------
0000BFCA                            ; Object 45 - spiked metal block from beta version (MZ)
0000BFCA                            ; ---------------------------------------------------------------------------
0000BFCA                            
0000BFCA                            Obj45:					; XREF: Obj_Index
0000BFCA 7000                       		moveq	#0,d0
0000BFCC 1028 0024                  		move.b	$24(a0),d0
0000BFD0 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000BFD4 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000BFD8                            ; ===========================================================================
0000BFD8 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000BFDA 0000                       		dc.w Obj45_Solid-Obj45_Index
0000BFDC 0000                       		dc.w loc_BA8E-Obj45_Index
0000BFDE 0000                       		dc.w Obj45_Display-Obj45_Index
0000BFE0 0000                       		dc.w loc_BA7A-Obj45_Index
0000BFE2                            
0000BFE2 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000BFE5 04E4 01                    		dc.b	4, $E4,	  1
0000BFE8 0834 03                    		dc.b	8, $34,	  3
0000BFEB 0628 02                    		dc.b	6, $28,	  2
0000BFEE                            
0000BFEE 3800                       word_B9BE:	dc.w $3800
0000BFF0 A000                       		dc.w -$6000
0000BFF2 5000                       		dc.w $5000
0000BFF4                            ; ===========================================================================
0000BFF4                            
0000BFF4                            Obj45_Main:				; XREF: Obj45_Index
0000BFF4 7000                       		moveq	#0,d0
0000BFF6 1028 0028                  		move.b	$28(a0),d0
0000BFFA D040                       		add.w	d0,d0
0000BFFC 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C000 45F9 0000 BFE2             		lea	(Obj45_Var).l,a2
0000C006 2248                       		movea.l	a0,a1
0000C008 7203                       		moveq	#3,d1
0000C00A 6000                       		bra.s	Obj45_Load
0000C00C                            ; ===========================================================================
0000C00C                            
0000C00C                            Obj45_Loop:
0000C00C 6100 0000                  		bsr.w	SingleObjLoad2
0000C010 6600                       		bne.s	loc_BA52
0000C012                            
0000C012                            Obj45_Load:				; XREF: Obj45_Main
0000C012 135A 0024                  		move.b	(a2)+,$24(a1)
0000C016 12BC 0045                  		move.b	#$45,0(a1)
0000C01A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C020 101A                       		move.b	(a2)+,d0
0000C022 4880                       		ext.w	d0
0000C024 D068 0008                  		add.w	8(a0),d0
0000C028 3340 0008                  		move.w	d0,8(a1)
0000C02C 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C034 337C 0300 0002             		move.w	#$300,2(a1)
0000C03A 137C 0004 0001             		move.b	#4,1(a1)
0000C040 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C046 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C04C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C052 137C 0020 0019             		move.b	#$20,$19(a1)
0000C058 3342 0034                  		move.w	d2,$34(a1)
0000C05C 137C 0004 0018             		move.b	#4,$18(a1)
0000C062 0C12 0001                  		cmpi.b	#1,(a2)
0000C066 6600                       		bne.s	loc_BA40
0000C068 137C 0091 0020             		move.b	#$91,$20(a1)
0000C06E                            
0000C06E                            loc_BA40:
0000C06E 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C072 2348 003C                  		move.l	a0,$3C(a1)
0000C076 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C07A                            
0000C07A 137C 0003 0018             		move.b	#3,$18(a1)
0000C080                            
0000C080                            loc_BA52:
0000C080 117C 0010 0019             		move.b	#$10,$19(a0)
0000C086                            
0000C086                            Obj45_Solid:				; XREF: Obj45_Index
0000C086 3F28 0008                  		move.w	8(a0),-(sp)
0000C08A 6100 0000                  		bsr.w	Obj45_Move
0000C08E 323C 0017                  		move.w	#$17,d1
0000C092 343C 0020                  		move.w	#$20,d2
0000C096 363C 0020                  		move.w	#$20,d3
0000C09A 381F                       		move.w	(sp)+,d4
0000C09C 6100 0000                  		bsr.w	SolidObject
0000C0A0 6100 0000                  		bsr.w	DisplaySprite
0000C0A4 6000 0000                  		bra.w	Obj45_ChkDel
0000C0A8                            ; ===========================================================================
0000C0A8                            
0000C0A8                            loc_BA7A:				; XREF: Obj45_Index
0000C0A8 2268 003C                  		movea.l	$3C(a0),a1
0000C0AC 1029 0032                  		move.b	$32(a1),d0
0000C0B0 0600 0010                  		addi.b	#$10,d0
0000C0B4 EA08                       		lsr.b	#5,d0
0000C0B6 5600                       		addq.b	#3,d0
0000C0B8 1140 001A                  		move.b	d0,$1A(a0)
0000C0BC                            
0000C0BC                            loc_BA8E:				; XREF: Obj45_Index
0000C0BC 2268 003C                  		movea.l	$3C(a0),a1
0000C0C0 7000                       		moveq	#0,d0
0000C0C2 1029 0032                  		move.b	$32(a1),d0
0000C0C6 4440                       		neg.w	d0
0000C0C8 D068 0030                  		add.w	$30(a0),d0
0000C0CC 3140 0008                  		move.w	d0,8(a0)
0000C0D0                            
0000C0D0                            Obj45_Display:				; XREF: Obj45_Index
0000C0D0 6100 0000                  		bsr.w	DisplaySprite
0000C0D4                            
0000C0D4                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C0D4 3028 003A                  		move.w	$3A(a0),d0
0000C0D8 0240 FF80                  		andi.w	#$FF80,d0
0000C0DC 3238 F700                  		move.w	($FFFFF700).w,d1
0000C0E0 0441 0080                  		subi.w	#$80,d1
0000C0E4 0241 FF80                  		andi.w	#$FF80,d1
0000C0E8 9041                       		sub.w	d1,d0
0000C0EA 0C40 0280                  		cmpi.w	#$280,d0
0000C0EE 6200 0000                  		bhi.w	DeleteObject
0000C0F2 4E75                       		rts	
0000C0F4                            
0000C0F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C0F4                            
0000C0F4                            
0000C0F4                            Obj45_Move:				; XREF: Obj45_Solid
0000C0F4 7000                       		moveq	#0,d0
0000C0F6 1028 0028                  		move.b	$28(a0),d0
0000C0FA D040                       		add.w	d0,d0
0000C0FC 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C100 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C104                            ; End of function Obj45_Move
0000C104                            
0000C104                            ; ===========================================================================
0000C104 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C106 0000                       		dc.w loc_BADA-off_BAD6
0000C108                            ; ===========================================================================
0000C108                            
0000C108                            loc_BADA:				; XREF: off_BAD6
0000C108 4A68 0036                  		tst.w	$36(a0)
0000C10C 6700                       		beq.s	loc_BB08
0000C10E 4A68 0038                  		tst.w	$38(a0)
0000C112 6700                       		beq.s	loc_BAEC
0000C114 5368 0038                  		subq.w	#1,$38(a0)
0000C118 6000                       		bra.s	loc_BB3C
0000C11A                            ; ===========================================================================
0000C11A                            
0000C11A                            loc_BAEC:
0000C11A 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C120 6400                       		bcc.s	loc_BB3C
0000C122 317C 0000 0032             		move.w	#0,$32(a0)
0000C128 317C 0000 0010             		move.w	#0,$10(a0)
0000C12E 317C 0000 0036             		move.w	#0,$36(a0)
0000C134 6000                       		bra.s	loc_BB3C
0000C136                            ; ===========================================================================
0000C136                            
0000C136                            loc_BB08:				; XREF: loc_BADA
0000C136 3228 0034                  		move.w	$34(a0),d1
0000C13A B268 0032                  		cmp.w	$32(a0),d1
0000C13E 6700                       		beq.s	loc_BB3C
0000C140 3028 0010                  		move.w	$10(a0),d0
0000C144 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C14A D168 0032                  		add.w	d0,$32(a0)
0000C14E B268 0032                  		cmp.w	$32(a0),d1
0000C152 6200                       		bhi.s	loc_BB3C
0000C154 3141 0032                  		move.w	d1,$32(a0)
0000C158 317C 0000 0010             		move.w	#0,$10(a0)
0000C15E 317C 0001 0036             		move.w	#1,$36(a0)
0000C164 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C16A                            
0000C16A                            loc_BB3C:
0000C16A 7000                       		moveq	#0,d0
0000C16C 1028 0032                  		move.b	$32(a0),d0
0000C170 4440                       		neg.w	d0
0000C172 D068 0030                  		add.w	$30(a0),d0
0000C176 3140 0008                  		move.w	d0,8(a0)
0000C17A 4E75                       		rts	
0000C17C                            ; ===========================================================================
0000C17C                            ; ---------------------------------------------------------------------------
0000C17C                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C17C                            ; ---------------------------------------------------------------------------
0000C17C                            Map_obj31:
0000C17C                            	include "_maps\obj31.asm"
0000C17C                            ; ---------------------------------------------------------------------------
0000C17C                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C17C                            ; ---------------------------------------------------------------------------
0000C17C 0000                       		dc.w byte_BB64-Map_obj31
0000C17E 0000                       		dc.w byte_BB7E-Map_obj31
0000C180 0000                       		dc.w byte_BB98-Map_obj31
0000C182 0000                       		dc.w byte_BB9E-Map_obj31
0000C184 0000                       		dc.w byte_BBA9-Map_obj31
0000C186 0000                       		dc.w byte_BBBE-Map_obj31
0000C188 0000                       		dc.w byte_BBDD-Map_obj31
0000C18A 0000                       		dc.w byte_BC06-Map_obj31
0000C18C 0000                       		dc.w byte_BC06-Map_obj31
0000C18E 0000                       		dc.w byte_BC39-Map_obj31
0000C190 0000                       		dc.w byte_BC53-Map_obj31
0000C192 05                         byte_BB64:	dc.b 5
0000C193 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C198 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C19D EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C1A2 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C1A7 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C1AC 05                         byte_BB7E:	dc.b 5
0000C1AD F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C1B2 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C1B7 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C1BC F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C1C1 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C1C6 01                         byte_BB98:	dc.b 1
0000C1C7 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C1CC 02                         byte_BB9E:	dc.b 2
0000C1CD 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C1D2 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C1D7 04                         byte_BBA9:	dc.b 4
0000C1D8 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C1DD F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C1E2 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C1E7 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C1EC 06                         byte_BBBE:	dc.b 6
0000C1ED C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C1F2 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C1F7 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C1FC F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C201 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C206 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C20B 08                         byte_BBDD:	dc.b 8
0000C20C A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C211 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C216 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C21B D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C220 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C225 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C22A 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C22F 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C234 0A                         byte_BC06:	dc.b $A
0000C235 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C23A 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C23F A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C244 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C249 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C24E D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C253 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C258 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C25D 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C262 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C267 05                         byte_BC39:	dc.b 5
0000C268 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C26D F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C272 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C277 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C27C EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C281 01                         byte_BC53:	dc.b 1
0000C282 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C288 00                         		even
0000C288 00                         		even
0000C288                            
0000C288                            ; ---------------------------------------------------------------------------
0000C288                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C288                            ; ---------------------------------------------------------------------------
0000C288                            Map_obj45:
0000C288                            	include "_maps\obj45.asm"
0000C288                            ; ---------------------------------------------------------------------------
0000C288                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C288                            ; ---------------------------------------------------------------------------
0000C288 0000                       		dc.w byte_BC6C-Map_obj45
0000C28A 0000                       		dc.w byte_BC7C-Map_obj45
0000C28C 0000                       		dc.w byte_BC8C-Map_obj45
0000C28E 0000                       		dc.w byte_BC92-Map_obj45
0000C290 0000                       		dc.w byte_BC9D-Map_obj45
0000C292 0000                       		dc.w byte_BCB2-Map_obj45
0000C294 0000                       		dc.w byte_BCD1-Map_obj45
0000C296 0000                       		dc.w byte_BCFA-Map_obj45
0000C298 0000                       		dc.w byte_BCFA-Map_obj45
0000C29A 03                         byte_BC6C:	dc.b 3
0000C29B E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C2A0 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C2A5 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C2AA 03                         byte_BC7C:	dc.b 3
0000C2AB E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C2B0 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C2B5 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C2BA 01                         byte_BC8C:	dc.b 1
0000C2BB F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C2C0 02                         byte_BC92:	dc.b 2
0000C2C1 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C2C6 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C2CB 04                         byte_BC9D:	dc.b 4
0000C2CC F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C2D1 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C2D6 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C2DB F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C2E0 06                         byte_BCB2:	dc.b 6
0000C2E1 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C2E6 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C2EB F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C2F0 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C2F5 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C2FA F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C2FF 08                         byte_BCD1:	dc.b 8
0000C300 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C305 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C30A F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C30F F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C314 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C319 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C31E F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C323 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C328 08                         byte_BCFA:	dc.b 8
0000C329 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C32E F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C333 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C338 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C33D F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C342 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C347 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C34C F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C351 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C356 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C35C 00                         		even
0000C35C 00                         		even
0000C35C                            
0000C35C                            ; ===========================================================================
0000C35C                            ; ---------------------------------------------------------------------------
0000C35C                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C35C                            ; ---------------------------------------------------------------------------
0000C35C                            
0000C35C                            Obj32:					; XREF: Obj_Index
0000C35C 7000                       		moveq	#0,d0
0000C35E 1028 0024                  		move.b	$24(a0),d0
0000C362 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C366 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C36A                            ; ===========================================================================
0000C36A 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C36C 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C36E                            ; ===========================================================================
0000C36E                            
0000C36E                            Obj32_Main:				; XREF: Obj32_Index
0000C36E 5428 0024                  		addq.b	#2,$24(a0)
0000C372 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C37A 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C380 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C386 6700                       		beq.s	loc_BD60
0000C388 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C38E                            
0000C38E                            loc_BD60:
0000C38E 117C 0004 0001             		move.b	#4,1(a0)
0000C394 117C 0010 0019             		move.b	#$10,$19(a0)
0000C39A 117C 0004 0018             		move.b	#4,$18(a0)
0000C3A0 5668 000C                  		addq.w	#3,$C(a0)
0000C3A4                            
0000C3A4                            Obj32_Pressed:				; XREF: Obj32_Index
0000C3A4 4A28 0001                  		tst.b	1(a0)
0000C3A8 6A00                       		bpl.s	Obj32_Display
0000C3AA 323C 001B                  		move.w	#$1B,d1
0000C3AE 343C 0005                  		move.w	#5,d2
0000C3B2 363C 0005                  		move.w	#5,d3
0000C3B6 3828 0008                  		move.w	8(a0),d4
0000C3BA 6100 0000                  		bsr.w	SolidObject
0000C3BE 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C3C4 1028 0028                  		move.b	$28(a0),d0
0000C3C8 0240 000F                  		andi.w	#$F,d0
0000C3CC 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C3D0 47F3 0000                  		lea	(a3,d0.w),a3
0000C3D4 7600                       		moveq	#0,d3
0000C3D6 0828 0006 0028             		btst	#6,$28(a0)
0000C3DC 6700                       		beq.s	loc_BDB2
0000C3DE 7607                       		moveq	#7,d3
0000C3E0                            
0000C3E0                            loc_BDB2:
0000C3E0 4A28 0028                  		tst.b	$28(a0)
0000C3E4 6A00                       		bpl.s	loc_BDBE
0000C3E6 6100 0000                  		bsr.w	Obj32_MZBlock
0000C3EA 6600                       		bne.s	loc_BDC8
0000C3EC                            
0000C3EC                            loc_BDBE:
0000C3EC 4A28 0025                  		tst.b	$25(a0)
0000C3F0 6600                       		bne.s	loc_BDC8
0000C3F2 0793                       		bclr	d3,(a3)
0000C3F4 6000                       		bra.s	loc_BDDE
0000C3F6                            ; ===========================================================================
0000C3F6                            
0000C3F6                            loc_BDC8:
0000C3F6 4A13                       		tst.b	(a3)
0000C3F8 6600                       		bne.s	loc_BDD6
0000C3FA 303C 00CD                  		move.w	#$CD,d0
0000C3FE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play switch sound
0000C404                            
0000C404                            loc_BDD6:
0000C404 07D3                       		bset	d3,(a3)
0000C406 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C40C                            
0000C40C                            loc_BDDE:
0000C40C 0828 0005 0028             		btst	#5,$28(a0)
0000C412 6700                       		beq.s	Obj32_Display
0000C414 5328 001E                  		subq.b	#1,$1E(a0)
0000C418 6A00                       		bpl.s	Obj32_Display
0000C41A 117C 0007 001E             		move.b	#7,$1E(a0)
0000C420 0868 0001 001A             		bchg	#1,$1A(a0)
0000C426                            
0000C426                            Obj32_Display:
0000C426 6100 0000                  		bsr.w	DisplaySprite
0000C42A 3028 0008                  		move.w	8(a0),d0
0000C42E 0240 FF80                  		andi.w	#$FF80,d0
0000C432 3238 F700                  		move.w	($FFFFF700).w,d1
0000C436 0441 0080                  		subi.w	#$80,d1
0000C43A 0241 FF80                  		andi.w	#$FF80,d1
0000C43E 9041                       		sub.w	d1,d0
0000C440 0C40 0280                  		cmpi.w	#$280,d0
0000C444 6200 0000                  		bhi.w	Obj32_Delete
0000C448 4E75                       		rts	
0000C44A                            ; ===========================================================================
0000C44A                            
0000C44A                            Obj32_Delete:
0000C44A 6100 0000                  		bsr.w	DeleteObject
0000C44E 4E75                       		rts	
0000C450                            
0000C450                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C450                            
0000C450                            
0000C450                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C450 3F03                       		move.w	d3,-(sp)
0000C452 3428 0008                  		move.w	8(a0),d2
0000C456 3628 000C                  		move.w	$C(a0),d3
0000C45A 0442 0010                  		subi.w	#$10,d2
0000C45E 5143                       		subq.w	#8,d3
0000C460 383C 0020                  		move.w	#$20,d4
0000C464 3A3C 0010                  		move.w	#$10,d5
0000C468 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C46C 3C3C 005F                  		move.w	#$5F,d6
0000C470                            
0000C470                            Obj32_MZLoop:
0000C470 4A29 0001                  		tst.b	1(a1)
0000C474 6A00                       		bpl.s	loc_BE4E
0000C476 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C47A 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C47C                            
0000C47C                            loc_BE4E:
0000C47C 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C480 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C484                            
0000C484 361F                       		move.w	(sp)+,d3
0000C486 7000                       		moveq	#0,d0
0000C488                            
0000C488                            locret_BE5A:
0000C488 4E75                       		rts	
0000C48A                            ; ===========================================================================
0000C48A 1010                       Obj32_MZData:	dc.b $10, $10
0000C48C                            ; ===========================================================================
0000C48C                            
0000C48C                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C48C 7001                       		moveq	#1,d0
0000C48E 0240 003F                  		andi.w	#$3F,d0
0000C492 D040                       		add.w	d0,d0
0000C494 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C498 121A                       		move.b	(a2)+,d1
0000C49A 4881                       		ext.w	d1
0000C49C 3029 0008                  		move.w	8(a1),d0
0000C4A0 9041                       		sub.w	d1,d0
0000C4A2 9042                       		sub.w	d2,d0
0000C4A4 6400                       		bcc.s	loc_BE80
0000C4A6 D241                       		add.w	d1,d1
0000C4A8 D041                       		add.w	d1,d0
0000C4AA 6500                       		bcs.s	loc_BE84
0000C4AC 60CE                       		bra.s	loc_BE4E
0000C4AE                            ; ===========================================================================
0000C4AE                            
0000C4AE                            loc_BE80:
0000C4AE B044                       		cmp.w	d4,d0
0000C4B0 62CA                       		bhi.s	loc_BE4E
0000C4B2                            
0000C4B2                            loc_BE84:
0000C4B2 121A                       		move.b	(a2)+,d1
0000C4B4 4881                       		ext.w	d1
0000C4B6 3029 000C                  		move.w	$C(a1),d0
0000C4BA 9041                       		sub.w	d1,d0
0000C4BC 9043                       		sub.w	d3,d0
0000C4BE 6400                       		bcc.s	loc_BE9A
0000C4C0 D241                       		add.w	d1,d1
0000C4C2 D041                       		add.w	d1,d0
0000C4C4 6500                       		bcs.s	loc_BE9E
0000C4C6 60B4                       		bra.s	loc_BE4E
0000C4C8                            ; ===========================================================================
0000C4C8                            
0000C4C8                            loc_BE9A:
0000C4C8 B045                       		cmp.w	d5,d0
0000C4CA 62B0                       		bhi.s	loc_BE4E
0000C4CC                            
0000C4CC                            loc_BE9E:
0000C4CC 361F                       		move.w	(sp)+,d3
0000C4CE 7001                       		moveq	#1,d0
0000C4D0 4E75                       		rts	
0000C4D2                            ; End of function Obj32_MZBlock
0000C4D2                            
0000C4D2                            ; ===========================================================================
0000C4D2                            ; ---------------------------------------------------------------------------
0000C4D2                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C4D2                            ; ---------------------------------------------------------------------------
0000C4D2                            Map_obj32:
0000C4D2                            	include "_maps\obj32.asm"
0000C4D2                            ; ---------------------------------------------------------------------------
0000C4D2                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C4D2                            ; ---------------------------------------------------------------------------
0000C4D2 0000                       		dc.w byte_BEAC-Map_obj32
0000C4D4 0000                       		dc.w byte_BEB7-Map_obj32
0000C4D6 0000                       		dc.w byte_BEC2-Map_obj32
0000C4D8 0000                       		dc.w byte_BEB7-Map_obj32
0000C4DA 02                         byte_BEAC:	dc.b 2
0000C4DB F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C4E0 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C4E5 02                         byte_BEB7:	dc.b 2
0000C4E6 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C4EB F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C4F0 02                         byte_BEC2:	dc.b 2
0000C4F1 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C4F6 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C4FB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C500                            		even
0000C500                            		even
0000C500                            
0000C500                            ; ===========================================================================
0000C500                            ; ---------------------------------------------------------------------------
0000C500                            ; Object 33 - pushable blocks (MZ, LZ)
0000C500                            ; ---------------------------------------------------------------------------
0000C500                            
0000C500                            Obj33:					; XREF: Obj_Index
0000C500 7000                       		moveq	#0,d0
0000C502 1028 0024                  		move.b	$24(a0),d0
0000C506 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C50A 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C50E                            ; ===========================================================================
0000C50E 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C510 0000                       		dc.w loc_BF6E-Obj33_Index
0000C512 0000                       		dc.w loc_C02C-Obj33_Index
0000C514                            
0000C514 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C516 4001                       		dc.b $40, 1
0000C518                            ; ===========================================================================
0000C518                            
0000C518                            Obj33_Main:				; XREF: Obj33_Index
0000C518 5428 0024                  		addq.b	#2,$24(a0)
0000C51C 117C 000F 0016             		move.b	#$F,$16(a0)
0000C522 117C 000F 0017             		move.b	#$F,$17(a0)
0000C528 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C530 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C536 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C53C 6600                       		bne.s	loc_BF16
0000C53E 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C544                            
0000C544                            loc_BF16:
0000C544 117C 0004 0001             		move.b	#4,1(a0)
0000C54A 117C 0003 0018             		move.b	#3,$18(a0)
0000C550 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C556 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C55C 7000                       		moveq	#0,d0
0000C55E 1028 0028                  		move.b	$28(a0),d0
0000C562 D040                       		add.w	d0,d0
0000C564 0240 000E                  		andi.w	#$E,d0
0000C568 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C56C 115A 0019                  		move.b	(a2)+,$19(a0)
0000C570 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C574 4A28 0028                  		tst.b	$28(a0)
0000C578 6700                       		beq.s	Obj33_ChkGone
0000C57A 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C580                            
0000C580                            Obj33_ChkGone:
0000C580 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C584 7000                       		moveq	#0,d0
0000C586 1028 0023                  		move.b	$23(a0),d0
0000C58A 6700                       		beq.s	loc_BF6E
0000C58C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C592 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C598 6600 0000                  		bne.w	DeleteObject
0000C59C                            
0000C59C                            loc_BF6E:				; XREF: Obj33_Index
0000C59C 4A28 0032                  		tst.b	$32(a0)
0000C5A0 6600 0000                  		bne.w	loc_C046
0000C5A4 7200                       		moveq	#0,d1
0000C5A6 1228 0019                  		move.b	$19(a0),d1
0000C5AA 0641 000B                  		addi.w	#$B,d1
0000C5AE 343C 0010                  		move.w	#$10,d2
0000C5B2 363C 0011                  		move.w	#$11,d3
0000C5B6 3828 0008                  		move.w	8(a0),d4
0000C5BA 6100 0000                  		bsr.w	loc_C186
0000C5BE 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C5C4 6600                       		bne.s	loc_BFC6	; if not, branch
0000C5C6 08A8 0007 0028             		bclr	#7,$28(a0)
0000C5CC 3028 0008                  		move.w	8(a0),d0
0000C5D0 0C40 0A20                  		cmpi.w	#$A20,d0
0000C5D4 6500                       		bcs.s	loc_BFC6
0000C5D6 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C5DA 6400                       		bcc.s	loc_BFC6
0000C5DC 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C5E0 0440 001C                  		subi.w	#$1C,d0
0000C5E4 3140 000C                  		move.w	d0,$C(a0)
0000C5E8 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C5EE 08E8 0007 0028             		bset	#7,$28(a0)
0000C5F4                            
0000C5F4                            loc_BFC6:
0000C5F4 3028 0008                  		move.w	8(a0),d0
0000C5F8 0240 FF80                  		andi.w	#$FF80,d0
0000C5FC 3238 F700                  		move.w	($FFFFF700).w,d1
0000C600 0441 0080                  		subi.w	#$80,d1
0000C604 0241 FF80                  		andi.w	#$FF80,d1
0000C608 9041                       		sub.w	d1,d0
0000C60A 0C40 0280                  		cmpi.w	#$280,d0
0000C60E 6200                       		bhi.s	loc_BFE6
0000C610 6000 0000                  		bra.w	DisplaySprite
0000C614                            ; ===========================================================================
0000C614                            
0000C614                            loc_BFE6:
0000C614 3028 0034                  		move.w	$34(a0),d0
0000C618 0240 FF80                  		andi.w	#$FF80,d0
0000C61C 3238 F700                  		move.w	($FFFFF700).w,d1
0000C620 0441 0080                  		subi.w	#$80,d1
0000C624 0241 FF80                  		andi.w	#$FF80,d1
0000C628 9041                       		sub.w	d1,d0
0000C62A 0C40 0280                  		cmpi.w	#$280,d0
0000C62E 6200                       		bhi.s	loc_C016
0000C630 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C636 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C63C 117C 0004 0024             		move.b	#4,$24(a0)
0000C642 6000                       		bra.s	loc_C02C
0000C644                            ; ===========================================================================
0000C644                            
0000C644                            loc_C016:
0000C644 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C648 7000                       		moveq	#0,d0
0000C64A 1028 0023                  		move.b	$23(a0),d0
0000C64E 6700                       		beq.s	loc_C028
0000C650 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C656                            
0000C656                            loc_C028:
0000C656 6000 0000                  		bra.w	DeleteObject
0000C65A                            ; ===========================================================================
0000C65A                            
0000C65A                            loc_C02C:				; XREF: Obj33_Index
0000C65A 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C65E 6700                       		beq.s	locret_C044
0000C660 117C 0002 0024             		move.b	#2,$24(a0)
0000C666 4228 0032                  		clr.b	$32(a0)
0000C66A 4268 0010                  		clr.w	$10(a0)
0000C66E 4268 0012                  		clr.w	$12(a0)
0000C672                            
0000C672                            locret_C044:
0000C672 4E75                       		rts	
0000C674                            ; ===========================================================================
0000C674                            
0000C674                            loc_C046:				; XREF: loc_BF6E
0000C674 3F28 0008                  		move.w	8(a0),-(sp)
0000C678 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C67E 6400                       		bcc.s	loc_C056
0000C680 6100 0000                  		bsr.w	SpeedToPos
0000C684                            
0000C684                            loc_C056:
0000C684 0828 0001 0022             		btst	#1,$22(a0)
0000C68A 6700                       		beq.s	loc_C0A0
0000C68C 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C692 4EB9 0000 0000             		jsr	ObjHitFloor
0000C698 4A41                       		tst.w	d1
0000C69A 6A00 0000                  		bpl.w	loc_C09E
0000C69E D368 000C                  		add.w	d1,$C(a0)
0000C6A2 4268 0012                  		clr.w	$12(a0)
0000C6A6 08A8 0001 0022             		bclr	#1,$22(a0)
0000C6AC 3011                       		move.w	(a1),d0
0000C6AE 0240 03FF                  		andi.w	#$3FF,d0
0000C6B2 0C40 016A                  		cmpi.w	#$16A,d0
0000C6B6 6500                       		bcs.s	loc_C09E
0000C6B8 3028 0030                  		move.w	$30(a0),d0
0000C6BC E640                       		asr.w	#3,d0
0000C6BE 3140 0010                  		move.w	d0,$10(a0)
0000C6C2 117C 0001 0032             		move.b	#1,$32(a0)
0000C6C8 4268 000E                  		clr.w	$E(a0)
0000C6CC                            
0000C6CC                            loc_C09E:
0000C6CC 6000                       		bra.s	loc_C0E6
0000C6CE                            ; ===========================================================================
0000C6CE                            
0000C6CE                            loc_C0A0:
0000C6CE 4A68 0010                  		tst.w	$10(a0)
0000C6D2 6700 0000                  		beq.w	loc_C0D6
0000C6D6 6B00                       		bmi.s	loc_C0BC
0000C6D8 7600                       		moveq	#0,d3
0000C6DA 1628 0019                  		move.b	$19(a0),d3
0000C6DE 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C6E4 4A41                       		tst.w	d1		; has block touched a wall?
0000C6E6 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C6E8 6000                       		bra.s	loc_C0E6
0000C6EA                            ; ===========================================================================
0000C6EA                            
0000C6EA                            loc_C0BC:
0000C6EA 7600                       		moveq	#0,d3
0000C6EC 1628 0019                  		move.b	$19(a0),d3
0000C6F0 4643                       		not.w	d3
0000C6F2 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C6F8 4A41                       		tst.w	d1		; has block touched a wall?
0000C6FA 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C6FC 6000                       		bra.s	loc_C0E6
0000C6FE                            ; ===========================================================================
0000C6FE                            
0000C6FE                            Obj33_StopPush:
0000C6FE 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C702 6000                       		bra.s	loc_C0E6
0000C704                            ; ===========================================================================
0000C704                            
0000C704                            loc_C0D6:
0000C704 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C70C 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C712 6400                       		bcc.s	loc_C104
0000C714                            
0000C714                            loc_C0E6:
0000C714 7200                       		moveq	#0,d1
0000C716 1228 0019                  		move.b	$19(a0),d1
0000C71A 0641 000B                  		addi.w	#$B,d1
0000C71E 343C 0010                  		move.w	#$10,d2
0000C722 363C 0011                  		move.w	#$11,d3
0000C726 381F                       		move.w	(sp)+,d4
0000C728 6100 0000                  		bsr.w	loc_C186
0000C72C 6100                       		bsr.s	Obj33_ChkLava
0000C72E 6000 FEC4                  		bra.w	loc_BFC6
0000C732                            ; ===========================================================================
0000C732                            
0000C732                            loc_C104:
0000C732 381F                       		move.w	(sp)+,d4
0000C734 43F8 D000                  		lea	($FFFFD000).w,a1
0000C738 08A9 0003 0022             		bclr	#3,$22(a1)
0000C73E 08A8 0003 0022             		bclr	#3,$22(a0)
0000C744 6000 FECE                  		bra.w	loc_BFE6
0000C748                            ; ===========================================================================
0000C748                            
0000C748                            Obj33_ChkLava:
0000C748 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C74E 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C750 343C FFE0                  		move.w	#-$20,d2
0000C754 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C75A 6700                       		beq.s	Obj33_LoadLava
0000C75C 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C762 6700                       		beq.s	Obj33_LoadLava
0000C764 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C76A 6700                       		beq.s	Obj33_LoadLava
0000C76C 4E75                       		rts	
0000C76E                            ; ===========================================================================
0000C76E                            
0000C76E                            Obj33_ChkLava2:
0000C76E 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C774 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C776 343C 0020                  		move.w	#$20,d2
0000C77A 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C780 6700                       		beq.s	Obj33_LoadLava
0000C782 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C788 6700                       		beq.s	Obj33_LoadLava
0000C78A                            
0000C78A                            Obj33_NoLava:
0000C78A 4E75                       		rts	
0000C78C                            ; ===========================================================================
0000C78C                            
0000C78C                            Obj33_LoadLava:
0000C78C 6100 0000                  		bsr.w	SingleObjLoad
0000C790 6600                       		bne.s	locret_C184
0000C792 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C796 3368 0008 0008             		move.w	8(a0),8(a1)
0000C79C D569 0008                  		add.w	d2,8(a1)
0000C7A0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C7A6 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C7AC 2348 003C                  		move.l	a0,$3C(a1)
0000C7B0                            
0000C7B0                            locret_C184:
0000C7B0 4E75                       		rts	
0000C7B2                            ; ===========================================================================
0000C7B2                            
0000C7B2                            loc_C186:				; XREF: loc_BF6E
0000C7B2 1028 0025                  		move.b	$25(a0),d0
0000C7B6 6700 0000                  		beq.w	loc_C218
0000C7BA 5500                       		subq.b	#2,d0
0000C7BC 6600                       		bne.s	loc_C1AA
0000C7BE 6100 B3AE                  		bsr.w	ExitPlatform
0000C7C2 0829 0003 0022             		btst	#3,$22(a1)
0000C7C8 6600                       		bne.s	loc_C1A4
0000C7CA 4228 0025                  		clr.b	$25(a0)
0000C7CE 4E75                       		rts	
0000C7D0                            ; ===========================================================================
0000C7D0                            
0000C7D0                            loc_C1A4:
0000C7D0 3404                       		move.w	d4,d2
0000C7D2 6000 B8F8                  		bra.w	MvSonicOnPtfm
0000C7D6                            ; ===========================================================================
0000C7D6                            
0000C7D6                            loc_C1AA:
0000C7D6 5500                       		subq.b	#2,d0
0000C7D8 6600                       		bne.s	loc_C1F2
0000C7DA 6100 0000                  		bsr.w	SpeedToPos
0000C7DE 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C7E4 4EB9 0000 0000             		jsr	ObjHitFloor
0000C7EA 4A41                       		tst.w	d1
0000C7EC 6A00 0000                  		bpl.w	locret_C1F0
0000C7F0 D368 000C                  		add.w	d1,$C(a0)
0000C7F4 4268 0012                  		clr.w	$12(a0)
0000C7F8 4228 0025                  		clr.b	$25(a0)
0000C7FC 3011                       		move.w	(a1),d0
0000C7FE 0240 03FF                  		andi.w	#$3FF,d0
0000C802 0C40 016A                  		cmpi.w	#$16A,d0
0000C806 6500                       		bcs.s	locret_C1F0
0000C808 3028 0030                  		move.w	$30(a0),d0
0000C80C E640                       		asr.w	#3,d0
0000C80E 3140 0010                  		move.w	d0,$10(a0)
0000C812 117C 0001 0032             		move.b	#1,$32(a0)
0000C818 4268 000E                  		clr.w	$E(a0)
0000C81C                            
0000C81C                            locret_C1F0:
0000C81C 4E75                       		rts	
0000C81E                            ; ===========================================================================
0000C81E                            
0000C81E                            loc_C1F2:
0000C81E 6100 0000                  		bsr.w	SpeedToPos
0000C822 3028 0008                  		move.w	8(a0),d0
0000C826 0240 000C                  		andi.w	#$C,d0
0000C82A 6600 0000                  		bne.w	locret_C2E4
0000C82E 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C834 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C83A 4268 0010                  		clr.w	$10(a0)
0000C83E 5528 0025                  		subq.b	#2,$25(a0)
0000C842 4E75                       		rts	
0000C844                            ; ===========================================================================
0000C844                            
0000C844                            loc_C218:
0000C844 6100 0000                  		bsr.w	loc_FAC8
0000C848 4A44                       		tst.w	d4
0000C84A 6700 0000                  		beq.w	locret_C2E4
0000C84E 6B00 0000                  		bmi.w	locret_C2E4
0000C852 4A28 0032                  		tst.b	$32(a0)
0000C856 6700                       		beq.s	loc_C230
0000C858 6000 0000                  		bra.w	locret_C2E4
0000C85C                            ; ===========================================================================
0000C85C                            
0000C85C                            loc_C230:
0000C85C 4A40                       		tst.w	d0
0000C85E 6700 0000                  		beq.w	locret_C2E4
0000C862 6B00                       		bmi.s	loc_C268
0000C864 0829 0000 0022             		btst	#0,$22(a1)
0000C86A 6600 0000                  		bne.w	locret_C2E4
0000C86E 3F00                       		move.w	d0,-(sp)
0000C870 7600                       		moveq	#0,d3
0000C872 1628 0019                  		move.b	$19(a0),d3
0000C876 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C87C 301F                       		move.w	(sp)+,d0
0000C87E 4A41                       		tst.w	d1
0000C880 6B00 0000                  		bmi.w	locret_C2E4
0000C884 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C88C 7001                       		moveq	#1,d0
0000C88E 323C 0040                  		move.w	#$40,d1
0000C892 6000                       		bra.s	loc_C294
0000C894                            ; ===========================================================================
0000C894                            
0000C894                            loc_C268:
0000C894 0829 0000 0022             		btst	#0,$22(a1)
0000C89A 6700                       		beq.s	locret_C2E4
0000C89C 3F00                       		move.w	d0,-(sp)
0000C89E 7600                       		moveq	#0,d3
0000C8A0 1628 0019                  		move.b	$19(a0),d3
0000C8A4 4643                       		not.w	d3
0000C8A6 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C8AC 301F                       		move.w	(sp)+,d0
0000C8AE 4A41                       		tst.w	d1
0000C8B0 6B00                       		bmi.s	locret_C2E4
0000C8B2 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C8BA 70FF                       		moveq	#-1,d0
0000C8BC 323C FFC0                  		move.w	#-$40,d1
0000C8C0                            
0000C8C0                            loc_C294:
0000C8C0 43F8 D000                  		lea	($FFFFD000).w,a1
0000C8C4 D169 0008                  		add.w	d0,8(a1)
0000C8C8 3341 0014                  		move.w	d1,$14(a1)
0000C8CC 337C 0000 0010             		move.w	#0,$10(a1)
0000C8D2 3F00                       		move.w	d0,-(sp)
0000C8D4 303C 00A7                  		move.w	#$A7,d0
0000C8D8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C8DE 301F                       		move.w	(sp)+,d0
0000C8E0 4A28 0028                  		tst.b	$28(a0)
0000C8E4 6B00                       		bmi.s	locret_C2E4
0000C8E6 3F00                       		move.w	d0,-(sp)
0000C8E8 4EB9 0000 0000             		jsr	ObjHitFloor
0000C8EE 301F                       		move.w	(sp)+,d0
0000C8F0 0C41 0004                  		cmpi.w	#4,d1
0000C8F4 6F00                       		ble.s	loc_C2E0
0000C8F6 317C 0400 0010             		move.w	#$400,$10(a0)
0000C8FC 4A40                       		tst.w	d0
0000C8FE 6A00                       		bpl.s	loc_C2D8
0000C900 4468 0010                  		neg.w	$10(a0)
0000C904                            
0000C904                            loc_C2D8:
0000C904 117C 0006 0025             		move.b	#6,$25(a0)
0000C90A 6000                       		bra.s	locret_C2E4
0000C90C                            ; ===========================================================================
0000C90C                            
0000C90C                            loc_C2E0:
0000C90C D368 000C                  		add.w	d1,$C(a0)
0000C910                            
0000C910                            locret_C2E4:
0000C910 4E75                       		rts	
0000C912                            ; ===========================================================================
0000C912                            ; ---------------------------------------------------------------------------
0000C912                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C912                            ; ---------------------------------------------------------------------------
0000C912                            Map_obj33:
0000C912                            	include "_maps\obj33.asm"
0000C912                            ; ---------------------------------------------------------------------------
0000C912                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C912                            ; ---------------------------------------------------------------------------
0000C912 0000                       		dc.w byte_C2EA-Map_obj33
0000C914 0000                       		dc.w byte_C2F0-Map_obj33
0000C916 01                         byte_C2EA:	dc.b 1
0000C917 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C91C 04                         byte_C2F0:	dc.b 4
0000C91D F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C922 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C927 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C92C F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C932 00                         		even
0000C932 00                         		even
0000C932                            
0000C932                            ; ===========================================================================
0000C932                            ; ---------------------------------------------------------------------------
0000C932                            ; Object 34 - zone title cards
0000C932                            ; ---------------------------------------------------------------------------
0000C932                            
0000C932                            Obj34:					; XREF: Obj_Index
0000C932 7000                       		moveq	#0,d0
0000C934 1028 0024                  		move.b	$24(a0),d0
0000C938 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C93C 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C940                            ; ===========================================================================
0000C940 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C942 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C944 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C946 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C948                            ; ===========================================================================
0000C948                            
0000C948                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C948 2248                       		movea.l	a0,a1
0000C94A 7000                       		moveq	#0,d0
0000C94C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C950 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C956 6600                       		bne.s	Obj34_CheckFZ
0000C958 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C95A                            
0000C95A                            Obj34_CheckFZ:
0000C95A 3400                       		move.w	d0,d2
0000C95C 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C962 6600                       		bne.s	Obj34_LoadConfig
0000C964 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C966 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C968                            
0000C968                            Obj34_LoadConfig:
0000C968 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C96E E948                       		lsl.w	#4,d0
0000C970 D6C0                       		adda.w	d0,a3
0000C972 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C978 7203                       		moveq	#3,d1
0000C97A                            
0000C97A                            Obj34_Loop:
0000C97A 12BC 0034                  		move.b	#$34,0(a1)
0000C97E 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000C982 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000C986 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000C98A 335A 000A                  		move.w	(a2)+,$A(a1)
0000C98E 135A 0024                  		move.b	(a2)+,$24(a1)
0000C992 101A                       		move.b	(a2)+,d0
0000C994 6600                       		bne.s	Obj34_ActNumber
0000C996 1002                       		move.b	d2,d0
0000C998                            
0000C998                            Obj34_ActNumber:
0000C998 0C00 0007                  		cmpi.b	#7,d0
0000C99C 6600                       		bne.s	Obj34_MakeSprite
0000C99E D038 FE11                  		add.b	($FFFFFE11).w,d0
0000C9A2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000C9A8 6600                       		bne.s	Obj34_MakeSprite
0000C9AA 5300                       		subq.b	#1,d0
0000C9AC                            
0000C9AC                            Obj34_MakeSprite:
0000C9AC 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000C9B0 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000C9B8 337C 8580 0002             		move.w	#$8580,2(a1)
0000C9BE 137C 0078 0019             		move.b	#$78,$19(a1)
0000C9C4 137C 0000 0001             		move.b	#0,1(a1)
0000C9CA 137C 0000 0018             		move.b	#0,$18(a1)
0000C9D0 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000C9D6 43E9 0040                  		lea	$40(a1),a1	; next object
0000C9DA 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000C9DE                            
0000C9DE                            Obj34_ChkPos:				; XREF: Obj34_Index
0000C9DE 7210                       		moveq	#$10,d1		; set horizontal speed
0000C9E0 3028 0030                  		move.w	$30(a0),d0
0000C9E4 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000C9E8 6700                       		beq.s	loc_C3C8	; if yes, branch
0000C9EA 6C00                       		bge.s	Obj34_Move
0000C9EC 4441                       		neg.w	d1
0000C9EE                            
0000C9EE                            Obj34_Move:
0000C9EE D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C9F2                            
0000C9F2                            loc_C3C8:
0000C9F2 3028 0008                  		move.w	8(a0),d0
0000C9F6 6B00                       		bmi.s	locret_C3D8
0000C9F8 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C9FC 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000C9FE 6000 0000                  		bra.w	DisplaySprite
0000CA02                            ; ===========================================================================
0000CA02                            
0000CA02                            locret_C3D8:
0000CA02 4E75                       		rts	
0000CA04                            ; ===========================================================================
0000CA04                            
0000CA04                            Obj34_Wait:				; XREF: Obj34_Index
0000CA04 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CA08 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CA0A 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CA0E 6000 0000                  		bra.w	DisplaySprite
0000CA12                            ; ===========================================================================
0000CA12                            
0000CA12                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CA12 4A28 0001                  		tst.b	1(a0)
0000CA16 6A00                       		bpl.s	Obj34_ChangeArt
0000CA18 7220                       		moveq	#$20,d1
0000CA1A 3028 0032                  		move.w	$32(a0),d0
0000CA1E B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CA22 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CA24 6C00                       		bge.s	Obj34_Move2
0000CA26 4441                       		neg.w	d1
0000CA28                            
0000CA28                            Obj34_Move2:
0000CA28 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CA2C 3028 0008                  		move.w	8(a0),d0
0000CA30 6B00                       		bmi.s	locret_C412
0000CA32 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CA36 6400                       		bcc.s	locret_C412	; if yes, branch
0000CA38 6000 0000                  		bra.w	DisplaySprite
0000CA3C                            ; ===========================================================================
0000CA3C                            
0000CA3C                            locret_C412:
0000CA3C 4E75                       		rts	
0000CA3E                            ; ===========================================================================
0000CA3E                            
0000CA3E                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CA3E 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CA44 6600                       		bne.s	Obj34_Delete
0000CA46 7002                       		moveq	#2,d0
0000CA48 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load explosion patterns
0000CA4E 7000                       		moveq	#0,d0
0000CA50 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CA54 0640 0015                  		addi.w	#$15,d0
0000CA58 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load animal patterns
0000CA5E                            
0000CA5E                            Obj34_Delete:
0000CA5E 6000 0000                  		bra.w	DeleteObject
0000CA62                            ; ===========================================================================
0000CA62 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CA64 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CA66 00E4                       		dc.w $E4
0000CA68 0206                       		dc.b 2,	6
0000CA6A 00EA                       		dc.w $EA
0000CA6C 0207                       		dc.b 2,	7
0000CA6E 00E0                       		dc.w $E0
0000CA70 020A                       		dc.b 2,	$A
0000CA72                            ; ---------------------------------------------------------------------------
0000CA72                            ; Title	card configuration data
0000CA72                            ; Format:
0000CA72                            ; 4 bytes per item (YYYY XXXX)
0000CA72                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CA72                            ; ---------------------------------------------------------------------------
0000CA72 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CA82 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CA92 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CAA2 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CAB2 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CAC2 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CAD2 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CAE2                            ; ===========================================================================
0000CAE2                            ; ---------------------------------------------------------------------------
0000CAE2                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CAE2                            ; ---------------------------------------------------------------------------
0000CAE2                            
0000CAE2                            Obj39:					; XREF: Obj_Index
0000CAE2 7000                       		moveq	#0,d0
0000CAE4 1028 0024                  		move.b	$24(a0),d0
0000CAE8 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CAEC 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CAF0                            ; ===========================================================================
0000CAF0 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CAF2 0000                       		dc.w loc_C50C-Obj39_Index
0000CAF4 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CAF6                            ; ===========================================================================
0000CAF6                            
0000CAF6                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CAF6 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CAFA 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CAFC 4E75                       		rts	
0000CAFE                            ; ===========================================================================
0000CAFE                            
0000CAFE                            Obj39_Main:
0000CAFE 5428 0024                  		addq.b	#2,$24(a0)
0000CB02 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CB08 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CB0E 6700                       		beq.s	loc_C4EC	; if not, branch
0000CB10 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CB16                            
0000CB16                            loc_C4EC:
0000CB16 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CB1C 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CB24 317C 855E 0002             		move.w	#$855E,2(a0)
0000CB2A 117C 0000 0001             		move.b	#0,1(a0)
0000CB30 117C 0000 0018             		move.b	#0,$18(a0)
0000CB36                            
0000CB36                            loc_C50C:				; XREF: Obj39_Index
0000CB36 7210                       		moveq	#$10,d1		; set horizontal speed
0000CB38 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CB3E 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CB40 6500                       		bcs.s	Obj39_Move
0000CB42 4441                       		neg.w	d1
0000CB44                            
0000CB44                            Obj39_Move:
0000CB44 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CB48 6000 0000                  		bra.w	DisplaySprite
0000CB4C                            ; ===========================================================================
0000CB4C                            
0000CB4C                            Obj39_SetWait:				; XREF: Obj39_Main
0000CB4C 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CB52 5428 0024                  		addq.b	#2,$24(a0)
0000CB56 4E75                       		rts	
0000CB58                            ; ===========================================================================
0000CB58                            
0000CB58                            Obj39_Wait:				; XREF: Obj39_Index
0000CB58 1038 F605                  		move.b	($FFFFF605).w,d0
0000CB5C 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CB60 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CB62 0828 0000 001A             		btst	#0,$1A(a0)
0000CB68 6600                       		bne.s	Obj39_Display
0000CB6A 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CB6E 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CB70 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CB74 6000 0000                  		bra.w	DisplaySprite
0000CB78                            ; ===========================================================================
0000CB78                            
0000CB78                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CB78 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CB7C 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CB7E 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CB84 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CB88 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CB8A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CB90 6000                       		bra.s	Obj39_Display
0000CB92                            ; ===========================================================================
0000CB92                            
0000CB92                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CB92 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CB98                            
0000CB98                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CB98 6000 0000                  		bra.w	DisplaySprite
0000CB9C                            ; ===========================================================================
0000CB9C                            ; ---------------------------------------------------------------------------
0000CB9C                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CB9C                            ; ---------------------------------------------------------------------------
0000CB9C                            
0000CB9C                            Obj3A:					; XREF: Obj_Index
0000CB9C 7000                       		moveq	#0,d0
0000CB9E 1028 0024                  		move.b	$24(a0),d0
0000CBA2 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CBA6 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CBAA                            ; ===========================================================================
0000CBAA 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CBAC 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CBAE 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CBB0 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CBB2 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CBB4 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CBB6 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CBB8 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CBBA 0000                       		dc.w loc_C766-Obj3A_Index
0000CBBC                            ; ===========================================================================
0000CBBC                            
0000CBBC                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CBBC 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CBC0 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CBC2 4E75                       		rts	
0000CBC4                            ; ===========================================================================
0000CBC4                            
0000CBC4                            Obj3A_Main:
0000CBC4 2248                       		movea.l	a0,a1
0000CBC6 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CBCC 7206                       		moveq	#6,d1
0000CBCE                            
0000CBCE                            Obj3A_Loop:
0000CBCE 12BC 003A                  		move.b	#$3A,0(a1)
0000CBD2 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CBD6 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CBDA 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CBDE 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CBE2 135A 0024                  		move.b	(a2)+,$24(a1)
0000CBE6 101A                       		move.b	(a2)+,d0
0000CBE8 0C00 0006                  		cmpi.b	#6,d0
0000CBEC 6600                       		bne.s	loc_C5CA
0000CBEE D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CBF2                            
0000CBF2                            loc_C5CA:
0000CBF2 1340 001A                  		move.b	d0,$1A(a1)
0000CBF6 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CBFE 337C 8580 0002             		move.w	#$8580,2(a1)
0000CC04 137C 0000 0001             		move.b	#0,1(a1)
0000CC0A 43E9 0040                  		lea	$40(a1),a1
0000CC0E 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CC12                            
0000CC12                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CC12 7210                       		moveq	#$10,d1		; set horizontal speed
0000CC14 3028 0030                  		move.w	$30(a0),d0
0000CC18 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CC1C 6700                       		beq.s	loc_C61A	; if yes, branch
0000CC1E 6C00                       		bge.s	Obj3A_Move
0000CC20 4441                       		neg.w	d1
0000CC22                            
0000CC22                            Obj3A_Move:
0000CC22 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CC26                            
0000CC26                            loc_C5FE:				; XREF: loc_C61A
0000CC26 3028 0008                  		move.w	8(a0),d0
0000CC2A 6B00                       		bmi.s	locret_C60E
0000CC2C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CC30 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CC32 6000 0000                  		bra.w	DisplaySprite
0000CC36                            ; ===========================================================================
0000CC36                            
0000CC36                            locret_C60E:
0000CC36 4E75                       		rts	
0000CC38                            ; ===========================================================================
0000CC38                            
0000CC38                            loc_C610:				; XREF: loc_C61A
0000CC38 117C 000E 0024             		move.b	#$E,$24(a0)
0000CC3E 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CC42                            ; ===========================================================================
0000CC42                            
0000CC42                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CC42 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CC48 67EE                       		beq.s	loc_C610
0000CC4A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CC50 66D4                       		bne.s	loc_C5FE
0000CC52 5428 0024                  		addq.b	#2,$24(a0)
0000CC56 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CC5C                            
0000CC5C                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CC5C 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CC60 6600                       		bne.s	Obj3A_Display
0000CC62 5428 0024                  		addq.b	#2,$24(a0)
0000CC66                            
0000CC66                            Obj3A_Display:
0000CC66 6000 0000                  		bra.w	DisplaySprite
0000CC6A                            ; ===========================================================================
0000CC6A                            
0000CC6A                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CC6A 6100 0000                  		bsr.w	DisplaySprite
0000CC6E 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CC74 7000                       		moveq	#0,d0
0000CC76 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CC7A 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CC7C 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CC80 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CC86                            
0000CC86                            Obj3A_RingBonus:
0000CC86 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CC8A 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CC8C 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CC90 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CC96                            
0000CC96                            Obj3A_ChkBonus:
0000CC96 4A40                       		tst.w	d0		; is there any bonus?
0000CC98 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CC9A 303C 00C5                  		move.w	#$C5,d0
0000CC9E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CCA4 5428 0024                  		addq.b	#2,$24(a0)
0000CCA8 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CCAE 6600                       		bne.s	Obj3A_SetDelay
0000CCB0 5828 0024                  		addq.b	#4,$24(a0)
0000CCB4                            
0000CCB4                            Obj3A_SetDelay:
0000CCB4 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CCBA                            
0000CCBA                            locret_C692:
0000CCBA 4E75                       		rts	
0000CCBC                            ; ===========================================================================
0000CCBC                            
0000CCBC                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CCBC 4EB9 0000 0000             		jsr	AddPoints
0000CCC2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CCC6 0200 0003                  		andi.b	#3,d0
0000CCCA 66EE                       		bne.s	locret_C692
0000CCCC 303C 00CD                  		move.w	#$CD,d0
0000CCD0 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CCD6                            ; ===========================================================================
0000CCD6                            
0000CCD6                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CCD6 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CCDA 0240 0007                  		andi.w	#7,d0
0000CCDE E748                       		lsl.w	#3,d0
0000CCE0 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CCE4 0241 0003                  		andi.w	#3,d1
0000CCE8 D241                       		add.w	d1,d1
0000CCEA D041                       		add.w	d1,d0
0000CCEC 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CCF0 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CCF4 4A40                       		tst.w	d0
0000CCF6 6600                       		bne.s	Obj3A_ChkSS
0000CCF8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CCFE 6000                       		bra.s	Obj3A_Display2
0000CD00                            ; ===========================================================================
0000CD00                            
0000CD00                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CD00 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CD04 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CD08 6700                       		beq.s	loc_C6EA	; if not, branch
0000CD0A 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CD10 6000                       		bra.s	Obj3A_Display2
0000CD12                            ; ===========================================================================
0000CD12                            
0000CD12                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CD12 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CD18                            
0000CD18                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CD18 6000 0000                  		bra.w	DisplaySprite
0000CD1C                            ; ===========================================================================
0000CD1C                            ; ---------------------------------------------------------------------------
0000CD1C                            ; Level	order array
0000CD1C                            ; ---------------------------------------------------------------------------
0000CD1C                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CD4C                            		even
0000CD4C                            ; ===========================================================================
0000CD4C                            
0000CD4C                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CD4C 7220                       		moveq	#$20,d1		; set horizontal speed
0000CD4E 3028 0032                  		move.w	$32(a0),d0
0000CD52 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CD56 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CD58 6C00                       		bge.s	Obj3A_Move2
0000CD5A 4441                       		neg.w	d1
0000CD5C                            
0000CD5C                            Obj3A_Move2:
0000CD5C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CD60 3028 0008                  		move.w	8(a0),d0
0000CD64 6B00                       		bmi.s	locret_C748
0000CD66 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CD6A 6400                       		bcc.s	locret_C748	; if yes, branch
0000CD6C 6000 0000                  		bra.w	DisplaySprite
0000CD70                            ; ===========================================================================
0000CD70                            
0000CD70                            locret_C748:
0000CD70 4E75                       		rts	
0000CD72                            ; ===========================================================================
0000CD72                            
0000CD72                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CD72 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CD78 6600 0000                  		bne.w	DeleteObject
0000CD7C 5428 0024                  		addq.b	#2,$24(a0)
0000CD80 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CD84 303C 008D                  		move.w	#$8D,d0
0000CD88 4EF9 0000 15BA             		jmp	(PlaySound).l	; play FZ music
0000CD8E                            ; ===========================================================================
0000CD8E                            
0000CD8E                            loc_C766:				; XREF: Obj3A_Index
0000CD8E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CD92 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CD98 6700 0000                  		beq.w	DeleteObject
0000CD9C 4E75                       		rts	
0000CD9E                            ; ===========================================================================
0000CD9E 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CDA4 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CDA6 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CDAC 0201                       		dc.b 2,	1
0000CDAE 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CDB4 0206                       		dc.b 2,	6
0000CDB6 0520 0120 00EC             		dc.w $520, $120, $EC
0000CDBC 0202                       		dc.b 2,	2
0000CDBE 0540 0120 00FC             		dc.w $540, $120, $FC
0000CDC4 0203                       		dc.b 2,	3
0000CDC6 0560 0120 010C             		dc.w $560, $120, $10C
0000CDCC 0204                       		dc.b 2,	4
0000CDCE 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CDD4 0205                       		dc.b 2,	5
0000CDD6                            ; ===========================================================================
0000CDD6                            ; ---------------------------------------------------------------------------
0000CDD6                            ; Object 7E - special stage results screen
0000CDD6                            ; ---------------------------------------------------------------------------
0000CDD6                            
0000CDD6                            Obj7E:					; XREF: Obj_Index
0000CDD6 7000                       		moveq	#0,d0
0000CDD8 1028 0024                  		move.b	$24(a0),d0
0000CDDC 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CDE0 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CDE4                            ; ===========================================================================
0000CDE4 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CDE6 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CDE8 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CDEA 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CDEC 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CDEE 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CDF0 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CDF2 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CDF4 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CDF6 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CDF8 0000                       		dc.w loc_C91A-Obj7E_Index
0000CDFA                            ; ===========================================================================
0000CDFA                            
0000CDFA                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CDFA 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CDFE 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CE00 4E75                       		rts	
0000CE02                            ; ===========================================================================
0000CE02                            
0000CE02                            Obj7E_Main:
0000CE02 2248                       		movea.l	a0,a1
0000CE04 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CE0A 7203                       		moveq	#3,d1
0000CE0C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CE12 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CE14 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CE16                            
0000CE16                            Obj7E_Loop:
0000CE16 12BC 007E                  		move.b	#$7E,0(a1)
0000CE1A 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CE1E 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CE22 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CE26 135A 0024                  		move.b	(a2)+,$24(a1)
0000CE2A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CE2E 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CE36 337C 8580 0002             		move.w	#$8580,2(a1)
0000CE3C 137C 0000 0001             		move.b	#0,1(a1)
0000CE42 43E9 0040                  		lea	$40(a1),a1
0000CE46 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CE4A                            
0000CE4A 7007                       		moveq	#7,d0
0000CE4C 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CE50 6700                       		beq.s	loc_C842
0000CE52 7000                       		moveq	#0,d0
0000CE54 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CE58 6600                       		bne.s	loc_C842	; if not, branch
0000CE5A 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CE5C 317C 0018 0008             		move.w	#$18,8(a0)
0000CE62 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CE68                            
0000CE68                            loc_C842:
0000CE68 1140 001A                  		move.b	d0,$1A(a0)
0000CE6C                            
0000CE6C                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CE6C 7210                       		moveq	#$10,d1		; set horizontal speed
0000CE6E 3028 0030                  		move.w	$30(a0),d0
0000CE72 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CE76 6700                       		beq.s	loc_C86C	; if yes, branch
0000CE78 6C00                       		bge.s	Obj7E_Move
0000CE7A 4441                       		neg.w	d1
0000CE7C                            
0000CE7C                            Obj7E_Move:
0000CE7C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CE80                            
0000CE80                            loc_C85A:				; XREF: loc_C86C
0000CE80 3028 0008                  		move.w	8(a0),d0
0000CE84 6B00                       		bmi.s	locret_C86A
0000CE86 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CE8A 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CE8C 6000 0000                  		bra.w	DisplaySprite
0000CE90                            ; ===========================================================================
0000CE90                            
0000CE90                            locret_C86A:
0000CE90 4E75                       		rts	
0000CE92                            ; ===========================================================================
0000CE92                            
0000CE92                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CE92 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CE98 66E6                       		bne.s	loc_C85A
0000CE9A 5428 0024                  		addq.b	#2,$24(a0)
0000CE9E 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CEA4 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CEAA                            
0000CEAA                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CEAA 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CEAE 6600                       		bne.s	Obj7E_Display
0000CEB0 5428 0024                  		addq.b	#2,$24(a0)
0000CEB4                            
0000CEB4                            Obj7E_Display:
0000CEB4 6000 0000                  		bra.w	DisplaySprite
0000CEB8                            ; ===========================================================================
0000CEB8                            
0000CEB8                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000CEB8 6100 0000                  		bsr.w	DisplaySprite
0000CEBC 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000CEC2 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CEC6 6700                       		beq.s	loc_C8C4	; if yes, branch
0000CEC8 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CECE 700A                       		moveq	#10,d0		; add 10 to score
0000CED0 4EB9 0000 0000             		jsr	AddPoints
0000CED6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CEDA 0200 0003                  		andi.b	#3,d0
0000CEDE 6600                       		bne.s	locret_C8EA
0000CEE0 303C 00CD                  		move.w	#$CD,d0
0000CEE4 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CEEA                            ; ===========================================================================
0000CEEA                            
0000CEEA                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000CEEA 303C 00C5                  		move.w	#$C5,d0
0000CEEE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CEF4 5428 0024                  		addq.b	#2,$24(a0)
0000CEF8 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CEFE 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000CF04 6500                       		bcs.s	locret_C8EA	; if not, branch
0000CF06 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000CF0C 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000CF10                            
0000CF10                            locret_C8EA:
0000CF10 4E75                       		rts	
0000CF12                            ; ===========================================================================
0000CF12                            
0000CF12                            Obj7E_Exit:				; XREF: Obj7E_Index
0000CF12 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CF18 6000 0000                  		bra.w	DisplaySprite
0000CF1C                            ; ===========================================================================
0000CF1C                            
0000CF1C                            Obj7E_Continue:				; XREF: Obj7E_Index
0000CF1C 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000CF22 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000CF28 303C 00BF                  		move.w	#$BF,d0
0000CF2C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play continues music
0000CF32 5428 0024                  		addq.b	#2,$24(a0)
0000CF36 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000CF3C 6000 0000                  		bra.w	DisplaySprite
0000CF40                            ; ===========================================================================
0000CF40                            
0000CF40                            loc_C91A:				; XREF: Obj7E_Index
0000CF40 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CF44 0200 000F                  		andi.b	#$F,d0
0000CF48 6600                       		bne.s	Obj7E_Display2
0000CF4A 0868 0000 001A             		bchg	#0,$1A(a0)
0000CF50                            
0000CF50                            Obj7E_Display2:
0000CF50 6000 0000                  		bra.w	DisplaySprite
0000CF54                            ; ===========================================================================
0000CF54 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000CF5A 0200                       		dc.b 2,	0		; rountine number, frame number
0000CF5C 0320 0120 0118             		dc.w $320, $120, $118
0000CF62 0201                       		dc.b 2,	1
0000CF64 0360 0120 0128             		dc.w $360, $120, $128
0000CF6A 0202                       		dc.b 2,	2
0000CF6C 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000CF72 0203                       		dc.b 2,	3
0000CF74 03A0 0120 0138             		dc.w $3A0, $120, $138
0000CF7A 0206                       		dc.b 2,	6
0000CF7C                            ; ===========================================================================
0000CF7C                            ; ---------------------------------------------------------------------------
0000CF7C                            ; Object 7F - chaos emeralds from the special stage results screen
0000CF7C                            ; ---------------------------------------------------------------------------
0000CF7C                            
0000CF7C                            Obj7F:					; XREF: Obj_Index
0000CF7C 7000                       		moveq	#0,d0
0000CF7E 1028 0024                  		move.b	$24(a0),d0
0000CF82 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000CF86 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000CF8A                            ; ===========================================================================
0000CF8A 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000CF8C 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000CF8E                            
0000CF8E                            ; ---------------------------------------------------------------------------
0000CF8E                            ; X-axis positions for chaos emeralds
0000CF8E                            ; ---------------------------------------------------------------------------
0000CF8E 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000CF9A                            ; ===========================================================================
0000CF9A                            
0000CF9A                            Obj7F_Main:				; XREF: Obj7F_Index
0000CF9A 2248                       		movea.l	a0,a1
0000CF9C 45F9 0000 CF8E             		lea	(Obj7F_PosData).l,a2
0000CFA2 7400                       		moveq	#0,d2
0000CFA4 7200                       		moveq	#0,d1
0000CFA6 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000CFAA 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000CFAC 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000CFB0                            
0000CFB0                            Obj7F_Loop:
0000CFB0 12BC 007F                  		move.b	#$7F,0(a1)
0000CFB4 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000CFB8 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000CFBE 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000CFC2 1633 2000                  		move.b	(a3,d2.w),d3
0000CFC6 1343 001A                  		move.b	d3,$1A(a1)
0000CFCA 1343 001C                  		move.b	d3,$1C(a1)
0000CFCE 5202                       		addq.b	#1,d2
0000CFD0 5429 0024                  		addq.b	#2,$24(a1)
0000CFD4 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000CFDC 337C 8541 0002             		move.w	#$8541,2(a1)
0000CFE2 137C 0000 0001             		move.b	#0,1(a1)
0000CFE8 43E9 0040                  		lea	$40(a1),a1	; next object
0000CFEC 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000CFF0                            
0000CFF0                            Obj7F_Flash:				; XREF: Obj7F_Index
0000CFF0 1028 001A                  		move.b	$1A(a0),d0
0000CFF4 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000CFFA 0C00 0006                  		cmpi.b	#6,d0
0000CFFE 6600                       		bne.s	Obj7F_Display
0000D000 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D006                            
0000D006                            Obj7F_Display:
0000D006 6000 0000                  		bra.w	DisplaySprite
0000D00A                            ; ===========================================================================
0000D00A                            ; ---------------------------------------------------------------------------
0000D00A                            ; Sprite mappings - zone title cards
0000D00A                            ; ---------------------------------------------------------------------------
0000D00A 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000D00C 0000                       		dc.w byte_CA2C-Map_obj34
0000D00E 0000                       		dc.w byte_CA5A-Map_obj34
0000D010 0000                       		dc.w byte_CA7A-Map_obj34
0000D012 0000                       		dc.w byte_CAA8-Map_obj34
0000D014 0000                       		dc.w byte_CADC-Map_obj34
0000D016 0000                       		dc.w byte_CB10-Map_obj34
0000D018 0000                       		dc.w byte_CB26-Map_obj34
0000D01A 0000                       		dc.w byte_CB31-Map_obj34
0000D01C 0000                       		dc.w byte_CB3C-Map_obj34
0000D01E 0000                       		dc.w byte_CB47-Map_obj34
0000D020 0000                       		dc.w byte_CB8A-Map_obj34
0000D022 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000D023 F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000D028 F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000D02D F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000D032 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000D037 F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000D03C F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000D041 F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000D046 F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000D04B F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000D050 F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000D055 F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000D05A F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000D05F 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000D060 F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000D065 F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000D06A F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000D06F F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000D074 F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000D079 F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000D07E F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D083 F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000D088 F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000D08D F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000D092 F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000D097 F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000D09C F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000D0A1 F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000D0A6 F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000D0AB F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000D0B0 F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000D0B5 F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000D0BA F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000D0BF F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000D0C4 F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000D0C9 F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000D0CE 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000D0CF F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000D0D4 F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000D0D9 F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000D0DE F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000D0E3 F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000D0E8 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000D0E9 F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000D0EE F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000D0F3 F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000D0F8 F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000D0FD F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000D102 F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000D107 F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000D10C F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000D111 F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000D116 F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000D11B F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000D120 F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000D125 F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000D12A F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000D12F F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000D134 F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000D139 F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000D13E 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000D13F F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000D144 F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000D149 F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000D14E F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D153 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000D158 F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000D15D F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000D162 F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000D167 F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000D16C F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000D171 F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000D176 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000D17B F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000D180 F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000D185 F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000D18A F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000D18F F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000D194 F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000D199 F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000D19E F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000D1A3 F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000D1A8 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000D1A9 F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000D1AE F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000D1B3 F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000D1B8 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D1BD F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000D1C2 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D1C7 F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000D1CC 04                         byte_CB10:	dc.b 4			; ZONE
0000D1CD F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D1D2 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D1D7 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D1DC F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D1E1 00                         		dc.b 0
0000D1E2 02                         byte_CB26:	dc.b 2			; ACT 1
0000D1E3 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D1E8 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D1ED 02                         byte_CB31:	dc.b 2			; ACT 2
0000D1EE 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D1F3 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D1F8 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D1F9 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D1FE F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D203 0D                         byte_CB47:	dc.b $D			; Oval
0000D204 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D209 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D20E EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D213 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D218 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D21D 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D222 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D227 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D22C EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D231 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D236 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D23B 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D240 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D245 00                         		dc.b 0
0000D246 05                         byte_CB8A:	dc.b 5			; FINAL
0000D247 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D24C F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D251 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D256 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D25B F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D260                            		even
0000D260                            ; ---------------------------------------------------------------------------
0000D260                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D260                            ; ---------------------------------------------------------------------------
0000D260                            Map_obj39:
0000D260                            	include "_maps\obj39.asm"
0000D260                            ; ---------------------------------------------------------------------------
0000D260                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D260                            ; ---------------------------------------------------------------------------
0000D260 0000                       		dc.w byte_CBAC-Map_obj39
0000D262 0000                       		dc.w byte_CBB7-Map_obj39
0000D264 0000                       		dc.w byte_CBC2-Map_obj39
0000D266 0000                       		dc.w byte_CBCD-Map_obj39
0000D268 02                         byte_CBAC:	dc.b 2
0000D269 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D26E F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D273 02                         byte_CBB7:	dc.b 2
0000D274 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D279 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D27E 02                         byte_CBC2:	dc.b 2
0000D27F F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D284 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D289 02                         byte_CBCD:	dc.b 2
0000D28A F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D28F F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D294                            		even
0000D294                            		even
0000D294                            
0000D294                            ; ---------------------------------------------------------------------------
0000D294                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D294                            ; ---------------------------------------------------------------------------
0000D294 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D296 0000                       		dc.w byte_CC13-Map_obj3A
0000D298 0000                       		dc.w byte_CC32-Map_obj3A
0000D29A 0000                       		dc.w byte_CC51-Map_obj3A
0000D29C 0000                       		dc.w byte_CC75-Map_obj3A
0000D29E FF6F                       		dc.w byte_CB47-Map_obj3A
0000D2A0 FF4E                       		dc.w byte_CB26-Map_obj3A
0000D2A2 FF59                       		dc.w byte_CB31-Map_obj3A
0000D2A4 FF64                       		dc.w byte_CB3C-Map_obj3A
0000D2A6 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D2A7 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D2AC F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D2B1 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D2B6 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D2BB F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D2C0 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D2C5 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D2CA F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D2CF F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D2D4 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D2D9 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D2DE F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D2E3 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D2E8 F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D2ED F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D2F2 06                         byte_CC13:	dc.b 6			; PASSED
0000D2F3 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D2F8 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D2FD F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D302 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D307 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D30C F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D311 06                         byte_CC32:	dc.b 6			; SCORE
0000D312 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D317 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D31C F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D321 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D326 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D32B FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D330 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D331 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D336 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D33B F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D340 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D345 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D34A F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D34F F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D354 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D355 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D35A F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D35F F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D364 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D369 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D36E F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D373 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D378                            		even
0000D378                            ; ---------------------------------------------------------------------------
0000D378                            ; Sprite mappings - special stage results screen
0000D378                            ; ---------------------------------------------------------------------------
0000D378 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D37A 0000                       		dc.w byte_CCEE-Map_obj7E
0000D37C 0000                       		dc.w byte_CD0D-Map_obj7E
0000D37E FE8B                       		dc.w byte_CB47-Map_obj7E
0000D380 0000                       		dc.w byte_CD31-Map_obj7E
0000D382 0000                       		dc.w byte_CD46-Map_obj7E
0000D384 0000                       		dc.w byte_CD5B-Map_obj7E
0000D386 0000                       		dc.w byte_CD6B-Map_obj7E
0000D388 0000                       		dc.w byte_CDA8-Map_obj7E
0000D38A 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D38B F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D390 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D395 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D39A F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D39F F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D3A4 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D3A9 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D3AE F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D3B3 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D3B8 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D3BD F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D3C2 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D3C7 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D3CC 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D3CD F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D3D2 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D3D7 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D3DC F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D3E1 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D3E6 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D3EB 07                         byte_CD0D:	dc.b 7
0000D3EC F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D3F1 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D3F6 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D3FB F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D400 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D405 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D40A F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D40F 04                         byte_CD31:	dc.b 4
0000D410 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D415 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D41A F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D41F F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D424 04                         byte_CD46:	dc.b 4
0000D425 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D42A F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D42F F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D434 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D439 03                         byte_CD5B:	dc.b 3
0000D43A F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D43F F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D444 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D449 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D44A F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D44F F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D454 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D459 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D45E F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D463 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D468 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D46D F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D472 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D477 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D47C F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D481 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D486 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D487 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D48C F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D491 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D496 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D49B F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D4A0 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D4A5 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D4AA F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D4AF F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D4B4 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D4B9 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D4BE F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D4C3 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D4C8 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D4CD F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D4D2                            		even
0000D4D2                            ; ---------------------------------------------------------------------------
0000D4D2                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D4D2                            ; ---------------------------------------------------------------------------
0000D4D2                            Map_obj7F:
0000D4D2                            	include "_maps\obj7F.asm"
0000D4D2                            ; ---------------------------------------------------------------------------
0000D4D2                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D4D2                            ; ---------------------------------------------------------------------------
0000D4D2 0000                       		dc.w byte_CE02-Map_obj7F
0000D4D4 0000                       		dc.w byte_CE08-Map_obj7F
0000D4D6 0000                       		dc.w byte_CE0E-Map_obj7F
0000D4D8 0000                       		dc.w byte_CE14-Map_obj7F
0000D4DA 0000                       		dc.w byte_CE1A-Map_obj7F
0000D4DC 0000                       		dc.w byte_CE20-Map_obj7F
0000D4DE 0000                       		dc.w byte_CE26-Map_obj7F
0000D4E0 01                         byte_CE02:	dc.b 1
0000D4E1 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D4E6 01                         byte_CE08:	dc.b 1
0000D4E7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D4EC 01                         byte_CE0E:	dc.b 1
0000D4ED F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D4F2 01                         byte_CE14:	dc.b 1
0000D4F3 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D4F8 01                         byte_CE1A:	dc.b 1
0000D4F9 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D4FE 01                         byte_CE20:	dc.b 1
0000D4FF F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D504 00                         byte_CE26:	dc.b 0			; Blank frame
0000D506 00                         		even
0000D506 00                         		even
0000D506                            
0000D506                            ; ===========================================================================
0000D506                            ; ---------------------------------------------------------------------------
0000D506                            ; Object 36 - spikes
0000D506                            ; ---------------------------------------------------------------------------
0000D506                            
0000D506                            Obj36:					; XREF: Obj_Index
0000D506 7000                       		moveq	#0,d0
0000D508 1028 0024                  		move.b	$24(a0),d0
0000D50C 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D510 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D514                            ; ===========================================================================
0000D514 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D516 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D518                            
0000D518 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D51A 0110                       		dc.b 1,	$10
0000D51C 0204                       		dc.b 2,	4
0000D51E 031C                       		dc.b 3,	$1C
0000D520 0440                       		dc.b 4,	$40
0000D522 0510                       		dc.b 5,	$10
0000D524                            ; ===========================================================================
0000D524                            
0000D524                            Obj36_Main:				; XREF: Obj36_Index
0000D524 5428 0024                  		addq.b	#2,$24(a0)
0000D528 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D530 317C 051B 0002             		move.w	#$51B,2(a0)
0000D536 0028 0004 0001             		ori.b	#4,1(a0)
0000D53C 117C 0004 0018             		move.b	#4,$18(a0)
0000D542 1028 0028                  		move.b	$28(a0),d0
0000D546 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D54C 0240 00F0                  		andi.w	#$F0,d0
0000D550 43F9 0000 D518             		lea	(Obj36_Var).l,a1
0000D556 E648                       		lsr.w	#3,d0
0000D558 D2C0                       		adda.w	d0,a1
0000D55A 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D55E 1159 0019                  		move.b	(a1)+,$19(a0)
0000D562 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D568 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D56E                            
0000D56E                            Obj36_Solid:				; XREF: Obj36_Index
0000D56E 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D572 343C 0004                  		move.w	#4,d2
0000D576 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D57C 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D57E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D584 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D586 343C 0014                  		move.w	#$14,d2
0000D58A                            
0000D58A                            ; Spikes types $1x and $5x face	sideways
0000D58A                            
0000D58A                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D58A 323C 001B                  		move.w	#$1B,d1
0000D58E 3602                       		move.w	d2,d3
0000D590 5243                       		addq.w	#1,d3
0000D592 3828 0008                  		move.w	8(a0),d4
0000D596 6100 0000                  		bsr.w	SolidObject
0000D59A 0828 0003 0022             		btst	#3,$22(a0)
0000D5A0 6600                       		bne.s	Obj36_Display
0000D5A2 0C44 0001                  		cmpi.w	#1,d4
0000D5A6 6700                       		beq.s	Obj36_Hurt
0000D5A8 6000                       		bra.s	Obj36_Display
0000D5AA                            ; ===========================================================================
0000D5AA                            
0000D5AA                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D5AA                            
0000D5AA                            Obj36_Upright:				; XREF: Obj36_Solid
0000D5AA 7200                       		moveq	#0,d1
0000D5AC 1228 0019                  		move.b	$19(a0),d1
0000D5B0 0641 000B                  		addi.w	#$B,d1
0000D5B4 343C 0010                  		move.w	#$10,d2
0000D5B8 363C 0011                  		move.w	#$11,d3
0000D5BC 3828 0008                  		move.w	8(a0),d4
0000D5C0 6100 0000                  		bsr.w	SolidObject
0000D5C4 0828 0003 0022             		btst	#3,$22(a0)
0000D5CA 6600                       		bne.s	Obj36_Hurt
0000D5CC 4A44                       		tst.w	d4
0000D5CE 6A00                       		bpl.s	Obj36_Display
0000D5D0                            
0000D5D0                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D5D0 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D5D4 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D5D6 2F08                       		move.l	a0,-(sp)
0000D5D8 2448                       		movea.l	a0,a2
0000D5DA 41F8 D000                  		lea	($FFFFD000).w,a0
0000D5DE 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D5E4 6400                       		bcc.s	loc_CF20
0000D5E6 2628 000C                  		move.l	$C(a0),d3
0000D5EA 3028 0012                  		move.w	$12(a0),d0
0000D5EE 48C0                       		ext.l	d0
0000D5F0 E180                       		asl.l	#8,d0
0000D5F2 9680                       		sub.l	d0,d3
0000D5F4 2143 000C                  		move.l	d3,$C(a0)
0000D5F8 4EB9 0000 0000             		jsr	HurtSonic
0000D5FE                            
0000D5FE                            loc_CF20:
0000D5FE 205F                       		movea.l	(sp)+,a0
0000D600                            
0000D600                            Obj36_Display:
0000D600 6100 0000                  		bsr.w	DisplaySprite
0000D604 3028 0030                  		move.w	$30(a0),d0
0000D608 0240 FF80                  		andi.w	#$FF80,d0
0000D60C 3238 F700                  		move.w	($FFFFF700).w,d1
0000D610 0441 0080                  		subi.w	#$80,d1
0000D614 0241 FF80                  		andi.w	#$FF80,d1
0000D618 9041                       		sub.w	d1,d0
0000D61A 0C40 0280                  		cmpi.w	#$280,d0
0000D61E 6200 0000                  		bhi.w	DeleteObject
0000D622 4E75                       		rts	
0000D624                            ; ===========================================================================
0000D624                            
0000D624                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D624 7000                       		moveq	#0,d0
0000D626 1028 0028                  		move.b	$28(a0),d0
0000D62A D040                       		add.w	d0,d0
0000D62C 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D630 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D634                            ; ===========================================================================
0000D634 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D636 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D638 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D63A                            ; ===========================================================================
0000D63A                            
0000D63A                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D63A 4E75                       		rts			; don't move the object
0000D63C                            ; ===========================================================================
0000D63C                            
0000D63C                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D63C 6100 0000                  		bsr.w	Obj36_Wait
0000D640 7000                       		moveq	#0,d0
0000D642 1028 0034                  		move.b	$34(a0),d0
0000D646 D068 0032                  		add.w	$32(a0),d0
0000D64A 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D64E 4E75                       		rts	
0000D650                            ; ===========================================================================
0000D650                            
0000D650                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D650 6100 0000                  		bsr.w	Obj36_Wait
0000D654 7000                       		moveq	#0,d0
0000D656 1028 0034                  		move.b	$34(a0),d0
0000D65A D068 0030                  		add.w	$30(a0),d0
0000D65E 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D662 4E75                       		rts	
0000D664                            ; ===========================================================================
0000D664                            
0000D664                            Obj36_Wait:
0000D664 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D668 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D66A 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D66E 6600                       		bne.s	locret_CFE6
0000D670 4A28 0001                  		tst.b	1(a0)
0000D674 6A00                       		bpl.s	locret_CFE6
0000D676 303C 00B6                  		move.w	#$B6,d0
0000D67A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D680 6000                       		bra.s	locret_CFE6
0000D682                            ; ===========================================================================
0000D682                            
0000D682                            loc_CFA4:
0000D682 4A68 0036                  		tst.w	$36(a0)
0000D686 6700                       		beq.s	loc_CFC6
0000D688 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D68E 6400                       		bcc.s	locret_CFE6
0000D690 317C 0000 0034             		move.w	#0,$34(a0)
0000D696 317C 0000 0036             		move.w	#0,$36(a0)
0000D69C 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D6A2 6000                       		bra.s	locret_CFE6
0000D6A4                            ; ===========================================================================
0000D6A4                            
0000D6A4                            loc_CFC6:
0000D6A4 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D6AA 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D6B0 6500                       		bcs.s	locret_CFE6
0000D6B2 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D6B8 317C 0001 0036             		move.w	#1,$36(a0)
0000D6BE 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D6C4                            
0000D6C4                            locret_CFE6:
0000D6C4 4E75                       		rts	
0000D6C6                            ; ===========================================================================
0000D6C6                            ; ---------------------------------------------------------------------------
0000D6C6                            ; Sprite mappings - spikes
0000D6C6                            ; ---------------------------------------------------------------------------
0000D6C6                            Map_obj36:
0000D6C6                            	include "_maps\obj36.asm"
0000D6C6                            ; ---------------------------------------------------------------------------
0000D6C6                            ; Sprite mappings - spikes
0000D6C6                            ; ---------------------------------------------------------------------------
0000D6C6 0000                       		dc.w byte_CFF4-Map_obj36
0000D6C8 0000                       		dc.w byte_D004-Map_obj36
0000D6CA 0000                       		dc.w byte_D014-Map_obj36
0000D6CC 0000                       		dc.w byte_D01A-Map_obj36
0000D6CE 0000                       		dc.w byte_D02A-Map_obj36
0000D6D0 0000                       		dc.w byte_D049-Map_obj36
0000D6D2 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D6D3 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D6D8 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D6DD F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D6E2 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D6E3 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D6E8 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D6ED 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D6F2 01                         byte_D014:	dc.b 1			; 1 spike
0000D6F3 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D6F8 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D6F9 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D6FE F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D703 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D708 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D709 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D70E F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D713 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D718 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D71D F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D722 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D727 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D728 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D72E 00                         		even
0000D72E 00                         		even
0000D72E                            
0000D72E                            ; ===========================================================================
0000D72E                            ; ---------------------------------------------------------------------------
0000D72E                            ; Object 3B - purple rock (GHZ)
0000D72E                            ; ---------------------------------------------------------------------------
0000D72E                            
0000D72E                            Obj3B:					; XREF: Obj_Index
0000D72E 7000                       		moveq	#0,d0
0000D730 1028 0024                  		move.b	$24(a0),d0
0000D734 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D738 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D73C                            ; ===========================================================================
0000D73C 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D73E 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D740                            ; ===========================================================================
0000D740                            
0000D740                            Obj3B_Main:				; XREF: Obj3B_Index
0000D740 5428 0024                  		addq.b	#2,$24(a0)
0000D744 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D74C 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D752 117C 0004 0001             		move.b	#4,1(a0)
0000D758 117C 0013 0019             		move.b	#$13,$19(a0)
0000D75E 117C 0004 0018             		move.b	#4,$18(a0)
0000D764                            
0000D764                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D764 323C 001B                  		move.w	#$1B,d1
0000D768 343C 0010                  		move.w	#$10,d2
0000D76C 363C 0010                  		move.w	#$10,d3
0000D770 3828 0008                  		move.w	8(a0),d4
0000D774 6100 0000                  		bsr.w	SolidObject
0000D778 6100 0000                  		bsr.w	DisplaySprite
0000D77C 3028 0008                  		move.w	8(a0),d0
0000D780 0240 FF80                  		andi.w	#$FF80,d0
0000D784 3238 F700                  		move.w	($FFFFF700).w,d1
0000D788 0441 0080                  		subi.w	#$80,d1
0000D78C 0241 FF80                  		andi.w	#$FF80,d1
0000D790 9041                       		sub.w	d1,d0
0000D792 0C40 0280                  		cmpi.w	#$280,d0
0000D796 6200 0000                  		bhi.w	DeleteObject
0000D79A 4E75                       		rts	
0000D79C                            ; ===========================================================================
0000D79C                            ; ---------------------------------------------------------------------------
0000D79C                            ; Object 49 - waterfall	sound effect (GHZ)
0000D79C                            ; ---------------------------------------------------------------------------
0000D79C                            
0000D79C                            Obj49:					; XREF: Obj_Index
0000D79C 7000                       		moveq	#0,d0
0000D79E 1028 0024                  		move.b	$24(a0),d0
0000D7A2 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D7A6 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D7AA                            ; ===========================================================================
0000D7AA 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D7AC 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D7AE                            ; ===========================================================================
0000D7AE                            
0000D7AE                            Obj49_Main:				; XREF: Obj49_Index
0000D7AE 5428 0024                  		addq.b	#2,$24(a0)
0000D7B2 117C 0004 0001             		move.b	#4,1(a0)
0000D7B8                            
0000D7B8                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D7B8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D7BC 0200 003F                  		andi.b	#$3F,d0
0000D7C0 6600                       		bne.s	Obj49_ChkDel
0000D7C2 303C 00D0                  		move.w	#$D0,d0
0000D7C6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D7CC                            
0000D7CC                            Obj49_ChkDel:
0000D7CC 3028 0008                  		move.w	8(a0),d0
0000D7D0 0240 FF80                  		andi.w	#$FF80,d0
0000D7D4 3238 F700                  		move.w	($FFFFF700).w,d1
0000D7D8 0441 0080                  		subi.w	#$80,d1
0000D7DC 0241 FF80                  		andi.w	#$FF80,d1
0000D7E0 9041                       		sub.w	d1,d0
0000D7E2 0C40 0280                  		cmpi.w	#$280,d0
0000D7E6 6200 0000                  		bhi.w	DeleteObject
0000D7EA 4E75                       		rts	
0000D7EC                            ; ===========================================================================
0000D7EC                            ; ---------------------------------------------------------------------------
0000D7EC                            ; Sprite mappings - purple rock	(GHZ)
0000D7EC                            ; ---------------------------------------------------------------------------
0000D7EC                            Map_obj3B:
0000D7EC                            	include "_maps\obj3B.asm"
0000D7EC                            ; ---------------------------------------------------------------------------
0000D7EC                            ; Sprite mappings - purple rock	(GHZ)
0000D7EC                            ; ---------------------------------------------------------------------------
0000D7EC 0000                       		dc.w byte_D110-Map_obj3B
0000D7EE 02                         byte_D110:	dc.b 2
0000D7EF F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D7F4 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D7FA 00                         		even
0000D7FA 00                         		even
0000D7FA                            
0000D7FA                            ; ===========================================================================
0000D7FA                            ; ---------------------------------------------------------------------------
0000D7FA                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D7FA                            ; ---------------------------------------------------------------------------
0000D7FA                            
0000D7FA                            Obj3C:					; XREF: Obj_Index
0000D7FA 7000                       		moveq	#0,d0
0000D7FC 1028 0024                  		move.b	$24(a0),d0
0000D800 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D804 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D808 6000 0000                  		bra.w	MarkObjGone
0000D80C                            ; ===========================================================================
0000D80C 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D80E 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D810 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D812                            ; ===========================================================================
0000D812                            
0000D812                            Obj3C_Main:				; XREF: Obj3C_Index
0000D812 5428 0024                  		addq.b	#2,$24(a0)
0000D816 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D81E 317C 450F 0002             		move.w	#$450F,2(a0)
0000D824 117C 0004 0001             		move.b	#4,1(a0)
0000D82A 117C 0010 0019             		move.b	#$10,$19(a0)
0000D830 117C 0004 0018             		move.b	#4,$18(a0)
0000D836 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D83C                            
0000D83C                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D83C 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D842 323C 001B                  		move.w	#$1B,d1
0000D846 343C 0020                  		move.w	#$20,d2
0000D84A 363C 0020                  		move.w	#$20,d3
0000D84E 3828 0008                  		move.w	8(a0),d4
0000D852 6100 0000                  		bsr.w	SolidObject
0000D856 0828 0005 0022             		btst	#5,$22(a0)
0000D85C 6600                       		bne.s	Obj3C_ChkRoll
0000D85E                            
0000D85E                            locret_D180:
0000D85E 4E75                       		rts	
0000D860                            ; ===========================================================================
0000D860                            
0000D860                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D860 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D866 66F6                       		bne.s	locret_D180	; if not, branch
0000D868 3028 0030                  		move.w	$30(a0),d0
0000D86C 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D86E 4440                       		neg.w	d0
0000D870                            
0000D870                            Obj3C_ChkSpeed:
0000D870 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D874 65E8                       		bcs.s	locret_D180	; if not, branch
0000D876 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D87C 5869 0008                  		addq.w	#4,8(a1)
0000D880 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D886 3028 0008                  		move.w	8(a0),d0
0000D88A B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D88E 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D890 5169 0008                  		subq.w	#8,8(a1)
0000D894 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D89A                            
0000D89A                            Obj3C_Smash:
0000D89A 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D8A0 08A8 0005 0022             		bclr	#5,$22(a0)
0000D8A6 08A9 0005 0022             		bclr	#5,$22(a1)
0000D8AC 7207                       		moveq	#7,d1		; load 8 fragments
0000D8AE 343C 0070                  		move.w	#$70,d2
0000D8B2 6100                       		bsr.s	SmashObject
0000D8B4                            
0000D8B4                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D8B4 6100 0000                  		bsr.w	SpeedToPos
0000D8B8 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D8BE 6100 0000                  		bsr.w	DisplaySprite
0000D8C2 4A28 0001                  		tst.b	1(a0)
0000D8C6 6A00 0000                  		bpl.w	DeleteObject
0000D8CA 4E75                       		rts	
0000D8CC                            
0000D8CC                            ; ---------------------------------------------------------------------------
0000D8CC                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D8CC                            ; ---------------------------------------------------------------------------
0000D8CC                            
0000D8CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D8CC                            
0000D8CC                            
0000D8CC                            SmashObject:				; XREF: Obj3C_Smash
0000D8CC 7000                       		moveq	#0,d0
0000D8CE 1028 001A                  		move.b	$1A(a0),d0
0000D8D2 D040                       		add.w	d0,d0
0000D8D4 2668 0004                  		movea.l	4(a0),a3
0000D8D8 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D8DC 524B                       		addq.w	#1,a3
0000D8DE 08E8 0005 0001             		bset	#5,1(a0)
0000D8E4 1810                       		move.b	0(a0),d4
0000D8E6 1A28 0001                  		move.b	1(a0),d5
0000D8EA 2248                       		movea.l	a0,a1
0000D8EC 6000                       		bra.s	Smash_LoadFrag
0000D8EE                            ; ===========================================================================
0000D8EE                            
0000D8EE                            Smash_Loop:
0000D8EE 6100 0000                  		bsr.w	SingleObjLoad
0000D8F2 6600                       		bne.s	Smash_PlaySnd
0000D8F4 5A4B                       		addq.w	#5,a3
0000D8F6                            
0000D8F6                            Smash_LoadFrag:				; XREF: SmashObject
0000D8F6 137C 0004 0024             		move.b	#4,$24(a1)
0000D8FC 1284                       		move.b	d4,0(a1)
0000D8FE 234B 0004                  		move.l	a3,4(a1)
0000D902 1345 0001                  		move.b	d5,1(a1)
0000D906 3368 0008 0008             		move.w	8(a0),8(a1)
0000D90C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D912 3368 0002 0002             		move.w	2(a0),2(a1)
0000D918 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D91E 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D924 335C 0010                  		move.w	(a4)+,$10(a1)
0000D928 335C 0012                  		move.w	(a4)+,$12(a1)
0000D92C B3C8                       		cmpa.l	a0,a1
0000D92E 6400                       		bcc.s	loc_D268
0000D930 2F08                       		move.l	a0,-(sp)
0000D932 2049                       		movea.l	a1,a0
0000D934 6100 0000                  		bsr.w	SpeedToPos
0000D938 D568 0012                  		add.w	d2,$12(a0)
0000D93C 205F                       		movea.l	(sp)+,a0
0000D93E 6100 0000                  		bsr.w	DisplaySprite2
0000D942                            
0000D942                            loc_D268:
0000D942 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D946                            
0000D946                            Smash_PlaySnd:
0000D946 303C 00CB                  		move.w	#$CB,d0
0000D94A 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D950                            ; End of function SmashObject
0000D950                            
0000D950                            ; ===========================================================================
0000D950                            ; Smashed block	fragment speeds
0000D950                            ;
0000D950 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D954 0600 FF00                  		dc.w $600, $FF00
0000D958 0600 0100                  		dc.w $600, $100
0000D95C 0400 0500                  		dc.w $400, $500
0000D960 0600 FA00                  		dc.w $600, $FA00
0000D964 0800 FE00                  		dc.w $800, $FE00
0000D968 0800 0200                  		dc.w $800, $200
0000D96C 0600 0600                  		dc.w $600, $600
0000D970                            
0000D970 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D974 F800 FE00                  		dc.w $F800, $FE00
0000D978 F800 0200                  		dc.w $F800, $200
0000D97C FA00 0600                  		dc.w $FA00, $600
0000D980 FC00 FB00                  		dc.w $FC00, $FB00
0000D984 FA00 FF00                  		dc.w $FA00, $FF00
0000D988 FA00 0100                  		dc.w $FA00, $100
0000D98C FC00 0500                  		dc.w $FC00, $500
0000D990                            ; ---------------------------------------------------------------------------
0000D990                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D990                            ; ---------------------------------------------------------------------------
0000D990                            Map_obj3C:
0000D990                            	include "_maps\obj3C.asm"
0000D990                            ; ---------------------------------------------------------------------------
0000D990                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D990                            ; ---------------------------------------------------------------------------
0000D990 0000                       		dc.w byte_D2BC-Map_obj3C
0000D992 0000                       		dc.w byte_D2E5-Map_obj3C
0000D994 0000                       		dc.w byte_D30E-Map_obj3C
0000D996 08                         byte_D2BC:	dc.b 8
0000D997 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000D99C F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000D9A1 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000D9A6 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000D9AB E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D9B0 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D9B5 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D9BA 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D9BF 08                         byte_D2E5:	dc.b 8
0000D9C0 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D9C5 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D9CA 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D9CF 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D9D4 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D9D9 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D9DE 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D9E3 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D9E8 08                         byte_D30E:	dc.b 8
0000D9E9 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D9EE F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D9F3 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D9F8 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D9FD E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DA02 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DA07 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DA0C 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DA12 00                         		even
0000DA12 00                         		even
0000DA12                            
0000DA12                            ; ---------------------------------------------------------------------------
0000DA12                            ; Object code loading subroutine
0000DA12                            ; ---------------------------------------------------------------------------
0000DA12                            
0000DA12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA12                            
0000DA12                            
0000DA12                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DA12 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DA16 7E7F                       		moveq	#$7F,d7
0000DA18 7000                       		moveq	#0,d0
0000DA1A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DA20 6400                       		bcc.s	loc_D362
0000DA22                            
0000DA22                            loc_D348:
0000DA22 1010                       		move.b	(a0),d0		; load object number from RAM
0000DA24 6700                       		beq.s	loc_D358
0000DA26 D040                       		add.w	d0,d0
0000DA28 D040                       		add.w	d0,d0
0000DA2A 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DA2E 4E91                       		jsr	(a1)		; run the object's code
0000DA30 7000                       		moveq	#0,d0
0000DA32                            
0000DA32                            loc_D358:
0000DA32 41E8 0040                  		lea	$40(a0),a0	; next object
0000DA36 51CF FFEA                  		dbf	d7,loc_D348
0000DA3A 4E75                       		rts	
0000DA3C                            ; ===========================================================================
0000DA3C                            
0000DA3C                            loc_D362:
0000DA3C 7E1F                       		moveq	#$1F,d7
0000DA3E 61E2                       		bsr.s	loc_D348
0000DA40 7E5F                       		moveq	#$5F,d7
0000DA42                            
0000DA42                            loc_D368:
0000DA42 7000                       		moveq	#0,d0
0000DA44 1010                       		move.b	(a0),d0
0000DA46 6700                       		beq.s	loc_D378
0000DA48 4A28 0001                  		tst.b	1(a0)
0000DA4C 6A00                       		bpl.s	loc_D378
0000DA4E 6100 0000                  		bsr.w	DisplaySprite
0000DA52                            
0000DA52                            loc_D378:
0000DA52 41E8 0040                  		lea	$40(a0),a0
0000DA56                            
0000DA56                            loc_D37C:
0000DA56 51CF FFEA                  		dbf	d7,loc_D368
0000DA5A 4E75                       		rts	
0000DA5C                            ; End of function ObjectsLoad
0000DA5C                            
0000DA5C                            ; ===========================================================================
0000DA5C                            ; ---------------------------------------------------------------------------
0000DA5C                            ; Object pointers
0000DA5C                            ; ---------------------------------------------------------------------------
0000DA5C                            Obj_Index:
0000DA5C                            	include "_inc\Object pointers.asm"
0000DA5C                            ; ---------------------------------------------------------------------------
0000DA5C                            ; Object pointers
0000DA5C                            ; ---------------------------------------------------------------------------
0000DA5C 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DA6C 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DA7C 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DA8C 0000 0000 0000 ACA2 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DA9C 0000 78DA 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DAAC 0000 7F00 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DABC 0000 874E 0000 87B6 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DACC 0000 8E00 0000 90EE 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DADC 0000 0000 0000 9D9E 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DAEC 0000 A0D6 0000 A6C2 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DAFC 0000 99FA 0000 8ED6 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DB0C 0000 B29A 0000 A8B6 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DB1C 0000 BCAE 0000 C35C 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DB2C 0000 B80C 0000 D506 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DB3C 0000 CAE2 0000 CB9C 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DB4C 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DB5C 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DB6C 0000 BFCA 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DB7C 0000 D79C 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DB8C 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DB9C 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DBAC 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DBBC 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DBCC 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DBDC 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DBEC 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DBFC 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DC0C 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DC1C 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DC2C 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DC3C 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DC4C 0000 0000 0000 CDD6 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DC5C 0000 53F2 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DC6C 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DC7C 0000 5AAC 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DC7C 0000 5AAC 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DC8C                            
0000DC8C                            ; ---------------------------------------------------------------------------
0000DC8C                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DC8C                            ; ---------------------------------------------------------------------------
0000DC8C                            
0000DC8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC8C                            
0000DC8C                            
0000DC8C                            ObjectFall:
0000DC8C 2428 0008                  		move.l	8(a0),d2
0000DC90 2628 000C                  		move.l	$C(a0),d3
0000DC94 3028 0010                  		move.w	$10(a0),d0
0000DC98 48C0                       		ext.l	d0
0000DC9A E180                       		asl.l	#8,d0
0000DC9C D480                       		add.l	d0,d2
0000DC9E 3028 0012                  		move.w	$12(a0),d0
0000DCA2 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DCA8 48C0                       		ext.l	d0
0000DCAA E180                       		asl.l	#8,d0
0000DCAC D680                       		add.l	d0,d3
0000DCAE 2142 0008                  		move.l	d2,8(a0)
0000DCB2 2143 000C                  		move.l	d3,$C(a0)
0000DCB6 4E75                       		rts	
0000DCB8                            ; End of function ObjectFall
0000DCB8                            
0000DCB8                            ; ---------------------------------------------------------------------------
0000DCB8                            ; Subroutine translating object	speed to update	object position
0000DCB8                            ; ---------------------------------------------------------------------------
0000DCB8                            
0000DCB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCB8                            
0000DCB8                            
0000DCB8                            SpeedToPos:
0000DCB8 2428 0008                  		move.l	8(a0),d2
0000DCBC 2628 000C                  		move.l	$C(a0),d3
0000DCC0 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DCC4 48C0                       		ext.l	d0
0000DCC6 E180                       		asl.l	#8,d0		; multiply speed by $100
0000DCC8 D480                       		add.l	d0,d2		; add to x-axis	position
0000DCCA 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DCCE 48C0                       		ext.l	d0
0000DCD0 E180                       		asl.l	#8,d0		; multiply by $100
0000DCD2 D680                       		add.l	d0,d3		; add to y-axis	position
0000DCD4 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DCD8 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DCDC 4E75                       		rts	
0000DCDE                            ; End of function SpeedToPos
0000DCDE                            
0000DCDE                            ; ---------------------------------------------------------------------------
0000DCDE                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DCDE                            ; ---------------------------------------------------------------------------
0000DCDE                            
0000DCDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCDE                            
0000DCDE                            
0000DCDE                            DisplaySprite:
0000DCDE 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DCE2 3028 0018                  		move.w	$18(a0),d0
0000DCE6 E248                       		lsr.w	#1,d0
0000DCE8 0240 0380                  		andi.w	#$380,d0
0000DCEC D2C0                       		adda.w	d0,a1
0000DCEE 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DCF2 6400                       		bcc.s	locret_D620
0000DCF4 5451                       		addq.w	#2,(a1)
0000DCF6 D2D1                       		adda.w	(a1),a1
0000DCF8 3288                       		move.w	a0,(a1)
0000DCFA                            
0000DCFA                            locret_D620:
0000DCFA 4E75                       		rts	
0000DCFC                            ; End of function DisplaySprite
0000DCFC                            
0000DCFC                            ; ---------------------------------------------------------------------------
0000DCFC                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DCFC                            ; ---------------------------------------------------------------------------
0000DCFC                            
0000DCFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCFC                            
0000DCFC                            
0000DCFC                            DisplaySprite2:
0000DCFC 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DD00 3029 0018                  		move.w	$18(a1),d0
0000DD04 E248                       		lsr.w	#1,d0
0000DD06 0240 0380                  		andi.w	#$380,d0
0000DD0A D4C0                       		adda.w	d0,a2
0000DD0C 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DD10 6400                       		bcc.s	locret_D63E
0000DD12 5452                       		addq.w	#2,(a2)
0000DD14 D4D2                       		adda.w	(a2),a2
0000DD16 3489                       		move.w	a1,(a2)
0000DD18                            
0000DD18                            locret_D63E:
0000DD18 4E75                       		rts	
0000DD1A                            ; End of function DisplaySprite2
0000DD1A                            
0000DD1A                            ; ---------------------------------------------------------------------------
0000DD1A                            ; Subroutine to	delete an object
0000DD1A                            ; ---------------------------------------------------------------------------
0000DD1A                            
0000DD1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD1A                            
0000DD1A                            
0000DD1A                            DeleteObject:
0000DD1A 2248                       		movea.l	a0,a1
0000DD1C                            
0000DD1C                            DeleteObject2:
0000DD1C 7200                       		moveq	#0,d1
0000DD1E 700F                       		moveq	#$F,d0
0000DD20                            
0000DD20                            loc_D646:
0000DD20 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DD22 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DD26 4E75                       		rts	
0000DD28                            ; End of function DeleteObject
0000DD28                            
0000DD28                            ; ===========================================================================
0000DD28 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DD2C 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DD30 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DD34 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DD38                            ; ---------------------------------------------------------------------------
0000DD38                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DD38                            ; ---------------------------------------------------------------------------
0000DD38                            
0000DD38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD38                            
0000DD38                            
0000DD38                            BuildSprites:				; XREF: TitleScreen; et al
0000DD38 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DD3C 7A00                       		moveq	#0,d5
0000DD3E 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DD42 7E07                       		moveq	#7,d7
0000DD44                            
0000DD44                            loc_D66A:
0000DD44 4A54                       		tst.w	(a4)
0000DD46 6700 0000                  		beq.w	loc_D72E
0000DD4A 7C02                       		moveq	#2,d6
0000DD4C                            
0000DD4C                            loc_D672:
0000DD4C 3074 6000                  		movea.w	(a4,d6.w),a0
0000DD50 4A10                       		tst.b	(a0)
0000DD52 6700 0000                  		beq.w	loc_D726
0000DD56 08A8 0007 0001             		bclr	#7,1(a0)
0000DD5C 1028 0001                  		move.b	1(a0),d0
0000DD60 1800                       		move.b	d0,d4
0000DD62 0240 000C                  		andi.w	#$C,d0
0000DD66 6700                       		beq.s	loc_D6DE
0000DD68 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DD6C 7000                       		moveq	#0,d0
0000DD6E 1028 0019                  		move.b	$19(a0),d0
0000DD72 3628 0008                  		move.w	8(a0),d3
0000DD76 9651                       		sub.w	(a1),d3
0000DD78 3203                       		move.w	d3,d1
0000DD7A D240                       		add.w	d0,d1
0000DD7C 6B00 0000                  		bmi.w	loc_D726
0000DD80 3203                       		move.w	d3,d1
0000DD82 9240                       		sub.w	d0,d1
0000DD84 0C41 0140                  		cmpi.w	#$140,d1
0000DD88 6C00                       		bge.s	loc_D726
0000DD8A 0643 0080                  		addi.w	#$80,d3
0000DD8E 0804 0004                  		btst	#4,d4
0000DD92 6700                       		beq.s	loc_D6E8
0000DD94 7000                       		moveq	#0,d0
0000DD96 1028 0016                  		move.b	$16(a0),d0
0000DD9A 3428 000C                  		move.w	$C(a0),d2
0000DD9E 9469 0004                  		sub.w	4(a1),d2
0000DDA2 3202                       		move.w	d2,d1
0000DDA4 D240                       		add.w	d0,d1
0000DDA6 6B00                       		bmi.s	loc_D726
0000DDA8 3202                       		move.w	d2,d1
0000DDAA 9240                       		sub.w	d0,d1
0000DDAC 0C41 00E0                  		cmpi.w	#$E0,d1
0000DDB0 6C00                       		bge.s	loc_D726
0000DDB2 0642 0080                  		addi.w	#$80,d2
0000DDB6 6000                       		bra.s	loc_D700
0000DDB8                            ; ===========================================================================
0000DDB8                            
0000DDB8                            loc_D6DE:
0000DDB8 3428 000A                  		move.w	$A(a0),d2
0000DDBC 3628 0008                  		move.w	8(a0),d3
0000DDC0 6000                       		bra.s	loc_D700
0000DDC2                            ; ===========================================================================
0000DDC2                            
0000DDC2                            loc_D6E8:
0000DDC2 3428 000C                  		move.w	$C(a0),d2
0000DDC6 9469 0004                  		sub.w	4(a1),d2
0000DDCA 0642 0080                  		addi.w	#$80,d2
0000DDCE 0C42 0060                  		cmpi.w	#$60,d2
0000DDD2 6500                       		bcs.s	loc_D726
0000DDD4 0C42 0180                  		cmpi.w	#$180,d2
0000DDD8 6400                       		bcc.s	loc_D726
0000DDDA                            
0000DDDA                            loc_D700:
0000DDDA 2268 0004                  		movea.l	4(a0),a1
0000DDDE 7200                       		moveq	#0,d1
0000DDE0 0804 0005                  		btst	#5,d4
0000DDE4 6600                       		bne.s	loc_D71C
0000DDE6 1228 001A                  		move.b	$1A(a0),d1
0000DDEA D201                       		add.b	d1,d1
0000DDEC D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DDF0 1219                       		move.b	(a1)+,d1
0000DDF2 5301                       		subq.b	#1,d1
0000DDF4 6B00                       		bmi.s	loc_D720
0000DDF6                            
0000DDF6                            loc_D71C:
0000DDF6 6100 0000                  		bsr.w	sub_D750
0000DDFA                            
0000DDFA                            loc_D720:
0000DDFA 08E8 0007 0001             		bset	#7,1(a0)
0000DE00                            
0000DE00                            loc_D726:
0000DE00 5446                       		addq.w	#2,d6
0000DE02 5554                       		subq.w	#2,(a4)
0000DE04 6600 FF46                  		bne.w	loc_D672
0000DE08                            
0000DE08                            loc_D72E:
0000DE08 49EC 0080                  		lea	$80(a4),a4
0000DE0C 51CF FF36                  		dbf	d7,loc_D66A
0000DE10 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DE14 0C05 0050                  		cmpi.b	#$50,d5
0000DE18 6700                       		beq.s	loc_D748
0000DE1A 24BC 0000 0000             		move.l	#0,(a2)
0000DE20 4E75                       		rts	
0000DE22                            ; ===========================================================================
0000DE22                            
0000DE22                            loc_D748:
0000DE22 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DE28 4E75                       		rts	
0000DE2A                            ; End of function BuildSprites
0000DE2A                            
0000DE2A                            
0000DE2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE2A                            
0000DE2A                            
0000DE2A                            sub_D750:				; XREF: BuildSprites
0000DE2A 3668 0002                  		movea.w	2(a0),a3
0000DE2E 0804 0000                  		btst	#0,d4
0000DE32 6600                       		bne.s	loc_D796
0000DE34 0804 0001                  		btst	#1,d4
0000DE38 6600 0000                  		bne.w	loc_D7E4
0000DE3C                            ; End of function sub_D750
0000DE3C                            
0000DE3C                            
0000DE3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE3C                            
0000DE3C                            
0000DE3C                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DE3C 0C05 0050                  		cmpi.b	#$50,d5
0000DE40 6700                       		beq.s	locret_D794
0000DE42 1019                       		move.b	(a1)+,d0
0000DE44 4880                       		ext.w	d0
0000DE46 D042                       		add.w	d2,d0
0000DE48 34C0                       		move.w	d0,(a2)+
0000DE4A 14D9                       		move.b	(a1)+,(a2)+
0000DE4C 5205                       		addq.b	#1,d5
0000DE4E 14C5                       		move.b	d5,(a2)+
0000DE50 1019                       		move.b	(a1)+,d0
0000DE52 E148                       		lsl.w	#8,d0
0000DE54 1019                       		move.b	(a1)+,d0
0000DE56 D04B                       		add.w	a3,d0
0000DE58 34C0                       		move.w	d0,(a2)+
0000DE5A 1019                       		move.b	(a1)+,d0
0000DE5C 4880                       		ext.w	d0
0000DE5E D043                       		add.w	d3,d0
0000DE60 0240 01FF                  		andi.w	#$1FF,d0
0000DE64 6600                       		bne.s	loc_D78E
0000DE66 5240                       		addq.w	#1,d0
0000DE68                            
0000DE68                            loc_D78E:
0000DE68 34C0                       		move.w	d0,(a2)+
0000DE6A 51C9 FFD0                  		dbf	d1,sub_D762
0000DE6E                            
0000DE6E                            locret_D794:
0000DE6E 4E75                       		rts	
0000DE70                            ; End of function sub_D762
0000DE70                            
0000DE70                            ; ===========================================================================
0000DE70                            
0000DE70                            loc_D796:
0000DE70 0804 0001                  		btst	#1,d4
0000DE74 6600 0000                  		bne.w	loc_D82A
0000DE78                            
0000DE78                            loc_D79E:
0000DE78 0C05 0050                  		cmpi.b	#$50,d5
0000DE7C 6700                       		beq.s	locret_D7E2
0000DE7E 1019                       		move.b	(a1)+,d0
0000DE80 4880                       		ext.w	d0
0000DE82 D042                       		add.w	d2,d0
0000DE84 34C0                       		move.w	d0,(a2)+
0000DE86 1819                       		move.b	(a1)+,d4
0000DE88 14C4                       		move.b	d4,(a2)+
0000DE8A 5205                       		addq.b	#1,d5
0000DE8C 14C5                       		move.b	d5,(a2)+
0000DE8E 1019                       		move.b	(a1)+,d0
0000DE90 E148                       		lsl.w	#8,d0
0000DE92 1019                       		move.b	(a1)+,d0
0000DE94 D04B                       		add.w	a3,d0
0000DE96 0A40 0800                  		eori.w	#$800,d0
0000DE9A 34C0                       		move.w	d0,(a2)+
0000DE9C 1019                       		move.b	(a1)+,d0
0000DE9E 4880                       		ext.w	d0
0000DEA0 4440                       		neg.w	d0
0000DEA2 D804                       		add.b	d4,d4
0000DEA4 0244 0018                  		andi.w	#$18,d4
0000DEA8 5044                       		addq.w	#8,d4
0000DEAA 9044                       		sub.w	d4,d0
0000DEAC D043                       		add.w	d3,d0
0000DEAE 0240 01FF                  		andi.w	#$1FF,d0
0000DEB2 6600                       		bne.s	loc_D7DC
0000DEB4 5240                       		addq.w	#1,d0
0000DEB6                            
0000DEB6                            loc_D7DC:
0000DEB6 34C0                       		move.w	d0,(a2)+
0000DEB8 51C9 FFBE                  		dbf	d1,loc_D79E
0000DEBC                            
0000DEBC                            locret_D7E2:
0000DEBC 4E75                       		rts	
0000DEBE                            ; ===========================================================================
0000DEBE                            
0000DEBE                            loc_D7E4:				; XREF: sub_D750
0000DEBE 0C05 0050                  		cmpi.b	#$50,d5
0000DEC2 6700                       		beq.s	locret_D828
0000DEC4 1019                       		move.b	(a1)+,d0
0000DEC6 1811                       		move.b	(a1),d4
0000DEC8 4880                       		ext.w	d0
0000DECA 4440                       		neg.w	d0
0000DECC E70C                       		lsl.b	#3,d4
0000DECE 0244 0018                  		andi.w	#$18,d4
0000DED2 5044                       		addq.w	#8,d4
0000DED4 9044                       		sub.w	d4,d0
0000DED6 D042                       		add.w	d2,d0
0000DED8 34C0                       		move.w	d0,(a2)+
0000DEDA 14D9                       		move.b	(a1)+,(a2)+
0000DEDC 5205                       		addq.b	#1,d5
0000DEDE 14C5                       		move.b	d5,(a2)+
0000DEE0 1019                       		move.b	(a1)+,d0
0000DEE2 E148                       		lsl.w	#8,d0
0000DEE4 1019                       		move.b	(a1)+,d0
0000DEE6 D04B                       		add.w	a3,d0
0000DEE8 0A40 1000                  		eori.w	#$1000,d0
0000DEEC 34C0                       		move.w	d0,(a2)+
0000DEEE 1019                       		move.b	(a1)+,d0
0000DEF0 4880                       		ext.w	d0
0000DEF2 D043                       		add.w	d3,d0
0000DEF4 0240 01FF                  		andi.w	#$1FF,d0
0000DEF8 6600                       		bne.s	loc_D822
0000DEFA 5240                       		addq.w	#1,d0
0000DEFC                            
0000DEFC                            loc_D822:
0000DEFC 34C0                       		move.w	d0,(a2)+
0000DEFE 51C9 FFBE                  		dbf	d1,loc_D7E4
0000DF02                            
0000DF02                            locret_D828:
0000DF02 4E75                       		rts	
0000DF04                            ; ===========================================================================
0000DF04                            
0000DF04                            loc_D82A:
0000DF04 0C05 0050                  		cmpi.b	#$50,d5
0000DF08 6700                       		beq.s	locret_D87C
0000DF0A 1019                       		move.b	(a1)+,d0
0000DF0C 1811                       		move.b	(a1),d4
0000DF0E 4880                       		ext.w	d0
0000DF10 4440                       		neg.w	d0
0000DF12 E70C                       		lsl.b	#3,d4
0000DF14 0244 0018                  		andi.w	#$18,d4
0000DF18 5044                       		addq.w	#8,d4
0000DF1A 9044                       		sub.w	d4,d0
0000DF1C D042                       		add.w	d2,d0
0000DF1E 34C0                       		move.w	d0,(a2)+
0000DF20 1819                       		move.b	(a1)+,d4
0000DF22 14C4                       		move.b	d4,(a2)+
0000DF24 5205                       		addq.b	#1,d5
0000DF26 14C5                       		move.b	d5,(a2)+
0000DF28 1019                       		move.b	(a1)+,d0
0000DF2A E148                       		lsl.w	#8,d0
0000DF2C 1019                       		move.b	(a1)+,d0
0000DF2E D04B                       		add.w	a3,d0
0000DF30 0A40 1800                  		eori.w	#$1800,d0
0000DF34 34C0                       		move.w	d0,(a2)+
0000DF36 1019                       		move.b	(a1)+,d0
0000DF38 4880                       		ext.w	d0
0000DF3A 4440                       		neg.w	d0
0000DF3C D804                       		add.b	d4,d4
0000DF3E 0244 0018                  		andi.w	#$18,d4
0000DF42 5044                       		addq.w	#8,d4
0000DF44 9044                       		sub.w	d4,d0
0000DF46 D043                       		add.w	d3,d0
0000DF48 0240 01FF                  		andi.w	#$1FF,d0
0000DF4C 6600                       		bne.s	loc_D876
0000DF4E 5240                       		addq.w	#1,d0
0000DF50                            
0000DF50                            loc_D876:
0000DF50 34C0                       		move.w	d0,(a2)+
0000DF52 51C9 FFB0                  		dbf	d1,loc_D82A
0000DF56                            
0000DF56                            locret_D87C:
0000DF56 4E75                       		rts	
0000DF58                            ; ---------------------------------------------------------------------------
0000DF58                            ; Subroutine to	check if an object is on the screen
0000DF58                            ; ---------------------------------------------------------------------------
0000DF58                            
0000DF58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF58                            
0000DF58                            
0000DF58                            ChkObjOnScreen:
0000DF58 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000DF5C 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000DF60 6B00                       		bmi.s	NotOnScreen
0000DF62 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000DF66 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DF68                            
0000DF68 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000DF6C 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000DF70 6B00                       		bmi.s	NotOnScreen
0000DF72 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000DF76 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DF78                            
0000DF78 7000                       		moveq	#0,d0		; set flag to 0
0000DF7A 4E75                       		rts	
0000DF7C                            ; ===========================================================================
0000DF7C                            
0000DF7C                            NotOnScreen:				; XREF: ChkObjOnScreen
0000DF7C 7001                       		moveq	#1,d0		; set flag to 1
0000DF7E 4E75                       		rts	
0000DF80                            ; End of function ChkObjOnScreen
0000DF80                            
0000DF80                            
0000DF80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF80                            
0000DF80                            
0000DF80                            ChkObjOnScreen2:
0000DF80 7200                       		moveq	#0,d1
0000DF82 1228 0019                  		move.b	$19(a0),d1
0000DF86 3028 0008                  		move.w	8(a0),d0
0000DF8A 9078 F700                  		sub.w	($FFFFF700).w,d0
0000DF8E D041                       		add.w	d1,d0
0000DF90 6B00                       		bmi.s	NotOnScreen2
0000DF92 D241                       		add.w	d1,d1
0000DF94 9041                       		sub.w	d1,d0
0000DF96 0C40 0140                  		cmpi.w	#320,d0
0000DF9A 6C00                       		bge.s	NotOnScreen2
0000DF9C                            
0000DF9C 3228 000C                  		move.w	$C(a0),d1
0000DFA0 9278 F704                  		sub.w	($FFFFF704).w,d1
0000DFA4 6B00                       		bmi.s	NotOnScreen2
0000DFA6 0C41 00E0                  		cmpi.w	#224,d1
0000DFAA 6C00                       		bge.s	NotOnScreen2
0000DFAC                            
0000DFAC 7000                       		moveq	#0,d0
0000DFAE 4E75                       		rts	
0000DFB0                            ; ===========================================================================
0000DFB0                            
0000DFB0                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000DFB0 7001                       		moveq	#1,d0
0000DFB2 4E75                       		rts	
0000DFB4                            ; End of function ChkObjOnScreen2
0000DFB4                            
0000DFB4                            ; ---------------------------------------------------------------------------
0000DFB4                            ; Subroutine to	load a level's objects
0000DFB4                            ; ---------------------------------------------------------------------------
0000DFB4                            
0000DFB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFB4                            
0000DFB4                            
0000DFB4                            ObjPosLoad:				; XREF: Level; et al
0000DFB4 7000                       		moveq	#0,d0
0000DFB6 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000DFBA 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000DFBE 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000DFC2                            ; End of function ObjPosLoad
0000DFC2                            
0000DFC2                            ; ===========================================================================
0000DFC2 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000DFC4 0000                       		dc.w OPL_Next-OPL_Index
0000DFC6                            ; ===========================================================================
0000DFC6                            
0000DFC6                            OPL_Main:				; XREF: OPL_Index
0000DFC6 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000DFCA 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000DFCE ED08                       		lsl.b	#6,d0
0000DFD0 E848                       		lsr.w	#4,d0
0000DFD2 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000DFD8 2248                       		movea.l	a0,a1
0000DFDA D0F0 0000                  		adda.w	(a0,d0.w),a0
0000DFDE 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DFE2 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DFE6 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000DFEA 21C9 F778                  		move.l	a1,($FFFFF778).w
0000DFEE 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000DFF2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DFF6 34FC 0101                  		move.w	#$101,(a2)+
0000DFFA 303C 005E                  		move.w	#$5E,d0
0000DFFE                            
0000DFFE                            OPL_ClrList:
0000DFFE 429A                       		clr.l	(a2)+
0000E000 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E004                            
0000E004 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E008 7400                       		moveq	#0,d2
0000E00A 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E00E 0446 0080                  		subi.w	#$80,d6
0000E012 6400                       		bcc.s	loc_D93C
0000E014 7C00                       		moveq	#0,d6
0000E016                            
0000E016                            loc_D93C:
0000E016 0246 FF80                  		andi.w	#$FF80,d6
0000E01A 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E01E                            
0000E01E                            loc_D944:
0000E01E BC50                       		cmp.w	(a0),d6
0000E020 6300                       		bls.s	loc_D956
0000E022 4A28 0004                  		tst.b	4(a0)
0000E026 6A00                       		bpl.s	loc_D952
0000E028 1412                       		move.b	(a2),d2
0000E02A 5212                       		addq.b	#1,(a2)
0000E02C                            
0000E02C                            loc_D952:
0000E02C 5C48                       		addq.w	#6,a0
0000E02E 60EE                       		bra.s	loc_D944
0000E030                            ; ===========================================================================
0000E030                            
0000E030                            loc_D956:
0000E030 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E034 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E038 0446 0080                  		subi.w	#$80,d6
0000E03C 6500                       		bcs.s	loc_D976
0000E03E                            
0000E03E                            loc_D964:
0000E03E BC50                       		cmp.w	(a0),d6
0000E040 6300                       		bls.s	loc_D976
0000E042 4A28 0004                  		tst.b	4(a0)
0000E046 6A00                       		bpl.s	loc_D972
0000E048 522A 0001                  		addq.b	#1,1(a2)
0000E04C                            
0000E04C                            loc_D972:
0000E04C 5C48                       		addq.w	#6,a0
0000E04E 60EE                       		bra.s	loc_D964
0000E050                            ; ===========================================================================
0000E050                            
0000E050                            loc_D976:
0000E050 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E054 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E05A                            
0000E05A                            OPL_Next:				; XREF: OPL_Index
0000E05A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E05E 7400                       		moveq	#0,d2
0000E060 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E064 0246 FF80                  		andi.w	#$FF80,d6
0000E068 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E06C 6700 0000                  		beq.w	locret_DA3A
0000E070 6C00                       		bge.s	loc_D9F6
0000E072 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E076 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E07A 0446 0080                  		subi.w	#$80,d6
0000E07E 6500                       		bcs.s	loc_D9D2
0000E080                            
0000E080                            loc_D9A6:
0000E080 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E084 6C00                       		bge.s	loc_D9D2
0000E086 5D48                       		subq.w	#6,a0
0000E088 4A28 0004                  		tst.b	4(a0)
0000E08C 6A00                       		bpl.s	loc_D9BC
0000E08E 532A 0001                  		subq.b	#1,1(a2)
0000E092 142A 0001                  		move.b	1(a2),d2
0000E096                            
0000E096                            loc_D9BC:
0000E096 6100 0000                  		bsr.w	loc_DA3C
0000E09A 6600                       		bne.s	loc_D9C6
0000E09C 5D48                       		subq.w	#6,a0
0000E09E 60E0                       		bra.s	loc_D9A6
0000E0A0                            ; ===========================================================================
0000E0A0                            
0000E0A0                            loc_D9C6:
0000E0A0 4A28 0004                  		tst.b	4(a0)
0000E0A4 6A00                       		bpl.s	loc_D9D0
0000E0A6 522A 0001                  		addq.b	#1,1(a2)
0000E0AA                            
0000E0AA                            loc_D9D0:
0000E0AA 5C48                       		addq.w	#6,a0
0000E0AC                            
0000E0AC                            loc_D9D2:
0000E0AC 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E0B0 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E0B4 0646 0300                  		addi.w	#$300,d6
0000E0B8                            
0000E0B8                            loc_D9DE:
0000E0B8 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E0BC 6E00                       		bgt.s	loc_D9F0
0000E0BE 4A28 FFFE                  		tst.b	-2(a0)
0000E0C2 6A00                       		bpl.s	loc_D9EC
0000E0C4 5312                       		subq.b	#1,(a2)
0000E0C6                            
0000E0C6                            loc_D9EC:
0000E0C6 5D48                       		subq.w	#6,a0
0000E0C8 60EE                       		bra.s	loc_D9DE
0000E0CA                            ; ===========================================================================
0000E0CA                            
0000E0CA                            loc_D9F0:
0000E0CA 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E0CE 4E75                       		rts	
0000E0D0                            ; ===========================================================================
0000E0D0                            
0000E0D0                            loc_D9F6:
0000E0D0 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E0D4 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E0D8 0646 0280                  		addi.w	#$280,d6
0000E0DC                            
0000E0DC                            loc_DA02:
0000E0DC BC50                       		cmp.w	(a0),d6
0000E0DE 6300                       		bls.s	loc_DA16
0000E0E0 4A28 0004                  		tst.b	4(a0)
0000E0E4 6A00                       		bpl.s	loc_DA10
0000E0E6 1412                       		move.b	(a2),d2
0000E0E8 5212                       		addq.b	#1,(a2)
0000E0EA                            
0000E0EA                            loc_DA10:
0000E0EA 6100 0000                  		bsr.w	loc_DA3C
0000E0EE 67EC                       		beq.s	loc_DA02
0000E0F0                            
0000E0F0                            loc_DA16:
0000E0F0 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E0F4 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E0F8 0446 0300                  		subi.w	#$300,d6
0000E0FC 6500                       		bcs.s	loc_DA36
0000E0FE                            
0000E0FE                            loc_DA24:
0000E0FE BC50                       		cmp.w	(a0),d6
0000E100 6300                       		bls.s	loc_DA36
0000E102 4A28 0004                  		tst.b	4(a0)
0000E106 6A00                       		bpl.s	loc_DA32
0000E108 522A 0001                  		addq.b	#1,1(a2)
0000E10C                            
0000E10C                            loc_DA32:
0000E10C 5C48                       		addq.w	#6,a0
0000E10E 60EE                       		bra.s	loc_DA24
0000E110                            ; ===========================================================================
0000E110                            
0000E110                            loc_DA36:
0000E110 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E114                            
0000E114                            locret_DA3A:
0000E114 4E75                       		rts	
0000E116                            ; ===========================================================================
0000E116                            
0000E116                            loc_DA3C:
0000E116 4A28 0004                  		tst.b	4(a0)
0000E11A 6A00                       		bpl.s	OPL_MakeItem
0000E11C 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E122 6700                       		beq.s	OPL_MakeItem
0000E124 5C48                       		addq.w	#6,a0
0000E126 7000                       		moveq	#0,d0
0000E128 4E75                       		rts	
0000E12A                            ; ===========================================================================
0000E12A                            
0000E12A                            OPL_MakeItem:
0000E12A 6100 0000                  		bsr.w	SingleObjLoad
0000E12E 6600                       		bne.s	locret_DA8A
0000E130 3358 0008                  		move.w	(a0)+,8(a1)
0000E134 3018                       		move.w	(a0)+,d0
0000E136 3200                       		move.w	d0,d1
0000E138 0240 0FFF                  		andi.w	#$FFF,d0
0000E13C 3340 000C                  		move.w	d0,$C(a1)
0000E140 E559                       		rol.w	#2,d1
0000E142 0201 0003                  		andi.b	#3,d1
0000E146 1341 0001                  		move.b	d1,1(a1)
0000E14A 1341 0022                  		move.b	d1,$22(a1)
0000E14E 1018                       		move.b	(a0)+,d0
0000E150 6A00                       		bpl.s	loc_DA80
0000E152 0200 007F                  		andi.b	#$7F,d0
0000E156 1342 0023                  		move.b	d2,$23(a1)
0000E15A                            
0000E15A                            loc_DA80:
0000E15A 1280                       		move.b	d0,0(a1)
0000E15C 1358 0028                  		move.b	(a0)+,$28(a1)
0000E160 7000                       		moveq	#0,d0
0000E162                            
0000E162                            locret_DA8A:
0000E162 4E75                       		rts	
0000E164                            ; ---------------------------------------------------------------------------
0000E164                            ; Single object	loading	subroutine
0000E164                            ; ---------------------------------------------------------------------------
0000E164                            
0000E164                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E164                            
0000E164                            
0000E164                            SingleObjLoad:
0000E164 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E168 303C 005F                  		move.w	#$5F,d0
0000E16C                            
0000E16C                            loc_DA94:
0000E16C 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E16E 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E170 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E174 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E178                            
0000E178                            locret_DAA0:
0000E178 4E75                       		rts	
0000E17A                            ; End of function SingleObjLoad
0000E17A                            
0000E17A                            
0000E17A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E17A                            
0000E17A                            
0000E17A                            SingleObjLoad2:
0000E17A 2248                       		movea.l	a0,a1
0000E17C 303C F000                  		move.w	#-$1000,d0
0000E180 9048                       		sub.w	a0,d0
0000E182 EC48                       		lsr.w	#6,d0
0000E184 5340                       		subq.w	#1,d0
0000E186 6500                       		bcs.s	locret_DABC
0000E188                            
0000E188                            loc_DAB0:
0000E188 4A11                       		tst.b	(a1)
0000E18A 6700                       		beq.s	locret_DABC
0000E18C 43E9 0040                  		lea	$40(a1),a1
0000E190 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E194                            
0000E194                            locret_DABC:
0000E194 4E75                       		rts	
0000E196                            ; End of function SingleObjLoad2
0000E196                            
0000E196                            ; ===========================================================================
0000E196                            ; ---------------------------------------------------------------------------
0000E196                            ; Object 41 - springs
0000E196                            ; ---------------------------------------------------------------------------
0000E196                            
0000E196                            Obj41:					; XREF: Obj_Index
0000E196 7000                       		moveq	#0,d0
0000E198 1028 0024                  		move.b	$24(a0),d0
0000E19C 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E1A0 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E1A4 6100 FB38                  		bsr.w	DisplaySprite
0000E1A8 3028 0008                  		move.w	8(a0),d0
0000E1AC 0240 FF80                  		andi.w	#$FF80,d0
0000E1B0 3238 F700                  		move.w	($FFFFF700).w,d1
0000E1B4 0441 0080                  		subi.w	#$80,d1
0000E1B8 0241 FF80                  		andi.w	#$FF80,d1
0000E1BC 9041                       		sub.w	d1,d0
0000E1BE 0C40 0280                  		cmpi.w	#$280,d0
0000E1C2 6200 FB56                  		bhi.w	DeleteObject
0000E1C6 4E75                       		rts	
0000E1C8                            ; ===========================================================================
0000E1C8 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E1CA 0000                       		dc.w Obj41_Up-Obj41_Index
0000E1CC 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E1CE 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E1D0 0000                       		dc.w Obj41_LR-Obj41_Index
0000E1D2 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E1D4 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E1D6 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E1D8 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E1DA 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E1DC                            
0000E1DC F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E1DE F600                       		dc.w -$A00		; power	of yellow spring
0000E1E0                            ; ===========================================================================
0000E1E0                            
0000E1E0                            Obj41_Main:				; XREF: Obj41_Index
0000E1E0 5428 0024                  		addq.b	#2,$24(a0)
0000E1E4 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E1EC 317C 0523 0002             		move.w	#$523,2(a0)
0000E1F2 0028 0004 0001             		ori.b	#4,1(a0)
0000E1F8 117C 0010 0019             		move.b	#$10,$19(a0)
0000E1FE 117C 0004 0018             		move.b	#4,$18(a0)
0000E204 1028 0028                  		move.b	$28(a0),d0
0000E208 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E20C 6700                       		beq.s	loc_DB54	; if not, branch
0000E20E 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E214 117C 0001 001C             		move.b	#1,$1C(a0)
0000E21A 117C 0003 001A             		move.b	#3,$1A(a0)
0000E220 317C 0533 0002             		move.w	#$533,2(a0)
0000E226 117C 0008 0019             		move.b	#8,$19(a0)
0000E22C                            
0000E22C                            loc_DB54:
0000E22C 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E230 6700                       		beq.s	loc_DB66	; if not, branch
0000E232 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E238 08E8 0001 0022             		bset	#1,$22(a0)
0000E23E                            
0000E23E                            loc_DB66:
0000E23E 0800 0001                  		btst	#1,d0
0000E242 6700                       		beq.s	loc_DB72
0000E244 08E8 0005 0002             		bset	#5,2(a0)
0000E24A                            
0000E24A                            loc_DB72:
0000E24A 0240 000F                  		andi.w	#$F,d0
0000E24E 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E254 4E75                       		rts	
0000E256                            ; ===========================================================================
0000E256                            
0000E256                            Obj41_Up:				; XREF: Obj41_Index
0000E256 323C 001B                  		move.w	#$1B,d1
0000E25A 343C 0008                  		move.w	#8,d2
0000E25E 363C 0010                  		move.w	#$10,d3
0000E262 3828 0008                  		move.w	8(a0),d4
0000E266 6100 0000                  		bsr.w	SolidObject
0000E26A 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E26E 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E270 4E75                       		rts	
0000E272                            ; ===========================================================================
0000E272                            
0000E272                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E272 5428 0024                  		addq.b	#2,$24(a0)
0000E276 5069 000C                  		addq.w	#8,$C(a1)
0000E27A 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E280 08E9 0001 0022             		bset	#1,$22(a1)
0000E286 08A9 0003 0022             		bclr	#3,$22(a1)
0000E28C 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E292 137C 0002 0024             		move.b	#2,$24(a1)
0000E298 08A8 0003 0022             		bclr	#3,$22(a0)
0000E29E 4228 0025                  		clr.b	$25(a0)
0000E2A2 303C 00CC                  		move.w	#$CC,d0
0000E2A6 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E2AC                            
0000E2AC                            Obj41_AniUp:				; XREF: Obj41_Index
0000E2AC 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E2B2 6000 CAEA                  		bra.w	AnimateSprite
0000E2B6                            ; ===========================================================================
0000E2B6                            
0000E2B6                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E2B6 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E2BC 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E2C0 4E75                       		rts	
0000E2C2                            ; ===========================================================================
0000E2C2                            
0000E2C2                            Obj41_LR:				; XREF: Obj41_Index
0000E2C2 323C 0013                  		move.w	#$13,d1
0000E2C6 343C 000E                  		move.w	#$E,d2
0000E2CA 363C 000F                  		move.w	#$F,d3
0000E2CE 3828 0008                  		move.w	8(a0),d4
0000E2D2 6100 0000                  		bsr.w	SolidObject
0000E2D6 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E2DC 6600                       		bne.s	loc_DC0C
0000E2DE 117C 0008 0024             		move.b	#8,$24(a0)
0000E2E4                            
0000E2E4                            loc_DC0C:
0000E2E4 0828 0005 0022             		btst	#5,$22(a0)
0000E2EA 6600                       		bne.s	Obj41_BounceLR
0000E2EC 4E75                       		rts	
0000E2EE                            ; ===========================================================================
0000E2EE                            
0000E2EE                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E2EE 5428 0024                  		addq.b	#2,$24(a0)
0000E2F2 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E2F8 5069 0008                  		addq.w	#8,8(a1)
0000E2FC 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E302 6600                       		bne.s	loc_DC36	; if yes, branch
0000E304 0469 0010 0008             		subi.w	#$10,8(a1)
0000E30A 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E30E                            
0000E30E                            loc_DC36:
0000E30E 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E314 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E31A 0869 0000 0022             		bchg	#0,$22(a1)
0000E320 0829 0002 0022             		btst	#2,$22(a1)
0000E326 6600                       		bne.s	loc_DC56
0000E328 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E32E                            
0000E32E                            loc_DC56:
0000E32E 08A8 0005 0022             		bclr	#5,$22(a0)
0000E334 08A9 0005 0022             		bclr	#5,$22(a1)
0000E33A 303C 00CC                  		move.w	#$CC,d0
0000E33E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E344                            
0000E344                            Obj41_AniLR:				; XREF: Obj41_Index
0000E344 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E34A 6000 CA52                  		bra.w	AnimateSprite
0000E34E                            ; ===========================================================================
0000E34E                            
0000E34E                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E34E 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E354 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E358 4E75                       		rts	
0000E35A                            ; ===========================================================================
0000E35A                            
0000E35A                            Obj41_Dwn:				; XREF: Obj41_Index
0000E35A 323C 001B                  		move.w	#$1B,d1
0000E35E 343C 0008                  		move.w	#8,d2
0000E362 363C 0010                  		move.w	#$10,d3
0000E366 3828 0008                  		move.w	8(a0),d4
0000E36A 6100 0000                  		bsr.w	SolidObject
0000E36E 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E374 6600                       		bne.s	loc_DCA4
0000E376 117C 000E 0024             		move.b	#$E,$24(a0)
0000E37C                            
0000E37C                            loc_DCA4:
0000E37C 4A28 0025                  		tst.b	$25(a0)
0000E380 6600                       		bne.s	locret_DCAE
0000E382 4A44                       		tst.w	d4
0000E384 6B00                       		bmi.s	Obj41_BounceDwn
0000E386                            
0000E386                            locret_DCAE:
0000E386 4E75                       		rts	
0000E388                            ; ===========================================================================
0000E388                            
0000E388                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E388 5428 0024                  		addq.b	#2,$24(a0)
0000E38C 5169 000C                  		subq.w	#8,$C(a1)
0000E390 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E396 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E39A 08E9 0001 0022             		bset	#1,$22(a1)
0000E3A0 08A9 0003 0022             		bclr	#3,$22(a1)
0000E3A6 137C 0002 0024             		move.b	#2,$24(a1)
0000E3AC 08A8 0003 0022             		bclr	#3,$22(a0)
0000E3B2 4228 0025                  		clr.b	$25(a0)
0000E3B6 303C 00CC                  		move.w	#$CC,d0
0000E3BA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E3C0                            
0000E3C0                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E3C0 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E3C6 6000 C9D6                  		bra.w	AnimateSprite
0000E3CA                            ; ===========================================================================
0000E3CA                            
0000E3CA                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E3CA 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E3D0 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E3D4 4E75                       		rts	
0000E3D6                            ; ===========================================================================
0000E3D6                            Ani_obj41:
0000E3D6                            	include "_anim\obj41.asm"
0000E3D6                            ; ---------------------------------------------------------------------------
0000E3D6                            ; Animation script - springs
0000E3D6                            ; ---------------------------------------------------------------------------
0000E3D6 0000                       		dc.w byte_DD02-Ani_obj41
0000E3D8 0000                       		dc.w byte_DD0E-Ani_obj41
0000E3DA 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E3E6 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E3F2                            		even
0000E3F2                            		even
0000E3F2                            
0000E3F2                            ; ---------------------------------------------------------------------------
0000E3F2                            ; Sprite mappings - springs
0000E3F2                            ; ---------------------------------------------------------------------------
0000E3F2                            Map_obj41:
0000E3F2                            	include "_maps\obj41.asm"
0000E3F2                            ; ---------------------------------------------------------------------------
0000E3F2                            ; Sprite mappings - springs
0000E3F2                            ; ---------------------------------------------------------------------------
0000E3F2 0000                       		dc.w byte_DD26-Map_obj41
0000E3F4 0000                       		dc.w byte_DD31-Map_obj41
0000E3F6 0000                       		dc.w byte_DD37-Map_obj41
0000E3F8 0000                       		dc.w byte_DD47-Map_obj41
0000E3FA 0000                       		dc.w byte_DD4D-Map_obj41
0000E3FC 0000                       		dc.w byte_DD53-Map_obj41
0000E3FE 02                         byte_DD26:	dc.b 2
0000E3FF F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E404 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E409 01                         byte_DD31:	dc.b 1
0000E40A 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E40F 03                         byte_DD37:	dc.b 3
0000E410 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E415 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E41A 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E41F 01                         byte_DD47:	dc.b 1
0000E420 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E425 01                         byte_DD4D:	dc.b 1
0000E426 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E42B 04                         byte_DD53:	dc.b 4
0000E42C F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E431 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E436 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E43B 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E440                            		even
0000E440                            		even
0000E440                            
0000E440                            ; ===========================================================================
0000E440                            ; ---------------------------------------------------------------------------
0000E440                            ; Object 42 - Newtron enemy (GHZ)
0000E440                            ; ---------------------------------------------------------------------------
0000E440                            
0000E440                            Obj42:					; XREF: Obj_Index
0000E440 7000                       		moveq	#0,d0
0000E442 1028 0024                  		move.b	$24(a0),d0
0000E446 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E44A 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E44E                            ; ===========================================================================
0000E44E 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E450 0000                       		dc.w Obj42_Action-Obj42_Index
0000E452 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E454                            ; ===========================================================================
0000E454                            
0000E454                            Obj42_Main:				; XREF: Obj42_Index
0000E454 5428 0024                  		addq.b	#2,$24(a0)
0000E458 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E460 317C 049B 0002             		move.w	#$49B,2(a0)
0000E466 117C 0004 0001             		move.b	#4,1(a0)
0000E46C 117C 0004 0018             		move.b	#4,$18(a0)
0000E472 117C 0014 0019             		move.b	#$14,$19(a0)
0000E478 117C 0010 0016             		move.b	#$10,$16(a0)
0000E47E 117C 0008 0017             		move.b	#8,$17(a0)
0000E484                            
0000E484                            Obj42_Action:				; XREF: Obj42_Index
0000E484 7000                       		moveq	#0,d0
0000E486 1028 0025                  		move.b	$25(a0),d0
0000E48A 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E48E 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E492 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E498 6100 C904                  		bsr.w	AnimateSprite
0000E49C 6000 0000                  		bra.w	MarkObjGone
0000E4A0                            ; ===========================================================================
0000E4A0 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E4A2 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E4A4 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E4A6 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E4A8 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E4AA                            ; ===========================================================================
0000E4AA                            
0000E4AA                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E4AA 08E8 0000 0022             		bset	#0,$22(a0)
0000E4B0 3038 D008                  		move.w	($FFFFD008).w,d0
0000E4B4 9068 0008                  		sub.w	8(a0),d0
0000E4B8 6400                       		bcc.s	loc_DDEA
0000E4BA 4440                       		neg.w	d0
0000E4BC 08A8 0000 0022             		bclr	#0,$22(a0)
0000E4C2                            
0000E4C2                            loc_DDEA:
0000E4C2 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E4C6 6400                       		bcc.s	locret_DE12	; if not, branch
0000E4C8 5428 0025                  		addq.b	#2,$25(a0)
0000E4CC 117C 0001 001C             		move.b	#1,$1C(a0)
0000E4D2 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E4D6 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E4D8 317C 249B 0002             		move.w	#$249B,2(a0)
0000E4DE 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E4E4 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E4EA                            
0000E4EA                            locret_DE12:
0000E4EA 4E75                       		rts	
0000E4EC                            ; ===========================================================================
0000E4EC                            
0000E4EC                            Obj42_Type00:				; XREF: Obj42_Index2
0000E4EC 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E4F2 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E4F4 08E8 0000 0022             		bset	#0,$22(a0)
0000E4FA 3038 D008                  		move.w	($FFFFD008).w,d0
0000E4FE 9068 0008                  		sub.w	8(a0),d0
0000E502 6400                       		bcc.s	locret_DE32
0000E504 08A8 0000 0022             		bclr	#0,$22(a0)
0000E50A                            
0000E50A                            locret_DE32:
0000E50A 4E75                       		rts	
0000E50C                            ; ===========================================================================
0000E50C                            
0000E50C                            Obj42_Fall:				; XREF: Obj42_Type00
0000E50C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E512 6600                       		bne.s	loc_DE42
0000E514 117C 000C 0020             		move.b	#$C,$20(a0)
0000E51A                            
0000E51A                            loc_DE42:
0000E51A 6100 F770                  		bsr.w	ObjectFall
0000E51E 6100 0000                  		bsr.w	ObjHitFloor
0000E522 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E524 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E526 D368 000C                  		add.w	d1,$C(a0)
0000E52A 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E530 5428 0025                  		addq.b	#2,$25(a0)
0000E534 117C 0002 001C             		move.b	#2,$1C(a0)
0000E53A 0828 0005 0002             		btst	#5,2(a0)
0000E540 6700                       		beq.s	Obj42_Move
0000E542 5228 001C                  		addq.b	#1,$1C(a0)
0000E546                            
0000E546                            Obj42_Move:
0000E546 117C 000D 0020             		move.b	#$D,$20(a0)
0000E54C 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E552 0828 0000 0022             		btst	#0,$22(a0)
0000E558 6600                       		bne.s	locret_DE86
0000E55A 4468 0010                  		neg.w	$10(a0)
0000E55E                            
0000E55E                            locret_DE86:
0000E55E 4E75                       		rts	
0000E560                            ; ===========================================================================
0000E560                            
0000E560                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E560 6100 F756                  		bsr.w	SpeedToPos
0000E564 6100 0000                  		bsr.w	ObjHitFloor
0000E568 0C41 FFF8                  		cmpi.w	#-8,d1
0000E56C 6D00                       		blt.s	loc_DEA2
0000E56E 0C41 000C                  		cmpi.w	#$C,d1
0000E572 6C00                       		bge.s	loc_DEA2
0000E574 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E578 4E75                       		rts	
0000E57A                            ; ===========================================================================
0000E57A                            
0000E57A                            loc_DEA2:
0000E57A 5428 0025                  		addq.b	#2,$25(a0)
0000E57E 4E75                       		rts	
0000E580                            ; ===========================================================================
0000E580                            
0000E580                            Obj42_Speed:				; XREF: Obj42_Index2
0000E580 6100 F736                  		bsr.w	SpeedToPos
0000E584 4E75                       		rts	
0000E586                            ; ===========================================================================
0000E586                            
0000E586                            Obj42_Type01:				; XREF: Obj42_Index2
0000E586 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E58C 6600                       		bne.s	Obj42_FireMissile
0000E58E 117C 000C 0020             		move.b	#$C,$20(a0)
0000E594                            
0000E594                            Obj42_FireMissile:
0000E594 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E59A 6600                       		bne.s	locret_DF14
0000E59C 4A28 0032                  		tst.b	$32(a0)
0000E5A0 6600                       		bne.s	locret_DF14
0000E5A2 117C 0001 0032             		move.b	#1,$32(a0)
0000E5A8 6100 FBBA                  		bsr.w	SingleObjLoad
0000E5AC 6600                       		bne.s	locret_DF14
0000E5AE 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E5B2 3368 0008 0008             		move.w	8(a0),8(a1)
0000E5B8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E5BE 5169 000C                  		subq.w	#8,$C(a1)
0000E5C2 337C 0200 0010             		move.w	#$200,$10(a1)
0000E5C8 303C 0014                  		move.w	#$14,d0
0000E5CC 0828 0000 0022             		btst	#0,$22(a0)
0000E5D2 6600                       		bne.s	loc_DF04
0000E5D4 4440                       		neg.w	d0
0000E5D6 4469 0010                  		neg.w	$10(a1)
0000E5DA                            
0000E5DA                            loc_DF04:
0000E5DA D169 0008                  		add.w	d0,8(a1)
0000E5DE 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E5E4 137C 0001 0028             		move.b	#1,$28(a1)
0000E5EA                            
0000E5EA                            locret_DF14:
0000E5EA 4E75                       		rts	
0000E5EC                            ; ===========================================================================
0000E5EC                            
0000E5EC                            Obj42_Delete:				; XREF: Obj42_Index
0000E5EC 6000 F72C                  		bra.w	DeleteObject
0000E5F0                            ; ===========================================================================
0000E5F0                            Ani_obj42:
0000E5F0                            	include "_anim\obj42.asm"
0000E5F0                            ; ---------------------------------------------------------------------------
0000E5F0                            ; Animation script - Newtron enemy
0000E5F0                            ; ---------------------------------------------------------------------------
0000E5F0 0000                       		dc.w byte_DF24-Ani_obj42
0000E5F2 0000                       		dc.w byte_DF28-Ani_obj42
0000E5F4 0000                       		dc.w byte_DF30-Ani_obj42
0000E5F6 0000                       		dc.w byte_DF34-Ani_obj42
0000E5F8 0000                       		dc.w byte_DF38-Ani_obj42
0000E5FA 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E5FE 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E606 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E60A 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E60E 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E618                            		even
0000E618                            		even
0000E618                            
0000E618                            ; ---------------------------------------------------------------------------
0000E618                            ; Sprite mappings - Newtron enemy (GHZ)
0000E618                            ; ---------------------------------------------------------------------------
0000E618                            Map_obj42:
0000E618                            	include "_maps\obj42.asm"
0000E618                            ; ---------------------------------------------------------------------------
0000E618                            ; Sprite mappings - Newtron enemy (GHZ)
0000E618                            ; ---------------------------------------------------------------------------
0000E618 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E61C 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E620 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E624 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E628 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E62C 0000                       		dc.w byte_DFF8-Map_obj42
0000E62E 03                         byte_DF58:	dc.b 3
0000E62F EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E634 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E639 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E63E 03                         byte_DF68:	dc.b 3
0000E63F EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E644 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E649 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E64E 03                         byte_DF78:	dc.b 3
0000E64F EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E654 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E659 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E65E 04                         byte_DF88:	dc.b 4
0000E65F EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E664 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E669 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E66E 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E673 03                         byte_DF9D:	dc.b 3
0000E674 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E679 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E67E 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E683 02                         byte_DFAD:	dc.b 2
0000E684 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E689 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E68E 03                         byte_DFB8:	dc.b 3
0000E68F F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E694 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E699 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E69E 03                         byte_DFC8:	dc.b 3
0000E69F F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E6A4 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E6A9 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E6AE 03                         byte_DFD8:	dc.b 3
0000E6AF F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E6B4 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E6B9 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E6BE 03                         byte_DFE8:	dc.b 3
0000E6BF F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E6C4 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E6C9 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E6CE 00                         byte_DFF8:	dc.b 0
0000E6D0 00                         		even
0000E6D0 00                         		even
0000E6D0                            
0000E6D0                            ; ===========================================================================
0000E6D0                            ; ---------------------------------------------------------------------------
0000E6D0                            ; Object 43 - Roller enemy (SYZ)
0000E6D0                            ; ---------------------------------------------------------------------------
0000E6D0                            
0000E6D0                            Obj43:					; XREF: Obj_Index
0000E6D0 7000                       		moveq	#0,d0
0000E6D2 1028 0024                  		move.b	$24(a0),d0
0000E6D6 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E6DA 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E6DE                            ; ===========================================================================
0000E6DE 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E6E0 0000                       		dc.w Obj43_Action-Obj43_Index
0000E6E2                            ; ===========================================================================
0000E6E2                            
0000E6E2                            Obj43_Main:				; XREF: Obj43_Index
0000E6E2 117C 000E 0016             		move.b	#$E,$16(a0)
0000E6E8 117C 0008 0017             		move.b	#8,$17(a0)
0000E6EE 6100 F59C                  		bsr.w	ObjectFall
0000E6F2 6100 0000                  		bsr.w	ObjHitFloor
0000E6F6 4A41                       		tst.w	d1
0000E6F8 6A00                       		bpl.s	locret_E052
0000E6FA D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E6FE 317C 0000 0012             		move.w	#0,$12(a0)
0000E704 5428 0024                  		addq.b	#2,$24(a0)
0000E708 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E710 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E716 117C 0004 0001             		move.b	#4,1(a0)
0000E71C 117C 0004 0018             		move.b	#4,$18(a0)
0000E722 117C 0010 0019             		move.b	#$10,$19(a0)
0000E728                            
0000E728                            locret_E052:
0000E728 4E75                       		rts	
0000E72A                            ; ===========================================================================
0000E72A                            
0000E72A                            Obj43_Action:				; XREF: Obj43_Index
0000E72A 7000                       		moveq	#0,d0
0000E72C 1028 0025                  		move.b	$25(a0),d0
0000E730 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E734 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E738 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E73E 6100 C65E                  		bsr.w	AnimateSprite
0000E742 3028 0008                  		move.w	8(a0),d0
0000E746 0240 FF80                  		andi.w	#$FF80,d0
0000E74A 3238 F700                  		move.w	($FFFFF700).w,d1
0000E74E 0441 0080                  		subi.w	#$80,d1
0000E752 0241 FF80                  		andi.w	#$FF80,d1
0000E756 9041                       		sub.w	d1,d0
0000E758 0C40 0280                  		cmpi.w	#$280,d0
0000E75C 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E760 6000 F57C                  		bra.w	DisplaySprite
0000E764                            ; ===========================================================================
0000E764                            
0000E764                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E764 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E768 7000                       		moveq	#0,d0
0000E76A 1028 0023                  		move.b	$23(a0),d0
0000E76E 6700                       		beq.s	Obj43_Delete
0000E770 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E776                            
0000E776                            Obj43_Delete:
0000E776 6000 F5A2                  		bra.w	DeleteObject
0000E77A                            ; ===========================================================================
0000E77A 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E77C 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E77E 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E780 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E782                            ; ===========================================================================
0000E782                            
0000E782                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E782 3038 D008                  		move.w	($FFFFD008).w,d0
0000E786 0440 0100                  		subi.w	#$100,d0
0000E78A 6500                       		bcs.s	loc_E0D2
0000E78C 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E790 6500                       		bcs.s	loc_E0D2
0000E792 5828 0025                  		addq.b	#4,$25(a0)
0000E796 117C 0002 001C             		move.b	#2,$1C(a0)
0000E79C 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E7A2 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E7A8                            
0000E7A8                            loc_E0D2:
0000E7A8 588F                       		addq.l	#4,sp
0000E7AA 4E75                       		rts	
0000E7AC                            ; ===========================================================================
0000E7AC                            
0000E7AC                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E7AC 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E7B2 6700                       		beq.s	loc_E0F8
0000E7B4 5368 0030                  		subq.w	#1,$30(a0)
0000E7B8 6A00                       		bpl.s	locret_E0F6
0000E7BA 117C 0001 001C             		move.b	#1,$1C(a0)
0000E7C0 317C 0700 0010             		move.w	#$700,$10(a0)
0000E7C6 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E7CC                            
0000E7CC                            locret_E0F6:
0000E7CC 4E75                       		rts	
0000E7CE                            ; ===========================================================================
0000E7CE                            
0000E7CE                            loc_E0F8:
0000E7CE 5428 0025                  		addq.b	#2,$25(a0)
0000E7D2 4E75                       		rts	
0000E7D4                            ; ===========================================================================
0000E7D4                            
0000E7D4                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E7D4 6100 0000                  		bsr.w	Obj43_Stop
0000E7D8 6100 F4DE                  		bsr.w	SpeedToPos
0000E7DC 6100 0000                  		bsr.w	ObjHitFloor
0000E7E0 0C41 FFF8                  		cmpi.w	#-8,d1
0000E7E4 6D00                       		blt.s	Obj43_Jump
0000E7E6 0C41 000C                  		cmpi.w	#$C,d1
0000E7EA 6C00                       		bge.s	Obj43_Jump
0000E7EC D368 000C                  		add.w	d1,$C(a0)
0000E7F0 4E75                       		rts	
0000E7F2                            ; ===========================================================================
0000E7F2                            
0000E7F2                            Obj43_Jump:
0000E7F2 5428 0025                  		addq.b	#2,$25(a0)
0000E7F6 08E8 0000 0032             		bset	#0,$32(a0)
0000E7FC 6700                       		beq.s	locret_E12E
0000E7FE 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E804                            
0000E804                            locret_E12E:
0000E804 4E75                       		rts	
0000E806                            ; ===========================================================================
0000E806                            
0000E806                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E806 6100 F484                  		bsr.w	ObjectFall
0000E80A 4A68 0012                  		tst.w	$12(a0)
0000E80E 6B00                       		bmi.s	locret_E150
0000E810 6100 0000                  		bsr.w	ObjHitFloor
0000E814 4A41                       		tst.w	d1
0000E816 6A00                       		bpl.s	locret_E150
0000E818 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E81C 5528 0025                  		subq.b	#2,$25(a0)
0000E820 317C 0000 0012             		move.w	#0,$12(a0)
0000E826                            
0000E826                            locret_E150:
0000E826 4E75                       		rts	
0000E828                            
0000E828                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E828                            
0000E828                            
0000E828                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E828 4A28 0032                  		tst.b	$32(a0)
0000E82C 6B00                       		bmi.s	locret_E188
0000E82E 3038 D008                  		move.w	($FFFFD008).w,d0
0000E832 0440 0030                  		subi.w	#$30,d0
0000E836 9068 0008                  		sub.w	8(a0),d0
0000E83A 6400                       		bcc.s	locret_E188
0000E83C 117C 0000 001C             		move.b	#0,$1C(a0)
0000E842 117C 000E 0020             		move.b	#$E,$20(a0)
0000E848 4268 0010                  		clr.w	$10(a0)
0000E84C 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E852 117C 0002 0025             		move.b	#2,$25(a0)
0000E858 08E8 0007 0032             		bset	#7,$32(a0)
0000E85E                            
0000E85E                            locret_E188:
0000E85E 4E75                       		rts	
0000E860                            ; End of function Obj43_Stop
0000E860                            
0000E860                            ; ===========================================================================
0000E860                            Ani_obj43:
0000E860                            	include "_anim\obj43.asm"
0000E860                            ; ---------------------------------------------------------------------------
0000E860                            ; Animation script - Roller enemy
0000E860                            ; ---------------------------------------------------------------------------
0000E860 0000                       		dc.w byte_E190-Ani_obj43
0000E862 0000                       		dc.w byte_E196-Ani_obj43
0000E864 0000                       		dc.w byte_E19C-Ani_obj43
0000E866 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E86C 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E872 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E878 00                         		even
0000E878 00                         		even
0000E878                            
0000E878                            ; ---------------------------------------------------------------------------
0000E878                            ; Sprite mappings - Roller enemy (SYZ)
0000E878                            ; ---------------------------------------------------------------------------
0000E878                            Map_obj43:
0000E878                            	include "_maps\obj43.asm"
0000E878                            Map_61da:
0000E878 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000E87A 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000E87C 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000E87E 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000E880 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000E882 02                         Map_61da_A: 	dc.b $2
0000E883 DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000E888 F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000E88D 02                         Map_61da_15: 	dc.b $2
0000E88E E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000E893 FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000E898 01                         Map_61da_20: 	dc.b $1
0000E899 F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000E89E 01                         Map_61da_26: 	dc.b $1
0000E89F F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000E8A4 01                         Map_61da_2C: 	dc.b $1
0000E8A5 F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000E8AA                            	even
0000E8AA                            	even
0000E8AA                            
0000E8AA                            ; ===========================================================================
0000E8AA                            ; ---------------------------------------------------------------------------
0000E8AA                            ; Object 44 - walls (GHZ)
0000E8AA                            ; ---------------------------------------------------------------------------
0000E8AA                            
0000E8AA                            Obj44:					; XREF: Obj_Index
0000E8AA 7000                       		moveq	#0,d0
0000E8AC 1028 0024                  		move.b	$24(a0),d0
0000E8B0 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E8B4 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E8B8                            ; ===========================================================================
0000E8B8 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E8BA 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E8BC 0000                       		dc.w Obj44_Display-Obj44_Index
0000E8BE                            ; ===========================================================================
0000E8BE                            
0000E8BE                            Obj44_Main:				; XREF: Obj44_Index
0000E8BE 5428 0024                  		addq.b	#2,$24(a0)
0000E8C2 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E8CA 317C 434C 0002             		move.w	#$434C,2(a0)
0000E8D0 0028 0004 0001             		ori.b	#4,1(a0)
0000E8D6 117C 0008 0019             		move.b	#8,$19(a0)
0000E8DC 117C 0006 0018             		move.b	#6,$18(a0)
0000E8E2 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E8E8 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E8EE 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E8F0 5428 0024                  		addq.b	#2,$24(a0)
0000E8F4 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E8F6                            ; ===========================================================================
0000E8F6                            
0000E8F6                            Obj44_Solid:				; XREF: Obj44_Index
0000E8F6 323C 0013                  		move.w	#$13,d1
0000E8FA 343C 0028                  		move.w	#$28,d2
0000E8FE 6100 A704                  		bsr.w	Obj44_SolidWall
0000E902                            
0000E902                            Obj44_Display:				; XREF: Obj44_Index
0000E902 6100 F3DA                  		bsr.w	DisplaySprite
0000E906 3028 0008                  		move.w	8(a0),d0
0000E90A 0240 FF80                  		andi.w	#$FF80,d0
0000E90E 3238 F700                  		move.w	($FFFFF700).w,d1
0000E912 0441 0080                  		subi.w	#$80,d1
0000E916 0241 FF80                  		andi.w	#$FF80,d1
0000E91A 9041                       		sub.w	d1,d0
0000E91C 0C40 0280                  		cmpi.w	#$280,d0
0000E920 6200 F3F8                  		bhi.w	DeleteObject
0000E924 4E75                       		rts	
0000E926                            ; ===========================================================================
0000E926                            ; ---------------------------------------------------------------------------
0000E926                            ; Sprite mappings - walls (GHZ)
0000E926                            ; ---------------------------------------------------------------------------
0000E926                            Map_obj44:
0000E926                            	include "_maps\obj44.asm"
0000E926                            ; ---------------------------------------------------------------------------
0000E926                            ; Sprite mappings - walls (GHZ)
0000E926                            ; ---------------------------------------------------------------------------
0000E926 0000                       		dc.w byte_E256-Map_obj44
0000E928 0000                       		dc.w byte_E26B-Map_obj44
0000E92A 0000                       		dc.w byte_E280-Map_obj44
0000E92C 04                         byte_E256:	dc.b 4
0000E92D E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E932 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E937 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E93C 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E941 04                         byte_E26B:	dc.b 4
0000E942 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E947 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E94C 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E951 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E956 04                         byte_E280:	dc.b 4
0000E957 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E95C F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E961 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E966 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E96C 00                         		even
0000E96C 00                         		even
0000E96C                            
0000E96C                            ; ===========================================================================
0000E96C                            ; ---------------------------------------------------------------------------
0000E96C                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E96C                            ; ---------------------------------------------------------------------------
0000E96C                            
0000E96C                            Obj13:					; XREF: Obj_Index
0000E96C 7000                       		moveq	#0,d0
0000E96E 1028 0024                  		move.b	$24(a0),d0
0000E972 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E976 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E97A 6000 0000                  		bra.w	Obj14_ChkDel
0000E97E                            ; ===========================================================================
0000E97E 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000E980 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000E982                            ; ---------------------------------------------------------------------------
0000E982                            ;
0000E982                            ; Lava ball production rates
0000E982                            ;
0000E982 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000E988                            ; ===========================================================================
0000E988                            
0000E988                            Obj13_Main:				; XREF: Obj13_Index
0000E988 5428 0024                  		addq.b	#2,$24(a0)
0000E98C 1028 0028                  		move.b	$28(a0),d0
0000E990 E848                       		lsr.w	#4,d0
0000E992 0240 000F                  		andi.w	#$F,d0
0000E996 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000E99C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000E9A2 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E9A8                            
0000E9A8                            Obj13_MakeLava:				; XREF: Obj13_Index
0000E9A8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000E9AC 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000E9AE 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000E9B4 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000E9B8 6600                       		bne.s	locret_E302
0000E9BA 6100 F7A8                  		bsr.w	SingleObjLoad
0000E9BE 6600                       		bne.s	locret_E302
0000E9C0 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000E9C4 3368 0008 0008             		move.w	8(a0),8(a1)
0000E9CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E9D0 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E9D6                            
0000E9D6                            locret_E302:
0000E9D6 4E75                       		rts	
0000E9D8                            ; ===========================================================================
0000E9D8                            ; ---------------------------------------------------------------------------
0000E9D8                            ; Object 14 - lava balls (MZ, SLZ)
0000E9D8                            ; ---------------------------------------------------------------------------
0000E9D8                            
0000E9D8                            Obj14:					; XREF: Obj_Index
0000E9D8 7000                       		moveq	#0,d0
0000E9DA 1028 0024                  		move.b	$24(a0),d0
0000E9DE 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000E9E2 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000E9E6 6000 F2F6                  		bra.w	DisplaySprite
0000E9EA                            ; ===========================================================================
0000E9EA 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000E9EC 0000                       		dc.w Obj14_Action-Obj14_Index
0000E9EE 0000                       		dc.w Obj14_Delete-Obj14_Index
0000E9F0                            
0000E9F0 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000E9FA 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000EA02                            ; ===========================================================================
0000EA02                            
0000EA02                            Obj14_Main:				; XREF: Obj14_Index
0000EA02 5428 0024                  		addq.b	#2,$24(a0)
0000EA06 117C 0008 0016             		move.b	#8,$16(a0)
0000EA0C 117C 0008 0017             		move.b	#8,$17(a0)
0000EA12 217C 0000 B99C 0004        		move.l	#Map_obj14,4(a0)
0000EA1A 317C 0345 0002             		move.w	#$345,2(a0)
0000EA20 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000EA26 6600                       		bne.s	loc_E35A
0000EA28 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000EA2E                            
0000EA2E                            loc_E35A:
0000EA2E 117C 0004 0001             		move.b	#4,1(a0)
0000EA34 117C 0003 0018             		move.b	#3,$18(a0)
0000EA3A 117C 008B 0020             		move.b	#$8B,$20(a0)
0000EA40 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EA46 4A28 0029                  		tst.b	$29(a0)
0000EA4A 6700                       		beq.s	Obj14_SetSpeed
0000EA4C 5428 0018                  		addq.b	#2,$18(a0)
0000EA50                            
0000EA50                            Obj14_SetSpeed:
0000EA50 7000                       		moveq	#0,d0
0000EA52 1028 0028                  		move.b	$28(a0),d0
0000EA56 D040                       		add.w	d0,d0
0000EA58 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EA5E 117C 0008 0019             		move.b	#8,$19(a0)
0000EA64 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EA6A 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EA6C 117C 0010 0019             		move.b	#$10,$19(a0)
0000EA72 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EA78 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EA7E 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EA84                            
0000EA84                            Obj14_PlaySnd:
0000EA84 303C 00AE                  		move.w	#$AE,d0
0000EA88 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EA8E                            
0000EA8E                            Obj14_Action:				; XREF: Obj14_Index
0000EA8E 7000                       		moveq	#0,d0
0000EA90 1028 0028                  		move.b	$28(a0),d0
0000EA94 D040                       		add.w	d0,d0
0000EA96 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EA9A 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EA9E 6100 F218                  		bsr.w	SpeedToPos
0000EAA2 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EAA8 6100 C2F4                  		bsr.w	AnimateSprite
0000EAAC                            
0000EAAC                            Obj14_ChkDel:				; XREF: Obj13
0000EAAC 3028 0008                  		move.w	8(a0),d0
0000EAB0 0240 FF80                  		andi.w	#$FF80,d0
0000EAB4 3238 F700                  		move.w	($FFFFF700).w,d1
0000EAB8 0441 0080                  		subi.w	#$80,d1
0000EABC 0241 FF80                  		andi.w	#$FF80,d1
0000EAC0 9041                       		sub.w	d1,d0
0000EAC2 0C40 0280                  		cmpi.w	#$280,d0
0000EAC6 6200 F252                  		bhi.w	DeleteObject
0000EACA 4E75                       		rts	
0000EACC                            ; ===========================================================================
0000EACC 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EAD0 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EAD4 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EAD8 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EADC 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EADE                            ; ===========================================================================
0000EADE                            ; lavaball types 00-03 fly up and fall back down
0000EADE                            
0000EADE                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EADE 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EAE4 3028 0030                  		move.w	$30(a0),d0
0000EAE8 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EAEC 6400                       		bcc.s	loc_E41E	; if not, branch
0000EAEE 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EAF2                            
0000EAF2                            loc_E41E:
0000EAF2 08A8 0001 0022             		bclr	#1,$22(a0)
0000EAF8 4A68 0012                  		tst.w	$12(a0)
0000EAFC 6A00                       		bpl.s	locret_E430
0000EAFE 08E8 0001 0022             		bset	#1,$22(a0)
0000EB04                            
0000EB04                            locret_E430:
0000EB04 4E75                       		rts	
0000EB06                            ; ===========================================================================
0000EB06                            ; lavaball type	04 flies up until it hits the ceiling
0000EB06                            
0000EB06                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EB06 08E8 0001 0022             		bset	#1,$22(a0)
0000EB0C 6100 0000                  		bsr.w	ObjHitCeiling
0000EB10 4A41                       		tst.w	d1
0000EB12 6A00                       		bpl.s	locret_E452
0000EB14 117C 0008 0028             		move.b	#8,$28(a0)
0000EB1A 117C 0001 001C             		move.b	#1,$1C(a0)
0000EB20 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EB26                            
0000EB26                            locret_E452:
0000EB26 4E75                       		rts	
0000EB28                            ; ===========================================================================
0000EB28                            ; lavaball type	05 falls down until it hits the	floor
0000EB28                            
0000EB28                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EB28 08A8 0001 0022             		bclr	#1,$22(a0)
0000EB2E 6100 0000                  		bsr.w	ObjHitFloor
0000EB32 4A41                       		tst.w	d1
0000EB34 6A00                       		bpl.s	locret_E474
0000EB36 117C 0008 0028             		move.b	#8,$28(a0)
0000EB3C 117C 0001 001C             		move.b	#1,$1C(a0)
0000EB42 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EB48                            
0000EB48                            locret_E474:
0000EB48 4E75                       		rts	
0000EB4A                            ; ===========================================================================
0000EB4A                            ; lavaball types 06-07 move sideways
0000EB4A                            
0000EB4A                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EB4A 08E8 0000 0022             		bset	#0,$22(a0)
0000EB50 76F8                       		moveq	#-8,d3
0000EB52 6100 0000                  		bsr.w	ObjHitWallLeft
0000EB56 4A41                       		tst.w	d1
0000EB58 6A00                       		bpl.s	locret_E498
0000EB5A 117C 0008 0028             		move.b	#8,$28(a0)
0000EB60 117C 0003 001C             		move.b	#3,$1C(a0)
0000EB66 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EB6C                            
0000EB6C                            locret_E498:
0000EB6C 4E75                       		rts	
0000EB6E                            ; ===========================================================================
0000EB6E                            
0000EB6E                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EB6E 08A8 0000 0022             		bclr	#0,$22(a0)
0000EB74 7608                       		moveq	#8,d3
0000EB76 6100 0000                  		bsr.w	ObjHitWallRight
0000EB7A 4A41                       		tst.w	d1
0000EB7C 6A00                       		bpl.s	locret_E4BC
0000EB7E 117C 0008 0028             		move.b	#8,$28(a0)
0000EB84 117C 0003 001C             		move.b	#3,$1C(a0)
0000EB8A 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EB90                            
0000EB90                            locret_E4BC:
0000EB90 4E75                       		rts	
0000EB92                            ; ===========================================================================
0000EB92                            
0000EB92                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EB92 4E75                       		rts	
0000EB94                            ; ===========================================================================
0000EB94                            
0000EB94                            Obj14_Delete:				; XREF: Obj14_Index
0000EB94 6000 F184                  		bra.w	DeleteObject
0000EB98                            ; ===========================================================================
0000EB98                            Ani_obj14:
0000EB98                            	include "_anim\obj14.asm"
0000EB98                            ; ---------------------------------------------------------------------------
0000EB98                            ; Animation script - lava balls
0000EB98                            ; ---------------------------------------------------------------------------
0000EB98 0000                       		dc.w byte_E4CC-Ani_obj14
0000EB9A 0000                       		dc.w byte_E4D2-Ani_obj14
0000EB9C 0000                       		dc.w byte_E4D6-Ani_obj14
0000EB9E 0000                       		dc.w byte_E4DC-Ani_obj14
0000EBA0 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EBA6 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EBAA 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EBB0 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EBB4                            		even
0000EBB4                            		even
0000EBB4                            
0000EBB4                            ; ===========================================================================
0000EBB4                            ; ---------------------------------------------------------------------------
0000EBB4                            ; Object 6D - flame thrower (SBZ)
0000EBB4                            ; ---------------------------------------------------------------------------
0000EBB4                            
0000EBB4                            Obj6D:					; XREF: Obj_Index
0000EBB4 7000                       		moveq	#0,d0
0000EBB6 1028 0024                  		move.b	$24(a0),d0
0000EBBA 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EBBE 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EBC2                            ; ===========================================================================
0000EBC2 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EBC4 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EBC6                            ; ===========================================================================
0000EBC6                            
0000EBC6                            Obj6D_Main:				; XREF: Obj6D_Index
0000EBC6 5428 0024                  		addq.b	#2,$24(a0)
0000EBCA 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EBD2 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EBD8 0028 0004 0001             		ori.b	#4,1(a0)
0000EBDE 117C 0001 0018             		move.b	#1,$18(a0)
0000EBE4 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EBEA 117C 000C 0019             		move.b	#$C,$19(a0)
0000EBF0 1028 0028                  		move.b	$28(a0),d0
0000EBF4 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EBF8 D040                       		add.w	d0,d0		; multiply by 2
0000EBFA 3140 0030                  		move.w	d0,$30(a0)
0000EBFE 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EC02 1028 0028                  		move.b	$28(a0),d0
0000EC06 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EC0A EB48                       		lsl.w	#5,d0		; multiply by $20
0000EC0C 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EC10 117C 000A 0036             		move.b	#$A,$36(a0)
0000EC16 0828 0001 0022             		btst	#1,$22(a0)
0000EC1C 6700                       		beq.s	Obj6D_Action
0000EC1E 117C 0002 001C             		move.b	#2,$1C(a0)
0000EC24 117C 0015 0036             		move.b	#$15,$36(a0)
0000EC2A                            
0000EC2A                            Obj6D_Action:				; XREF: Obj6D_Index
0000EC2A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EC2E 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EC30 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EC36 0868 0000 001C             		bchg	#0,$1C(a0)
0000EC3C 6700                       		beq.s	loc_E57A
0000EC3E 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EC44 303C 00B3                  		move.w	#$B3,d0
0000EC48 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000EC4E                            
0000EC4E                            loc_E57A:
0000EC4E 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EC54 6100 C148                  		bsr.w	AnimateSprite
0000EC58 117C 0000 0020             		move.b	#0,$20(a0)
0000EC5E 1028 0036                  		move.b	$36(a0),d0
0000EC62 B028 001A                  		cmp.b	$1A(a0),d0
0000EC66 6600                       		bne.s	Obj6D_ChkDel
0000EC68 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EC6E                            
0000EC6E                            Obj6D_ChkDel:
0000EC6E 3028 0008                  		move.w	8(a0),d0
0000EC72 0240 FF80                  		andi.w	#$FF80,d0
0000EC76 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC7A 0441 0080                  		subi.w	#$80,d1
0000EC7E 0241 FF80                  		andi.w	#$FF80,d1
0000EC82 9041                       		sub.w	d1,d0
0000EC84 0C40 0280                  		cmpi.w	#$280,d0
0000EC88 6200 F090                  		bhi.w	DeleteObject
0000EC8C 6000 F050                  		bra.w	DisplaySprite
0000EC90                            ; ===========================================================================
0000EC90                            Ani_obj6D:
0000EC90                            	include "_anim\obj6D.asm"
0000EC90                            ; ---------------------------------------------------------------------------
0000EC90                            ; Animation script - flamethrower (SBZ)
0000EC90                            ; ---------------------------------------------------------------------------
0000EC90 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EC92 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EC94 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EC96 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EC98 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000ECA6 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000ECB0 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000ECBE 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000ECC8                            		even
0000ECC8                            		even
0000ECC8                            
0000ECC8                            ; ---------------------------------------------------------------------------
0000ECC8                            ; Sprite mappings - flame thrower (SBZ)
0000ECC8                            ; ---------------------------------------------------------------------------
0000ECC8                            Map_obj6D:
0000ECC8                            	include "_maps\obj6D.asm"
0000ECC8                            ; ---------------------------------------------------------------------------
0000ECC8                            ; Sprite mappings - flame thrower (SBZ)
0000ECC8                            ; ---------------------------------------------------------------------------
0000ECC8 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000ECCC 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000ECD0 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000ECD4 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000ECD8 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000ECDC 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000ECE0 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000ECE4 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000ECE8 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000ECEC 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000ECF0 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000ECF4 01                         byte_E620:	dc.b 1
0000ECF5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ECFA 02                         byte_E626:	dc.b 2
0000ECFB 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED00 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED05 02                         byte_E631:	dc.b 2
0000ED06 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED0B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED10 03                         byte_E63C:	dc.b 3
0000ED11 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ED16 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED1B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED20 03                         byte_E64C:	dc.b 3
0000ED21 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED26 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED2B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED30 04                         byte_E65C:	dc.b 4
0000ED31 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED36 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ED3B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED40 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED45 04                         byte_E671:	dc.b 4
0000ED46 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ED4B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED50 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED55 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED5A 05                         byte_E686:	dc.b 5
0000ED5B F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000ED60 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED65 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ED6A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED6F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED74 05                         byte_E6A0:	dc.b 5
0000ED75 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ED7A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ED7F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED84 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED89 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED8E 06                         byte_E6BA:	dc.b 6
0000ED8F E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000ED94 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000ED99 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED9E 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EDA3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EDA8 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDAD 06                         byte_E6D9:	dc.b 6
0000EDAE E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EDB3 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EDB8 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EDBD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EDC2 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EDC7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDCC 01                         byte_E6F8:	dc.b 1
0000EDCD 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EDD2 02                         byte_E6FE:	dc.b 2
0000EDD3 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EDD8 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EDDD 02                         byte_E709:	dc.b 2
0000EDDE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EDE3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EDE8 03                         byte_E714:	dc.b 3
0000EDE9 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EDEE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EDF3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EDF8 03                         byte_E724:	dc.b 3
0000EDF9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EDFE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE03 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE08 04                         byte_E734:	dc.b 4
0000EE09 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE0E 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE13 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE18 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE1D 04                         byte_E749:	dc.b 4
0000EE1E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EE23 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE28 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE2D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE32 05                         byte_E75E:	dc.b 5
0000EE33 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EE38 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE3D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE42 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE47 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE4C 05                         byte_E778:	dc.b 5
0000EE4D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EE52 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EE57 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE5C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE61 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE66 06                         byte_E792:	dc.b 6
0000EE67 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EE6C F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EE71 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE76 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EE7B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE80 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE85 06                         byte_E7B1:	dc.b 6
0000EE86 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EE8B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EE90 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EE95 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE9A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE9F 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEA4                            		even
0000EEA4                            		even
0000EEA4                            
0000EEA4                            ; ===========================================================================
0000EEA4                            ; ---------------------------------------------------------------------------
0000EEA4                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000EEA4                            ; ---------------------------------------------------------------------------
0000EEA4                            
0000EEA4                            Obj46:					; XREF: Obj_Index
0000EEA4 7000                       		moveq	#0,d0
0000EEA6 1028 0024                  		move.b	$24(a0),d0
0000EEAA 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000EEAE 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000EEB2                            ; ===========================================================================
0000EEB2 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000EEB4 0000                       		dc.w Obj46_Action-Obj46_Index
0000EEB6                            ; ===========================================================================
0000EEB6                            
0000EEB6                            Obj46_Main:				; XREF: Obj46_Index
0000EEB6 5428 0024                  		addq.b	#2,$24(a0)
0000EEBA 117C 000F 0016             		move.b	#$F,$16(a0)
0000EEC0 117C 000F 0017             		move.b	#$F,$17(a0)
0000EEC6 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000EECE 317C 4000 0002             		move.w	#$4000,2(a0)
0000EED4 117C 0004 0001             		move.b	#4,1(a0)
0000EEDA 117C 0003 0018             		move.b	#3,$18(a0)
0000EEE0 117C 0010 0019             		move.b	#$10,$19(a0)
0000EEE6 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EEEC 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000EEF2                            
0000EEF2                            Obj46_Action:				; XREF: Obj46_Index
0000EEF2 4A28 0001                  		tst.b	1(a0)
0000EEF6 6A00                       		bpl.s	Obj46_ChkDel
0000EEF8 7000                       		moveq	#0,d0
0000EEFA 1028 0028                  		move.b	$28(a0),d0	; get object type
0000EEFE 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000EF02 D040                       		add.w	d0,d0
0000EF04 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000EF08 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000EF0C 323C 001B                  		move.w	#$1B,d1
0000EF10 343C 0010                  		move.w	#$10,d2
0000EF14 363C 0011                  		move.w	#$11,d3
0000EF18 3828 0008                  		move.w	8(a0),d4
0000EF1C 6100 0000                  		bsr.w	SolidObject
0000EF20                            
0000EF20                            Obj46_ChkDel:
0000EF20 6100 EDBC                  		bsr.w	DisplaySprite
0000EF24 3028 0008                  		move.w	8(a0),d0
0000EF28 0240 FF80                  		andi.w	#$FF80,d0
0000EF2C 3238 F700                  		move.w	($FFFFF700).w,d1
0000EF30 0441 0080                  		subi.w	#$80,d1
0000EF34 0241 FF80                  		andi.w	#$FF80,d1
0000EF38 9041                       		sub.w	d1,d0
0000EF3A 0C40 0280                  		cmpi.w	#$280,d0
0000EF3E 6200 EDDA                  		bhi.w	DeleteObject
0000EF42 4E75                       		rts	
0000EF44                            ; ===========================================================================
0000EF44 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000EF46 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000EF48 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000EF4A 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000EF4C 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000EF4E                            ; ===========================================================================
0000EF4E                            
0000EF4E                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000EF4E 4E75                       		rts	
0000EF50                            ; ===========================================================================
0000EF50                            
0000EF50                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000EF50 3038 D008                  		move.w	($FFFFD008).w,d0
0000EF54 9068 0008                  		sub.w	8(a0),d0
0000EF58 6400                       		bcc.s	loc_E888
0000EF5A 4440                       		neg.w	d0
0000EF5C                            
0000EF5C                            loc_E888:
0000EF5C 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000EF60 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000EF62 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000EF68                            
0000EF68                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000EF68 7000                       		moveq	#0,d0
0000EF6A 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000EF6E 0828 0003 0028             		btst	#3,$28(a0)
0000EF74 6700                       		beq.s	loc_E8A8
0000EF76 4440                       		neg.w	d0
0000EF78 0640 0010                  		addi.w	#$10,d0
0000EF7C                            
0000EF7C                            loc_E8A8:
0000EF7C 3228 0030                  		move.w	$30(a0),d1
0000EF80 9240                       		sub.w	d0,d1
0000EF82 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000EF86 4E75                       		rts	
0000EF88                            ; ===========================================================================
0000EF88                            
0000EF88                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000EF88 6100 ED2E                  		bsr.w	SpeedToPos
0000EF8C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000EF92 6100 0000                  		bsr.w	ObjHitFloor
0000EF96 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000EF98 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000EF9C D368 000C                  		add.w	d1,$C(a0)
0000EFA0 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000EFA4 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EFAA 117C 0004 0028             		move.b	#4,$28(a0)
0000EFB0 3011                       		move.w	(a1),d0
0000EFB2 0240 03FF                  		andi.w	#$3FF,d0
0000EFB6 0C40 02E8                  		cmpi.w	#$2E8,d0
0000EFBA 6400                       		bcc.s	locret_E8EE
0000EFBC 117C 0000 0028             		move.b	#0,$28(a0)
0000EFC2                            
0000EFC2                            locret_E8EE:
0000EFC2 4E75                       		rts	
0000EFC4                            ; ===========================================================================
0000EFC4                            
0000EFC4                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000EFC4 7000                       		moveq	#0,d0
0000EFC6 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000EFCA E648                       		lsr.w	#3,d0
0000EFCC 3228 0030                  		move.w	$30(a0),d1
0000EFD0 9240                       		sub.w	d0,d1
0000EFD2 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000EFD6 4E75                       		rts	
0000EFD8                            ; ===========================================================================
0000EFD8                            ; ---------------------------------------------------------------------------
0000EFD8                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EFD8                            ; ---------------------------------------------------------------------------
0000EFD8                            Map_obj46:
0000EFD8                            	include "_maps\obj46.asm"
0000EFD8                            ; ---------------------------------------------------------------------------
0000EFD8                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EFD8                            ; ---------------------------------------------------------------------------
0000EFD8 0000                       		dc.w byte_E906-Map_obj46
0000EFDA 01                         byte_E906:	dc.b 1
0000EFDB F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000EFE0                            		even
0000EFE0                            		even
0000EFE0                            
0000EFE0                            ; ===========================================================================
0000EFE0                            ; ---------------------------------------------------------------------------
0000EFE0                            ; Object 12 - lamp (SYZ)
0000EFE0                            ; ---------------------------------------------------------------------------
0000EFE0                            
0000EFE0                            Obj12:					; XREF: Obj_Index
0000EFE0 7000                       		moveq	#0,d0
0000EFE2 1028 0024                  		move.b	$24(a0),d0
0000EFE6 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000EFEA 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000EFEE                            ; ===========================================================================
0000EFEE 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000EFF0 0000                       		dc.w Obj12_Animate-Obj12_Index
0000EFF2                            ; ===========================================================================
0000EFF2                            
0000EFF2                            Obj12_Main:				; XREF: Obj12_Index
0000EFF2 5428 0024                  		addq.b	#2,$24(a0)
0000EFF6 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000EFFE 317C 0000 0002             		move.w	#0,2(a0)
0000F004 117C 0004 0001             		move.b	#4,1(a0)
0000F00A 117C 0010 0019             		move.b	#$10,$19(a0)
0000F010 117C 0006 0018             		move.b	#6,$18(a0)
0000F016                            
0000F016                            Obj12_Animate:				; XREF: Obj12_Index
0000F016 5328 001E                  		subq.b	#1,$1E(a0)
0000F01A 6A00                       		bpl.s	Obj12_ChkDel
0000F01C 117C 0007 001E             		move.b	#7,$1E(a0)
0000F022 5228 001A                  		addq.b	#1,$1A(a0)
0000F026 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F02C 6500                       		bcs.s	Obj12_ChkDel
0000F02E 117C 0000 001A             		move.b	#0,$1A(a0)
0000F034                            
0000F034                            Obj12_ChkDel:
0000F034 3028 0008                  		move.w	8(a0),d0
0000F038 0240 FF80                  		andi.w	#$FF80,d0
0000F03C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F040 0441 0080                  		subi.w	#$80,d1
0000F044 0241 FF80                  		andi.w	#$FF80,d1
0000F048 9041                       		sub.w	d1,d0
0000F04A 0C40 0280                  		cmpi.w	#$280,d0
0000F04E 6200 ECCA                  		bhi.w	DeleteObject
0000F052 6000 EC8A                  		bra.w	DisplaySprite
0000F056                            ; ===========================================================================
0000F056                            ; ---------------------------------------------------------------------------
0000F056                            ; Sprite mappings - lamp (SYZ)
0000F056                            ; ---------------------------------------------------------------------------
0000F056                            Map_obj12:
0000F056                            	include "_maps\obj12.asm"
0000F056                            ; ---------------------------------------------------------------------------
0000F056                            ; Sprite mappings - lamp (SYZ)
0000F056                            ; ---------------------------------------------------------------------------
0000F056 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F05A 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F05E 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F062 02                         byte_E98E:	dc.b 2
0000F063 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F068 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F06D 02                         byte_E999:	dc.b 2
0000F06E F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F073 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F078 02                         byte_E9A4:	dc.b 2
0000F079 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F07E 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F083 02                         byte_E9AF:	dc.b 2
0000F084 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F089 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F08E 02                         byte_E9BA:	dc.b 2
0000F08F F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F094 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F099 02                         byte_E9C5:	dc.b 2
0000F09A F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F09F 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F0A4                            		even
0000F0A4                            		even
0000F0A4                            
0000F0A4                            ; ===========================================================================
0000F0A4                            ; ---------------------------------------------------------------------------
0000F0A4                            ; Object 47 - pinball bumper (SYZ)
0000F0A4                            ; ---------------------------------------------------------------------------
0000F0A4                            
0000F0A4                            Obj47:					; XREF: Obj_Index
0000F0A4 7000                       		moveq	#0,d0
0000F0A6 1028 0024                  		move.b	$24(a0),d0
0000F0AA 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F0AE 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F0B2                            ; ===========================================================================
0000F0B2 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F0B4 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F0B6                            ; ===========================================================================
0000F0B6                            
0000F0B6                            Obj47_Main:				; XREF: Obj47_Index
0000F0B6 5428 0024                  		addq.b	#2,$24(a0)
0000F0BA 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F0C2 317C 0380 0002             		move.w	#$380,2(a0)
0000F0C8 117C 0004 0001             		move.b	#4,1(a0)
0000F0CE 117C 0010 0019             		move.b	#$10,$19(a0)
0000F0D4 117C 0001 0018             		move.b	#1,$18(a0)
0000F0DA 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F0E0                            
0000F0E0                            Obj47_Hit:				; XREF: Obj47_Index
0000F0E0 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F0E4 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F0E8 4228 0021                  		clr.b	$21(a0)
0000F0EC 43F8 D000                  		lea	($FFFFD000).w,a1
0000F0F0 3228 0008                  		move.w	8(a0),d1
0000F0F4 3428 000C                  		move.w	$C(a0),d2
0000F0F8 9269 0008                  		sub.w	8(a1),d1
0000F0FC 9469 000C                  		sub.w	$C(a1),d2
0000F100 4EB9 0000 2F32             		jsr	(CalcAngle).l
0000F106 4EB9 0000 2C64             		jsr	(CalcSine).l
0000F10C C3FC F900                  		muls.w	#-$700,d1
0000F110 E081                       		asr.l	#8,d1
0000F112 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F116 C1FC F900                  		muls.w	#-$700,d0
0000F11A E080                       		asr.l	#8,d0
0000F11C 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F120 08E9 0001 0022             		bset	#1,$22(a1)
0000F126 08A9 0004 0022             		bclr	#4,$22(a1)
0000F12C 08A9 0005 0022             		bclr	#5,$22(a1)
0000F132 4229 003C                  		clr.b	$3C(a1)
0000F136 117C 0001 001C             		move.b	#1,$1C(a0)
0000F13C 303C 00B4                  		move.w	#$B4,d0
0000F140 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F146 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F14A 7000                       		moveq	#0,d0
0000F14C 1028 0023                  		move.b	$23(a0),d0
0000F150 6700                       		beq.s	Obj47_Score
0000F152 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F158 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F15A 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F15E                            
0000F15E                            Obj47_Score:
0000F15E 7001                       		moveq	#1,d0
0000F160 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F166 6100 EFFC                  		bsr.w	SingleObjLoad
0000F16A 6600                       		bne.s	Obj47_Display
0000F16C 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F170 3368 0008 0008             		move.w	8(a0),8(a1)
0000F176 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F17C 137C 0004 001A             		move.b	#4,$1A(a1)
0000F182                            
0000F182                            Obj47_Display:
0000F182 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F188 6100 BC14                  		bsr.w	AnimateSprite
0000F18C 3028 0008                  		move.w	8(a0),d0
0000F190 0240 FF80                  		andi.w	#$FF80,d0
0000F194 3238 F700                  		move.w	($FFFFF700).w,d1
0000F198 0441 0080                  		subi.w	#$80,d1
0000F19C 0241 FF80                  		andi.w	#$FF80,d1
0000F1A0 9041                       		sub.w	d1,d0
0000F1A2 0C40 0280                  		cmpi.w	#$280,d0
0000F1A6 6200                       		bhi.s	Obj47_ChkHit
0000F1A8 6000 EB34                  		bra.w	DisplaySprite
0000F1AC                            ; ===========================================================================
0000F1AC                            
0000F1AC                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F1AC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F1B0 7000                       		moveq	#0,d0
0000F1B2 1028 0023                  		move.b	$23(a0),d0
0000F1B6 6700                       		beq.s	Obj47_Delete
0000F1B8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F1BE                            
0000F1BE                            Obj47_Delete:
0000F1BE 6000 EB5A                  		bra.w	DeleteObject
0000F1C2                            ; ===========================================================================
0000F1C2                            Ani_obj47:
0000F1C2                            	include "_anim\obj47.asm"
0000F1C2                            ; ---------------------------------------------------------------------------
0000F1C2                            ; Animation script - flamethrower (SBZ)
0000F1C2                            ; ---------------------------------------------------------------------------
0000F1C2 0000                       		dc.w byte_EAF4-Ani_obj47
0000F1C4 0000                       		dc.w byte_EAF8-Ani_obj47
0000F1C6 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F1CA 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F1D2                            		even
0000F1D2                            		even
0000F1D2                            
0000F1D2                            ; ---------------------------------------------------------------------------
0000F1D2                            ; Sprite mappings - pinball bumper (SYZ)
0000F1D2                            ; ---------------------------------------------------------------------------
0000F1D2                            Map_obj47:
0000F1D2                            	include "_maps\obj47.asm"
0000F1D2                            ; ---------------------------------------------------------------------------
0000F1D2                            ; Sprite mappings - pinball bumper (SYZ)
0000F1D2                            ; ---------------------------------------------------------------------------
0000F1D2 0000                       		dc.w byte_EB06-Map_obj47
0000F1D4 0000                       		dc.w byte_EB11-Map_obj47
0000F1D6 0000                       		dc.w byte_EB1C-Map_obj47
0000F1D8 02                         byte_EB06:	dc.b 2
0000F1D9 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F1DE F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F1E3 02                         byte_EB11:	dc.b 2
0000F1E4 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F1E9 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F1EE 02                         byte_EB1C:	dc.b 2
0000F1EF F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F1F4 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F1FA 00                         		even
0000F1FA 00                         		even
0000F1FA                            
0000F1FA                            ; ===========================================================================
0000F1FA                            ; ---------------------------------------------------------------------------
0000F1FA                            ; Object 0D - signpost at the end of a level
0000F1FA                            ; ---------------------------------------------------------------------------
0000F1FA                            
0000F1FA                            Obj0D:					; XREF: Obj_Index
0000F1FA 7000                       		moveq	#0,d0
0000F1FC 1028 0024                  		move.b	$24(a0),d0
0000F200 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F204 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F208 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F20E 6100 BB8E                  		bsr.w	AnimateSprite
0000F212 6100 EACA                  		bsr.w	DisplaySprite
0000F216 3028 0008                  		move.w	8(a0),d0
0000F21A 0240 FF80                  		andi.w	#$FF80,d0
0000F21E 3238 F700                  		move.w	($FFFFF700).w,d1
0000F222 0441 0080                  		subi.w	#$80,d1
0000F226 0241 FF80                  		andi.w	#$FF80,d1
0000F22A 9041                       		sub.w	d1,d0
0000F22C 0C40 0280                  		cmpi.w	#$280,d0
0000F230 6200 EAE8                  		bhi.w	DeleteObject
0000F234 4E75                       		rts	
0000F236                            ; ===========================================================================
0000F236 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F238 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F23A 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F23C 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F23E 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F240                            ; ===========================================================================
0000F240                            
0000F240                            Obj0D_Main:				; XREF: Obj0D_Index
0000F240 5428 0024                  		addq.b	#2,$24(a0)
0000F244 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F24C 317C 0680 0002             		move.w	#$680,2(a0)
0000F252 117C 0004 0001             		move.b	#4,1(a0)
0000F258 117C 0018 0019             		move.b	#$18,$19(a0)
0000F25E 117C 0004 0018             		move.b	#4,$18(a0)
0000F264                            
0000F264                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F264 3038 D008                  		move.w	($FFFFD008).w,d0
0000F268 9068 0008                  		sub.w	8(a0),d0
0000F26C 6500                       		bcs.s	locret_EBBA
0000F26E 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F272 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F274 303C 00CF                  		move.w	#$CF,d0
0000F278 4EB9 0000 15BA             		jsr	(PlaySound).l	; play signpost	sound
0000F27E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F282 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F288 5428 0024                  		addq.b	#2,$24(a0)
0000F28C                            
0000F28C                            locret_EBBA:
0000F28C 4E75                       		rts	
0000F28E                            ; ===========================================================================
0000F28E                            
0000F28E                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F28E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F292 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F294 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F29A 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F29E 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F2A4 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F2A6 5428 0024                  		addq.b	#2,$24(a0)
0000F2AA                            
0000F2AA                            Obj0D_Sparkle:
0000F2AA 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F2AE 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F2B0 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F2B6 7000                       		moveq	#0,d0
0000F2B8 1028 0034                  		move.b	$34(a0),d0
0000F2BC 5428 0034                  		addq.b	#2,$34(a0)
0000F2C0 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F2C6 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F2CA 6100 EE98                  		bsr.w	SingleObjLoad
0000F2CE 6600                       		bne.s	locret_EC42
0000F2D0 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F2D4 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F2DA 101A                       		move.b	(a2)+,d0
0000F2DC 4880                       		ext.w	d0
0000F2DE D068 0008                  		add.w	8(a0),d0
0000F2E2 3340 0008                  		move.w	d0,8(a1)
0000F2E6 101A                       		move.b	(a2)+,d0
0000F2E8 4880                       		ext.w	d0
0000F2EA D068 000C                  		add.w	$C(a0),d0
0000F2EE 3340 000C                  		move.w	d0,$C(a1)
0000F2F2 237C 0000 A53C 0004        		move.l	#Map_obj25,4(a1)
0000F2FA 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F300 137C 0004 0001             		move.b	#4,1(a1)
0000F306 137C 0002 0018             		move.b	#2,$18(a1)
0000F30C 137C 0008 0019             		move.b	#8,$19(a1)
0000F312                            
0000F312                            locret_EC42:
0000F312 4E75                       		rts	
0000F314                            ; ===========================================================================
0000F314 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F316 0808                       		dc.b	8,   8
0000F318 F000                       		dc.b -$10,   0
0000F31A 18F8                       		dc.b  $18,  -8
0000F31C 00F8                       		dc.b	0,  -8
0000F31E 1000                       		dc.b  $10,   0
0000F320 E808                       		dc.b -$18,   8
0000F322 1810                       		dc.b  $18, $10
0000F324                            ; ===========================================================================
0000F324                            
0000F324                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F324 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F328 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F32C 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F332 6600                       		bne.s	loc_EC70
0000F334 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F33A 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F340 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F342 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F348 6000                       		bra.s	loc_EC70
0000F34A                            
0000F34A                            Obj0D_MoveLeft:
0000F34A 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F350                            
0000F350                            loc_EC70:
0000F350 4A38 D000                  		tst.b	($FFFFD000).w
0000F354 6700                       		beq.s	loc_EC86
0000F356 3038 D008                  		move.w	($FFFFD008).w,d0
0000F35A 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F35E 0641 0128                  		addi.w	#$128,d1
0000F362 B041                       		cmp.w	d1,d0
0000F364 6500                       		bcs.s	locret_ECEE
0000F366                            
0000F366                            loc_EC86:
0000F366 5428 0024                  		addq.b	#2,$24(a0)
0000F36A                            
0000F36A                            ; ---------------------------------------------------------------------------
0000F36A                            ; Subroutine to	set up bonuses at the end of an	act
0000F36A                            ; ---------------------------------------------------------------------------
0000F36A                            
0000F36A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F36A                            
0000F36A                            
0000F36A                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F36A 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F36E 6600                       		bne.s	locret_ECEE
0000F370 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F376 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F37A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F37E 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F384 7010                       		moveq	#$10,d0
0000F386 4EB9 0000 17D6             		jsr	(LoadPLC2).l	; load title card patterns
0000F38C 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F392 7000                       		moveq	#0,d0
0000F394 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F398 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F39C 7200                       		moveq	#0,d1
0000F39E 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F3A2 D041                       		add.w	d1,d0		; add up your time
0000F3A4 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F3A8 7214                       		moveq	#$14,d1
0000F3AA B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F3AC 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F3AE 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F3B0                            
0000F3B0                            loc_ECD0:
0000F3B0 D040                       		add.w	d0,d0
0000F3B2 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F3B8 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F3BC C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F3C0 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F3C4 303C 008E                  		move.w	#$8E,d0
0000F3C8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F3CE                            
0000F3CE                            locret_ECEE:
0000F3CE 4E75                       		rts	
0000F3D0                            ; End of function GotThroughAct
0000F3D0                            
0000F3D0                            ; ===========================================================================
0000F3D0 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F3E4 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F3FA                            ; ===========================================================================
0000F3FA                            
0000F3FA                            locret_ED1A:				; XREF: Obj0D_Index
0000F3FA 4E75                       		rts	
0000F3FC                            ; ===========================================================================
0000F3FC                            Ani_obj0D:
0000F3FC                            	include "_anim\obj0D.asm"
0000F3FC                            ; ---------------------------------------------------------------------------
0000F3FC                            ; Animation script - signpost
0000F3FC                            ; ---------------------------------------------------------------------------
0000F3FC 0000                       		dc.w byte_ED24-Ani_obj0D
0000F3FE 0000                       		dc.w byte_ED28-Ani_obj0D
0000F400 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F402 0000                       		dc.w byte_ED34-Ani_obj0D
0000F404 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F408 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F40E 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F414 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F418 00                         		even
0000F418 00                         		even
0000F418                            
0000F418                            ; ---------------------------------------------------------------------------
0000F418                            ; Sprite mappings - signpost
0000F418                            ; ---------------------------------------------------------------------------
0000F418                            Map_obj0D:
0000F418                            	include "_maps\obj0D.asm"
0000F418                            ; ---------------------------------------------------------------------------
0000F418                            ; Sprite mappings - signpost
0000F418                            ; ---------------------------------------------------------------------------
0000F418 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F41C 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F420 0000                       		dc.w byte_ED73-Map_obj0D
0000F422 03                         byte_ED42:	dc.b 3
0000F423 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F428 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F42D 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F432 02                         byte_ED52:	dc.b 2
0000F433 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F438 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F43D 02                         byte_ED5D:	dc.b 2
0000F43E F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F443 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F448 02                         byte_ED68:	dc.b 2
0000F449 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F44E 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F453 03                         byte_ED73:	dc.b 3
0000F454 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F459 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F45E 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F464 00                         		even
0000F464 00                         		even
0000F464                            
0000F464                            ; ===========================================================================
0000F464                            ; ---------------------------------------------------------------------------
0000F464                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F464                            ; ---------------------------------------------------------------------------
0000F464                            
0000F464                            Obj4C:					; XREF: Obj_Index
0000F464 7000                       		moveq	#0,d0
0000F466 1028 0024                  		move.b	$24(a0),d0
0000F46A 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F46E 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F472 6000 0000                  		bra.w	Obj4D_ChkDel
0000F476                            ; ===========================================================================
0000F476 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F478 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F47A 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F47C 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F47E 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F480 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F482                            ; ===========================================================================
0000F482                            
0000F482                            Obj4C_Main:				; XREF: Obj4C_Index
0000F482 5428 0024                  		addq.b	#2,$24(a0)
0000F486 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F48E 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F494 117C 0004 0001             		move.b	#4,1(a0)
0000F49A 117C 0001 0018             		move.b	#1,$18(a0)
0000F4A0 117C 0038 0019             		move.b	#$38,$19(a0)
0000F4A6 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F4AC                            
0000F4AC                            loc_EDCC:				; XREF: Obj4C_Index
0000F4AC 5368 0032                  		subq.w	#1,$32(a0)
0000F4B0 6A00                       		bpl.s	locret_EDF0
0000F4B2 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F4B8 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F4BC 3228 000C                  		move.w	$C(a0),d1
0000F4C0 B041                       		cmp.w	d1,d0
0000F4C2 6400                       		bcc.s	locret_EDF0
0000F4C4 0441 0170                  		subi.w	#$170,d1
0000F4C8 B041                       		cmp.w	d1,d0
0000F4CA 6500                       		bcs.s	locret_EDF0
0000F4CC 5428 0024                  		addq.b	#2,$24(a0)
0000F4D0                            
0000F4D0                            locret_EDF0:
0000F4D0 4E75                       		rts	
0000F4D2                            ; ===========================================================================
0000F4D2                            
0000F4D2                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F4D2 5428 0024                  		addq.b	#2,$24(a0)
0000F4D6 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F4DA 6600                       		bne.s	loc_EE18
0000F4DC 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F4E0 3368 0008 0008             		move.w	8(a0),8(a1)
0000F4E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F4EC 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F4F2 2348 003C                  		move.l	a0,$3C(a1)
0000F4F6                            
0000F4F6                            loc_EE18:
0000F4F6 117C 0001 001C             		move.b	#1,$1C(a0)
0000F4FC 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F500 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F502 117C 0004 001C             		move.b	#4,$1C(a0)
0000F508 6000                       		bra.s	Obj4C_Display
0000F50A                            ; ===========================================================================
0000F50A                            
0000F50A                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F50A 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F50E 08E9 0001 0022             		bset	#1,$22(a1)
0000F514 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F51A 6000                       		bra.s	Obj4C_Display
0000F51C                            ; ===========================================================================
0000F51C                            
0000F51C                            loc_EE3E:				; XREF: Obj4C_Index
0000F51C 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F520 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F522 5428 0024                  		addq.b	#2,$24(a0)
0000F526 4E75                       		rts	
0000F528                            ; ===========================================================================
0000F528                            
0000F528                            Obj4C_Display:				; XREF: Obj4C_Index
0000F528 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F52E 6100 B86E                  		bsr.w	AnimateSprite
0000F532 6100 E7AA                  		bsr.w	DisplaySprite
0000F536 4E75                       		rts	
0000F538                            ; ===========================================================================
0000F538                            
0000F538                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F538 117C 0000 001C             		move.b	#0,$1C(a0)
0000F53E 117C 0002 0024             		move.b	#2,$24(a0)
0000F544 4A28 0028                  		tst.b	$28(a0)
0000F548 6700 E7D0                  		beq.w	DeleteObject
0000F54C 4E75                       		rts	
0000F54E                            ; ===========================================================================
0000F54E                            ; ---------------------------------------------------------------------------
0000F54E                            ; Object 4D - lava geyser / lavafall (MZ)
0000F54E                            ; ---------------------------------------------------------------------------
0000F54E                            
0000F54E                            Obj4D:					; XREF: Obj_Index
0000F54E 7000                       		moveq	#0,d0
0000F550 1028 0024                  		move.b	$24(a0),d0
0000F554 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F558 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F55C 6000 E780                  		bra.w	DisplaySprite
0000F560                            ; ===========================================================================
0000F560 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F562 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F564 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F566 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F568                            
0000F568 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F56C                            ; ===========================================================================
0000F56C                            
0000F56C                            Obj4D_Main:				; XREF: Obj4D_Index
0000F56C 5428 0024                  		addq.b	#2,$24(a0)
0000F570 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F576 4A28 0028                  		tst.b	$28(a0)
0000F57A 6700                       		beq.s	loc_EEA4
0000F57C 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F582                            
0000F582                            loc_EEA4:
0000F582 7000                       		moveq	#0,d0
0000F584 1028 0028                  		move.b	$28(a0),d0
0000F588 D040                       		add.w	d0,d0
0000F58A 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F590 2248                       		movea.l	a0,a1
0000F592 7201                       		moveq	#1,d1
0000F594 6100                       		bsr.s	Obj4D_MakeLava
0000F596 6000                       		bra.s	loc_EF10
0000F598                            ; ===========================================================================
0000F598                            
0000F598                            Obj4D_Loop:
0000F598 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F59C 6600                       		bne.s	loc_EF0A
0000F59E                            
0000F59E                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F59E 12BC 004D                  		move.b	#$4D,0(a1)
0000F5A2 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F5AA 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F5B0 137C 0004 0001             		move.b	#4,1(a1)
0000F5B6 137C 0020 0019             		move.b	#$20,$19(a1)
0000F5BC 3368 0008 0008             		move.w	8(a0),8(a1)
0000F5C2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F5C8 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F5CE 137C 0001 0018             		move.b	#1,$18(a1)
0000F5D4 137C 0005 001C             		move.b	#5,$1C(a1)
0000F5DA 4A28 0028                  		tst.b	$28(a0)
0000F5DE 6700                       		beq.s	loc_EF0A
0000F5E0 137C 0002 001C             		move.b	#2,$1C(a1)
0000F5E6                            
0000F5E6                            loc_EF0A:
0000F5E6 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F5EA 4E75                       		rts	
0000F5EC                            ; ===========================================================================
0000F5EC                            
0000F5EC                            loc_EF10:				; XREF: Obj4D_Main
0000F5EC 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F5F2 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F5F8 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F5FE 137C 0093 0020             		move.b	#$93,$20(a1)
0000F604 137C 0080 0016             		move.b	#$80,$16(a1)
0000F60A 08E9 0004 0001             		bset	#4,1(a1)
0000F610 5829 0024                  		addq.b	#4,$24(a1)
0000F614 2348 003C                  		move.l	a0,$3C(a1)
0000F618 4A28 0028                  		tst.b	$28(a0)
0000F61C 6700                       		beq.s	Obj4D_PlaySnd
0000F61E 7200                       		moveq	#0,d1
0000F620 6100 FF76                  		bsr.w	Obj4D_Loop
0000F624 5429 0024                  		addq.b	#2,$24(a1)
0000F628 08E9 0004 0002             		bset	#4,2(a1)
0000F62E 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F634 137C 0000 0018             		move.b	#0,$18(a1)
0000F63A 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F640 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F646 117C 0000 0028             		move.b	#0,$28(a0)
0000F64C                            
0000F64C                            Obj4D_PlaySnd:
0000F64C 303C 00C8                  		move.w	#$C8,d0
0000F650 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000F656                            
0000F656                            Obj4D_Action:				; XREF: Obj4D_Index
0000F656 7000                       		moveq	#0,d0
0000F658 1028 0028                  		move.b	$28(a0),d0
0000F65C D040                       		add.w	d0,d0
0000F65E 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F662 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F666 6100 E650                  		bsr.w	SpeedToPos
0000F66A 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F670 6100 B72C                  		bsr.w	AnimateSprite
0000F674                            
0000F674                            Obj4D_ChkDel:				; XREF: Obj4C
0000F674 3028 0008                  		move.w	8(a0),d0
0000F678 0240 FF80                  		andi.w	#$FF80,d0
0000F67C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F680 0441 0080                  		subi.w	#$80,d1
0000F684 0241 FF80                  		andi.w	#$FF80,d1
0000F688 9041                       		sub.w	d1,d0
0000F68A 0C40 0280                  		cmpi.w	#$280,d0
0000F68E 6200 E68A                  		bhi.w	DeleteObject
0000F692 4E75                       		rts	
0000F694                            ; ===========================================================================
0000F694 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F696 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F698                            ; ===========================================================================
0000F698                            
0000F698                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F698 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F69E 3028 0030                  		move.w	$30(a0),d0
0000F6A2 B068 000C                  		cmp.w	$C(a0),d0
0000F6A6 6400                       		bcc.s	locret_EFDA
0000F6A8 5828 0024                  		addq.b	#4,$24(a0)
0000F6AC 2268 003C                  		movea.l	$3C(a0),a1
0000F6B0 137C 0003 001C             		move.b	#3,$1C(a1)
0000F6B6                            
0000F6B6                            locret_EFDA:
0000F6B6 4E75                       		rts	
0000F6B8                            ; ===========================================================================
0000F6B8                            
0000F6B8                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F6B8 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F6BE 3028 0030                  		move.w	$30(a0),d0
0000F6C2 B068 000C                  		cmp.w	$C(a0),d0
0000F6C6 6400                       		bcc.s	locret_EFFA
0000F6C8 5828 0024                  		addq.b	#4,$24(a0)
0000F6CC 2268 003C                  		movea.l	$3C(a0),a1
0000F6D0 137C 0001 001C             		move.b	#1,$1C(a1)
0000F6D6                            
0000F6D6                            locret_EFFA:
0000F6D6 4E75                       		rts	
0000F6D8                            ; ===========================================================================
0000F6D8                            
0000F6D8                            loc_EFFC:				; XREF: Obj4D_Index
0000F6D8 2268 003C                  		movea.l	$3C(a0),a1
0000F6DC 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F6E2 6700 0000                  		beq.w	Obj4D_Delete
0000F6E6 3029 000C                  		move.w	$C(a1),d0
0000F6EA 0640 0060                  		addi.w	#$60,d0
0000F6EE 3140 000C                  		move.w	d0,$C(a0)
0000F6F2 9068 0030                  		sub.w	$30(a0),d0
0000F6F6 4440                       		neg.w	d0
0000F6F8 7208                       		moveq	#8,d1
0000F6FA 0C40 0040                  		cmpi.w	#$40,d0
0000F6FE 6C00                       		bge.s	loc_F026
0000F700 720B                       		moveq	#$B,d1
0000F702                            
0000F702                            loc_F026:
0000F702 0C40 0080                  		cmpi.w	#$80,d0
0000F706 6F00                       		ble.s	loc_F02E
0000F708 720E                       		moveq	#$E,d1
0000F70A                            
0000F70A                            loc_F02E:
0000F70A 5328 001E                  		subq.b	#1,$1E(a0)
0000F70E 6A00                       		bpl.s	loc_F04C
0000F710 117C 0007 001E             		move.b	#7,$1E(a0)
0000F716 5228 001B                  		addq.b	#1,$1B(a0)
0000F71A 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F720 6500                       		bcs.s	loc_F04C
0000F722 117C 0000 001B             		move.b	#0,$1B(a0)
0000F728                            
0000F728                            loc_F04C:
0000F728 1028 001B                  		move.b	$1B(a0),d0
0000F72C D001                       		add.b	d1,d0
0000F72E 1140 001A                  		move.b	d0,$1A(a0)
0000F732 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F736                            ; ===========================================================================
0000F736                            
0000F736                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F736 6000 E5E2                  		bra.w	DeleteObject
0000F73A                            ; ===========================================================================
0000F73A                            ; ---------------------------------------------------------------------------
0000F73A                            ; Object 4E - advancing	wall of	lava (MZ)
0000F73A                            ; ---------------------------------------------------------------------------
0000F73A                            
0000F73A                            Obj4E:					; XREF: Obj_Index
0000F73A 7000                       		moveq	#0,d0
0000F73C 1028 0024                  		move.b	$24(a0),d0
0000F740 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F744 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F748                            ; ===========================================================================
0000F748 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F74A 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F74C 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F74E 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F750 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F752                            ; ===========================================================================
0000F752                            
0000F752                            Obj4E_Main:				; XREF: Obj4E_Index
0000F752 5828 0024                  		addq.b	#4,$24(a0)
0000F756 2248                       		movea.l	a0,a1
0000F758 7201                       		moveq	#1,d1
0000F75A 6000                       		bra.s	Obj4E_Main2
0000F75C                            ; ===========================================================================
0000F75C                            
0000F75C                            Obj4E_Loop:
0000F75C 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F760 6600                       		bne.s	loc_F0C8
0000F762                            
0000F762                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F762 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F766 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F76E 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F774 137C 0004 0001             		move.b	#4,1(a1)
0000F77A 137C 0050 0019             		move.b	#$50,$19(a1)
0000F780 3368 0008 0008             		move.w	8(a0),8(a1)
0000F786 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F78C 137C 0001 0018             		move.b	#1,$18(a1)
0000F792 137C 0000 001C             		move.b	#0,$1C(a1)
0000F798 137C 0094 0020             		move.b	#$94,$20(a1)
0000F79E 2348 003C                  		move.l	a0,$3C(a1)
0000F7A2                            
0000F7A2                            loc_F0C8:
0000F7A2 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F7A6                            
0000F7A6 5C29 0024                  		addq.b	#6,$24(a1)
0000F7AA 137C 0004 001A             		move.b	#4,$1A(a1)
0000F7B0                            
0000F7B0                            Obj4E_Action:				; XREF: Obj4E_Index
0000F7B0 3038 D008                  		move.w	($FFFFD008).w,d0
0000F7B4 9068 0008                  		sub.w	8(a0),d0
0000F7B8 6400                       		bcc.s	Obj4E_ChkSonic
0000F7BA 4440                       		neg.w	d0
0000F7BC                            
0000F7BC                            Obj4E_ChkSonic:
0000F7BC 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F7C0 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F7C2 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F7C6 9068 000C                  		sub.w	$C(a0),d0
0000F7CA 6400                       		bcc.s	loc_F0F4
0000F7CC 4440                       		neg.w	d0
0000F7CE                            
0000F7CE                            loc_F0F4:
0000F7CE 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F7D2 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F7D4 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F7DA 6000                       		bra.s	Obj4E_Solid
0000F7DC                            ; ===========================================================================
0000F7DC                            
0000F7DC                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F7DC 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F7E0 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F7E2 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F7E8 5528 0024                  		subq.b	#2,$24(a0)
0000F7EC                            
0000F7EC                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F7EC 323C 002B                  		move.w	#$2B,d1
0000F7F0 343C 0018                  		move.w	#$18,d2
0000F7F4 3602                       		move.w	d2,d3
0000F7F6 5243                       		addq.w	#1,d3
0000F7F8 3828 0008                  		move.w	8(a0),d4
0000F7FC 1028 0024                  		move.b	$24(a0),d0
0000F800 3F00                       		move.w	d0,-(sp)
0000F802 6100 0000                  		bsr.w	SolidObject
0000F806 301F                       		move.w	(sp)+,d0
0000F808 1140 0024                  		move.b	d0,$24(a0)
0000F80C 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F812 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F814 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F818 4228 0036                  		clr.b	$36(a0)
0000F81C                            
0000F81C                            Obj4E_Animate:
0000F81C 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F822 6100 B57A                  		bsr.w	AnimateSprite
0000F826 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F82C 6400                       		bcc.s	Obj4E_ChkDel
0000F82E 6100 E488                  		bsr.w	SpeedToPos
0000F832                            
0000F832                            Obj4E_ChkDel:
0000F832 6100 E4AA                  		bsr.w	DisplaySprite
0000F836 4A28 0036                  		tst.b	$36(a0)
0000F83A 6600                       		bne.s	locret_F17E
0000F83C 3028 0008                  		move.w	8(a0),d0
0000F840 0240 FF80                  		andi.w	#$FF80,d0
0000F844 3238 F700                  		move.w	($FFFFF700).w,d1
0000F848 0441 0080                  		subi.w	#$80,d1
0000F84C 0241 FF80                  		andi.w	#$FF80,d1
0000F850 9041                       		sub.w	d1,d0
0000F852 0C40 0280                  		cmpi.w	#$280,d0
0000F856 6200                       		bhi.s	Obj4E_ChkGone
0000F858                            
0000F858                            locret_F17E:
0000F858 4E75                       		rts	
0000F85A                            ; ===========================================================================
0000F85A                            
0000F85A                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F85A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F85E 7000                       		moveq	#0,d0
0000F860 1028 0023                  		move.b	$23(a0),d0
0000F864 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F86A 117C 0008 0024             		move.b	#8,$24(a0)
0000F870 4E75                       		rts	
0000F872                            ; ===========================================================================
0000F872                            
0000F872                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F872 2268 003C                  		movea.l	$3C(a0),a1
0000F876 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F87C 6700                       		beq.s	Obj4E_Delete
0000F87E 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F884 0468 0080 0008             		subi.w	#$80,8(a0)
0000F88A 6000 E452                  		bra.w	DisplaySprite
0000F88E                            ; ===========================================================================
0000F88E                            
0000F88E                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F88E 6000 E48A                  		bra.w	DeleteObject
0000F892                            ; ===========================================================================
0000F892                            ; ---------------------------------------------------------------------------
0000F892                            ; Object 54 - invisible	lava tag (MZ)
0000F892                            ; ---------------------------------------------------------------------------
0000F892                            
0000F892                            Obj54:					; XREF: Obj_Index
0000F892 7000                       		moveq	#0,d0
0000F894 1028 0024                  		move.b	$24(a0),d0
0000F898 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F89C 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F8A0                            ; ===========================================================================
0000F8A0 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F8A2 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F8A4                            
0000F8A4 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F8A8                            ; ===========================================================================
0000F8A8                            
0000F8A8                            Obj54_Main:				; XREF: Obj54_Index
0000F8A8 5428 0024                  		addq.b	#2,$24(a0)
0000F8AC 7000                       		moveq	#0,d0
0000F8AE 1028 0028                  		move.b	$28(a0),d0
0000F8B2 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F8B8 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F8C0 117C 0084 0001             		move.b	#$84,1(a0)
0000F8C6                            
0000F8C6                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F8C6 3028 0008                  		move.w	8(a0),d0
0000F8CA 0240 FF80                  		andi.w	#$FF80,d0
0000F8CE 3238 F700                  		move.w	($FFFFF700).w,d1
0000F8D2 0441 0080                  		subi.w	#$80,d1
0000F8D6 0241 FF80                  		andi.w	#$FF80,d1
0000F8DA 9041                       		sub.w	d1,d0
0000F8DC 6B00 E43C                  		bmi.w	DeleteObject
0000F8E0 0C40 0280                  		cmpi.w	#$280,d0
0000F8E4 6200 E434                  		bhi.w	DeleteObject
0000F8E8 4E75                       		rts	
0000F8EA                            ; ===========================================================================
0000F8EA                            ; ---------------------------------------------------------------------------
0000F8EA                            ; Sprite mappings - invisible lava tag (MZ)
0000F8EA                            ; ---------------------------------------------------------------------------
0000F8EA                            Map_obj54:
0000F8EA                            	include "_maps\obj54.asm"
0000F8EA                            ; ---------------------------------------------------------------------------
0000F8EA                            ; Sprite mappings - invisible lava tag (MZ)
0000F8EA                            ; ---------------------------------------------------------------------------
0000F8EA 0000                       		dc.w byte_F212-Map_obj54
0000F8EC 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F8EE 00                         		even
0000F8EE 00                         		even
0000F8EE                            
0000F8EE                            Ani_obj4C:
0000F8EE                            	include "_anim\obj4C.asm"
0000F8EE                            ; ---------------------------------------------------------------------------
0000F8EE                            ; Animation script - geyser of lava (MZ)
0000F8EE                            ; ---------------------------------------------------------------------------
0000F8EE 0000                       		dc.w byte_F220-Ani_obj4C
0000F8F0 0000                       		dc.w byte_F22A-Ani_obj4C
0000F8F2 0000                       		dc.w byte_F22E-Ani_obj4C
0000F8F4 0000                       		dc.w byte_F232-Ani_obj4C
0000F8F6 0000                       		dc.w byte_F23A-Ani_obj4C
0000F8F8 0000                       		dc.w byte_F23E-Ani_obj4C
0000F8FA 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F904 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F908 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F90C 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F914 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F918 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F91C                            		even
0000F91C                            		even
0000F91C                            
0000F91C                            Ani_obj4E:
0000F91C                            	include "_anim\obj4E.asm"
0000F91C                            ; ---------------------------------------------------------------------------
0000F91C                            ; Animation script - advancing wall of lava (MZ)
0000F91C                            ; ---------------------------------------------------------------------------
0000F91C 0000                       		dc.w byte_F244-Ani_obj4E
0000F91E 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F924                            		even
0000F924                            		even
0000F924                            
0000F924                            ; ---------------------------------------------------------------------------
0000F924                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F924                            ; ---------------------------------------------------------------------------
0000F924                            Map_obj4C:
0000F924                            	include "_maps\obj4C.asm"
0000F924                            ; ---------------------------------------------------------------------------
0000F924                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F924                            ; ---------------------------------------------------------------------------
0000F924 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F928 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F92C 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F930 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F934 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F938 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F93C 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F940 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F944 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F948 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F94C 02                         byte_F272:	dc.b 2
0000F94D EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F952 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F957 02                         byte_F27D:	dc.b 2
0000F958 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F95D EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F962 04                         byte_F288:	dc.b 4
0000F963 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F968 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F96D F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F972 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F977 04                         byte_F29D:	dc.b 4
0000F978 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F97D F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F982 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F987 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F98C 06                         byte_F2B2:	dc.b 6
0000F98D EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F992 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F997 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F99C EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F9A1 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000F9A6 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000F9AB 06                         byte_F2D1:	dc.b 6
0000F9AC EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F9B1 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F9B6 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F9BB EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F9C0 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000F9C5 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000F9CA 02                         byte_F2F0:	dc.b 2
0000F9CB E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000F9D0 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000F9D5 02                         byte_F2FB:	dc.b 2
0000F9D6 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000F9DB E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000F9E0 0A                         byte_F306:	dc.b $A
0000F9E1 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F9E6 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F9EB B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F9F0 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F9F5 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F9FA D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F9FF F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FA04 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FA09 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FA0E 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FA13 0A                         byte_F339:	dc.b $A
0000FA14 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FA19 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FA1E B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FA23 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FA28 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FA2D D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FA32 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FA37 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FA3C 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FA41 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FA46 0A                         byte_F36C:	dc.b $A
0000FA47 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FA4C 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FA51 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FA56 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FA5B D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FA60 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FA65 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FA6A F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FA6F 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FA74 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FA79 06                         byte_F39F:	dc.b 6
0000FA7A 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FA7F 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FA84 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FA89 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FA8E D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FA93 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FA98 06                         byte_F3BE:	dc.b 6
0000FA99 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FA9E 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FAA3 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FAA8 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FAAD D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FAB2 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FAB7 06                         byte_F3DD:	dc.b 6
0000FAB8 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FABD 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FAC2 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FAC7 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FACC D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FAD1 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FAD6 10                         byte_F3FC:	dc.b $10
0000FAD7 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FADC 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FAE1 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FAE6 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FAEB D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FAF0 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FAF5 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FAFA F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FAFF 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FB04 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FB09 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FB0E 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FB13 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FB18 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FB1D 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FB22 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FB27 10                         byte_F44D:	dc.b $10
0000FB28 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FB2D 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FB32 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FB37 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FB3C D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FB41 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FB46 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FB4B F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FB50 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FB55 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FB5A 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FB5F 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FB64 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FB69 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FB6E 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FB73 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FB78 10                         byte_F49E:	dc.b $10
0000FB79 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FB7E 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FB83 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FB88 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FB8D D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FB92 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FB97 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FB9C F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FBA1 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FBA6 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FBAB 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FBB0 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FBB5 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FBBA 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FBBF 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FBC4 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FBC9 06                         byte_F4EF:	dc.b 6
0000FBCA E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FBCF E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FBD4 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FBD9 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FBDE D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FBE3 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FBE8 06                         byte_F50E:	dc.b 6
0000FBE9 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FBEE E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FBF3 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FBF8 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FBFD D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FC02 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FC07 00                         byte_F52D:	dc.b 0
0000FC08                            		even
0000FC08                            		even
0000FC08                            
0000FC08                            ; ---------------------------------------------------------------------------
0000FC08                            ; Sprite mappings - advancing wall of lava (MZ)
0000FC08                            ; ---------------------------------------------------------------------------
0000FC08                            Map_obj4E:
0000FC08                            	include "_maps\obj4E.asm"
0000FC08                            ; ---------------------------------------------------------------------------
0000FC08                            ; Sprite mappings - advancing wall of lava (MZ)
0000FC08                            ; ---------------------------------------------------------------------------
0000FC08 0000                       		dc.w byte_F538-Map_obj4E
0000FC0A 0000                       		dc.w byte_F566-Map_obj4E
0000FC0C 0000                       		dc.w byte_F594-Map_obj4E
0000FC0E 0000                       		dc.w byte_F5C2-Map_obj4E
0000FC10 0000                       		dc.w byte_F5F0-Map_obj4E
0000FC12 09                         byte_F538:	dc.b 9
0000FC13 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FC18 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FC1D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FC22 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FC27 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FC2C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FC31 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FC36 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FC3B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FC40 09                         byte_F566:	dc.b 9
0000FC41 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FC46 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FC4B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FC50 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FC55 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FC5A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FC5F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FC64 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FC69 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FC6E 09                         byte_F594:	dc.b 9
0000FC6F E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FC74 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FC79 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FC7E E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FC83 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FC88 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FC8D 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FC92 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FC97 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FC9C 09                         byte_F5C2:	dc.b 9
0000FC9D E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FCA2 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FCA7 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FCAC E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FCB1 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FCB6 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FCBB 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FCC0 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FCC5 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FCCA 08                         byte_F5F0:	dc.b 8
0000FCCB E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FCD0 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FCD5 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FCDA 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FCDF E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FCE4 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FCE9 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FCEE 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FCF4 00                         		even
0000FCF4 00                         		even
0000FCF4                            
0000FCF4                            ; ===========================================================================
0000FCF4                            ; ---------------------------------------------------------------------------
0000FCF4                            ; Object 40 - Moto Bug enemy (GHZ)
0000FCF4                            ; ---------------------------------------------------------------------------
0000FCF4                            
0000FCF4                            Obj40:					; XREF: Obj_Index
0000FCF4 7000                       		moveq	#0,d0
0000FCF6 1028 0024                  		move.b	$24(a0),d0
0000FCFA 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FCFE 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FD02                            ; ===========================================================================
0000FD02 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FD04 0000                       		dc.w Obj40_Action-Obj40_Index
0000FD06 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FD08 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FD0A                            ; ===========================================================================
0000FD0A                            
0000FD0A                            Obj40_Main:				; XREF: Obj40_Index
0000FD0A 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FD12 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FD18 117C 0004 0001             		move.b	#4,1(a0)
0000FD1E 117C 0004 0018             		move.b	#4,$18(a0)
0000FD24 117C 0014 0019             		move.b	#$14,$19(a0)
0000FD2A 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FD2E 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FD30 117C 000E 0016             		move.b	#$E,$16(a0)
0000FD36 117C 0008 0017             		move.b	#8,$17(a0)
0000FD3C 117C 000C 0020             		move.b	#$C,$20(a0)
0000FD42 6100 DF48                  		bsr.w	ObjectFall
0000FD46 4EB9 0000 0000             		jsr	ObjHitFloor
0000FD4C 4A41                       		tst.w	d1
0000FD4E 6A00                       		bpl.s	locret_F68A
0000FD50 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FD54 317C 0000 0012             		move.w	#0,$12(a0)
0000FD5A 5428 0024                  		addq.b	#2,$24(a0)
0000FD5E 0868 0000 0022             		bchg	#0,$22(a0)
0000FD64                            
0000FD64                            locret_F68A:
0000FD64 4E75                       		rts	
0000FD66                            ; ===========================================================================
0000FD66                            
0000FD66                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FD66 5828 0024                  		addq.b	#4,$24(a0)
0000FD6A 6000 0000                  		bra.w	Obj40_Animate
0000FD6E                            ; ===========================================================================
0000FD6E                            
0000FD6E                            Obj40_Action:				; XREF: Obj40_Index
0000FD6E 7000                       		moveq	#0,d0
0000FD70 1028 0025                  		move.b	$25(a0),d0
0000FD74 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FD78 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FD7C 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FD82 6100 B01A                  		bsr.w	AnimateSprite
0000FD86                            
0000FD86                            ; ---------------------------------------------------------------------------
0000FD86                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FD86                            ; ---------------------------------------------------------------------------
0000FD86                            
0000FD86                            MarkObjGone:
0000FD86 3028 0008                  		move.w	8(a0),d0
0000FD8A 0240 FF80                  		andi.w	#$FF80,d0
0000FD8E 3238 F700                  		move.w	($FFFFF700).w,d1
0000FD92 0441 0080                  		subi.w	#$80,d1
0000FD96 0241 FF80                  		andi.w	#$FF80,d1
0000FD9A 9041                       		sub.w	d1,d0
0000FD9C 0C40 0280                  		cmpi.w	#$280,d0
0000FDA0 6200 0000                  		bhi.w	Mark_ChkGone
0000FDA4 6000 DF38                  		bra.w	DisplaySprite
0000FDA8                            ; ===========================================================================
0000FDA8                            
0000FDA8                            Mark_ChkGone:
0000FDA8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FDAC 7000                       		moveq	#0,d0
0000FDAE 1028 0023                  		move.b	$23(a0),d0
0000FDB2 6700                       		beq.s	Mark_Delete
0000FDB4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FDBA                            
0000FDBA                            Mark_Delete:
0000FDBA 6000 DF5E                  		bra.w	DeleteObject
0000FDBE                            
0000FDBE                            ; ===========================================================================
0000FDBE 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FDC0 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FDC2                            ; ===========================================================================
0000FDC2                            
0000FDC2                            Obj40_Move:				; XREF: Obj40_Index2
0000FDC2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FDC6 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FDC8 5428 0025                  		addq.b	#2,$25(a0)
0000FDCC 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FDD2 117C 0001 001C             		move.b	#1,$1C(a0)
0000FDD8 0868 0000 0022             		bchg	#0,$22(a0)
0000FDDE 6600                       		bne.s	locret_F70A
0000FDE0 4468 0010                  		neg.w	$10(a0)		; change direction
0000FDE4                            
0000FDE4                            locret_F70A:
0000FDE4 4E75                       		rts	
0000FDE6                            ; ===========================================================================
0000FDE6                            
0000FDE6                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FDE6 6100 DED0                  		bsr.w	SpeedToPos
0000FDEA 4EB9 0000 0000             		jsr	ObjHitFloor
0000FDF0 0C41 FFF8                  		cmpi.w	#-8,d1
0000FDF4 6D00                       		blt.s	Obj40_Pause
0000FDF6 0C41 000C                  		cmpi.w	#$C,d1
0000FDFA 6C00                       		bge.s	Obj40_Pause
0000FDFC D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FE00 5328 0033                  		subq.b	#1,$33(a0)
0000FE04 6A00                       		bpl.s	locret_F756
0000FE06 117C 000F 0033             		move.b	#$F,$33(a0)
0000FE0C 6100 E356                  		bsr.w	SingleObjLoad
0000FE10 6600                       		bne.s	locret_F756
0000FE12 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FE16 3368 0008 0008             		move.w	8(a0),8(a1)
0000FE1C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FE22 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FE28 137C 0002 001C             		move.b	#2,$1C(a1)
0000FE2E                            
0000FE2E                            locret_F756:
0000FE2E 4E75                       		rts	
0000FE30                            ; ===========================================================================
0000FE30                            
0000FE30                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FE30 5528 0025                  		subq.b	#2,$25(a0)
0000FE34 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FE3A 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FE40 117C 0000 001C             		move.b	#0,$1C(a0)
0000FE46 4E75                       		rts	
0000FE48                            ; ===========================================================================
0000FE48                            
0000FE48                            Obj40_Animate:				; XREF: Obj40_Index
0000FE48 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FE4E 6100 AF4E                  		bsr.w	AnimateSprite
0000FE52 6000 DE8A                  		bra.w	DisplaySprite
0000FE56                            ; ===========================================================================
0000FE56                            
0000FE56                            Obj40_Delete:				; XREF: Obj40_Index
0000FE56 6000 DEC2                  		bra.w	DeleteObject
0000FE5A                            ; ===========================================================================
0000FE5A                            Ani_obj40:
0000FE5A                            	include "_anim\obj40.asm"
0000FE5A                            ; ---------------------------------------------------------------------------
0000FE5A                            ; Animation script - Motobug enemy
0000FE5A                            ; ---------------------------------------------------------------------------
0000FE5A 0000                       		dc.w byte_F788-Ani_obj40
0000FE5C 0000                       		dc.w byte_F78C-Ani_obj40
0000FE5E 0000                       		dc.w byte_F792-Ani_obj40
0000FE60 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FE64 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FE6A 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FE78                            		even
0000FE78                            		even
0000FE78                            
0000FE78                            ; ---------------------------------------------------------------------------
0000FE78                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FE78                            ; ---------------------------------------------------------------------------
0000FE78                            Map_obj40:
0000FE78                            	include "_maps\obj40.asm"
0000FE78                            Map_cedc:
0000FE78 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000FE7A 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000FE7C 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0000FE7E 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0000FE80 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0000FE82 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0000FE84 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0000FE86 04                         Map_cedc_E: 	dc.b $4
0000FE87 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FE8C 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0000FE91 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FE96 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0000FE9B 04                         Map_cedc_23: 	dc.b $4
0000FE9C F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0000FEA1 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0000FEA6 F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0000FEAB 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0000FEB0 05                         Map_cedc_38: 	dc.b $5
0000FEB1 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FEB6 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0000FEBB F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FEC0 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0000FEC5 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0000FECA 01                         Map_cedc_52: 	dc.b $1
0000FECB FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0000FED0 01                         Map_cedc_58: 	dc.b $1
0000FED1 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0000FED6 01                         Map_cedc_5E: 	dc.b $1
0000FED7 FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0000FEDC 00                         Map_cedc_64: 	dc.b $0
0000FEDE 00                         	even
0000FEDE 00                         	even
0000FEDE                            
0000FEDE                            ; ===========================================================================
0000FEDE                            ; ---------------------------------------------------------------------------
0000FEDE                            ; Object 4F - blank
0000FEDE                            ; ---------------------------------------------------------------------------
0000FEDE                            
0000FEDE                            Obj4F:					; XREF: Obj_Index
0000FEDE 4E75                       		rts	
0000FEE0                            
0000FEE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FEE0                            
0000FEE0                            
0000FEE0                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000FEE0 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000FEE4 D047                       		add.w	d7,d0
0000FEE6 0240 0003                  		andi.w	#3,d0
0000FEEA 6600                       		bne.s	loc_F836
0000FEEC 7600                       		moveq	#0,d3
0000FEEE 1628 0019                  		move.b	$19(a0),d3
0000FEF2 4A68 0010                  		tst.w	$10(a0)
0000FEF6 6B00                       		bmi.s	loc_F82C
0000FEF8 6100 0000                  		bsr.w	ObjHitWallRight
0000FEFC 4A41                       		tst.w	d1
0000FEFE 6A00                       		bpl.s	loc_F836
0000FF00                            
0000FF00                            loc_F828:
0000FF00 7001                       		moveq	#1,d0
0000FF02 4E75                       		rts	
0000FF04                            ; ===========================================================================
0000FF04                            
0000FF04                            loc_F82C:
0000FF04 4643                       		not.w	d3
0000FF06 6100 0000                  		bsr.w	ObjHitWallLeft
0000FF0A 4A41                       		tst.w	d1
0000FF0C 6BF2                       		bmi.s	loc_F828
0000FF0E                            
0000FF0E                            loc_F836:
0000FF0E 7000                       		moveq	#0,d0
0000FF10 4E75                       		rts	
0000FF12                            ; End of function Obj50_ChkWall
0000FF12                            
0000FF12                            ; ===========================================================================
0000FF12                            ; ---------------------------------------------------------------------------
0000FF12                            ; Object 50 - Yadrin enemy (SYZ)
0000FF12                            ; ---------------------------------------------------------------------------
0000FF12                            
0000FF12                            Obj50:					; XREF: Obj_Index
0000FF12 7000                       		moveq	#0,d0
0000FF14 1028 0024                  		move.b	$24(a0),d0
0000FF18 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000FF1C 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000FF20                            ; ===========================================================================
0000FF20 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000FF22 0000                       		dc.w Obj50_Action-Obj50_Index
0000FF24                            ; ===========================================================================
0000FF24                            
0000FF24                            Obj50_Main:				; XREF: Obj50_Index
0000FF24 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000FF2C 317C 247B 0002             		move.w	#$247B,2(a0)
0000FF32 117C 0004 0001             		move.b	#4,1(a0)
0000FF38 117C 0004 0018             		move.b	#4,$18(a0)
0000FF3E 117C 0014 0019             		move.b	#$14,$19(a0)
0000FF44 117C 0011 0016             		move.b	#$11,$16(a0)
0000FF4A 117C 0008 0017             		move.b	#8,$17(a0)
0000FF50 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000FF56 6100 DD34                  		bsr.w	ObjectFall
0000FF5A 6100 0000                  		bsr.w	ObjHitFloor
0000FF5E 4A41                       		tst.w	d1
0000FF60 6A00                       		bpl.s	locret_F89E
0000FF62 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FF66 317C 0000 0012             		move.w	#0,$12(a0)
0000FF6C 5428 0024                  		addq.b	#2,$24(a0)
0000FF70 0868 0000 0022             		bchg	#0,$22(a0)
0000FF76                            
0000FF76                            locret_F89E:
0000FF76 4E75                       		rts	
0000FF78                            ; ===========================================================================
0000FF78                            
0000FF78                            Obj50_Action:				; XREF: Obj50_Index
0000FF78 7000                       		moveq	#0,d0
0000FF7A 1028 0025                  		move.b	$25(a0),d0
0000FF7E 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0000FF82 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0000FF86 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0000FF8C 6100 AE10                  		bsr.w	AnimateSprite
0000FF90 6000 FDF4                  		bra.w	MarkObjGone
0000FF94                            ; ===========================================================================
0000FF94 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0000FF96 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0000FF98                            ; ===========================================================================
0000FF98                            
0000FF98                            Obj50_Move:				; XREF: Obj50_Index2
0000FF98 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FF9C 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000FF9E 5428 0025                  		addq.b	#2,$25(a0)
0000FFA2 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0000FFA8 117C 0001 001C             		move.b	#1,$1C(a0)
0000FFAE 0868 0000 0022             		bchg	#0,$22(a0)
0000FFB4 6600                       		bne.s	locret_F8E2
0000FFB6 4468 0010                  		neg.w	$10(a0)		; change direction
0000FFBA                            
0000FFBA                            locret_F8E2:
0000FFBA 4E75                       		rts	
0000FFBC                            ; ===========================================================================
0000FFBC                            
0000FFBC                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0000FFBC 6100 DCFA                  		bsr.w	SpeedToPos
0000FFC0 6100 0000                  		bsr.w	ObjHitFloor
0000FFC4 0C41 FFF8                  		cmpi.w	#-8,d1
0000FFC8 6D00                       		blt.s	Obj50_Pause
0000FFCA 0C41 000C                  		cmpi.w	#$C,d1
0000FFCE 6C00                       		bge.s	Obj50_Pause
0000FFD0 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0000FFD4 6100 FF0A                  		bsr.w	Obj50_ChkWall
0000FFD8 6600                       		bne.s	Obj50_Pause
0000FFDA 4E75                       		rts	
0000FFDC                            ; ===========================================================================
0000FFDC                            
0000FFDC                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0000FFDC 5528 0025                  		subq.b	#2,$25(a0)
0000FFE0 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FFE6 317C 0000 0010             		move.w	#0,$10(a0)
0000FFEC 117C 0000 001C             		move.b	#0,$1C(a0)
0000FFF2 4E75                       		rts	
0000FFF4                            ; ===========================================================================
0000FFF4                            Ani_obj50:
0000FFF4                            	include "_anim\obj50.asm"
0000FFF4                            ; ---------------------------------------------------------------------------
0000FFF4                            ; Animation script - Yadrin enemy
0000FFF4                            ; ---------------------------------------------------------------------------
0000FFF4 0000                       		dc.w byte_F920-Ani_obj50
0000FFF6 0000                       		dc.w byte_F924-Ani_obj50
0000FFF8 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0000FFFC 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00010006                            		even
00010006                            		even
00010006                            
00010006                            ; ---------------------------------------------------------------------------
00010006                            ; Sprite mappings - Yadrin enemy (SYZ)
00010006                            ; ---------------------------------------------------------------------------
00010006                            Map_obj50:
00010006                            	include "_maps\obj50.asm"
00010006                            Map_ff24:
00010006 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
00010008 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
0001000A 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
0001000C 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
0001000E 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
00010010 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
00010012 05                         Map_ff24_C: 	dc.b $5
00010013 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010018 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
0001001D EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010022 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010027 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
0001002C 05                         Map_ff24_26: 	dc.b $5
0001002D F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010032 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
00010037 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001003C F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010041 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010046 05                         Map_ff24_40: 	dc.b $5
00010047 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
0001004C 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010051 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010056 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001005B 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010060 05                         Map_ff24_5A: 	dc.b $5
00010061 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010066 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
0001006B EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010070 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010075 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
0001007A 05                         Map_ff24_74: 	dc.b $5
0001007B F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010080 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
00010085 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001008A F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001008F 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010094 05                         Map_ff24_8E: 	dc.b $5
00010095 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
0001009A 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
0001009F EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000100A4 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000100A9 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
000100AE                            	even
000100AE                            	even
000100AE                            
000100AE                            ; ---------------------------------------------------------------------------
000100AE                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
000100AE                            ;
000100AE                            ; variables:
000100AE                            ; d1 = width
000100AE                            ; d2 = height /	2 (when	jumping)
000100AE                            ; d3 = height /	2 (when	walking)
000100AE                            ; d4 = x-axis position
000100AE                            ; ---------------------------------------------------------------------------
000100AE                            
000100AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000100AE                            
000100AE                            
000100AE                            SolidObject:
000100AE 4A28 0025                  		tst.b	$25(a0)
000100B2 6700 0000                  		beq.w	loc_FAC8
000100B6 3401                       		move.w	d1,d2
000100B8 D442                       		add.w	d2,d2
000100BA 43F8 D000                  		lea	($FFFFD000).w,a1
000100BE 0829 0001 0022             		btst	#1,$22(a1)
000100C4 6600                       		bne.s	loc_F9FE
000100C6 3029 0008                  		move.w	8(a1),d0
000100CA 9068 0008                  		sub.w	8(a0),d0
000100CE D041                       		add.w	d1,d0
000100D0 6B00                       		bmi.s	loc_F9FE
000100D2 B042                       		cmp.w	d2,d0
000100D4 6500                       		bcs.s	loc_FA12
000100D6                            
000100D6                            loc_F9FE:
000100D6 08A9 0003 0022             		bclr	#3,$22(a1)
000100DC 08A8 0003 0022             		bclr	#3,$22(a0)
000100E2 4228 0025                  		clr.b	$25(a0)
000100E6 7800                       		moveq	#0,d4
000100E8 4E75                       		rts	
000100EA                            ; ===========================================================================
000100EA                            
000100EA                            loc_FA12:
000100EA 3404                       		move.w	d4,d2
000100EC                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
000100EC 7800                       		moveq	#0,d4
000100EE 4E75                       		rts	
000100F0                            ; ===========================================================================
000100F0                            
000100F0                            SolidObject71:				; XREF: Obj71_Solid
000100F0 4A28 0025                  		tst.b	$25(a0)
000100F4 6700 0000                  		beq.w	loc_FAD0
000100F8 3401                       		move.w	d1,d2
000100FA D442                       		add.w	d2,d2
000100FC 43F8 D000                  		lea	($FFFFD000).w,a1
00010100 0829 0001 0022             		btst	#1,$22(a1)
00010106 6600                       		bne.s	loc_FA44
00010108 3029 0008                  		move.w	8(a1),d0
0001010C 9068 0008                  		sub.w	8(a0),d0
00010110 D041                       		add.w	d1,d0
00010112 6B00                       		bmi.s	loc_FA44
00010114 B042                       		cmp.w	d2,d0
00010116 6500                       		bcs.s	loc_FA58
00010118                            
00010118                            loc_FA44:
00010118 08A9 0003 0022             		bclr	#3,$22(a1)
0001011E 08A8 0003 0022             		bclr	#3,$22(a0)
00010124 4228 0025                  		clr.b	$25(a0)
00010128 7800                       		moveq	#0,d4
0001012A 4E75                       		rts	
0001012C                            ; ===========================================================================
0001012C                            
0001012C                            loc_FA58:
0001012C 3404                       		move.w	d4,d2
0001012E                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
0001012E 7800                       		moveq	#0,d4
00010130 4E75                       		rts	
00010132                            ; ===========================================================================
00010132                            
00010132                            SolidObject2F:				; XREF: Obj2F_Solid
00010132 43F8 D000                  		lea	($FFFFD000).w,a1
00010136 4A28 0001                  		tst.b	1(a0)
0001013A 6A00 0000                  		bpl.w	loc_FB92
0001013E 3029 0008                  		move.w	8(a1),d0
00010142 9068 0008                  		sub.w	8(a0),d0
00010146 D041                       		add.w	d1,d0
00010148 6B00 0000                  		bmi.w	loc_FB92
0001014C 3601                       		move.w	d1,d3
0001014E D643                       		add.w	d3,d3
00010150 B043                       		cmp.w	d3,d0
00010152 6200 0000                  		bhi.w	loc_FB92
00010156 3A00                       		move.w	d0,d5
00010158 0828 0000 0001             		btst	#0,1(a0)
0001015E 6700                       		beq.s	loc_FA94
00010160 4645                       		not.w	d5
00010162 DA43                       		add.w	d3,d5
00010164                            
00010164                            loc_FA94:
00010164 E24D                       		lsr.w	#1,d5
00010166 7600                       		moveq	#0,d3
00010168 1632 5000                  		move.b	(a2,d5.w),d3
0001016C 9612                       		sub.b	(a2),d3
0001016E 3A28 000C                  		move.w	$C(a0),d5
00010172 9A43                       		sub.w	d3,d5
00010174 1629 0016                  		move.b	$16(a1),d3
00010178 4883                       		ext.w	d3
0001017A D443                       		add.w	d3,d2
0001017C 3629 000C                  		move.w	$C(a1),d3
00010180 9645                       		sub.w	d5,d3
00010182 5843                       		addq.w	#4,d3
00010184 D642                       		add.w	d2,d3
00010186 6B00 0000                  		bmi.w	loc_FB92
0001018A 3802                       		move.w	d2,d4
0001018C D844                       		add.w	d4,d4
0001018E B644                       		cmp.w	d4,d3
00010190 6400 0000                  		bcc.w	loc_FB92
00010194 6000 0000                  		bra.w	loc_FB0E
00010198                            ; ===========================================================================
00010198                            
00010198                            loc_FAC8:
00010198 4A28 0001                  		tst.b	1(a0)
0001019C 6A00 0000                  		bpl.w	loc_FB92
000101A0                            
000101A0                            loc_FAD0:
000101A0 43F8 D000                  		lea	($FFFFD000).w,a1
000101A4 3029 0008                  		move.w	8(a1),d0
000101A8 9068 0008                  		sub.w	8(a0),d0
000101AC D041                       		add.w	d1,d0
000101AE 6B00 0000                  		bmi.w	loc_FB92
000101B2 3601                       		move.w	d1,d3
000101B4 D643                       		add.w	d3,d3
000101B6 B043                       		cmp.w	d3,d0
000101B8 6200 0000                  		bhi.w	loc_FB92
000101BC 1629 0016                  		move.b	$16(a1),d3
000101C0 4883                       		ext.w	d3
000101C2 D443                       		add.w	d3,d2
000101C4 3629 000C                  		move.w	$C(a1),d3
000101C8 9668 000C                  		sub.w	$C(a0),d3
000101CC 5843                       		addq.w	#4,d3
000101CE D642                       		add.w	d2,d3
000101D0 6B00 0000                  		bmi.w	loc_FB92
000101D4 3802                       		move.w	d2,d4
000101D6 D844                       		add.w	d4,d4
000101D8 B644                       		cmp.w	d4,d3
000101DA 6400 0000                  		bcc.w	loc_FB92
000101DE                            
000101DE                            loc_FB0E:
000101DE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000101E2 6B00 0000                  		bmi.w	loc_FB92
000101E6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000101EC 6400 0000                  		bcc.w	loc_FB92
000101F0 4A78 FE08                  		tst.w	($FFFFFE08).w
000101F4 6600 0000                  		bne.w	loc_FBAC
000101F8 3A00                       		move.w	d0,d5
000101FA B240                       		cmp.w	d0,d1
000101FC 6400                       		bcc.s	loc_FB36
000101FE D241                       		add.w	d1,d1
00010200 9041                       		sub.w	d1,d0
00010202 3A00                       		move.w	d0,d5
00010204 4445                       		neg.w	d5
00010206                            
00010206                            loc_FB36:
00010206 3203                       		move.w	d3,d1
00010208 B443                       		cmp.w	d3,d2
0001020A 6400                       		bcc.s	loc_FB44
0001020C 5943                       		subq.w	#4,d3
0001020E 9644                       		sub.w	d4,d3
00010210 3203                       		move.w	d3,d1
00010212 4441                       		neg.w	d1
00010214                            
00010214                            loc_FB44:
00010214 BA41                       		cmp.w	d1,d5
00010216 6200 0000                  		bhi.w	loc_FBB0
0001021A 0C41 0004                  		cmpi.w	#4,d1
0001021E 6300                       		bls.s	loc_FB8C
00010220 4A40                       		tst.w	d0
00010222 6700                       		beq.s	loc_FB70
00010224 6B00                       		bmi.s	loc_FB5E
00010226 4A69 0010                  		tst.w	$10(a1)
0001022A 6B00                       		bmi.s	loc_FB70
0001022C 6000                       		bra.s	loc_FB64
0001022E                            ; ===========================================================================
0001022E                            
0001022E                            loc_FB5E:
0001022E 4A69 0010                  		tst.w	$10(a1)
00010232 6A00                       		bpl.s	loc_FB70
00010234                            
00010234                            loc_FB64:
00010234 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
0001023A 337C 0000 0010             		move.w	#0,$10(a1)
00010240                            
00010240                            loc_FB70:
00010240 9169 0008                  		sub.w	d0,8(a1)
00010244 0829 0001 0022             		btst	#1,$22(a1)
0001024A 6600                       		bne.s	loc_FB8C
0001024C 08E9 0005 0022             		bset	#5,$22(a1)
00010252 08E8 0005 0022             		bset	#5,$22(a0)
00010258 7801                       		moveq	#1,d4
0001025A 4E75                       		rts	
0001025C                            ; ===========================================================================
0001025C                            
0001025C                            loc_FB8C:
0001025C 6100                       		bsr.s	loc_FBA0
0001025E 7801                       		moveq	#1,d4
00010260 4E75                       		rts	
00010262                            ; ===========================================================================
00010262                            
00010262                            loc_FB92:
00010262 0828 0005 0022             		btst	#5,$22(a0)
00010268 6700                       		beq.s	loc_FBAC
0001026A 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00010270                            
00010270                            loc_FBA0:
00010270 08A8 0005 0022             		bclr	#5,$22(a0)
00010276 08A9 0005 0022             		bclr	#5,$22(a1)
0001027C                            
0001027C                            loc_FBAC:
0001027C 7800                       		moveq	#0,d4
0001027E 4E75                       		rts	
00010280                            ; ===========================================================================
00010280                            
00010280                            loc_FBB0:
00010280 4A43                       		tst.w	d3
00010282 6B00                       		bmi.s	loc_FBBC
00010284 0C43 0010                  		cmpi.w	#$10,d3
00010288 6500                       		bcs.s	loc_FBEE
0001028A 60D6                       		bra.s	loc_FB92
0001028C                            ; ===========================================================================
0001028C                            
0001028C                            loc_FBBC:
0001028C 4A69 0012                  		tst.w	$12(a1)
00010290 6700                       		beq.s	loc_FBD6
00010292 6A00                       		bpl.s	loc_FBD2
00010294 4A43                       		tst.w	d3
00010296 6A00                       		bpl.s	loc_FBD2
00010298 9769 000C                  		sub.w	d3,$C(a1)
0001029C 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
000102A2                            
000102A2                            loc_FBD2:
000102A2 78FF                       		moveq	#-1,d4
000102A4 4E75                       		rts	
000102A6                            ; ===========================================================================
000102A6                            
000102A6                            loc_FBD6:
000102A6 0829 0001 0022             		btst	#1,$22(a1)
000102AC 66F4                       		bne.s	loc_FBD2
000102AE 2F08                       		move.l	a0,-(sp)
000102B0 2049                       		movea.l	a1,a0
000102B2 4EB9 0000 0000             		jsr	KillSonic
000102B8 205F                       		movea.l	(sp)+,a0
000102BA 78FF                       		moveq	#-1,d4
000102BC 4E75                       		rts	
000102BE                            ; ===========================================================================
000102BE                            
000102BE                            loc_FBEE:
000102BE 5943                       		subq.w	#4,d3
000102C0 7200                       		moveq	#0,d1
000102C2 1228 0019                  		move.b	$19(a0),d1
000102C6 3401                       		move.w	d1,d2
000102C8 D442                       		add.w	d2,d2
000102CA D269 0008                  		add.w	8(a1),d1
000102CE 9268 0008                  		sub.w	8(a0),d1
000102D2 6B00                       		bmi.s	loc_FC28
000102D4 B242                       		cmp.w	d2,d1
000102D6 6400                       		bcc.s	loc_FC28
000102D8 4A69 0012                  		tst.w	$12(a1)
000102DC 6B00                       		bmi.s	loc_FC28
000102DE 9769 000C                  		sub.w	d3,$C(a1)
000102E2 5369 000C                  		subq.w	#1,$C(a1)
000102E6 6100                       		bsr.s	sub_FC2C
000102E8 117C 0002 0025             		move.b	#2,$25(a0)
000102EE 08E8 0003 0022             		bset	#3,$22(a0)
000102F4 78FF                       		moveq	#-1,d4
000102F6 4E75                       		rts	
000102F8                            ; ===========================================================================
000102F8                            
000102F8                            loc_FC28:
000102F8 7800                       		moveq	#0,d4
000102FA 4E75                       		rts	
000102FC                            ; End of function SolidObject
000102FC                            
000102FC                            
000102FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000102FC                            
000102FC                            
000102FC                            sub_FC2C:				; XREF: SolidObject
000102FC 0829 0003 0022             		btst	#3,$22(a1)
00010302 6700                       		beq.s	loc_FC4E
00010304 7000                       		moveq	#0,d0
00010306 1029 003D                  		move.b	$3D(a1),d0
0001030A ED48                       		lsl.w	#6,d0
0001030C 0680 00FF D000             		addi.l	#$FFD000,d0
00010312 2440                       		movea.l	d0,a2
00010314 08AA 0003 0022             		bclr	#3,$22(a2)
0001031A 422A 0025                  		clr.b	$25(a2)
0001031E                            
0001031E                            loc_FC4E:
0001031E 3008                       		move.w	a0,d0
00010320 0440 D000                  		subi.w	#-$3000,d0
00010324 EC48                       		lsr.w	#6,d0
00010326 0240 007F                  		andi.w	#$7F,d0
0001032A 1340 003D                  		move.b	d0,$3D(a1)
0001032E 137C 0000 0026             		move.b	#0,$26(a1)
00010334 337C 0000 0012             		move.w	#0,$12(a1)
0001033A 3369 0010 0014             		move.w	$10(a1),$14(a1)
00010340 0829 0001 0022             		btst	#1,$22(a1)
00010346 6700                       		beq.s	loc_FC84
00010348 2F08                       		move.l	a0,-(sp)
0001034A 2049                       		movea.l	a1,a0
0001034C 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00010352 205F                       		movea.l	(sp)+,a0
00010354                            
00010354                            loc_FC84:
00010354 08E9 0003 0022             		bset	#3,$22(a1)
0001035A 08E8 0003 0022             		bset	#3,$22(a0)
00010360 4E75                       		rts	
00010362                            ; End of function sub_FC2C
00010362                            
00010362                            ; ===========================================================================
00010362                            ; ---------------------------------------------------------------------------
00010362                            ; Object 51 - smashable	green block (MZ)
00010362                            ; ---------------------------------------------------------------------------
00010362                            
00010362                            Obj51:					; XREF: Obj_Index
00010362 7000                       		moveq	#0,d0
00010364 1028 0024                  		move.b	$24(a0),d0
00010368 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
0001036C 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00010370 6000 FA14                  		bra.w	MarkObjGone
00010374                            ; ===========================================================================
00010374 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00010376 0000                       		dc.w Obj51_Solid-Obj51_Index
00010378 0000                       		dc.w Obj51_Display-Obj51_Index
0001037A                            ; ===========================================================================
0001037A                            
0001037A                            Obj51_Main:				; XREF: Obj51_Index
0001037A 5428 0024                  		addq.b	#2,$24(a0)
0001037E 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00010386 317C 42B8 0002             		move.w	#$42B8,2(a0)
0001038C 117C 0004 0001             		move.b	#4,1(a0)
00010392 117C 0010 0019             		move.b	#$10,$19(a0)
00010398 117C 0004 0018             		move.b	#4,$18(a0)
0001039E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000103A4                            
000103A4                            Obj51_Solid:				; XREF: Obj51_Index
000103A4 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
000103AA 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
000103B0 323C 001B                  		move.w	#$1B,d1
000103B4 343C 0010                  		move.w	#$10,d2
000103B8 363C 0011                  		move.w	#$11,d3
000103BC 3828 0008                  		move.w	8(a0),d4
000103C0 6100 FCEC                  		bsr.w	SolidObject
000103C4 0828 0003 0022             		btst	#3,$22(a0)
000103CA 6600                       		bne.s	Obj51_Smash
000103CC                            
000103CC                            locret_FCFC:
000103CC 4E75                       		rts	
000103CE                            ; ===========================================================================
000103CE                            
000103CE                            Obj51_Smash:				; XREF: Obj51_Solid
000103CE 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
000103D4 66F6                       		bne.s	locret_FCFC	; if not, branch
000103D6 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
000103DC 08E9 0002 0022             		bset	#2,$22(a1)
000103E2 137C 000E 0016             		move.b	#$E,$16(a1)
000103E8 137C 0007 0017             		move.b	#7,$17(a1)
000103EE 137C 0002 001C             		move.b	#2,$1C(a1)
000103F4 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
000103FA 08E9 0001 0022             		bset	#1,$22(a1)
00010400 08A9 0003 0022             		bclr	#3,$22(a1)
00010406 137C 0002 0024             		move.b	#2,$24(a1)
0001040C 08A8 0003 0022             		bclr	#3,$22(a0)
00010412 4228 0025                  		clr.b	$25(a0)
00010416 117C 0001 001A             		move.b	#1,$1A(a0)
0001041C 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00010422 7203                       		moveq	#3,d1		; set number of	fragments to 4
00010424 343C 0038                  		move.w	#$38,d2
00010428 6100 D4A2                  		bsr.w	SmashObject
0001042C 6100 DD36                  		bsr.w	SingleObjLoad
00010430 6600                       		bne.s	Obj51_Display
00010432 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010436 3368 0008 0008             		move.w	8(a0),8(a1)
0001043C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010442 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00010446 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
0001044A 0C42 0006                  		cmpi.w	#6,d2
0001044E 6500                       		bcs.s	Obj51_Bonus
00010450 7406                       		moveq	#6,d2
00010452                            
00010452                            Obj51_Bonus:
00010452 7000                       		moveq	#0,d0
00010454 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00010458 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
0001045E 6500                       		bcs.s	loc_FD98	; if not, branch
00010460 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00010464 740A                       		moveq	#10,d2
00010466                            
00010466                            loc_FD98:
00010466 4EB9 0000 0000             		jsr	AddPoints
0001046C E24A                       		lsr.w	#1,d2
0001046E 1342 001A                  		move.b	d2,$1A(a1)
00010472                            
00010472                            Obj51_Display:				; XREF: Obj51_Index
00010472 6100 D844                  		bsr.w	SpeedToPos
00010476 0668 0038 0012             		addi.w	#$38,$12(a0)
0001047C 6100 D860                  		bsr.w	DisplaySprite
00010480 4A28 0001                  		tst.b	1(a0)
00010484 6A00 D894                  		bpl.w	DeleteObject
00010488 4E75                       		rts	
0001048A                            ; ===========================================================================
0001048A FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
0001048E FF00 FF00                  		dc.w $FF00, $FF00
00010492 0200 FE00                  		dc.w $200, $FE00
00010496 0100 FF00                  		dc.w $100, $FF00
0001049A                            
0001049A 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000104A2                            ; ---------------------------------------------------------------------------
000104A2                            ; Sprite mappings - smashable green block (MZ)
000104A2                            ; ---------------------------------------------------------------------------
000104A2                            Map_obj51:
000104A2                            	include "_maps\obj51.asm"
000104A2                            ; ---------------------------------------------------------------------------
000104A2                            ; Sprite mappings - smashable green block (MZ)
000104A2                            ; ---------------------------------------------------------------------------
000104A2 0000                       		dc.w byte_FDD8-Map_obj51
000104A4 0000                       		dc.w byte_FDE3-Map_obj51
000104A6 02                         byte_FDD8:	dc.b 2
000104A7 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
000104AC 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000104B1 04                         byte_FDE3:	dc.b 4
000104B2 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
000104B7 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000104BC F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000104C1 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000104C6                            		even
000104C6                            		even
000104C6                            
000104C6                            ; ===========================================================================
000104C6                            ; ---------------------------------------------------------------------------
000104C6                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000104C6                            ; ---------------------------------------------------------------------------
000104C6                            
000104C6                            Obj52:					; XREF: Obj_Index
000104C6 7000                       		moveq	#0,d0
000104C8 1028 0024                  		move.b	$24(a0),d0
000104CC 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
000104D0 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
000104D4                            ; ===========================================================================
000104D4 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
000104D6 0000                       		dc.w Obj52_Platform-Obj52_Index
000104D8 0000                       		dc.w Obj52_StandOn-Obj52_Index
000104DA                            
000104DA 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
000104DC 2001                       		dc.b $20, 1
000104DE 2002                       		dc.b $20, 2
000104E0 4003                       		dc.b $40, 3
000104E2 3004                       		dc.b $30, 4
000104E4                            ; ===========================================================================
000104E4                            
000104E4                            Obj52_Main:				; XREF: Obj52_Index
000104E4 5428 0024                  		addq.b	#2,$24(a0)
000104E8 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
000104F0 317C 42B8 0002             		move.w	#$42B8,2(a0)
000104F6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000104FC 6600                       		bne.s	loc_FE44
000104FE 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010506 317C 43BC 0002             		move.w	#$43BC,2(a0)
0001050C 117C 0007 0016             		move.b	#7,$16(a0)
00010512                            
00010512                            loc_FE44:
00010512 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00010518 6600                       		bne.s	loc_FE60
0001051A 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00010520 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00010526 6700                       		beq.s	loc_FE60	; if yes, branch
00010528 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0001052E                            
0001052E                            loc_FE60:
0001052E 117C 0004 0001             		move.b	#4,1(a0)
00010534 7000                       		moveq	#0,d0
00010536 1028 0028                  		move.b	$28(a0),d0
0001053A E648                       		lsr.w	#3,d0
0001053C 0240 001E                  		andi.w	#$1E,d0
00010540 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00010544 115A 0019                  		move.b	(a2)+,$19(a0)
00010548 115A 001A                  		move.b	(a2)+,$1A(a0)
0001054C 117C 0004 0018             		move.b	#4,$18(a0)
00010552 3168 0008 0030             		move.w	8(a0),$30(a0)
00010558 3168 000C 0032             		move.w	$C(a0),$32(a0)
0001055E 0228 000F 0028             		andi.b	#$F,$28(a0)
00010564                            
00010564                            Obj52_Platform:				; XREF: Obj52_Index
00010564 6100 0000                  		bsr.w	Obj52_Move
00010568 7200                       		moveq	#0,d1
0001056A 1228 0019                  		move.b	$19(a0),d1
0001056E 4EB9 0000 79FA             		jsr	(PlatformObject).l
00010574 6000                       		bra.s	Obj52_ChkDel
00010576                            ; ===========================================================================
00010576                            
00010576                            Obj52_StandOn:				; XREF: Obj52_Index
00010576 7200                       		moveq	#0,d1
00010578 1228 0019                  		move.b	$19(a0),d1
0001057C 4EB9 0000 7B6E             		jsr	(ExitPlatform).l
00010582 3F28 0008                  		move.w	8(a0),-(sp)
00010586 6100 0000                  		bsr.w	Obj52_Move
0001058A 341F                       		move.w	(sp)+,d2
0001058C 4EB9 0000 80D8             		jsr	(MvSonicOnPtfm2).l
00010592                            
00010592                            Obj52_ChkDel:				; XREF: Obj52_Platform
00010592 3028 0030                  		move.w	$30(a0),d0
00010596 0240 FF80                  		andi.w	#$FF80,d0
0001059A 3238 F700                  		move.w	($FFFFF700).w,d1
0001059E 0441 0080                  		subi.w	#$80,d1
000105A2 0241 FF80                  		andi.w	#$FF80,d1
000105A6 9041                       		sub.w	d1,d0
000105A8 0C40 0280                  		cmpi.w	#$280,d0
000105AC 6200 D76C                  		bhi.w	DeleteObject
000105B0 6000 D72C                  		bra.w	DisplaySprite
000105B4                            ; ===========================================================================
000105B4                            
000105B4                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000105B4 7000                       		moveq	#0,d0
000105B6 1028 0028                  		move.b	$28(a0),d0
000105BA 0240 000F                  		andi.w	#$F,d0
000105BE D040                       		add.w	d0,d0
000105C0 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000105C4 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000105C8                            ; ===========================================================================
000105C8 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000105CC 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
000105D0 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
000105D4 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
000105D8 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
000105DC 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
000105DE                            ; ===========================================================================
000105DE                            
000105DE                            Obj52_Type00:				; XREF: Obj52_TypeIndex
000105DE 4E75                       		rts	
000105E0                            ; ===========================================================================
000105E0                            
000105E0                            Obj52_Type01:				; XREF: Obj52_TypeIndex
000105E0 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000105E4 323C 0060                  		move.w	#$60,d1
000105E8 0828 0000 0022             		btst	#0,$22(a0)
000105EE 6700                       		beq.s	loc_FF26
000105F0 4440                       		neg.w	d0
000105F2 D041                       		add.w	d1,d0
000105F4                            
000105F4                            loc_FF26:
000105F4 3228 0030                  		move.w	$30(a0),d1
000105F8 9240                       		sub.w	d0,d1
000105FA 3141 0008                  		move.w	d1,8(a0)
000105FE 4E75                       		rts	
00010600                            ; ===========================================================================
00010600                            
00010600                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010600 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010606 6600                       		bne.s	Obj52_02_Wait
00010608 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001060C                            
0001060C                            Obj52_02_Wait:
0001060C 4E75                       		rts	
0001060E                            ; ===========================================================================
0001060E                            
0001060E                            Obj52_Type03:				; XREF: Obj52_TypeIndex
0001060E 7600                       		moveq	#0,d3
00010610 1628 0019                  		move.b	$19(a0),d3
00010614 6100 0000                  		bsr.w	ObjHitWallRight
00010618 4A41                       		tst.w	d1		; has the platform hit a wall?
0001061A 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
0001061C 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010620 3168 0008 0030             		move.w	8(a0),$30(a0)
00010626 4E75                       		rts	
00010628                            ; ===========================================================================
00010628                            
00010628                            Obj52_03_End:
00010628 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
0001062C 4E75                       		rts	
0001062E                            ; ===========================================================================
0001062E                            
0001062E                            Obj52_Type05:				; XREF: Obj52_TypeIndex
0001062E 7600                       		moveq	#0,d3
00010630 1628 0019                  		move.b	$19(a0),d3
00010634 6100 0000                  		bsr.w	ObjHitWallRight
00010638 4A41                       		tst.w	d1		; has the platform hit a wall?
0001063A 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
0001063C 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010640 3168 0008 0030             		move.w	8(a0),$30(a0)
00010646 4E75                       		rts	
00010648                            ; ===========================================================================
00010648                            
00010648                            Obj52_05_End:
00010648 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
0001064C 4E75                       		rts	
0001064E                            ; ===========================================================================
0001064E                            
0001064E                            Obj52_Type06:				; XREF: Obj52_TypeIndex
0001064E 6100 D668                  		bsr.w	SpeedToPos
00010652 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00010658 6100 0000                  		bsr.w	ObjHitFloor
0001065C 4A41                       		tst.w	d1		; has platform hit the floor?
0001065E 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00010662 D368 000C                  		add.w	d1,$C(a0)
00010666 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
0001066A 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
0001066E                            
0001066E                            locret_FFA0:
0001066E 4E75                       		rts	
00010670                            ; ===========================================================================
00010670                            
00010670                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00010670 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010674 6700                       		beq.s	Obj52_07_ChkDel
00010676 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
0001067A                            
0001067A                            Obj52_07_ChkDel:
0001067A 588F                       		addq.l	#4,sp
0001067C 3028 0030                  		move.w	$30(a0),d0
00010680 0240 FF80                  		andi.w	#$FF80,d0
00010684 3238 F700                  		move.w	($FFFFF700).w,d1
00010688 0441 0080                  		subi.w	#$80,d1
0001068C 0241 FF80                  		andi.w	#$FF80,d1
00010690 9041                       		sub.w	d1,d0
00010692 0C40 0280                  		cmpi.w	#$280,d0
00010696 6200 D682                  		bhi.w	DeleteObject
0001069A 4E75                       		rts	
0001069C                            ; ===========================================================================
0001069C                            
0001069C                            Obj52_Type08:				; XREF: Obj52_TypeIndex
0001069C 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000106A0 323C 0080                  		move.w	#$80,d1
000106A4 0828 0000 0022             		btst	#0,$22(a0)
000106AA 6700                       		beq.s	loc_FFE2
000106AC 4440                       		neg.w	d0
000106AE D041                       		add.w	d1,d0
000106B0                            
000106B0                            loc_FFE2:
000106B0 3228 0032                  		move.w	$32(a0),d1
000106B4 9240                       		sub.w	d0,d1
000106B6 3141 000C                  		move.w	d1,$C(a0)
000106BA 4E75                       		rts	
000106BC                            ; ===========================================================================
000106BC                            
000106BC                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
000106BC 7600                       		moveq	#0,d3
000106BE 1628 0019                  		move.b	$19(a0),d3
000106C2 D643                       		add.w	d3,d3
000106C4 7208                       		moveq	#8,d1
000106C6 0828 0000 0022             		btst	#0,$22(a0)
000106CC 6700                       		beq.s	loc_10004
000106CE 4441                       		neg.w	d1
000106D0 4443                       		neg.w	d3
000106D2                            
000106D2                            loc_10004:
000106D2 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000106D6 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
000106D8 3028 0008                  		move.w	8(a0),d0
000106DC 9068 0030                  		sub.w	$30(a0),d0
000106E0 B043                       		cmp.w	d3,d0
000106E2 6700                       		beq.s	Obj52_0A_Wait
000106E4 D368 0008                  		add.w	d1,8(a0)	; move platform
000106E8 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000106EE 4E75                       		rts	
000106F0                            ; ===========================================================================
000106F0                            
000106F0                            Obj52_0A_Wait:
000106F0 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000106F4 6600                       		bne.s	locret_1002E	; if time remains, branch
000106F6 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000106FC                            
000106FC                            locret_1002E:
000106FC 4E75                       		rts	
000106FE                            ; ===========================================================================
000106FE                            
000106FE                            Obj52_0A_Back:
000106FE 3028 0008                  		move.w	8(a0),d0
00010702 9068 0030                  		sub.w	$30(a0),d0
00010706 6700                       		beq.s	Obj52_0A_Reset
00010708 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
0001070C 4E75                       		rts	
0001070E                            ; ===========================================================================
0001070E                            
0001070E                            Obj52_0A_Reset:
0001070E 4268 0036                  		clr.w	$36(a0)
00010712 5328 0028                  		subq.b	#1,$28(a0)
00010716 4E75                       		rts	
00010718                            ; ===========================================================================
00010718                            ; ---------------------------------------------------------------------------
00010718                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010718                            ; ---------------------------------------------------------------------------
00010718                            Map_obj52:
00010718                            	include "_maps\obj52mz.asm"
00010718                            ; ---------------------------------------------------------------------------
00010718                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010718                            ; ---------------------------------------------------------------------------
00010718 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
0001071C 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010720 0000                       		dc.w byte_1008F-Map_obj52
00010722 01                         byte_10054:	dc.b 1
00010723 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010728 02                         byte_1005A:	dc.b 2
00010729 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
0001072E F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010733 04                         byte_10065:	dc.b 4
00010734 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010739 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
0001073E F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010743 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010748 04                         byte_1007A:	dc.b 4
00010749 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
0001074E F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010753 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010758 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
0001075D 03                         byte_1008F:	dc.b 3
0001075E F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010763 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010768 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
0001076E 00                         		even
0001076E 00                         		even
0001076E                            
0001076E                            ; ---------------------------------------------------------------------------
0001076E                            ; Sprite mappings - moving block (LZ)
0001076E                            ; ---------------------------------------------------------------------------
0001076E                            Map_obj52a:
0001076E                            	include "_maps\obj52lz.asm"
0001076E                            ; ---------------------------------------------------------------------------
0001076E                            ; Sprite mappings - moving block (LZ)
0001076E                            ; ---------------------------------------------------------------------------
0001076E 0000                       		dc.w byte_100A2-Map_obj52a
00010770 01                         byte_100A2:	dc.b 1
00010771 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010776                            		even
00010776                            		even
00010776                            
00010776                            ; ===========================================================================
00010776                            ; ---------------------------------------------------------------------------
00010776                            ; Object 55 - Basaran enemy (MZ)
00010776                            ; ---------------------------------------------------------------------------
00010776                            
00010776                            Obj55:					; XREF: Obj_Index
00010776 7000                       		moveq	#0,d0
00010778 1028 0024                  		move.b	$24(a0),d0
0001077C 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010780 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010784                            ; ===========================================================================
00010784 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010786 0000                       		dc.w Obj55_Action-Obj55_Index
00010788                            ; ===========================================================================
00010788                            
00010788                            Obj55_Main:				; XREF: Obj55_Index
00010788 5428 0024                  		addq.b	#2,$24(a0)
0001078C 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010794 317C 84B8 0002             		move.w	#$84B8,2(a0)
0001079A 117C 0004 0001             		move.b	#4,1(a0)
000107A0 117C 000C 0016             		move.b	#$C,$16(a0)
000107A6 117C 0002 0018             		move.b	#2,$18(a0)
000107AC 117C 000B 0020             		move.b	#$B,$20(a0)
000107B2 117C 0010 0019             		move.b	#$10,$19(a0)
000107B8                            
000107B8                            Obj55_Action:				; XREF: Obj55_Index
000107B8 7000                       		moveq	#0,d0
000107BA 1028 0025                  		move.b	$25(a0),d0
000107BE 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
000107C2 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
000107C6 43F9 0000 0000             		lea	(Ani_obj55).l,a1
000107CC 6100 A5D0                  		bsr.w	AnimateSprite
000107D0 6000 F5B4                  		bra.w	MarkObjGone
000107D4                            ; ===========================================================================
000107D4 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
000107D6 0000                       		dc.w Obj55_DropFly-Obj55_Index2
000107D8 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
000107DA 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
000107DC                            ; ===========================================================================
000107DC                            
000107DC                            Obj55_ChkDrop:				; XREF: Obj55_Index2
000107DC 343C 0080                  		move.w	#$80,d2
000107E0 6100 0000                  		bsr.w	Obj55_ChkSonic
000107E4 6400                       		bcc.s	Obj55_NoDrop
000107E6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000107EA 3140 0036                  		move.w	d0,$36(a0)
000107EE 9068 000C                  		sub.w	$C(a0),d0
000107F2 6500                       		bcs.s	Obj55_NoDrop
000107F4 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
000107F8 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
000107FA 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000107FE 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010800 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010804 D007                       		add.b	d7,d0
00010806 0200 0007                  		andi.b	#7,d0
0001080A 6600                       		bne.s	Obj55_NoDrop
0001080C 117C 0001 001C             		move.b	#1,$1C(a0)
00010812 5428 0025                  		addq.b	#2,$25(a0)
00010816                            
00010816                            Obj55_NoDrop:
00010816 4E75                       		rts	
00010818                            ; ===========================================================================
00010818                            
00010818                            Obj55_DropFly:				; XREF: Obj55_Index2
00010818 6100 D49E                  		bsr.w	SpeedToPos
0001081C 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010822 343C 0080                  		move.w	#$80,d2
00010826 6100 0000                  		bsr.w	Obj55_ChkSonic
0001082A 3028 0036                  		move.w	$36(a0),d0
0001082E 9068 000C                  		sub.w	$C(a0),d0
00010832 6500                       		bcs.s	Obj55_ChkDel
00010834 0C40 0010                  		cmpi.w	#$10,d0
00010838 6400                       		bcc.s	locret_10180
0001083A 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
0001083E 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010844 117C 0002 001C             		move.b	#2,$1C(a0)
0001084A 5428 0025                  		addq.b	#2,$25(a0)
0001084E                            
0001084E                            locret_10180:
0001084E 4E75                       		rts	
00010850                            ; ===========================================================================
00010850                            
00010850                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010850 4A28 0001                  		tst.b	1(a0)
00010854 6A00 D4C4                  		bpl.w	DeleteObject
00010858 4E75                       		rts	
0001085A                            ; ===========================================================================
0001085A                            
0001085A                            Obj55_PlaySnd:				; XREF: Obj55_Index2
0001085A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001085E 0200 000F                  		andi.b	#$F,d0
00010862 6600                       		bne.s	loc_101A0
00010864 303C 00C0                  		move.w	#$C0,d0
00010868 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flapping sound
0001086E                            
0001086E                            loc_101A0:
0001086E 6100 D448                  		bsr.w	SpeedToPos
00010872 3038 D008                  		move.w	($FFFFD008).w,d0
00010876 9068 0008                  		sub.w	8(a0),d0
0001087A 6400                       		bcc.s	loc_101B0
0001087C 4440                       		neg.w	d0
0001087E                            
0001087E                            loc_101B0:
0001087E 0C40 0080                  		cmpi.w	#$80,d0
00010882 6500                       		bcs.s	locret_101C6
00010884 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010888 D007                       		add.b	d7,d0
0001088A 0200 0007                  		andi.b	#7,d0
0001088E 6600                       		bne.s	locret_101C6
00010890 5428 0025                  		addq.b	#2,$25(a0)
00010894                            
00010894                            locret_101C6:
00010894 4E75                       		rts	
00010896                            ; ===========================================================================
00010896                            
00010896                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010896 6100 D420                  		bsr.w	SpeedToPos
0001089A 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
000108A0 6100 0000                  		bsr.w	ObjHitCeiling
000108A4 4A41                       		tst.w	d1		; has basaran hit the ceiling?
000108A6 6A00                       		bpl.s	locret_101F4	; if not, branch
000108A8 9368 000C                  		sub.w	d1,$C(a0)
000108AC 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
000108B2 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
000108B6 4268 0012                  		clr.w	$12(a0)
000108BA 4228 001C                  		clr.b	$1C(a0)
000108BE 4228 0025                  		clr.b	$25(a0)
000108C2                            
000108C2                            locret_101F4:
000108C2 4E75                       		rts	
000108C4                            ; ===========================================================================
000108C4                            
000108C4                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
000108C4 323C 0100                  		move.w	#$100,d1
000108C8 08E8 0000 0022             		bset	#0,$22(a0)
000108CE 3038 D008                  		move.w	($FFFFD008).w,d0
000108D2 9068 0008                  		sub.w	8(a0),d0
000108D6 6400                       		bcc.s	loc_10214
000108D8 4440                       		neg.w	d0
000108DA 4441                       		neg.w	d1
000108DC 08A8 0000 0022             		bclr	#0,$22(a0)
000108E2                            
000108E2                            loc_10214:
000108E2 B042                       		cmp.w	d2,d0
000108E4 4E75                       		rts	
000108E6                            ; ===========================================================================
000108E6 6100 D3D0                  		bsr.w	SpeedToPos
000108EA 6100 D3F2                  		bsr.w	DisplaySprite
000108EE 4A28 0001                  		tst.b	1(a0)
000108F2 6A00 D426                  		bpl.w	DeleteObject
000108F6 4E75                       		rts	
000108F8                            ; ===========================================================================
000108F8                            Ani_obj55:
000108F8                            	include "_anim\obj55.asm"
000108F8                            ; ---------------------------------------------------------------------------
000108F8                            ; Animation script - Basaran enemy
000108F8                            ; ---------------------------------------------------------------------------
000108F8 0000                       		dc.w byte_10230-Ani_obj55
000108FA 0000                       		dc.w byte_10234-Ani_obj55
000108FC 0000                       		dc.w byte_10238-Ani_obj55
000108FE 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010902 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010906 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
0001090C                            		even
0001090C                            		even
0001090C                            
0001090C                            ; ---------------------------------------------------------------------------
0001090C                            ; Sprite mappings - Basaran enemy (MZ)
0001090C                            ; ---------------------------------------------------------------------------
0001090C                            Map_obj55:
0001090C                            	include "_maps\obj55.asm"
0001090C                            ; ---------------------------------------------------------------------------
0001090C                            ; Sprite mappings - Basaran enemy (MZ)
0001090C                            ; ---------------------------------------------------------------------------
0001090C 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010910 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010914 01                         byte_10246:	dc.b 1
00010915 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0001091A 03                         byte_1024C:	dc.b 3
0001091B F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010920 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010925 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
0001092A 04                         byte_1025C:	dc.b 4
0001092B F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010930 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010935 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
0001093A 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
0001093F 04                         byte_10271:	dc.b 4
00010940 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010945 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
0001094A 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
0001094F FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010954                            		even
00010954                            		even
00010954                            
00010954                            ; ===========================================================================
00010954                            ; ---------------------------------------------------------------------------
00010954                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010954                            ; ---------------------------------------------------------------------------
00010954                            
00010954                            Obj56:					; XREF: Obj_Index
00010954 7000                       		moveq	#0,d0
00010956 1028 0024                  		move.b	$24(a0),d0
0001095A 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
0001095E 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010962                            ; ===========================================================================
00010962 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010964 0000                       		dc.w Obj56_Action-Obj56_Index
00010966                            
00010966 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010968 2020                       		dc.b  $20, $20
0001096A 1020                       		dc.b  $10, $20
0001096C 201A                       		dc.b  $20, $1A
0001096E 1027                       		dc.b  $10, $27
00010970 1010                       		dc.b  $10, $10
00010972 0820                       		dc.b	8, $20
00010974 4010                       		dc.b  $40, $10
00010976                            ; ===========================================================================
00010976                            
00010976                            Obj56_Main:				; XREF: Obj56_Index
00010976 5428 0024                  		addq.b	#2,$24(a0)
0001097A 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010982 317C 4000 0002             		move.w	#$4000,2(a0)
00010988 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001098E 6600                       		bne.s	loc_102C8
00010990 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010996                            
00010996                            loc_102C8:
00010996 117C 0004 0001             		move.b	#4,1(a0)
0001099C 117C 0003 0018             		move.b	#3,$18(a0)
000109A2 7000                       		moveq	#0,d0
000109A4 1028 0028                  		move.b	$28(a0),d0
000109A8 E648                       		lsr.w	#3,d0
000109AA 0240 000E                  		andi.w	#$E,d0
000109AE 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
000109B2 115A 0019                  		move.b	(a2)+,$19(a0)
000109B6 1152 0016                  		move.b	(a2),$16(a0)
000109BA E248                       		lsr.w	#1,d0
000109BC 1140 001A                  		move.b	d0,$1A(a0)
000109C0 3168 0008 0034             		move.w	8(a0),$34(a0)
000109C6 3168 000C 0030             		move.w	$C(a0),$30(a0)
000109CC 7000                       		moveq	#0,d0
000109CE 1012                       		move.b	(a2),d0
000109D0 D040                       		add.w	d0,d0
000109D2 3140 003A                  		move.w	d0,$3A(a0)
000109D6 7000                       		moveq	#0,d0
000109D8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000109DE 6700                       		beq.s	loc_10332
000109E0 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
000109E4 0240 000F                  		andi.w	#$F,d0
000109E8 5140                       		subq.w	#8,d0
000109EA 6500                       		bcs.s	loc_10332
000109EC E548                       		lsl.w	#2,d0
000109EE 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
000109F2 45F2 0000                  		lea	(a2,d0.w),a2
000109F6 4A52                       		tst.w	(a2)
000109F8 6A00                       		bpl.s	loc_10332
000109FA 0868 0000 0022             		bchg	#0,$22(a0)
00010A00                            
00010A00                            loc_10332:
00010A00 1028 0028                  		move.b	$28(a0),d0
00010A04 6A00                       		bpl.s	Obj56_Action
00010A06 0200 000F                  		andi.b	#$F,d0
00010A0A 1140 003C                  		move.b	d0,$3C(a0)
00010A0E 117C 0005 0028             		move.b	#5,$28(a0)
00010A14 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010A1A 6600                       		bne.s	Obj56_ChkGone
00010A1C 117C 000C 0028             		move.b	#$C,$28(a0)
00010A22 317C 0080 003A             		move.w	#$80,$3A(a0)
00010A28                            
00010A28                            Obj56_ChkGone:
00010A28 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010A2C 7000                       		moveq	#0,d0
00010A2E 1028 0023                  		move.b	$23(a0),d0
00010A32 6700                       		beq.s	Obj56_Action
00010A34 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010A3A 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010A40 6700                       		beq.s	Obj56_Action
00010A42 5228 0028                  		addq.b	#1,$28(a0)
00010A46 4268 003A                  		clr.w	$3A(a0)
00010A4A                            
00010A4A                            Obj56_Action:				; XREF: Obj56_Index
00010A4A 3F28 0008                  		move.w	8(a0),-(sp)
00010A4E 7000                       		moveq	#0,d0
00010A50 1028 0028                  		move.b	$28(a0),d0	; get object type
00010A54 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010A58 D040                       		add.w	d0,d0
00010A5A 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010A5E 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010A62 381F                       		move.w	(sp)+,d4
00010A64 4A28 0001                  		tst.b	1(a0)
00010A68 6A00                       		bpl.s	Obj56_ChkDel
00010A6A 7200                       		moveq	#0,d1
00010A6C 1228 0019                  		move.b	$19(a0),d1
00010A70 0641 000B                  		addi.w	#$B,d1
00010A74 7400                       		moveq	#0,d2
00010A76 1428 0016                  		move.b	$16(a0),d2
00010A7A 3602                       		move.w	d2,d3
00010A7C 5243                       		addq.w	#1,d3
00010A7E 6100 F62E                  		bsr.w	SolidObject
00010A82                            
00010A82                            Obj56_ChkDel:
00010A82 3028 0034                  		move.w	$34(a0),d0
00010A86 0240 FF80                  		andi.w	#$FF80,d0
00010A8A 3238 F700                  		move.w	($FFFFF700).w,d1
00010A8E 0441 0080                  		subi.w	#$80,d1
00010A92 0241 FF80                  		andi.w	#$FF80,d1
00010A96 9041                       		sub.w	d1,d0
00010A98 0C40 0280                  		cmpi.w	#$280,d0
00010A9C 6200 D27C                  		bhi.w	DeleteObject
00010AA0 6000 D23C                  		bra.w	DisplaySprite
00010AA4                            ; ===========================================================================
00010AA4 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010AA8 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010AAC 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010AB0 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010AB4 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010AB8 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010ABC 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010AC0                            ; ===========================================================================
00010AC0                            
00010AC0                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010AC0 4E75                       		rts	
00010AC2                            ; ===========================================================================
00010AC2                            
00010AC2                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010AC2 323C 0040                  		move.w	#$40,d1
00010AC6 7000                       		moveq	#0,d0
00010AC8 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010ACC 6000                       		bra.s	Obj56_Move_LR
00010ACE                            ; ===========================================================================
00010ACE                            
00010ACE                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010ACE 323C 0080                  		move.w	#$80,d1
00010AD2 7000                       		moveq	#0,d0
00010AD4 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010AD8                            
00010AD8                            Obj56_Move_LR:
00010AD8 0828 0000 0022             		btst	#0,$22(a0)
00010ADE 6700                       		beq.s	loc_10416
00010AE0 4440                       		neg.w	d0
00010AE2 D041                       		add.w	d1,d0
00010AE4                            
00010AE4                            loc_10416:
00010AE4 3228 0034                  		move.w	$34(a0),d1
00010AE8 9240                       		sub.w	d0,d1
00010AEA 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010AEE 4E75                       		rts	
00010AF0                            ; ===========================================================================
00010AF0                            
00010AF0                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010AF0 323C 0040                  		move.w	#$40,d1
00010AF4 7000                       		moveq	#0,d0
00010AF6 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010AFA 6000                       		bra.s	Obj56_Move_UD
00010AFC                            ; ===========================================================================
00010AFC                            
00010AFC                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010AFC 323C 0080                  		move.w	#$80,d1
00010B00 7000                       		moveq	#0,d0
00010B02 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010B06                            
00010B06                            Obj56_Move_UD:
00010B06 0828 0000 0022             		btst	#0,$22(a0)
00010B0C 6700                       		beq.s	loc_10444
00010B0E 4440                       		neg.w	d0
00010B10 D041                       		add.w	d1,d0
00010B12                            
00010B12                            loc_10444:
00010B12 3228 0030                  		move.w	$30(a0),d1
00010B16 9240                       		sub.w	d0,d1
00010B18 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010B1C 4E75                       		rts	
00010B1E                            ; ===========================================================================
00010B1E                            
00010B1E                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010B1E 4A28 0038                  		tst.b	$38(a0)
00010B22 6600                       		bne.s	loc_104A4
00010B24 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010B2A 6600                       		bne.s	loc_1047A	; if not, branch
00010B2C 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010B32 6600                       		bne.s	loc_1047A
00010B34 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010B38 3038 D008                  		move.w	($FFFFD008).w,d0
00010B3C B068 0008                  		cmp.w	8(a0),d0
00010B40 6400                       		bcc.s	loc_1047A
00010B42 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010B48                            
00010B48                            loc_1047A:
00010B48 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010B4C 7000                       		moveq	#0,d0
00010B4E 1028 003C                  		move.b	$3C(a0),d0
00010B52 0832 0000 0000             		btst	#0,(a2,d0.w)
00010B58 6700                       		beq.s	loc_104AE
00010B5A 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010B60 6600                       		bne.s	loc_1049E	; if not, branch
00010B62 0C00 0003                  		cmpi.b	#3,d0
00010B66 6600                       		bne.s	loc_1049E
00010B68 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010B6C                            
00010B6C                            loc_1049E:
00010B6C 117C 0001 0038             		move.b	#1,$38(a0)
00010B72                            
00010B72                            loc_104A4:
00010B72 4A68 003A                  		tst.w	$3A(a0)
00010B76 6700                       		beq.s	loc_104C8
00010B78 5568 003A                  		subq.w	#2,$3A(a0)
00010B7C                            
00010B7C                            loc_104AE:
00010B7C 3028 003A                  		move.w	$3A(a0),d0
00010B80 0828 0000 0022             		btst	#0,$22(a0)
00010B86 6700                       		beq.s	loc_104BC
00010B88 4440                       		neg.w	d0
00010B8A                            
00010B8A                            loc_104BC:
00010B8A 3228 0030                  		move.w	$30(a0),d1
00010B8E D240                       		add.w	d0,d1
00010B90 3141 000C                  		move.w	d1,$C(a0)
00010B94 4E75                       		rts	
00010B96                            ; ===========================================================================
00010B96                            
00010B96                            loc_104C8:
00010B96 5228 0028                  		addq.b	#1,$28(a0)
00010B9A 4228 0038                  		clr.b	$38(a0)
00010B9E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010BA2 7000                       		moveq	#0,d0
00010BA4 1028 0023                  		move.b	$23(a0),d0
00010BA8 67D2                       		beq.s	loc_104AE
00010BAA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010BB0 60CA                       		bra.s	loc_104AE
00010BB2                            ; ===========================================================================
00010BB2                            
00010BB2                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010BB2 4A28 0038                  		tst.b	$38(a0)
00010BB6 6600                       		bne.s	loc_10500
00010BB8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010BBC 7000                       		moveq	#0,d0
00010BBE 1028 003C                  		move.b	$3C(a0),d0
00010BC2 4A32 0000                  		tst.b	(a2,d0.w)
00010BC6 6A00                       		bpl.s	loc_10512
00010BC8 117C 0001 0038             		move.b	#1,$38(a0)
00010BCE                            
00010BCE                            loc_10500:
00010BCE 7000                       		moveq	#0,d0
00010BD0 1028 0016                  		move.b	$16(a0),d0
00010BD4 D040                       		add.w	d0,d0
00010BD6 B068 003A                  		cmp.w	$3A(a0),d0
00010BDA 6700                       		beq.s	loc_1052C
00010BDC 5468 003A                  		addq.w	#2,$3A(a0)
00010BE0                            
00010BE0                            loc_10512:
00010BE0 3028 003A                  		move.w	$3A(a0),d0
00010BE4 0828 0000 0022             		btst	#0,$22(a0)
00010BEA 6700                       		beq.s	loc_10520
00010BEC 4440                       		neg.w	d0
00010BEE                            
00010BEE                            loc_10520:
00010BEE 3228 0030                  		move.w	$30(a0),d1
00010BF2 D240                       		add.w	d0,d1
00010BF4 3141 000C                  		move.w	d1,$C(a0)
00010BF8 4E75                       		rts	
00010BFA                            ; ===========================================================================
00010BFA                            
00010BFA                            loc_1052C:
00010BFA 5328 0028                  		subq.b	#1,$28(a0)
00010BFE 4228 0038                  		clr.b	$38(a0)
00010C02 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010C06 7000                       		moveq	#0,d0
00010C08 1028 0023                  		move.b	$23(a0),d0
00010C0C 67D2                       		beq.s	loc_10512
00010C0E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010C14 60CA                       		bra.s	loc_10512
00010C16                            ; ===========================================================================
00010C16                            
00010C16                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010C16 4A28 0038                  		tst.b	$38(a0)
00010C1A 6600                       		bne.s	loc_1055E
00010C1C 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010C20 6700                       		beq.s	locret_10578
00010C22 117C 0001 0038             		move.b	#1,$38(a0)
00010C28 4268 003A                  		clr.w	$3A(a0)
00010C2C                            
00010C2C                            loc_1055E:
00010C2C 5268 0008                  		addq.w	#1,8(a0)
00010C30 3168 0008 0034             		move.w	8(a0),$34(a0)
00010C36 5268 003A                  		addq.w	#1,$3A(a0)
00010C3A 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010C40 6600                       		bne.s	locret_10578
00010C42 4228 0028                  		clr.b	$28(a0)
00010C46                            
00010C46                            locret_10578:
00010C46 4E75                       		rts	
00010C48                            ; ===========================================================================
00010C48                            
00010C48                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010C48 4A28 0038                  		tst.b	$38(a0)
00010C4C 6600                       		bne.s	loc_10598
00010C4E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010C52 7000                       		moveq	#0,d0
00010C54 1028 003C                  		move.b	$3C(a0),d0
00010C58 0832 0000 0000             		btst	#0,(a2,d0.w)
00010C5E 6700                       		beq.s	loc_105A2
00010C60 117C 0001 0038             		move.b	#1,$38(a0)
00010C66                            
00010C66                            loc_10598:
00010C66 4A68 003A                  		tst.w	$3A(a0)
00010C6A 6700                       		beq.s	loc_105C0
00010C6C 5568 003A                  		subq.w	#2,$3A(a0)
00010C70                            
00010C70                            loc_105A2:
00010C70 3028 003A                  		move.w	$3A(a0),d0
00010C74 0828 0000 0022             		btst	#0,$22(a0)
00010C7A 6700                       		beq.s	loc_105B4
00010C7C 4440                       		neg.w	d0
00010C7E 0640 0080                  		addi.w	#$80,d0
00010C82                            
00010C82                            loc_105B4:
00010C82 3228 0034                  		move.w	$34(a0),d1
00010C86 D240                       		add.w	d0,d1
00010C88 3141 0008                  		move.w	d1,8(a0)
00010C8C 4E75                       		rts	
00010C8E                            ; ===========================================================================
00010C8E                            
00010C8E                            loc_105C0:
00010C8E 5228 0028                  		addq.b	#1,$28(a0)
00010C92 4228 0038                  		clr.b	$38(a0)
00010C96 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010C9A 7000                       		moveq	#0,d0
00010C9C 1028 0023                  		move.b	$23(a0),d0
00010CA0 67CE                       		beq.s	loc_105A2
00010CA2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010CA8 60C6                       		bra.s	loc_105A2
00010CAA                            ; ===========================================================================
00010CAA                            
00010CAA                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010CAA 4A28 0038                  		tst.b	$38(a0)
00010CAE 6600                       		bne.s	loc_105F8
00010CB0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010CB4 7000                       		moveq	#0,d0
00010CB6 1028 003C                  		move.b	$3C(a0),d0
00010CBA 4A32 0000                  		tst.b	(a2,d0.w)
00010CBE 6A00                       		bpl.s	loc_10606
00010CC0 117C 0001 0038             		move.b	#1,$38(a0)
00010CC6                            
00010CC6                            loc_105F8:
00010CC6 303C 0080                  		move.w	#$80,d0
00010CCA B068 003A                  		cmp.w	$3A(a0),d0
00010CCE 6700                       		beq.s	loc_10624
00010CD0 5468 003A                  		addq.w	#2,$3A(a0)
00010CD4                            
00010CD4                            loc_10606:
00010CD4 3028 003A                  		move.w	$3A(a0),d0
00010CD8 0828 0000 0022             		btst	#0,$22(a0)
00010CDE 6700                       		beq.s	loc_10618
00010CE0 4440                       		neg.w	d0
00010CE2 0640 0080                  		addi.w	#$80,d0
00010CE6                            
00010CE6                            loc_10618:
00010CE6 3228 0034                  		move.w	$34(a0),d1
00010CEA D240                       		add.w	d0,d1
00010CEC 3141 0008                  		move.w	d1,8(a0)
00010CF0 4E75                       		rts	
00010CF2                            ; ===========================================================================
00010CF2                            
00010CF2                            loc_10624:
00010CF2 5328 0028                  		subq.b	#1,$28(a0)
00010CF6 4228 0038                  		clr.b	$38(a0)
00010CFA 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010CFE 7000                       		moveq	#0,d0
00010D00 1028 0023                  		move.b	$23(a0),d0
00010D04 67CE                       		beq.s	loc_10606
00010D06 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010D0C 60C6                       		bra.s	loc_10606
00010D0E                            ; ===========================================================================
00010D0E                            
00010D0E                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010D0E 323C 0010                  		move.w	#$10,d1
00010D12 7000                       		moveq	#0,d0
00010D14 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010D18 E248                       		lsr.w	#1,d0
00010D1A 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010D1E 6000                       		bra.s	Obj56_Move_Sqr
00010D20                            ; ===========================================================================
00010D20                            
00010D20                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010D20 323C 0030                  		move.w	#$30,d1
00010D24 7000                       		moveq	#0,d0
00010D26 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010D2A 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010D2E 6000                       		bra.s	Obj56_Move_Sqr
00010D30                            ; ===========================================================================
00010D30                            
00010D30                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010D30 323C 0050                  		move.w	#$50,d1
00010D34 7000                       		moveq	#0,d0
00010D36 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010D3A 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010D3E 6000                       		bra.s	Obj56_Move_Sqr
00010D40                            ; ===========================================================================
00010D40                            
00010D40                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010D40 323C 0070                  		move.w	#$70,d1
00010D44 7000                       		moveq	#0,d0
00010D46 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010D4A 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010D4E                            
00010D4E                            Obj56_Move_Sqr:
00010D4E 4A43                       		tst.w	d3
00010D50 6600                       		bne.s	loc_1068E
00010D52 5228 0022                  		addq.b	#1,$22(a0)
00010D56 0228 0003 0022             		andi.b	#3,$22(a0)
00010D5C                            
00010D5C                            loc_1068E:
00010D5C 1428 0022                  		move.b	$22(a0),d2
00010D60 0202 0003                  		andi.b	#3,d2
00010D64 6600                       		bne.s	loc_106AE
00010D66 9041                       		sub.w	d1,d0
00010D68 D068 0034                  		add.w	$34(a0),d0
00010D6C 3140 0008                  		move.w	d0,8(a0)
00010D70 4441                       		neg.w	d1
00010D72 D268 0030                  		add.w	$30(a0),d1
00010D76 3141 000C                  		move.w	d1,$C(a0)
00010D7A 4E75                       		rts	
00010D7C                            ; ===========================================================================
00010D7C                            
00010D7C                            loc_106AE:
00010D7C 5302                       		subq.b	#1,d2
00010D7E 6600                       		bne.s	loc_106CC
00010D80 5341                       		subq.w	#1,d1
00010D82 9041                       		sub.w	d1,d0
00010D84 4440                       		neg.w	d0
00010D86 D068 0030                  		add.w	$30(a0),d0
00010D8A 3140 000C                  		move.w	d0,$C(a0)
00010D8E 5241                       		addq.w	#1,d1
00010D90 D268 0034                  		add.w	$34(a0),d1
00010D94 3141 0008                  		move.w	d1,8(a0)
00010D98 4E75                       		rts	
00010D9A                            ; ===========================================================================
00010D9A                            
00010D9A                            loc_106CC:
00010D9A 5302                       		subq.b	#1,d2
00010D9C 6600                       		bne.s	loc_106EA
00010D9E 5341                       		subq.w	#1,d1
00010DA0 9041                       		sub.w	d1,d0
00010DA2 4440                       		neg.w	d0
00010DA4 D068 0034                  		add.w	$34(a0),d0
00010DA8 3140 0008                  		move.w	d0,8(a0)
00010DAC 5241                       		addq.w	#1,d1
00010DAE D268 0030                  		add.w	$30(a0),d1
00010DB2 3141 000C                  		move.w	d1,$C(a0)
00010DB6 4E75                       		rts	
00010DB8                            ; ===========================================================================
00010DB8                            
00010DB8                            loc_106EA:
00010DB8 9041                       		sub.w	d1,d0
00010DBA D068 0030                  		add.w	$30(a0),d0
00010DBE 3140 000C                  		move.w	d0,$C(a0)
00010DC2 4441                       		neg.w	d1
00010DC4 D268 0034                  		add.w	$34(a0),d1
00010DC8 3141 0008                  		move.w	d1,8(a0)
00010DCC 4E75                       		rts	
00010DCE                            ; ===========================================================================
00010DCE                            ; ---------------------------------------------------------------------------
00010DCE                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010DCE                            ; ---------------------------------------------------------------------------
00010DCE                            Map_obj56:
00010DCE                            	include "_maps\obj56.asm"
00010DCE                            ; ---------------------------------------------------------------------------
00010DCE                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010DCE                            ; ---------------------------------------------------------------------------
00010DCE 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010DD2 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010DD6 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010DDA 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010DDE 01                         byte_10710:	dc.b 1
00010DDF F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010DE4 04                         byte_10716:	dc.b 4
00010DE5 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010DEA E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010DEF 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010DF4 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010DF9 02                         byte_1072B:	dc.b 2
00010DFA E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010DFF 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010E04 04                         byte_10736:	dc.b 4
00010E05 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010E0A E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010E0F 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010E14 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010E19 03                         byte_1074B:	dc.b 3
00010E1A D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010E1F F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010E24 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010E29 01                         byte_1075B:	dc.b 1
00010E2A F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010E2F 02                         byte_10761:	dc.b 2
00010E30 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010E35 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010E3A 04                         byte_1076C:	dc.b 4
00010E3B F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010E40 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010E45 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010E4A F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010E50 00                         		even
00010E50 00                         		even
00010E50                            
00010E50                            ; ===========================================================================
00010E50                            ; ---------------------------------------------------------------------------
00010E50                            ; Object 57 - spiked balls (SYZ, LZ)
00010E50                            ; ---------------------------------------------------------------------------
00010E50                            
00010E50                            Obj57:					; XREF: Obj_Index
00010E50 7000                       		moveq	#0,d0
00010E52 1028 0024                  		move.b	$24(a0),d0
00010E56 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010E5A 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010E5E                            ; ===========================================================================
00010E5E 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010E60 0000                       		dc.w Obj57_Move-Obj57_Index
00010E62 0000                       		dc.w Obj57_Display-Obj57_Index
00010E64                            ; ===========================================================================
00010E64                            
00010E64                            Obj57_Main:				; XREF: Obj57_Index
00010E64 5428 0024                  		addq.b	#2,$24(a0)
00010E68 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010E70 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010E76 117C 0004 0001             		move.b	#4,1(a0)
00010E7C 117C 0004 0018             		move.b	#4,$18(a0)
00010E82 117C 0008 0019             		move.b	#8,$19(a0)
00010E88 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010E8E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010E94 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010E9A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010EA0 6600                       		bne.s	loc_107E8
00010EA2 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010EA8 317C 0310 0002             		move.w	#$310,2(a0)
00010EAE 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010EB6                            
00010EB6                            loc_107E8:
00010EB6 1228 0028                  		move.b	$28(a0),d1	; get object type
00010EBA 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010EBE 4881                       		ext.w	d1
00010EC0 E741                       		asl.w	#3,d1		; multiply by 8
00010EC2 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010EC6 1028 0022                  		move.b	$22(a0),d0
00010ECA E418                       		ror.b	#2,d0
00010ECC 0200 00C0                  		andi.b	#-$40,d0
00010ED0 1140 0026                  		move.b	d0,$26(a0)
00010ED4 45E8 0029                  		lea	$29(a0),a2
00010ED8 1228 0028                  		move.b	$28(a0),d1	; get object type
00010EDC 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00010EE0 14FC 0000                  		move.b	#0,(a2)+
00010EE4 3601                       		move.w	d1,d3
00010EE6 E94B                       		lsl.w	#4,d3
00010EE8 1143 003C                  		move.b	d3,$3C(a0)
00010EEC 5341                       		subq.w	#1,d1		; set chain length (type-1)
00010EEE 6500                       		bcs.s	loc_10894
00010EF0 0828 0003 0028             		btst	#3,$28(a0)
00010EF6 6700                       		beq.s	Obj57_MakeChain
00010EF8 5341                       		subq.w	#1,d1
00010EFA 6500                       		bcs.s	loc_10894
00010EFC                            
00010EFC                            Obj57_MakeChain:
00010EFC 6100 D266                  		bsr.w	SingleObjLoad
00010F00 6600                       		bne.s	loc_10894
00010F02 5228 0029                  		addq.b	#1,$29(a0)
00010F06 3A09                       		move.w	a1,d5
00010F08 0445 D000                  		subi.w	#-$3000,d5
00010F0C EC4D                       		lsr.w	#6,d5
00010F0E 0245 007F                  		andi.w	#$7F,d5
00010F12 14C5                       		move.b	d5,(a2)+
00010F14 137C 0004 0024             		move.b	#4,$24(a1)
00010F1A 1290                       		move.b	0(a0),0(a1)
00010F1C 2368 0004 0004             		move.l	4(a0),4(a1)
00010F22 3368 0002 0002             		move.w	2(a0),2(a1)
00010F28 1368 0001 0001             		move.b	1(a0),1(a1)
00010F2E 1368 0018 0018             		move.b	$18(a0),$18(a1)
00010F34 1368 0019 0019             		move.b	$19(a0),$19(a1)
00010F3A 1368 0020 0020             		move.b	$20(a0),$20(a1)
00010F40 0403 0010                  		subi.b	#$10,d3
00010F44 1343 003C                  		move.b	d3,$3C(a1)
00010F48 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00010F4E 6600                       		bne.s	loc_10890
00010F50 4A03                       		tst.b	d3
00010F52 6600                       		bne.s	loc_10890
00010F54 137C 0002 001A             		move.b	#2,$1A(a1)
00010F5A                            
00010F5A                            loc_10890:
00010F5A 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00010F5E                            
00010F5E                            loc_10894:
00010F5E 3A08                       		move.w	a0,d5
00010F60 0445 D000                  		subi.w	#-$3000,d5
00010F64 EC4D                       		lsr.w	#6,d5
00010F66 0245 007F                  		andi.w	#$7F,d5
00010F6A 14C5                       		move.b	d5,(a2)+
00010F6C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010F72 6600                       		bne.s	Obj57_Move
00010F74 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00010F7A 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00010F80                            
00010F80                            Obj57_Move:				; XREF: Obj57_Index
00010F80 6100 0000                  		bsr.w	Obj57_MoveSub
00010F84 6000 0000                  		bra.w	Obj57_ChkDel
00010F88                            ; ===========================================================================
00010F88                            
00010F88                            Obj57_MoveSub:				; XREF: Obj57_Move
00010F88 3028 003E                  		move.w	$3E(a0),d0
00010F8C D168 0026                  		add.w	d0,$26(a0)
00010F90 1028 0026                  		move.b	$26(a0),d0
00010F94 4EB9 0000 2C64             		jsr	(CalcSine).l
00010F9A 3428 0038                  		move.w	$38(a0),d2
00010F9E 3628 003A                  		move.w	$3A(a0),d3
00010FA2 45E8 0029                  		lea	$29(a0),a2
00010FA6 7C00                       		moveq	#0,d6
00010FA8 1C1A                       		move.b	(a2)+,d6
00010FAA                            
00010FAA                            Obj57_MoveLoop:
00010FAA 7800                       		moveq	#0,d4
00010FAC 181A                       		move.b	(a2)+,d4
00010FAE ED4C                       		lsl.w	#6,d4
00010FB0 0684 00FF D000             		addi.l	#$FFD000,d4
00010FB6 2244                       		movea.l	d4,a1
00010FB8 7800                       		moveq	#0,d4
00010FBA 1829 003C                  		move.b	$3C(a1),d4
00010FBE 2A04                       		move.l	d4,d5
00010FC0 C9C0                       		muls.w	d0,d4
00010FC2 E084                       		asr.l	#8,d4
00010FC4 CBC1                       		muls.w	d1,d5
00010FC6 E085                       		asr.l	#8,d5
00010FC8 D842                       		add.w	d2,d4
00010FCA DA43                       		add.w	d3,d5
00010FCC 3344 000C                  		move.w	d4,$C(a1)
00010FD0 3345 0008                  		move.w	d5,8(a1)
00010FD4 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00010FD8 4E75                       		rts	
00010FDA                            ; ===========================================================================
00010FDA                            
00010FDA                            Obj57_ChkDel:				; XREF: Obj57_Move
00010FDA 3028 003A                  		move.w	$3A(a0),d0
00010FDE 0240 FF80                  		andi.w	#$FF80,d0
00010FE2 3238 F700                  		move.w	($FFFFF700).w,d1
00010FE6 0441 0080                  		subi.w	#$80,d1
00010FEA 0241 FF80                  		andi.w	#$FF80,d1
00010FEE 9041                       		sub.w	d1,d0
00010FF0 0C40 0280                  		cmpi.w	#$280,d0
00010FF4 6200 0000                  		bhi.w	Obj57_Delete
00010FF8 6000 CCE4                  		bra.w	DisplaySprite
00010FFC                            ; ===========================================================================
00010FFC                            
00010FFC                            Obj57_Delete:				; XREF: Obj57_ChkDel
00010FFC 7400                       		moveq	#0,d2
00010FFE 45E8 0029                  		lea	$29(a0),a2
00011002 141A                       		move.b	(a2)+,d2
00011004                            
00011004                            Obj57_DelLoop:
00011004 7000                       		moveq	#0,d0
00011006 101A                       		move.b	(a2)+,d0
00011008 ED48                       		lsl.w	#6,d0
0001100A 0680 00FF D000             		addi.l	#$FFD000,d0
00011010 2240                       		movea.l	d0,a1
00011012 6100 CD08                  		bsr.w	DeleteObject2
00011016 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
0001101A                            
0001101A 4E75                       		rts	
0001101C                            ; ===========================================================================
0001101C                            
0001101C                            Obj57_Display:				; XREF: Obj57_Index
0001101C 6000 CCC0                  		bra.w	DisplaySprite
00011020                            ; ===========================================================================
00011020                            ; ---------------------------------------------------------------------------
00011020                            ; Sprite mappings - chain of spiked balls (SYZ)
00011020                            ; ---------------------------------------------------------------------------
00011020                            Map_obj57:
00011020                            	include "_maps\obj57syz.asm"
00011020                            ; ---------------------------------------------------------------------------
00011020                            ; Sprite mappings - chain of spiked balls (SYZ)
00011020                            ; ---------------------------------------------------------------------------
00011020 0000                       		dc.w byte_10958-Map_obj57
00011022 01                         byte_10958:	dc.b 1
00011023 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011028                            		even
00011028                            		even
00011028                            
00011028                            ; ---------------------------------------------------------------------------
00011028                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011028                            ; ---------------------------------------------------------------------------
00011028                            Map_obj57a:
00011028                            	include "_maps\obj57lz.asm"
00011028                            ; ---------------------------------------------------------------------------
00011028                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011028                            ; ---------------------------------------------------------------------------
00011028 0000                       		dc.w byte_10964-Map_obj57a
0001102A 0000                       		dc.w byte_1096A-Map_obj57a
0001102C 0000                       		dc.w byte_10970-Map_obj57a
0001102E 01                         byte_10964:	dc.b 1
0001102F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011034 01                         byte_1096A:	dc.b 1
00011035 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
0001103A 01                         byte_10970:	dc.b 1
0001103B F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00011040                            		even
00011040                            		even
00011040                            
00011040                            ; ===========================================================================
00011040                            ; ---------------------------------------------------------------------------
00011040                            ; Object 58 - giant spiked balls (SYZ)
00011040                            ; ---------------------------------------------------------------------------
00011040                            
00011040                            Obj58:					; XREF: Obj_Index
00011040 7000                       		moveq	#0,d0
00011042 1028 0024                  		move.b	$24(a0),d0
00011046 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
0001104A 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
0001104E                            ; ===========================================================================
0001104E 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00011050 0000                       		dc.w Obj58_Move-Obj58_Index
00011052                            ; ===========================================================================
00011052                            
00011052                            Obj58_Main:				; XREF: Obj58_Index
00011052 5428 0024                  		addq.b	#2,$24(a0)
00011056 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
0001105E 317C 0396 0002             		move.w	#$396,2(a0)
00011064 117C 0004 0001             		move.b	#4,1(a0)
0001106A 117C 0004 0018             		move.b	#4,$18(a0)
00011070 117C 0018 0019             		move.b	#$18,$19(a0)
00011076 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001107C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00011082 117C 0086 0020             		move.b	#$86,$20(a0)
00011088 1228 0028                  		move.b	$28(a0),d1	; get object type
0001108C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011090 4881                       		ext.w	d1
00011092 E741                       		asl.w	#3,d1		; multiply by 8
00011094 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00011098 1028 0022                  		move.b	$22(a0),d0
0001109C E418                       		ror.b	#2,d0
0001109E 0200 00C0                  		andi.b	#$C0,d0
000110A2 1140 0026                  		move.b	d0,$26(a0)
000110A6 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
000110AC                            
000110AC                            Obj58_Move:				; XREF: Obj58_Index
000110AC 7000                       		moveq	#0,d0
000110AE 1028 0028                  		move.b	$28(a0),d0	; get object type
000110B2 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
000110B6 D040                       		add.w	d0,d0
000110B8 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
000110BC 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
000110C0 3028 003A                  		move.w	$3A(a0),d0
000110C4 0240 FF80                  		andi.w	#$FF80,d0
000110C8 3238 F700                  		move.w	($FFFFF700).w,d1
000110CC 0441 0080                  		subi.w	#$80,d1
000110D0 0241 FF80                  		andi.w	#$FF80,d1
000110D4 9041                       		sub.w	d1,d0
000110D6 0C40 0280                  		cmpi.w	#$280,d0
000110DA 6200 CC3E                  		bhi.w	DeleteObject
000110DE 6000 CBFE                  		bra.w	DisplaySprite
000110E2                            ; ===========================================================================
000110E2 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
000110E4 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
000110E6 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
000110E8 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
000110EA                            ; ===========================================================================
000110EA                            
000110EA                            Obj58_Type00:				; XREF: Obj58_TypeIndex
000110EA 4E75                       		rts	
000110EC                            ; ===========================================================================
000110EC                            
000110EC                            Obj58_Type01:				; XREF: Obj58_TypeIndex
000110EC 323C 0060                  		move.w	#$60,d1
000110F0 7000                       		moveq	#0,d0
000110F2 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000110F6 0828 0000 0022             		btst	#0,$22(a0)
000110FC 6700                       		beq.s	loc_10A38
000110FE 4440                       		neg.w	d0
00011100 D041                       		add.w	d1,d0
00011102                            
00011102                            loc_10A38:
00011102 3228 003A                  		move.w	$3A(a0),d1
00011106 9240                       		sub.w	d0,d1
00011108 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001110C 4E75                       		rts	
0001110E                            ; ===========================================================================
0001110E                            
0001110E                            Obj58_Type02:				; XREF: Obj58_TypeIndex
0001110E 323C 0060                  		move.w	#$60,d1
00011112 7000                       		moveq	#0,d0
00011114 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011118 0828 0000 0022             		btst	#0,$22(a0)
0001111E 6700                       		beq.s	loc_10A5C
00011120 4440                       		neg.w	d0
00011122 0640 0080                  		addi.w	#$80,d0
00011126                            
00011126                            loc_10A5C:
00011126 3228 0038                  		move.w	$38(a0),d1
0001112A 9240                       		sub.w	d0,d1
0001112C 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011130 4E75                       		rts	
00011132                            ; ===========================================================================
00011132                            
00011132                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00011132 3028 003E                  		move.w	$3E(a0),d0
00011136 D168 0026                  		add.w	d0,$26(a0)
0001113A 1028 0026                  		move.b	$26(a0),d0
0001113E 4EB9 0000 2C64             		jsr	(CalcSine).l
00011144 3428 0038                  		move.w	$38(a0),d2
00011148 3628 003A                  		move.w	$3A(a0),d3
0001114C 7800                       		moveq	#0,d4
0001114E 1828 003C                  		move.b	$3C(a0),d4
00011152 2A04                       		move.l	d4,d5
00011154 C9C0                       		muls.w	d0,d4
00011156 E084                       		asr.l	#8,d4
00011158 CBC1                       		muls.w	d1,d5
0001115A E085                       		asr.l	#8,d5
0001115C D842                       		add.w	d2,d4
0001115E DA43                       		add.w	d3,d5
00011160 3144 000C                  		move.w	d4,$C(a0)
00011164 3145 0008                  		move.w	d5,8(a0)
00011168 4E75                       		rts	
0001116A                            ; ===========================================================================
0001116A                            ; ---------------------------------------------------------------------------
0001116A                            ; Sprite mappings - SBZ	spiked ball on a chain
0001116A                            ; ---------------------------------------------------------------------------
0001116A                            Map_obj15b:
0001116A                            	include "_maps\obj15sbz.asm"
0001116A                            ; ---------------------------------------------------------------------------
0001116A                            ; Sprite mappings - spiked ball on a chain (SBZ)
0001116A                            ; ---------------------------------------------------------------------------
0001116A 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
0001116E 0000                       		dc.w byte_10AC6-Map_obj15b
00011170 05                         byte_10AA6:	dc.b 5
00011171 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00011176 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
0001117B F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00011180 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00011185 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
0001118A 01                         byte_10AC0:	dc.b 1
0001118B F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00011190 02                         byte_10AC6:	dc.b 2
00011191 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00011196 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
0001119C 00                         		even
0001119C 00                         		even
0001119C                            
0001119C                            ; ===========================================================================
0001119C                            ; ---------------------------------------------------------------------------
0001119C                            ; Object 59 - platforms	that move when you stand on them (SLZ)
0001119C                            ; ---------------------------------------------------------------------------
0001119C                            
0001119C                            Obj59:					; XREF: Obj_Index
0001119C 7000                       		moveq	#0,d0
0001119E 1028 0024                  		move.b	$24(a0),d0
000111A2 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
000111A6 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
000111AA 3028 0032                  		move.w	$32(a0),d0
000111AE 0240 FF80                  		andi.w	#$FF80,d0
000111B2 3238 F700                  		move.w	($FFFFF700).w,d1
000111B6 0441 0080                  		subi.w	#$80,d1
000111BA 0241 FF80                  		andi.w	#$FF80,d1
000111BE 9041                       		sub.w	d1,d0
000111C0 0C40 0280                  		cmpi.w	#$280,d0
000111C4 6200 CB54                  		bhi.w	DeleteObject
000111C8 6000 CB14                  		bra.w	DisplaySprite
000111CC                            ; ===========================================================================
000111CC 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
000111CE 0000                       		dc.w Obj59_Platform-Obj59_Index
000111D0 0000                       		dc.w Obj59_Action-Obj59_Index
000111D2 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
000111D4                            
000111D4 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
000111D6                            
000111D6 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
000111D8 2001                       		dc.b $20, 1
000111DA 3401                       		dc.b $34, 1
000111DC 1003                       		dc.b $10, 3
000111DE 2003                       		dc.b $20, 3
000111E0 3403                       		dc.b $34, 3
000111E2 1401                       		dc.b $14, 1
000111E4 2401                       		dc.b $24, 1
000111E6 2C01                       		dc.b $2C, 1
000111E8 1403                       		dc.b $14, 3
000111EA 2403                       		dc.b $24, 3
000111EC 2C03                       		dc.b $2C, 3
000111EE 2005                       		dc.b $20, 5
000111F0 2007                       		dc.b $20, 7
000111F2 3009                       		dc.b $30, 9
000111F4                            ; ===========================================================================
000111F4                            
000111F4                            Obj59_Main:				; XREF: Obj59_Index
000111F4 5428 0024                  		addq.b	#2,$24(a0)
000111F8 7000                       		moveq	#0,d0
000111FA 1028 0028                  		move.b	$28(a0),d0
000111FE 6A00                       		bpl.s	Obj59_Main2
00011200 5828 0024                  		addq.b	#4,$24(a0)
00011204 0240 007F                  		andi.w	#$7F,d0
00011208 C0FC 0006                  		mulu.w	#6,d0
0001120C 3140 003C                  		move.w	d0,$3C(a0)
00011210 3140 003E                  		move.w	d0,$3E(a0)
00011214 588F                       		addq.l	#4,sp
00011216 4E75                       		rts	
00011218                            ; ===========================================================================
00011218                            
00011218                            Obj59_Main2:
00011218 E648                       		lsr.w	#3,d0
0001121A 0240 001E                  		andi.w	#$1E,d0
0001121E 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00011222 115A 0019                  		move.b	(a2)+,$19(a0)
00011226 115A 001A                  		move.b	(a2)+,$1A(a0)
0001122A 7000                       		moveq	#0,d0
0001122C 1028 0028                  		move.b	$28(a0),d0
00011230 D040                       		add.w	d0,d0
00011232 0240 001E                  		andi.w	#$1E,d0
00011236 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
0001123A 101A                       		move.b	(a2)+,d0
0001123C E548                       		lsl.w	#2,d0
0001123E 3140 003C                  		move.w	d0,$3C(a0)
00011242 115A 0028                  		move.b	(a2)+,$28(a0)
00011246 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
0001124E 317C 4000 0002             		move.w	#$4000,2(a0)
00011254 117C 0004 0001             		move.b	#4,1(a0)
0001125A 117C 0004 0018             		move.b	#4,$18(a0)
00011260 3168 0008 0032             		move.w	8(a0),$32(a0)
00011266 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001126C                            
0001126C                            Obj59_Platform:				; XREF: Obj59_Index
0001126C 7200                       		moveq	#0,d1
0001126E 1228 0019                  		move.b	$19(a0),d1
00011272 4EB9 0000 79FA             		jsr	(PlatformObject).l
00011278 6000 0000                  		bra.w	Obj59_Types
0001127C                            ; ===========================================================================
0001127C                            
0001127C                            Obj59_Action:				; XREF: Obj59_Index
0001127C 7200                       		moveq	#0,d1
0001127E 1228 0019                  		move.b	$19(a0),d1
00011282 4EB9 0000 7B6E             		jsr	(ExitPlatform).l
00011288 3F28 0008                  		move.w	8(a0),-(sp)
0001128C 6100 0000                  		bsr.w	Obj59_Types
00011290 341F                       		move.w	(sp)+,d2
00011292 4A10                       		tst.b	0(a0)
00011294 6700                       		beq.s	locret_10BD4
00011296 4EF9 0000 80D8             		jmp	(MvSonicOnPtfm2).l
0001129C                            ; ===========================================================================
0001129C                            
0001129C                            locret_10BD4:
0001129C 4E75                       		rts	
0001129E                            ; ===========================================================================
0001129E                            
0001129E                            Obj59_Types:
0001129E 7000                       		moveq	#0,d0
000112A0 1028 0028                  		move.b	$28(a0),d0
000112A4 0240 000F                  		andi.w	#$F,d0
000112A8 D040                       		add.w	d0,d0
000112AA 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
000112AE 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
000112B2                            ; ===========================================================================
000112B2 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000112B6 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000112BA 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000112BE 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000112C2 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
000112C6                            ; ===========================================================================
000112C6                            
000112C6                            Obj59_Type00:				; XREF: Obj59_TypeIndex
000112C6 4E75                       		rts	
000112C8                            ; ===========================================================================
000112C8                            
000112C8                            Obj59_Type01:				; XREF: Obj59_TypeIndex
000112C8 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
000112CE 6600                       		bne.s	locret_10C0C
000112D0 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000112D4                            
000112D4                            locret_10C0C:
000112D4 4E75                       		rts	
000112D6                            ; ===========================================================================
000112D6                            
000112D6                            Obj59_Type02:				; XREF: Obj59_TypeIndex
000112D6 6100 0000                  		bsr.w	Obj59_Move
000112DA 3028 0034                  		move.w	$34(a0),d0
000112DE 4440                       		neg.w	d0
000112E0 D068 0030                  		add.w	$30(a0),d0
000112E4 3140 000C                  		move.w	d0,$C(a0)
000112E8 4E75                       		rts	
000112EA                            ; ===========================================================================
000112EA                            
000112EA                            Obj59_Type04:				; XREF: Obj59_TypeIndex
000112EA 6100 0000                  		bsr.w	Obj59_Move
000112EE 3028 0034                  		move.w	$34(a0),d0
000112F2 D068 0030                  		add.w	$30(a0),d0
000112F6 3140 000C                  		move.w	d0,$C(a0)
000112FA 4E75                       		rts	
000112FC                            ; ===========================================================================
000112FC                            
000112FC                            Obj59_Type06:				; XREF: Obj59_TypeIndex
000112FC 6100 0000                  		bsr.w	Obj59_Move
00011300 3028 0034                  		move.w	$34(a0),d0
00011304 E240                       		asr.w	#1,d0
00011306 4440                       		neg.w	d0
00011308 D068 0030                  		add.w	$30(a0),d0
0001130C 3140 000C                  		move.w	d0,$C(a0)
00011310 3028 0034                  		move.w	$34(a0),d0
00011314 D068 0032                  		add.w	$32(a0),d0
00011318 3140 0008                  		move.w	d0,8(a0)
0001131C 4E75                       		rts	
0001131E                            ; ===========================================================================
0001131E                            
0001131E                            Obj59_Type08:				; XREF: Obj59_TypeIndex
0001131E 6100 0000                  		bsr.w	Obj59_Move
00011322 3028 0034                  		move.w	$34(a0),d0
00011326 E240                       		asr.w	#1,d0
00011328 D068 0030                  		add.w	$30(a0),d0
0001132C 3140 000C                  		move.w	d0,$C(a0)
00011330 3028 0034                  		move.w	$34(a0),d0
00011334 4440                       		neg.w	d0
00011336 D068 0032                  		add.w	$32(a0),d0
0001133A 3140 0008                  		move.w	d0,8(a0)
0001133E 4E75                       		rts	
00011340                            ; ===========================================================================
00011340                            
00011340                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00011340 6100 0000                  		bsr.w	Obj59_Move
00011344 3028 0034                  		move.w	$34(a0),d0
00011348 4440                       		neg.w	d0
0001134A D068 0030                  		add.w	$30(a0),d0
0001134E 3140 000C                  		move.w	d0,$C(a0)
00011352 4A28 0028                  		tst.b	$28(a0)
00011356 6700 0000                  		beq.w	loc_10C94
0001135A 4E75                       		rts	
0001135C                            ; ===========================================================================
0001135C                            
0001135C                            loc_10C94:
0001135C 0828 0003 0022             		btst	#3,$22(a0)
00011362 6700                       		beq.s	Obj59_Delete
00011364 08E9 0001 0022             		bset	#1,$22(a1)
0001136A 08A9 0003 0022             		bclr	#3,$22(a1)
00011370 137C 0002 0024             		move.b	#2,$24(a1)
00011376                            
00011376                            Obj59_Delete:
00011376 6000 C9A2                  		bra.w	DeleteObject
0001137A                            
0001137A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001137A                            
0001137A                            
0001137A                            Obj59_Move:				; XREF: Obj59_Type02; et al
0001137A 3028 0038                  		move.w	$38(a0),d0
0001137E 4A28 003A                  		tst.b	$3A(a0)
00011382 6600                       		bne.s	loc_10CC8
00011384 0C40 0800                  		cmpi.w	#$800,d0
00011388 6400                       		bcc.s	loc_10CD0
0001138A 0640 0010                  		addi.w	#$10,d0
0001138E 6000                       		bra.s	loc_10CD0
00011390                            ; ===========================================================================
00011390                            
00011390                            loc_10CC8:
00011390 4A40                       		tst.w	d0
00011392 6700                       		beq.s	loc_10CD0
00011394 0440 0010                  		subi.w	#$10,d0
00011398                            
00011398                            loc_10CD0:
00011398 3140 0038                  		move.w	d0,$38(a0)
0001139C 48C0                       		ext.l	d0
0001139E E180                       		asl.l	#8,d0
000113A0 D0A8 0034                  		add.l	$34(a0),d0
000113A4 2140 0034                  		move.l	d0,$34(a0)
000113A8 4840                       		swap	d0
000113AA 3428 003C                  		move.w	$3C(a0),d2
000113AE B042                       		cmp.w	d2,d0
000113B0 6300                       		bls.s	loc_10CF0
000113B2 117C 0001 003A             		move.b	#1,$3A(a0)
000113B8                            
000113B8                            loc_10CF0:
000113B8 D442                       		add.w	d2,d2
000113BA B042                       		cmp.w	d2,d0
000113BC 6600                       		bne.s	locret_10CFA
000113BE 4228 0028                  		clr.b	$28(a0)
000113C2                            
000113C2                            locret_10CFA:
000113C2 4E75                       		rts	
000113C4                            ; End of function Obj59_Move
000113C4                            
000113C4                            ; ===========================================================================
000113C4                            
000113C4                            Obj59_MakeMulti:			; XREF: Obj59_Index
000113C4 5368 003C                  		subq.w	#1,$3C(a0)
000113C8 6600                       		bne.s	Obj59_ChkDel
000113CA 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
000113D0 6100 CD92                  		bsr.w	SingleObjLoad
000113D4 6600                       		bne.s	Obj59_ChkDel
000113D6 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
000113DA 3368 0008 0008             		move.w	8(a0),8(a1)
000113E0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000113E6 137C 000E 0028             		move.b	#$E,$28(a1)
000113EC                            
000113EC                            Obj59_ChkDel:
000113EC 588F                       		addq.l	#4,sp
000113EE 3028 0008                  		move.w	8(a0),d0
000113F2 0240 FF80                  		andi.w	#$FF80,d0
000113F6 3238 F700                  		move.w	($FFFFF700).w,d1
000113FA 0441 0080                  		subi.w	#$80,d1
000113FE 0241 FF80                  		andi.w	#$FF80,d1
00011402 9041                       		sub.w	d1,d0
00011404 0C40 0280                  		cmpi.w	#$280,d0
00011408 6200 C910                  		bhi.w	DeleteObject
0001140C 4E75                       		rts	
0001140E                            ; ===========================================================================
0001140E                            ; ---------------------------------------------------------------------------
0001140E                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001140E                            ; ---------------------------------------------------------------------------
0001140E                            Map_obj59:
0001140E                            	include "_maps\obj59.asm"
0001140E                            ; ---------------------------------------------------------------------------
0001140E                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001140E                            ; ---------------------------------------------------------------------------
0001140E 0000                       		dc.w byte_10D4A-Map_obj59
00011410 03                         byte_10D4A:	dc.b 3
00011411 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011416 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001141B F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00011420                            		even
00011420                            		even
00011420                            
00011420                            ; ===========================================================================
00011420                            ; ---------------------------------------------------------------------------
00011420                            ; Object 5A - platforms	moving in circles (SLZ)
00011420                            ; ---------------------------------------------------------------------------
00011420                            
00011420                            Obj5A:					; XREF: Obj_Index
00011420 7000                       		moveq	#0,d0
00011422 1028 0024                  		move.b	$24(a0),d0
00011426 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
0001142A 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
0001142E 3028 0032                  		move.w	$32(a0),d0
00011432 0240 FF80                  		andi.w	#$FF80,d0
00011436 3238 F700                  		move.w	($FFFFF700).w,d1
0001143A 0441 0080                  		subi.w	#$80,d1
0001143E 0241 FF80                  		andi.w	#$FF80,d1
00011442 9041                       		sub.w	d1,d0
00011444 0C40 0280                  		cmpi.w	#$280,d0
00011448 6200 C8D0                  		bhi.w	DeleteObject
0001144C 6000 C890                  		bra.w	DisplaySprite
00011450                            ; ===========================================================================
00011450 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00011452 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00011454 0000                       		dc.w Obj5A_Action-Obj5A_Index
00011456                            ; ===========================================================================
00011456                            
00011456                            Obj5A_Main:				; XREF: Obj5A_Index
00011456 5428 0024                  		addq.b	#2,$24(a0)
0001145A 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00011462 317C 4000 0002             		move.w	#$4000,2(a0)
00011468 117C 0004 0001             		move.b	#4,1(a0)
0001146E 117C 0004 0018             		move.b	#4,$18(a0)
00011474 117C 0018 0019             		move.b	#$18,$19(a0)
0001147A 3168 0008 0032             		move.w	8(a0),$32(a0)
00011480 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011486                            
00011486                            Obj5A_Platform:				; XREF: Obj5A_Index
00011486 7200                       		moveq	#0,d1
00011488 1228 0019                  		move.b	$19(a0),d1
0001148C 4EB9 0000 79FA             		jsr	(PlatformObject).l
00011492 6000 0000                  		bra.w	Obj5A_Types
00011496                            ; ===========================================================================
00011496                            
00011496                            Obj5A_Action:				; XREF: Obj5A_Index
00011496 7200                       		moveq	#0,d1
00011498 1228 0019                  		move.b	$19(a0),d1
0001149C 4EB9 0000 7B6E             		jsr	(ExitPlatform).l
000114A2 3F28 0008                  		move.w	8(a0),-(sp)
000114A6 6100 0000                  		bsr.w	Obj5A_Types
000114AA 341F                       		move.w	(sp)+,d2
000114AC 4EF9 0000 80D8             		jmp	(MvSonicOnPtfm2).l
000114B2                            ; ===========================================================================
000114B2                            
000114B2                            Obj5A_Types:
000114B2 7000                       		moveq	#0,d0
000114B4 1028 0028                  		move.b	$28(a0),d0
000114B8 0240 000C                  		andi.w	#$C,d0
000114BC E248                       		lsr.w	#1,d0
000114BE 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
000114C2 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
000114C6                            ; ===========================================================================
000114C6 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
000114C8 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
000114CA                            ; ===========================================================================
000114CA                            
000114CA                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
000114CA 1238 FE80                  		move.b	($FFFFFE80).w,d1
000114CE 0401 0050                  		subi.b	#$50,d1
000114D2 4881                       		ext.w	d1
000114D4 1438 FE84                  		move.b	($FFFFFE84).w,d2
000114D8 0402 0050                  		subi.b	#$50,d2
000114DC 4882                       		ext.w	d2
000114DE 0828 0000 0028             		btst	#0,$28(a0)
000114E4 6700                       		beq.s	loc_10E24
000114E6 4441                       		neg.w	d1
000114E8 4442                       		neg.w	d2
000114EA                            
000114EA                            loc_10E24:
000114EA 0828 0001 0028             		btst	#1,$28(a0)
000114F0 6700                       		beq.s	loc_10E30
000114F2 4441                       		neg.w	d1
000114F4 C342                       		exg	d1,d2
000114F6                            
000114F6                            loc_10E30:
000114F6 D268 0032                  		add.w	$32(a0),d1
000114FA 3141 0008                  		move.w	d1,8(a0)
000114FE D468 0030                  		add.w	$30(a0),d2
00011502 3142 000C                  		move.w	d2,$C(a0)
00011506 4E75                       		rts	
00011508                            ; ===========================================================================
00011508                            
00011508                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00011508 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001150C 0401 0050                  		subi.b	#$50,d1
00011510 4881                       		ext.w	d1
00011512 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011516 0402 0050                  		subi.b	#$50,d2
0001151A 4882                       		ext.w	d2
0001151C 0828 0000 0028             		btst	#0,$28(a0)
00011522 6700                       		beq.s	loc_10E62
00011524 4441                       		neg.w	d1
00011526 4442                       		neg.w	d2
00011528                            
00011528                            loc_10E62:
00011528 0828 0001 0028             		btst	#1,$28(a0)
0001152E 6700                       		beq.s	loc_10E6E
00011530 4441                       		neg.w	d1
00011532 C342                       		exg	d1,d2
00011534                            
00011534                            loc_10E6E:
00011534 4441                       		neg.w	d1
00011536 D268 0032                  		add.w	$32(a0),d1
0001153A 3141 0008                  		move.w	d1,8(a0)
0001153E D468 0030                  		add.w	$30(a0),d2
00011542 3142 000C                  		move.w	d2,$C(a0)
00011546 4E75                       		rts	
00011548                            ; ===========================================================================
00011548                            ; ---------------------------------------------------------------------------
00011548                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011548                            ; ---------------------------------------------------------------------------
00011548                            Map_obj5A:
00011548                            	include "_maps\obj5A.asm"
00011548                            ; ---------------------------------------------------------------------------
00011548                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011548                            ; ---------------------------------------------------------------------------
00011548 0000                       		dc.w byte_10E84-Map_obj5A
0001154A 02                         byte_10E84:	dc.b 2
0001154B F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00011550 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011556 00                         		even
00011556 00                         		even
00011556                            
00011556                            ; ===========================================================================
00011556                            ; ---------------------------------------------------------------------------
00011556                            ; Object 5B - blocks that form a staircase (SLZ)
00011556                            ; ---------------------------------------------------------------------------
00011556                            
00011556                            Obj5B:					; XREF: Obj_Index
00011556 7000                       		moveq	#0,d0
00011558 1028 0024                  		move.b	$24(a0),d0
0001155C 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00011560 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00011564 3028 0030                  		move.w	$30(a0),d0
00011568 0240 FF80                  		andi.w	#$FF80,d0
0001156C 3238 F700                  		move.w	($FFFFF700).w,d1
00011570 0441 0080                  		subi.w	#$80,d1
00011574 0241 FF80                  		andi.w	#$FF80,d1
00011578 9041                       		sub.w	d1,d0
0001157A 0C40 0280                  		cmpi.w	#$280,d0
0001157E 6200 C79A                  		bhi.w	DeleteObject
00011582 6000 C75A                  		bra.w	DisplaySprite
00011586                            ; ===========================================================================
00011586 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00011588 0000                       		dc.w Obj5B_Move-Obj5B_Index
0001158A 0000                       		dc.w Obj5B_Solid-Obj5B_Index
0001158C                            ; ===========================================================================
0001158C                            
0001158C                            Obj5B_Main:				; XREF: Obj5B_Index
0001158C 5428 0024                  		addq.b	#2,$24(a0)
00011590 7638                       		moveq	#$38,d3
00011592 7801                       		moveq	#1,d4
00011594 0828 0000 0022             		btst	#0,$22(a0)
0001159A 6700                       		beq.s	loc_10EDA
0001159C 763B                       		moveq	#$3B,d3
0001159E 78FF                       		moveq	#-1,d4
000115A0                            
000115A0                            loc_10EDA:
000115A0 3428 0008                  		move.w	8(a0),d2
000115A4 2248                       		movea.l	a0,a1
000115A6 7203                       		moveq	#3,d1
000115A8 6000                       		bra.s	Obj5B_MakeBlocks
000115AA                            ; ===========================================================================
000115AA                            
000115AA                            Obj5B_Loop:
000115AA 6100 CBCE                  		bsr.w	SingleObjLoad2
000115AE 6600 0000                  		bne.w	Obj5B_Move
000115B2 137C 0004 0024             		move.b	#4,$24(a1)
000115B8                            
000115B8                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
000115B8 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
000115BC 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
000115C4 337C 4000 0002             		move.w	#$4000,2(a1)
000115CA 137C 0004 0001             		move.b	#4,1(a1)
000115D0 137C 0003 0018             		move.b	#3,$18(a1)
000115D6 137C 0010 0019             		move.b	#$10,$19(a1)
000115DC 1368 0028 0028             		move.b	$28(a0),$28(a1)
000115E2 3342 0008                  		move.w	d2,8(a1)
000115E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000115EC 3368 0008 0030             		move.w	8(a0),$30(a1)
000115F2 3369 000C 0032             		move.w	$C(a1),$32(a1)
000115F8 0642 0020                  		addi.w	#$20,d2
000115FC 1343 0037                  		move.b	d3,$37(a1)
00011600 2348 003C                  		move.l	a0,$3C(a1)
00011604 D604                       		add.b	d4,d3
00011606 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
0001160A                            
0001160A                            Obj5B_Move:				; XREF: Obj5B_Index
0001160A 7000                       		moveq	#0,d0
0001160C 1028 0028                  		move.b	$28(a0),d0
00011610 0240 0007                  		andi.w	#7,d0
00011614 D040                       		add.w	d0,d0
00011616 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
0001161A 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
0001161E                            
0001161E                            Obj5B_Solid:				; XREF: Obj5B_Index
0001161E 2468 003C                  		movea.l	$3C(a0),a2
00011622 7000                       		moveq	#0,d0
00011624 1028 0037                  		move.b	$37(a0),d0
00011628 1032 0000                  		move.b	(a2,d0.w),d0
0001162C D068 0032                  		add.w	$32(a0),d0
00011630 3140 000C                  		move.w	d0,$C(a0)
00011634 7200                       		moveq	#0,d1
00011636 1228 0019                  		move.b	$19(a0),d1
0001163A 0641 000B                  		addi.w	#$B,d1
0001163E 343C 0010                  		move.w	#$10,d2
00011642 363C 0011                  		move.w	#$11,d3
00011646 3828 0008                  		move.w	8(a0),d4
0001164A 6100 EA62                  		bsr.w	SolidObject
0001164E 4A04                       		tst.b	d4
00011650 6A00                       		bpl.s	loc_10F92
00011652 1544 0036                  		move.b	d4,$36(a2)
00011656                            
00011656                            loc_10F92:
00011656 0828 0003 0022             		btst	#3,$22(a0)
0001165C 6700                       		beq.s	locret_10FA0
0001165E 157C 0001 0036             		move.b	#1,$36(a2)
00011664                            
00011664                            locret_10FA0:
00011664 4E75                       		rts	
00011666                            ; ===========================================================================
00011666 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011668 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001166A 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
0001166C 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001166E                            ; ===========================================================================
0001166E                            
0001166E                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
0001166E 4A68 0034                  		tst.w	$34(a0)
00011672 6600                       		bne.s	loc_10FC0
00011674 0C28 0001 0036             		cmpi.b	#1,$36(a0)
0001167A 6600                       		bne.s	locret_10FBE
0001167C 317C 001E 0034             		move.w	#$1E,$34(a0)
00011682                            
00011682                            locret_10FBE:
00011682 4E75                       		rts	
00011684                            ; ===========================================================================
00011684                            
00011684                            loc_10FC0:
00011684 5368 0034                  		subq.w	#1,$34(a0)
00011688 66F8                       		bne.s	locret_10FBE
0001168A 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001168E 4E75                       		rts	
00011690                            ; ===========================================================================
00011690                            
00011690                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011690 4A68 0034                  		tst.w	$34(a0)
00011694 6600                       		bne.s	loc_10FE0
00011696 4A28 0036                  		tst.b	$36(a0)
0001169A 6A00                       		bpl.s	locret_10FDE
0001169C 317C 003C 0034             		move.w	#$3C,$34(a0)
000116A2                            
000116A2                            locret_10FDE:
000116A2 4E75                       		rts	
000116A4                            ; ===========================================================================
000116A4                            
000116A4                            loc_10FE0:
000116A4 5368 0034                  		subq.w	#1,$34(a0)
000116A8 6600                       		bne.s	loc_10FEC
000116AA 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000116AE 4E75                       		rts	
000116B0                            ; ===========================================================================
000116B0                            
000116B0                            loc_10FEC:
000116B0 43E8 0038                  		lea	$38(a0),a1
000116B4 3028 0034                  		move.w	$34(a0),d0
000116B8 E408                       		lsr.b	#2,d0
000116BA 0200 0001                  		andi.b	#1,d0
000116BE 12C0                       		move.b	d0,(a1)+
000116C0 0A00 0001                  		eori.b	#1,d0
000116C4 12C0                       		move.b	d0,(a1)+
000116C6 0A00 0001                  		eori.b	#1,d0
000116CA 12C0                       		move.b	d0,(a1)+
000116CC 0A00 0001                  		eori.b	#1,d0
000116D0 12C0                       		move.b	d0,(a1)+
000116D2 4E75                       		rts	
000116D4                            ; ===========================================================================
000116D4                            
000116D4                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
000116D4 43E8 0038                  		lea	$38(a0),a1
000116D8 0C11 0080                  		cmpi.b	#$80,(a1)
000116DC 6700                       		beq.s	locret_11038
000116DE 5211                       		addq.b	#1,(a1)
000116E0 7200                       		moveq	#0,d1
000116E2 1219                       		move.b	(a1)+,d1
000116E4 4841                       		swap	d1
000116E6 E289                       		lsr.l	#1,d1
000116E8 2401                       		move.l	d1,d2
000116EA E289                       		lsr.l	#1,d1
000116EC 2601                       		move.l	d1,d3
000116EE D682                       		add.l	d2,d3
000116F0 4841                       		swap	d1
000116F2 4842                       		swap	d2
000116F4 4843                       		swap	d3
000116F6 12C3                       		move.b	d3,(a1)+
000116F8 12C2                       		move.b	d2,(a1)+
000116FA 12C1                       		move.b	d1,(a1)+
000116FC                            
000116FC                            locret_11038:
000116FC 4E75                       		rts	
000116FE 4E75                       		rts	
00011700                            ; ===========================================================================
00011700                            ; ---------------------------------------------------------------------------
00011700                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011700                            ; ---------------------------------------------------------------------------
00011700                            Map_obj5B:
00011700                            	include "_maps\obj5B.asm"
00011700                            ; ---------------------------------------------------------------------------
00011700                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011700                            ; ---------------------------------------------------------------------------
00011700 0000                       		dc.w byte_1103E-Map_obj5B
00011702 01                         byte_1103E:	dc.b 1
00011703 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011708                            		even
00011708                            		even
00011708                            
00011708                            ; ===========================================================================
00011708                            ; ---------------------------------------------------------------------------
00011708                            ; Object 5C - metal girders in foreground (SLZ)
00011708                            ; ---------------------------------------------------------------------------
00011708                            
00011708                            Obj5C:					; XREF: Obj_Index
00011708 7000                       		moveq	#0,d0
0001170A 1028 0024                  		move.b	$24(a0),d0
0001170E 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011712 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011716                            ; ===========================================================================
00011716 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00011718 0000                       		dc.w Obj5C_Display-Obj5C_Index
0001171A                            ; ===========================================================================
0001171A                            
0001171A                            Obj5C_Main:				; XREF: Obj5C_Index
0001171A 5428 0024                  		addq.b	#2,$24(a0)
0001171E 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011726 317C 83CC 0002             		move.w	#$83CC,2(a0)
0001172C 117C 0010 0019             		move.b	#$10,$19(a0)
00011732                            
00011732                            Obj5C_Display:				; XREF: Obj5C_Index
00011732 2238 F700                  		move.l	($FFFFF700).w,d1
00011736 D281                       		add.l	d1,d1
00011738 4841                       		swap	d1
0001173A 4441                       		neg.w	d1
0001173C 3141 0008                  		move.w	d1,8(a0)
00011740 2238 F704                  		move.l	($FFFFF704).w,d1
00011744 D281                       		add.l	d1,d1
00011746 4841                       		swap	d1
00011748 0241 003F                  		andi.w	#$3F,d1
0001174C 4441                       		neg.w	d1
0001174E 0641 0100                  		addi.w	#$100,d1
00011752 3141 000A                  		move.w	d1,$A(a0)
00011756 6000 C586                  		bra.w	DisplaySprite
0001175A                            ; ===========================================================================
0001175A                            ; ---------------------------------------------------------------------------
0001175A                            ; Sprite mappings - metal girders in foreground	(SLZ)
0001175A                            ; ---------------------------------------------------------------------------
0001175A                            Map_obj5C:
0001175A                            	include "_maps\obj5C.asm"
0001175A                            ; ---------------------------------------------------------------------------
0001175A                            ; Sprite mappings - metal girders in foreground	(SLZ)
0001175A                            ; ---------------------------------------------------------------------------
0001175A 0000                       		dc.w byte_11098-Map_obj5C
0001175C 09                         byte_11098:	dc.b 9
0001175D 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011762 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011767 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
0001176C E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011771 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011776 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
0001177B 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011780 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011785 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
0001178A                            		even
0001178A                            		even
0001178A                            
0001178A                            ; ===========================================================================
0001178A                            ; ---------------------------------------------------------------------------
0001178A                            ; Object 1B - water surface (LZ)
0001178A                            ; ---------------------------------------------------------------------------
0001178A                            
0001178A                            Obj1B:					; XREF: Obj_Index
0001178A 7000                       		moveq	#0,d0
0001178C 1028 0024                  		move.b	$24(a0),d0
00011790 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011794 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011798                            ; ===========================================================================
00011798 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
0001179A 0000                       		dc.w Obj1B_Action-Obj1B_Index
0001179C                            ; ===========================================================================
0001179C                            
0001179C                            Obj1B_Main:				; XREF: Obj1B_Index
0001179C 5428 0024                  		addq.b	#2,$24(a0)
000117A0 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
000117A8 317C C300 0002             		move.w	#$C300,2(a0)
000117AE 117C 0004 0001             		move.b	#4,1(a0)
000117B4 117C 0080 0019             		move.b	#$80,$19(a0)
000117BA 3168 0008 0030             		move.w	8(a0),$30(a0)
000117C0                            
000117C0                            Obj1B_Action:				; XREF: Obj1B_Index
000117C0 3238 F700                  		move.w	($FFFFF700).w,d1
000117C4 0241 FFE0                  		andi.w	#$FFE0,d1
000117C8 D268 0030                  		add.w	$30(a0),d1
000117CC 0838 0000 FE05             		btst	#0,($FFFFFE05).w
000117D2 6700                       		beq.s	loc_11114
000117D4 0641 0020                  		addi.w	#$20,d1
000117D8                            
000117D8                            loc_11114:
000117D8 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
000117DC 3238 F646                  		move.w	($FFFFF646).w,d1
000117E0 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
000117E4 4A28 0032                  		tst.b	$32(a0)
000117E8 6600                       		bne.s	Obj1B_Animate
000117EA 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000117F0 6700                       		beq.s	loc_1114A	; if not, branch
000117F2 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
000117F6 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
000117FC 6000                       		bra.s	Obj1B_Display
000117FE                            ; ===========================================================================
000117FE                            
000117FE                            Obj1B_Animate:				; XREF: loc_11114
000117FE 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011802 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011804 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
0001180A 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
0001180E                            
0001180E                            loc_1114A:				; XREF: loc_11114
0001180E 5328 001E                  		subq.b	#1,$1E(a0)
00011812 6A00                       		bpl.s	Obj1B_Display
00011814 117C 0007 001E             		move.b	#7,$1E(a0)
0001181A 5228 001A                  		addq.b	#1,$1A(a0)
0001181E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011824 6500                       		bcs.s	Obj1B_Display
00011826 117C 0000 001A             		move.b	#0,$1A(a0)
0001182C                            
0001182C                            Obj1B_Display:
0001182C 6000 C4B0                  		bra.w	DisplaySprite
00011830                            ; ===========================================================================
00011830                            ; ---------------------------------------------------------------------------
00011830                            ; Sprite mappings - water surface (LZ)
00011830                            ; ---------------------------------------------------------------------------
00011830                            Map_obj1B:
00011830                            	include "_maps\obj1B.asm"
00011830                            ; ---------------------------------------------------------------------------
00011830                            ; Sprite mappings - water surface (LZ)
00011830                            ; ---------------------------------------------------------------------------
00011830 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011834 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011838 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
0001183C 03                         byte_11178:	dc.b 3
0001183D FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011842 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011847 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0001184C 03                         byte_11188:	dc.b 3
0001184D FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011852 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011857 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001185C 03                         byte_11198:	dc.b 3
0001185D FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011862 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011867 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001186C 06                         byte_111A8:	dc.b 6
0001186D FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011872 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011877 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
0001187C FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011881 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011886 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
0001188B 06                         byte_111C7:	dc.b 6
0001188C FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011891 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011896 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
0001189B FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
000118A0 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000118A5 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
000118AA 06                         byte_111E6:	dc.b 6
000118AB FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000118B0 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
000118B5 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000118BA FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
000118BF FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000118C4 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
000118CA 00                         		even
000118CA 00                         		even
000118CA                            
000118CA                            ; ===========================================================================
000118CA                            ; ---------------------------------------------------------------------------
000118CA                            ; Object 0B - pole that	breaks (LZ)
000118CA                            ; ---------------------------------------------------------------------------
000118CA                            
000118CA                            Obj0B:					; XREF: Obj_Index
000118CA 7000                       		moveq	#0,d0
000118CC 1028 0024                  		move.b	$24(a0),d0
000118D0 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
000118D4 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
000118D8                            ; ===========================================================================
000118D8 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
000118DA 0000                       		dc.w Obj0B_Action-Obj0B_Index
000118DC 0000                       		dc.w Obj0B_Display-Obj0B_Index
000118DE                            ; ===========================================================================
000118DE                            
000118DE                            Obj0B_Main:				; XREF: Obj0B_Index
000118DE 5428 0024                  		addq.b	#2,$24(a0)
000118E2 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
000118EA 317C 43DE 0002             		move.w	#$43DE,2(a0)
000118F0 117C 0004 0001             		move.b	#4,1(a0)
000118F6 117C 0008 0019             		move.b	#8,$19(a0)
000118FC 117C 0004 0018             		move.b	#4,$18(a0)
00011902 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011908 7000                       		moveq	#0,d0
0001190A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001190E C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011912 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011916                            
00011916                            Obj0B_Action:				; XREF: Obj0B_Index
00011916 4A28 0032                  		tst.b	$32(a0)
0001191A 6700                       		beq.s	Obj0B_Grab
0001191C 4A68 0030                  		tst.w	$30(a0)
00011920 6700                       		beq.s	Obj0B_MoveUp
00011922 5368 0030                  		subq.w	#1,$30(a0)
00011926 6600                       		bne.s	Obj0B_MoveUp
00011928 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
0001192E 6000                       		bra.s	Obj0B_Release
00011930                            ; ===========================================================================
00011930                            
00011930                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011930 43F8 D000                  		lea	($FFFFD000).w,a1
00011934 3028 000C                  		move.w	$C(a0),d0
00011938 0440 0018                  		subi.w	#$18,d0
0001193C 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011942 6700                       		beq.s	Obj0B_MoveDown
00011944 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011948 B069 000C                  		cmp.w	$C(a1),d0
0001194C 6500                       		bcs.s	Obj0B_MoveDown
0001194E 3340 000C                  		move.w	d0,$C(a1)
00011952                            
00011952                            Obj0B_MoveDown:
00011952 0640 0024                  		addi.w	#$24,d0
00011956 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
0001195C 6700                       		beq.s	Obj0B_LetGo
0001195E 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011962 B069 000C                  		cmp.w	$C(a1),d0
00011966 6400                       		bcc.s	Obj0B_LetGo
00011968 3340 000C                  		move.w	d0,$C(a1)
0001196C                            
0001196C                            Obj0B_LetGo:
0001196C 1038 F603                  		move.b	($FFFFF603).w,d0
00011970 0240 0070                  		andi.w	#$70,d0
00011974 6700                       		beq.s	Obj0B_Display
00011976                            
00011976                            Obj0B_Release:				; XREF: Obj0B_Action
00011976 4228 0020                  		clr.b	$20(a0)
0001197A 5428 0024                  		addq.b	#2,$24(a0)
0001197E 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011982 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011986 4228 0032                  		clr.b	$32(a0)
0001198A 6000                       		bra.s	Obj0B_Display
0001198C                            ; ===========================================================================
0001198C                            
0001198C                            Obj0B_Grab:				; XREF: Obj0B_Action
0001198C 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011990 6700                       		beq.s	Obj0B_Display	; if not, branch
00011992 43F8 D000                  		lea	($FFFFD000).w,a1
00011996 3028 0008                  		move.w	8(a0),d0
0001199A 0640 0014                  		addi.w	#$14,d0
0001199E B069 0008                  		cmp.w	8(a1),d0
000119A2 6400                       		bcc.s	Obj0B_Display
000119A4 4228 0021                  		clr.b	$21(a0)
000119A8 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000119AE 6400                       		bcc.s	Obj0B_Display
000119B0 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
000119B4 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
000119B8 3028 0008                  		move.w	8(a0),d0
000119BC 0640 0014                  		addi.w	#$14,d0
000119C0 3340 0008                  		move.w	d0,8(a1)
000119C4 08A9 0000 0022             		bclr	#0,$22(a1)
000119CA 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
000119D0 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000119D6 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
000119DC 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
000119E2                            
000119E2                            Obj0B_Display:				; XREF: Obj0B_Index
000119E2 6000 E3A2                  		bra.w	MarkObjGone
000119E6                            ; ===========================================================================
000119E6                            ; ---------------------------------------------------------------------------
000119E6                            ; Sprite mappings - pole that breaks (LZ)
000119E6                            ; ---------------------------------------------------------------------------
000119E6                            Map_obj0B:
000119E6                            	include "_maps\obj0B.asm"
000119E6                            ; ---------------------------------------------------------------------------
000119E6                            ; Sprite mappings - pole that breaks (LZ)
000119E6                            ; ---------------------------------------------------------------------------
000119E6 0000                       		dc.w byte_11326-Map_obj0B
000119E8 0000                       		dc.w byte_11331-Map_obj0B
000119EA 02                         byte_11326:	dc.b 2			; normal pole
000119EB E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
000119F0 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
000119F5 04                         byte_11331:	dc.b 4			; broken pole
000119F6 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
000119FB F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011A00 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011A05 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011A0A                            		even
00011A0A                            		even
00011A0A                            
00011A0A                            ; ===========================================================================
00011A0A                            ; ---------------------------------------------------------------------------
00011A0A                            ; Object 0C - flapping door (LZ)
00011A0A                            ; ---------------------------------------------------------------------------
00011A0A                            
00011A0A                            Obj0C:					; XREF: Obj_Index
00011A0A 7000                       		moveq	#0,d0
00011A0C 1028 0024                  		move.b	$24(a0),d0
00011A10 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011A14 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011A18                            ; ===========================================================================
00011A18 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011A1A 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011A1C                            ; ===========================================================================
00011A1C                            
00011A1C                            Obj0C_Main:				; XREF: Obj0C_Index
00011A1C 5428 0024                  		addq.b	#2,$24(a0)
00011A20 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011A28 317C 4328 0002             		move.w	#$4328,2(a0)
00011A2E 0028 0004 0001             		ori.b	#4,1(a0)
00011A34 117C 0028 0019             		move.b	#$28,$19(a0)
00011A3A 7000                       		moveq	#0,d0
00011A3C 1028 0028                  		move.b	$28(a0),d0	; get object type
00011A40 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011A44 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011A48                            
00011A48                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011A48 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011A4C 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011A4E 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011A54 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011A5A 4A28 0001                  		tst.b	1(a0)
00011A5E 6A00                       		bpl.s	Obj0C_Solid
00011A60 303C 00BB                  		move.w	#$BB,d0
00011A64 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play door sound
00011A6A                            
00011A6A                            Obj0C_Solid:
00011A6A 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011A70 6100 932C                  		bsr.w	AnimateSprite
00011A74 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011A78 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011A7C 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011A7E 3038 D008                  		move.w	($FFFFD008).w,d0
00011A82 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011A86 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011A88 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011A8E 323C 0013                  		move.w	#$13,d1
00011A92 343C 0020                  		move.w	#$20,d2
00011A96 3602                       		move.w	d2,d3
00011A98 5243                       		addq.w	#1,d3
00011A9A 3828 0008                  		move.w	8(a0),d4
00011A9E 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
00011AA2                            
00011AA2                            Obj0C_Display:
00011AA2 6000 E2E2                  		bra.w	MarkObjGone
00011AA6                            ; ===========================================================================
00011AA6                            Ani_obj0C:
00011AA6                            	include "_anim\obj0C.asm"
00011AA6                            ; ---------------------------------------------------------------------------
00011AA6                            ; Animation script - flapping door (LZ)
00011AA6                            ; ---------------------------------------------------------------------------
00011AA6 0000                       		dc.w byte_113E6-Ani_obj0C
00011AA8 0000                       		dc.w byte_113EC-Ani_obj0C
00011AAA 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011AB0 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011AB6                            		even
00011AB6                            		even
00011AB6                            
00011AB6                            ; ---------------------------------------------------------------------------
00011AB6                            ; Sprite mappings - flapping door (LZ)
00011AB6                            ; ---------------------------------------------------------------------------
00011AB6                            Map_obj0C:
00011AB6                            	include "_maps\obj0C.asm"
00011AB6                            ; ---------------------------------------------------------------------------
00011AB6                            ; Sprite mappings - flapping door (LZ)
00011AB6                            ; ---------------------------------------------------------------------------
00011AB6 0000                       		dc.w byte_113F8-Map_obj0C
00011AB8 0000                       		dc.w byte_11403-Map_obj0C
00011ABA 0000                       		dc.w byte_1140E-Map_obj0C
00011ABC 02                         byte_113F8:	dc.b 2
00011ABD E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011AC2 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011AC7 02                         byte_11403:	dc.b 2
00011AC8 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011ACD 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011AD2 02                         byte_1140E:	dc.b 2
00011AD3 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011AD8 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011ADE 00                         		even
00011ADE 00                         		even
00011ADE                            
00011ADE                            ; ===========================================================================
00011ADE                            ; ---------------------------------------------------------------------------
00011ADE                            ; Object 71 - invisible	solid blocks
00011ADE                            ; ---------------------------------------------------------------------------
00011ADE                            
00011ADE                            Obj71:					; XREF: Obj_Index
00011ADE 7000                       		moveq	#0,d0
00011AE0 1028 0024                  		move.b	$24(a0),d0
00011AE4 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011AE8 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011AEC                            ; ===========================================================================
00011AEC 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011AEE 0000                       		dc.w Obj71_Solid-Obj71_Index
00011AF0                            ; ===========================================================================
00011AF0                            
00011AF0                            Obj71_Main:				; XREF: Obj71_Index
00011AF0 5428 0024                  		addq.b	#2,$24(a0)
00011AF4 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011AFC 317C 8680 0002             		move.w	#$8680,2(a0)
00011B02 0028 0004 0001             		ori.b	#4,1(a0)
00011B08 1028 0028                  		move.b	$28(a0),d0	; get object type
00011B0C 1200                       		move.b	d0,d1
00011B0E 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011B12 0640 0010                  		addi.w	#$10,d0
00011B16 E248                       		lsr.w	#1,d0
00011B18 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011B1C 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011B20 5241                       		addq.w	#1,d1
00011B22 E749                       		lsl.w	#3,d1
00011B24 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011B28                            
00011B28                            Obj71_Solid:				; XREF: Obj71_Index
00011B28 6100 C42E                  		bsr.w	ChkObjOnScreen
00011B2C 6600                       		bne.s	Obj71_ChkDel
00011B2E 7200                       		moveq	#0,d1
00011B30 1228 0019                  		move.b	$19(a0),d1
00011B34 0641 000B                  		addi.w	#$B,d1
00011B38 7400                       		moveq	#0,d2
00011B3A 1428 0016                  		move.b	$16(a0),d2
00011B3E 3602                       		move.w	d2,d3
00011B40 5243                       		addq.w	#1,d3
00011B42 3828 0008                  		move.w	8(a0),d4
00011B46 6100 E5A8                  		bsr.w	SolidObject71
00011B4A                            
00011B4A                            Obj71_ChkDel:
00011B4A 3028 0008                  		move.w	8(a0),d0
00011B4E 0240 FF80                  		andi.w	#$FF80,d0
00011B52 3238 F700                  		move.w	($FFFFF700).w,d1
00011B56 0441 0080                  		subi.w	#$80,d1
00011B5A 0241 FF80                  		andi.w	#$FF80,d1
00011B5E 9041                       		sub.w	d1,d0
00011B60 0C40 0280                  		cmpi.w	#$280,d0
00011B64 6200                       		bhi.s	Obj71_Delete
00011B66 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011B6A 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011B6C 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
00011B70                            ; ===========================================================================
00011B70                            
00011B70                            Obj71_NoDisplay:
00011B70 4E75                       		rts	
00011B72                            ; ===========================================================================
00011B72                            
00011B72                            Obj71_Delete:
00011B72 4EFA C1A6                  		jmp	DeleteObject
00011B76                            ; ===========================================================================
00011B76                            ; ---------------------------------------------------------------------------
00011B76                            ; Sprite mappings - invisible solid blocks
00011B76                            ; ---------------------------------------------------------------------------
00011B76                            Map_obj71:
00011B76                            	include "_maps\obj71.asm"
00011B76                            ; ---------------------------------------------------------------------------
00011B76                            ; Sprite mappings - invisible solid blocks
00011B76                            ; ---------------------------------------------------------------------------
00011B76 0000                       		dc.w byte_114BC-Map_obj71
00011B78 0000                       		dc.w byte_114D1-Map_obj71
00011B7A 0000                       		dc.w byte_114E6-Map_obj71
00011B7C 04                         byte_114BC:	dc.b 4
00011B7D F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011B82 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011B87 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011B8C 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011B91 04                         byte_114D1:	dc.b 4
00011B92 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011B97 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011B9C 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011BA1 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011BA6 04                         byte_114E6:	dc.b 4
00011BA7 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011BAC E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011BB1 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011BB6 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011BBC 00                         		even
00011BBC 00                         		even
00011BBC                            
00011BBC                            ; ===========================================================================
00011BBC                            ; ---------------------------------------------------------------------------
00011BBC                            ; Object 5D - fans (SLZ)
00011BBC                            ; ---------------------------------------------------------------------------
00011BBC                            
00011BBC                            Obj5D:					; XREF: Obj_Index
00011BBC 7000                       		moveq	#0,d0
00011BBE 1028 0024                  		move.b	$24(a0),d0
00011BC2 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011BC6 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011BCA                            ; ===========================================================================
00011BCA 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011BCC 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011BCE                            ; ===========================================================================
00011BCE                            
00011BCE                            Obj5D_Main:				; XREF: Obj5D_Index
00011BCE 5428 0024                  		addq.b	#2,$24(a0)
00011BD2 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011BDA 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011BE0 0028 0004 0001             		ori.b	#4,1(a0)
00011BE6 117C 0010 0019             		move.b	#$10,$19(a0)
00011BEC 117C 0004 0018             		move.b	#4,$18(a0)
00011BF2                            
00011BF2                            Obj5D_Delay:				; XREF: Obj5D_Index
00011BF2 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011BF8 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011BFA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011BFE 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011C00 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011C06 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011C0C 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011C0E 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011C14                            
00011C14                            Obj5D_Blow:
00011C14 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011C18 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011C1C 43F8 D000                  		lea	($FFFFD000).w,a1
00011C20 3029 0008                  		move.w	8(a1),d0
00011C24 9068 0008                  		sub.w	8(a0),d0
00011C28 0828 0000 0022             		btst	#0,$22(a0)
00011C2E 6600                       		bne.s	Obj5D_ChkSonic
00011C30 4440                       		neg.w	d0
00011C32                            
00011C32                            Obj5D_ChkSonic:
00011C32 0640 0050                  		addi.w	#$50,d0
00011C36 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011C3A 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011C3C 3229 000C                  		move.w	$C(a1),d1
00011C40 0641 0060                  		addi.w	#$60,d1
00011C44 9268 000C                  		sub.w	$C(a0),d1
00011C48 6500                       		bcs.s	Obj5D_Animate
00011C4A 0C41 0070                  		cmpi.w	#$70,d1
00011C4E 6400                       		bcc.s	Obj5D_Animate
00011C50 0440 0050                  		subi.w	#$50,d0
00011C54 6400                       		bcc.s	loc_1159A
00011C56 4640                       		not.w	d0
00011C58 D040                       		add.w	d0,d0
00011C5A                            
00011C5A                            loc_1159A:
00011C5A 0640 0060                  		addi.w	#$60,d0
00011C5E 0828 0000 0022             		btst	#0,$22(a0)
00011C64 6600                       		bne.s	loc_115A8
00011C66 4440                       		neg.w	d0
00011C68                            
00011C68                            loc_115A8:
00011C68 4400                       		neg.b	d0
00011C6A E840                       		asr.w	#4,d0
00011C6C 0828 0000 0028             		btst	#0,$28(a0)
00011C72 6700                       		beq.s	Obj5D_MoveSonic
00011C74 4440                       		neg.w	d0
00011C76                            
00011C76                            Obj5D_MoveSonic:
00011C76 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011C7A                            
00011C7A                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011C7A 5328 001E                  		subq.b	#1,$1E(a0)
00011C7E 6A00                       		bpl.s	Obj5D_ChkDel
00011C80 117C 0000 001E             		move.b	#0,$1E(a0)
00011C86 5228 001B                  		addq.b	#1,$1B(a0)
00011C8A 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011C90 6500                       		bcs.s	loc_115D8
00011C92 117C 0000 001B             		move.b	#0,$1B(a0)
00011C98                            
00011C98                            loc_115D8:
00011C98 7000                       		moveq	#0,d0
00011C9A 0828 0000 0028             		btst	#0,$28(a0)
00011CA0 6700                       		beq.s	loc_115E4
00011CA2 7002                       		moveq	#2,d0
00011CA4                            
00011CA4                            loc_115E4:
00011CA4 D028 001B                  		add.b	$1B(a0),d0
00011CA8 1140 001A                  		move.b	d0,$1A(a0)
00011CAC                            
00011CAC                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011CAC 6100 C030                  		bsr.w	DisplaySprite
00011CB0 3028 0008                  		move.w	8(a0),d0
00011CB4 0240 FF80                  		andi.w	#$FF80,d0
00011CB8 3238 F700                  		move.w	($FFFFF700).w,d1
00011CBC 0441 0080                  		subi.w	#$80,d1
00011CC0 0241 FF80                  		andi.w	#$FF80,d1
00011CC4 9041                       		sub.w	d1,d0
00011CC6 0C40 0280                  		cmpi.w	#$280,d0
00011CCA 6200 C04E                  		bhi.w	DeleteObject
00011CCE 4E75                       		rts	
00011CD0                            ; ===========================================================================
00011CD0                            ; ---------------------------------------------------------------------------
00011CD0                            ; Sprite mappings - fans (SLZ)
00011CD0                            ; ---------------------------------------------------------------------------
00011CD0                            Map_obj5D:
00011CD0                            	include "_maps\obj5D.asm"
00011CD0                            ; ---------------------------------------------------------------------------
00011CD0                            ; Sprite mappings - fans (SLZ)
00011CD0                            ; ---------------------------------------------------------------------------
00011CD0 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011CD4 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011CD8 0000                       		dc.w byte_1161A-Map_obj5D
00011CDA 02                         byte_1161A:	dc.b 2
00011CDB F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011CE0 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011CE5 02                         byte_11625:	dc.b 2
00011CE6 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011CEB 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011CF0 02                         byte_11630:	dc.b 2
00011CF1 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011CF6 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011CFC 00                         		even
00011CFC 00                         		even
00011CFC                            
00011CFC                            ; ===========================================================================
00011CFC                            ; ---------------------------------------------------------------------------
00011CFC                            ; Object 5E - seesaws (SLZ)
00011CFC                            ; ---------------------------------------------------------------------------
00011CFC                            
00011CFC                            Obj5E:					; XREF: Obj_Index
00011CFC 7000                       		moveq	#0,d0
00011CFE 1028 0024                  		move.b	$24(a0),d0
00011D02 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011D06 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011D0A 3028 0030                  		move.w	$30(a0),d0
00011D0E 0240 FF80                  		andi.w	#$FF80,d0
00011D12 3238 F700                  		move.w	($FFFFF700).w,d1
00011D16 0441 0080                  		subi.w	#$80,d1
00011D1A 0241 FF80                  		andi.w	#$FF80,d1
00011D1E 9041                       		sub.w	d1,d0
00011D20 6B00 BFF8                  		bmi.w	DeleteObject
00011D24 0C40 0280                  		cmpi.w	#$280,d0
00011D28 6200 BFF0                  		bhi.w	DeleteObject
00011D2C 6000 BFB0                  		bra.w	DisplaySprite
00011D30                            ; ===========================================================================
00011D30 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011D32 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011D34 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011D36 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011D38 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011D3A 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011D3C                            ; ===========================================================================
00011D3C                            
00011D3C                            Obj5E_Main:				; XREF: Obj5E_Index
00011D3C 5428 0024                  		addq.b	#2,$24(a0)
00011D40 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011D48 317C 0374 0002             		move.w	#$374,2(a0)
00011D4E 0028 0004 0001             		ori.b	#4,1(a0)
00011D54 117C 0004 0018             		move.b	#4,$18(a0)
00011D5A 117C 0030 0019             		move.b	#$30,$19(a0)
00011D60 3168 0008 0030             		move.w	8(a0),$30(a0)
00011D66 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011D6A 6600                       		bne.s	loc_116D2	; if not, branch
00011D6C 6100 C40C                  		bsr.w	SingleObjLoad2
00011D70 6600                       		bne.s	loc_116D2
00011D72 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011D76 5C29 0024                  		addq.b	#6,$24(a1)
00011D7A 3368 0008 0008             		move.w	8(a0),8(a1)
00011D80 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011D86 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011D8C 2348 003C                  		move.l	a0,$3C(a1)
00011D90                            
00011D90                            loc_116D2:
00011D90 0828 0000 0022             		btst	#0,$22(a0)
00011D96 6700                       		beq.s	loc_116E0
00011D98 117C 0002 001A             		move.b	#2,$1A(a0)
00011D9E                            
00011D9E                            loc_116E0:
00011D9E 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011DA4                            
00011DA4                            Obj5E_Slope:				; XREF: Obj5E_Index
00011DA4 1228 003A                  		move.b	$3A(a0),d1
00011DA8 6100 0000                  		bsr.w	loc_11766
00011DAC 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011DB2 0828 0000 001A             		btst	#0,$1A(a0)
00011DB8 6700                       		beq.s	loc_11702
00011DBA 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011DC0                            
00011DC0                            loc_11702:
00011DC0 43F8 D000                  		lea	($FFFFD000).w,a1
00011DC4 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011DCA 323C 0030                  		move.w	#$30,d1
00011DCE 4EB9 0000 7ACE             		jsr	(SlopeObject).l
00011DD4 4E75                       		rts	
00011DD6                            ; ===========================================================================
00011DD6                            
00011DD6                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011DD6 6100 0000                  		bsr.w	loc_1174A
00011DDA 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011DE0 0828 0000 001A             		btst	#0,$1A(a0)
00011DE6 6700                       		beq.s	loc_11730
00011DE8 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011DEE                            
00011DEE                            loc_11730:
00011DEE 323C 0030                  		move.w	#$30,d1
00011DF2 4EB9 0000 7B6E             		jsr	(ExitPlatform).l
00011DF8 323C 0030                  		move.w	#$30,d1
00011DFC 3428 0008                  		move.w	8(a0),d2
00011E00 4EB9 0000 8ACC             		jsr	SlopeObject2
00011E06 4E75                       		rts	
00011E08                            ; ===========================================================================
00011E08                            
00011E08                            loc_1174A:				; XREF: Obj5E_Slope2
00011E08 7202                       		moveq	#2,d1
00011E0A 43F8 D000                  		lea	($FFFFD000).w,a1
00011E0E 3028 0008                  		move.w	8(a0),d0
00011E12 9069 0008                  		sub.w	8(a1),d0
00011E16 6400                       		bcc.s	loc_1175E
00011E18 4440                       		neg.w	d0
00011E1A 7200                       		moveq	#0,d1
00011E1C                            
00011E1C                            loc_1175E:
00011E1C 0C40 0008                  		cmpi.w	#8,d0
00011E20 6400                       		bcc.s	loc_11766
00011E22 7201                       		moveq	#1,d1
00011E24                            
00011E24                            loc_11766:
00011E24 1028 001A                  		move.b	$1A(a0),d0
00011E28 B001                       		cmp.b	d1,d0
00011E2A 6700                       		beq.s	locret_11790
00011E2C 6400                       		bcc.s	loc_11772
00011E2E 5400                       		addq.b	#2,d0
00011E30                            
00011E30                            loc_11772:
00011E30 5300                       		subq.b	#1,d0
00011E32 1140 001A                  		move.b	d0,$1A(a0)
00011E36 1141 003A                  		move.b	d1,$3A(a0)
00011E3A 08A8 0000 0001             		bclr	#0,1(a0)
00011E40 0828 0001 001A             		btst	#1,$1A(a0)
00011E46 6700                       		beq.s	locret_11790
00011E48 08E8 0000 0001             		bset	#0,1(a0)
00011E4E                            
00011E4E                            locret_11790:
00011E4E 4E75                       		rts	
00011E50                            ; ===========================================================================
00011E50                            
00011E50                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011E50 5428 0024                  		addq.b	#2,$24(a0)
00011E54 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011E5C 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011E62 0028 0004 0001             		ori.b	#4,1(a0)
00011E68 117C 0004 0018             		move.b	#4,$18(a0)
00011E6E 117C 008B 0020             		move.b	#$8B,$20(a0)
00011E74 117C 000C 0019             		move.b	#$C,$19(a0)
00011E7A 3168 0008 0030             		move.w	8(a0),$30(a0)
00011E80 0668 0028 0008             		addi.w	#$28,8(a0)
00011E86 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011E8C 117C 0001 001A             		move.b	#1,$1A(a0)
00011E92 0828 0000 0022             		btst	#0,$22(a0)
00011E98 6700                       		beq.s	Obj5E_MoveSpike
00011E9A 0468 0050 0008             		subi.w	#$50,8(a0)
00011EA0 117C 0002 003A             		move.b	#2,$3A(a0)
00011EA6                            
00011EA6                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011EA6 2268 003C                  		movea.l	$3C(a0),a1
00011EAA 7000                       		moveq	#0,d0
00011EAC 1028 003A                  		move.b	$3A(a0),d0
00011EB0 9029 003A                  		sub.b	$3A(a1),d0
00011EB4 6700                       		beq.s	loc_1183E
00011EB6 6400                       		bcc.s	loc_117FC
00011EB8 4400                       		neg.b	d0
00011EBA                            
00011EBA                            loc_117FC:
00011EBA 323C F7E8                  		move.w	#-$818,d1
00011EBE 343C FEEC                  		move.w	#-$114,d2
00011EC2 0C00 0001                  		cmpi.b	#1,d0
00011EC6 6700                       		beq.s	loc_11822
00011EC8 323C F510                  		move.w	#-$AF0,d1
00011ECC 343C FF34                  		move.w	#-$CC,d2
00011ED0 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00011ED6 6D00                       		blt.s	loc_11822
00011ED8 323C F200                  		move.w	#-$E00,d1
00011EDC 343C FF60                  		move.w	#-$A0,d2
00011EE0                            
00011EE0                            loc_11822:
00011EE0 3141 0012                  		move.w	d1,$12(a0)
00011EE4 3142 0010                  		move.w	d2,$10(a0)
00011EE8 3028 0008                  		move.w	8(a0),d0
00011EEC 9068 0030                  		sub.w	$30(a0),d0
00011EF0 6400                       		bcc.s	loc_11838
00011EF2 4468 0010                  		neg.w	$10(a0)
00011EF6                            
00011EF6                            loc_11838:
00011EF6 5428 0024                  		addq.b	#2,$24(a0)
00011EFA 6000                       		bra.s	Obj5E_SpikeFall
00011EFC                            ; ===========================================================================
00011EFC                            
00011EFC                            loc_1183E:				; XREF: Obj5E_MoveSpike
00011EFC 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011F02 7000                       		moveq	#0,d0
00011F04 1029 001A                  		move.b	$1A(a1),d0
00011F08 343C 0028                  		move.w	#$28,d2
00011F0C 3228 0008                  		move.w	8(a0),d1
00011F10 9268 0030                  		sub.w	$30(a0),d1
00011F14 6400                       		bcc.s	loc_1185C
00011F16 4442                       		neg.w	d2
00011F18 5440                       		addq.w	#2,d0
00011F1A                            
00011F1A                            loc_1185C:
00011F1A D040                       		add.w	d0,d0
00011F1C 3228 0034                  		move.w	$34(a0),d1
00011F20 D272 0000                  		add.w	(a2,d0.w),d1
00011F24 3141 000C                  		move.w	d1,$C(a0)
00011F28 D468 0030                  		add.w	$30(a0),d2
00011F2C 3142 0008                  		move.w	d2,8(a0)
00011F30 4268 000E                  		clr.w	$E(a0)
00011F34 4268 000A                  		clr.w	$A(a0)
00011F38 4E75                       		rts	
00011F3A                            ; ===========================================================================
00011F3A                            
00011F3A                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00011F3A 4A68 0012                  		tst.w	$12(a0)
00011F3E 6A00                       		bpl.s	loc_1189A
00011F40 6100 BD4A                  		bsr.w	ObjectFall
00011F44 3028 0034                  		move.w	$34(a0),d0
00011F48 0440 002F                  		subi.w	#$2F,d0
00011F4C B068 000C                  		cmp.w	$C(a0),d0
00011F50 6E00                       		bgt.s	locret_11898
00011F52 6100 BD38                  		bsr.w	ObjectFall
00011F56                            
00011F56                            locret_11898:
00011F56 4E75                       		rts	
00011F58                            ; ===========================================================================
00011F58                            
00011F58                            loc_1189A:				; XREF: Obj5E_SpikeFall
00011F58 6100 BD32                  		bsr.w	ObjectFall
00011F5C 2268 003C                  		movea.l	$3C(a0),a1
00011F60 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011F66 7000                       		moveq	#0,d0
00011F68 1029 001A                  		move.b	$1A(a1),d0
00011F6C 3228 0008                  		move.w	8(a0),d1
00011F70 9268 0030                  		sub.w	$30(a0),d1
00011F74 6400                       		bcc.s	loc_118BA
00011F76 5440                       		addq.w	#2,d0
00011F78                            
00011F78                            loc_118BA:
00011F78 D040                       		add.w	d0,d0
00011F7A 3228 0034                  		move.w	$34(a0),d1
00011F7E D272 0000                  		add.w	(a2,d0.w),d1
00011F82 B268 000C                  		cmp.w	$C(a0),d1
00011F86 6E00                       		bgt.s	locret_11938
00011F88 2268 003C                  		movea.l	$3C(a0),a1
00011F8C 7202                       		moveq	#2,d1
00011F8E 4A68 0010                  		tst.w	$10(a0)
00011F92 6B00                       		bmi.s	Obj5E_Spring
00011F94 7200                       		moveq	#0,d1
00011F96                            
00011F96                            Obj5E_Spring:
00011F96 1341 003A                  		move.b	d1,$3A(a1)
00011F9A 1141 003A                  		move.b	d1,$3A(a0)
00011F9E B229 001A                  		cmp.b	$1A(a1),d1
00011FA2 6700                       		beq.s	loc_1192C
00011FA4 08A9 0003 0022             		bclr	#3,$22(a1)
00011FAA 6700                       		beq.s	loc_1192C
00011FAC 4229 0025                  		clr.b	$25(a1)
00011FB0 137C 0002 0024             		move.b	#2,$24(a1)
00011FB6 45F8 D000                  		lea	($FFFFD000).w,a2
00011FBA 3568 0012 0012             		move.w	$12(a0),$12(a2)
00011FC0 446A 0012                  		neg.w	$12(a2)
00011FC4 08EA 0001 0022             		bset	#1,$22(a2)
00011FCA 08AA 0003 0022             		bclr	#3,$22(a2)
00011FD0 422A 003C                  		clr.b	$3C(a2)
00011FD4 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00011FDA 157C 0002 0024             		move.b	#2,$24(a2)
00011FE0 303C 00CC                  		move.w	#$CC,d0
00011FE4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
00011FEA                            
00011FEA                            loc_1192C:
00011FEA 4268 0010                  		clr.w	$10(a0)
00011FEE 4268 0012                  		clr.w	$12(a0)
00011FF2 5528 0024                  		subq.b	#2,$24(a0)
00011FF6                            
00011FF6                            locret_11938:
00011FF6 4E75                       		rts	
00011FF8                            ; ===========================================================================
00011FF8 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00012002                            
00012002                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00012032                            		even
00012032                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00012062                            		even
00012062                            ; ---------------------------------------------------------------------------
00012062                            ; Sprite mappings - seesaws (SLZ)
00012062                            ; ---------------------------------------------------------------------------
00012062                            Map_obj5E:
00012062                            	include "_maps\obj5E.asm"
00012062                            ; ---------------------------------------------------------------------------
00012062                            ; Sprite mappings - seesaws (SLZ)
00012062                            ; ---------------------------------------------------------------------------
00012062 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012066 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001206A 07                         byte_119AC:	dc.b 7
0001206B D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00012070 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00012075 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
0001207A EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
0001207F FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00012084 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00012089 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
0001208E 04                         byte_119D0:	dc.b 4
0001208F E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00012094 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00012099 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
0001209E E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
000120A4 00                         		even
000120A4 00                         		even
000120A4                            
000120A4                            ; ---------------------------------------------------------------------------
000120A4                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000120A4                            ; ---------------------------------------------------------------------------
000120A4                            Map_obj5Ea:
000120A4                            	include "_maps\obj5Eballs.asm"
000120A4                            ; ---------------------------------------------------------------------------
000120A4                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000120A4                            ; ---------------------------------------------------------------------------
000120A4 0000                       		dc.w byte_119EA-Map_obj5Ea
000120A6 0000                       		dc.w byte_119F0-Map_obj5Ea
000120A8 01                         byte_119EA:	dc.b 1
000120A9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000120AE 01                         byte_119F0:	dc.b 1
000120AF F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000120B4                            		even
000120B4                            		even
000120B4                            
000120B4                            ; ===========================================================================
000120B4                            ; ---------------------------------------------------------------------------
000120B4                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
000120B4                            ; ---------------------------------------------------------------------------
000120B4                            
000120B4                            Obj5F:					; XREF: Obj_Index
000120B4 7000                       		moveq	#0,d0
000120B6 1028 0024                  		move.b	$24(a0),d0
000120BA 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
000120BE 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
000120C2                            ; ===========================================================================
000120C2 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
000120C4 0000                       		dc.w Obj5F_Action-Obj5F_Index
000120C6 0000                       		dc.w Obj5F_Display-Obj5F_Index
000120C8 0000                       		dc.w Obj5F_End-Obj5F_Index
000120CA                            ; ===========================================================================
000120CA                            
000120CA                            Obj5F_Main:				; XREF: Obj5F_Index
000120CA 5428 0024                  		addq.b	#2,$24(a0)
000120CE 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
000120D6 317C 0400 0002             		move.w	#$400,2(a0)
000120DC 0028 0004 0001             		ori.b	#4,1(a0)
000120E2 117C 0003 0018             		move.b	#3,$18(a0)
000120E8 117C 000C 0019             		move.b	#$C,$19(a0)
000120EE 1028 0028                  		move.b	$28(a0),d0
000120F2 6700                       		beq.s	loc_11A3C
000120F4 1140 0024                  		move.b	d0,$24(a0)
000120F8 4E75                       		rts	
000120FA                            ; ===========================================================================
000120FA                            
000120FA                            loc_11A3C:
000120FA 117C 009A 0020             		move.b	#$9A,$20(a0)
00012100 0868 0000 0022             		bchg	#0,$22(a0)
00012106                            
00012106                            Obj5F_Action:				; XREF: Obj5F_Index
00012106 7000                       		moveq	#0,d0
00012108 1028 0025                  		move.b	$25(a0),d0
0001210C 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00012110 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00012114 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001211A 6100 8C82                  		bsr.w	AnimateSprite
0001211E 6000 DC66                  		bra.w	MarkObjGone
00012122                            ; ===========================================================================
00012122 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00012124 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00012126 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00012128                            ; ===========================================================================
00012128                            
00012128                            Obj5F_Walk:				; XREF: Obj5F_Index2
00012128 6100 0000                  		bsr.w	Obj5F_ChkSonic
0001212C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012130 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00012132 5428 0025                  		addq.b	#2,$25(a0)
00012136 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
0001213C 317C 0010 0010             		move.w	#$10,$10(a0)
00012142 117C 0001 001C             		move.b	#1,$1C(a0)
00012148 0868 0000 0022             		bchg	#0,$22(a0)
0001214E 6700                       		beq.s	locret_11A96
00012150 4468 0010                  		neg.w	$10(a0)		; change direction
00012154                            
00012154                            locret_11A96:
00012154 4E75                       		rts	
00012156                            ; ===========================================================================
00012156                            
00012156                            Obj5F_Wait:				; XREF: Obj5F_Index2
00012156 6100 0000                  		bsr.w	Obj5F_ChkSonic
0001215A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001215E 6B00                       		bmi.s	loc_11AA8
00012160 6100 BB56                  		bsr.w	SpeedToPos
00012164 4E75                       		rts	
00012166                            ; ===========================================================================
00012166                            
00012166                            loc_11AA8:
00012166 5528 0025                  		subq.b	#2,$25(a0)
0001216A 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00012170 4268 0010                  		clr.w	$10(a0)		; stop walking
00012174 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
0001217A 4E75                       		rts	
0001217C                            ; ===========================================================================
0001217C                            
0001217C                            Obj5F_Explode:				; XREF: Obj5F_Index2
0001217C 5368 0030                  		subq.w	#1,$30(a0)
00012180 6A00                       		bpl.s	locret_11AD0
00012182 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00012186 117C 0000 0024             		move.b	#0,$24(a0)
0001218C                            
0001218C                            locret_11AD0:
0001218C 4E75                       		rts	
0001218E                            ; ===========================================================================
0001218E                            
0001218E                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
0001218E 3038 D008                  		move.w	($FFFFD008).w,d0
00012192 9068 0008                  		sub.w	8(a0),d0
00012196 6400                       		bcc.s	loc_11ADE
00012198 4440                       		neg.w	d0
0001219A                            
0001219A                            loc_11ADE:
0001219A 0C40 0060                  		cmpi.w	#$60,d0
0001219E 6400                       		bcc.s	locret_11B5E
000121A0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000121A4 9068 000C                  		sub.w	$C(a0),d0
000121A8 6400                       		bcc.s	Obj5F_MakeFuse
000121AA 4440                       		neg.w	d0
000121AC                            
000121AC                            Obj5F_MakeFuse:
000121AC 0C40 0060                  		cmpi.w	#$60,d0
000121B0 6400                       		bcc.s	locret_11B5E
000121B2 4A78 FE08                  		tst.w	($FFFFFE08).w
000121B6 6600                       		bne.s	locret_11B5E
000121B8 117C 0004 0025             		move.b	#4,$25(a0)
000121BE 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
000121C4 4268 0010                  		clr.w	$10(a0)
000121C8 117C 0002 001C             		move.b	#2,$1C(a0)
000121CE 6100 BFAA                  		bsr.w	SingleObjLoad2
000121D2 6600                       		bne.s	locret_11B5E
000121D4 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
000121D8 3368 0008 0008             		move.w	8(a0),8(a1)
000121DE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000121E4 3368 000C 0034             		move.w	$C(a0),$34(a1)
000121EA 1368 0022 0022             		move.b	$22(a0),$22(a1)
000121F0 137C 0004 0028             		move.b	#4,$28(a1)
000121F6 137C 0003 001C             		move.b	#3,$1C(a1)
000121FC 337C 0010 0012             		move.w	#$10,$12(a1)
00012202 0828 0001 0022             		btst	#1,$22(a0)
00012208 6700                       		beq.s	loc_11B54
0001220A 4469 0012                  		neg.w	$12(a1)
0001220E                            
0001220E                            loc_11B54:
0001220E 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00012214 2348 003C                  		move.l	a0,$3C(a1)
00012218                            
00012218                            locret_11B5E:
00012218 4E75                       		rts	
0001221A                            ; ===========================================================================
0001221A                            
0001221A                            Obj5F_Display:				; XREF: Obj5F_Index
0001221A 6100                       		bsr.s	loc_11B70
0001221C 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012222 6100 8B7A                  		bsr.w	AnimateSprite
00012226 6000 DB5E                  		bra.w	MarkObjGone
0001222A                            ; ===========================================================================
0001222A                            
0001222A                            loc_11B70:
0001222A 5368 0030                  		subq.w	#1,$30(a0)
0001222E 6B00                       		bmi.s	loc_11B7C
00012230 6100 BA86                  		bsr.w	SpeedToPos
00012234 4E75                       		rts	
00012236                            ; ===========================================================================
00012236                            
00012236                            loc_11B7C:
00012236 4268 0030                  		clr.w	$30(a0)
0001223A 4228 0024                  		clr.b	$24(a0)
0001223E 3168 0034 000C             		move.w	$34(a0),$C(a0)
00012244 7203                       		moveq	#3,d1
00012246 2248                       		movea.l	a0,a1
00012248 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
0001224E 6000                       		bra.s	Obj5F_MakeShrap
00012250                            ; ===========================================================================
00012250                            
00012250                            Obj5F_Loop:
00012250 6100 BF28                  		bsr.w	SingleObjLoad2
00012254 6600                       		bne.s	loc_11BCE
00012256                            
00012256                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00012256 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
0001225A 3368 0008 0008             		move.w	8(a0),8(a1)
00012260 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012266 137C 0006 0028             		move.b	#6,$28(a1)
0001226C 137C 0004 001C             		move.b	#4,$1C(a1)
00012272 335A 0010                  		move.w	(a2)+,$10(a1)
00012276 335A 0012                  		move.w	(a2)+,$12(a1)
0001227A 137C 0098 0020             		move.b	#$98,$20(a1)
00012280 08E9 0007 0001             		bset	#7,1(a1)
00012286                            
00012286                            loc_11BCE:
00012286 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
0001228A                            
0001228A 117C 0006 0024             		move.b	#6,$24(a0)
00012290                            
00012290                            Obj5F_End:				; XREF: Obj5F_Index
00012290 6100 BA26                  		bsr.w	SpeedToPos
00012294 0668 0018 0012             		addi.w	#$18,$12(a0)
0001229A 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000122A0 6100 8AFC                  		bsr.w	AnimateSprite
000122A4 4A28 0001                  		tst.b	1(a0)
000122A8 6A00 BA70                  		bpl.w	DeleteObject
000122AC 6000 BA30                  		bra.w	DisplaySprite
000122B0                            ; ===========================================================================
000122B0 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
000122C0                            
000122C0                            Ani_obj5F:
000122C0                            	include "_anim\obj5F.asm"
000122C0                            ; ---------------------------------------------------------------------------
000122C0                            ; Animation script - Bomb enemy
000122C0                            ; ---------------------------------------------------------------------------
000122C0 0000                       		dc.w byte_11C12-Ani_obj5F
000122C2 0000                       		dc.w byte_11C16-Ani_obj5F
000122C4 0000                       		dc.w byte_11C1C-Ani_obj5F
000122C6 0000                       		dc.w byte_11C20-Ani_obj5F
000122C8 0000                       		dc.w byte_11C24-Ani_obj5F
000122CA 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
000122CE 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
000122D4 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
000122D8 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
000122DC 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
000122E0                            		even
000122E0                            		even
000122E0                            
000122E0                            ; ---------------------------------------------------------------------------
000122E0                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000122E0                            ; ---------------------------------------------------------------------------
000122E0                            Map_obj5F:
000122E0                            	include "_maps\obj5F.asm"
000122E0                            ; ---------------------------------------------------------------------------
000122E0                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000122E0                            ; ---------------------------------------------------------------------------
000122E0 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
000122E4 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
000122E8 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
000122EC 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
000122F0 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
000122F4 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
000122F8 03                         byte_11C40:	dc.b 3
000122F9 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000122FE 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012303 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012308 03                         byte_11C50:	dc.b 3
00012309 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001230E 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012313 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012318 03                         byte_11C60:	dc.b 3
00012319 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001231E 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00012323 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012328 03                         byte_11C70:	dc.b 3
00012329 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001232E 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00012333 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012338 03                         byte_11C80:	dc.b 3
00012339 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001233E 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00012343 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012348 03                         byte_11C90:	dc.b 3
00012349 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001234E 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00012353 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012358 02                         byte_11CA0:	dc.b 2
00012359 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
0001235E 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012363 02                         byte_11CAB:	dc.b 2
00012364 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012369 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001236E 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
0001236F E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00012374 01                         byte_11CBC:	dc.b 1			; fuse
00012375 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
0001237A 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
0001237B FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00012380 01                         byte_11CC8:	dc.b 1			; fireball
00012381 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00012386                            		even
00012386                            		even
00012386                            
00012386                            ; ===========================================================================
00012386                            ; ---------------------------------------------------------------------------
00012386                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00012386                            ; ---------------------------------------------------------------------------
00012386                            
00012386                            Obj60:					; XREF: Obj_Index
00012386 7000                       		moveq	#0,d0
00012388 1028 0024                  		move.b	$24(a0),d0
0001238C 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00012390 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00012394                            ; ===========================================================================
00012394 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00012396 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00012398 0000                       		dc.w Obj60_Display-Obj60_Index
0001239A 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
0001239C 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
0001239E                            ; ===========================================================================
0001239E                            
0001239E                            Obj60_Main:				; XREF: Obj60_Index
0001239E 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
000123A6 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
000123AC 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000123B2 6700                       		beq.s	loc_11D02
000123B4 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
000123BA                            
000123BA                            loc_11D02:
000123BA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000123C0 6600                       		bne.s	loc_11D10
000123C2 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
000123C8                            
000123C8                            loc_11D10:
000123C8 0028 0004 0001             		ori.b	#4,1(a0)
000123CE 117C 0004 0018             		move.b	#4,$18(a0)
000123D4 117C 000B 0020             		move.b	#$B,$20(a0)
000123DA 117C 000C 0019             		move.b	#$C,$19(a0)
000123E0 7400                       		moveq	#0,d2
000123E2 45E8 0037                  		lea	$37(a0),a2
000123E6 264A                       		movea.l	a2,a3
000123E8 524A                       		addq.w	#1,a2
000123EA 7203                       		moveq	#3,d1
000123EC                            
000123EC                            Obj60_MakeOrbs:
000123EC 6100 BD8C                  		bsr.w	SingleObjLoad2
000123F0 6600                       		bne.s	loc_11D90
000123F2 5213                       		addq.b	#1,(a3)
000123F4 3A09                       		move.w	a1,d5
000123F6 0445 D000                  		subi.w	#-$3000,d5
000123FA EC4D                       		lsr.w	#6,d5
000123FC 0245 007F                  		andi.w	#$7F,d5
00012400 14C5                       		move.b	d5,(a2)+
00012402 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012404 137C 0006 0024             		move.b	#6,$24(a1)
0001240A 2368 0004 0004             		move.l	4(a0),4(a1)
00012410 3368 0002 0002             		move.w	2(a0),2(a1)
00012416 0029 0004 0001             		ori.b	#4,1(a1)
0001241C 137C 0004 0018             		move.b	#4,$18(a1)
00012422 137C 0008 0019             		move.b	#8,$19(a1)
00012428 137C 0003 001A             		move.b	#3,$1A(a1)
0001242E 137C 0098 0020             		move.b	#$98,$20(a1)
00012434 1342 0026                  		move.b	d2,$26(a1)
00012438 0602 0040                  		addi.b	#$40,d2
0001243C 2348 003C                  		move.l	a0,$3C(a1)
00012440 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00012444                            
00012444                            loc_11D90:
00012444 7001                       		moveq	#1,d0
00012446 0828 0000 0022             		btst	#0,$22(a0)
0001244C 6700                       		beq.s	Obj60_Move
0001244E 4440                       		neg.w	d0
00012450                            
00012450                            Obj60_Move:
00012450 1140 0036                  		move.b	d0,$36(a0)
00012454 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
0001245A 5428 0024                  		addq.b	#2,$24(a0)
0001245E 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00012464 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
0001246A 6700                       		beq.s	locret_11DBC	; if not, branch
0001246C 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00012470                            
00012470                            locret_11DBC:
00012470 4E75                       		rts	
00012472                            ; ===========================================================================
00012472                            
00012472                            Obj60_ChkSonic:				; XREF: Obj60_Index
00012472 3038 D008                  		move.w	($FFFFD008).w,d0
00012476 9068 0008                  		sub.w	8(a0),d0
0001247A 6400                       		bcc.s	loc_11DCA
0001247C 4440                       		neg.w	d0
0001247E                            
0001247E                            loc_11DCA:
0001247E 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00012482 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012484 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012488 9068 000C                  		sub.w	$C(a0),d0
0001248C 6400                       		bcc.s	loc_11DDC
0001248E 4440                       		neg.w	d0
00012490                            
00012490                            loc_11DDC:
00012490 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00012494 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012496 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001249A 6600                       		bne.s	Obj60_Animate	; if yes, branch
0001249C 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
000124A2                            
000124A2                            Obj60_Animate:
000124A2 43F9 0000 0000             		lea	(Ani_obj60).l,a1
000124A8 6100 88F4                  		bsr.w	AnimateSprite
000124AC 6000 0000                  		bra.w	Obj60_ChkDel
000124B0                            ; ===========================================================================
000124B0                            
000124B0                            Obj60_Display:				; XREF: Obj60_Index
000124B0 6100 B806                  		bsr.w	SpeedToPos
000124B4                            
000124B4                            Obj60_ChkDel:				; XREF: Obj60_Animate
000124B4 3028 0008                  		move.w	8(a0),d0
000124B8 0240 FF80                  		andi.w	#$FF80,d0
000124BC 3238 F700                  		move.w	($FFFFF700).w,d1
000124C0 0441 0080                  		subi.w	#$80,d1
000124C4 0241 FF80                  		andi.w	#$FF80,d1
000124C8 9041                       		sub.w	d1,d0
000124CA 0C40 0280                  		cmpi.w	#$280,d0
000124CE 6200 0000                  		bhi.w	Obj60_ChkGone
000124D2 6000 B80A                  		bra.w	DisplaySprite
000124D6                            ; ===========================================================================
000124D6                            
000124D6                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
000124D6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000124DA 7000                       		moveq	#0,d0
000124DC 1028 0023                  		move.b	$23(a0),d0
000124E0 6700                       		beq.s	loc_11E34
000124E2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000124E8                            
000124E8                            loc_11E34:
000124E8 45E8 0037                  		lea	$37(a0),a2
000124EC 7400                       		moveq	#0,d2
000124EE 141A                       		move.b	(a2)+,d2
000124F0 5342                       		subq.w	#1,d2
000124F2 6500                       		bcs.s	Obj60_Delete
000124F4                            
000124F4                            loc_11E40:
000124F4 7000                       		moveq	#0,d0
000124F6 101A                       		move.b	(a2)+,d0
000124F8 ED48                       		lsl.w	#6,d0
000124FA 0680 00FF D000             		addi.l	#$FFD000,d0
00012500 2240                       		movea.l	d0,a1
00012502 6100 B818                  		bsr.w	DeleteObject2
00012506 51CA FFEC                  		dbf	d2,loc_11E40
0001250A                            
0001250A                            Obj60_Delete:
0001250A 6000 B80E                  		bra.w	DeleteObject
0001250E                            ; ===========================================================================
0001250E                            
0001250E                            Obj60_MoveOrb:				; XREF: Obj60_Index
0001250E 2268 003C                  		movea.l	$3C(a0),a1
00012512 0C11 0060                  		cmpi.b	#$60,0(a1)
00012516 6600 B802                  		bne.w	DeleteObject
0001251A 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00012520 6600                       		bne.s	Obj60_Circle
00012522 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00012528 6600                       		bne.s	Obj60_Circle
0001252A 5428 0024                  		addq.b	#2,$24(a0)
0001252E 5329 0037                  		subq.b	#1,$37(a1)
00012532 6600                       		bne.s	Obj60_FireOrb
00012534 5429 0024                  		addq.b	#2,$24(a1)
00012538                            
00012538                            Obj60_FireOrb:
00012538 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
0001253E 0829 0000 0022             		btst	#0,$22(a1)
00012544 6700                       		beq.s	Obj60_Display2
00012546 4468 0010                  		neg.w	$10(a0)
0001254A                            
0001254A                            Obj60_Display2:
0001254A 6000 B792                  		bra.w	DisplaySprite
0001254E                            ; ===========================================================================
0001254E                            
0001254E                            Obj60_Circle:				; XREF: Obj60_MoveOrb
0001254E 1028 0026                  		move.b	$26(a0),d0
00012552 4EB9 0000 2C64             		jsr	(CalcSine).l
00012558 E841                       		asr.w	#4,d1
0001255A D269 0008                  		add.w	8(a1),d1
0001255E 3141 0008                  		move.w	d1,8(a0)
00012562 E840                       		asr.w	#4,d0
00012564 D069 000C                  		add.w	$C(a1),d0
00012568 3140 000C                  		move.w	d0,$C(a0)
0001256C 1029 0036                  		move.b	$36(a1),d0
00012570 D128 0026                  		add.b	d0,$26(a0)
00012574 6000 B768                  		bra.w	DisplaySprite
00012578                            ; ===========================================================================
00012578                            
00012578                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012578 6100 B73E                  		bsr.w	SpeedToPos
0001257C 4A28 0001                  		tst.b	1(a0)
00012580 6A00 B798                  		bpl.w	DeleteObject
00012584 6000 B758                  		bra.w	DisplaySprite
00012588                            ; ===========================================================================
00012588                            Ani_obj60:
00012588                            	include "_anim\obj60.asm"
00012588                            ; ---------------------------------------------------------------------------
00012588                            ; Animation script - Orbinaut enemy
00012588                            ; ---------------------------------------------------------------------------
00012588 0000                       		dc.w byte_11EDA-Ani_obj60
0001258A 0000                       		dc.w byte_11EDE-Ani_obj60
0001258C 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00012590 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00012596                            		even
00012596                            		even
00012596                            
00012596                            ; ---------------------------------------------------------------------------
00012596                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012596                            ; ---------------------------------------------------------------------------
00012596                            Map_obj60:
00012596                            	include "_maps\obj60.asm"
00012596                            ; ---------------------------------------------------------------------------
00012596                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012596                            ; ---------------------------------------------------------------------------
00012596 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
0001259A 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
0001259E 01                         byte_11EEC:	dc.b 1
0001259F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000125A4 01                         byte_11EF2:	dc.b 1
000125A5 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000125AA 01                         byte_11EF8:	dc.b 1
000125AB F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000125B0 01                         byte_11EFE:	dc.b 1
000125B1 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000125B6                            		even
000125B6                            		even
000125B6                            
000125B6                            ; ===========================================================================
000125B6                            ; ---------------------------------------------------------------------------
000125B6                            ; Object 16 - harpoon (LZ)
000125B6                            ; ---------------------------------------------------------------------------
000125B6                            
000125B6                            Obj16:					; XREF: Obj_Index
000125B6 7000                       		moveq	#0,d0
000125B8 1028 0024                  		move.b	$24(a0),d0
000125BC 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
000125C0 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
000125C4                            ; ===========================================================================
000125C4 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
000125C6 0000                       		dc.w Obj16_Move-Obj16_Index
000125C8 0000                       		dc.w Obj16_Wait-Obj16_Index
000125CA                            ; ===========================================================================
000125CA                            
000125CA                            Obj16_Main:				; XREF: Obj16_Index
000125CA 5428 0024                  		addq.b	#2,$24(a0)
000125CE 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
000125D6 317C 03CC 0002             		move.w	#$3CC,2(a0)
000125DC 0028 0004 0001             		ori.b	#4,1(a0)
000125E2 117C 0004 0018             		move.b	#4,$18(a0)
000125E8 1168 0028 001C             		move.b	$28(a0),$1C(a0)
000125EE 117C 0014 0019             		move.b	#$14,$19(a0)
000125F4 317C 003C 0030             		move.w	#60,$30(a0)
000125FA                            
000125FA                            Obj16_Move:				; XREF: Obj16_Index
000125FA 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00012600 6100 879C                  		bsr.w	AnimateSprite
00012604 7000                       		moveq	#0,d0
00012606 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
0001260A 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00012610 6000 D774                  		bra.w	MarkObjGone
00012614                            ; ===========================================================================
00012614 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
0001261A                            ; ===========================================================================
0001261A                            
0001261A                            Obj16_Wait:				; XREF: Obj16_Index
0001261A 5368 0030                  		subq.w	#1,$30(a0)
0001261E 6A00                       		bpl.s	Obj16_ChkDel
00012620 317C 003C 0030             		move.w	#60,$30(a0)
00012626 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
0001262A 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00012630                            
00012630                            Obj16_ChkDel:
00012630 6000 D754                  		bra.w	MarkObjGone
00012634                            ; ===========================================================================
00012634                            Ani_obj16:
00012634                            	include "_anim\obj16.asm"
00012634                            ; ---------------------------------------------------------------------------
00012634                            ; Animation script - harpoon (LZ)
00012634                            ; ---------------------------------------------------------------------------
00012634 0000                       		dc.w byte_11F8A-Ani_obj16
00012636 0000                       		dc.w byte_11F8E-Ani_obj16
00012638 0000                       		dc.w byte_11F92-Ani_obj16
0001263A 0000                       		dc.w byte_11F96-Ani_obj16
0001263C 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00012640 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00012644 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00012648 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
0001264C                            		even
0001264C                            		even
0001264C                            
0001264C                            ; ---------------------------------------------------------------------------
0001264C                            ; Sprite mappings - harpoon (LZ)
0001264C                            ; ---------------------------------------------------------------------------
0001264C                            Map_obj16:
0001264C                            	include "_maps\obj16.asm"
0001264C                            ; ---------------------------------------------------------------------------
0001264C                            ; Sprite mappings - harpoon (LZ)
0001264C                            ; ---------------------------------------------------------------------------
0001264C 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00012650 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00012654 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012658 01                         byte_11FA6:	dc.b 1
00012659 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0001265E 01                         byte_11FAC:	dc.b 1
0001265F FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00012664 02                         byte_11FB2:	dc.b 2
00012665 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
0001266A FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
0001266F 01                         byte_11FBD:	dc.b 1
00012670 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012675 01                         byte_11FC3:	dc.b 1
00012676 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
0001267B 02                         byte_11FC9:	dc.b 2
0001267C D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012681 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012686                            		even
00012686                            		even
00012686                            
00012686                            ; ===========================================================================
00012686                            ; ---------------------------------------------------------------------------
00012686                            ; Object 61 - blocks (LZ)
00012686                            ; ---------------------------------------------------------------------------
00012686                            
00012686                            Obj61:					; XREF: Obj_Index
00012686 7000                       		moveq	#0,d0
00012688 1028 0024                  		move.b	$24(a0),d0
0001268C 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012690 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012694                            ; ===========================================================================
00012694 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012696 0000                       		dc.w Obj61_Action-Obj61_Index
00012698                            
00012698 1010                       Obj61_Var:	dc.b $10, $10		; width, height
0001269A 200C                       		dc.b $20, $C
0001269C 1010                       		dc.b $10, $10
0001269E 1010                       		dc.b $10, $10
000126A0                            ; ===========================================================================
000126A0                            
000126A0                            Obj61_Main:				; XREF: Obj61_Index
000126A0 5428 0024                  		addq.b	#2,$24(a0)
000126A4 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
000126AC 317C 43E6 0002             		move.w	#$43E6,2(a0)
000126B2 117C 0004 0001             		move.b	#4,1(a0)
000126B8 117C 0003 0018             		move.b	#3,$18(a0)
000126BE 7000                       		moveq	#0,d0
000126C0 1028 0028                  		move.b	$28(a0),d0
000126C4 E648                       		lsr.w	#3,d0
000126C6 0240 000E                  		andi.w	#$E,d0
000126CA 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
000126CE 115A 0019                  		move.b	(a2)+,$19(a0)
000126D2 1152 0016                  		move.b	(a2),$16(a0)
000126D6 E248                       		lsr.w	#1,d0
000126D8 1140 001A                  		move.b	d0,$1A(a0)
000126DC 3168 0008 0034             		move.w	8(a0),$34(a0)
000126E2 3168 000C 0030             		move.w	$C(a0),$30(a0)
000126E8 1028 0028                  		move.b	$28(a0),d0
000126EC 0200 000F                  		andi.b	#$F,d0
000126F0 6700                       		beq.s	Obj61_Action
000126F2 0C00 0007                  		cmpi.b	#7,d0
000126F6 6700                       		beq.s	Obj61_Action
000126F8 117C 0001 0038             		move.b	#1,$38(a0)
000126FE                            
000126FE                            Obj61_Action:				; XREF: Obj61_Index
000126FE 3F28 0008                  		move.w	8(a0),-(sp)
00012702 7000                       		moveq	#0,d0
00012704 1028 0028                  		move.b	$28(a0),d0
00012708 0240 000F                  		andi.w	#$F,d0
0001270C D040                       		add.w	d0,d0
0001270E 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012712 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012716 381F                       		move.w	(sp)+,d4
00012718 4A28 0001                  		tst.b	1(a0)
0001271C 6A00                       		bpl.s	Obj61_ChkDel
0001271E 7200                       		moveq	#0,d1
00012720 1228 0019                  		move.b	$19(a0),d1
00012724 0641 000B                  		addi.w	#$B,d1
00012728 7400                       		moveq	#0,d2
0001272A 1428 0016                  		move.b	$16(a0),d2
0001272E 3602                       		move.w	d2,d3
00012730 5243                       		addq.w	#1,d3
00012732 6100 D97A                  		bsr.w	SolidObject
00012736 1144 003F                  		move.b	d4,$3F(a0)
0001273A 6100 0000                  		bsr.w	loc_12180
0001273E                            
0001273E                            Obj61_ChkDel:
0001273E 3028 0034                  		move.w	$34(a0),d0
00012742 0240 FF80                  		andi.w	#$FF80,d0
00012746 3238 F700                  		move.w	($FFFFF700).w,d1
0001274A 0441 0080                  		subi.w	#$80,d1
0001274E 0241 FF80                  		andi.w	#$FF80,d1
00012752 9041                       		sub.w	d1,d0
00012754 0C40 0280                  		cmpi.w	#$280,d0
00012758 6200 B5C0                  		bhi.w	DeleteObject
0001275C 6000 B580                  		bra.w	DisplaySprite
00012760                            ; ===========================================================================
00012760 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012764 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012768 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
0001276C 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012770                            ; ===========================================================================
00012770                            
00012770                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012770 4E75                       		rts	
00012772                            ; ===========================================================================
00012772                            
00012772                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012772 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012776 6600                       		bne.s	loc_120D6	; if yes, branch
00012778 0828 0003 0022             		btst	#3,$22(a0)
0001277E 6700                       		beq.s	locret_120D4
00012780 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012786                            
00012786                            locret_120D4:
00012786 4E75                       		rts	
00012788                            ; ===========================================================================
00012788                            
00012788                            loc_120D6:
00012788 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
0001278C 66F8                       		bne.s	locret_120D4	; if time remains, branch
0001278E 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012792 4228 0038                  		clr.b	$38(a0)
00012796 4E75                       		rts	
00012798                            ; ===========================================================================
00012798                            
00012798                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012798 6100 B51E                  		bsr.w	SpeedToPos
0001279C 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
000127A0 6100 0000                  		bsr.w	ObjHitFloor
000127A4 4A41                       		tst.w	d1
000127A6 6A00 0000                  		bpl.w	locret_12106
000127AA 5241                       		addq.w	#1,d1
000127AC D368 000C                  		add.w	d1,$C(a0)
000127B0 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
000127B4 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000127B8                            
000127B8                            locret_12106:
000127B8 4E75                       		rts	
000127BA                            ; ===========================================================================
000127BA                            
000127BA                            Obj61_Type04:				; XREF: Obj61_TypeIndex
000127BA 6100 B4FC                  		bsr.w	SpeedToPos
000127BE 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
000127C2 6100 0000                  		bsr.w	ObjHitCeiling
000127C6 4A41                       		tst.w	d1
000127C8 6A00 0000                  		bpl.w	locret_12126
000127CC 9368 000C                  		sub.w	d1,$C(a0)
000127D0 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
000127D4 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000127D8                            
000127D8                            locret_12126:
000127D8 4E75                       		rts	
000127DA                            ; ===========================================================================
000127DA                            
000127DA                            Obj61_Type05:				; XREF: Obj61_TypeIndex
000127DA 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
000127E0 6600                       		bne.s	locret_12138	; if not, branch
000127E2 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000127E6 4228 0038                  		clr.b	$38(a0)
000127EA                            
000127EA                            locret_12138:
000127EA 4E75                       		rts	
000127EC                            ; ===========================================================================
000127EC                            
000127EC                            Obj61_Type07:				; XREF: Obj61_TypeIndex
000127EC 3038 F646                  		move.w	($FFFFF646).w,d0
000127F0 9068 000C                  		sub.w	$C(a0),d0
000127F4 6700                       		beq.s	locret_1217E
000127F6 6400                       		bcc.s	loc_12162
000127F8 0C40 FFFE                  		cmpi.w	#-2,d0
000127FC 6C00                       		bge.s	loc_1214E
000127FE 70FE                       		moveq	#-2,d0
00012800                            
00012800                            loc_1214E:
00012800 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012804 6100 0000                  		bsr.w	ObjHitCeiling
00012808 4A41                       		tst.w	d1
0001280A 6A00 0000                  		bpl.w	locret_12160
0001280E 9368 000C                  		sub.w	d1,$C(a0)
00012812                            
00012812                            locret_12160:
00012812 4E75                       		rts	
00012814                            ; ===========================================================================
00012814                            
00012814                            loc_12162:				; XREF: Obj61_Type07
00012814 0C40 0002                  		cmpi.w	#2,d0
00012818 6F00                       		ble.s	loc_1216A
0001281A 7002                       		moveq	#2,d0
0001281C                            
0001281C                            loc_1216A:
0001281C D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012820 6100 0000                  		bsr.w	ObjHitFloor
00012824 4A41                       		tst.w	d1
00012826 6A00 0000                  		bpl.w	locret_1217E
0001282A 5241                       		addq.w	#1,d1
0001282C D368 000C                  		add.w	d1,$C(a0)
00012830                            
00012830                            locret_1217E:
00012830 4E75                       		rts	
00012832                            ; ===========================================================================
00012832                            
00012832                            loc_12180:				; XREF: Obj61_Action
00012832 4A28 0038                  		tst.b	$38(a0)
00012836 6700                       		beq.s	locret_121C0
00012838 0828 0003 0022             		btst	#3,$22(a0)
0001283E 6600                       		bne.s	loc_1219A
00012840 4A28 003E                  		tst.b	$3E(a0)
00012844 6700                       		beq.s	locret_121C0
00012846 5928 003E                  		subq.b	#4,$3E(a0)
0001284A 6000                       		bra.s	loc_121A6
0001284C                            ; ===========================================================================
0001284C                            
0001284C                            loc_1219A:
0001284C 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012852 6700                       		beq.s	locret_121C0
00012854 5828 003E                  		addq.b	#4,$3E(a0)
00012858                            
00012858                            loc_121A6:
00012858 1028 003E                  		move.b	$3E(a0),d0
0001285C 4EB9 0000 2C64             		jsr	(CalcSine).l
00012862 323C 0400                  		move.w	#$400,d1
00012866 C1C1                       		muls.w	d1,d0
00012868 4840                       		swap	d0
0001286A D068 0030                  		add.w	$30(a0),d0
0001286E 3140 000C                  		move.w	d0,$C(a0)
00012872                            
00012872                            locret_121C0:
00012872 4E75                       		rts	
00012874                            ; ===========================================================================
00012874                            ; ---------------------------------------------------------------------------
00012874                            ; Sprite mappings - blocks (LZ)
00012874                            ; ---------------------------------------------------------------------------
00012874                            Map_obj61:
00012874                            	include "_maps\obj61.asm"
00012874                            ; ---------------------------------------------------------------------------
00012874                            ; Sprite mappings - blocks (LZ)
00012874                            ; ---------------------------------------------------------------------------
00012874 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012878 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
0001287C 01                         byte_121CA:	dc.b 1
0001287D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012882 02                         byte_121D0:	dc.b 2
00012883 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012888 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
0001288D 01                         byte_121DB:	dc.b 1
0001288E F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012893 01                         byte_121E1:	dc.b 1
00012894 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
0001289A 00                         		even
0001289A 00                         		even
0001289A                            
0001289A                            ; ===========================================================================
0001289A                            ; ---------------------------------------------------------------------------
0001289A                            ; Object 62 - gargoyle head (LZ)
0001289A                            ; ---------------------------------------------------------------------------
0001289A                            
0001289A                            Obj62:					; XREF: Obj_Index
0001289A 7000                       		moveq	#0,d0
0001289C 1028 0024                  		move.b	$24(a0),d0
000128A0 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
000128A4 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
000128A8 6000 D4DC                  		bra.w	MarkObjGone
000128AC                            ; ===========================================================================
000128AC 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
000128AE 0000                       		dc.w Obj62_MakeFire-Obj62_Index
000128B0 0000                       		dc.w Obj62_FireBall-Obj62_Index
000128B2 0000                       		dc.w Obj62_AniFire-Obj62_Index
000128B4                            
000128B4 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
000128BC                            ; ===========================================================================
000128BC                            
000128BC                            Obj62_Main:				; XREF: Obj62_Index
000128BC 5428 0024                  		addq.b	#2,$24(a0)
000128C0 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000128C8 317C 42E9 0002             		move.w	#$42E9,2(a0)
000128CE 0028 0004 0001             		ori.b	#4,1(a0)
000128D4 117C 0003 0018             		move.b	#3,$18(a0)
000128DA 117C 0010 0019             		move.b	#$10,$19(a0)
000128E0 1028 0028                  		move.b	$28(a0),d0	; get object type
000128E4 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000128E8 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
000128EE 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000128F4 0228 000F 0028             		andi.b	#$F,$28(a0)
000128FA                            
000128FA                            Obj62_MakeFire:				; XREF: Obj62_Index
000128FA 5328 001E                  		subq.b	#1,$1E(a0)
000128FE 6600                       		bne.s	Obj62_NoFire
00012900 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012906 6100 B650                  		bsr.w	ChkObjOnScreen
0001290A 6600                       		bne.s	Obj62_NoFire
0001290C 6100 B856                  		bsr.w	SingleObjLoad
00012910 6600                       		bne.s	Obj62_NoFire
00012912 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012916 5829 0024                  		addq.b	#4,$24(a1)
0001291A 3368 0008 0008             		move.w	8(a0),8(a1)
00012920 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012926 1368 0001 0001             		move.b	1(a0),1(a1)
0001292C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012932                            
00012932                            Obj62_NoFire:
00012932 4E75                       		rts	
00012934                            ; ===========================================================================
00012934                            
00012934                            Obj62_FireBall:				; XREF: Obj62_Index
00012934 5428 0024                  		addq.b	#2,$24(a0)
00012938 117C 0008 0016             		move.b	#8,$16(a0)
0001293E 117C 0008 0017             		move.b	#8,$17(a0)
00012944 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
0001294C 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012952 0028 0004 0001             		ori.b	#4,1(a0)
00012958 117C 0004 0018             		move.b	#4,$18(a0)
0001295E 117C 0098 0020             		move.b	#$98,$20(a0)
00012964 117C 0008 0019             		move.b	#8,$19(a0)
0001296A 117C 0002 001A             		move.b	#2,$1A(a0)
00012970 5068 000C                  		addq.w	#8,$C(a0)
00012974 317C 0200 0010             		move.w	#$200,$10(a0)
0001297A 0828 0000 0022             		btst	#0,$22(a0)
00012980 6600                       		bne.s	Obj62_Sound
00012982 4468 0010                  		neg.w	$10(a0)
00012986                            
00012986                            Obj62_Sound:
00012986 303C 00AE                  		move.w	#$AE,d0
0001298A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012990                            
00012990                            Obj62_AniFire:				; XREF: Obj62_Index
00012990 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012994 0200 0007                  		andi.b	#7,d0
00012998 6600                       		bne.s	Obj62_StopFire
0001299A 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
000129A0                            
000129A0                            Obj62_StopFire:
000129A0 6100 B316                  		bsr.w	SpeedToPos
000129A4 0828 0000 0022             		btst	#0,$22(a0)
000129AA 6600                       		bne.s	Obj62_StopFire2
000129AC 76F8                       		moveq	#-8,d3
000129AE 6100 0000                  		bsr.w	ObjHitWallLeft
000129B2 4A41                       		tst.w	d1
000129B4 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
000129B8 4E75                       		rts	
000129BA                            ; ===========================================================================
000129BA                            
000129BA                            Obj62_StopFire2:
000129BA 7608                       		moveq	#8,d3
000129BC 6100 0000                  		bsr.w	ObjHitWallRight
000129C0 4A41                       		tst.w	d1
000129C2 6B00 B356                  		bmi.w	DeleteObject
000129C6 4E75                       		rts	
000129C8                            ; ===========================================================================
000129C8                            ; ---------------------------------------------------------------------------
000129C8                            ; Sprite mappings - gargoyle head (LZ)
000129C8                            ; ---------------------------------------------------------------------------
000129C8                            Map_obj62:
000129C8                            	include "_maps\obj62.asm"
000129C8                            ; ---------------------------------------------------------------------------
000129C8                            ; Sprite mappings - gargoyle head (LZ)
000129C8                            ; ---------------------------------------------------------------------------
000129C8 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
000129CC 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
000129D0 03                         byte_12320:	dc.b 3
000129D1 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
000129D6 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
000129DB 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
000129E0 01                         byte_12330:	dc.b 1
000129E1 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
000129E6 01                         byte_12336:	dc.b 1
000129E7 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
000129EC                            		even
000129EC                            		even
000129EC                            
000129EC                            ; ===========================================================================
000129EC                            ; ---------------------------------------------------------------------------
000129EC                            ; Object 63 - platforms	on a conveyor belt (LZ)
000129EC                            ; ---------------------------------------------------------------------------
000129EC                            
000129EC                            Obj63:					; XREF: Obj_Index
000129EC 7000                       		moveq	#0,d0
000129EE 1028 0024                  		move.b	$24(a0),d0
000129F2 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
000129F6 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
000129FA 3028 0030                  		move.w	$30(a0),d0
000129FE 0240 FF80                  		andi.w	#$FF80,d0
00012A02 3238 F700                  		move.w	($FFFFF700).w,d1
00012A06 0441 0080                  		subi.w	#$80,d1
00012A0A 0241 FF80                  		andi.w	#$FF80,d1
00012A0E 9041                       		sub.w	d1,d0
00012A10 0C40 0280                  		cmpi.w	#$280,d0
00012A14 6200                       		bhi.s	loc_1236A
00012A16                            
00012A16                            Obj63_Display:				; XREF: loc_1236A
00012A16 6000 B2C6                  		bra.w	DisplaySprite
00012A1A                            ; ===========================================================================
00012A1A                            
00012A1A                            loc_1236A:				; XREF: Obj63
00012A1A 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012A20 6600                       		bne.s	loc_12378
00012A22 0C40 FF80                  		cmpi.w	#-$80,d0
00012A26 64EE                       		bcc.s	Obj63_Display
00012A28                            
00012A28                            loc_12378:
00012A28 1028 002F                  		move.b	$2F(a0),d0
00012A2C 6A00 B2EC                  		bpl.w	DeleteObject
00012A30 0240 007F                  		andi.w	#$7F,d0
00012A34 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012A38 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012A3E 6000 B2DA                  		bra.w	DeleteObject
00012A42                            ; ===========================================================================
00012A42 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012A44 0000                       		dc.w loc_124B2-Obj63_Index
00012A46 0000                       		dc.w loc_124C2-Obj63_Index
00012A48 0000                       		dc.w loc_124DE-Obj63_Index
00012A4A                            ; ===========================================================================
00012A4A                            
00012A4A                            Obj63_Main:				; XREF: Obj63_Index
00012A4A 1028 0028                  		move.b	$28(a0),d0
00012A4E 6B00 0000                  		bmi.w	loc_12460
00012A52 5428 0024                  		addq.b	#2,$24(a0)
00012A56 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012A5E 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012A64 0028 0004 0001             		ori.b	#4,1(a0)
00012A6A 117C 0010 0019             		move.b	#$10,$19(a0)
00012A70 117C 0004 0018             		move.b	#4,$18(a0)
00012A76 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012A7C 6600                       		bne.s	loc_123E2
00012A7E 5828 0024                  		addq.b	#4,$24(a0)
00012A82 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012A88 117C 0001 0018             		move.b	#1,$18(a0)
00012A8E 6000 0000                  		bra.w	loc_124DE
00012A92                            ; ===========================================================================
00012A92                            
00012A92                            loc_123E2:
00012A92 117C 0004 001A             		move.b	#4,$1A(a0)
00012A98 7000                       		moveq	#0,d0
00012A9A 1028 0028                  		move.b	$28(a0),d0
00012A9E 3200                       		move.w	d0,d1
00012AA0 E648                       		lsr.w	#3,d0
00012AA2 0240 001E                  		andi.w	#$1E,d0
00012AA6 45FA 0000                  		lea	Obj63_Data(pc),a2
00012AAA D4F2 0000                  		adda.w	(a2,d0.w),a2
00012AAE 315A 0038                  		move.w	(a2)+,$38(a0)
00012AB2 315A 0030                  		move.w	(a2)+,$30(a0)
00012AB6 214A 003C                  		move.l	a2,$3C(a0)
00012ABA 0241 000F                  		andi.w	#$F,d1
00012ABE E549                       		lsl.w	#2,d1
00012AC0 1141 0038                  		move.b	d1,$38(a0)
00012AC4 117C 0004 003A             		move.b	#4,$3A(a0)
00012ACA 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012ACE 6700                       		beq.s	loc_1244C
00012AD0 117C 0001 003B             		move.b	#1,$3B(a0)
00012AD6 4428 003A                  		neg.b	$3A(a0)
00012ADA 7200                       		moveq	#0,d1
00012ADC 1228 0038                  		move.b	$38(a0),d1
00012AE0 D228 003A                  		add.b	$3A(a0),d1
00012AE4 B228 0039                  		cmp.b	$39(a0),d1
00012AE8 6500                       		bcs.s	loc_12448
00012AEA 1001                       		move.b	d1,d0
00012AEC 7200                       		moveq	#0,d1
00012AEE 4A00                       		tst.b	d0
00012AF0 6A00                       		bpl.s	loc_12448
00012AF2 1228 0039                  		move.b	$39(a0),d1
00012AF6 5901                       		subq.b	#4,d1
00012AF8                            
00012AF8                            loc_12448:
00012AF8 1141 0038                  		move.b	d1,$38(a0)
00012AFC                            
00012AFC                            loc_1244C:
00012AFC 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012B02 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012B08 6100 0000                  		bsr.w	Obj63_ChangeDir
00012B0C 6000 0000                  		bra.w	loc_124B2
00012B10                            ; ===========================================================================
00012B10                            
00012B10                            loc_12460:				; XREF: Obj63_Main
00012B10 1140 002F                  		move.b	d0,$2F(a0)
00012B14 0240 007F                  		andi.w	#$7F,d0
00012B18 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012B1C 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012B22 6600 B1F6                  		bne.w	DeleteObject
00012B26 D040                       		add.w	d0,d0
00012B28 0240 001E                  		andi.w	#$1E,d0
00012B2C 0640 0070                  		addi.w	#$70,d0
00012B30 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012B36 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012B3A 321A                       		move.w	(a2)+,d1
00012B3C 2248                       		movea.l	a0,a1
00012B3E 6000                       		bra.s	Obj63_MakePtfms
00012B40                            ; ===========================================================================
00012B40                            
00012B40                            Obj63_Loop:
00012B40 6100 B622                  		bsr.w	SingleObjLoad
00012B44 6600                       		bne.s	loc_124AA
00012B46                            
00012B46                            Obj63_MakePtfms:			; XREF: loc_12460
00012B46 12BC 0063                  		move.b	#$63,0(a1)
00012B4A 335A 0008                  		move.w	(a2)+,8(a1)
00012B4E 335A 000C                  		move.w	(a2)+,$C(a1)
00012B52 301A                       		move.w	(a2)+,d0
00012B54 1340 0028                  		move.b	d0,$28(a1)
00012B58                            
00012B58                            loc_124AA:
00012B58 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012B5C                            
00012B5C 588F                       		addq.l	#4,sp
00012B5E 4E75                       		rts	
00012B60                            ; ===========================================================================
00012B60                            
00012B60                            loc_124B2:				; XREF: Obj63_Index
00012B60 7200                       		moveq	#0,d1
00012B62 1228 0019                  		move.b	$19(a0),d1
00012B66 4EB9 0000 79FA             		jsr	(PlatformObject).l
00012B6C 6000 0000                  		bra.w	sub_12502
00012B70                            ; ===========================================================================
00012B70                            
00012B70                            loc_124C2:				; XREF: Obj63_Index
00012B70 7200                       		moveq	#0,d1
00012B72 1228 0019                  		move.b	$19(a0),d1
00012B76 4EB9 0000 7B6E             		jsr	(ExitPlatform).l
00012B7C 3F28 0008                  		move.w	8(a0),-(sp)
00012B80 6100 0000                  		bsr.w	sub_12502
00012B84 341F                       		move.w	(sp)+,d2
00012B86 4EF9 0000 80D8             		jmp	(MvSonicOnPtfm2).l
00012B8C                            ; ===========================================================================
00012B8C                            
00012B8C                            loc_124DE:				; XREF: Obj63_Index
00012B8C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012B90 0240 0003                  		andi.w	#3,d0
00012B94 6600                       		bne.s	loc_124FC
00012B96 7201                       		moveq	#1,d1
00012B98 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012B9C 6700                       		beq.s	loc_124F2
00012B9E 4401                       		neg.b	d1
00012BA0                            
00012BA0                            loc_124F2:
00012BA0 D328 001A                  		add.b	d1,$1A(a0)
00012BA4 0228 0003 001A             		andi.b	#3,$1A(a0)
00012BAA                            
00012BAA                            loc_124FC:
00012BAA 588F                       		addq.l	#4,sp
00012BAC 6000 D1D8                  		bra.w	MarkObjGone
00012BB0                            
00012BB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012BB0                            
00012BB0                            
00012BB0                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012BB0 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012BB4 6700                       		beq.s	loc_12520
00012BB6 4A28 003B                  		tst.b	$3B(a0)
00012BBA 6600                       		bne.s	loc_12520
00012BBC 117C 0001 003B             		move.b	#1,$3B(a0)
00012BC2 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012BC8 4428 003A                  		neg.b	$3A(a0)
00012BCC 6000                       		bra.s	loc_12534
00012BCE                            ; ===========================================================================
00012BCE                            
00012BCE                            loc_12520:
00012BCE 3028 0008                  		move.w	8(a0),d0
00012BD2 B068 0034                  		cmp.w	$34(a0),d0
00012BD6 6600                       		bne.s	loc_1256A
00012BD8 3028 000C                  		move.w	$C(a0),d0
00012BDC B068 0036                  		cmp.w	$36(a0),d0
00012BE0 6600                       		bne.s	loc_1256A
00012BE2                            
00012BE2                            loc_12534:
00012BE2 7200                       		moveq	#0,d1
00012BE4 1228 0038                  		move.b	$38(a0),d1
00012BE8 D228 003A                  		add.b	$3A(a0),d1
00012BEC B228 0039                  		cmp.b	$39(a0),d1
00012BF0 6500                       		bcs.s	loc_12552
00012BF2 1001                       		move.b	d1,d0
00012BF4 7200                       		moveq	#0,d1
00012BF6 4A00                       		tst.b	d0
00012BF8 6A00                       		bpl.s	loc_12552
00012BFA 1228 0039                  		move.b	$39(a0),d1
00012BFE 5901                       		subq.b	#4,d1
00012C00                            
00012C00                            loc_12552:
00012C00 1141 0038                  		move.b	d1,$38(a0)
00012C04 2268 003C                  		movea.l	$3C(a0),a1
00012C08 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012C0E 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012C14 6100 0000                  		bsr.w	Obj63_ChangeDir
00012C18                            
00012C18                            loc_1256A:
00012C18 6100 B09E                  		bsr.w	SpeedToPos
00012C1C 4E75                       		rts	
00012C1E                            ; End of function sub_12502
00012C1E                            
00012C1E                            
00012C1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012C1E                            
00012C1E                            
00012C1E                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012C1E 7000                       		moveq	#0,d0
00012C20 343C FF00                  		move.w	#-$100,d2
00012C24 3028 0008                  		move.w	8(a0),d0
00012C28 9068 0034                  		sub.w	$34(a0),d0
00012C2C 6400                       		bcc.s	loc_12584
00012C2E 4440                       		neg.w	d0
00012C30 4442                       		neg.w	d2
00012C32                            
00012C32                            loc_12584:
00012C32 7200                       		moveq	#0,d1
00012C34 363C FF00                  		move.w	#-$100,d3
00012C38 3228 000C                  		move.w	$C(a0),d1
00012C3C 9268 0036                  		sub.w	$36(a0),d1
00012C40 6400                       		bcc.s	loc_12598
00012C42 4441                       		neg.w	d1
00012C44 4443                       		neg.w	d3
00012C46                            
00012C46                            loc_12598:
00012C46 B240                       		cmp.w	d0,d1
00012C48 6500                       		bcs.s	loc_125C2
00012C4A 3028 0008                  		move.w	8(a0),d0
00012C4E 9068 0034                  		sub.w	$34(a0),d0
00012C52 6700                       		beq.s	loc_125AE
00012C54 48C0                       		ext.l	d0
00012C56 E180                       		asl.l	#8,d0
00012C58 81C1                       		divs.w	d1,d0
00012C5A 4440                       		neg.w	d0
00012C5C                            
00012C5C                            loc_125AE:
00012C5C 3140 0010                  		move.w	d0,$10(a0)
00012C60 3143 0012                  		move.w	d3,$12(a0)
00012C64 4840                       		swap	d0
00012C66 3140 000A                  		move.w	d0,$A(a0)
00012C6A 4268 000E                  		clr.w	$E(a0)
00012C6E 4E75                       		rts	
00012C70                            ; ===========================================================================
00012C70                            
00012C70                            loc_125C2:				; XREF: Obj63_ChangeDir
00012C70 3228 000C                  		move.w	$C(a0),d1
00012C74 9268 0036                  		sub.w	$36(a0),d1
00012C78 6700                       		beq.s	loc_125D4
00012C7A 48C1                       		ext.l	d1
00012C7C E181                       		asl.l	#8,d1
00012C7E 83C0                       		divs.w	d0,d1
00012C80 4441                       		neg.w	d1
00012C82                            
00012C82                            loc_125D4:
00012C82 3141 0012                  		move.w	d1,$12(a0)
00012C86 3142 0010                  		move.w	d2,$10(a0)
00012C8A 4841                       		swap	d1
00012C8C 3141 000E                  		move.w	d1,$E(a0)
00012C90 4268 000A                  		clr.w	$A(a0)
00012C94 4E75                       		rts	
00012C96                            ; End of function Obj63_ChangeDir
00012C96                            
00012C96                            ; ===========================================================================
00012C96 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012C98 0000                       		dc.w word_12610-Obj63_Data
00012C9A 0000                       		dc.w word_12628-Obj63_Data
00012C9C 0000                       		dc.w word_1263C-Obj63_Data
00012C9E 0000                       		dc.w word_12650-Obj63_Data
00012CA0 0000                       		dc.w word_12668-Obj63_Data
00012CA2 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012CB2 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012CBE 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012CCE 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012CD6 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012CEA 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012CFE 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012D16 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012D2A                            
00012D2A                            ; ---------------------------------------------------------------------------
00012D2A                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012D2A                            ; ---------------------------------------------------------------------------
00012D2A                            Map_obj63:
00012D2A                            	include "_maps\obj63.asm"
00012D2A                            ; ---------------------------------------------------------------------------
00012D2A                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012D2A                            ; ---------------------------------------------------------------------------
00012D2A 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012D2E 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012D32 0000                       		dc.w byte_1269E-Map_obj63
00012D34 01                         byte_12686:	dc.b 1
00012D35 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012D3A 01                         byte_1268C:	dc.b 1
00012D3B F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012D40 01                         byte_12692:	dc.b 1
00012D41 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012D46 01                         byte_12698:	dc.b 1
00012D47 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012D4C 01                         byte_1269E:	dc.b 1
00012D4D F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012D52                            		even
00012D52                            		even
00012D52                            
00012D52                            ; ===========================================================================
00012D52                            ; ---------------------------------------------------------------------------
00012D52                            ; Object 64 - bubbles (LZ)
00012D52                            ; ---------------------------------------------------------------------------
00012D52                            
00012D52                            Obj64:					; XREF: Obj_Index
00012D52 7000                       		moveq	#0,d0
00012D54 1028 0024                  		move.b	$24(a0),d0
00012D58 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012D5C 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012D60                            ; ===========================================================================
00012D60 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012D62 0000                       		dc.w Obj64_Animate-Obj64_Index
00012D64 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012D66 0000                       		dc.w Obj64_Display2-Obj64_Index
00012D68 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012D6A 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012D6C                            ; ===========================================================================
00012D6C                            
00012D6C                            Obj64_Main:				; XREF: Obj64_Index
00012D6C 5428 0024                  		addq.b	#2,$24(a0)
00012D70 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012D78 317C 8348 0002             		move.w	#$8348,2(a0)
00012D7E 117C 0084 0001             		move.b	#$84,1(a0)
00012D84 117C 0010 0019             		move.b	#$10,$19(a0)
00012D8A 117C 0001 0018             		move.b	#1,$18(a0)
00012D90 1028 0028                  		move.b	$28(a0),d0	; get object type
00012D94 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012D96 5028 0024                  		addq.b	#8,$24(a0)
00012D9A 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012D9E 1140 0032                  		move.b	d0,$32(a0)
00012DA2 1140 0033                  		move.b	d0,$33(a0)
00012DA6 117C 0006 001C             		move.b	#6,$1C(a0)
00012DAC 6000 0000                  		bra.w	Obj64_BblMaker
00012DB0                            ; ===========================================================================
00012DB0                            
00012DB0                            Obj64_Bubble:				; XREF: Obj64_Main
00012DB0 1140 001C                  		move.b	d0,$1C(a0)
00012DB4 3168 0008 0030             		move.w	8(a0),$30(a0)
00012DBA 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012DC0 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012DC6 1140 0026                  		move.b	d0,$26(a0)
00012DCA                            
00012DCA                            Obj64_Animate:				; XREF: Obj64_Index
00012DCA 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012DD0 4EB9 0000 AD9E             		jsr	AnimateSprite
00012DD6 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012DDC 6600                       		bne.s	Obj64_ChkWater
00012DDE 117C 0001 002E             		move.b	#1,$2E(a0)
00012DE4                            
00012DE4                            Obj64_ChkWater:				; XREF: Obj64_Index
00012DE4 3038 F646                  		move.w	($FFFFF646).w,d0
00012DE8 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012DEC 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012DEE                            
00012DEE                            Obj64_Burst:				; XREF: Obj64_Wobble
00012DEE 117C 0006 0024             		move.b	#6,$24(a0)
00012DF4 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012DF8 6000 0000                  		bra.w	Obj64_Display2
00012DFC                            ; ===========================================================================
00012DFC                            
00012DFC                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012DFC 1028 0026                  		move.b	$26(a0),d0
00012E00 5228 0026                  		addq.b	#1,$26(a0)
00012E04 0240 007F                  		andi.w	#$7F,d0
00012E08 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012E0E 1031 0000                  		move.b	(a1,d0.w),d0
00012E12 4880                       		ext.w	d0
00012E14 D068 0030                  		add.w	$30(a0),d0
00012E18 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012E1C 4A28 002E                  		tst.b	$2E(a0)
00012E20 6700                       		beq.s	Obj64_Display
00012E22 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012E26 6700                       		beq.s	Obj64_Display	; if not, branch
00012E28                            
00012E28 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012E2C 303C 00AD                  		move.w	#$AD,d0
00012E30 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012E36 43F8 D000                  		lea	($FFFFD000).w,a1
00012E3A 4269 0010                  		clr.w	$10(a1)
00012E3E 4269 0012                  		clr.w	$12(a1)
00012E42 4269 0014                  		clr.w	$14(a1)
00012E46 137C 0015 001C             		move.b	#$15,$1C(a1)
00012E4C 337C 0023 003E             		move.w	#$23,$3E(a1)
00012E52 137C 0000 003C             		move.b	#0,$3C(a1)
00012E58 08A9 0005 0022             		bclr	#5,$22(a1)
00012E5E 08A9 0004 0022             		bclr	#4,$22(a1)
00012E64 0829 0002 0022             		btst	#2,$22(a1)
00012E6A 6700 FF82                  		beq.w	Obj64_Burst
00012E6E 08A9 0002 0022             		bclr	#2,$22(a1)
00012E74 137C 0013 0016             		move.b	#$13,$16(a1)
00012E7A 137C 0009 0017             		move.b	#9,$17(a1)
00012E80 5B69 000C                  		subq.w	#5,$C(a1)
00012E84 6000 FF68                  		bra.w	Obj64_Burst
00012E88                            ; ===========================================================================
00012E88                            
00012E88                            Obj64_Display:				; XREF: Obj64_Wobble
00012E88 6100 AE2E                  		bsr.w	SpeedToPos
00012E8C 4A28 0001                  		tst.b	1(a0)
00012E90 6A00                       		bpl.s	Obj64_Delete
00012E92 4EFA AE4A                  		jmp	DisplaySprite
00012E96                            ; ===========================================================================
00012E96                            
00012E96                            Obj64_Delete:
00012E96 4EFA AE82                  		jmp	DeleteObject
00012E9A                            ; ===========================================================================
00012E9A                            
00012E9A                            Obj64_Display2:				; XREF: Obj64_Index
00012E9A 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012EA0 4EB9 0000 AD9E             		jsr	AnimateSprite
00012EA6 4A28 0001                  		tst.b	1(a0)
00012EAA 6A00                       		bpl.s	Obj64_Delete2
00012EAC 4EFA AE30                  		jmp	DisplaySprite
00012EB0                            ; ===========================================================================
00012EB0                            
00012EB0                            Obj64_Delete2:
00012EB0 4EFA AE68                  		jmp	DeleteObject
00012EB4                            ; ===========================================================================
00012EB4                            
00012EB4                            Obj64_Delete3:				; XREF: Obj64_Index
00012EB4 6000 AE64                  		bra.w	DeleteObject
00012EB8                            ; ===========================================================================
00012EB8                            
00012EB8                            Obj64_BblMaker:				; XREF: Obj64_Index
00012EB8 4A68 0036                  		tst.w	$36(a0)
00012EBC 6600                       		bne.s	loc_12874
00012EBE 3038 F646                  		move.w	($FFFFF646).w,d0
00012EC2 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012EC6 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012ECA 4A28 0001                  		tst.b	1(a0)
00012ECE 6A00 0000                  		bpl.w	Obj64_ChkDel
00012ED2 5368 0038                  		subq.w	#1,$38(a0)
00012ED6 6A00 0000                  		bpl.w	loc_12914
00012EDA 317C 0001 0036             		move.w	#1,$36(a0)
00012EE0                            
00012EE0                            loc_1283A:
00012EE0 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012EE6 3200                       		move.w	d0,d1
00012EE8 0240 0007                  		andi.w	#7,d0
00012EEC 0C40 0006                  		cmpi.w	#6,d0
00012EF0 64EE                       		bcc.s	loc_1283A
00012EF2                            
00012EF2 1140 0034                  		move.b	d0,$34(a0)
00012EF6 0241 000C                  		andi.w	#$C,d1
00012EFA 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00012F00 D2C1                       		adda.w	d1,a1
00012F02 2149 003C                  		move.l	a1,$3C(a0)
00012F06 5328 0032                  		subq.b	#1,$32(a0)
00012F0A 6A00                       		bpl.s	loc_12872
00012F0C 1168 0033 0032             		move.b	$33(a0),$32(a0)
00012F12 08E8 0007 0036             		bset	#7,$36(a0)
00012F18                            
00012F18                            loc_12872:
00012F18 6000                       		bra.s	loc_1287C
00012F1A                            ; ===========================================================================
00012F1A                            
00012F1A                            loc_12874:				; XREF: Obj64_BblMaker
00012F1A 5368 0038                  		subq.w	#1,$38(a0)
00012F1E 6A00 0000                  		bpl.w	loc_12914
00012F22                            
00012F22                            loc_1287C:
00012F22 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012F28 0240 001F                  		andi.w	#$1F,d0
00012F2C 3140 0038                  		move.w	d0,$38(a0)
00012F30 6100 B232                  		bsr.w	SingleObjLoad
00012F34 6600                       		bne.s	loc_128F8
00012F36 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00012F3A 3368 0008 0008             		move.w	8(a0),8(a1)
00012F40 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012F46 0240 000F                  		andi.w	#$F,d0
00012F4A 5140                       		subq.w	#8,d0
00012F4C D169 0008                  		add.w	d0,8(a1)
00012F50 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012F56 7000                       		moveq	#0,d0
00012F58 1028 0034                  		move.b	$34(a0),d0
00012F5C 2468 003C                  		movea.l	$3C(a0),a2
00012F60 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00012F66 0828 0007 0036             		btst	#7,$36(a0)
00012F6C 6700                       		beq.s	loc_128F8
00012F6E 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012F74 0240 0003                  		andi.w	#3,d0
00012F78 6600                       		bne.s	loc_128E4
00012F7A 08E8 0006 0036             		bset	#6,$36(a0)
00012F80 6600                       		bne.s	loc_128F8
00012F82 137C 0002 0028             		move.b	#2,$28(a1)
00012F88                            
00012F88                            loc_128E4:
00012F88 4A28 0034                  		tst.b	$34(a0)
00012F8C 6600                       		bne.s	loc_128F8
00012F8E 08E8 0006 0036             		bset	#6,$36(a0)
00012F94 6600                       		bne.s	loc_128F8
00012F96 137C 0002 0028             		move.b	#2,$28(a1)
00012F9C                            
00012F9C                            loc_128F8:
00012F9C 5328 0034                  		subq.b	#1,$34(a0)
00012FA0 6A00                       		bpl.s	loc_12914
00012FA2 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00012FA8 0240 007F                  		andi.w	#$7F,d0
00012FAC 0640 0080                  		addi.w	#$80,d0
00012FB0 D168 0038                  		add.w	d0,$38(a0)
00012FB4 4268 0036                  		clr.w	$36(a0)
00012FB8                            
00012FB8                            loc_12914:
00012FB8 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012FBE 4EB9 0000 AD9E             		jsr	AnimateSprite
00012FC4                            
00012FC4                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00012FC4 3028 0008                  		move.w	8(a0),d0
00012FC8 0240 FF80                  		andi.w	#$FF80,d0
00012FCC 3238 F700                  		move.w	($FFFFF700).w,d1
00012FD0 0441 0080                  		subi.w	#$80,d1
00012FD4 0241 FF80                  		andi.w	#$FF80,d1
00012FD8 9041                       		sub.w	d1,d0
00012FDA 0C40 0280                  		cmpi.w	#$280,d0
00012FDE 6200 AD3A                  		bhi.w	DeleteObject
00012FE2 3038 F646                  		move.w	($FFFFF646).w,d0
00012FE6 B068 000C                  		cmp.w	$C(a0),d0
00012FEA 6500 ACF2                  		bcs.w	DisplaySprite
00012FEE 4E75                       		rts	
00012FF0                            ; ===========================================================================
00012FF0                            ; bubble production sequence
00012FF0                            
00012FF0                            ; 0 = small bubble, 1 =	large bubble
00012FF0                            
00012FF0 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00013002                            
00013002                            ; ===========================================================================
00013002                            
00013002                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00013002 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013006 6B00                       		bmi.s	loc_12998
00013008 43F8 D000                  		lea	($FFFFD000).w,a1
0001300C 3029 0008                  		move.w	8(a1),d0
00013010 3228 0008                  		move.w	8(a0),d1
00013014 0441 0010                  		subi.w	#$10,d1
00013018 B240                       		cmp.w	d0,d1
0001301A 6400                       		bcc.s	loc_12998
0001301C 0641 0020                  		addi.w	#$20,d1
00013020 B240                       		cmp.w	d0,d1
00013022 6500                       		bcs.s	loc_12998
00013024 3029 000C                  		move.w	$C(a1),d0
00013028 3228 000C                  		move.w	$C(a0),d1
0001302C B240                       		cmp.w	d0,d1
0001302E 6400                       		bcc.s	loc_12998
00013030 0641 0010                  		addi.w	#$10,d1
00013034 B240                       		cmp.w	d0,d1
00013036 6500                       		bcs.s	loc_12998
00013038 7001                       		moveq	#1,d0
0001303A 4E75                       		rts	
0001303C                            ; ===========================================================================
0001303C                            
0001303C                            loc_12998:
0001303C 7000                       		moveq	#0,d0
0001303E 4E75                       		rts	
00013040                            ; ===========================================================================
00013040                            Ani_obj64:
00013040                            	include "_anim\obj64.asm"
00013040                            ; ---------------------------------------------------------------------------
00013040                            ; Animation script - bubbles (LZ)
00013040                            ; ---------------------------------------------------------------------------
00013040 0000                       		dc.w byte_129AA-Ani_obj64
00013042 0000                       		dc.w byte_129B0-Ani_obj64
00013044 0000                       		dc.w byte_129B6-Ani_obj64
00013046 0000                       		dc.w byte_129BE-Ani_obj64
00013048 0000                       		dc.w byte_129BE-Ani_obj64
0001304A 0000                       		dc.w byte_129C0-Ani_obj64
0001304C 0000                       		dc.w byte_129C6-Ani_obj64
0001304E 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00013054 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
0001305A 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00013062 04FC                       byte_129BE:	dc.b 4,	$FC
00013064 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
0001306A 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00013070 00                         		even
00013070 00                         		even
00013070                            
00013070                            ; ---------------------------------------------------------------------------
00013070                            ; Sprite mappings - bubbles (LZ)
00013070                            ; ---------------------------------------------------------------------------
00013070                            Map_obj64:
00013070                            	include "_maps\obj64.asm"
00013070                            ; ---------------------------------------------------------------------------
00013070                            ; Sprite mappings - bubbles (LZ)
00013070                            ; ---------------------------------------------------------------------------
00013070 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00013074 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00013078 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
0001307C 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00013080 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00013084 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00013088 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
0001308C 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00013090 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00013094 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00013098 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
0001309C 0000                       		dc.w byte_12A9C-Map_obj64
0001309E 01                         byte_129FA:	dc.b 1
0001309F FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
000130A4 01                         byte_12A00:	dc.b 1
000130A5 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
000130AA 01                         byte_12A06:	dc.b 1
000130AB FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
000130B0 01                         byte_12A0C:	dc.b 1
000130B1 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
000130B6 01                         byte_12A12:	dc.b 1
000130B7 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
000130BC 01                         byte_12A18:	dc.b 1
000130BD F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
000130C2 01                         byte_12A1E:	dc.b 1
000130C3 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
000130C8 04                         byte_12A24:	dc.b 4
000130C9 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
000130CE F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
000130D3 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
000130D8 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
000130DD 04                         byte_12A39:	dc.b 4
000130DE F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
000130E3 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
000130E8 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
000130ED 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
000130F2 01                         byte_12A4E:	dc.b 1
000130F3 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
000130F8 01                         byte_12A54:	dc.b 1
000130F9 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
000130FE 01                         byte_12A5A:	dc.b 1
000130FF F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00013104 01                         byte_12A60:	dc.b 1
00013105 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
0001310A 01                         byte_12A66:	dc.b 1
0001310B F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00013110 01                         byte_12A6C:	dc.b 1
00013111 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00013116 01                         byte_12A72:	dc.b 1
00013117 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
0001311C 01                         byte_12A78:	dc.b 1
0001311D F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00013122 01                         byte_12A7E:	dc.b 1
00013123 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00013128 01                         byte_12A84:	dc.b 1
00013129 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
0001312E 01                         byte_12A8A:	dc.b 1
0001312F F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00013134 01                         byte_12A90:	dc.b 1
00013135 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
0001313A 01                         byte_12A96:	dc.b 1
0001313B F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00013140 00                         byte_12A9C:	dc.b 0
00013142 00                         		even
00013142 00                         		even
00013142                            
00013142                            ; ===========================================================================
00013142                            ; ---------------------------------------------------------------------------
00013142                            ; Object 65 - waterfalls (LZ)
00013142                            ; ---------------------------------------------------------------------------
00013142                            
00013142                            Obj65:					; XREF: Obj_Index
00013142 7000                       		moveq	#0,d0
00013144 1028 0024                  		move.b	$24(a0),d0
00013148 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
0001314C 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00013150                            ; ===========================================================================
00013150 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00013152 0000                       		dc.w Obj65_Animate-Obj65_Index
00013154 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00013156 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00013158 0000                       		dc.w loc_12B36-Obj65_Index
0001315A                            ; ===========================================================================
0001315A                            
0001315A                            Obj65_Main:				; XREF: Obj65_Index
0001315A 5828 0024                  		addq.b	#4,$24(a0)
0001315E 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00013166 317C 4259 0002             		move.w	#$4259,2(a0)
0001316C 0028 0004 0001             		ori.b	#4,1(a0)
00013172 117C 0018 0019             		move.b	#$18,$19(a0)
00013178 117C 0001 0018             		move.b	#1,$18(a0)
0001317E 1028 0028                  		move.b	$28(a0),d0	; get object type
00013182 6A00                       		bpl.s	loc_12AE6
00013184 08E8 0007 0002             		bset	#7,2(a0)
0001318A                            
0001318A                            loc_12AE6:
0001318A 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
0001318E 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00013192 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00013196 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00013198 4228 0018                  		clr.b	$18(a0)
0001319C 5528 0024                  		subq.b	#2,$24(a0)
000131A0 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
000131A6 6700                       		beq.s	loc_12B0A	; if not, branch
000131A8 117C 0006 0024             		move.b	#6,$24(a0)
000131AE                            
000131AE                            loc_12B0A:
000131AE 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
000131B4 6700                       		beq.s	Obj65_Animate	; if not, branch
000131B6 117C 0008 0024             		move.b	#8,$24(a0)
000131BC                            
000131BC                            Obj65_Animate:				; XREF: Obj65_Index
000131BC 43F9 0000 0000             		lea	(Ani_obj65).l,a1
000131C2 4EB9 0000 AD9E             		jsr	AnimateSprite
000131C8                            
000131C8                            Obj65_ChkDel:				; XREF: Obj65_Index
000131C8 6000 CBBC                  		bra.w	MarkObjGone
000131CC                            ; ===========================================================================
000131CC                            
000131CC                            Obj65_FixHeight:			; XREF: Obj65_Index
000131CC 3038 F646                  		move.w	($FFFFF646).w,d0
000131D0 0440 0010                  		subi.w	#$10,d0
000131D4 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
000131D8 60E2                       		bra.s	Obj65_Animate
000131DA                            ; ===========================================================================
000131DA                            
000131DA                            loc_12B36:				; XREF: Obj65_Index
000131DA 08A8 0007 0002             		bclr	#7,2(a0)
000131E0 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
000131E6 6600                       		bne.s	Obj65_Animate2
000131E8 08E8 0007 0002             		bset	#7,2(a0)
000131EE                            
000131EE                            Obj65_Animate2:
000131EE 60CC                       		bra.s	Obj65_Animate
000131F0                            ; ===========================================================================
000131F0                            Ani_obj65:
000131F0                            	include "_anim\obj65.asm"
000131F0                            ; ---------------------------------------------------------------------------
000131F0                            ; Animation script - waterfall (LZ)
000131F0                            ; ---------------------------------------------------------------------------
000131F0 0000                       		dc.w byte_12B4E-Ani_obj65
000131F2 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
000131F8 00                         		even
000131F8 00                         		even
000131F8                            
000131F8                            ; ---------------------------------------------------------------------------
000131F8                            ; Sprite mappings - waterfalls (LZ)
000131F8                            ; ---------------------------------------------------------------------------
000131F8                            Map_obj65:
000131F8                            	include "_maps\obj65.asm"
000131F8                            ; ---------------------------------------------------------------------------
000131F8                            ; Sprite mappings - waterfalls (LZ)
000131F8                            ; ---------------------------------------------------------------------------
000131F8 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
000131FC 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013200 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013204 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00013208 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
0001320C 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00013210 01                         byte_12B6C:	dc.b 1
00013211 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00013216 02                         byte_12B72:	dc.b 2
00013217 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
0001321C 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00013221 02                         byte_12B7D:	dc.b 2
00013222 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013227 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001322C 01                         byte_12B88:	dc.b 1
0001322D F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00013232 02                         byte_12B8E:	dc.b 2
00013233 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013238 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001323D 01                         byte_12B99:	dc.b 1
0001323E F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00013243 01                         byte_12B9F:	dc.b 1
00013244 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00013249 01                         byte_12BA5:	dc.b 1
0001324A F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
0001324F 02                         byte_12BAB:	dc.b 2
00013250 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00013255 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
0001325A 02                         byte_12BB6:	dc.b 2
0001325B F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00013260 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00013265 02                         byte_12BC1:	dc.b 2
00013266 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
0001326B F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00013270 02                         byte_12BCC:	dc.b 2
00013271 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00013276 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
0001327C 00                         		even
0001327C 00                         		even
0001327C                            
0001327C                            ; ===========================================================================
0001327C                            ; ---------------------------------------------------------------------------
0001327C                            ; Object 01 - Sonic
0001327C                            ; ---------------------------------------------------------------------------
0001327C                            
0001327C                            Obj01:					; XREF: Obj_Index
0001327C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00013280 6700                       		beq.s	Obj01_Normal	; if not, branch
00013282 4EF9 0000 0000             		jmp	DebugMode
00013288                            ; ===========================================================================
00013288                            
00013288                            Obj01_Normal:
00013288 7000                       		moveq	#0,d0
0001328A 1028 0024                  		move.b	$24(a0),d0
0001328E 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00013292 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00013296                            ; ===========================================================================
00013296 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00013298 0000                       		dc.w Obj01_Control-Obj01_Index
0001329A 0000                       		dc.w Obj01_Hurt-Obj01_Index
0001329C 0000                       		dc.w Obj01_Death-Obj01_Index
0001329E 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
000132A0                            ; ===========================================================================
000132A0                            
000132A0                            Player_Maps:
000132A0 0000 0000                  	dc.l	Map_Sonic
000132A4 0000 0000                  	dc.l	Map_Sonic ; gronic
000132A8                            	; insert player mapping here
000132A8                            	
000132A8                            Obj01_Main:				; XREF: Obj01_Index
000132A8 5428 0024                  		addq.b	#2,$24(a0)
000132AC 117C 0013 0016             		move.b	#$13,$16(a0)
000132B2 117C 0009 0017             		move.b	#9,$17(a0)
000132B8                            		
000132B8 7000                       		moveq	#0,d0
000132BA 1038 FFE8                  		move.b	(v_character),d0
000132BE E548                       		lsl.w	#2,d0
000132C0 43FA FFDE                  		lea 	Player_Maps(pc),a1
000132C4 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
000132CA                            		
000132CA 317C 0780 0002             		move.w	#$780,2(a0)
000132D0 117C 0002 0018             		move.b	#2,$18(a0)
000132D6 117C 0018 0019             		move.b	#$18,$19(a0)
000132DC 117C 0004 0001             		move.b	#4,1(a0)
000132E2 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
000132E8 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
000132EE 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
000132F4                            
000132F4                            Obj01_Control:				; XREF: Obj01_Index
000132F4 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
000132F8 6700                       		beq.s	loc_12C58	; if not, branch
000132FA 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013300 6700                       		beq.s	loc_12C58	; if not, branch
00013302 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00013308 4238 F7CC                  		clr.b	($FFFFF7CC).w
0001330C 4E75                       		rts	
0001330E                            ; ===========================================================================
0001330E                            
0001330E                            loc_12C58:
0001330E 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00013312 6600                       		bne.s	loc_12C64	; if yes, branch
00013314 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
0001331A                            
0001331A                            loc_12C64:
0001331A 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00013320 6600                       		bne.s	loc_12C7E	; if yes, branch
00013322 7000                       		moveq	#0,d0
00013324 1028 0022                  		move.b	$22(a0),d0
00013328 0240 0006                  		andi.w	#6,d0
0001332C 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00013330 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00013334                            
00013334                            loc_12C7E:
00013334 6100                       		bsr.s	Sonic_Display
00013336 6100 0000                  		bsr.w	Sonic_RecordPos
0001333A 6100 0000                  		bsr.w	Sonic_Water
0001333E 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00013344 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
0001334A 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001334E 6700                       		beq.s	loc_12CA6
00013350 4A28 001C                  		tst.b	$1C(a0)
00013354 6600                       		bne.s	loc_12CA6
00013356 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
0001335C                            
0001335C                            loc_12CA6:
0001335C 6100 0000                  		bsr.w	Sonic_Animate
00013360 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013364 6B00                       		bmi.s	loc_12CB6
00013366 4EB9 0000 0000             		jsr	TouchResponse
0001336C                            
0001336C                            loc_12CB6:
0001336C 6100 0000                  		bsr.w	Sonic_Loops
00013370 6100 0000                  		bsr.w	LoadSonicDynPLC
00013374 4E75                       		rts	
00013376                            ; ===========================================================================
00013376 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00013378 0000                       		dc.w Obj01_MdJump-Obj01_Modes
0001337A 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
0001337C 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
0001337E                            ; ---------------------------------------------------------------------------
0001337E                            ; Music	to play	after invincibility wears off
0001337E                            ; ---------------------------------------------------------------------------
0001337E                            ; ===========================================================================
0001337E                            
0001337E                            Sonic_Display:				; XREF: loc_12C7E
0001337E 3028 0030                  		move.w	$30(a0),d0
00013382 6700                       		beq.s	Obj01_Display
00013384 5368 0030                  		subq.w	#1,$30(a0)
00013388 E648                       		lsr.w	#3,d0
0001338A 6400                       		bcc.s	Obj01_ChkInvin
0001338C                            
0001338C                            Obj01_Display:
0001338C 4EBA A950                  		jsr	DisplaySprite
00013390                            
00013390                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
00013390                             
00013390                            Obj01_ChkInvin:
00013390 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00013394 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
00013398 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
0001339C 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
000133A0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
000133A4 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
000133A8 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000133AC 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
000133B0 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000133B6 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
000133BA 7000                       		moveq	#0,d0
000133BC 1038 FE10                  		move.b	($FFFFFE10).w,d0
000133C0                             
000133C0 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000133C6 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
000133C8 43F9 0000 3BDA             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000133CE 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000133D0                             
000133D0                            Obj01_GetBgm2:
000133D0 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
000133D6 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
000133D8 43F9 0000 3BE2             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
000133DE 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000133E0                             
000133E0                            Obj01_GetBgm3:
000133E0 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
000133E6 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
000133E8 43F9 0000 3BE8             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
000133EE 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000133F0                             
000133F0                            Obj01_GetBgm4:
000133F0 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
000133F6 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
000133F8 43F9 0000 3BEE             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
000133FE                             
000133FE                            Obj01_PlayMusic:
000133FE 1031 0000                  		move.b	(a1,d0.w),d0
00013402 4EB9 0000 15BA             		jsr	(PlaySound).l	; play normal music
00013408                             
00013408                            ; NineKode ends here.
00013408                            
00013408                            Obj01_RmvInvin:
00013408 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
0001340E                            
0001340E                            Obj01_ChkShoes:
0001340E 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00013412 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00013414 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00013418 6700                       		beq.s	Obj01_ExitChk
0001341A 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
0001341E 6600                       		bne.s	Obj01_ExitChk
00013420 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013426 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
0001342C 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013432 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00013438 303C 00E3                  		move.w	#$E3,d0
0001343C 4EF9 0000 15BA             		jmp	(PlaySound).l	; run music at normal speed
00013442                            ; ===========================================================================
00013442                            
00013442                            Obj01_ExitChk:
00013442 4E75                       		rts	
00013444                            
00013444                            ; ---------------------------------------------------------------------------
00013444                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00013444                            ; ---------------------------------------------------------------------------
00013444                            
00013444                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013444                            
00013444                            
00013444                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00013444 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00013448 43F8 CB00                  		lea	($FFFFCB00).w,a1
0001344C 43F1 0000                  		lea	(a1,d0.w),a1
00013450 32E8 0008                  		move.w	8(a0),(a1)+
00013454 32E8 000C                  		move.w	$C(a0),(a1)+
00013458 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
0001345C 4E75                       		rts	
0001345E                            ; End of function Sonic_RecordPos
0001345E                            
0001345E                            ; ---------------------------------------------------------------------------
0001345E                            ; Subroutine for Sonic when he's underwater
0001345E                            ; ---------------------------------------------------------------------------
0001345E                            
0001345E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001345E                            
0001345E                            
0001345E                            Sonic_Water:				; XREF: loc_12C7E
0001345E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00013464 6700                       		beq.s	Obj01_InWater	; if yes, branch
00013466                            
00013466                            locret_12D80:
00013466 4E75                       		rts	
00013468                            ; ===========================================================================
00013468                            
00013468                            Obj01_InWater:
00013468 3038 F646                  		move.w	($FFFFF646).w,d0
0001346C B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00013470 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00013472 08E8 0006 0022             		bset	#6,$22(a0)
00013478 66EC                       		bne.s	locret_12D80
0001347A 6100 0000                  		bsr.w	ResumeMusic
0001347E 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00013484 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
0001348A 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013490 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00013496 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
0001349C E0E8 0010                  		asr	$10(a0)
000134A0 E0E8 0012                  		asr	$12(a0)
000134A4 E0E8 0012                  		asr	$12(a0)
000134A8 67BC                       		beq.s	locret_12D80
000134AA 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000134B0 303C 00AA                  		move.w	#$AA,d0
000134B4 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play splash sound
000134BA                            ; ===========================================================================
000134BA                            
000134BA                            Obj01_OutWater:
000134BA 08A8 0006 0022             		bclr	#6,$22(a0)
000134C0 67A4                       		beq.s	locret_12D80
000134C2 6100 0000                  		bsr.w	ResumeMusic
000134C6 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000134CC 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000134D2 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000134D8 E1E8 0012                  		asl	$12(a0)
000134DC 6700 FF88                  		beq.w	locret_12D80
000134E0 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000134E6 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
000134EC 6E00                       		bgt.s	loc_12E0E
000134EE 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
000134F4                            
000134F4                            loc_12E0E:
000134F4 303C 00AA                  		move.w	#$AA,d0
000134F8 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play splash sound
000134FE                            ; End of function Sonic_Water
000134FE                            
000134FE                            ; ===========================================================================
000134FE                            ; ---------------------------------------------------------------------------
000134FE                            ; Modes	for controlling	Sonic
000134FE                            ; ---------------------------------------------------------------------------
000134FE                            
000134FE                            Obj01_MdNormal:				; XREF: Obj01_Modes
000134FE 6100 0000                  		bsr.w	Sonic_Jump
00013502 6100 0000                  		bsr.w	Sonic_SlopeResist
00013506 6100 0000                  		bsr.w	Sonic_Move
0001350A 6100 0000                  		bsr.w	Sonic_Roll
0001350E 6100 0000                  		bsr.w	Sonic_LevelBound
00013512 4EBA A7A4                  		jsr	SpeedToPos
00013516 6100 0000                  		bsr.w	Sonic_AnglePos
0001351A 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001351E 4E75                       		rts	
00013520                            ; ===========================================================================
00013520                            
00013520                            Obj01_MdJump:				; XREF: Obj01_Modes
00013520 6100 0000                  		bsr.w	Sonic_JumpHeight
00013524 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013528 6100 0000                  		bsr.w	Sonic_LevelBound
0001352C 4EBA A75E                  		jsr	ObjectFall
00013530 0828 0006 0022             		btst	#6,$22(a0)
00013536 6700                       		beq.s	loc_12E5C
00013538 0468 0028 0012             		subi.w	#$28,$12(a0)
0001353E                            
0001353E                            loc_12E5C:
0001353E 6100 0000                  		bsr.w	Sonic_JumpAngle
00013542 6100 0000                  		bsr.w	Sonic_Floor
00013546 4E75                       		rts	
00013548                            ; ===========================================================================
00013548                            
00013548                            Obj01_MdRoll:				; XREF: Obj01_Modes
00013548 6100 0000                  		bsr.w	Sonic_Jump
0001354C 6100 0000                  		bsr.w	Sonic_RollRepel
00013550 6100 0000                  		bsr.w	Sonic_RollSpeed
00013554 6100 0000                  		bsr.w	Sonic_LevelBound
00013558 4EBA A75E                  		jsr	SpeedToPos
0001355C 6100 0000                  		bsr.w	Sonic_AnglePos
00013560 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013564 4E75                       		rts	
00013566                            ; ===========================================================================
00013566                            
00013566                            Obj01_MdJump2:				; XREF: Obj01_Modes
00013566 6100 0000                  		bsr.w	Sonic_JumpHeight
0001356A 6100 0000                  		bsr.w	Sonic_ChgJumpDir
0001356E 6100 0000                  		bsr.w	Sonic_LevelBound
00013572 6100 0000                  		bsr.w	Sonic_AirUnroll
00013576 4EBA A714                  		jsr	ObjectFall
0001357A 0828 0006 0022             		btst	#6,$22(a0)
00013580 6700                       		beq.s	loc_12EA6
00013582 0468 0028 0012             		subi.w	#$28,$12(a0)
00013588                            
00013588                            loc_12EA6:
00013588 6100 0000                  		bsr.w	Sonic_JumpAngle
0001358C 6100 0000                  		bsr.w	Sonic_Floor
00013590 4E75                       		rts	
00013592                            ; ---------------------------------------------------------------------------
00013592                            ; Subroutine to	make Sonic walk/run
00013592                            ; ---------------------------------------------------------------------------
00013592                            
00013592                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013592                            
00013592                            
00013592                            Sonic_Move:				; XREF: Obj01_MdNormal
00013592 3C38 F760                  		move.w	($FFFFF760).w,d6
00013596 3A38 F762                  		move.w	($FFFFF762).w,d5
0001359A 3838 F764                  		move.w	($FFFFF764).w,d4
0001359E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000135A2 6600 0000                  		bne.w	loc_12FEE
000135A6 4A68 003E                  		tst.w	$3E(a0)
000135AA 6600 0000                  		bne.w	Obj01_ResetScr
000135AE 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000135B4 6700                       		beq.s	Obj01_NotLeft	; if not, branch
000135B6 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000135BC 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
000135BE 6100 0000                  		bsr.w	Sonic_MoveLeft
000135C2                            
000135C2                            Obj01_NotLeft:
000135C2 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000135C8 6700                       		beq.s	Obj01_NotRight	; if not, branch
000135CA 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000135D0 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
000135D2 6100 0000                  		bsr.w	Sonic_MoveLeft
000135D6 6000                       		bra.s	Obj01_NotRight
000135D8                            
000135D8                            Obj01_MoveRight:
000135D8 6100 0000                  		bsr.w	Sonic_MoveRight
000135DC                            
000135DC                            Obj01_NotRight:
000135DC 1028 0026                  		move.b	$26(a0),d0
000135E0 0600 0020                  		addi.b	#$20,d0
000135E4 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
000135E8 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000135EC 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000135F0 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000135F4 08A8 0005 0022             		bclr	#5,$22(a0)
000135FA 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013600 0828 0003 0022             		btst	#3,$22(a0)
00013606 6700                       		beq.s	Sonic_Balance
00013608 7000                       		moveq	#0,d0
0001360A 1028 003D                  		move.b	$3D(a0),d0
0001360E ED48                       		lsl.w	#6,d0
00013610 43F8 D000                  		lea	($FFFFD000).w,a1
00013614 43F1 0000                  		lea	(a1,d0.w),a1
00013618 4A29 0022                  		tst.b	$22(a1)
0001361C 6B00                       		bmi.s	Sonic_LookUp
0001361E 7200                       		moveq	#0,d1
00013620 1229 0019                  		move.b	$19(a1),d1
00013624 3401                       		move.w	d1,d2
00013626 D442                       		add.w	d2,d2
00013628 5942                       		subq.w	#4,d2
0001362A D268 0008                  		add.w	8(a0),d1
0001362E 9269 0008                  		sub.w	8(a1),d1
00013632 0C41 0004                  		cmpi.w	#4,d1
00013636 6D00                       		blt.s	loc_12F6A
00013638 B242                       		cmp.w	d2,d1
0001363A 6C00                       		bge.s	loc_12F5A
0001363C 6000                       		bra.s	Sonic_LookUp
0001363E                            ; ===========================================================================
0001363E                            
0001363E                            Sonic_Balance:
0001363E 4EB9 0000 0000             		jsr	ObjHitFloor
00013644 0C41 000C                  		cmpi.w	#$C,d1
00013648 6D00                       		blt.s	Sonic_LookUp
0001364A 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00013650 6600                       		bne.s	loc_12F62
00013652                            
00013652                            loc_12F5A:
00013652 08A8 0000 0022             		bclr	#0,$22(a0)
00013658 6000                       		bra.s	loc_12F70
0001365A                            ; ===========================================================================
0001365A                            
0001365A                            loc_12F62:
0001365A 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013660 6600                       		bne.s	Sonic_LookUp
00013662                            
00013662                            loc_12F6A:
00013662 08E8 0000 0022             		bset	#0,$22(a0)
00013668                            
00013668                            loc_12F70:
00013668 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
0001366E 6000                       		bra.s	Obj01_ResetScr
00013670                            ; ===========================================================================
00013670                            
00013670                            Sonic_LookUp:
00013670 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00013676 6700                       		beq.s	Sonic_Duck	; if not, branch
00013678 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
0001367E 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013684 6700                       		beq.s	loc_12FC2
00013686 5478 F73E                  		addq.w	#2,($FFFFF73E).w
0001368A 6000                       		bra.s	loc_12FC2
0001368C                            ; ===========================================================================
0001368C                            
0001368C                            Sonic_Duck:
0001368C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013692 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013694 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
0001369A 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000136A0 6700                       		beq.s	loc_12FC2
000136A2 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000136A6 6000                       		bra.s	loc_12FC2
000136A8                            ; ===========================================================================
000136A8                            
000136A8                            Obj01_ResetScr:
000136A8 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000136AE 6700                       		beq.s	loc_12FC2	; if yes, branch
000136B0 6400                       		bcc.s	loc_12FBE
000136B2 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000136B6                            
000136B6                            loc_12FBE:
000136B6 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000136BA                            
000136BA                            loc_12FC2:
000136BA 1038 F602                  		move.b	($FFFFF602).w,d0
000136BE 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
000136C2 6600                       		bne.s	loc_12FEE	; if yes, branch
000136C4 3028 0014                  		move.w	$14(a0),d0
000136C8 6700                       		beq.s	loc_12FEE
000136CA 6B00                       		bmi.s	loc_12FE2
000136CC 9045                       		sub.w	d5,d0
000136CE 6400                       		bcc.s	loc_12FDC
000136D0 303C 0000                  		move.w	#0,d0
000136D4                            
000136D4                            loc_12FDC:
000136D4 3140 0014                  		move.w	d0,$14(a0)
000136D8 6000                       		bra.s	loc_12FEE
000136DA                            ; ===========================================================================
000136DA                            
000136DA                            loc_12FE2:
000136DA D045                       		add.w	d5,d0
000136DC 6400                       		bcc.s	loc_12FEA
000136DE 303C 0000                  		move.w	#0,d0
000136E2                            
000136E2                            loc_12FEA:
000136E2 3140 0014                  		move.w	d0,$14(a0)
000136E6                            
000136E6                            loc_12FEE:
000136E6 1028 0026                  		move.b	$26(a0),d0
000136EA 4EB9 0000 2C64             		jsr	(CalcSine).l
000136F0 C3E8 0014                  		muls.w	$14(a0),d1
000136F4 E081                       		asr.l	#8,d1
000136F6 3141 0010                  		move.w	d1,$10(a0)
000136FA C1E8 0014                  		muls.w	$14(a0),d0
000136FE E080                       		asr.l	#8,d0
00013700 3140 0012                  		move.w	d0,$12(a0)
00013704                            
00013704                            loc_1300C:
00013704 1028 0026                  		move.b	$26(a0),d0
00013708 0600 0040                  		addi.b	#$40,d0
0001370C 6B00                       		bmi.s	locret_1307C
0001370E 123C 0040                  		move.b	#$40,d1
00013712 4A68 0014                  		tst.w	$14(a0)
00013716 6700                       		beq.s	locret_1307C
00013718 6B00                       		bmi.s	loc_13024
0001371A 4441                       		neg.w	d1
0001371C                            
0001371C                            loc_13024:
0001371C 1028 0026                  		move.b	$26(a0),d0
00013720 D001                       		add.b	d1,d0
00013722 3F00                       		move.w	d0,-(sp)
00013724 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013728 301F                       		move.w	(sp)+,d0
0001372A 4A41                       		tst.w	d1
0001372C 6A00                       		bpl.s	locret_1307C
0001372E E141                       		asl.w	#8,d1
00013730 0600 0020                  		addi.b	#$20,d0
00013734 0200 00C0                  		andi.b	#$C0,d0
00013738 6700                       		beq.s	loc_13078
0001373A 0C00 0040                  		cmpi.b	#$40,d0
0001373E 6700                       		beq.s	loc_13066
00013740 0C00 0080                  		cmpi.b	#$80,d0
00013744 6700                       		beq.s	loc_13060
00013746 D368 0010                  		add.w	d1,$10(a0)
0001374A 08E8 0005 0022             		bset	#5,$22(a0)
00013750 317C 0000 0014             		move.w	#0,$14(a0)
00013756 4E75                       		rts	
00013758                            ; ===========================================================================
00013758                            
00013758                            loc_13060:
00013758 9368 0012                  		sub.w	d1,$12(a0)
0001375C 4E75                       		rts	
0001375E                            ; ===========================================================================
0001375E                            
0001375E                            loc_13066:
0001375E 9368 0010                  		sub.w	d1,$10(a0)
00013762 08E8 0005 0022             		bset	#5,$22(a0)
00013768 317C 0000 0014             		move.w	#0,$14(a0)
0001376E 4E75                       		rts	
00013770                            ; ===========================================================================
00013770                            
00013770                            loc_13078:
00013770 D368 0012                  		add.w	d1,$12(a0)
00013774                            
00013774                            locret_1307C:
00013774 4E75                       		rts	
00013776                            ; End of function Sonic_Move
00013776                            
00013776                            
00013776                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013776                            
00013776                            
00013776                            Sonic_MoveLeft:				; XREF: Sonic_Move
00013776 3028 0014                  		move.w	$14(a0),d0
0001377A 6700                       		beq.s	loc_13086
0001377C 6A00                       		bpl.s	loc_130B2
0001377E                            
0001377E                            loc_13086:
0001377E 08E8 0000 0022             		bset	#0,$22(a0)
00013784 6600                       		bne.s	loc_1309A
00013786 08A8 0005 0022             		bclr	#5,$22(a0)
0001378C 117C 0001 001D             		move.b	#1,$1D(a0)
00013792                            
00013792                            loc_1309A:
00013792 9045                       		sub.w	d5,d0
00013794 3206                       		move.w	d6,d1
00013796 4441                       		neg.w	d1
00013798 B041                       		cmp.w	d1,d0
0001379A 6E00                       		bgt.s	loc_130A6
0001379C 3001                       		move.w	d1,d0
0001379E                            
0001379E                            loc_130A6:
0001379E 3140 0014                  		move.w	d0,$14(a0)
000137A2 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000137A8 4E75                       		rts	
000137AA                            ; ===========================================================================
000137AA                            
000137AA                            loc_130B2:				; XREF: Sonic_MoveLeft
000137AA 9044                       		sub.w	d4,d0
000137AC 6400                       		bcc.s	loc_130BA
000137AE 303C FF80                  		move.w	#-$80,d0
000137B2                            
000137B2                            loc_130BA:
000137B2 3140 0014                  		move.w	d0,$14(a0)
000137B6 1028 0026                  		move.b	$26(a0),d0
000137BA 0600 0020                  		addi.b	#$20,d0
000137BE 0200 00C0                  		andi.b	#$C0,d0
000137C2 6600                       		bne.s	locret_130E8
000137C4 0C40 0400                  		cmpi.w	#$400,d0
000137C8 6D00                       		blt.s	locret_130E8
000137CA 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000137D0 08A8 0000 0022             		bclr	#0,$22(a0)
000137D6 303C 00A4                  		move.w	#$A4,d0
000137DA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stopping sound
000137E0                            
000137E0                            locret_130E8:
000137E0 4E75                       		rts	
000137E2                            ; End of function Sonic_MoveLeft
000137E2                            
000137E2                            
000137E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137E2                            
000137E2                            
000137E2                            Sonic_MoveRight:			; XREF: Sonic_Move
000137E2 3028 0014                  		move.w	$14(a0),d0
000137E6 6B00                       		bmi.s	loc_13118
000137E8 08A8 0000 0022             		bclr	#0,$22(a0)
000137EE 6700                       		beq.s	loc_13104
000137F0 08A8 0005 0022             		bclr	#5,$22(a0)
000137F6 117C 0001 001D             		move.b	#1,$1D(a0)
000137FC                            
000137FC                            loc_13104:
000137FC D045                       		add.w	d5,d0
000137FE B046                       		cmp.w	d6,d0
00013800 6D00                       		blt.s	loc_1310C
00013802 3006                       		move.w	d6,d0
00013804                            
00013804                            loc_1310C:
00013804 3140 0014                  		move.w	d0,$14(a0)
00013808 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001380E 4E75                       		rts	
00013810                            ; ===========================================================================
00013810                            
00013810                            loc_13118:				; XREF: Sonic_MoveRight
00013810 D044                       		add.w	d4,d0
00013812 6400                       		bcc.s	loc_13120
00013814 303C 0080                  		move.w	#$80,d0
00013818                            
00013818                            loc_13120:
00013818 3140 0014                  		move.w	d0,$14(a0)
0001381C 1028 0026                  		move.b	$26(a0),d0
00013820 0600 0020                  		addi.b	#$20,d0
00013824 0200 00C0                  		andi.b	#$C0,d0
00013828 6600                       		bne.s	locret_1314E
0001382A 0C40 FC00                  		cmpi.w	#-$400,d0
0001382E 6E00                       		bgt.s	locret_1314E
00013830 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013836 08E8 0000 0022             		bset	#0,$22(a0)
0001383C 303C 00A4                  		move.w	#$A4,d0
00013840 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stopping sound
00013846                            
00013846                            locret_1314E:
00013846 4E75                       		rts	
00013848                            ; End of function Sonic_MoveRight
00013848                            
00013848                            ; ---------------------------------------------------------------------------
00013848                            ; Subroutine to	change Sonic's speed as he rolls
00013848                            ; ---------------------------------------------------------------------------
00013848                            
00013848                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013848                            
00013848                            
00013848                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013848 3C38 F760                  		move.w	($FFFFF760).w,d6
0001384C E346                       		asl.w	#1,d6
0001384E 3A38 F762                  		move.w	($FFFFF762).w,d5
00013852 E245                       		asr.w	#1,d5
00013854 3838 F764                  		move.w	($FFFFF764).w,d4
00013858 E444                       		asr.w	#2,d4
0001385A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001385E 6600 0000                  		bne.w	loc_131CC
00013862 4A68 003E                  		tst.w	$3E(a0)
00013866 6600                       		bne.s	loc_13188
00013868 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001386E 6700                       		beq.s	loc_1317C	; if not, branch
00013870 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013876 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013878 6100 0000                  		bsr.w	Sonic_RollLeft
0001387C                            
0001387C                            loc_1317C:
0001387C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013882 6700                       		beq.s	loc_13188	; if not, branch
00013884 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001388A 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
0001388C 6100 0000                  		bsr.w	Sonic_RollLeft
00013890 6000                       		bra.s	loc_13188
00013892                            
00013892                            SonicRS_RollRight:
00013892 6100 0000                  		bsr.w	Sonic_RollRight
00013896                            
00013896                            loc_13188:
00013896 3028 0014                  		move.w	$14(a0),d0
0001389A 6700                       		beq.s	loc_131AA
0001389C 6B00                       		bmi.s	loc_1319E
0001389E 9045                       		sub.w	d5,d0
000138A0 6400                       		bcc.s	loc_13198
000138A2 303C 0000                  		move.w	#0,d0
000138A6                            
000138A6                            loc_13198:
000138A6 3140 0014                  		move.w	d0,$14(a0)
000138AA 6000                       		bra.s	loc_131AA
000138AC                            ; ===========================================================================
000138AC                            
000138AC                            loc_1319E:				; XREF: Sonic_RollSpeed
000138AC D045                       		add.w	d5,d0
000138AE 6400                       		bcc.s	loc_131A6
000138B0 303C 0000                  		move.w	#0,d0
000138B4                            
000138B4                            loc_131A6:
000138B4 3140 0014                  		move.w	d0,$14(a0)
000138B8                            
000138B8                            loc_131AA:
000138B8 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000138BC 6600                       		bne.s	loc_131CC	; if yes, branch
000138BE 08A8 0002 0022             		bclr	#2,$22(a0)
000138C4 117C 0013 0016             		move.b	#$13,$16(a0)
000138CA 117C 0009 0017             		move.b	#9,$17(a0)
000138D0 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000138D6 5B68 000C                  		subq.w	#5,$C(a0)
000138DA                            
000138DA                            loc_131CC:
000138DA 1028 0026                  		move.b	$26(a0),d0
000138DE 4EB9 0000 2C64             		jsr	(CalcSine).l
000138E4 C1E8 0014                  		muls.w	$14(a0),d0
000138E8 E080                       		asr.l	#8,d0
000138EA 3140 0012                  		move.w	d0,$12(a0)
000138EE C3E8 0014                  		muls.w	$14(a0),d1
000138F2 E081                       		asr.l	#8,d1
000138F4 0C41 1000                  		cmpi.w	#$1000,d1
000138F8 6F00                       		ble.s	loc_131F0
000138FA 323C 1000                  		move.w	#$1000,d1
000138FE                            
000138FE                            loc_131F0:
000138FE 0C41 F000                  		cmpi.w	#-$1000,d1
00013902 6C00                       		bge.s	loc_131FA
00013904 323C F000                  		move.w	#-$1000,d1
00013908                            
00013908                            loc_131FA:
00013908 3141 0010                  		move.w	d1,$10(a0)
0001390C 6000 FDF6                  		bra.w	loc_1300C
00013910                            ; End of function Sonic_RollSpeed
00013910                            
00013910                            
00013910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013910                            
00013910                            
00013910                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013910 3028 0014                  		move.w	$14(a0),d0
00013914 6700                       		beq.s	loc_1320A
00013916 6A00                       		bpl.s	loc_13218
00013918                            
00013918                            loc_1320A:
00013918 08E8 0000 0022             		bset	#0,$22(a0)
0001391E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013924 4E75                       		rts	
00013926                            ; ===========================================================================
00013926                            
00013926                            loc_13218:
00013926 9044                       		sub.w	d4,d0
00013928 6400                       		bcc.s	loc_13220
0001392A 303C FF80                  		move.w	#-$80,d0
0001392E                            
0001392E                            loc_13220:
0001392E 3140 0014                  		move.w	d0,$14(a0)
00013932 4E75                       		rts	
00013934                            ; End of function Sonic_RollLeft
00013934                            
00013934                            
00013934                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013934                            
00013934                            
00013934                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013934 3028 0014                  		move.w	$14(a0),d0
00013938 6B00                       		bmi.s	loc_1323A
0001393A 08A8 0000 0022             		bclr	#0,$22(a0)
00013940 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013946 4E75                       		rts	
00013948                            ; ===========================================================================
00013948                            
00013948                            loc_1323A:
00013948 D044                       		add.w	d4,d0
0001394A 6400                       		bcc.s	loc_13242
0001394C 303C 0080                  		move.w	#$80,d0
00013950                            
00013950                            loc_13242:
00013950 3140 0014                  		move.w	d0,$14(a0)
00013954 4E75                       		rts	
00013956                            ; End of function Sonic_RollRight
00013956                            
00013956                            Sonic_AirUnroll:
00013956                            		
00013956 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
0001395A 6600                       		bne.s	@timer
0001395C 1038 F605                  		move.b	($FFFFF605).w,d0
00013960 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
00013964 6700                       		beq.s	@end	; if not, branch
00013966 08A8 0002 0022             		bclr	#2,$22(a0)
0001396C 117C 0013 0016             		move.b	#$13,$16(a0)
00013972 117C 0009 0017             		move.b	#9,$17(a0)
00013978 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
0001397E 303C 00A5                  		move.w	#$A5,d0
00013982 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play fart sound
00013988 2028 0010                  		move.l	$10(a0),d0
0001398C D080                       		add.l	d0,d0
0001398E 2140 0010                  		move.l	d0,$10(a0)
00013992 5B68 000C                  		subq.w	#5,$C(a0)
00013996                            	@end:
00013996 4E75                       		rts
00013998                            	@timer:
00013998 5328 003A                  		subq.b	#1,$3A(a0)
0001399C 4E75                       		rts
0001399E                            
0001399E                            ; ---------------------------------------------------------------------------
0001399E                            ; Subroutine to	change Sonic's direction while jumping
0001399E                            ; ---------------------------------------------------------------------------
0001399E                            
0001399E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001399E                            
0001399E                            
0001399E                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001399E 3C38 F760                  		move.w	($FFFFF760).w,d6
000139A2 3A38 F762                  		move.w	($FFFFF762).w,d5
000139A6 E345                       		asl.w	#1,d5
000139A8 0828 0004 0022             		btst	#4,$22(a0)
000139AE 6600                       		bne.s	Obj01_ResetScr2
000139B0 3028 0010                  		move.w	$10(a0),d0
000139B4 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000139BA 6700                       		beq.s	loc_13278	; if not, branch
000139BC 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000139C2 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
000139C4 6100 0000                  		bsr.w	SonicCJD_JumpLeft
000139C8 6E00                       		bgt.s	loc_13278
000139CA 3001                       		move.w	d1,d0
000139CC                            
000139CC                            loc_13278:
000139CC 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000139D2 6700                       		beq.s	Obj01_JumpMove	; if not, branch
000139D4 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000139DA 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
000139DC 6100 0000                  		bsr.w	SonicCJD_JumpLeft
000139E0 6E00                       		bgt.s	Obj01_JumpMove
000139E2 3001                       		move.w	d1,d0
000139E4 6000                       		bra.s	Obj01_JumpMove
000139E6                            
000139E6                            SonicCJD_JumpLeft:
000139E6 08E8 0000 0022             		bset	#0,$22(a0)
000139EC 9045                       		sub.w	d5,d0
000139EE 3206                       		move.w	d6,d1
000139F0 4441                       		neg.w	d1
000139F2 B041                       		cmp.w	d1,d0
000139F4                            		; bgt.s	loc_13278
000139F4                            		; move.w	d1,d0
000139F4 4E75                       		rts
000139F6                            
000139F6                            SonicCJD_JumpRight:
000139F6 08A8 0000 0022             		bclr	#0,$22(a0)
000139FC D045                       		add.w	d5,d0
000139FE B046                       		cmp.w	d6,d0
00013A00 6D00                       		blt.s	Obj01_JumpMove
00013A02 3006                       		move.w	d6,d0
00013A04                            
00013A04                            Obj01_JumpMove:
00013A04 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013A08                            
00013A08                            Obj01_ResetScr2:
00013A08 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013A0E 6700                       		beq.s	loc_132A4	; if yes, branch
00013A10 6400                       		bcc.s	loc_132A0
00013A12 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013A16                            
00013A16                            loc_132A0:
00013A16 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013A1A                            
00013A1A                            loc_132A4:
00013A1A 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013A20 6500                       		bcs.s	locret_132D2	; if yes, branch
00013A22 3028 0010                  		move.w	$10(a0),d0
00013A26 3200                       		move.w	d0,d1
00013A28 EA41                       		asr.w	#5,d1
00013A2A 6700                       		beq.s	locret_132D2
00013A2C 6B00                       		bmi.s	loc_132C6
00013A2E 9041                       		sub.w	d1,d0
00013A30 6400                       		bcc.s	loc_132C0
00013A32 303C 0000                  		move.w	#0,d0
00013A36                            
00013A36                            loc_132C0:
00013A36 3140 0010                  		move.w	d0,$10(a0)
00013A3A 4E75                       		rts	
00013A3C                            ; ===========================================================================
00013A3C                            
00013A3C                            loc_132C6:
00013A3C 9041                       		sub.w	d1,d0
00013A3E 6500                       		bcs.s	loc_132CE
00013A40 303C 0000                  		move.w	#0,d0
00013A44                            
00013A44                            loc_132CE:
00013A44 3140 0010                  		move.w	d0,$10(a0)
00013A48                            
00013A48                            locret_132D2:
00013A48 4E75                       		rts	
00013A4A                            ; End of function Sonic_ChgJumpDir
00013A4A                            
00013A4A                            ; ===========================================================================
00013A4A                            ; ---------------------------------------------------------------------------
00013A4A                            ; Unused subroutine to squash Sonic
00013A4A                            ; ---------------------------------------------------------------------------
00013A4A 1028 0026                  		move.b	$26(a0),d0
00013A4E 0600 0020                  		addi.b	#$20,d0
00013A52 0200 00C0                  		andi.b	#$C0,d0
00013A56 6600                       		bne.s	locret_13302
00013A58 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013A5C 4A41                       		tst.w	d1
00013A5E 6A00                       		bpl.s	locret_13302
00013A60 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013A66 317C 0000 0010             		move.w	#0,$10(a0)
00013A6C 317C 0000 0012             		move.w	#0,$12(a0)
00013A72 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013A78                            
00013A78                            locret_13302:
00013A78 4E75                       		rts	
00013A7A                            ; ---------------------------------------------------------------------------
00013A7A                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013A7A                            ; ---------------------------------------------------------------------------
00013A7A                            
00013A7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A7A                            
00013A7A                            
00013A7A                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013A7A 2228 0008                  		move.l	8(a0),d1
00013A7E 3028 0010                  		move.w	$10(a0),d0
00013A82 48C0                       		ext.l	d0
00013A84 E180                       		asl.l	#8,d0
00013A86 D280                       		add.l	d0,d1
00013A88 4841                       		swap	d1
00013A8A 3038 F728                  		move.w	($FFFFF728).w,d0
00013A8E 0640 0010                  		addi.w	#$10,d0
00013A92 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013A94 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013A96 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013A9A 0640 0128                  		addi.w	#$128,d0
00013A9E 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013AA2 6600                       		bne.s	loc_13332
00013AA4 0640 0040                  		addi.w	#$40,d0
00013AA8                            
00013AA8                            loc_13332:
00013AA8 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013AAA 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013AAC                            
00013AAC                            loc_13336:
00013AAC 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013AB0 0640 00E0                  		addi.w	#$E0,d0
00013AB4 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013AB8 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013ABA 4E75                       		rts	
00013ABC                            ; ===========================================================================
00013ABC                            
00013ABC                            Boundary_Bottom:
00013ABC 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013AC2 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013AC6 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013ACC 6500 0000                  		bcs.w	KillSonic
00013AD0 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013AD4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013ADA 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013AE0 4E75                       		rts	
00013AE2                            ; ===========================================================================
00013AE2                            
00013AE2                            Boundary_Sides:
00013AE2 3140 0008                  		move.w	d0,8(a0)
00013AE6 317C 0000 000A             		move.w	#0,$A(a0)
00013AEC 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013AF2 317C 0000 0014             		move.w	#0,$14(a0)
00013AF8 60B2                       		bra.s	loc_13336
00013AFA                            ; End of function Sonic_LevelBound
00013AFA                            
00013AFA                            ; ---------------------------------------------------------------------------
00013AFA                            ; Subroutine allowing Sonic to roll when he's moving
00013AFA                            ; ---------------------------------------------------------------------------
00013AFA                            
00013AFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AFA                            
00013AFA                            
00013AFA                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013AFA 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013AFE 6600                       		bne.s	Obj01_NoRoll
00013B00 3028 0014                  		move.w	$14(a0),d0
00013B04 6A00                       		bpl.s	loc_13392
00013B06 4440                       		neg.w	d0
00013B08                            
00013B08                            loc_13392:
00013B08 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013B0C 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013B0E 1038 F602                  		move.b	($FFFFF602).w,d0
00013B12 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013B16 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013B18 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013B1E 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013B20                            
00013B20                            Obj01_NoRoll:
00013B20 4E75                       		rts	
00013B22                            ; ===========================================================================
00013B22                            
00013B22                            Obj01_ChkRoll:
00013B22 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013B28 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013B2A 4E75                       		rts	
00013B2C                            ; ===========================================================================
00013B2C                            
00013B2C                            Obj01_DoRoll:
00013B2C 08E8 0002 0022             		bset	#2,$22(a0)
00013B32 117C 000E 0016             		move.b	#$E,$16(a0)
00013B38 117C 0007 0017             		move.b	#7,$17(a0)
00013B3E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013B44 5A68 000C                  		addq.w	#5,$C(a0)
00013B48 303C 00BE                  		move.w	#$BE,d0
00013B4C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rolling sound
00013B52 4A68 0014                  		tst.w	$14(a0)
00013B56 6600                       		bne.s	locret_133E8
00013B58 317C 0200 0014             		move.w	#$200,$14(a0)
00013B5E                            
00013B5E                            locret_133E8:
00013B5E 4E75                       		rts	
00013B60                            ; End of function Sonic_Roll
00013B60                            
00013B60                            ; ---------------------------------------------------------------------------
00013B60                            ; Subroutine allowing Sonic to jump
00013B60                            ; ---------------------------------------------------------------------------
00013B60                            
00013B60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B60                            
00013B60                            
00013B60                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013B60 1038 F603                  		move.b	($FFFFF603).w,d0
00013B64 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013B68 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013B6C 7000                       		moveq	#0,d0
00013B6E 1028 0026                  		move.b	$26(a0),d0
00013B72 0600 0080                  		addi.b	#$80,d0
00013B76 6100 0000                  		bsr.w	sub_14D48
00013B7A 0C41 0006                  		cmpi.w	#6,d1
00013B7E 6D00 0000                  		blt.w	locret_1348E
00013B82 343C 0680                  		move.w	#$680,d2
00013B86 0828 0006 0022             		btst	#6,$22(a0)
00013B8C 6700                       		beq.s	loc_1341C
00013B8E 343C 0380                  		move.w	#$380,d2
00013B92                            
00013B92                            loc_1341C:
00013B92 7000                       		moveq	#0,d0
00013B94 1028 0026                  		move.b	$26(a0),d0
00013B98 0400 0040                  		subi.b	#$40,d0
00013B9C 4EB9 0000 2C64             		jsr	(CalcSine).l
00013BA2 C3C2                       		muls.w	d2,d1
00013BA4 E081                       		asr.l	#8,d1
00013BA6 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013BAA C1C2                       		muls.w	d2,d0
00013BAC E080                       		asr.l	#8,d0
00013BAE D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013BB2 08E8 0001 0022             		bset	#1,$22(a0)
00013BB8 08A8 0005 0022             		bclr	#5,$22(a0)
00013BBE 588F                       		addq.l	#4,sp
00013BC0 117C 0001 003C             		move.b	#1,$3C(a0)
00013BC6 4228 0038                  		clr.b	$38(a0)
00013BCA 303C 00A0                  		move.w	#$A0,d0
00013BCE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play jumping sound
00013BD4 117C 0013 0016             		move.b	#$13,$16(a0)
00013BDA 117C 0009 0017             		move.b	#9,$17(a0)
00013BE0 0828 0002 0022             		btst	#2,$22(a0)
00013BE6 6600                       		bne.s	loc_13490
00013BE8 117C 000E 0016             		move.b	#$E,$16(a0)
00013BEE 117C 0007 0017             		move.b	#7,$17(a0)
00013BF4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013BFA 08E8 0002 0022             		bset	#2,$22(a0)
00013C00 5A68 000C                  		addq.w	#5,$C(a0)
00013C04 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013C0A                            
00013C0A                            locret_1348E:
00013C0A 4E75                       		rts	
00013C0C                            ; ===========================================================================
00013C0C                            
00013C0C                            loc_13490:
00013C0C 08E8 0004 0022             		bset	#4,$22(a0)
00013C12 4E75                       		rts	
00013C14                            ; End of function Sonic_Jump
00013C14                            
00013C14                            
00013C14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C14                            
00013C14                            
00013C14                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013C14 4A28 003C                  		tst.b	$3C(a0)
00013C18 6700                       		beq.s	loc_134C4
00013C1A 323C FC00                  		move.w	#-$400,d1
00013C1E 0828 0006 0022             		btst	#6,$22(a0)
00013C24 6700                       		beq.s	loc_134AE
00013C26 323C FE00                  		move.w	#-$200,d1
00013C2A                            
00013C2A                            loc_134AE:
00013C2A B268 0012                  		cmp.w	$12(a0),d1
00013C2E 6F00                       		ble.s	locret_134C2
00013C30 1038 F602                  		move.b	($FFFFF602).w,d0
00013C34 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013C38 6600                       		bne.s	locret_134C2	; if yes, branch
00013C3A 3141 0012                  		move.w	d1,$12(a0)
00013C3E                            
00013C3E                            locret_134C2:
00013C3E 4E75                       		rts	
00013C40                            ; ===========================================================================
00013C40                            
00013C40                            loc_134C4:
00013C40 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013C46 6C00                       		bge.s	locret_134D2
00013C48 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013C4E                            
00013C4E                            locret_134D2:
00013C4E 4E75                       		rts	
00013C50                            ; End of function Sonic_JumpHeight
00013C50                            
00013C50                            ; ---------------------------------------------------------------------------
00013C50                            ; Subroutine to	slow Sonic walking up a	slope
00013C50                            ; ---------------------------------------------------------------------------
00013C50                            
00013C50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C50                            
00013C50                            
00013C50                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013C50 1028 0026                  		move.b	$26(a0),d0
00013C54 0600 0060                  		addi.b	#$60,d0
00013C58 0C00 00C0                  		cmpi.b	#$C0,d0
00013C5C 6400                       		bcc.s	locret_13508
00013C5E 1028 0026                  		move.b	$26(a0),d0
00013C62 4EB9 0000 2C64             		jsr	(CalcSine).l
00013C68 C1FC 0020                  		muls.w	#$20,d0
00013C6C E080                       		asr.l	#8,d0
00013C6E 4A68 0014                  		tst.w	$14(a0)
00013C72 6700                       		beq.s	locret_13508
00013C74 6B00                       		bmi.s	loc_13504
00013C76 4A40                       		tst.w	d0
00013C78 6700                       		beq.s	locret_13502
00013C7A D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013C7E                            
00013C7E                            locret_13502:
00013C7E 4E75                       		rts	
00013C80                            ; ===========================================================================
00013C80                            
00013C80                            loc_13504:
00013C80 D168 0014                  		add.w	d0,$14(a0)
00013C84                            
00013C84                            locret_13508:
00013C84 4E75                       		rts	
00013C86                            ; End of function Sonic_SlopeResist
00013C86                            
00013C86                            ; ---------------------------------------------------------------------------
00013C86                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013C86                            ; ---------------------------------------------------------------------------
00013C86                            
00013C86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C86                            
00013C86                            
00013C86                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013C86 1028 0026                  		move.b	$26(a0),d0
00013C8A 0600 0060                  		addi.b	#$60,d0
00013C8E 0C00 00C0                  		cmpi.b	#-$40,d0
00013C92 6400                       		bcc.s	locret_13544
00013C94 1028 0026                  		move.b	$26(a0),d0
00013C98 4EB9 0000 2C64             		jsr	(CalcSine).l
00013C9E C1FC 0050                  		muls.w	#$50,d0
00013CA2 E080                       		asr.l	#8,d0
00013CA4 4A68 0014                  		tst.w	$14(a0)
00013CA8 6B00                       		bmi.s	loc_1353A
00013CAA 4A40                       		tst.w	d0
00013CAC 6A00                       		bpl.s	loc_13534
00013CAE E480                       		asr.l	#2,d0
00013CB0                            
00013CB0                            loc_13534:
00013CB0 D168 0014                  		add.w	d0,$14(a0)
00013CB4 4E75                       		rts	
00013CB6                            ; ===========================================================================
00013CB6                            
00013CB6                            loc_1353A:
00013CB6 4A40                       		tst.w	d0
00013CB8 6B00                       		bmi.s	loc_13540
00013CBA E480                       		asr.l	#2,d0
00013CBC                            
00013CBC                            loc_13540:
00013CBC D168 0014                  		add.w	d0,$14(a0)
00013CC0                            
00013CC0                            locret_13544:
00013CC0 4E75                       		rts	
00013CC2                            ; End of function Sonic_RollRepel
00013CC2                            
00013CC2                            ; ---------------------------------------------------------------------------
00013CC2                            ; Subroutine to	push Sonic down	a slope
00013CC2                            ; ---------------------------------------------------------------------------
00013CC2                            
00013CC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CC2                            
00013CC2                            
00013CC2                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013CC2 4E71                       		nop	
00013CC4 4A28 0038                  		tst.b	$38(a0)
00013CC8 6600                       		bne.s	locret_13580
00013CCA 4A68 003E                  		tst.w	$3E(a0)
00013CCE 6600                       		bne.s	loc_13582
00013CD0 1028 0026                  		move.b	$26(a0),d0
00013CD4 0600 0020                  		addi.b	#$20,d0
00013CD8 0200 00C0                  		andi.b	#$C0,d0
00013CDC 6700                       		beq.s	locret_13580
00013CDE 3028 0014                  		move.w	$14(a0),d0
00013CE2 6A00                       		bpl.s	loc_1356A
00013CE4 4440                       		neg.w	d0
00013CE6                            
00013CE6                            loc_1356A:
00013CE6 0C40 0280                  		cmpi.w	#$280,d0
00013CEA 6400                       		bcc.s	locret_13580
00013CEC 4268 0014                  		clr.w	$14(a0)
00013CF0 08E8 0001 0022             		bset	#1,$22(a0)
00013CF6 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013CFC                            
00013CFC                            locret_13580:
00013CFC 4E75                       		rts	
00013CFE                            ; ===========================================================================
00013CFE                            
00013CFE                            loc_13582:
00013CFE 5368 003E                  		subq.w	#1,$3E(a0)
00013D02 4E75                       		rts	
00013D04                            ; End of function Sonic_SlopeRepel
00013D04                            
00013D04                            ; ---------------------------------------------------------------------------
00013D04                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013D04                            ; ---------------------------------------------------------------------------
00013D04                            
00013D04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D04                            
00013D04                            
00013D04                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013D04 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013D08 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013D0A 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013D0C                            
00013D0C 5400                       		addq.b	#2,d0		; increase angle
00013D0E 6400                       		bcc.s	loc_13596
00013D10 7000                       		moveq	#0,d0
00013D12                            
00013D12                            loc_13596:
00013D12 6000                       		bra.s	loc_1359E
00013D14                            ; ===========================================================================
00013D14                            
00013D14                            loc_13598:
00013D14 5500                       		subq.b	#2,d0		; decrease angle
00013D16 6400                       		bcc.s	loc_1359E
00013D18 7000                       		moveq	#0,d0
00013D1A                            
00013D1A                            loc_1359E:
00013D1A 1140 0026                  		move.b	d0,$26(a0)
00013D1E                            
00013D1E                            locret_135A2:
00013D1E 4E75                       		rts	
00013D20                            ; End of function Sonic_JumpAngle
00013D20                            
00013D20                            ; ---------------------------------------------------------------------------
00013D20                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013D20                            ; ---------------------------------------------------------------------------
00013D20                            
00013D20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D20                            
00013D20                            
00013D20                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013D20 3228 0010                  		move.w	$10(a0),d1
00013D24 3428 0012                  		move.w	$12(a0),d2
00013D28 4EB9 0000 2F32             		jsr	(CalcAngle).l
00013D2E 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013D32 0400 0020                  		subi.b	#$20,d0
00013D36 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013D3A 0200 00C0                  		andi.b	#$C0,d0
00013D3E 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013D42 0C00 0040                  		cmpi.b	#$40,d0
00013D46 6700 0000                  		beq.w	loc_13680
00013D4A 0C00 0080                  		cmpi.b	#$80,d0
00013D4E 6700 0000                  		beq.w	loc_136E2
00013D52 0C00 00C0                  		cmpi.b	#-$40,d0
00013D56 6700 0000                  		beq.w	loc_1373E
00013D5A 6100 0000                  		bsr.w	Sonic_HitWall
00013D5E 4A41                       		tst.w	d1
00013D60 6A00                       		bpl.s	loc_135F0
00013D62 9368 0008                  		sub.w	d1,8(a0)
00013D66 317C 0000 0010             		move.w	#0,$10(a0)
00013D6C                            
00013D6C                            loc_135F0:
00013D6C 6100 0000                  		bsr.w	sub_14EB4
00013D70 4A41                       		tst.w	d1
00013D72 6A00                       		bpl.s	loc_13602
00013D74 D368 0008                  		add.w	d1,8(a0)
00013D78 317C 0000 0010             		move.w	#0,$10(a0)
00013D7E                            
00013D7E                            loc_13602:
00013D7E 6100 0000                  		bsr.w	Sonic_HitFloor
00013D82 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013D86 4A41                       		tst.w	d1
00013D88 6A00                       		bpl.s	locret_1367E
00013D8A 1428 0012                  		move.b	$12(a0),d2
00013D8E 5002                       		addq.b	#8,d2
00013D90 4402                       		neg.b	d2
00013D92 B202                       		cmp.b	d2,d1
00013D94 6C00                       		bge.s	loc_1361E
00013D96 B002                       		cmp.b	d2,d0
00013D98 6D00                       		blt.s	locret_1367E
00013D9A                            
00013D9A                            loc_1361E:
00013D9A D368 000C                  		add.w	d1,$C(a0)
00013D9E 1143 0026                  		move.b	d3,$26(a0)
00013DA2 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013DA6 117C 0000 001C             		move.b	#0,$1C(a0)
00013DAC 1003                       		move.b	d3,d0
00013DAE 0600 0020                  		addi.b	#$20,d0
00013DB2 0200 0040                  		andi.b	#$40,d0
00013DB6 6600                       		bne.s	loc_1365C
00013DB8 1003                       		move.b	d3,d0
00013DBA 0600 0010                  		addi.b	#$10,d0
00013DBE 0200 0020                  		andi.b	#$20,d0
00013DC2 6700                       		beq.s	loc_1364E
00013DC4 E0E8 0012                  		asr	$12(a0)
00013DC8 6000                       		bra.s	loc_13670
00013DCA                            ; ===========================================================================
00013DCA                            
00013DCA                            loc_1364E:
00013DCA 317C 0000 0012             		move.w	#0,$12(a0)
00013DD0 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013DD6 4E75                       		rts	
00013DD8                            ; ===========================================================================
00013DD8                            
00013DD8                            loc_1365C:
00013DD8 317C 0000 0010             		move.w	#0,$10(a0)
00013DDE 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013DE4 6F00                       		ble.s	loc_13670
00013DE6 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013DEC                            
00013DEC                            loc_13670:
00013DEC 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013DF2 4A03                       		tst.b	d3
00013DF4 6A00                       		bpl.s	locret_1367E
00013DF6 4468 0014                  		neg.w	$14(a0)
00013DFA                            
00013DFA                            locret_1367E:
00013DFA 4E75                       		rts	
00013DFC                            ; ===========================================================================
00013DFC                            
00013DFC                            loc_13680:
00013DFC 6100 0000                  		bsr.w	Sonic_HitWall
00013E00 4A41                       		tst.w	d1
00013E02 6A00                       		bpl.s	loc_1369A
00013E04 9368 0008                  		sub.w	d1,8(a0)
00013E08 317C 0000 0010             		move.w	#0,$10(a0)
00013E0E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013E14 4E75                       		rts	
00013E16                            ; ===========================================================================
00013E16                            
00013E16                            loc_1369A:
00013E16 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013E1A 4A41                       		tst.w	d1
00013E1C 6A00                       		bpl.s	loc_136B4
00013E1E 9368 000C                  		sub.w	d1,$C(a0)
00013E22 4A68 0012                  		tst.w	$12(a0)
00013E26 6A00                       		bpl.s	locret_136B2
00013E28 317C 0000 0012             		move.w	#0,$12(a0)
00013E2E                            
00013E2E                            locret_136B2:
00013E2E 4E75                       		rts	
00013E30                            ; ===========================================================================
00013E30                            
00013E30                            loc_136B4:
00013E30 4A68 0012                  		tst.w	$12(a0)
00013E34 6B00                       		bmi.s	locret_136E0
00013E36 6100 0000                  		bsr.w	Sonic_HitFloor
00013E3A 4A41                       		tst.w	d1
00013E3C 6A00                       		bpl.s	locret_136E0
00013E3E D368 000C                  		add.w	d1,$C(a0)
00013E42 1143 0026                  		move.b	d3,$26(a0)
00013E46 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013E4A 117C 0000 001C             		move.b	#0,$1C(a0)
00013E50 317C 0000 0012             		move.w	#0,$12(a0)
00013E56 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013E5C                            
00013E5C                            locret_136E0:
00013E5C 4E75                       		rts	
00013E5E                            ; ===========================================================================
00013E5E                            
00013E5E                            loc_136E2:
00013E5E 6100 0000                  		bsr.w	Sonic_HitWall
00013E62 4A41                       		tst.w	d1
00013E64 6A00                       		bpl.s	loc_136F4
00013E66 9368 0008                  		sub.w	d1,8(a0)
00013E6A 317C 0000 0010             		move.w	#0,$10(a0)
00013E70                            
00013E70                            loc_136F4:
00013E70 6100 0000                  		bsr.w	sub_14EB4
00013E74 4A41                       		tst.w	d1
00013E76 6A00                       		bpl.s	loc_13706
00013E78 D368 0008                  		add.w	d1,8(a0)
00013E7C 317C 0000 0010             		move.w	#0,$10(a0)
00013E82                            
00013E82                            loc_13706:
00013E82 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013E86 4A41                       		tst.w	d1
00013E88 6A00                       		bpl.s	locret_1373C
00013E8A 9368 000C                  		sub.w	d1,$C(a0)
00013E8E 1003                       		move.b	d3,d0
00013E90 0600 0020                  		addi.b	#$20,d0
00013E94 0200 0040                  		andi.b	#$40,d0
00013E98 6600                       		bne.s	loc_13726
00013E9A 317C 0000 0012             		move.w	#0,$12(a0)
00013EA0 4E75                       		rts	
00013EA2                            ; ===========================================================================
00013EA2                            
00013EA2                            loc_13726:
00013EA2 1143 0026                  		move.b	d3,$26(a0)
00013EA6 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013EAA 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013EB0 4A03                       		tst.b	d3
00013EB2 6A00                       		bpl.s	locret_1373C
00013EB4 4468 0014                  		neg.w	$14(a0)
00013EB8                            
00013EB8                            locret_1373C:
00013EB8 4E75                       		rts	
00013EBA                            ; ===========================================================================
00013EBA                            
00013EBA                            loc_1373E:
00013EBA 6100 0000                  		bsr.w	sub_14EB4
00013EBE 4A41                       		tst.w	d1
00013EC0 6A00                       		bpl.s	loc_13758
00013EC2 D368 0008                  		add.w	d1,8(a0)
00013EC6 317C 0000 0010             		move.w	#0,$10(a0)
00013ECC 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013ED2 4E75                       		rts	
00013ED4                            ; ===========================================================================
00013ED4                            
00013ED4                            loc_13758:
00013ED4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013ED8 4A41                       		tst.w	d1
00013EDA 6A00                       		bpl.s	loc_13772
00013EDC 9368 000C                  		sub.w	d1,$C(a0)
00013EE0 4A68 0012                  		tst.w	$12(a0)
00013EE4 6A00                       		bpl.s	locret_13770
00013EE6 317C 0000 0012             		move.w	#0,$12(a0)
00013EEC                            
00013EEC                            locret_13770:
00013EEC 4E75                       		rts	
00013EEE                            ; ===========================================================================
00013EEE                            
00013EEE                            loc_13772:
00013EEE 4A68 0012                  		tst.w	$12(a0)
00013EF2 6B00                       		bmi.s	locret_1379E
00013EF4 6100 0000                  		bsr.w	Sonic_HitFloor
00013EF8 4A41                       		tst.w	d1
00013EFA 6A00                       		bpl.s	locret_1379E
00013EFC D368 000C                  		add.w	d1,$C(a0)
00013F00 1143 0026                  		move.b	d3,$26(a0)
00013F04 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013F08 117C 0000 001C             		move.b	#0,$1C(a0)
00013F0E 317C 0000 0012             		move.w	#0,$12(a0)
00013F14 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013F1A                            
00013F1A                            locret_1379E:
00013F1A 4E75                       		rts	
00013F1C                            ; End of function Sonic_Floor
00013F1C                            
00013F1C                            ; ---------------------------------------------------------------------------
00013F1C                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00013F1C                            ; ---------------------------------------------------------------------------
00013F1C                            
00013F1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F1C                            
00013F1C                            
00013F1C                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00013F1C 0828 0004 0022             		btst	#4,$22(a0)
00013F22 6700                       		beq.s	loc_137AE
00013F24 4E71                       		nop	
00013F26 4E71                       		nop	
00013F28 4E71                       		nop	
00013F2A                            
00013F2A                            loc_137AE:
00013F2A 08A8 0005 0022             		bclr	#5,$22(a0)
00013F30 08A8 0001 0022             		bclr	#1,$22(a0)
00013F36 08A8 0004 0022             		bclr	#4,$22(a0)
00013F3C 0828 0002 0022             		btst	#2,$22(a0)
00013F42 6700                       		beq.s	loc_137E4
00013F44 08A8 0002 0022             		bclr	#2,$22(a0)
00013F4A 117C 0013 0016             		move.b	#$13,$16(a0)
00013F50 117C 0009 0017             		move.b	#9,$17(a0)
00013F56 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00013F5C 5B68 000C                  		subq.w	#5,$C(a0)
00013F60                            
00013F60                            loc_137E4:
00013F60 117C 0000 003C             		move.b	#0,$3C(a0)
00013F66 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00013F6C 4E75                       		rts	
00013F6E                            ; End of function Sonic_ResetOnFloor
00013F6E                            
00013F6E                            ; ===========================================================================
00013F6E                            ; ---------------------------------------------------------------------------
00013F6E                            ; Sonic	when he	gets hurt
00013F6E                            ; ---------------------------------------------------------------------------
00013F6E                            
00013F6E                            Obj01_Hurt:				; XREF: Obj01_Index
00013F6E 4EBA 9D48                  		jsr	SpeedToPos
00013F72 0668 0030 0012             		addi.w	#$30,$12(a0)
00013F78 0828 0006 0022             		btst	#6,$22(a0)
00013F7E 6700                       		beq.s	loc_1380C
00013F80 0468 0020 0012             		subi.w	#$20,$12(a0)
00013F86                            
00013F86                            loc_1380C:
00013F86 6100 0000                  		bsr.w	Sonic_HurtStop
00013F8A 6100 FAEE                  		bsr.w	Sonic_LevelBound
00013F8E 6100 F4B4                  		bsr.w	Sonic_RecordPos
00013F92 6100 0000                  		bsr.w	Sonic_Animate
00013F96 6100 0000                  		bsr.w	LoadSonicDynPLC
00013F9A 4EFA 9D42                  		jmp	DisplaySprite
00013F9E                            
00013F9E                            ; ---------------------------------------------------------------------------
00013F9E                            ; Subroutine to	stop Sonic falling after he's been hurt
00013F9E                            ; ---------------------------------------------------------------------------
00013F9E                            
00013F9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F9E                            
00013F9E                            
00013F9E                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00013F9E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013FA2 0640 00E0                  		addi.w	#$E0,d0
00013FA6 B068 000C                  		cmp.w	$C(a0),d0
00013FAA 6500 0000                  		bcs.w	KillSonic
00013FAE 6100 FD70                  		bsr.w	Sonic_Floor
00013FB2 0828 0001 0022             		btst	#1,$22(a0)
00013FB8 6600                       		bne.s	locret_13860
00013FBA 7000                       		moveq	#0,d0
00013FBC 3140 0012                  		move.w	d0,$12(a0)
00013FC0 3140 0010                  		move.w	d0,$10(a0)
00013FC4 3140 0014                  		move.w	d0,$14(a0)
00013FC8 117C 0000 001C             		move.b	#0,$1C(a0)
00013FCE 5528 0024                  		subq.b	#2,$24(a0)
00013FD2 317C 0078 0030             		move.w	#$78,$30(a0)
00013FD8                            
00013FD8                            locret_13860:
00013FD8 4E75                       		rts	
00013FDA                            ; End of function Sonic_HurtStop
00013FDA                            
00013FDA                            ; ===========================================================================
00013FDA                            ; ---------------------------------------------------------------------------
00013FDA                            ; Sonic	when he	dies
00013FDA                            ; ---------------------------------------------------------------------------
00013FDA                            
00013FDA                            Obj01_Death:				; XREF: Obj01_Index
00013FDA 6100 0000                  		bsr.w	GameOver
00013FDE 4EBA 9CAC                  		jsr	ObjectFall
00013FE2 6100 F460                  		bsr.w	Sonic_RecordPos
00013FE6 6100 0000                  		bsr.w	Sonic_Animate
00013FEA 6100 0000                  		bsr.w	LoadSonicDynPLC
00013FEE 4EFA 9CEE                  		jmp	DisplaySprite
00013FF2                            
00013FF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FF2                            
00013FF2                            
00013FF2                            GameOver:				; XREF: Obj01_Death
00013FF2 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013FF6 0640 0100                  		addi.w	#$100,d0
00013FFA B068 000C                  		cmp.w	$C(a0),d0
00013FFE 6400 0000                  		bcc.w	locret_13900
00014002 317C FFC8 0012             		move.w	#-$38,$12(a0)
00014008 5428 0024                  		addq.b	#2,$24(a0)
0001400C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00014010 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00014014 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00014018 6600                       		bne.s	loc_138D4
0001401A 317C 0000 003A             		move.w	#0,$3A(a0)
00014020 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00014026 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001402C 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00014032 4238 FE1A                  		clr.b	($FFFFFE1A).w
00014036                            
00014036                            loc_138C2:
00014036 303C 008F                  		move.w	#$8F,d0
0001403A 4EB9 0000 15BA             		jsr	(PlaySound).l	; play game over music
00014040 7003                       		moveq	#3,d0
00014042 4EF9 0000 17A4             		jmp	(LoadPLC).l	; load game over patterns
00014048                            ; ===========================================================================
00014048                            
00014048                            loc_138D4:
00014048 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0001404E 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00014052 6700                       		beq.s	locret_13900	; if not, branch
00014054 317C 0000 003A             		move.w	#0,$3A(a0)
0001405A 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00014060 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014066 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
0001406C 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00014072 60C2                       		bra.s	loc_138C2
00014074                            ; ===========================================================================
00014074                            
00014074                            locret_13900:
00014074 4E75                       		rts	
00014076                            ; End of function GameOver
00014076                            
00014076                            ; ===========================================================================
00014076                            ; ---------------------------------------------------------------------------
00014076                            ; Sonic	when the level is restarted
00014076                            ; ---------------------------------------------------------------------------
00014076                            
00014076                            Obj01_ResetLevel:			; XREF: Obj01_Index
00014076 4A68 003A                  		tst.w	$3A(a0)
0001407A 6700                       		beq.s	locret_13914
0001407C 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00014080 6600                       		bne.s	locret_13914
00014082 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014088                            
00014088                            locret_13914:
00014088 4E75                       		rts	
0001408A                            
0001408A                            ; ---------------------------------------------------------------------------
0001408A                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
0001408A                            ; ---------------------------------------------------------------------------
0001408A                            
0001408A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001408A                            
0001408A                            
0001408A                            Sonic_Loops:				; XREF: Obj01_Control
0001408A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00014090 6700                       		beq.s	loc_13926	; if yes, branch
00014092 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00014096 6600 0000                  		bne.w	locret_139C2	; if not, branch
0001409A                            
0001409A                            loc_13926:
0001409A 3028 000C                  		move.w	$C(a0),d0
0001409E E248                       		lsr.w	#1,d0
000140A0 0240 0380                  		andi.w	#$380,d0
000140A4 1228 0008                  		move.b	8(a0),d1
000140A8 0241 007F                  		andi.w	#$7F,d1
000140AC D041                       		add.w	d1,d0
000140AE 43F8 A400                  		lea	($FFFFA400).w,a1
000140B2 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
000140B6 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
000140BA 6700 FA66                  		beq.w	Obj01_ChkRoll
000140BE B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
000140C2 6700 FA5E                  		beq.w	Obj01_ChkRoll
000140C6 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
000140CA 6700                       		beq.s	loc_13976
000140CC B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
000140D0 6700                       		beq.s	loc_13966
000140D2 08A8 0006 0001             		bclr	#6,1(a0)
000140D8 4E75                       		rts	
000140DA                            ; ===========================================================================
000140DA                            
000140DA                            loc_13966:
000140DA 0828 0001 0022             		btst	#1,$22(a0)
000140E0 6700                       		beq.s	loc_13976
000140E2 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000140E8 4E75                       		rts	
000140EA                            ; ===========================================================================
000140EA                            
000140EA                            loc_13976:
000140EA 3428 0008                  		move.w	8(a0),d2
000140EE 0C02 002C                  		cmpi.b	#$2C,d2
000140F2 6400                       		bcc.s	loc_13988
000140F4 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000140FA 4E75                       		rts	
000140FC                            ; ===========================================================================
000140FC                            
000140FC                            loc_13988:
000140FC 0C02 00E0                  		cmpi.b	#-$20,d2
00014100 6500                       		bcs.s	loc_13996
00014102 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014108 4E75                       		rts	
0001410A                            ; ===========================================================================
0001410A                            
0001410A                            loc_13996:
0001410A 0828 0006 0001             		btst	#6,1(a0)
00014110 6600                       		bne.s	loc_139B2
00014112 1228 0026                  		move.b	$26(a0),d1
00014116 6700                       		beq.s	locret_139C2
00014118 0C01 0080                  		cmpi.b	#-$80,d1
0001411C 6200                       		bhi.s	locret_139C2
0001411E 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014124 4E75                       		rts	
00014126                            ; ===========================================================================
00014126                            
00014126                            loc_139B2:
00014126 1228 0026                  		move.b	$26(a0),d1
0001412A 0C01 0080                  		cmpi.b	#-$80,d1
0001412E 6300                       		bls.s	locret_139C2
00014130 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014136                            
00014136                            locret_139C2:
00014136 4E75                       		rts	
00014138                            ; End of function Sonic_Loops
00014138                            
00014138                            ; ---------------------------------------------------------------------------
00014138                            ; Subroutine to	animate	Sonic's sprites
00014138                            ; ---------------------------------------------------------------------------
00014138                            
00014138                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014138                            
00014138                            Player_Anim:
00014138 0000 0000                  	dc.l	SonicAniData
0001413C 0000 0000                  	dc.l	SonicAniData ; gronic
00014140                            	; Insert more animation data for other characters here
00014140                            	
00014140                            Sonic_Animate:				; XREF: Obj01_Control; et al
00014140 7000                       			moveq	#0,d0
00014142 1038 FFE8                  		move.b	(v_character),d0
00014146 E548                       		lsl.w	#2,d0
00014148 43FA FFEE                  		lea 	Player_Anim(pc),a1
0001414C                            		
0001414C 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
00014150                            	
00014150 7000                       		moveq	#0,d0
00014152 1028 001C                  		move.b	$1C(a0),d0
00014156 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0001415A 6700                       		beq.s	SAnim_Do	; if not, branch
0001415C 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00014160 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00014166 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0001416C                            
0001416C                            SAnim_Do:
0001416C D040                       		add.w	d0,d0
0001416E D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00014172 1011                       		move.b	(a1),d0
00014174 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00014176 1228 0022                  		move.b	$22(a0),d1
0001417A 0201 0001                  		andi.b	#1,d1
0001417E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014184 8328 0001                  		or.b	d1,1(a0)
00014188 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0001418C 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
0001418E 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00014192                            
00014192                            SAnim_Do2:
00014192 7200                       		moveq	#0,d1
00014194 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00014198 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0001419C 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
0001419E                            
0001419E                            SAnim_Next:
0001419E 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
000141A2 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
000141A6                            
000141A6                            SAnim_Delay:
000141A6 4E75                       		rts	
000141A8                            ; ===========================================================================
000141A8                            
000141A8                            SAnim_End_FF:
000141A8 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
000141AA 6600                       		bne.s	SAnim_End_FE	; if not, branch
000141AC 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
000141B2 1029 0001                  		move.b	1(a1),d0	; read sprite number
000141B6 60E6                       		bra.s	SAnim_Next
000141B8                            ; ===========================================================================
000141B8                            
000141B8                            SAnim_End_FE:
000141B8 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
000141BA 6600                       		bne.s	SAnim_End_FD	; if not, branch
000141BC 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000141C0 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
000141C4 9200                       		sub.b	d0,d1
000141C6 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000141CA 60D2                       		bra.s	SAnim_Next
000141CC                            ; ===========================================================================
000141CC                            
000141CC                            SAnim_End_FD:
000141CC 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000141CE 6600                       		bne.s	SAnim_End	; if not, branch
000141D0 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000141D6                            
000141D6                            SAnim_End:
000141D6 4E75                       		rts	
000141D8                            ; ===========================================================================
000141D8                            
000141D8                            SAnim_WalkRun:				; XREF: SAnim_Do
000141D8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000141DC 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
000141DE 5200                       		addq.b	#1,d0		; is animation walking/running?
000141E0 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
000141E4 7200                       		moveq	#0,d1
000141E6 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
000141EA 1428 0022                  		move.b	$22(a0),d2
000141EE 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
000141F2 6600                       		bne.s	loc_13A70	; if yes, branch
000141F4 4600                       		not.b	d0		; reverse angle
000141F6                            
000141F6                            loc_13A70:
000141F6 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
000141FA 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
000141FC 7203                       		moveq	#3,d1
000141FE                            
000141FE                            loc_13A78:
000141FE 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014204 B302                       		eor.b	d1,d2
00014206 8528 0001                  		or.b	d2,1(a0)
0001420A 0828 0005 0022             		btst	#5,$22(a0)
00014210 6600 0000                  		bne.w	SAnim_Push
00014214 E808                       		lsr.b	#4,d0		; divide angle by $10
00014216 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
0001421A 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001421E 6A00                       		bpl.s	loc_13A9C
00014220 4442                       		neg.w	d2
00014222                            
00014222                            loc_13A9C:
00014222 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00014228 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
0001422C 6400                       		bcc.s	loc_13AB4	; if yes, branch
0001422E 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00014234 1200                       		move.b	d0,d1
00014236 E209                       		lsr.b	#1,d1
00014238 D001                       		add.b	d1,d0
0001423A                            
0001423A                            loc_13AB4:
0001423A D000                       		add.b	d0,d0
0001423C 1600                       		move.b	d0,d3
0001423E 4442                       		neg.w	d2
00014240 0642 0800                  		addi.w	#$800,d2
00014244 6A00                       		bpl.s	loc_13AC2
00014246 7400                       		moveq	#0,d2
00014248                            
00014248                            loc_13AC2:
00014248 E04A                       		lsr.w	#8,d2
0001424A 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001424E 6100 FF42                  		bsr.w	SAnim_Do2
00014252 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00014256 4E75                       		rts	
00014258                            ; ===========================================================================
00014258                            
00014258                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00014258 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
0001425A 6600                       		bne.s	SAnim_Push	; if not, branch
0001425C 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014260 6A00                       		bpl.s	loc_13ADE
00014262 4442                       		neg.w	d2
00014264                            
00014264                            loc_13ADE:
00014264 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
0001426A 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
0001426E 6400                       		bcc.s	loc_13AF0	; if yes, branch
00014270 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00014276                            
00014276                            loc_13AF0:
00014276 4442                       		neg.w	d2
00014278 0642 0400                  		addi.w	#$400,d2
0001427C 6A00                       		bpl.s	loc_13AFA
0001427E 7400                       		moveq	#0,d2
00014280                            
00014280                            loc_13AFA:
00014280 E04A                       		lsr.w	#8,d2
00014282 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014286 1228 0022                  		move.b	$22(a0),d1
0001428A 0201 0001                  		andi.b	#1,d1
0001428E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014294 8328 0001                  		or.b	d1,1(a0)
00014298 6000 FEF8                  		bra.w	SAnim_Do2
0001429C                            ; ===========================================================================
0001429C                            
0001429C                            SAnim_Push:				; XREF: SAnim_RollJump
0001429C 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000142A0 6B00                       		bmi.s	loc_13B1E
000142A2 4442                       		neg.w	d2
000142A4                            
000142A4                            loc_13B1E:
000142A4 0642 0800                  		addi.w	#$800,d2
000142A8 6A00                       		bpl.s	loc_13B26
000142AA 7400                       		moveq	#0,d2
000142AC                            
000142AC                            loc_13B26:
000142AC EC4A                       		lsr.w	#6,d2
000142AE 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000142B2 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000142B8 1228 0022                  		move.b	$22(a0),d1
000142BC 0201 0001                  		andi.b	#1,d1
000142C0 0228 00FC 0001             		andi.b	#$FC,1(a0)
000142C6 8328 0001                  		or.b	d1,1(a0)
000142CA 6000 FEC6                  		bra.w	SAnim_Do2
000142CE                            ; End of function Sonic_Animate
000142CE                            
000142CE                            ; ===========================================================================
000142CE                            SonicAniData:
000142CE                            	include "_anim\Sonic.asm"
000142CE                            ; ---------------------------------------------------------------------------
000142CE                            ; Animation script - Sonic
000142CE                            ; ---------------------------------------------------------------------------
000142CE 0000                       		dc.w SonAni_Walk-SonicAniData
000142D0 0000                       		dc.w SonAni_Run-SonicAniData
000142D2 0000                       		dc.w SonAni_Roll-SonicAniData
000142D4 0000                       		dc.w SonAni_Roll2-SonicAniData
000142D6 0000                       		dc.w SonAni_Push-SonicAniData
000142D8 0000                       		dc.w SonAni_Wait-SonicAniData
000142DA 0000                       		dc.w SonAni_Balance-SonicAniData
000142DC 0000                       		dc.w SonAni_LookUp-SonicAniData
000142DE 0000                       		dc.w SonAni_Duck-SonicAniData
000142E0 0000                       		dc.w SonAni_Warp1-SonicAniData
000142E2 0000                       		dc.w SonAni_Warp2-SonicAniData
000142E4 0000                       		dc.w SonAni_Warp3-SonicAniData
000142E6 0000                       		dc.w SonAni_Warp4-SonicAniData
000142E8 0000                       		dc.w SonAni_Stop-SonicAniData
000142EA 0000                       		dc.w SonAni_Float1-SonicAniData
000142EC 0000                       		dc.w SonAni_Float2-SonicAniData
000142EE 0000                       		dc.w SonAni_Spring-SonicAniData
000142F0 0000                       		dc.w SonAni_LZHang-SonicAniData
000142F2 0000                       		dc.w SonAni_Leap1-SonicAniData
000142F4 0000                       		dc.w SonAni_Leap2-SonicAniData
000142F6 0000                       		dc.w SonAni_Surf-SonicAniData
000142F8 0000                       		dc.w SonAni_Bubble-SonicAniData
000142FA 0000                       		dc.w SonAni_Death1-SonicAniData
000142FC 0000                       		dc.w SonAni_Drown-SonicAniData
000142FE 0000                       		dc.w SonAni_Death2-SonicAniData
00014300 0000                       		dc.w SonAni_Shrink-SonicAniData
00014302 0000                       		dc.w SonAni_Hurt-SonicAniData
00014304 0000                       		dc.w SonAni_LZSlide-SonicAniData
00014306 0000                       		dc.w SonAni_Blank-SonicAniData
00014308 0000                       		dc.w SonAni_Float3-SonicAniData
0001430A 0000                       		dc.w SonAni_Float4-SonicAniData
0001430C FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
00014316 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
0001431E FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00014326 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
0001432E FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00014336 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
0001434C 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
00014350 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00014354 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00014358 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
0001435C 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00014360 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00014364 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00014368 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
0001436C 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00014370 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00014378 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
0001437C 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00014380 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00014386 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
0001438C 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00014390 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00014398 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
0001439C 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
000143A0 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
000143A4 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
000143AE 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
000143B2 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
000143B6 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
000143BA 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
000143C2 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
000143C6                            		even
000143C6                            		even
000143C6                            
000143C6                            ; ---------------------------------------------------------------------------
000143C6                            ; Sonic	pattern	loading	subroutine
000143C6                            ; ---------------------------------------------------------------------------
000143C6                            
000143C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000143C6                            Player_DPLC:
000143C6 0000 0000                  	dc.l	SonicDynPLC
000143CA 0000 0000                  	dc.l	SonicDynPLC ; gronic
000143CE                            	; add pointers for player dplc here
000143CE                            Player_Art:
000143CE 0000 0000                  	dc.l	Art_Sonic
000143D2 0000 0000                  	dc.l	Art_Sonic ; gronic
000143D6                            	; add pointers for player art here
000143D6                            
000143D6                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
000143D6 7000                       		moveq	#0,d0
000143D8 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000143DC B038 F766                  		cmp.b	($FFFFF766).w,d0
000143E0 6700                       		beq.s	locret_13C96
000143E2 11C0 F766                  		move.b	d0,($FFFFF766).w
000143E6                            		
000143E6 323C 0000                  		move.w	#0,d1
000143EA 1238 FFE8                  		move.b	(v_character),d1
000143EE E549                       		lsl.w	#2,d1
000143F0 45FA FFD4                  		lea 	Player_DPLC(pc),a2
000143F4                            
000143F4 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
000143F8                            		
000143F8 D040                       		add.w	d0,d0
000143FA D4F2 0000                  		adda.w	(a2,d0.w),a2
000143FE 7200                       		moveq	#0,d1
00014400 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00014402 5301                       		subq.b	#1,d1
00014404 6B00                       		bmi.s	locret_13C96
00014406 47F8 C800                  		lea	($FFFFC800).w,a3
0001440A 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00014410                            
00014410                            SPLC_ReadEntry:
00014410 303C 0000                  		move.w	#0,d0
00014414 1038 FFE8                  		move.b	(v_character),d0
00014418 E548                       		lsl.w	#2,d0
0001441A 43FA FFB2                  		lea 	Player_Art(pc),a1
0001441E                            
0001441E 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
00014422                            
00014422 7400                       		moveq	#0,d2
00014424 141A                       		move.b	(a2)+,d2
00014426 3002                       		move.w	d2,d0
00014428 E808                       		lsr.b	#4,d0
0001442A E14A                       		lsl.w	#8,d2
0001442C 141A                       		move.b	(a2)+,d2
0001442E EB4A                       		lsl.w	#5,d2
00014430 D3C2                       		adda.l	d2,a1
00014432                            
00014432                            SPLC_LoadTile:
00014432 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00014436 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
0001443A 47EB 0020                  		lea	$20(a3),a3	; next tile
0001443E 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00014442                            
00014442 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00014446                            
00014446                            locret_13C96:
00014446 4E75                       		rts	
00014448                            ; End of function LoadSonicDynPLC
00014448                            
00014448                            ; ===========================================================================
00014448                            ; ---------------------------------------------------------------------------
00014448                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00014448                            ; ---------------------------------------------------------------------------
00014448                            
00014448                            Obj0A:					; XREF: Obj_Index
00014448 7000                       		moveq	#0,d0
0001444A 1028 0024                  		move.b	$24(a0),d0
0001444E 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00014452 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00014456                            ; ===========================================================================
00014456 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
0001445A 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
0001445E 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00014462 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00014466 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00014468                            ; ===========================================================================
00014468                            
00014468                            Obj0A_Main:				; XREF: Obj0A_Index
00014468 5428 0024                  		addq.b	#2,$24(a0)
0001446C 217C 0001 3070 0004        		move.l	#Map_obj64,4(a0)
00014474 317C 8348 0002             		move.w	#$8348,2(a0)
0001447A 117C 0084 0001             		move.b	#$84,1(a0)
00014480 117C 0010 0019             		move.b	#$10,$19(a0)
00014486 117C 0001 0018             		move.b	#1,$18(a0)
0001448C 1028 0028                  		move.b	$28(a0),d0
00014490 6A00                       		bpl.s	loc_13D00
00014492 5028 0024                  		addq.b	#8,$24(a0)
00014496 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
0001449E 317C 0440 0002             		move.w	#$440,2(a0)
000144A4 0240 007F                  		andi.w	#$7F,d0
000144A8 1140 0033                  		move.b	d0,$33(a0)
000144AC 6000 0000                  		bra.w	Obj0A_Countdown
000144B0                            ; ===========================================================================
000144B0                            
000144B0                            loc_13D00:
000144B0 1140 001C                  		move.b	d0,$1C(a0)
000144B4 3168 0008 0030             		move.w	8(a0),$30(a0)
000144BA 317C FF78 0012             		move.w	#-$88,$12(a0)
000144C0                            
000144C0                            Obj0A_Animate:				; XREF: Obj0A_Index
000144C0 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000144C6 4EB9 0000 AD9E             		jsr	AnimateSprite
000144CC                            
000144CC                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000144CC 3038 F646                  		move.w	($FFFFF646).w,d0
000144D0 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000144D4 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000144D6 117C 0006 0024             		move.b	#6,$24(a0)
000144DC 5E28 001C                  		addq.b	#7,$1C(a0)
000144E0 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
000144E6 6700                       		beq.s	Obj0A_Display
000144E8 6000                       		bra.s	Obj0A_Display
000144EA                            ; ===========================================================================
000144EA                            
000144EA                            Obj0A_Wobble:
000144EA 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000144EE 6700                       		beq.s	loc_13D44
000144F0 5868 0030                  		addq.w	#4,$30(a0)
000144F4                            
000144F4                            loc_13D44:
000144F4 1028 0026                  		move.b	$26(a0),d0
000144F8 5228 0026                  		addq.b	#1,$26(a0)
000144FC 0240 007F                  		andi.w	#$7F,d0
00014500 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014506 1031 0000                  		move.b	(a1,d0.w),d0
0001450A 4880                       		ext.w	d0
0001450C D068 0030                  		add.w	$30(a0),d0
00014510 3140 0008                  		move.w	d0,8(a0)
00014514 6100                       		bsr.s	Obj0A_ShowNumber
00014516 4EBA 97A0                  		jsr	SpeedToPos
0001451A 4A28 0001                  		tst.b	1(a0)
0001451E 6A00                       		bpl.s	Obj0A_Delete
00014520 4EFA 97BC                  		jmp	DisplaySprite
00014524                            ; ===========================================================================
00014524                            
00014524                            Obj0A_Delete:
00014524 4EFA 97F4                  		jmp	DeleteObject
00014528                            ; ===========================================================================
00014528                            
00014528                            Obj0A_Display:				; XREF: Obj0A_Index
00014528 6100                       		bsr.s	Obj0A_ShowNumber
0001452A 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014530 4EB9 0000 AD9E             		jsr	AnimateSprite
00014536 4EFA 97A6                  		jmp	DisplaySprite
0001453A                            ; ===========================================================================
0001453A                            
0001453A                            Obj0A_Delete2:				; XREF: Obj0A_Index
0001453A 4EFA 97DE                  		jmp	DeleteObject
0001453E                            ; ===========================================================================
0001453E                            
0001453E                            Obj0A_AirLeft:				; XREF: Obj0A_Index
0001453E 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00014544 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00014546 5368 0038                  		subq.w	#1,$38(a0)
0001454A 6600                       		bne.s	Obj0A_Display2
0001454C 117C 000E 0024             		move.b	#$E,$24(a0)
00014552 5E28 001C                  		addq.b	#7,$1C(a0)
00014556 60D0                       		bra.s	Obj0A_Display
00014558                            ; ===========================================================================
00014558                            
00014558                            Obj0A_Display2:
00014558 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001455E 4EB9 0000 AD9E             		jsr	AnimateSprite
00014564 4A28 0001                  		tst.b	1(a0)
00014568 6A00                       		bpl.s	Obj0A_Delete3
0001456A 4EFA 9772                  		jmp	DisplaySprite
0001456E                            ; ===========================================================================
0001456E                            
0001456E                            Obj0A_Delete3:
0001456E 4EFA 97AA                  		jmp	DeleteObject
00014572                            ; ===========================================================================
00014572                            
00014572                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00014572 4A68 0038                  		tst.w	$38(a0)
00014576 6700                       		beq.s	locret_13E1A
00014578 5368 0038                  		subq.w	#1,$38(a0)
0001457C 6600                       		bne.s	locret_13E1A
0001457E 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00014584 6400                       		bcc.s	locret_13E1A
00014586 317C 000F 0038             		move.w	#$F,$38(a0)
0001458C 4268 0012                  		clr.w	$12(a0)
00014590 117C 0080 0001             		move.b	#$80,1(a0)
00014596 3028 0008                  		move.w	8(a0),d0
0001459A 9078 F700                  		sub.w	($FFFFF700).w,d0
0001459E 0640 0080                  		addi.w	#$80,d0
000145A2 3140 0008                  		move.w	d0,8(a0)
000145A6 3028 000C                  		move.w	$C(a0),d0
000145AA 9078 F704                  		sub.w	($FFFFF704).w,d0
000145AE 0640 0080                  		addi.w	#$80,d0
000145B2 3140 000A                  		move.w	d0,$A(a0)
000145B6 117C 000C 0024             		move.b	#$C,$24(a0)
000145BC                            
000145BC                            locret_13E1A:
000145BC 4E75                       		rts	
000145BE                            ; ===========================================================================
000145BE                            Obj0A_WobbleData:
000145BE 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000145CF 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
000145E0 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
000145F1 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00014601 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001460E FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001461B FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014628 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00014635 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
0001463E                            ; ===========================================================================
0001463E                            
0001463E                            Obj0A_Countdown:			; XREF: Obj0A_Index
0001463E 4A68 002C                  		tst.w	$2C(a0)
00014642 6600 0000                  		bne.w	loc_13F86
00014646 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001464C 6400 0000                  		bcc.w	locret_1408C
00014650 0838 0006 D022             		btst	#6,($FFFFD022).w
00014656 6700 0000                  		beq.w	locret_1408C
0001465A 5368 0038                  		subq.w	#1,$38(a0)
0001465E 6A00 0000                  		bpl.w	loc_13FAC
00014662 317C 003B 0038             		move.w	#59,$38(a0)
00014668 317C 0001 0036             		move.w	#1,$36(a0)
0001466E 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00014674 0240 0001                  		andi.w	#1,d0
00014678 1140 0034                  		move.b	d0,$34(a0)
0001467C 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00014680 0C40 0019                  		cmpi.w	#$19,d0
00014684 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00014686 0C40 0014                  		cmpi.w	#$14,d0
0001468A 6700                       		beq.s	Obj0A_WarnSound
0001468C 0C40 000F                  		cmpi.w	#$F,d0
00014690 6700                       		beq.s	Obj0A_WarnSound
00014692 0C40 000C                  		cmpi.w	#$C,d0
00014696 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00014698 6600                       		bne.s	loc_13F02
0001469A 303C 0092                  		move.w	#$92,d0
0001469E 4EB9 0000 15BA             		jsr	(PlaySound).l	; play countdown music
000146A4                            
000146A4                            loc_13F02:
000146A4 5328 0032                  		subq.b	#1,$32(a0)
000146A8 6A00                       		bpl.s	Obj0A_ReduceAir
000146AA 1168 0033 0032             		move.b	$33(a0),$32(a0)
000146B0 08E8 0007 0036             		bset	#7,$36(a0)
000146B6 6000                       		bra.s	Obj0A_ReduceAir
000146B8                            ; ===========================================================================
000146B8                            
000146B8                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000146B8 303C 00C2                  		move.w	#$C2,d0
000146BC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000146C2                            
000146C2                            Obj0A_ReduceAir:
000146C2 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000146C6 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000146CA 6100 0000                  		bsr.w	ResumeMusic
000146CE 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000146D4 303C 00B2                  		move.w	#$B2,d0
000146D8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play drowning sound
000146DE 117C 000A 0034             		move.b	#$A,$34(a0)
000146E4 317C 0001 0036             		move.w	#1,$36(a0)
000146EA 317C 0078 002C             		move.w	#$78,$2C(a0)
000146F0 2F08                       		move.l	a0,-(sp)
000146F2 41F8 D000                  		lea	($FFFFD000).w,a0
000146F6 6100 F824                  		bsr.w	Sonic_ResetOnFloor
000146FA 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014700 08E8 0001 0022             		bset	#1,$22(a0)
00014706 08E8 0007 0002             		bset	#7,2(a0)
0001470C 317C 0000 0012             		move.w	#0,$12(a0)
00014712 317C 0000 0010             		move.w	#0,$10(a0)
00014718 317C 0000 0014             		move.w	#0,$14(a0)
0001471E 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014724 205F                       		movea.l	(sp)+,a0
00014726 4E75                       		rts	
00014728                            ; ===========================================================================
00014728                            
00014728                            loc_13F86:
00014728 5368 002C                  		subq.w	#1,$2C(a0)
0001472C 6600                       		bne.s	loc_13F94
0001472E 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014734 4E75                       		rts	
00014736                            ; ===========================================================================
00014736                            
00014736                            loc_13F94:
00014736 2F08                       		move.l	a0,-(sp)
00014738 41F8 D000                  		lea	($FFFFD000).w,a0
0001473C 4EBA 957A                  		jsr	SpeedToPos
00014740 0668 0010 0012             		addi.w	#$10,$12(a0)
00014746 205F                       		movea.l	(sp)+,a0
00014748 6000                       		bra.s	loc_13FAC
0001474A                            ; ===========================================================================
0001474A                            
0001474A                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
0001474A 6000                       		bra.s	Obj0A_MakeItem
0001474C                            ; ===========================================================================
0001474C                            
0001474C                            loc_13FAC:
0001474C 4A68 0036                  		tst.w	$36(a0)
00014750 6700 0000                  		beq.w	locret_1408C
00014754 5368 003A                  		subq.w	#1,$3A(a0)
00014758 6A00 0000                  		bpl.w	locret_1408C
0001475C                            
0001475C                            Obj0A_MakeItem:
0001475C 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00014762 0240 000F                  		andi.w	#$F,d0
00014766 3140 003A                  		move.w	d0,$3A(a0)
0001476A 4EBA 99F8                  		jsr	SingleObjLoad
0001476E 6600 0000                  		bne.w	locret_1408C
00014772 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014776 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
0001477C 7006                       		moveq	#6,d0
0001477E 0838 0000 D022             		btst	#0,($FFFFD022).w
00014784 6700                       		beq.s	loc_13FF2
00014786 4440                       		neg.w	d0
00014788 137C 0040 0026             		move.b	#$40,$26(a1)
0001478E                            
0001478E                            loc_13FF2:
0001478E D169 0008                  		add.w	d0,8(a1)
00014792 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00014798 137C 0006 0028             		move.b	#6,$28(a1)
0001479E 4A68 002C                  		tst.w	$2C(a0)
000147A2 6700 0000                  		beq.w	loc_1403E
000147A6 0268 0007 003A             		andi.w	#7,$3A(a0)
000147AC 0668 0000 003A             		addi.w	#0,$3A(a0)
000147B2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000147B6 0440 000C                  		subi.w	#$C,d0
000147BA 3340 000C                  		move.w	d0,$C(a1)
000147BE 4EB9 0000 2C3E             		jsr	(RandomNumber).l
000147C4 1340 0026                  		move.b	d0,$26(a1)
000147C8 3038 FE04                  		move.w	($FFFFFE04).w,d0
000147CC 0200 0003                  		andi.b	#3,d0
000147D0 6600                       		bne.s	loc_14082
000147D2 137C 000E 0028             		move.b	#$E,$28(a1)
000147D8 6000                       		bra.s	loc_14082
000147DA                            ; ===========================================================================
000147DA                            
000147DA                            loc_1403E:
000147DA 0828 0007 0036             		btst	#7,$36(a0)
000147E0 6700                       		beq.s	loc_14082
000147E2 3438 FE14                  		move.w	($FFFFFE14).w,d2
000147E6 E24A                       		lsr.w	#1,d2
000147E8 4EB9 0000 2C3E             		jsr	(RandomNumber).l
000147EE 0240 0003                  		andi.w	#3,d0
000147F2 6600                       		bne.s	loc_1406A
000147F4 08E8 0006 0036             		bset	#6,$36(a0)
000147FA 6600                       		bne.s	loc_14082
000147FC 1342 0028                  		move.b	d2,$28(a1)
00014800 337C 001C 0038             		move.w	#$1C,$38(a1)
00014806                            
00014806                            loc_1406A:
00014806 4A28 0034                  		tst.b	$34(a0)
0001480A 6600                       		bne.s	loc_14082
0001480C 08E8 0006 0036             		bset	#6,$36(a0)
00014812 6600                       		bne.s	loc_14082
00014814 1342 0028                  		move.b	d2,$28(a1)
00014818 337C 001C 0038             		move.w	#$1C,$38(a1)
0001481E                            
0001481E                            loc_14082:
0001481E 5328 0034                  		subq.b	#1,$34(a0)
00014822 6A00                       		bpl.s	locret_1408C
00014824 4268 0036                  		clr.w	$36(a0)
00014828                            
00014828                            locret_1408C:
00014828 4E75                       		rts	
0001482A                            
0001482A                            ; ---------------------------------------------------------------------------
0001482A                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
0001482A                            ; ---------------------------------------------------------------------------
0001482A                            
0001482A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001482A                            
0001482A                            
0001482A                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
0001482A 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014830                             
00014830                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00014830                             
00014830 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014834                             
00014834 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0001483A 6600                       		bne.s	Air_GetBgm2	; if not, branch
0001483C 43F9 0000 3BDA             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00014842 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014844                             
00014844                            Air_GetBgm2:
00014844 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0001484A 6600                       		bne.s	Air_GetBgm3	; if not, branch
0001484C 43F9 0000 3BE2             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00014852 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014854                             
00014854                            Air_GetBgm3:
00014854 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001485A 6600                       		bne.s	Air_GetBgm4	; if not, branch
0001485C 43F9 0000 3BE8             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00014862 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014864                             
00014864                            Air_GetBgm4:
00014864 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0001486A 6600                       		bne.s	Air_PlayMusic	; if not, branch
0001486C 43F9 0000 3BEE             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00014872                             
00014872                            Air_PlayMusic:
00014872 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00014876                             
00014876                            loc_140A6:
00014876 4EB9 0000 15BA             		jsr	(PlaySound).l
0001487C                             
0001487C                            ; NineKode ends here
0001487C                            
0001487C                            loc_140AC:
0001487C 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014882 4238 D372                  		clr.b	($FFFFD372).w
00014886 4E75                       		rts	
00014888                            ; End of function ResumeMusic
00014888                            
00014888                            ; ===========================================================================
00014888                            Ani_obj0A:
00014888                            	include "_anim\obj0A.asm"
00014888                            ; ---------------------------------------------------------------------------
00014888                            ; Animation script - countdown numbers and bubbles (LZ)
00014888                            ; ---------------------------------------------------------------------------
00014888 0000                       		dc.w byte_140D6-Ani_obj0A
0001488A 0000                       		dc.w byte_140E0-Ani_obj0A
0001488C 0000                       		dc.w byte_140EA-Ani_obj0A
0001488E 0000                       		dc.w byte_140F4-Ani_obj0A
00014890 0000                       		dc.w byte_140FE-Ani_obj0A
00014892 0000                       		dc.w byte_14108-Ani_obj0A
00014894 0000                       		dc.w byte_14112-Ani_obj0A
00014896 0000                       		dc.w byte_14118-Ani_obj0A
00014898 0000                       		dc.w byte_14120-Ani_obj0A
0001489A 0000                       		dc.w byte_14128-Ani_obj0A
0001489C 0000                       		dc.w byte_14130-Ani_obj0A
0001489E 0000                       		dc.w byte_14138-Ani_obj0A
000148A0 0000                       		dc.w byte_14140-Ani_obj0A
000148A2 0000                       		dc.w byte_14148-Ani_obj0A
000148A4 0000                       		dc.w byte_1414A-Ani_obj0A
000148A6 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
000148B0 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
000148BA 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
000148C4 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
000148CE 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
000148D8 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
000148E2 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
000148E8 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
000148F0 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
000148F8 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014900 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014908 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014910 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014918 0EFC                       byte_14148:	dc.b $E, $FC
0001491A 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014920                            		even
00014920                            		even
00014920                            
00014920                            ; ---------------------------------------------------------------------------
00014920                            ; Sprite mappings - drowning countdown numbers (LZ)
00014920                            ; ---------------------------------------------------------------------------
00014920                            Map_obj0A:
00014920                            	include "_maps\obj0A.asm"
00014920                            ; ---------------------------------------------------------------------------
00014920                            ; Sprite mappings - drowning countdown numbers (LZ)
00014920                            ; ---------------------------------------------------------------------------
00014920 0000                       		dc.w byte_14152-Map_obj0A
00014922 01                         byte_14152:	dc.b 1
00014923 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014928                            		even
00014928                            		even
00014928                            
00014928                            ; ===========================================================================
00014928                            ; ---------------------------------------------------------------------------
00014928                            ; Object 38 - shield and invincibility stars
00014928                            ; ---------------------------------------------------------------------------
00014928                            
00014928                            Obj38:					; XREF: Obj_Index
00014928 7000                       		moveq	#0,d0
0001492A 1028 0024                  		move.b	$24(a0),d0
0001492E 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014932 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014936                            ; ===========================================================================
00014936 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014938 0000                       		dc.w Obj38_Shield-Obj38_Index
0001493A 0000                       		dc.w Obj38_Stars-Obj38_Index
0001493C                            ; ===========================================================================
0001493C                            
0001493C                            Obj38_Main:				; XREF: Obj38_Index
0001493C 5428 0024                  		addq.b	#2,$24(a0)
00014940 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014948 117C 0004 0001             		move.b	#4,1(a0)
0001494E 117C 0001 0018             		move.b	#1,$18(a0)
00014954 117C 0010 0019             		move.b	#$10,$19(a0)
0001495A 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
0001495E 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014960 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014966 4E75                       		rts	
00014968                            ; ===========================================================================
00014968                            
00014968                            Obj38_DoStars:
00014968 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
0001496C 317C 055C 0002             		move.w	#$55C,2(a0)
00014972 4E75                       		rts	
00014974                            ; ===========================================================================
00014974                            
00014974                            Obj38_Shield:				; XREF: Obj38_Index
00014974 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014978 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
0001497A 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
0001497E 6700                       		beq.s	Obj38_Delete	; if not, branch
00014980 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014986 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001498C 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014992 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014998 4EB9 0000 AD9E             		jsr	AnimateSprite
0001499E 4EFA 933E                  		jmp	DisplaySprite
000149A2                            ; ===========================================================================
000149A2                            
000149A2                            Obj38_RmvShield:
000149A2 4E75                       		rts	
000149A4                            ; ===========================================================================
000149A4                            
000149A4                            Obj38_Delete:
000149A4 4EFA 9374                  		jmp	DeleteObject
000149A8                            ; ===========================================================================
000149A8                            
000149A8                            Obj38_Stars:				; XREF: Obj38_Index
000149A8 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000149AC 6700                       		beq.s	Obj38_Delete2	; if not, branch
000149AE 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000149B2 1228 001C                  		move.b	$1C(a0),d1
000149B6 5301                       		subq.b	#1,d1
000149B8 6000                       		bra.s	Obj38_StarTrail
000149BA                            ; ===========================================================================
000149BA E909                       		lsl.b	#4,d1
000149BC 5801                       		addq.b	#4,d1
000149BE 9001                       		sub.b	d1,d0
000149C0 1228 0030                  		move.b	$30(a0),d1
000149C4 9001                       		sub.b	d1,d0
000149C6 5801                       		addq.b	#4,d1
000149C8 0201 000F                  		andi.b	#$F,d1
000149CC 1141 0030                  		move.b	d1,$30(a0)
000149D0 6000                       		bra.s	Obj38_StarTrail2a
000149D2                            ; ===========================================================================
000149D2                            
000149D2                            Obj38_StarTrail:			; XREF: Obj38_Stars
000149D2 E709                       		lsl.b	#3,d1
000149D4 1401                       		move.b	d1,d2
000149D6 D201                       		add.b	d1,d1
000149D8 D202                       		add.b	d2,d1
000149DA 5801                       		addq.b	#4,d1
000149DC 9001                       		sub.b	d1,d0
000149DE 1228 0030                  		move.b	$30(a0),d1
000149E2 9001                       		sub.b	d1,d0
000149E4 5801                       		addq.b	#4,d1
000149E6 0C01 0018                  		cmpi.b	#$18,d1
000149EA 6500                       		bcs.s	Obj38_StarTrail2
000149EC 7200                       		moveq	#0,d1
000149EE                            
000149EE                            Obj38_StarTrail2:
000149EE 1141 0030                  		move.b	d1,$30(a0)
000149F2                            
000149F2                            Obj38_StarTrail2a:
000149F2 43F8 CB00                  		lea	($FFFFCB00).w,a1
000149F6 43F1 0000                  		lea	(a1,d0.w),a1
000149FA 3159 0008                  		move.w	(a1)+,8(a0)
000149FE 3159 000C                  		move.w	(a1)+,$C(a0)
00014A02 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014A08 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014A0E 4EB9 0000 AD9E             		jsr	AnimateSprite
00014A14 4EFA 92C8                  		jmp	DisplaySprite
00014A18                            ; ===========================================================================
00014A18                            
00014A18                            Obj38_Delete2:				; XREF: Obj38_Stars
00014A18 4EFA 9300                  		jmp	DeleteObject
00014A1C                            ; ===========================================================================
00014A1C                            ; ---------------------------------------------------------------------------
00014A1C                            ; Object 4A - special stage entry from beta
00014A1C                            ; ---------------------------------------------------------------------------
00014A1C                            
00014A1C                            Obj4A:					; XREF: Obj_Index
00014A1C 7000                       		moveq	#0,d0
00014A1E 1028 0024                  		move.b	$24(a0),d0
00014A22 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014A26 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014A2A                            ; ===========================================================================
00014A2A 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014A2C 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014A2E 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014A30                            ; ===========================================================================
00014A30                            
00014A30                            Obj4A_Main:				; XREF: Obj4A_Index
00014A30 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014A34 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014A36 4E75                       		rts	
00014A38                            ; ===========================================================================
00014A38                            
00014A38                            Obj4A_Main2:
00014A38 5428 0024                  		addq.b	#2,$24(a0)
00014A3C 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014A44 117C 0004 0001             		move.b	#4,1(a0)
00014A4A 117C 0001 0018             		move.b	#1,$18(a0)
00014A50 117C 0038 0019             		move.b	#$38,$19(a0)
00014A56 317C 0541 0002             		move.w	#$541,2(a0)
00014A5C 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014A62                            
00014A62                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014A62 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014A68 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014A6E 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014A74 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014A7A 4EB9 0000 AD9E             		jsr	AnimateSprite
00014A80 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014A86 6600                       		bne.s	Obj4A_Display
00014A88 4A38 D000                  		tst.b	($FFFFD000).w
00014A8C 6700                       		beq.s	Obj4A_Display
00014A8E 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014A94 303C 00A8                  		move.w	#$A8,d0
00014A98 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014A9E                            
00014A9E                            Obj4A_Display:
00014A9E 4EFA 923E                  		jmp	DisplaySprite
00014AA2                            ; ===========================================================================
00014AA2                            
00014AA2                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014AA2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014AA6 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014AA8 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014AAE 4EFA 926A                  		jmp	DeleteObject
00014AB2                            ; ===========================================================================
00014AB2                            
00014AB2                            Obj4A_Wait:
00014AB2 4E75                       		rts	
00014AB4                            ; ===========================================================================
00014AB4                            ; ---------------------------------------------------------------------------
00014AB4                            ; Object 08 - water splash (LZ)
00014AB4                            ; ---------------------------------------------------------------------------
00014AB4                            
00014AB4                            Obj08:					; XREF: Obj_Index
00014AB4 7000                       		moveq	#0,d0
00014AB6 1028 0024                  		move.b	$24(a0),d0
00014ABA 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014ABE 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014AC2                            ; ===========================================================================
00014AC2 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014AC4 0000                       		dc.w Obj08_Display-Obj08_Index
00014AC6 0000                       		dc.w Obj08_Delete-Obj08_Index
00014AC8                            ; ===========================================================================
00014AC8                            
00014AC8                            Obj08_Main:				; XREF: Obj08_Index
00014AC8 5428 0024                  		addq.b	#2,$24(a0)
00014ACC 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014AD4 0028 0004 0001             		ori.b	#4,1(a0)
00014ADA 117C 0001 0018             		move.b	#1,$18(a0)
00014AE0 117C 0010 0019             		move.b	#$10,$19(a0)
00014AE6 317C 4259 0002             		move.w	#$4259,2(a0)
00014AEC 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014AF2                            
00014AF2                            Obj08_Display:				; XREF: Obj08_Index
00014AF2 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014AF8 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014AFE 4EB9 0000 AD9E             		jsr	AnimateSprite
00014B04 4EFA 91D8                  		jmp	DisplaySprite
00014B08                            ; ===========================================================================
00014B08                            
00014B08                            Obj08_Delete:				; XREF: Obj08_Index
00014B08 4EFA 9210                  		jmp	DeleteObject	; delete when animation	is complete
00014B0C                            ; ===========================================================================
00014B0C                            Ani_obj38:
00014B0C                            	include "_anim\obj38.asm"
00014B0C                            ; ---------------------------------------------------------------------------
00014B0C                            ; Animation script - shield and invincibility stars
00014B0C                            ; ---------------------------------------------------------------------------
00014B0C 0000                       		dc.w byte_14356-Ani_obj38
00014B0E 0000                       		dc.w byte_1435E-Ani_obj38
00014B10 0000                       		dc.w byte_14364-Ani_obj38
00014B12 0000                       		dc.w byte_1437E-Ani_obj38
00014B14 0000                       		dc.w byte_14398-Ani_obj38
00014B16 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014B1E 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014B24 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014B35 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014B3E 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014B4F 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014B58 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014B69 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014B72                            		even
00014B72                            		even
00014B72                            
00014B72                            ; ---------------------------------------------------------------------------
00014B72                            ; Sprite mappings - shield and invincibility stars
00014B72                            ; ---------------------------------------------------------------------------
00014B72                            Map_obj38:
00014B72                            	include "_maps\obj38.asm"
00014B72                            ; ---------------------------------------------------------------------------
00014B72                            ; Sprite mappings - shield and invincibility stars
00014B72                            ; ---------------------------------------------------------------------------
00014B72 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014B76 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014B7A 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014B7E 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014B82 04                         byte_143C2:	dc.b 4
00014B83 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014B88 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014B8D 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014B92 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014B97 04                         byte_143D7:	dc.b 4
00014B98 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014B9D E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014BA2 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014BA7 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014BAC 04                         byte_143EC:	dc.b 4
00014BAD E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014BB2 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014BB7 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014BBC 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014BC1 04                         byte_14401:	dc.b 4
00014BC2 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014BC7 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014BCC 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014BD1 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014BD6 04                         byte_14416:	dc.b 4
00014BD7 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014BDC E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014BE1 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014BE6 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014BEB 04                         byte_1442B:	dc.b 4
00014BEC E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014BF1 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014BF6 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014BFB 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014C00 04                         byte_14440:	dc.b 4
00014C01 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014C06 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014C0B 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014C10 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014C16 00                         		even
00014C16 00                         		even
00014C16                            
00014C16                            Ani_obj4A:
00014C16                            	include "_anim\obj4A.asm"
00014C16                            ; ---------------------------------------------------------------------------
00014C16                            ; Animation script - special stage entry effect from beta
00014C16                            ; ---------------------------------------------------------------------------
00014C16 0000                       		dc.w byte_14458-Ani_obj4A
00014C18 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014C2C                            		even
00014C2C                            		even
00014C2C                            
00014C2C                            ; ---------------------------------------------------------------------------
00014C2C                            ; Sprite mappings - special stage entry	from beta
00014C2C                            ; ---------------------------------------------------------------------------
00014C2C                            Map_obj4A:
00014C2C                            	include "_maps\obj4A.asm"
00014C2C                            ; ---------------------------------------------------------------------------
00014C2C                            ; Sprite mappings - special stage entry	from beta
00014C2C                            ; ---------------------------------------------------------------------------
00014C2C 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014C30 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014C34 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014C38 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014C3C 03                         byte_1447C:	dc.b 3
00014C3D F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014C42 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014C47 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014C4C 03                         byte_1448C:	dc.b 3
00014C4D F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014C52 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014C57 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014C5C 05                         byte_1449C:	dc.b 5
00014C5D E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014C62 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014C67 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014C6C 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014C71 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014C76 09                         byte_144B6:	dc.b 9
00014C77 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014C7C F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014C81 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014C86 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014C8B F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014C90 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014C95 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014C9A 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014C9F F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014CA4 12                         byte_144E4:	dc.b $12
00014CA5 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014CAA F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014CAF F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014CB4 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014CB9 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014CBE 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014CC3 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014CC8 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014CCD 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014CD2 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014CD7 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014CDC 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014CE1 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014CE6 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014CEB 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014CF0 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014CF5 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014CFA F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014CFF 11                         byte_1453F:	dc.b $11
00014D00 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014D05 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014D0A 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014D0F 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014D14 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014D19 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014D1E 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014D23 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014D28 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014D2D 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014D32 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014D37 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014D3C F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014D41 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014D46 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014D4B 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014D50 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014D55 09                         byte_14595:	dc.b 9
00014D56 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014D5B 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014D60 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014D65 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014D6A FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014D6F FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014D74 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014D79 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014D7E 04                         		dc.b 4
00014D7F 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014D84                            		even
00014D84                            		even
00014D84                            
00014D84                            Ani_obj08:
00014D84                            	include "_anim\obj08.asm"
00014D84                            ; ---------------------------------------------------------------------------
00014D84                            ; Animation script - water splash (LZ)
00014D84                            ; ---------------------------------------------------------------------------
00014D84 0000                       		dc.w byte_145C6-Ani_obj08
00014D86 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014D8C                            		even
00014D8C                            		even
00014D8C                            
00014D8C                            ; ---------------------------------------------------------------------------
00014D8C                            ; Sprite mappings - water splash (LZ)
00014D8C                            ; ---------------------------------------------------------------------------
00014D8C                            Map_obj08:
00014D8C                            	include "_maps\obj08.asm"
00014D8C                            ; ---------------------------------------------------------------------------
00014D8C                            ; Sprite mappings - water splash (LZ)
00014D8C                            ; ---------------------------------------------------------------------------
00014D8C 0000                       		dc.w byte_145D2-Map_obj08
00014D8E 0000                       		dc.w byte_145DD-Map_obj08
00014D90 0000                       		dc.w byte_145E8-Map_obj08
00014D92 02                         byte_145D2:	dc.b 2
00014D93 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014D98 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014D9D 02                         byte_145DD:	dc.b 2
00014D9E E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014DA3 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014DA8 01                         byte_145E8:	dc.b 1
00014DA9 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014DAE                            		even
00014DAE                            		even
00014DAE                            
00014DAE                            ; ---------------------------------------------------------------------------
00014DAE                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014DAE                            ; ---------------------------------------------------------------------------
00014DAE                            
00014DAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DAE                            
00014DAE                            
00014DAE                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014DAE 0828 0003 0022             		btst	#3,$22(a0)
00014DB4 6700                       		beq.s	loc_14602
00014DB6 7000                       		moveq	#0,d0
00014DB8 11C0 F768                  		move.b	d0,($FFFFF768).w
00014DBC 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014DC0 4E75                       		rts	
00014DC2                            ; ===========================================================================
00014DC2                            
00014DC2                            loc_14602:
00014DC2 7003                       		moveq	#3,d0
00014DC4 11C0 F768                  		move.b	d0,($FFFFF768).w
00014DC8 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014DCC 1028 0026                  		move.b	$26(a0),d0
00014DD0 0600 0020                  		addi.b	#$20,d0
00014DD4 6A00                       		bpl.s	loc_14624
00014DD6 1028 0026                  		move.b	$26(a0),d0
00014DDA 6A00                       		bpl.s	loc_1461E
00014DDC 5300                       		subq.b	#1,d0
00014DDE                            
00014DDE                            loc_1461E:
00014DDE 0600 0020                  		addi.b	#$20,d0
00014DE2 6000                       		bra.s	loc_14630
00014DE4                            ; ===========================================================================
00014DE4                            
00014DE4                            loc_14624:
00014DE4 1028 0026                  		move.b	$26(a0),d0
00014DE8 6A00                       		bpl.s	loc_1462C
00014DEA 5200                       		addq.b	#1,d0
00014DEC                            
00014DEC                            loc_1462C:
00014DEC 0600 001F                  		addi.b	#$1F,d0
00014DF0                            
00014DF0                            loc_14630:
00014DF0 0200 00C0                  		andi.b	#$C0,d0
00014DF4 0C00 0040                  		cmpi.b	#$40,d0
00014DF8 6700 0000                  		beq.w	Sonic_WalkVertL
00014DFC 0C00 0080                  		cmpi.b	#$80,d0
00014E00 6700 0000                  		beq.w	Sonic_WalkCeiling
00014E04 0C00 00C0                  		cmpi.b	#$C0,d0
00014E08 6700 0000                  		beq.w	Sonic_WalkVertR
00014E0C 3428 000C                  		move.w	$C(a0),d2
00014E10 3628 0008                  		move.w	8(a0),d3
00014E14 7000                       		moveq	#0,d0
00014E16 1028 0016                  		move.b	$16(a0),d0
00014E1A 4880                       		ext.w	d0
00014E1C D440                       		add.w	d0,d2
00014E1E 1028 0017                  		move.b	$17(a0),d0
00014E22 4880                       		ext.w	d0
00014E24 D640                       		add.w	d0,d3
00014E26 49F8 F768                  		lea	($FFFFF768).w,a4
00014E2A 367C 0010                  		movea.w	#$10,a3
00014E2E 3C3C 0000                  		move.w	#0,d6
00014E32 7A0D                       		moveq	#$D,d5
00014E34 6100 0000                  		bsr.w	FindFloor
00014E38 3F01                       		move.w	d1,-(sp)
00014E3A 3428 000C                  		move.w	$C(a0),d2
00014E3E 3628 0008                  		move.w	8(a0),d3
00014E42 7000                       		moveq	#0,d0
00014E44 1028 0016                  		move.b	$16(a0),d0
00014E48 4880                       		ext.w	d0
00014E4A D440                       		add.w	d0,d2
00014E4C 1028 0017                  		move.b	$17(a0),d0
00014E50 4880                       		ext.w	d0
00014E52 4440                       		neg.w	d0
00014E54 D640                       		add.w	d0,d3
00014E56 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014E5A 367C 0010                  		movea.w	#$10,a3
00014E5E 3C3C 0000                  		move.w	#0,d6
00014E62 7A0D                       		moveq	#$D,d5
00014E64 6100 0000                  		bsr.w	FindFloor
00014E68 301F                       		move.w	(sp)+,d0
00014E6A 6100 0000                  		bsr.w	Sonic_Angle
00014E6E 4A41                       		tst.w	d1
00014E70 6700                       		beq.s	locret_146BE
00014E72 6A00                       		bpl.s	loc_146C0
00014E74 0C41 FFF2                  		cmpi.w	#-$E,d1
00014E78 6D00                       		blt.s	locret_146E6
00014E7A D368 000C                  		add.w	d1,$C(a0)
00014E7E                            
00014E7E                            locret_146BE:
00014E7E 4E75                       		rts	
00014E80                            ; ===========================================================================
00014E80                            
00014E80                            loc_146C0:
00014E80 0C41 000E                  		cmpi.w	#$E,d1
00014E84 6E00                       		bgt.s	loc_146CC
00014E86                            
00014E86                            loc_146C6:
00014E86 D368 000C                  		add.w	d1,$C(a0)
00014E8A 4E75                       		rts	
00014E8C                            ; ===========================================================================
00014E8C                            
00014E8C                            loc_146CC:
00014E8C 4A28 0038                  		tst.b	$38(a0)
00014E90 66F4                       		bne.s	loc_146C6
00014E92 08E8 0001 0022             		bset	#1,$22(a0)
00014E98 08A8 0005 0022             		bclr	#5,$22(a0)
00014E9E 117C 0001 001D             		move.b	#1,$1D(a0)
00014EA4 4E75                       		rts	
00014EA6                            ; ===========================================================================
00014EA6                            
00014EA6                            locret_146E6:
00014EA6 4E75                       		rts	
00014EA8                            ; End of function Sonic_AnglePos
00014EA8                            
00014EA8                            ; ===========================================================================
00014EA8 2428 0008                  		move.l	8(a0),d2
00014EAC 3028 0010                  		move.w	$10(a0),d0
00014EB0 48C0                       		ext.l	d0
00014EB2 E180                       		asl.l	#8,d0
00014EB4 9480                       		sub.l	d0,d2
00014EB6 2142 0008                  		move.l	d2,8(a0)
00014EBA 303C 0038                  		move.w	#$38,d0
00014EBE 48C0                       		ext.l	d0
00014EC0 E180                       		asl.l	#8,d0
00014EC2 9680                       		sub.l	d0,d3
00014EC4 2143 000C                  		move.l	d3,$C(a0)
00014EC8 4E75                       		rts	
00014ECA                            ; ===========================================================================
00014ECA                            
00014ECA                            locret_1470A:
00014ECA 4E75                       		rts	
00014ECC                            ; ===========================================================================
00014ECC 2628 000C                  		move.l	$C(a0),d3
00014ED0 3028 0012                  		move.w	$12(a0),d0
00014ED4 0440 0038                  		subi.w	#$38,d0
00014ED8 3140 0012                  		move.w	d0,$12(a0)
00014EDC 48C0                       		ext.l	d0
00014EDE E180                       		asl.l	#8,d0
00014EE0 9680                       		sub.l	d0,d3
00014EE2 2143 000C                  		move.l	d3,$C(a0)
00014EE6 4E75                       		rts	
00014EE8 4E75                       		rts	
00014EEA                            ; ===========================================================================
00014EEA 2428 0008                  		move.l	8(a0),d2
00014EEE 2628 000C                  		move.l	$C(a0),d3
00014EF2 3028 0010                  		move.w	$10(a0),d0
00014EF6 48C0                       		ext.l	d0
00014EF8 E180                       		asl.l	#8,d0
00014EFA 9480                       		sub.l	d0,d2
00014EFC 3028 0012                  		move.w	$12(a0),d0
00014F00 48C0                       		ext.l	d0
00014F02 E180                       		asl.l	#8,d0
00014F04 9680                       		sub.l	d0,d3
00014F06 2142 0008                  		move.l	d2,8(a0)
00014F0A 2143 000C                  		move.l	d3,$C(a0)
00014F0E 4E75                       		rts	
00014F10                            
00014F10                            ; ---------------------------------------------------------------------------
00014F10                            ; Subroutine to	change Sonic's angle as he walks along the floor
00014F10                            ; ---------------------------------------------------------------------------
00014F10                            
00014F10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F10                            
00014F10                            
00014F10                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00014F10 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014F14 B240                       		cmp.w	d0,d1
00014F16 6F00                       		ble.s	loc_1475E
00014F18 1438 F768                  		move.b	($FFFFF768).w,d2
00014F1C 3200                       		move.w	d0,d1
00014F1E                            
00014F1E                            loc_1475E:
00014F1E 0802 0000                  		btst	#0,d2
00014F22 6600                       		bne.s	loc_1476A
00014F24 1142 0026                  		move.b	d2,$26(a0)
00014F28 4E75                       		rts	
00014F2A                            ; ===========================================================================
00014F2A                            
00014F2A                            loc_1476A:
00014F2A 1428 0026                  		move.b	$26(a0),d2
00014F2E 0602 0020                  		addi.b	#$20,d2
00014F32 0202 00C0                  		andi.b	#$C0,d2
00014F36 1142 0026                  		move.b	d2,$26(a0)
00014F3A 4E75                       		rts	
00014F3C                            ; End of function Sonic_Angle
00014F3C                            
00014F3C                            ; ---------------------------------------------------------------------------
00014F3C                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00014F3C                            ; ---------------------------------------------------------------------------
00014F3C                            
00014F3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F3C                            
00014F3C                            
00014F3C                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00014F3C 3428 000C                  		move.w	$C(a0),d2
00014F40 3628 0008                  		move.w	8(a0),d3
00014F44 7000                       		moveq	#0,d0
00014F46 1028 0017                  		move.b	$17(a0),d0
00014F4A 4880                       		ext.w	d0
00014F4C 4440                       		neg.w	d0
00014F4E D440                       		add.w	d0,d2
00014F50 1028 0016                  		move.b	$16(a0),d0
00014F54 4880                       		ext.w	d0
00014F56 D640                       		add.w	d0,d3
00014F58 49F8 F768                  		lea	($FFFFF768).w,a4
00014F5C 367C 0010                  		movea.w	#$10,a3
00014F60 3C3C 0000                  		move.w	#0,d6
00014F64 7A0D                       		moveq	#$D,d5
00014F66 6100 0000                  		bsr.w	FindWall
00014F6A 3F01                       		move.w	d1,-(sp)
00014F6C 3428 000C                  		move.w	$C(a0),d2
00014F70 3628 0008                  		move.w	8(a0),d3
00014F74 7000                       		moveq	#0,d0
00014F76 1028 0017                  		move.b	$17(a0),d0
00014F7A 4880                       		ext.w	d0
00014F7C D440                       		add.w	d0,d2
00014F7E 1028 0016                  		move.b	$16(a0),d0
00014F82 4880                       		ext.w	d0
00014F84 D640                       		add.w	d0,d3
00014F86 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014F8A 367C 0010                  		movea.w	#$10,a3
00014F8E 3C3C 0000                  		move.w	#0,d6
00014F92 7A0D                       		moveq	#$D,d5
00014F94 6100 0000                  		bsr.w	FindWall
00014F98 301F                       		move.w	(sp)+,d0
00014F9A 6100 FF74                  		bsr.w	Sonic_Angle
00014F9E 4A41                       		tst.w	d1
00014FA0 6700                       		beq.s	locret_147F0
00014FA2 6A00                       		bpl.s	loc_147F2
00014FA4 0C41 FFF2                  		cmpi.w	#-$E,d1
00014FA8 6D00 FF20                  		blt.w	locret_1470A
00014FAC D368 0008                  		add.w	d1,8(a0)
00014FB0                            
00014FB0                            locret_147F0:
00014FB0 4E75                       		rts	
00014FB2                            ; ===========================================================================
00014FB2                            
00014FB2                            loc_147F2:
00014FB2 0C41 000E                  		cmpi.w	#$E,d1
00014FB6 6E00                       		bgt.s	loc_147FE
00014FB8                            
00014FB8                            loc_147F8:
00014FB8 D368 0008                  		add.w	d1,8(a0)
00014FBC 4E75                       		rts	
00014FBE                            ; ===========================================================================
00014FBE                            
00014FBE                            loc_147FE:
00014FBE 4A28 0038                  		tst.b	$38(a0)
00014FC2 66F4                       		bne.s	loc_147F8
00014FC4 08E8 0001 0022             		bset	#1,$22(a0)
00014FCA 08A8 0005 0022             		bclr	#5,$22(a0)
00014FD0 117C 0001 001D             		move.b	#1,$1D(a0)
00014FD6 4E75                       		rts	
00014FD8                            ; End of function Sonic_WalkVertR
00014FD8                            
00014FD8                            ; ---------------------------------------------------------------------------
00014FD8                            ; Subroutine allowing Sonic to walk upside-down
00014FD8                            ; ---------------------------------------------------------------------------
00014FD8                            
00014FD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FD8                            
00014FD8                            
00014FD8                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00014FD8 3428 000C                  		move.w	$C(a0),d2
00014FDC 3628 0008                  		move.w	8(a0),d3
00014FE0 7000                       		moveq	#0,d0
00014FE2 1028 0016                  		move.b	$16(a0),d0
00014FE6 4880                       		ext.w	d0
00014FE8 9440                       		sub.w	d0,d2
00014FEA 0A42 000F                  		eori.w	#$F,d2
00014FEE 1028 0017                  		move.b	$17(a0),d0
00014FF2 4880                       		ext.w	d0
00014FF4 D640                       		add.w	d0,d3
00014FF6 49F8 F768                  		lea	($FFFFF768).w,a4
00014FFA 367C FFF0                  		movea.w	#-$10,a3
00014FFE 3C3C 1000                  		move.w	#$1000,d6
00015002 7A0D                       		moveq	#$D,d5
00015004 6100 0000                  		bsr.w	FindFloor
00015008 3F01                       		move.w	d1,-(sp)
0001500A 3428 000C                  		move.w	$C(a0),d2
0001500E 3628 0008                  		move.w	8(a0),d3
00015012 7000                       		moveq	#0,d0
00015014 1028 0016                  		move.b	$16(a0),d0
00015018 4880                       		ext.w	d0
0001501A 9440                       		sub.w	d0,d2
0001501C 0A42 000F                  		eori.w	#$F,d2
00015020 1028 0017                  		move.b	$17(a0),d0
00015024 4880                       		ext.w	d0
00015026 9640                       		sub.w	d0,d3
00015028 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001502C 367C FFF0                  		movea.w	#-$10,a3
00015030 3C3C 1000                  		move.w	#$1000,d6
00015034 7A0D                       		moveq	#$D,d5
00015036 6100 0000                  		bsr.w	FindFloor
0001503A 301F                       		move.w	(sp)+,d0
0001503C 6100 FED2                  		bsr.w	Sonic_Angle
00015040 4A41                       		tst.w	d1
00015042 6700                       		beq.s	locret_14892
00015044 6A00                       		bpl.s	loc_14894
00015046 0C41 FFF2                  		cmpi.w	#-$E,d1
0001504A 6D00 FE5A                  		blt.w	locret_146E6
0001504E 9368 000C                  		sub.w	d1,$C(a0)
00015052                            
00015052                            locret_14892:
00015052 4E75                       		rts	
00015054                            ; ===========================================================================
00015054                            
00015054                            loc_14894:
00015054 0C41 000E                  		cmpi.w	#$E,d1
00015058 6E00                       		bgt.s	loc_148A0
0001505A                            
0001505A                            loc_1489A:
0001505A 9368 000C                  		sub.w	d1,$C(a0)
0001505E 4E75                       		rts	
00015060                            ; ===========================================================================
00015060                            
00015060                            loc_148A0:
00015060 4A28 0038                  		tst.b	$38(a0)
00015064 66F4                       		bne.s	loc_1489A
00015066 08E8 0001 0022             		bset	#1,$22(a0)
0001506C 08A8 0005 0022             		bclr	#5,$22(a0)
00015072 117C 0001 001D             		move.b	#1,$1D(a0)
00015078 4E75                       		rts	
0001507A                            ; End of function Sonic_WalkCeiling
0001507A                            
0001507A                            ; ---------------------------------------------------------------------------
0001507A                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
0001507A                            ; ---------------------------------------------------------------------------
0001507A                            
0001507A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001507A                            
0001507A                            
0001507A                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
0001507A 3428 000C                  		move.w	$C(a0),d2
0001507E 3628 0008                  		move.w	8(a0),d3
00015082 7000                       		moveq	#0,d0
00015084 1028 0017                  		move.b	$17(a0),d0
00015088 4880                       		ext.w	d0
0001508A 9440                       		sub.w	d0,d2
0001508C 1028 0016                  		move.b	$16(a0),d0
00015090 4880                       		ext.w	d0
00015092 9640                       		sub.w	d0,d3
00015094 0A43 000F                  		eori.w	#$F,d3
00015098 49F8 F768                  		lea	($FFFFF768).w,a4
0001509C 367C FFF0                  		movea.w	#-$10,a3
000150A0 3C3C 0800                  		move.w	#$800,d6
000150A4 7A0D                       		moveq	#$D,d5
000150A6 6100 0000                  		bsr.w	FindWall
000150AA 3F01                       		move.w	d1,-(sp)
000150AC 3428 000C                  		move.w	$C(a0),d2
000150B0 3628 0008                  		move.w	8(a0),d3
000150B4 7000                       		moveq	#0,d0
000150B6 1028 0017                  		move.b	$17(a0),d0
000150BA 4880                       		ext.w	d0
000150BC D440                       		add.w	d0,d2
000150BE 1028 0016                  		move.b	$16(a0),d0
000150C2 4880                       		ext.w	d0
000150C4 9640                       		sub.w	d0,d3
000150C6 0A43 000F                  		eori.w	#$F,d3
000150CA 49F8 F76A                  		lea	($FFFFF76A).w,a4
000150CE 367C FFF0                  		movea.w	#-$10,a3
000150D2 3C3C 0800                  		move.w	#$800,d6
000150D6 7A0D                       		moveq	#$D,d5
000150D8 6100 0000                  		bsr.w	FindWall
000150DC 301F                       		move.w	(sp)+,d0
000150DE 6100 FE30                  		bsr.w	Sonic_Angle
000150E2 4A41                       		tst.w	d1
000150E4 6700                       		beq.s	locret_14934
000150E6 6A00                       		bpl.s	loc_14936
000150E8 0C41 FFF2                  		cmpi.w	#-$E,d1
000150EC 6D00 FDDC                  		blt.w	locret_1470A
000150F0 9368 0008                  		sub.w	d1,8(a0)
000150F4                            
000150F4                            locret_14934:
000150F4 4E75                       		rts	
000150F6                            ; ===========================================================================
000150F6                            
000150F6                            loc_14936:
000150F6 0C41 000E                  		cmpi.w	#$E,d1
000150FA 6E00                       		bgt.s	loc_14942
000150FC                            
000150FC                            loc_1493C:
000150FC 9368 0008                  		sub.w	d1,8(a0)
00015100 4E75                       		rts	
00015102                            ; ===========================================================================
00015102                            
00015102                            loc_14942:
00015102 4A28 0038                  		tst.b	$38(a0)
00015106 66F4                       		bne.s	loc_1493C
00015108 08E8 0001 0022             		bset	#1,$22(a0)
0001510E 08A8 0005 0022             		bclr	#5,$22(a0)
00015114 117C 0001 001D             		move.b	#1,$1D(a0)
0001511A 4E75                       		rts	
0001511C                            ; End of function Sonic_WalkVertL
0001511C                            
0001511C                            ; ---------------------------------------------------------------------------
0001511C                            ; Subroutine to	find which tile	the object is standing on
0001511C                            ; ---------------------------------------------------------------------------
0001511C                            
0001511C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001511C                            
0001511C                            
0001511C                            Floor_ChkTile:				; XREF: FindFloor; et al
0001511C 3002                       		move.w	d2,d0
0001511E E248                       		lsr.w	#1,d0
00015120 0240 0380                  		andi.w	#$380,d0
00015124 3203                       		move.w	d3,d1
00015126 E049                       		lsr.w	#8,d1
00015128 0241 007F                  		andi.w	#$7F,d1
0001512C D041                       		add.w	d1,d0
0001512E 72FF                       		moveq	#-1,d1
00015130 43F8 A400                  		lea	($FFFFA400).w,a1
00015134 1231 0000                  		move.b	(a1,d0.w),d1
00015138 6700                       		beq.s	loc_14996
0001513A 6B00                       		bmi.s	loc_1499A
0001513C 5301                       		subq.b	#1,d1
0001513E 4881                       		ext.w	d1
00015140 EE59                       		ror.w	#7,d1
00015142 3002                       		move.w	d2,d0
00015144 D040                       		add.w	d0,d0
00015146 0240 01E0                  		andi.w	#$1E0,d0
0001514A D240                       		add.w	d0,d1
0001514C 3003                       		move.w	d3,d0
0001514E E648                       		lsr.w	#3,d0
00015150 0240 001E                  		andi.w	#$1E,d0
00015154 D240                       		add.w	d0,d1
00015156                            
00015156                            loc_14996:
00015156 2241                       		movea.l	d1,a1
00015158 4E75                       		rts	
0001515A                            ; ===========================================================================
0001515A                            
0001515A                            loc_1499A:
0001515A 0241 007F                  		andi.w	#$7F,d1
0001515E 0828 0006 0001             		btst	#6,1(a0)
00015164 6700                       		beq.s	loc_149B2
00015166 5241                       		addq.w	#1,d1
00015168 0C41 0029                  		cmpi.w	#$29,d1
0001516C 6600                       		bne.s	loc_149B2
0001516E 323C 0051                  		move.w	#$51,d1
00015172                            
00015172                            loc_149B2:
00015172 5301                       		subq.b	#1,d1
00015174 EE59                       		ror.w	#7,d1
00015176 3002                       		move.w	d2,d0
00015178 D040                       		add.w	d0,d0
0001517A 0240 01E0                  		andi.w	#$1E0,d0
0001517E D240                       		add.w	d0,d1
00015180 3003                       		move.w	d3,d0
00015182 E648                       		lsr.w	#3,d0
00015184 0240 001E                  		andi.w	#$1E,d0
00015188 D240                       		add.w	d0,d1
0001518A 2241                       		movea.l	d1,a1
0001518C 4E75                       		rts	
0001518E                            ; End of function Floor_ChkTile
0001518E                            
0001518E                            
0001518E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001518E                            
0001518E                            
0001518E                            FindFloor:				; XREF: Sonic_AnglePos; et al
0001518E 618C                       		bsr.s	Floor_ChkTile
00015190 3011                       		move.w	(a1),d0
00015192 3800                       		move.w	d0,d4
00015194 0240 07FF                  		andi.w	#$7FF,d0
00015198 6700                       		beq.s	loc_149DE
0001519A 0B04                       		btst	d5,d4
0001519C 6600                       		bne.s	loc_149EC
0001519E                            
0001519E                            loc_149DE:
0001519E D44B                       		add.w	a3,d2
000151A0 6100 0000                  		bsr.w	FindFloor2
000151A4 944B                       		sub.w	a3,d2
000151A6 0641 0010                  		addi.w	#$10,d1
000151AA 4E75                       		rts	
000151AC                            ; ===========================================================================
000151AC                            
000151AC                            loc_149EC:
000151AC 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
000151B0 1032 0000                  		move.b	(a2,d0.w),d0
000151B4 0240 00FF                  		andi.w	#$FF,d0
000151B8 67E4                       		beq.s	loc_149DE
000151BA 45F9 0000 0000             		lea	(AngleMap).l,a2
000151C0 18B2 0000                  		move.b	(a2,d0.w),(a4)
000151C4 E948                       		lsl.w	#4,d0
000151C6 3203                       		move.w	d3,d1
000151C8 0804 000B                  		btst	#$B,d4
000151CC 6700                       		beq.s	loc_14A12
000151CE 4641                       		not.w	d1
000151D0 4414                       		neg.b	(a4)
000151D2                            
000151D2                            loc_14A12:
000151D2 0804 000C                  		btst	#$C,d4
000151D6 6700                       		beq.s	loc_14A22
000151D8 0614 0040                  		addi.b	#$40,(a4)
000151DC 4414                       		neg.b	(a4)
000151DE 0414 0040                  		subi.b	#$40,(a4)
000151E2                            
000151E2                            loc_14A22:
000151E2 0241 000F                  		andi.w	#$F,d1
000151E6 D240                       		add.w	d0,d1
000151E8 45F9 0000 0000             		lea	(CollArray1).l,a2
000151EE 1032 1000                  		move.b	(a2,d1.w),d0
000151F2 4880                       		ext.w	d0
000151F4 BD44                       		eor.w	d6,d4
000151F6 0804 000C                  		btst	#$C,d4
000151FA 6700                       		beq.s	loc_14A3E
000151FC 4440                       		neg.w	d0
000151FE                            
000151FE                            loc_14A3E:
000151FE 4A40                       		tst.w	d0
00015200 679C                       		beq.s	loc_149DE
00015202 6B00                       		bmi.s	loc_14A5A
00015204 0C00 0010                  		cmpi.b	#$10,d0
00015208 6700                       		beq.s	loc_14A66
0001520A 3202                       		move.w	d2,d1
0001520C 0241 000F                  		andi.w	#$F,d1
00015210 D041                       		add.w	d1,d0
00015212 323C 000F                  		move.w	#$F,d1
00015216 9240                       		sub.w	d0,d1
00015218 4E75                       		rts	
0001521A                            ; ===========================================================================
0001521A                            
0001521A                            loc_14A5A:
0001521A 3202                       		move.w	d2,d1
0001521C 0241 000F                  		andi.w	#$F,d1
00015220 D041                       		add.w	d1,d0
00015222 6A00 FF7A                  		bpl.w	loc_149DE
00015226                            
00015226                            loc_14A66:
00015226 944B                       		sub.w	a3,d2
00015228 6100 0000                  		bsr.w	FindFloor2
0001522C D44B                       		add.w	a3,d2
0001522E 0441 0010                  		subi.w	#$10,d1
00015232 4E75                       		rts	
00015234                            ; End of function FindFloor
00015234                            
00015234                            
00015234                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015234                            
00015234                            
00015234                            FindFloor2:				; XREF: FindFloor
00015234 6100 FEE6                  		bsr.w	Floor_ChkTile
00015238 3011                       		move.w	(a1),d0
0001523A 3800                       		move.w	d0,d4
0001523C 0240 07FF                  		andi.w	#$7FF,d0
00015240 6700                       		beq.s	loc_14A86
00015242 0B04                       		btst	d5,d4
00015244 6600                       		bne.s	loc_14A94
00015246                            
00015246                            loc_14A86:
00015246 323C 000F                  		move.w	#$F,d1
0001524A 3002                       		move.w	d2,d0
0001524C 0240 000F                  		andi.w	#$F,d0
00015250 9240                       		sub.w	d0,d1
00015252 4E75                       		rts	
00015254                            ; ===========================================================================
00015254                            
00015254                            loc_14A94:
00015254 2478 F796                  		movea.l	($FFFFF796).w,a2
00015258 1032 0000                  		move.b	(a2,d0.w),d0
0001525C 0240 00FF                  		andi.w	#$FF,d0
00015260 67E4                       		beq.s	loc_14A86
00015262 45F9 0000 0000             		lea	(AngleMap).l,a2
00015268 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001526C E948                       		lsl.w	#4,d0
0001526E 3203                       		move.w	d3,d1
00015270 0804 000B                  		btst	#$B,d4
00015274 6700                       		beq.s	loc_14ABA
00015276 4641                       		not.w	d1
00015278 4414                       		neg.b	(a4)
0001527A                            
0001527A                            loc_14ABA:
0001527A 0804 000C                  		btst	#$C,d4
0001527E 6700                       		beq.s	loc_14ACA
00015280 0614 0040                  		addi.b	#$40,(a4)
00015284 4414                       		neg.b	(a4)
00015286 0414 0040                  		subi.b	#$40,(a4)
0001528A                            
0001528A                            loc_14ACA:
0001528A 0241 000F                  		andi.w	#$F,d1
0001528E D240                       		add.w	d0,d1
00015290 45F9 0000 0000             		lea	(CollArray1).l,a2
00015296 1032 1000                  		move.b	(a2,d1.w),d0
0001529A 4880                       		ext.w	d0
0001529C BD44                       		eor.w	d6,d4
0001529E 0804 000C                  		btst	#$C,d4
000152A2 6700                       		beq.s	loc_14AE6
000152A4 4440                       		neg.w	d0
000152A6                            
000152A6                            loc_14AE6:
000152A6 4A40                       		tst.w	d0
000152A8 679C                       		beq.s	loc_14A86
000152AA 6B00                       		bmi.s	loc_14AFC
000152AC 3202                       		move.w	d2,d1
000152AE 0241 000F                  		andi.w	#$F,d1
000152B2 D041                       		add.w	d1,d0
000152B4 323C 000F                  		move.w	#$F,d1
000152B8 9240                       		sub.w	d0,d1
000152BA 4E75                       		rts	
000152BC                            ; ===========================================================================
000152BC                            
000152BC                            loc_14AFC:
000152BC 3202                       		move.w	d2,d1
000152BE 0241 000F                  		andi.w	#$F,d1
000152C2 D041                       		add.w	d1,d0
000152C4 6A00 FF80                  		bpl.w	loc_14A86
000152C8 4641                       		not.w	d1
000152CA 4E75                       		rts	
000152CC                            ; End of function FindFloor2
000152CC                            
000152CC                            
000152CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152CC                            
000152CC                            
000152CC                            FindWall:				; XREF: Sonic_WalkVertR; et al
000152CC 6100 FE4E                  		bsr.w	Floor_ChkTile
000152D0 3011                       		move.w	(a1),d0
000152D2 3800                       		move.w	d0,d4
000152D4 0240 07FF                  		andi.w	#$7FF,d0
000152D8 6700                       		beq.s	loc_14B1E
000152DA 0B04                       		btst	d5,d4
000152DC 6600                       		bne.s	loc_14B2C
000152DE                            
000152DE                            loc_14B1E:
000152DE D64B                       		add.w	a3,d3
000152E0 6100 0000                  		bsr.w	FindWall2
000152E4 964B                       		sub.w	a3,d3
000152E6 0641 0010                  		addi.w	#$10,d1
000152EA 4E75                       		rts	
000152EC                            ; ===========================================================================
000152EC                            
000152EC                            loc_14B2C:
000152EC 2478 F796                  		movea.l	($FFFFF796).w,a2
000152F0 1032 0000                  		move.b	(a2,d0.w),d0
000152F4 0240 00FF                  		andi.w	#$FF,d0
000152F8 67E4                       		beq.s	loc_14B1E
000152FA 45F9 0000 0000             		lea	(AngleMap).l,a2
00015300 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015304 E948                       		lsl.w	#4,d0
00015306 3202                       		move.w	d2,d1
00015308 0804 000C                  		btst	#$C,d4
0001530C 6700                       		beq.s	loc_14B5A
0001530E 4641                       		not.w	d1
00015310 0614 0040                  		addi.b	#$40,(a4)
00015314 4414                       		neg.b	(a4)
00015316 0414 0040                  		subi.b	#$40,(a4)
0001531A                            
0001531A                            loc_14B5A:
0001531A 0804 000B                  		btst	#$B,d4
0001531E 6700                       		beq.s	loc_14B62
00015320 4414                       		neg.b	(a4)
00015322                            
00015322                            loc_14B62:
00015322 0241 000F                  		andi.w	#$F,d1
00015326 D240                       		add.w	d0,d1
00015328 45F9 0000 0000             		lea	(CollArray2).l,a2
0001532E 1032 1000                  		move.b	(a2,d1.w),d0
00015332 4880                       		ext.w	d0
00015334 BD44                       		eor.w	d6,d4
00015336 0804 000B                  		btst	#$B,d4
0001533A 6700                       		beq.s	loc_14B7E
0001533C 4440                       		neg.w	d0
0001533E                            
0001533E                            loc_14B7E:
0001533E 4A40                       		tst.w	d0
00015340 679C                       		beq.s	loc_14B1E
00015342 6B00                       		bmi.s	loc_14B9A
00015344 0C00 0010                  		cmpi.b	#$10,d0
00015348 6700                       		beq.s	loc_14BA6
0001534A 3203                       		move.w	d3,d1
0001534C 0241 000F                  		andi.w	#$F,d1
00015350 D041                       		add.w	d1,d0
00015352 323C 000F                  		move.w	#$F,d1
00015356 9240                       		sub.w	d0,d1
00015358 4E75                       		rts	
0001535A                            ; ===========================================================================
0001535A                            
0001535A                            loc_14B9A:
0001535A 3203                       		move.w	d3,d1
0001535C 0241 000F                  		andi.w	#$F,d1
00015360 D041                       		add.w	d1,d0
00015362 6A00 FF7A                  		bpl.w	loc_14B1E
00015366                            
00015366                            loc_14BA6:
00015366 964B                       		sub.w	a3,d3
00015368 6100 0000                  		bsr.w	FindWall2
0001536C D64B                       		add.w	a3,d3
0001536E 0441 0010                  		subi.w	#$10,d1
00015372 4E75                       		rts	
00015374                            ; End of function FindWall
00015374                            
00015374                            
00015374                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015374                            
00015374                            
00015374                            FindWall2:				; XREF: FindWall
00015374 6100 FDA6                  		bsr.w	Floor_ChkTile
00015378 3011                       		move.w	(a1),d0
0001537A 3800                       		move.w	d0,d4
0001537C 0240 07FF                  		andi.w	#$7FF,d0
00015380 6700                       		beq.s	loc_14BC6
00015382 0B04                       		btst	d5,d4
00015384 6600                       		bne.s	loc_14BD4
00015386                            
00015386                            loc_14BC6:
00015386 323C 000F                  		move.w	#$F,d1
0001538A 3003                       		move.w	d3,d0
0001538C 0240 000F                  		andi.w	#$F,d0
00015390 9240                       		sub.w	d0,d1
00015392 4E75                       		rts	
00015394                            ; ===========================================================================
00015394                            
00015394                            loc_14BD4:
00015394 2478 F796                  		movea.l	($FFFFF796).w,a2
00015398 1032 0000                  		move.b	(a2,d0.w),d0
0001539C 0240 00FF                  		andi.w	#$FF,d0
000153A0 67E4                       		beq.s	loc_14BC6
000153A2 45F9 0000 0000             		lea	(AngleMap).l,a2
000153A8 18B2 0000                  		move.b	(a2,d0.w),(a4)
000153AC E948                       		lsl.w	#4,d0
000153AE 3202                       		move.w	d2,d1
000153B0 0804 000C                  		btst	#$C,d4
000153B4 6700                       		beq.s	loc_14C02
000153B6 4641                       		not.w	d1
000153B8 0614 0040                  		addi.b	#$40,(a4)
000153BC 4414                       		neg.b	(a4)
000153BE 0414 0040                  		subi.b	#$40,(a4)
000153C2                            
000153C2                            loc_14C02:
000153C2 0804 000B                  		btst	#$B,d4
000153C6 6700                       		beq.s	loc_14C0A
000153C8 4414                       		neg.b	(a4)
000153CA                            
000153CA                            loc_14C0A:
000153CA 0241 000F                  		andi.w	#$F,d1
000153CE D240                       		add.w	d0,d1
000153D0 45F9 0000 0000             		lea	(CollArray2).l,a2
000153D6 1032 1000                  		move.b	(a2,d1.w),d0
000153DA 4880                       		ext.w	d0
000153DC BD44                       		eor.w	d6,d4
000153DE 0804 000B                  		btst	#$B,d4
000153E2 6700                       		beq.s	loc_14C26
000153E4 4440                       		neg.w	d0
000153E6                            
000153E6                            loc_14C26:
000153E6 4A40                       		tst.w	d0
000153E8 679C                       		beq.s	loc_14BC6
000153EA 6B00                       		bmi.s	loc_14C3C
000153EC 3203                       		move.w	d3,d1
000153EE 0241 000F                  		andi.w	#$F,d1
000153F2 D041                       		add.w	d1,d0
000153F4 323C 000F                  		move.w	#$F,d1
000153F8 9240                       		sub.w	d0,d1
000153FA 4E75                       		rts	
000153FC                            ; ===========================================================================
000153FC                            
000153FC                            loc_14C3C:
000153FC 3203                       		move.w	d3,d1
000153FE 0241 000F                  		andi.w	#$F,d1
00015402 D041                       		add.w	d1,d0
00015404 6A00 FF80                  		bpl.w	loc_14BC6
00015408 4641                       		not.w	d1
0001540A 4E75                       		rts	
0001540C                            ; End of function FindWall2
0001540C                            
0001540C                            ; ---------------------------------------------------------------------------
0001540C                            ; Unused floor/wall subroutine - logs something	to do with collision
0001540C                            ; ---------------------------------------------------------------------------
0001540C                            
0001540C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001540C                            
0001540C                            
0001540C                            FloorLog_Unk:				; XREF: Level
0001540C 4E75                       		rts	
0001540E                            
0001540E 43F9 0000 0000             		lea	(CollArray1).l,a1
00015414 45F9 0000 0000             		lea	(CollArray1).l,a2
0001541A 363C 00FF                  		move.w	#$FF,d3
0001541E                            
0001541E                            loc_14C5E:
0001541E 7A10                       		moveq	#$10,d5
00015420 343C 000F                  		move.w	#$F,d2
00015424                            
00015424                            loc_14C64:
00015424 7800                       		moveq	#0,d4
00015426 323C 000F                  		move.w	#$F,d1
0001542A                            
0001542A                            loc_14C6A:
0001542A 3019                       		move.w	(a1)+,d0
0001542C EAA8                       		lsr.l	d5,d0
0001542E D944                       		addx.w	d4,d4
00015430 51C9 FFF8                  		dbf	d1,loc_14C6A
00015434                            
00015434 34C4                       		move.w	d4,(a2)+
00015436 92FC 0020                  		suba.w	#$20,a1
0001543A 5345                       		subq.w	#1,d5
0001543C 51CA FFE6                  		dbf	d2,loc_14C64
00015440                            
00015440 D2FC 0020                  		adda.w	#$20,a1
00015444 51CB FFD8                  		dbf	d3,loc_14C5E
00015448                            
00015448 43F9 0000 0000             		lea	(CollArray1).l,a1
0001544E 45F9 0000 0000             		lea	(CollArray2).l,a2
00015454 6100                       		bsr.s	FloorLog_Unk2
00015456 43F9 0000 0000             		lea	(CollArray1).l,a1
0001545C 45F9 0000 0000             		lea	(CollArray1).l,a2
00015462                            
00015462                            ; End of function FloorLog_Unk
00015462                            
00015462                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015462                            
00015462                            
00015462                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00015462 363C 0FFF                  		move.w	#$FFF,d3
00015466                            
00015466                            loc_14CA6:
00015466 7400                       		moveq	#0,d2
00015468 323C 000F                  		move.w	#$F,d1
0001546C 3019                       		move.w	(a1)+,d0
0001546E 6700                       		beq.s	loc_14CD4
00015470 6B00                       		bmi.s	loc_14CBE
00015472                            
00015472                            loc_14CB2:
00015472 E248                       		lsr.w	#1,d0
00015474 6400                       		bcc.s	loc_14CB8
00015476 5202                       		addq.b	#1,d2
00015478                            
00015478                            loc_14CB8:
00015478 51C9 FFF8                  		dbf	d1,loc_14CB2
0001547C                            
0001547C 6000                       		bra.s	loc_14CD6
0001547E                            ; ===========================================================================
0001547E                            
0001547E                            loc_14CBE:
0001547E 0C40 FFFF                  		cmpi.w	#-1,d0
00015482 6700                       		beq.s	loc_14CD0
00015484                            
00015484                            loc_14CC4:
00015484 E348                       		lsl.w	#1,d0
00015486 6400                       		bcc.s	loc_14CCA
00015488 5302                       		subq.b	#1,d2
0001548A                            
0001548A                            loc_14CCA:
0001548A 51C9 FFF8                  		dbf	d1,loc_14CC4
0001548E                            
0001548E 6000                       		bra.s	loc_14CD6
00015490                            ; ===========================================================================
00015490                            
00015490                            loc_14CD0:
00015490 303C 0010                  		move.w	#$10,d0
00015494                            
00015494                            loc_14CD4:
00015494 3400                       		move.w	d0,d2
00015496                            
00015496                            loc_14CD6:
00015496 14C2                       		move.b	d2,(a2)+
00015498 51CB FFCC                  		dbf	d3,loc_14CA6
0001549C                            
0001549C 4E75                       		rts	
0001549E                            
0001549E                            ; End of function FloorLog_Unk2
0001549E                            
0001549E                            
0001549E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001549E                            
0001549E                            
0001549E                            Sonic_WalkSpeed:			; XREF: Sonic_Move
0001549E 2628 0008                  		move.l	8(a0),d3
000154A2 2428 000C                  		move.l	$C(a0),d2
000154A6 3228 0010                  		move.w	$10(a0),d1
000154AA 48C1                       		ext.l	d1
000154AC E181                       		asl.l	#8,d1
000154AE D681                       		add.l	d1,d3
000154B0 3228 0012                  		move.w	$12(a0),d1
000154B4 48C1                       		ext.l	d1
000154B6 E181                       		asl.l	#8,d1
000154B8 D481                       		add.l	d1,d2
000154BA 4842                       		swap	d2
000154BC 4843                       		swap	d3
000154BE 11C0 F768                  		move.b	d0,($FFFFF768).w
000154C2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000154C6 1200                       		move.b	d0,d1
000154C8 0600 0020                  		addi.b	#$20,d0
000154CC 6A00                       		bpl.s	loc_14D1A
000154CE 1001                       		move.b	d1,d0
000154D0 6A00                       		bpl.s	loc_14D14
000154D2 5300                       		subq.b	#1,d0
000154D4                            
000154D4                            loc_14D14:
000154D4 0600 0020                  		addi.b	#$20,d0
000154D8 6000                       		bra.s	loc_14D24
000154DA                            ; ===========================================================================
000154DA                            
000154DA                            loc_14D1A:
000154DA 1001                       		move.b	d1,d0
000154DC 6A00                       		bpl.s	loc_14D20
000154DE 5200                       		addq.b	#1,d0
000154E0                            
000154E0                            loc_14D20:
000154E0 0600 001F                  		addi.b	#$1F,d0
000154E4                            
000154E4                            loc_14D24:
000154E4 0200 00C0                  		andi.b	#$C0,d0
000154E8 6700 0000                  		beq.w	loc_14DF0
000154EC 0C00 0080                  		cmpi.b	#$80,d0
000154F0 6700 0000                  		beq.w	loc_14F7C
000154F4 0201 0038                  		andi.b	#$38,d1
000154F8 6600                       		bne.s	loc_14D3C
000154FA 5042                       		addq.w	#8,d2
000154FC                            
000154FC                            loc_14D3C:
000154FC 0C00 0040                  		cmpi.b	#$40,d0
00015500 6700 0000                  		beq.w	loc_1504A
00015504 6000 0000                  		bra.w	loc_14EBC
00015508                            
00015508                            ; End of function Sonic_WalkSpeed
00015508                            
00015508                            
00015508                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015508                            
00015508                            
00015508                            sub_14D48:				; XREF: Sonic_Jump
00015508 11C0 F768                  		move.b	d0,($FFFFF768).w
0001550C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015510 0600 0020                  		addi.b	#$20,d0
00015514 0200 00C0                  		andi.b	#$C0,d0
00015518 0C00 0040                  		cmpi.b	#$40,d0
0001551C 6700 0000                  		beq.w	loc_14FD6
00015520 0C00 0080                  		cmpi.b	#$80,d0
00015524 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00015528 0C00 00C0                  		cmpi.b	#$C0,d0
0001552C 6700 0000                  		beq.w	sub_14E50
00015530                            
00015530                            ; End of function sub_14D48
00015530                            
00015530                            ; ---------------------------------------------------------------------------
00015530                            ; Subroutine to	make Sonic land	on the floor after jumping
00015530                            ; ---------------------------------------------------------------------------
00015530                            
00015530                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015530                            
00015530                            
00015530                            Sonic_HitFloor:				; XREF: Sonic_Floor
00015530 3428 000C                  		move.w	$C(a0),d2
00015534 3628 0008                  		move.w	8(a0),d3
00015538 7000                       		moveq	#0,d0
0001553A 1028 0016                  		move.b	$16(a0),d0
0001553E 4880                       		ext.w	d0
00015540 D440                       		add.w	d0,d2
00015542 1028 0017                  		move.b	$17(a0),d0
00015546 4880                       		ext.w	d0
00015548 D640                       		add.w	d0,d3
0001554A 49F8 F768                  		lea	($FFFFF768).w,a4
0001554E 367C 0010                  		movea.w	#$10,a3
00015552 3C3C 0000                  		move.w	#0,d6
00015556 7A0D                       		moveq	#$D,d5
00015558 6100 FC34                  		bsr.w	FindFloor
0001555C 3F01                       		move.w	d1,-(sp)
0001555E 3428 000C                  		move.w	$C(a0),d2
00015562 3628 0008                  		move.w	8(a0),d3
00015566 7000                       		moveq	#0,d0
00015568 1028 0016                  		move.b	$16(a0),d0
0001556C 4880                       		ext.w	d0
0001556E D440                       		add.w	d0,d2
00015570 1028 0017                  		move.b	$17(a0),d0
00015574 4880                       		ext.w	d0
00015576 9640                       		sub.w	d0,d3
00015578 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001557C 367C 0010                  		movea.w	#$10,a3
00015580 3C3C 0000                  		move.w	#0,d6
00015584 7A0D                       		moveq	#$D,d5
00015586 6100 FC06                  		bsr.w	FindFloor
0001558A 301F                       		move.w	(sp)+,d0
0001558C 143C 0000                  		move.b	#0,d2
00015590                            
00015590                            loc_14DD0:
00015590 1638 F76A                  		move.b	($FFFFF76A).w,d3
00015594 B240                       		cmp.w	d0,d1
00015596 6F00                       		ble.s	loc_14DDE
00015598 1638 F768                  		move.b	($FFFFF768).w,d3
0001559C C141                       		exg	d0,d1
0001559E                            
0001559E                            loc_14DDE:
0001559E 0803 0000                  		btst	#0,d3
000155A2 6700                       		beq.s	locret_14DE6
000155A4 1602                       		move.b	d2,d3
000155A6                            
000155A6                            locret_14DE6:
000155A6 4E75                       		rts	
000155A8                            
000155A8                            ; End of function Sonic_HitFloor
000155A8                            
000155A8                            ; ===========================================================================
000155A8 3428 000C                  		move.w	$C(a0),d2
000155AC 3628 0008                  		move.w	8(a0),d3
000155B0                            
000155B0                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000155B0 0642 000A                  		addi.w	#$A,d2
000155B4 49F8 F768                  		lea	($FFFFF768).w,a4
000155B8 367C 0010                  		movea.w	#$10,a3
000155BC 3C3C 0000                  		move.w	#0,d6
000155C0 7A0E                       		moveq	#$E,d5
000155C2 6100 FBCA                  		bsr.w	FindFloor
000155C6 143C 0000                  		move.b	#0,d2
000155CA                            
000155CA                            loc_14E0A:				; XREF: sub_14EB4
000155CA 1638 F768                  		move.b	($FFFFF768).w,d3
000155CE 0803 0000                  		btst	#0,d3
000155D2 6700                       		beq.s	locret_14E16
000155D4 1602                       		move.b	d2,d3
000155D6                            
000155D6                            locret_14E16:
000155D6 4E75                       		rts	
000155D8                            
000155D8                            ; ---------------------------------------------------------------------------
000155D8                            ; Subroutine allowing objects to interact with the floor
000155D8                            ; ---------------------------------------------------------------------------
000155D8                            
000155D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155D8                            
000155D8                            
000155D8                            ObjHitFloor:
000155D8 3628 0008                  		move.w	8(a0),d3
000155DC                            
000155DC                            ; End of function ObjHitFloor
000155DC                            
000155DC                            
000155DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155DC                            
000155DC                            
000155DC                            ObjHitFloor2:
000155DC 3428 000C                  		move.w	$C(a0),d2
000155E0 7000                       		moveq	#0,d0
000155E2 1028 0016                  		move.b	$16(a0),d0
000155E6 4880                       		ext.w	d0
000155E8 D440                       		add.w	d0,d2
000155EA 49F8 F768                  		lea	($FFFFF768).w,a4
000155EE 18BC 0000                  		move.b	#0,(a4)
000155F2 367C 0010                  		movea.w	#$10,a3
000155F6 3C3C 0000                  		move.w	#0,d6
000155FA 7A0D                       		moveq	#$D,d5
000155FC 6100 FB90                  		bsr.w	FindFloor
00015600 1638 F768                  		move.b	($FFFFF768).w,d3
00015604 0803 0000                  		btst	#0,d3
00015608 6700                       		beq.s	locret_14E4E
0001560A 163C 0000                  		move.b	#0,d3
0001560E                            
0001560E                            locret_14E4E:
0001560E 4E75                       		rts	
00015610                            ; End of function ObjHitFloor2
00015610                            
00015610                            
00015610                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015610                            
00015610                            
00015610                            sub_14E50:				; XREF: sub_14D48
00015610 3428 000C                  		move.w	$C(a0),d2
00015614 3628 0008                  		move.w	8(a0),d3
00015618 7000                       		moveq	#0,d0
0001561A 1028 0017                  		move.b	$17(a0),d0
0001561E 4880                       		ext.w	d0
00015620 9440                       		sub.w	d0,d2
00015622 1028 0016                  		move.b	$16(a0),d0
00015626 4880                       		ext.w	d0
00015628 D640                       		add.w	d0,d3
0001562A 49F8 F768                  		lea	($FFFFF768).w,a4
0001562E 367C 0010                  		movea.w	#$10,a3
00015632 3C3C 0000                  		move.w	#0,d6
00015636 7A0E                       		moveq	#$E,d5
00015638 6100 FC92                  		bsr.w	FindWall
0001563C 3F01                       		move.w	d1,-(sp)
0001563E 3428 000C                  		move.w	$C(a0),d2
00015642 3628 0008                  		move.w	8(a0),d3
00015646 7000                       		moveq	#0,d0
00015648 1028 0017                  		move.b	$17(a0),d0
0001564C 4880                       		ext.w	d0
0001564E D440                       		add.w	d0,d2
00015650 1028 0016                  		move.b	$16(a0),d0
00015654 4880                       		ext.w	d0
00015656 D640                       		add.w	d0,d3
00015658 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001565C 367C 0010                  		movea.w	#$10,a3
00015660 3C3C 0000                  		move.w	#0,d6
00015664 7A0E                       		moveq	#$E,d5
00015666 6100 FC64                  		bsr.w	FindWall
0001566A 301F                       		move.w	(sp)+,d0
0001566C 143C 00C0                  		move.b	#-$40,d2
00015670 6000 FF1E                  		bra.w	loc_14DD0
00015674                            
00015674                            ; End of function sub_14E50
00015674                            
00015674                            
00015674                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015674                            
00015674                            
00015674                            sub_14EB4:				; XREF: Sonic_Floor
00015674 3428 000C                  		move.w	$C(a0),d2
00015678 3628 0008                  		move.w	8(a0),d3
0001567C                            
0001567C                            loc_14EBC:
0001567C 0643 000A                  		addi.w	#$A,d3
00015680 49F8 F768                  		lea	($FFFFF768).w,a4
00015684 367C 0010                  		movea.w	#$10,a3
00015688 3C3C 0000                  		move.w	#0,d6
0001568C 7A0E                       		moveq	#$E,d5
0001568E 6100 FC3C                  		bsr.w	FindWall
00015692 143C 00C0                  		move.b	#-$40,d2
00015696 6000 FF32                  		bra.w	loc_14E0A
0001569A                            
0001569A                            ; End of function sub_14EB4
0001569A                            
0001569A                            ; ---------------------------------------------------------------------------
0001569A                            ; Subroutine to	detect when an object hits a wall to its right
0001569A                            ; ---------------------------------------------------------------------------
0001569A                            
0001569A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001569A                            
0001569A                            
0001569A                            ObjHitWallRight:
0001569A D668 0008                  		add.w	8(a0),d3
0001569E 3428 000C                  		move.w	$C(a0),d2
000156A2 49F8 F768                  		lea	($FFFFF768).w,a4
000156A6 18BC 0000                  		move.b	#0,(a4)
000156AA 367C 0010                  		movea.w	#$10,a3
000156AE 3C3C 0000                  		move.w	#0,d6
000156B2 7A0E                       		moveq	#$E,d5
000156B4 6100 FC16                  		bsr.w	FindWall
000156B8 1638 F768                  		move.b	($FFFFF768).w,d3
000156BC 0803 0000                  		btst	#0,d3
000156C0 6700                       		beq.s	locret_14F06
000156C2 163C 00C0                  		move.b	#-$40,d3
000156C6                            
000156C6                            locret_14F06:
000156C6 4E75                       		rts	
000156C8                            
000156C8                            ; End of function ObjHitWallRight
000156C8                            
000156C8                            ; ---------------------------------------------------------------------------
000156C8                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000156C8                            ; touches them
000156C8                            ; ---------------------------------------------------------------------------
000156C8                            
000156C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156C8                            
000156C8                            
000156C8                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000156C8 3428 000C                  		move.w	$C(a0),d2
000156CC 3628 0008                  		move.w	8(a0),d3
000156D0 7000                       		moveq	#0,d0
000156D2 1028 0016                  		move.b	$16(a0),d0
000156D6 4880                       		ext.w	d0
000156D8 9440                       		sub.w	d0,d2
000156DA 0A42 000F                  		eori.w	#$F,d2
000156DE 1028 0017                  		move.b	$17(a0),d0
000156E2 4880                       		ext.w	d0
000156E4 D640                       		add.w	d0,d3
000156E6 49F8 F768                  		lea	($FFFFF768).w,a4
000156EA 367C FFF0                  		movea.w	#-$10,a3
000156EE 3C3C 1000                  		move.w	#$1000,d6
000156F2 7A0E                       		moveq	#$E,d5
000156F4 6100 FA98                  		bsr.w	FindFloor
000156F8 3F01                       		move.w	d1,-(sp)
000156FA 3428 000C                  		move.w	$C(a0),d2
000156FE 3628 0008                  		move.w	8(a0),d3
00015702 7000                       		moveq	#0,d0
00015704 1028 0016                  		move.b	$16(a0),d0
00015708 4880                       		ext.w	d0
0001570A 9440                       		sub.w	d0,d2
0001570C 0A42 000F                  		eori.w	#$F,d2
00015710 1028 0017                  		move.b	$17(a0),d0
00015714 4880                       		ext.w	d0
00015716 9640                       		sub.w	d0,d3
00015718 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001571C 367C FFF0                  		movea.w	#-$10,a3
00015720 3C3C 1000                  		move.w	#$1000,d6
00015724 7A0E                       		moveq	#$E,d5
00015726 6100 FA66                  		bsr.w	FindFloor
0001572A 301F                       		move.w	(sp)+,d0
0001572C 143C 0080                  		move.b	#-$80,d2
00015730 6000 FE5E                  		bra.w	loc_14DD0
00015734                            ; End of function Sonic_DontRunOnWalls
00015734                            
00015734                            ; ===========================================================================
00015734 3428 000C                  		move.w	$C(a0),d2
00015738 3628 0008                  		move.w	8(a0),d3
0001573C                            
0001573C                            loc_14F7C:
0001573C 0442 000A                  		subi.w	#$A,d2
00015740 0A42 000F                  		eori.w	#$F,d2
00015744 49F8 F768                  		lea	($FFFFF768).w,a4
00015748 367C FFF0                  		movea.w	#-$10,a3
0001574C 3C3C 1000                  		move.w	#$1000,d6
00015750 7A0E                       		moveq	#$E,d5
00015752 6100 FA3A                  		bsr.w	FindFloor
00015756 143C 0080                  		move.b	#-$80,d2
0001575A 6000 FE6E                  		bra.w	loc_14E0A
0001575E                            
0001575E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001575E                            
0001575E                            
0001575E                            ObjHitCeiling:
0001575E 3428 000C                  		move.w	$C(a0),d2
00015762 3628 0008                  		move.w	8(a0),d3
00015766 7000                       		moveq	#0,d0
00015768 1028 0016                  		move.b	$16(a0),d0
0001576C 4880                       		ext.w	d0
0001576E 9440                       		sub.w	d0,d2
00015770 0A42 000F                  		eori.w	#$F,d2
00015774 49F8 F768                  		lea	($FFFFF768).w,a4
00015778 367C FFF0                  		movea.w	#-$10,a3
0001577C 3C3C 1000                  		move.w	#$1000,d6
00015780 7A0E                       		moveq	#$E,d5
00015782 6100 FA0A                  		bsr.w	FindFloor
00015786 1638 F768                  		move.b	($FFFFF768).w,d3
0001578A 0803 0000                  		btst	#0,d3
0001578E 6700                       		beq.s	locret_14FD4
00015790 163C 0080                  		move.b	#-$80,d3
00015794                            
00015794                            locret_14FD4:
00015794 4E75                       		rts	
00015796                            ; End of function ObjHitCeiling
00015796                            
00015796                            ; ===========================================================================
00015796                            
00015796                            loc_14FD6:				; XREF: sub_14D48
00015796 3428 000C                  		move.w	$C(a0),d2
0001579A 3628 0008                  		move.w	8(a0),d3
0001579E 7000                       		moveq	#0,d0
000157A0 1028 0017                  		move.b	$17(a0),d0
000157A4 4880                       		ext.w	d0
000157A6 9440                       		sub.w	d0,d2
000157A8 1028 0016                  		move.b	$16(a0),d0
000157AC 4880                       		ext.w	d0
000157AE 9640                       		sub.w	d0,d3
000157B0 0A43 000F                  		eori.w	#$F,d3
000157B4 49F8 F768                  		lea	($FFFFF768).w,a4
000157B8 367C FFF0                  		movea.w	#-$10,a3
000157BC 3C3C 0800                  		move.w	#$800,d6
000157C0 7A0E                       		moveq	#$E,d5
000157C2 6100 FB08                  		bsr.w	FindWall
000157C6 3F01                       		move.w	d1,-(sp)
000157C8 3428 000C                  		move.w	$C(a0),d2
000157CC 3628 0008                  		move.w	8(a0),d3
000157D0 7000                       		moveq	#0,d0
000157D2 1028 0017                  		move.b	$17(a0),d0
000157D6 4880                       		ext.w	d0
000157D8 D440                       		add.w	d0,d2
000157DA 1028 0016                  		move.b	$16(a0),d0
000157DE 4880                       		ext.w	d0
000157E0 9640                       		sub.w	d0,d3
000157E2 0A43 000F                  		eori.w	#$F,d3
000157E6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000157EA 367C FFF0                  		movea.w	#-$10,a3
000157EE 3C3C 0800                  		move.w	#$800,d6
000157F2 7A0E                       		moveq	#$E,d5
000157F4 6100 FAD6                  		bsr.w	FindWall
000157F8 301F                       		move.w	(sp)+,d0
000157FA 143C 0040                  		move.b	#$40,d2
000157FE 6000 FD90                  		bra.w	loc_14DD0
00015802                            
00015802                            ; ---------------------------------------------------------------------------
00015802                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015802                            ; ---------------------------------------------------------------------------
00015802                            
00015802                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015802                            
00015802                            
00015802                            Sonic_HitWall:				; XREF: Sonic_Floor
00015802 3428 000C                  		move.w	$C(a0),d2
00015806 3628 0008                  		move.w	8(a0),d3
0001580A                            
0001580A                            loc_1504A:
0001580A 0443 000A                  		subi.w	#$A,d3
0001580E 0A43 000F                  		eori.w	#$F,d3
00015812 49F8 F768                  		lea	($FFFFF768).w,a4
00015816 367C FFF0                  		movea.w	#-$10,a3
0001581A 3C3C 0800                  		move.w	#$800,d6
0001581E 7A0E                       		moveq	#$E,d5
00015820 6100 FAAA                  		bsr.w	FindWall
00015824 143C 0040                  		move.b	#$40,d2
00015828 6000 FDA0                  		bra.w	loc_14E0A
0001582C                            ; End of function Sonic_HitWall
0001582C                            
0001582C                            ; ---------------------------------------------------------------------------
0001582C                            ; Subroutine to	detect when an object hits a wall to its left
0001582C                            ; ---------------------------------------------------------------------------
0001582C                            
0001582C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001582C                            
0001582C                            
0001582C                            ObjHitWallLeft:
0001582C D668 0008                  		add.w	8(a0),d3
00015830 3428 000C                  		move.w	$C(a0),d2
00015834 49F8 F768                  		lea	($FFFFF768).w,a4
00015838 18BC 0000                  		move.b	#0,(a4)
0001583C 367C FFF0                  		movea.w	#-$10,a3
00015840 3C3C 0800                  		move.w	#$800,d6
00015844 7A0E                       		moveq	#$E,d5
00015846 6100 FA84                  		bsr.w	FindWall
0001584A 1638 F768                  		move.b	($FFFFF768).w,d3
0001584E 0803 0000                  		btst	#0,d3
00015852 6700                       		beq.s	locret_15098
00015854 163C 0040                  		move.b	#$40,d3
00015858                            
00015858                            locret_15098:
00015858 4E75                       		rts	
0001585A                            ; End of function ObjHitWallLeft
0001585A                            
0001585A                            ; ===========================================================================
0001585A                            ; ---------------------------------------------------------------------------
0001585A                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
0001585A                            ; ---------------------------------------------------------------------------
0001585A                            
0001585A                            Obj66:					; XREF: Obj_Index
0001585A 7000                       		moveq	#0,d0
0001585C 1028 0024                  		move.b	$24(a0),d0
00015860 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015864 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015868                            ; ===========================================================================
00015868 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
0001586A 0000                       		dc.w Obj66_Action-Obj66_Index
0001586C 0000                       		dc.w Obj66_Display-Obj66_Index
0001586E 0000                       		dc.w Obj66_Release-Obj66_Index
00015870                            ; ===========================================================================
00015870                            
00015870                            Obj66_Main:				; XREF: Obj66_Index
00015870 5428 0024                  		addq.b	#2,$24(a0)
00015874 323C 0001                  		move.w	#1,d1
00015878 2248                       		movea.l	a0,a1
0001587A 6000                       		bra.s	Obj66_MakeItem
0001587C                            ; ===========================================================================
0001587C                            
0001587C                            Obj66_Loop:
0001587C 6100 88E6                  		bsr.w	SingleObjLoad
00015880 6600                       		bne.s	loc_150FE
00015882 12BC 0066                  		move.b	#$66,0(a1)
00015886 5829 0024                  		addq.b	#4,$24(a1)
0001588A 3368 0008 0008             		move.w	8(a0),8(a1)
00015890 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015896 137C 0003 0018             		move.b	#3,$18(a1)
0001589C 137C 0010 001A             		move.b	#$10,$1A(a1)
000158A2                            
000158A2                            Obj66_MakeItem:				; XREF: Obj66_Main
000158A2 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
000158AA 337C 4348 0002             		move.w	#$4348,2(a1)
000158B0 0029 0004 0001             		ori.b	#4,1(a1)
000158B6 137C 0038 0019             		move.b	#$38,$19(a1)
000158BC                            
000158BC                            loc_150FE:
000158BC 51C9 FFBE                  		dbf	d1,Obj66_Loop
000158C0                            
000158C0 117C 0030 0019             		move.b	#$30,$19(a0)
000158C6 117C 0004 0018             		move.b	#4,$18(a0)
000158CC 317C 003C 0030             		move.w	#$3C,$30(a0)
000158D2 117C 0001 0034             		move.b	#1,$34(a0)
000158D8 1168 0028 0038             		move.b	$28(a0),$38(a0)
000158DE                            
000158DE                            Obj66_Action:				; XREF: Obj66_Index
000158DE 6100 0000                  		bsr.w	Obj66_ChkSwitch
000158E2 4A28 0001                  		tst.b	1(a0)
000158E6 6A00 0000                  		bpl.w	Obj66_Display
000158EA 323C 0030                  		move.w	#$30,d1
000158EE 3401                       		move.w	d1,d2
000158F0 3602                       		move.w	d2,d3
000158F2 5243                       		addq.w	#1,d3
000158F4 3828 0008                  		move.w	8(a0),d4
000158F8 6100 A7B4                  		bsr.w	SolidObject
000158FC 0828 0005 0022             		btst	#5,$22(a0)
00015902 6700 0000                  		beq.w	Obj66_Display
00015906 43F8 D000                  		lea	($FFFFD000).w,a1
0001590A 720E                       		moveq	#$E,d1
0001590C 3029 0008                  		move.w	8(a1),d0
00015910 B068 0008                  		cmp.w	8(a0),d0
00015914 6500                       		bcs.s	Obj66_GrabSonic
00015916 7207                       		moveq	#7,d1
00015918                            
00015918                            Obj66_GrabSonic:
00015918 B228 001A                  		cmp.b	$1A(a0),d1
0001591C 6600                       		bne.s	Obj66_Display
0001591E 1141 0032                  		move.b	d1,$32(a0)
00015922 5828 0024                  		addq.b	#4,$24(a0)
00015926 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001592C 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015932 337C 0800 0014             		move.w	#$800,$14(a1)
00015938 337C 0000 0010             		move.w	#0,$10(a1)
0001593E 337C 0000 0012             		move.w	#0,$12(a1)
00015944 08A8 0005 0022             		bclr	#5,$22(a0)
0001594A 08A9 0005 0022             		bclr	#5,$22(a1)
00015950 08E9 0001 0022             		bset	#1,$22(a1)
00015956 3429 0008                  		move.w	8(a1),d2
0001595A 3629 000C                  		move.w	$C(a1),d3
0001595E 6100 0000                  		bsr.w	Obj66_ChgPos
00015962 D569 0008                  		add.w	d2,8(a1)
00015966 D769 000C                  		add.w	d3,$C(a1)
0001596A E0E9 0008                  		asr	8(a1)
0001596E E0E9 000C                  		asr	$C(a1)
00015972                            
00015972                            Obj66_Display:				; XREF: Obj66_Index
00015972 6000 A412                  		bra.w	MarkObjGone
00015976                            ; ===========================================================================
00015976                            
00015976                            Obj66_Release:				; XREF: Obj66_Index
00015976 1028 001A                  		move.b	$1A(a0),d0
0001597A 0C00 0004                  		cmpi.b	#4,d0
0001597E 6700                       		beq.s	loc_151C8
00015980 0C00 0007                  		cmpi.b	#7,d0
00015984 6600                       		bne.s	loc_151F8
00015986                            
00015986                            loc_151C8:
00015986 B028 0032                  		cmp.b	$32(a0),d0
0001598A 6700                       		beq.s	loc_151F8
0001598C 43F8 D000                  		lea	($FFFFD000).w,a1
00015990 337C 0000 0010             		move.w	#0,$10(a1)
00015996 337C 0800 0012             		move.w	#$800,$12(a1)
0001599C 0C00 0004                  		cmpi.b	#4,d0
000159A0 6700                       		beq.s	loc_151F0
000159A2 337C 0800 0010             		move.w	#$800,$10(a1)
000159A8 337C 0800 0012             		move.w	#$800,$12(a1)
000159AE                            
000159AE                            loc_151F0:
000159AE 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
000159B2 5928 0024                  		subq.b	#4,$24(a0)
000159B6                            
000159B6                            loc_151F8:
000159B6 6100                       		bsr.s	Obj66_ChkSwitch
000159B8 6100                       		bsr.s	Obj66_ChgPos
000159BA 6000 A3CA                  		bra.w	MarkObjGone
000159BE                            
000159BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159BE                            
000159BE                            
000159BE                            Obj66_ChkSwitch:			; XREF: Obj66_Action
000159BE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000159C2 7000                       		moveq	#0,d0
000159C4 1028 0038                  		move.b	$38(a0),d0
000159C8 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000159CE 6700                       		beq.s	loc_15224	; if not, branch
000159D0 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
000159D4 6600                       		bne.s	Obj66_Animate	; if yes, branch
000159D6 4428 0034                  		neg.b	$34(a0)
000159DA 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
000159E0 6000                       		bra.s	Obj66_Animate
000159E2                            ; ===========================================================================
000159E2                            
000159E2                            loc_15224:
000159E2 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
000159E6                            
000159E6                            Obj66_Animate:
000159E6 5328 001E                  		subq.b	#1,$1E(a0)
000159EA 6A00                       		bpl.s	locret_15246
000159EC 117C 0007 001E             		move.b	#7,$1E(a0)
000159F2 1228 0034                  		move.b	$34(a0),d1
000159F6 1028 001A                  		move.b	$1A(a0),d0
000159FA D001                       		add.b	d1,d0
000159FC 0200 000F                  		andi.b	#$F,d0
00015A00 1140 001A                  		move.b	d0,$1A(a0)
00015A04                            
00015A04                            locret_15246:
00015A04 4E75                       		rts	
00015A06                            ; End of function Obj66_ChkSwitch
00015A06                            
00015A06                            
00015A06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A06                            
00015A06                            
00015A06                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015A06 43F8 D000                  		lea	($FFFFD000).w,a1
00015A0A 7000                       		moveq	#0,d0
00015A0C 1028 001A                  		move.b	$1A(a0),d0
00015A10 D040                       		add.w	d0,d0
00015A12 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015A16 101A                       		move.b	(a2)+,d0
00015A18 4880                       		ext.w	d0
00015A1A D068 0008                  		add.w	8(a0),d0
00015A1E 3340 0008                  		move.w	d0,8(a1)
00015A22 101A                       		move.b	(a2)+,d0
00015A24 4880                       		ext.w	d0
00015A26 D068 000C                  		add.w	$C(a0),d0
00015A2A 3340 000C                  		move.w	d0,$C(a1)
00015A2E 4E75                       		rts	
00015A30                            ; End of function Obj66_ChgPos
00015A30                            
00015A30                            ; ===========================================================================
00015A30 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015A34 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015A38 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015A3C 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015A40 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015A44 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015A48 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015A4C E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015A50                            ; ---------------------------------------------------------------------------
00015A50                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015A50                            ; ---------------------------------------------------------------------------
00015A50                            Map_obj66:
00015A50                            	include "_maps\obj66.asm"
00015A50                            ; ---------------------------------------------------------------------------
00015A50                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015A50                            ; ---------------------------------------------------------------------------
00015A50 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015A54 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015A58 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015A5C 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015A60 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015A64 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015A68 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015A6C 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015A70 0000                       		dc.w byte_154A4-Map_obj66
00015A72 06                         byte_152B4:	dc.b 6
00015A73 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015A78 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015A7D E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015A82 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015A87 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015A8C 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015A91 06                         byte_152D3:	dc.b 6
00015A92 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015A97 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015A9C F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015AA1 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015AA6 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015AAB 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015AB0 06                         byte_152F2:	dc.b 6
00015AB1 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015AB6 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015ABB 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015AC0 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015AC5 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015ACA 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015ACF 06                         byte_15311:	dc.b 6
00015AD0 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015AD5 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015ADA 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015ADF 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015AE4 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015AE9 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015AEE 06                         byte_15330:	dc.b 6
00015AEF 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015AF4 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015AF9 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015AFE 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015B03 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015B08 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015B0D 06                         byte_1534F:	dc.b 6
00015B0E 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015B13 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015B18 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015B1D 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015B22 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015B27 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015B2C 06                         byte_1536E:	dc.b 6
00015B2D 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015B32 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015B37 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015B3C 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015B41 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015B46 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015B4B 06                         byte_1538D:	dc.b 6
00015B4C 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015B51 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015B56 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015B5B F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015B60 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015B65 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015B6A 06                         byte_153AC:	dc.b 6
00015B6B E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015B70 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015B75 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015B7A E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015B7F 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015B84 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015B89 06                         byte_153CB:	dc.b 6
00015B8A D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015B8F E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015B94 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015B99 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015B9E F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015BA3 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015BA8 06                         byte_153EA:	dc.b 6
00015BA9 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015BAE E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015BB3 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015BB8 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015BBD E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015BC2 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015BC7 06                         byte_15409:	dc.b 6
00015BC8 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015BCD D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015BD2 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015BD7 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015BDC E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015BE1 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015BE6 06                         byte_15428:	dc.b 6
00015BE7 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015BEC D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015BF1 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015BF6 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015BFB E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015C00 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015C05 06                         byte_15447:	dc.b 6
00015C06 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015C0B D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015C10 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015C15 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015C1A E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015C1F E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015C24 06                         byte_15466:	dc.b 6
00015C25 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015C2A D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015C2F D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015C34 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015C39 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015C3E E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015C43 06                         byte_15485:	dc.b 6
00015C44 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015C49 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015C4E DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015C53 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015C58 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015C5D F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015C62 0C                         byte_154A4:	dc.b $C
00015C63 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015C68 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015C6D E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015C72 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015C77 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015C7C E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015C81 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015C86 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015C8B 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015C90 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015C95 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015C9A 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015CA0 00                         		even
00015CA0 00                         		even
00015CA0                            
00015CA0                            ; ===========================================================================
00015CA0                            ; ---------------------------------------------------------------------------
00015CA0                            ; Object 67 - disc that	you run	around (SBZ)
00015CA0                            ; ---------------------------------------------------------------------------
00015CA0                            
00015CA0                            Obj67:					; XREF: Obj_Index
00015CA0 7000                       		moveq	#0,d0
00015CA2 1028 0024                  		move.b	$24(a0),d0
00015CA6 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015CAA 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015CAE                            ; ===========================================================================
00015CAE 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015CB0 0000                       		dc.w Obj67_Action-Obj67_Index
00015CB2                            ; ===========================================================================
00015CB2                            
00015CB2                            Obj67_Main:				; XREF: Obj67_Index
00015CB2 5428 0024                  		addq.b	#2,$24(a0)
00015CB6 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015CBE 317C C344 0002             		move.w	#$C344,2(a0)
00015CC4 117C 0004 0001             		move.b	#4,1(a0)
00015CCA 117C 0004 0018             		move.b	#4,$18(a0)
00015CD0 117C 0008 0019             		move.b	#8,$19(a0)
00015CD6 3168 0008 0032             		move.w	8(a0),$32(a0)
00015CDC 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015CE2 117C 0018 0034             		move.b	#$18,$34(a0)
00015CE8 117C 0048 0038             		move.b	#$48,$38(a0)
00015CEE 1228 0028                  		move.b	$28(a0),d1	; get object type
00015CF2 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015CF6 6700                       		beq.s	loc_15546
00015CF8 117C 0010 0034             		move.b	#$10,$34(a0)
00015CFE 117C 0038 0038             		move.b	#$38,$38(a0)
00015D04                            
00015D04                            loc_15546:
00015D04 1228 0028                  		move.b	$28(a0),d1	; get object type
00015D08 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015D0C 4881                       		ext.w	d1
00015D0E E741                       		asl.w	#3,d1
00015D10 3141 0036                  		move.w	d1,$36(a0)
00015D14 1028 0022                  		move.b	$22(a0),d0
00015D18 E418                       		ror.b	#2,d0
00015D1A 0200 00C0                  		andi.b	#-$40,d0
00015D1E 1140 0026                  		move.b	d0,$26(a0)
00015D22                            
00015D22                            Obj67_Action:				; XREF: Obj67_Index
00015D22 6100 0000                  		bsr.w	Obj67_MoveSonic
00015D26 6100 0000                  		bsr.w	Obj67_MoveSpot
00015D2A 6000 0000                  		bra.w	Obj67_ChkDel
00015D2E                            ; ===========================================================================
00015D2E                            
00015D2E                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015D2E 7400                       		moveq	#0,d2
00015D30 1428 0038                  		move.b	$38(a0),d2
00015D34 3602                       		move.w	d2,d3
00015D36 D643                       		add.w	d3,d3
00015D38 43F8 D000                  		lea	($FFFFD000).w,a1
00015D3C 3029 0008                  		move.w	8(a1),d0
00015D40 9068 0032                  		sub.w	$32(a0),d0
00015D44 D042                       		add.w	d2,d0
00015D46 B043                       		cmp.w	d3,d0
00015D48 6400                       		bcc.s	loc_155A8
00015D4A 3229 000C                  		move.w	$C(a1),d1
00015D4E 9268 0030                  		sub.w	$30(a0),d1
00015D52 D242                       		add.w	d2,d1
00015D54 B243                       		cmp.w	d3,d1
00015D56 6400                       		bcc.s	loc_155A8
00015D58 0829 0001 0022             		btst	#1,$22(a1)
00015D5E 6700                       		beq.s	loc_155B8
00015D60 4228 003A                  		clr.b	$3A(a0)
00015D64 4E75                       		rts	
00015D66                            ; ===========================================================================
00015D66                            
00015D66                            loc_155A8:
00015D66 4A28 003A                  		tst.b	$3A(a0)
00015D6A 6700                       		beq.s	locret_155B6
00015D6C 4229 0038                  		clr.b	$38(a1)
00015D70 4228 003A                  		clr.b	$3A(a0)
00015D74                            
00015D74                            locret_155B6:
00015D74 4E75                       		rts	
00015D76                            ; ===========================================================================
00015D76                            
00015D76                            loc_155B8:
00015D76 4A28 003A                  		tst.b	$3A(a0)
00015D7A 6600                       		bne.s	loc_155E2
00015D7C 117C 0001 003A             		move.b	#1,$3A(a0)
00015D82 0829 0002 0022             		btst	#2,$22(a1)
00015D88 6600                       		bne.s	loc_155D0
00015D8A 4229 001C                  		clr.b	$1C(a1)
00015D8E                            
00015D8E                            loc_155D0:
00015D8E 08A9 0005 0022             		bclr	#5,$22(a1)
00015D94 137C 0001 001D             		move.b	#1,$1D(a1)
00015D9A 137C 0001 0038             		move.b	#1,$38(a1)
00015DA0                            
00015DA0                            loc_155E2:
00015DA0 3029 0014                  		move.w	$14(a1),d0
00015DA4 4A68 0036                  		tst.w	$36(a0)
00015DA8 6A00                       		bpl.s	loc_15608
00015DAA 0C40 FC00                  		cmpi.w	#-$400,d0
00015DAE 6F00                       		ble.s	loc_155FA
00015DB0 337C FC00 0014             		move.w	#-$400,$14(a1)
00015DB6 4E75                       		rts	
00015DB8                            ; ===========================================================================
00015DB8                            
00015DB8                            loc_155FA:
00015DB8 0C40 F100                  		cmpi.w	#-$F00,d0
00015DBC 6C00                       		bge.s	locret_15606
00015DBE 337C F100 0014             		move.w	#-$F00,$14(a1)
00015DC4                            
00015DC4                            locret_15606:
00015DC4 4E75                       		rts	
00015DC6                            ; ===========================================================================
00015DC6                            
00015DC6                            loc_15608:
00015DC6 0C40 0400                  		cmpi.w	#$400,d0
00015DCA 6C00                       		bge.s	loc_15616
00015DCC 337C 0400 0014             		move.w	#$400,$14(a1)
00015DD2 4E75                       		rts	
00015DD4                            ; ===========================================================================
00015DD4                            
00015DD4                            loc_15616:
00015DD4 0C40 0F00                  		cmpi.w	#$F00,d0
00015DD8 6F00                       		ble.s	locret_15622
00015DDA 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015DE0                            
00015DE0                            locret_15622:
00015DE0 4E75                       		rts	
00015DE2                            ; ===========================================================================
00015DE2                            
00015DE2                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015DE2 3028 0036                  		move.w	$36(a0),d0
00015DE6 D168 0026                  		add.w	d0,$26(a0)
00015DEA 1028 0026                  		move.b	$26(a0),d0
00015DEE 4EB9 0000 2C64             		jsr	(CalcSine).l
00015DF4 3428 0030                  		move.w	$30(a0),d2
00015DF8 3628 0032                  		move.w	$32(a0),d3
00015DFC 7800                       		moveq	#0,d4
00015DFE 1828 0034                  		move.b	$34(a0),d4
00015E02 E14C                       		lsl.w	#8,d4
00015E04 2A04                       		move.l	d4,d5
00015E06 C9C0                       		muls.w	d0,d4
00015E08 4844                       		swap	d4
00015E0A CBC1                       		muls.w	d1,d5
00015E0C 4845                       		swap	d5
00015E0E D842                       		add.w	d2,d4
00015E10 DA43                       		add.w	d3,d5
00015E12 3144 000C                  		move.w	d4,$C(a0)
00015E16 3145 0008                  		move.w	d5,8(a0)
00015E1A 4E75                       		rts	
00015E1C                            ; ===========================================================================
00015E1C                            
00015E1C                            Obj67_ChkDel:				; XREF: Obj67_Action
00015E1C 3028 0032                  		move.w	$32(a0),d0
00015E20 0240 FF80                  		andi.w	#-$80,d0
00015E24 3238 F700                  		move.w	($FFFFF700).w,d1
00015E28 0441 0080                  		subi.w	#$80,d1
00015E2C 0241 FF80                  		andi.w	#-$80,d1
00015E30 9041                       		sub.w	d1,d0
00015E32 0C40 0280                  		cmpi.w	#$280,d0
00015E36 6200                       		bhi.s	Obj67_Delete
00015E38 4EF9 0000 DCDE             		jmp	DisplaySprite
00015E3E                            ; ===========================================================================
00015E3E                            
00015E3E                            Obj67_Delete:
00015E3E 4EF9 0000 DD1A             		jmp	DeleteObject
00015E44                            ; ===========================================================================
00015E44                            ; ---------------------------------------------------------------------------
00015E44                            ; Sprite mappings - disc that you run around (SBZ)
00015E44                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015E44                            ; part of the level tiles.)
00015E44                            ; ---------------------------------------------------------------------------
00015E44                            Map_obj67:
00015E44                            	include "_maps\obj67.asm"
00015E44                            ; ---------------------------------------------------------------------------
00015E44                            ; Sprite mappings - disc that you run around (SBZ)
00015E44                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015E44                            ; part of the level tiles.)
00015E44                            ; ---------------------------------------------------------------------------
00015E44 0000                       		dc.w byte_15688-Map_obj67
00015E46 01                         byte_15688:	dc.b 1
00015E47 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015E4C                            		even
00015E4C                            		even
00015E4C                            
00015E4C                            ; ===========================================================================
00015E4C                            ; ---------------------------------------------------------------------------
00015E4C                            ; Object 68 - conveyor belts (SBZ)
00015E4C                            ; ---------------------------------------------------------------------------
00015E4C                            
00015E4C                            Obj68:					; XREF: Obj_Index
00015E4C 7000                       		moveq	#0,d0
00015E4E 1028 0024                  		move.b	$24(a0),d0
00015E52 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015E56 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015E5A                            ; ===========================================================================
00015E5A 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015E5C 0000                       		dc.w Obj68_Action-Obj68_Index
00015E5E                            ; ===========================================================================
00015E5E                            
00015E5E                            Obj68_Main:				; XREF: Obj68_Index
00015E5E 5428 0024                  		addq.b	#2,$24(a0)
00015E62 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015E68 1228 0028                  		move.b	$28(a0),d1	; get object type
00015E6C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015E70 6700                       		beq.s	loc_156BA	; if zero, branch
00015E72 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015E78                            
00015E78                            loc_156BA:
00015E78 1228 0028                  		move.b	$28(a0),d1	; get object type
00015E7C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015E80 4881                       		ext.w	d1
00015E82 E841                       		asr.w	#4,d1
00015E84 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015E88                            
00015E88                            Obj68_Action:				; XREF: Obj68_Index
00015E88 6100                       		bsr.s	Obj68_MoveSonic
00015E8A 3028 0008                  		move.w	8(a0),d0
00015E8E 0240 FF80                  		andi.w	#$FF80,d0
00015E92 3238 F700                  		move.w	($FFFFF700).w,d1
00015E96 0441 0080                  		subi.w	#$80,d1
00015E9A 0241 FF80                  		andi.w	#$FF80,d1
00015E9E 9041                       		sub.w	d1,d0
00015EA0 0C40 0280                  		cmpi.w	#$280,d0
00015EA4 6200                       		bhi.s	Obj68_Delete
00015EA6 4E75                       		rts	
00015EA8                            ; ===========================================================================
00015EA8                            
00015EA8                            Obj68_Delete:
00015EA8 4EF9 0000 DD1A             		jmp	DeleteObject
00015EAE                            ; ===========================================================================
00015EAE                            
00015EAE                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015EAE 7400                       		moveq	#0,d2
00015EB0 1428 0038                  		move.b	$38(a0),d2
00015EB4 3602                       		move.w	d2,d3
00015EB6 D643                       		add.w	d3,d3
00015EB8 43F8 D000                  		lea	($FFFFD000).w,a1
00015EBC 3029 0008                  		move.w	8(a1),d0
00015EC0 9068 0008                  		sub.w	8(a0),d0
00015EC4 D042                       		add.w	d2,d0
00015EC6 B043                       		cmp.w	d3,d0
00015EC8 6400                       		bcc.s	locret_1572E
00015ECA 3229 000C                  		move.w	$C(a1),d1
00015ECE 9268 000C                  		sub.w	$C(a0),d1
00015ED2 0641 0030                  		addi.w	#$30,d1
00015ED6 0C41 0030                  		cmpi.w	#$30,d1
00015EDA 6400                       		bcc.s	locret_1572E
00015EDC 0829 0001 0022             		btst	#1,$22(a1)
00015EE2 6600                       		bne.s	locret_1572E
00015EE4 3028 0036                  		move.w	$36(a0),d0
00015EE8 D169 0008                  		add.w	d0,8(a1)
00015EEC                            
00015EEC                            locret_1572E:
00015EEC 4E75                       		rts	
00015EEE                            
00015EEE                            ; ===========================================================================
00015EEE                            ; ---------------------------------------------------------------------------
00015EEE                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00015EEE                            ; ---------------------------------------------------------------------------
00015EEE                            
00015EEE                            Obj69:					; XREF: Obj_Index
00015EEE 7000                       		moveq	#0,d0
00015EF0 1028 0024                  		move.b	$24(a0),d0
00015EF4 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015EF8 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00015EFC                            ; ===========================================================================
00015EFC 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00015EFE 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00015F00 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015F02                            ; ===========================================================================
00015F02                            
00015F02                            Obj69_Main:				; XREF: Obj69_Index
00015F02 5428 0024                  		addq.b	#2,$24(a0)
00015F06 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00015F0E 317C 4492 0002             		move.w	#$4492,2(a0)
00015F14 0028 0004 0001             		ori.b	#4,1(a0)
00015F1A 117C 0080 0019             		move.b	#$80,$19(a0)
00015F20 7000                       		moveq	#0,d0
00015F22 1028 0028                  		move.b	$28(a0),d0
00015F26 0240 000F                  		andi.w	#$F,d0
00015F2A C0FC 003C                  		mulu.w	#$3C,d0
00015F2E 3140 0032                  		move.w	d0,$32(a0)
00015F32 4A28 0028                  		tst.b	$28(a0)
00015F36 6A00                       		bpl.s	Obj69_Trapdoor
00015F38 5428 0024                  		addq.b	#2,$24(a0)
00015F3C 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00015F44 317C 04DF 0002             		move.w	#$4DF,2(a0)
00015F4A 117C 0010 0019             		move.b	#$10,$19(a0)
00015F50 117C 0002 001C             		move.b	#2,$1C(a0)
00015F56 7000                       		moveq	#0,d0
00015F58 1028 0028                  		move.b	$28(a0),d0	; get object type
00015F5C 3200                       		move.w	d0,d1
00015F5E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015F62 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00015F66 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00015F6A 3140 0032                  		move.w	d0,$32(a0)
00015F6E 0241 0070                  		andi.w	#$70,d1
00015F72 0641 0010                  		addi.w	#$10,d1
00015F76 E549                       		lsl.w	#2,d1
00015F78 5341                       		subq.w	#1,d1
00015F7A 3141 0036                  		move.w	d1,$36(a0)
00015F7E 6000                       		bra.s	Obj69_Spinner
00015F80                            ; ===========================================================================
00015F80                            
00015F80                            Obj69_Trapdoor:				; XREF: Obj69_Index
00015F80 5368 0030                  		subq.w	#1,$30(a0)
00015F84 6A00                       		bpl.s	Obj69_Animate
00015F86 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015F8C 0868 0000 001C             		bchg	#0,$1C(a0)
00015F92 4A28 0001                  		tst.b	1(a0)
00015F96 6A00                       		bpl.s	Obj69_Animate
00015F98 303C 00BB                  		move.w	#$BB,d0
00015F9C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play door sound
00015FA2                            
00015FA2                            Obj69_Animate:
00015FA2 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015FA8 4EB9 0000 AD9E             		jsr	AnimateSprite
00015FAE 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00015FB2 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00015FB4 323C 004B                  		move.w	#$4B,d1
00015FB8 343C 000C                  		move.w	#$C,d2
00015FBC 3602                       		move.w	d2,d3
00015FBE 5243                       		addq.w	#1,d3
00015FC0 3828 0008                  		move.w	8(a0),d4
00015FC4 6100 A0E8                  		bsr.w	SolidObject
00015FC8 6000 9DBC                  		bra.w	MarkObjGone
00015FCC                            ; ===========================================================================
00015FCC                            
00015FCC                            Obj69_NotSolid:
00015FCC 0828 0003 0022             		btst	#3,$22(a0)
00015FD2 6700                       		beq.s	Obj69_Display
00015FD4 43F8 D000                  		lea	($FFFFD000).w,a1
00015FD8 08A9 0003 0022             		bclr	#3,$22(a1)
00015FDE 08A8 0003 0022             		bclr	#3,$22(a0)
00015FE4 4228 0025                  		clr.b	$25(a0)
00015FE8                            
00015FE8                            Obj69_Display:
00015FE8 6000 9D9C                  		bra.w	MarkObjGone
00015FEC                            ; ===========================================================================
00015FEC                            
00015FEC                            Obj69_Spinner:				; XREF: Obj69_Index
00015FEC 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015FF0 C068 0036                  		and.w	$36(a0),d0
00015FF4 6600                       		bne.s	Obj69_Delay
00015FF6 117C 0001 0034             		move.b	#1,$34(a0)
00015FFC                            
00015FFC                            Obj69_Delay:
00015FFC 4A28 0034                  		tst.b	$34(a0)
00016000 6700                       		beq.s	Obj69_Animate2
00016002 5368 0030                  		subq.w	#1,$30(a0)
00016006 6A00                       		bpl.s	Obj69_Animate2
00016008 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001600E 4228 0034                  		clr.b	$34(a0)
00016012 0868 0000 001C             		bchg	#0,$1C(a0)
00016018                            
00016018                            Obj69_Animate2:
00016018 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001601E 4EB9 0000 AD9E             		jsr	AnimateSprite
00016024 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00016028 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
0001602A 323C 001B                  		move.w	#$1B,d1
0001602E 343C 0007                  		move.w	#7,d2
00016032 3602                       		move.w	d2,d3
00016034 5243                       		addq.w	#1,d3
00016036 3828 0008                  		move.w	8(a0),d4
0001603A 6100 A072                  		bsr.w	SolidObject
0001603E 6000 9D46                  		bra.w	MarkObjGone
00016042                            ; ===========================================================================
00016042                            
00016042                            Obj69_NotSolid2:
00016042 0828 0003 0022             		btst	#3,$22(a0)
00016048 6700                       		beq.s	Obj69_Display2
0001604A 43F8 D000                  		lea	($FFFFD000).w,a1
0001604E 08A9 0003 0022             		bclr	#3,$22(a1)
00016054 08A8 0003 0022             		bclr	#3,$22(a0)
0001605A 4228 0025                  		clr.b	$25(a0)
0001605E                            
0001605E                            Obj69_Display2:
0001605E 6000 9D26                  		bra.w	MarkObjGone
00016062                            ; ===========================================================================
00016062                            Ani_obj69:
00016062                            	include "_anim\obj69.asm"
00016062                            ; ---------------------------------------------------------------------------
00016062                            ; Animation script - trapdoor (SBZ)
00016062                            ; ---------------------------------------------------------------------------
00016062 0000                       		dc.w byte_158AC-Ani_obj69
00016064 0000                       		dc.w byte_158B2-Ani_obj69
00016066 0000                       		dc.w byte_158B8-Ani_obj69
00016068 0000                       		dc.w byte_158CC-Ani_obj69
0001606A 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00016070 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00016076 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016083 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
0001608A 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016097 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
0001609E                            		even
0001609E                            		even
0001609E                            
0001609E                            ; ---------------------------------------------------------------------------
0001609E                            ; Sprite mappings - trapdoor (SBZ)
0001609E                            ; ---------------------------------------------------------------------------
0001609E                            Map_obj69:
0001609E                            	include "_maps\obj69.asm"
0001609E                            ; ---------------------------------------------------------------------------
0001609E                            ; Sprite mappings - trapdoor (SBZ)
0001609E                            ; ---------------------------------------------------------------------------
0001609E 0000                       		dc.w byte_158E6-Map_obj69
000160A0 0000                       		dc.w byte_158FB-Map_obj69
000160A2 0000                       		dc.w byte_15924-Map_obj69
000160A4 04                         byte_158E6:	dc.b 4
000160A5 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000160AA F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000160AF F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000160B4 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000160B9 08                         byte_158FB:	dc.b 8
000160BA F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000160BF 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000160C4 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000160C9 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000160CE F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000160D3 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
000160D8 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
000160DD 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
000160E2 04                         byte_15924:	dc.b 4
000160E3 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
000160E8 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
000160ED 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
000160F2 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
000160F8 00                         		even
000160F8 00                         		even
000160F8                            
000160F8                            ; ---------------------------------------------------------------------------
000160F8                            ; Sprite mappings - spinning platforms (SBZ)
000160F8                            ; ---------------------------------------------------------------------------
000160F8                            Map_obj69a:
000160F8                            	include "_maps\obj69a.asm"
000160F8                            ; ---------------------------------------------------------------------------
000160F8                            ; Sprite mappings - spinning platforms (SBZ)
000160F8                            ; ---------------------------------------------------------------------------
000160F8 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
000160FC 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00016100 0000                       		dc.w byte_15970-Map_obj69a
00016102 02                         byte_15944:	dc.b 2
00016103 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00016108 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
0001610D 02                         byte_1594F:	dc.b 2
0001610E F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00016113 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00016118 02                         byte_1595A:	dc.b 2
00016119 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
0001611E 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00016123 02                         byte_15965:	dc.b 2
00016124 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00016129 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
0001612E 02                         byte_15970:	dc.b 2
0001612F F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00016134 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
0001613A 00                         		even
0001613A 00                         		even
0001613A                            
0001613A                            ; ===========================================================================
0001613A                            ; ---------------------------------------------------------------------------
0001613A                            ; Object 6A - ground saws and pizza cutters (SBZ)
0001613A                            ; ---------------------------------------------------------------------------
0001613A                            
0001613A                            Obj6A:					; XREF: Obj_Index
0001613A 7000                       		moveq	#0,d0
0001613C 1028 0024                  		move.b	$24(a0),d0
00016140 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00016144 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00016148                            ; ===========================================================================
00016148 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
0001614A 0000                       		dc.w Obj6A_Action-Obj6A_Index
0001614C                            ; ===========================================================================
0001614C                            
0001614C                            Obj6A_Main:				; XREF: Obj6A_Index
0001614C 5428 0024                  		addq.b	#2,$24(a0)
00016150 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00016158 317C 43B5 0002             		move.w	#$43B5,2(a0)
0001615E 117C 0004 0001             		move.b	#4,1(a0)
00016164 117C 0004 0018             		move.b	#4,$18(a0)
0001616A 117C 0020 0019             		move.b	#$20,$19(a0)
00016170 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016176 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001617C 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00016182 6400                       		bcc.s	Obj6A_Action
00016184 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001618A                            
0001618A                            Obj6A_Action:				; XREF: Obj6A_Index
0001618A 7000                       		moveq	#0,d0
0001618C 1028 0028                  		move.b	$28(a0),d0
00016190 0240 0007                  		andi.w	#7,d0
00016194 D040                       		add.w	d0,d0
00016196 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
0001619A 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
0001619E 3028 003A                  		move.w	$3A(a0),d0
000161A2 0240 FF80                  		andi.w	#$FF80,d0
000161A6 3238 F700                  		move.w	($FFFFF700).w,d1
000161AA 0441 0080                  		subi.w	#$80,d1
000161AE 0241 FF80                  		andi.w	#$FF80,d1
000161B2 9041                       		sub.w	d1,d0
000161B4 0C40 0280                  		cmpi.w	#$280,d0
000161B8 6200                       		bhi.s	Obj6A_Delete
000161BA 4EF9 0000 DCDE             		jmp	DisplaySprite
000161C0                            ; ===========================================================================
000161C0                            
000161C0                            Obj6A_Delete:
000161C0 4EF9 0000 DD1A             		jmp	DeleteObject
000161C6                            ; ===========================================================================
000161C6 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
000161CA 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
000161CE 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
000161D0                            ; ===========================================================================
000161D0                            
000161D0                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
000161D0 4E75                       		rts	
000161D2                            ; ===========================================================================
000161D2                            
000161D2                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
000161D2 323C 0060                  		move.w	#$60,d1
000161D6 7000                       		moveq	#0,d0
000161D8 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000161DC 0828 0000 0022             		btst	#0,$22(a0)
000161E2 6700                       		beq.s	Obj6A_Animate01
000161E4 4440                       		neg.w	d0
000161E6 D041                       		add.w	d1,d0
000161E8                            
000161E8                            Obj6A_Animate01:
000161E8 3228 003A                  		move.w	$3A(a0),d1
000161EC 9240                       		sub.w	d0,d1
000161EE 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
000161F2 5328 001E                  		subq.b	#1,$1E(a0)
000161F6 6A00                       		bpl.s	loc_15A46
000161F8 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
000161FE 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016204                            
00016204                            loc_15A46:
00016204 4A28 0001                  		tst.b	1(a0)
00016208 6A00                       		bpl.s	locret_15A60
0001620A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001620E 0240 000F                  		andi.w	#$F,d0
00016212 6600                       		bne.s	locret_15A60
00016214 303C 00B0                  		move.w	#$B0,d0
00016218 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
0001621E                            
0001621E                            locret_15A60:
0001621E 4E75                       		rts	
00016220                            ; ===========================================================================
00016220                            
00016220                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00016220 323C 0030                  		move.w	#$30,d1
00016224 7000                       		moveq	#0,d0
00016226 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001622A 0828 0000 0022             		btst	#0,$22(a0)
00016230 6700                       		beq.s	Obj6A_Animate02
00016232 4440                       		neg.w	d0
00016234 0640 0080                  		addi.w	#$80,d0
00016238                            
00016238                            Obj6A_Animate02:
00016238 3228 0038                  		move.w	$38(a0),d1
0001623C 9240                       		sub.w	d0,d1
0001623E 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00016242 5328 001E                  		subq.b	#1,$1E(a0)
00016246 6A00                       		bpl.s	loc_15A96
00016248 117C 0002 001E             		move.b	#2,$1E(a0)
0001624E 0868 0000 001A             		bchg	#0,$1A(a0)
00016254                            
00016254                            loc_15A96:
00016254 4A28 0001                  		tst.b	1(a0)
00016258 6A00                       		bpl.s	locret_15AB0
0001625A 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001625E 0C00 0018                  		cmpi.b	#$18,d0
00016262 6600                       		bne.s	locret_15AB0
00016264 303C 00B0                  		move.w	#$B0,d0
00016268 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
0001626E                            
0001626E                            locret_15AB0:
0001626E 4E75                       		rts	
00016270                            ; ===========================================================================
00016270                            
00016270                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00016270 4A28 003D                  		tst.b	$3D(a0)
00016274 6600                       		bne.s	Obj6A_Animate03
00016276 3038 D008                  		move.w	($FFFFD008).w,d0
0001627A 0440 00C0                  		subi.w	#$C0,d0
0001627E 6500                       		bcs.s	loc_15B02
00016280 9068 0008                  		sub.w	8(a0),d0
00016284 6500                       		bcs.s	loc_15B02
00016286 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001628A 0440 0080                  		subi.w	#$80,d0
0001628E B068 000C                  		cmp.w	$C(a0),d0
00016292 6400                       		bcc.s	locret_15B04
00016294 0640 0100                  		addi.w	#$100,d0
00016298 B068 000C                  		cmp.w	$C(a0),d0
0001629C 6500                       		bcs.s	locret_15B04
0001629E 117C 0001 003D             		move.b	#1,$3D(a0)
000162A4 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000162AA 117C 00A2 0020             		move.b	#$A2,$20(a0)
000162B0 117C 0002 001A             		move.b	#2,$1A(a0)
000162B6 303C 00B0                  		move.w	#$B0,d0
000162BA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
000162C0                            
000162C0                            loc_15B02:
000162C0 588F                       		addq.l	#4,sp
000162C2                            
000162C2                            locret_15B04:
000162C2 4E75                       		rts	
000162C4                            ; ===========================================================================
000162C4                            
000162C4                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000162C4 4EB9 0000 DCB8             		jsr	SpeedToPos
000162CA 3168 0008 003A             		move.w	8(a0),$3A(a0)
000162D0 5328 001E                  		subq.b	#1,$1E(a0)
000162D4 6A00                       		bpl.s	locret_15B24
000162D6 117C 0002 001E             		move.b	#2,$1E(a0)
000162DC 0868 0000 001A             		bchg	#0,$1A(a0)
000162E2                            
000162E2                            locret_15B24:
000162E2 4E75                       		rts	
000162E4                            ; ===========================================================================
000162E4                            
000162E4                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
000162E4 4A28 003D                  		tst.b	$3D(a0)
000162E8 6600                       		bne.s	Obj6A_Animate04
000162EA 3038 D008                  		move.w	($FFFFD008).w,d0
000162EE 0640 00E0                  		addi.w	#$E0,d0
000162F2 9068 0008                  		sub.w	8(a0),d0
000162F6 6400                       		bcc.s	loc_15B74
000162F8 3038 D00C                  		move.w	($FFFFD00C).w,d0
000162FC 0440 0080                  		subi.w	#$80,d0
00016300 B068 000C                  		cmp.w	$C(a0),d0
00016304 6400                       		bcc.s	locret_15B76
00016306 0640 0100                  		addi.w	#$100,d0
0001630A B068 000C                  		cmp.w	$C(a0),d0
0001630E 6500                       		bcs.s	locret_15B76
00016310 117C 0001 003D             		move.b	#1,$3D(a0)
00016316 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
0001631C 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016322 117C 0002 001A             		move.b	#2,$1A(a0)
00016328 303C 00B0                  		move.w	#$B0,d0
0001632C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
00016332                            
00016332                            loc_15B74:
00016332 588F                       		addq.l	#4,sp
00016334                            
00016334                            locret_15B76:
00016334 4E75                       		rts	
00016336                            ; ===========================================================================
00016336                            
00016336                            Obj6A_Animate04:
00016336 4EB9 0000 DCB8             		jsr	SpeedToPos
0001633C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016342 5328 001E                  		subq.b	#1,$1E(a0)
00016346 6A00                       		bpl.s	locret_15B96
00016348 117C 0002 001E             		move.b	#2,$1E(a0)
0001634E 0868 0000 001A             		bchg	#0,$1A(a0)
00016354                            
00016354                            locret_15B96:
00016354 4E75                       		rts	
00016356                            ; ===========================================================================
00016356                            ; ---------------------------------------------------------------------------
00016356                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016356                            ; ---------------------------------------------------------------------------
00016356                            Map_obj6A:
00016356                            	include "_maps\obj6A.asm"
00016356                            ; ---------------------------------------------------------------------------
00016356                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016356                            ; ---------------------------------------------------------------------------
00016356 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
0001635A 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
0001635E 07                         byte_15BA0:	dc.b 7
0001635F C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016364 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016369 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001636E E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016373 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016378 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001637D 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016382 07                         byte_15BC4:	dc.b 7
00016383 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016388 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0001638D E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016392 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016397 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001639C 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000163A1 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000163A6 04                         byte_15BE8:	dc.b 4
000163A7 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000163AC E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000163B1 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000163B6 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000163BB 04                         byte_15BFD:	dc.b 4
000163BC E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000163C1 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000163C6 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000163CB 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000163D0                            		even
000163D0                            		even
000163D0                            
000163D0                            ; ===========================================================================
000163D0                            ; ---------------------------------------------------------------------------
000163D0                            ; Object 6B - stomper (SBZ)
000163D0                            ; ---------------------------------------------------------------------------
000163D0                            
000163D0                            Obj6B:					; XREF: Obj_Index
000163D0 7000                       		moveq	#0,d0
000163D2 1028 0024                  		move.b	$24(a0),d0
000163D6 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
000163DA 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
000163DE                            ; ===========================================================================
000163DE 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
000163E0 0000                       		dc.w Obj6B_Action-Obj6B_Index
000163E2                            
000163E2 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
000163E6 1C20 3803                  		dc.b  $1C, $20,	$38,   3
000163EA 1C20 4004                  		dc.b  $1C, $20,	$40,   4
000163EE 1C20 6004                  		dc.b  $1C, $20,	$60,   4
000163F2 8040 0005                  		dc.b  $80, $40,	  0,   5
000163F6                            ; ===========================================================================
000163F6                            
000163F6                            Obj6B_Main:				; XREF: Obj6B_Index
000163F6 5428 0024                  		addq.b	#2,$24(a0)
000163FA 7000                       		moveq	#0,d0
000163FC 1028 0028                  		move.b	$28(a0),d0
00016400 E448                       		lsr.w	#2,d0
00016402 0240 001C                  		andi.w	#$1C,d0
00016406 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
0001640A 115B 0019                  		move.b	(a3)+,$19(a0)
0001640E 115B 0016                  		move.b	(a3)+,$16(a0)
00016412 E448                       		lsr.w	#2,d0
00016414 1140 001A                  		move.b	d0,$1A(a0)
00016418 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00016420 317C 22C0 0002             		move.w	#$22C0,2(a0)
00016426 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
0001642C 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
0001642E 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00016434 6700                       		beq.s	Obj6B_SBZ3
00016436                            
00016436                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00016436 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001643A 7000                       		moveq	#0,d0
0001643C 1028 0023                  		move.b	$23(a0),d0
00016440 6700                       		beq.s	Obj6B_Delete
00016442 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016448                            
00016448                            Obj6B_Delete:
00016448 4EF9 0000 DD1A             		jmp	DeleteObject
0001644E                            ; ===========================================================================
0001644E                            
0001644E                            Obj6B_SBZ3:				; XREF: Obj6B_Main
0001644E 317C 41F0 0002             		move.w	#$41F0,2(a0)
00016454 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
0001645A 6600                       		bne.s	Obj6B_SBZ12
0001645C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016460 7000                       		moveq	#0,d0
00016462 1028 0023                  		move.b	$23(a0),d0
00016466 6700                       		beq.s	Obj6B_SBZ12
00016468 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001646E 6700                       		beq.s	Obj6B_SBZ12
00016470 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016474 60C0                       		bra.s	Obj6B_ChkGone
00016476                            ; ===========================================================================
00016476                            
00016476                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00016476 0028 0004 0001             		ori.b	#4,1(a0)
0001647C 117C 0004 0018             		move.b	#4,$18(a0)
00016482 3168 0008 0034             		move.w	8(a0),$34(a0)
00016488 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001648E 7000                       		moveq	#0,d0
00016490 101B                       		move.b	(a3)+,d0
00016492 3140 003C                  		move.w	d0,$3C(a0)
00016496 7000                       		moveq	#0,d0
00016498 1028 0028                  		move.b	$28(a0),d0
0001649C 6A00                       		bpl.s	Obj6B_Action
0001649E 0200 000F                  		andi.b	#$F,d0
000164A2 1140 003E                  		move.b	d0,$3E(a0)
000164A6 1153 0028                  		move.b	(a3),$28(a0)
000164AA 0C13 0005                  		cmpi.b	#5,(a3)
000164AE 6600                       		bne.s	Obj6B_ChkGone2
000164B0 08E8 0004 0001             		bset	#4,1(a0)
000164B6                            
000164B6                            Obj6B_ChkGone2:
000164B6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000164BA 7000                       		moveq	#0,d0
000164BC 1028 0023                  		move.b	$23(a0),d0
000164C0 6700                       		beq.s	Obj6B_Action
000164C2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000164C8                            
000164C8                            Obj6B_Action:				; XREF: Obj6B_Index
000164C8 3F28 0008                  		move.w	8(a0),-(sp)
000164CC 7000                       		moveq	#0,d0
000164CE 1028 0028                  		move.b	$28(a0),d0
000164D2 0240 000F                  		andi.w	#$F,d0
000164D6 D040                       		add.w	d0,d0
000164D8 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
000164DC 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
000164E0 381F                       		move.w	(sp)+,d4
000164E2 4A28 0001                  		tst.b	1(a0)
000164E6 6A00                       		bpl.s	Obj6B_ChkDel
000164E8 7200                       		moveq	#0,d1
000164EA 1228 0019                  		move.b	$19(a0),d1
000164EE 0641 000B                  		addi.w	#$B,d1
000164F2 7400                       		moveq	#0,d2
000164F4 1428 0016                  		move.b	$16(a0),d2
000164F8 3602                       		move.w	d2,d3
000164FA 5243                       		addq.w	#1,d3
000164FC 6100 9BB0                  		bsr.w	SolidObject
00016500                            
00016500                            Obj6B_ChkDel:
00016500 3028 0034                  		move.w	$34(a0),d0
00016504 0240 FF80                  		andi.w	#$FF80,d0
00016508 3238 F700                  		move.w	($FFFFF700).w,d1
0001650C 0441 0080                  		subi.w	#$80,d1
00016510 0241 FF80                  		andi.w	#$FF80,d1
00016514 9041                       		sub.w	d1,d0
00016516 0C40 0280                  		cmpi.w	#$280,d0
0001651A 6200                       		bhi.s	loc_15D64
0001651C 4EF9 0000 DCDE             		jmp	DisplaySprite
00016522                            ; ===========================================================================
00016522                            
00016522                            loc_15D64:
00016522 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00016528 6600                       		bne.s	Obj6B_Delete2
0001652A 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001652E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016532 7000                       		moveq	#0,d0
00016534 1028 0023                  		move.b	$23(a0),d0
00016538 6700                       		beq.s	Obj6B_Delete2
0001653A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016540                            
00016540                            Obj6B_Delete2:
00016540 4EF9 0000 DD1A             		jmp	DeleteObject
00016546                            ; ===========================================================================
00016546 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
0001654A 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
0001654E 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00016552                            ; ===========================================================================
00016552                            
00016552                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00016552 4E75                       		rts	
00016554                            ; ===========================================================================
00016554                            
00016554                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00016554 4A28 0038                  		tst.b	$38(a0)
00016558 6600                       		bne.s	loc_15DB4
0001655A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001655E 7000                       		moveq	#0,d0
00016560 1028 003E                  		move.b	$3E(a0),d0
00016564 0832 0000 0000             		btst	#0,(a2,d0.w)
0001656A 6700                       		beq.s	loc_15DC2
0001656C 117C 0001 0038             		move.b	#1,$38(a0)
00016572                            
00016572                            loc_15DB4:
00016572 3028 003C                  		move.w	$3C(a0),d0
00016576 B068 003A                  		cmp.w	$3A(a0),d0
0001657A 6700                       		beq.s	loc_15DE0
0001657C 5468 003A                  		addq.w	#2,$3A(a0)
00016580                            
00016580                            loc_15DC2:
00016580 3028 003A                  		move.w	$3A(a0),d0
00016584 0828 0000 0022             		btst	#0,$22(a0)
0001658A 6700                       		beq.s	loc_15DD4
0001658C 4440                       		neg.w	d0
0001658E 0640 0080                  		addi.w	#$80,d0
00016592                            
00016592                            loc_15DD4:
00016592 3228 0034                  		move.w	$34(a0),d1
00016596 9240                       		sub.w	d0,d1
00016598 3141 0008                  		move.w	d1,8(a0)
0001659C 4E75                       		rts	
0001659E                            ; ===========================================================================
0001659E                            
0001659E                            loc_15DE0:
0001659E 5228 0028                  		addq.b	#1,$28(a0)
000165A2 317C 00B4 0036             		move.w	#$B4,$36(a0)
000165A8 4228 0038                  		clr.b	$38(a0)
000165AC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000165B0 7000                       		moveq	#0,d0
000165B2 1028 0023                  		move.b	$23(a0),d0
000165B6 67C8                       		beq.s	loc_15DC2
000165B8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000165BE 60C0                       		bra.s	loc_15DC2
000165C0                            ; ===========================================================================
000165C0                            
000165C0                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000165C0 4A28 0038                  		tst.b	$38(a0)
000165C4 6600                       		bne.s	loc_15E14
000165C6 5368 0036                  		subq.w	#1,$36(a0)
000165CA 6600                       		bne.s	loc_15E1E
000165CC 117C 0001 0038             		move.b	#1,$38(a0)
000165D2                            
000165D2                            loc_15E14:
000165D2 4A68 003A                  		tst.w	$3A(a0)
000165D6 6700                       		beq.s	loc_15E3C
000165D8 5568 003A                  		subq.w	#2,$3A(a0)
000165DC                            
000165DC                            loc_15E1E:
000165DC 3028 003A                  		move.w	$3A(a0),d0
000165E0 0828 0000 0022             		btst	#0,$22(a0)
000165E6 6700                       		beq.s	loc_15E30
000165E8 4440                       		neg.w	d0
000165EA 0640 0080                  		addi.w	#$80,d0
000165EE                            
000165EE                            loc_15E30:
000165EE 3228 0034                  		move.w	$34(a0),d1
000165F2 9240                       		sub.w	d0,d1
000165F4 3141 0008                  		move.w	d1,8(a0)
000165F8 4E75                       		rts	
000165FA                            ; ===========================================================================
000165FA                            
000165FA                            loc_15E3C:
000165FA 5328 0028                  		subq.b	#1,$28(a0)
000165FE 4228 0038                  		clr.b	$38(a0)
00016602 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016606 7000                       		moveq	#0,d0
00016608 1028 0023                  		move.b	$23(a0),d0
0001660C 67CE                       		beq.s	loc_15E1E
0001660E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00016614 60C6                       		bra.s	loc_15E1E
00016616                            ; ===========================================================================
00016616                            
00016616                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00016616 4A28 0038                  		tst.b	$38(a0)
0001661A 6600                       		bne.s	loc_15E7C
0001661C 4A68 003A                  		tst.w	$3A(a0)
00016620 6700                       		beq.s	loc_15E6A
00016622 5368 003A                  		subq.w	#1,$3A(a0)
00016626 6000                       		bra.s	loc_15E8E
00016628                            ; ===========================================================================
00016628                            
00016628                            loc_15E6A:
00016628 5368 0036                  		subq.w	#1,$36(a0)
0001662C 6A00                       		bpl.s	loc_15E8E
0001662E 317C 003C 0036             		move.w	#$3C,$36(a0)
00016634 117C 0001 0038             		move.b	#1,$38(a0)
0001663A                            
0001663A                            loc_15E7C:
0001663A 5068 003A                  		addq.w	#8,$3A(a0)
0001663E 3028 003A                  		move.w	$3A(a0),d0
00016642 B068 003C                  		cmp.w	$3C(a0),d0
00016646 6600                       		bne.s	loc_15E8E
00016648 4228 0038                  		clr.b	$38(a0)
0001664C                            
0001664C                            loc_15E8E:
0001664C 3028 003A                  		move.w	$3A(a0),d0
00016650 0828 0000 0022             		btst	#0,$22(a0)
00016656 6700                       		beq.s	loc_15EA0
00016658 4440                       		neg.w	d0
0001665A 0640 0038                  		addi.w	#$38,d0
0001665E                            
0001665E                            loc_15EA0:
0001665E 3228 0030                  		move.w	$30(a0),d1
00016662 D240                       		add.w	d0,d1
00016664 3141 000C                  		move.w	d1,$C(a0)
00016668 4E75                       		rts	
0001666A                            ; ===========================================================================
0001666A                            
0001666A                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
0001666A 4A28 0038                  		tst.b	$38(a0)
0001666E 6600                       		bne.s	loc_15ED0
00016670 4A68 003A                  		tst.w	$3A(a0)
00016674 6700                       		beq.s	loc_15EBE
00016676 5168 003A                  		subq.w	#8,$3A(a0)
0001667A 6000                       		bra.s	loc_15EF0
0001667C                            ; ===========================================================================
0001667C                            
0001667C                            loc_15EBE:
0001667C 5368 0036                  		subq.w	#1,$36(a0)
00016680 6A00                       		bpl.s	loc_15EF0
00016682 317C 003C 0036             		move.w	#$3C,$36(a0)
00016688 117C 0001 0038             		move.b	#1,$38(a0)
0001668E                            
0001668E                            loc_15ED0:
0001668E 3028 003A                  		move.w	$3A(a0),d0
00016692 B068 003C                  		cmp.w	$3C(a0),d0
00016696 6700                       		beq.s	loc_15EE0
00016698 5068 003A                  		addq.w	#8,$3A(a0)
0001669C 6000                       		bra.s	loc_15EF0
0001669E                            ; ===========================================================================
0001669E                            
0001669E                            loc_15EE0:
0001669E 5368 0036                  		subq.w	#1,$36(a0)
000166A2 6A00                       		bpl.s	loc_15EF0
000166A4 317C 003C 0036             		move.w	#$3C,$36(a0)
000166AA 4228 0038                  		clr.b	$38(a0)
000166AE                            
000166AE                            loc_15EF0:
000166AE 3028 003A                  		move.w	$3A(a0),d0
000166B2 0828 0000 0022             		btst	#0,$22(a0)
000166B8 6700                       		beq.s	loc_15F02
000166BA 4440                       		neg.w	d0
000166BC 0640 0038                  		addi.w	#$38,d0
000166C0                            
000166C0                            loc_15F02:
000166C0 3228 0030                  		move.w	$30(a0),d1
000166C4 D240                       		add.w	d0,d1
000166C6 3141 000C                  		move.w	d1,$C(a0)
000166CA 4E75                       		rts	
000166CC                            ; ===========================================================================
000166CC                            
000166CC                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000166CC 4A28 0038                  		tst.b	$38(a0)
000166D0 6600                       		bne.s	loc_15F3E
000166D2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000166D6 7000                       		moveq	#0,d0
000166D8 1028 003E                  		move.b	$3E(a0),d0
000166DC 0832 0000 0000             		btst	#0,(a2,d0.w)
000166E2 6700                       		beq.s	locret_15F5C
000166E4 117C 0001 0038             		move.b	#1,$38(a0)
000166EA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000166EE 7000                       		moveq	#0,d0
000166F0 1028 0023                  		move.b	$23(a0),d0
000166F4 6700                       		beq.s	loc_15F3E
000166F6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000166FC                            
000166FC                            loc_15F3E:
000166FC 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016704 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
0001670C 3168 0008 0034             		move.w	8(a0),$34(a0)
00016712 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016718 6700                       		beq.s	loc_15F5E
0001671A                            
0001671A                            locret_15F5C:
0001671A 4E75                       		rts	
0001671C                            ; ===========================================================================
0001671C                            
0001671C                            loc_15F5E:
0001671C 4228 0028                  		clr.b	$28(a0)
00016720 4228 0038                  		clr.b	$38(a0)
00016724 4E75                       		rts	
00016726                            ; ===========================================================================
00016726                            ; ---------------------------------------------------------------------------
00016726                            ; Sprite mappings - stomper and	platforms (SBZ)
00016726                            ; ---------------------------------------------------------------------------
00016726                            Map_obj6B:
00016726                            	include "_maps\obj6B.asm"
00016726                            ; ---------------------------------------------------------------------------
00016726                            ; Sprite mappings - stomper and	platforms (SBZ)
00016726                            ; ---------------------------------------------------------------------------
00016726 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
0001672A 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
0001672E 0000                       		dc.w byte_15FB0-Map_obj6B
00016730 04                         byte_15F72:	dc.b 4
00016731 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016736 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
0001673B F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00016740 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016745 08                         byte_15F87:	dc.b 8
00016746 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
0001674B E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00016750 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016755 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
0001675A 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
0001675F 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016764 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016769 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
0001676E 0E                         byte_15FB0:	dc.b $E
0001676F C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016774 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016779 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
0001677E C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016783 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016788 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
0001678D C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016792 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016797 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
0001679C E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000167A1 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000167A6 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000167AB 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000167B0 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000167B6 00                         		even
000167B6 00                         		even
000167B6                            
000167B6                            ; ===========================================================================
000167B6                            ; ---------------------------------------------------------------------------
000167B6                            ; Object 6C - vanishing	platforms (SBZ)
000167B6                            ; ---------------------------------------------------------------------------
000167B6                            
000167B6                            Obj6C:					; XREF: Obj_Index
000167B6 7000                       		moveq	#0,d0
000167B8 1028 0024                  		move.b	$24(a0),d0
000167BC 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000167C0 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000167C4                            ; ===========================================================================
000167C4 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000167C6 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000167C8 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000167CA 0000                       		dc.w loc_16068-Obj6C_Index
000167CC                            ; ===========================================================================
000167CC                            
000167CC                            Obj6C_Main:				; XREF: Obj6C_Index
000167CC 5C28 0024                  		addq.b	#6,$24(a0)
000167D0 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
000167D8 317C 44C3 0002             		move.w	#$44C3,2(a0)
000167DE 0028 0004 0001             		ori.b	#4,1(a0)
000167E4 117C 0010 0019             		move.b	#$10,$19(a0)
000167EA 117C 0004 0018             		move.b	#4,$18(a0)
000167F0 7000                       		moveq	#0,d0
000167F2 1028 0028                  		move.b	$28(a0),d0	; get object type
000167F6 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000167FA 5240                       		addq.w	#1,d0		; add 1
000167FC EF48                       		lsl.w	#7,d0		; multiply by $80
000167FE 3200                       		move.w	d0,d1
00016800 5340                       		subq.w	#1,d0
00016802 3140 0030                  		move.w	d0,$30(a0)
00016806 3140 0032                  		move.w	d0,$32(a0)
0001680A 7000                       		moveq	#0,d0
0001680C 1028 0028                  		move.b	$28(a0),d0	; get object type
00016810 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016814 0641 0080                  		addi.w	#$80,d1
00016818 C0C1                       		mulu.w	d1,d0
0001681A E088                       		lsr.l	#8,d0
0001681C 3140 0036                  		move.w	d0,$36(a0)
00016820 5341                       		subq.w	#1,d1
00016822 3141 0038                  		move.w	d1,$38(a0)
00016826                            
00016826                            loc_16068:				; XREF: Obj6C_Index
00016826 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001682A 9068 0036                  		sub.w	$36(a0),d0
0001682E C068 0038                  		and.w	$38(a0),d0
00016832 6600                       		bne.s	Obj6C_Animate
00016834 5928 0024                  		subq.b	#4,$24(a0)
00016838 6000                       		bra.s	Obj6C_Vanish
0001683A                            ; ===========================================================================
0001683A                            
0001683A                            Obj6C_Animate:
0001683A 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016840 4EB9 0000 AD9E             		jsr	AnimateSprite
00016846 6000 953E                  		bra.w	MarkObjGone
0001684A                            ; ===========================================================================
0001684A                            
0001684A                            Obj6C_Vanish:				; XREF: Obj6C_Index
0001684A 5368 0030                  		subq.w	#1,$30(a0)
0001684E 6A00                       		bpl.s	loc_160AA
00016850 317C 007F 0030             		move.w	#127,$30(a0)
00016856 4A28 001C                  		tst.b	$1C(a0)
0001685A 6700                       		beq.s	loc_160A4
0001685C 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016862                            
00016862                            loc_160A4:
00016862 0868 0000 001C             		bchg	#0,$1C(a0)
00016868                            
00016868                            loc_160AA:
00016868 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001686E 4EB9 0000 AD9E             		jsr	AnimateSprite
00016874 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
0001687A 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
0001687C 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016882 6600                       		bne.s	loc_160D6
00016884 7200                       		moveq	#0,d1
00016886 1228 0019                  		move.b	$19(a0),d1
0001688A 4EB9 0000 79FA             		jsr	(PlatformObject).l
00016890 6000 94F4                  		bra.w	MarkObjGone
00016894                            ; ===========================================================================
00016894                            
00016894                            loc_160D6:
00016894 7200                       		moveq	#0,d1
00016896 1228 0019                  		move.b	$19(a0),d1
0001689A 4EB9 0000 7B6E             		jsr	(ExitPlatform).l
000168A0 3428 0008                  		move.w	8(a0),d2
000168A4 4EB9 0000 80D8             		jsr	(MvSonicOnPtfm2).l
000168AA 6000 94DA                  		bra.w	MarkObjGone
000168AE                            ; ===========================================================================
000168AE                            
000168AE                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
000168AE 0828 0003 0022             		btst	#3,$22(a0)
000168B4 6700                       		beq.s	Obj6C_Display
000168B6 43F8 D000                  		lea	($FFFFD000).w,a1
000168BA 08A9 0003 0022             		bclr	#3,$22(a1)
000168C0 08A8 0003 0022             		bclr	#3,$22(a0)
000168C6 117C 0002 0024             		move.b	#2,$24(a0)
000168CC 4228 0025                  		clr.b	$25(a0)
000168D0                            
000168D0                            Obj6C_Display:
000168D0 6000 94B4                  		bra.w	MarkObjGone
000168D4                            ; ===========================================================================
000168D4                            Ani_obj6C:
000168D4                            	include "_anim\obj6C.asm"
000168D4                            ; ---------------------------------------------------------------------------
000168D4                            ; Animation script - vanishing platforms (SBZ)
000168D4                            ; ---------------------------------------------------------------------------
000168D4 0000                       		dc.w byte_1611A-Ani_obj6C
000168D6 0000                       		dc.w byte_16122-Ani_obj6C
000168D8 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
000168E0 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
000168E8                            		even
000168E8                            		even
000168E8                            
000168E8                            ; ---------------------------------------------------------------------------
000168E8                            ; Sprite mappings - vanishing platforms	(SBZ)
000168E8                            ; ---------------------------------------------------------------------------
000168E8                            Map_obj6C:
000168E8                            	include "_maps\obj6C.asm"
000168E8                            ; ---------------------------------------------------------------------------
000168E8                            ; Sprite mappings - vanishing platforms	(SBZ)
000168E8                            ; ---------------------------------------------------------------------------
000168E8 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
000168EC 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
000168F0 01                         byte_16132:	dc.b 1
000168F1 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
000168F6 01                         byte_16138:	dc.b 1
000168F7 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
000168FC 01                         byte_1613E:	dc.b 1
000168FD F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016902 00                         byte_16144:	dc.b 0
00016904 00                         		even
00016904 00                         		even
00016904                            
00016904                            ; ===========================================================================
00016904                            ; ---------------------------------------------------------------------------
00016904                            ; Object 6E - electrocution orbs (SBZ)
00016904                            ; ---------------------------------------------------------------------------
00016904                            
00016904                            Obj6E:					; XREF: Obj_Index
00016904 7000                       		moveq	#0,d0
00016906 1028 0024                  		move.b	$24(a0),d0
0001690A 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
0001690E 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016912                            ; ===========================================================================
00016912 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016914 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016916                            ; ===========================================================================
00016916                            
00016916                            Obj6E_Main:				; XREF: Obj6E_Index
00016916 5428 0024                  		addq.b	#2,$24(a0)
0001691A 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016922 317C 047E 0002             		move.w	#$47E,2(a0)
00016928 0028 0004 0001             		ori.b	#4,1(a0)
0001692E 117C 0028 0019             		move.b	#$28,$19(a0)
00016934 7000                       		moveq	#0,d0
00016936 1028 0028                  		move.b	$28(a0),d0	; read object type
0001693A E948                       		lsl.w	#4,d0		; multiply by $10
0001693C 5340                       		subq.w	#1,d0
0001693E 3140 0034                  		move.w	d0,$34(a0)
00016942                            
00016942                            Obj6E_Shock:				; XREF: Obj6E_Index
00016942 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016946 C068 0034                  		and.w	$34(a0),d0
0001694A 6600                       		bne.s	Obj6E_Animate
0001694C 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016952 4A28 0001                  		tst.b	1(a0)
00016956 6A00                       		bpl.s	Obj6E_Animate
00016958 303C 00B1                  		move.w	#$B1,d0
0001695C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play electricity sound
00016962                            
00016962                            Obj6E_Animate:
00016962 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016968 4EB9 0000 AD9E             		jsr	AnimateSprite
0001696E 117C 0000 0020             		move.b	#0,$20(a0)
00016974 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
0001697A 6600                       		bne.s	Obj6E_Display	; if not, branch
0001697C 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016982                            
00016982                            Obj6E_Display:
00016982 6000 9402                  		bra.w	MarkObjGone
00016986                            ; ===========================================================================
00016986                            Ani_obj6E:
00016986                            	include "_anim\obj6E.asm"
00016986                            ; ---------------------------------------------------------------------------
00016986                            ; Animation script - electrocution orbs (SBZ)
00016986                            ; ---------------------------------------------------------------------------
00016986 0000                       		dc.w byte_161CC-Ani_obj6E
00016988 0000                       		dc.w byte_161D0-Ani_obj6E
0001698A 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
0001698E 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
0001699E                            		even
0001699E                            		even
0001699E                            
0001699E                            ; ---------------------------------------------------------------------------
0001699E                            ; Sprite mappings - electrocution orbs (SBZ)
0001699E                            ; ---------------------------------------------------------------------------
0001699E                            Map_obj6E:
0001699E                            	include "_maps\obj6E.asm"
0001699E                            Map_26ed:
0001699E 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
000169A0 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
000169A2 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
000169A4 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
000169A6 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
000169A8 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
000169AA 01                         Map_26ed_C: 	dc.b $1
000169AB 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
000169B0 02                         Map_26ed_12: 	dc.b $2
000169B1 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000169B6 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000169BB 06                         Map_26ed_1D: 	dc.b $6
000169BC F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000169C1 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000169C6 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
000169CB F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
000169D0 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
000169D5 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
000169DA 08                         Map_26ed_3C: 	dc.b $8
000169DB F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000169E0 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000169E5 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
000169EA F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
000169EF F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
000169F4 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
000169F9 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
000169FE F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016A03 06                         Map_26ed_65: 	dc.b $6
00016A04 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016A09 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016A0E F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016A13 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016A18 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016A1D F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016A22 04                         Map_26ed_84: 	dc.b $4
00016A23 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016A28 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016A2D F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016A32 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016A38 00                         	even
00016A38 00                         	even
00016A38                            
00016A38                            ; ===========================================================================
00016A38                            ; ---------------------------------------------------------------------------
00016A38                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016A38                            ; ---------------------------------------------------------------------------
00016A38                            
00016A38                            Obj6F:					; XREF: Obj_Index
00016A38 7000                       		moveq	#0,d0
00016A3A 1028 0024                  		move.b	$24(a0),d0
00016A3E 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016A42 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016A46 3028 0030                  		move.w	$30(a0),d0
00016A4A 0240 FF80                  		andi.w	#$FF80,d0
00016A4E 3238 F700                  		move.w	($FFFFF700).w,d1
00016A52 0441 0080                  		subi.w	#$80,d1
00016A56 0241 FF80                  		andi.w	#$FF80,d1
00016A5A 9041                       		sub.w	d1,d0
00016A5C 0C40 0280                  		cmpi.w	#$280,d0
00016A60 6200                       		bhi.s	loc_1629A
00016A62                            
00016A62                            Obj6F_Display:
00016A62 4EF9 0000 DCDE             		jmp	DisplaySprite
00016A68                            ; ===========================================================================
00016A68                            
00016A68                            loc_1629A:
00016A68 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016A6E 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016A70 0C40 FF80                  		cmpi.w	#-$80,d0
00016A74 64EC                       		bcc.s	Obj6F_Display
00016A76                            
00016A76                            Obj6F_Act1or2:
00016A76 1028 002F                  		move.b	$2F(a0),d0
00016A7A 6A00                       		bpl.s	Obj6F_Delete
00016A7C 0240 007F                  		andi.w	#$7F,d0
00016A80 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016A84 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016A8A                            
00016A8A                            Obj6F_Delete:
00016A8A 4EF9 0000 DD1A             		jmp	DeleteObject
00016A90                            ; ===========================================================================
00016A90 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016A92 0000                       		dc.w loc_163D8-Obj6F_Index
00016A94                            ; ===========================================================================
00016A94                            
00016A94                            Obj6F_Main:				; XREF: Obj6F_Index
00016A94 1028 0028                  		move.b	$28(a0),d0
00016A98 6B00 0000                  		bmi.w	loc_16380
00016A9C 5428 0024                  		addq.b	#2,$24(a0)
00016AA0 217C 0001 60F8 0004        		move.l	#Map_obj69a,4(a0)
00016AA8 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016AAE 117C 0010 0019             		move.b	#$10,$19(a0)
00016AB4 0028 0004 0001             		ori.b	#4,1(a0)
00016ABA 117C 0004 0018             		move.b	#4,$18(a0)
00016AC0 7000                       		moveq	#0,d0
00016AC2 1028 0028                  		move.b	$28(a0),d0
00016AC6 3200                       		move.w	d0,d1
00016AC8 E648                       		lsr.w	#3,d0
00016ACA 0240 001E                  		andi.w	#$1E,d0
00016ACE 45FA 0000                  		lea	off_164A6(pc),a2
00016AD2 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016AD6 315A 0038                  		move.w	(a2)+,$38(a0)
00016ADA 315A 0030                  		move.w	(a2)+,$30(a0)
00016ADE 214A 003C                  		move.l	a2,$3C(a0)
00016AE2 0241 000F                  		andi.w	#$F,d1
00016AE6 E549                       		lsl.w	#2,d1
00016AE8 1141 0038                  		move.b	d1,$38(a0)
00016AEC 117C 0004 003A             		move.b	#4,$3A(a0)
00016AF2 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016AF6 6700                       		beq.s	loc_16356
00016AF8 117C 0001 003B             		move.b	#1,$3B(a0)
00016AFE 4428 003A                  		neg.b	$3A(a0)
00016B02 7200                       		moveq	#0,d1
00016B04 1228 0038                  		move.b	$38(a0),d1
00016B08 D228 003A                  		add.b	$3A(a0),d1
00016B0C B228 0039                  		cmp.b	$39(a0),d1
00016B10 6500                       		bcs.s	loc_16352
00016B12 1001                       		move.b	d1,d0
00016B14 7200                       		moveq	#0,d1
00016B16 4A00                       		tst.b	d0
00016B18 6A00                       		bpl.s	loc_16352
00016B1A 1228 0039                  		move.b	$39(a0),d1
00016B1E 5901                       		subq.b	#4,d1
00016B20                            
00016B20                            loc_16352:
00016B20 1141 0038                  		move.b	d1,$38(a0)
00016B24                            
00016B24                            loc_16356:
00016B24 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016B2A 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016B30 4A41                       		tst.w	d1
00016B32 6600                       		bne.s	loc_1636C
00016B34 117C 0001 001C             		move.b	#1,$1C(a0)
00016B3A                            
00016B3A                            loc_1636C:
00016B3A 0C41 0008                  		cmpi.w	#8,d1
00016B3E 6600                       		bne.s	loc_16378
00016B40 117C 0000 001C             		move.b	#0,$1C(a0)
00016B46                            
00016B46                            loc_16378:
00016B46 6100 C0D6                  		bsr.w	Obj63_ChangeDir
00016B4A 6000 0000                  		bra.w	loc_163D8
00016B4E                            ; ===========================================================================
00016B4E                            
00016B4E                            loc_16380:				; XREF: Obj6F_Main
00016B4E 1140 002F                  		move.b	d0,$2F(a0)
00016B52 0240 007F                  		andi.w	#$7F,d0
00016B56 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016B5A 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016B60 6700                       		beq.s	loc_1639A
00016B62 4EF9 0000 DD1A             		jmp	DeleteObject
00016B68                            ; ===========================================================================
00016B68                            
00016B68                            loc_1639A:
00016B68 D040                       		add.w	d0,d0
00016B6A 0240 001E                  		andi.w	#$1E,d0
00016B6E 0640 0080                  		addi.w	#$80,d0
00016B72 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016B78 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016B7C 321A                       		move.w	(a2)+,d1
00016B7E 2248                       		movea.l	a0,a1
00016B80 6000                       		bra.s	Obj6F_LoadPform
00016B82                            ; ===========================================================================
00016B82                            
00016B82                            Obj6F_Loop:
00016B82 4EB9 0000 E164             		jsr	SingleObjLoad
00016B88 6600                       		bne.s	loc_163D0
00016B8A                            
00016B8A                            Obj6F_LoadPform:			; XREF: loc_1639A
00016B8A 12BC 006F                  		move.b	#$6F,0(a1)
00016B8E 335A 0008                  		move.w	(a2)+,8(a1)
00016B92 335A 000C                  		move.w	(a2)+,$C(a1)
00016B96 301A                       		move.w	(a2)+,d0
00016B98 1340 0028                  		move.b	d0,$28(a1)
00016B9C                            
00016B9C                            loc_163D0:
00016B9C 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016BA0                            
00016BA0 588F                       		addq.l	#4,sp
00016BA2 4E75                       		rts	
00016BA4                            ; ===========================================================================
00016BA4                            
00016BA4                            loc_163D8:				; XREF: Obj6F_Index
00016BA4 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016BAA 4EB9 0000 AD9E             		jsr	AnimateSprite
00016BB0 4A28 001A                  		tst.b	$1A(a0)
00016BB4 6600                       		bne.s	loc_16404
00016BB6 3F28 0008                  		move.w	8(a0),-(sp)
00016BBA 6100 0000                  		bsr.w	loc_16424
00016BBE 323C 001B                  		move.w	#$1B,d1
00016BC2 343C 0007                  		move.w	#7,d2
00016BC6 3602                       		move.w	d2,d3
00016BC8 5243                       		addq.w	#1,d3
00016BCA 381F                       		move.w	(sp)+,d4
00016BCC 6000 94E0                  		bra.w	SolidObject
00016BD0                            ; ===========================================================================
00016BD0                            
00016BD0                            loc_16404:
00016BD0 0828 0003 0022             		btst	#3,$22(a0)
00016BD6 6700                       		beq.s	loc_16420
00016BD8 43F8 D000                  		lea	($FFFFD000).w,a1
00016BDC 08A9 0003 0022             		bclr	#3,$22(a1)
00016BE2 08A8 0003 0022             		bclr	#3,$22(a0)
00016BE8 4228 0025                  		clr.b	$25(a0)
00016BEC                            
00016BEC                            loc_16420:
00016BEC 6000 0002                  		bra.w	*+4
00016BF0                            
00016BF0                            loc_16424:
00016BF0 3028 0008                  		move.w	8(a0),d0
00016BF4 B068 0034                  		cmp.w	$34(a0),d0
00016BF8 6600                       		bne.s	loc_16484
00016BFA 3028 000C                  		move.w	$C(a0),d0
00016BFE B068 0036                  		cmp.w	$36(a0),d0
00016C02 6600                       		bne.s	loc_16484
00016C04 7200                       		moveq	#0,d1
00016C06 1228 0038                  		move.b	$38(a0),d1
00016C0A D228 003A                  		add.b	$3A(a0),d1
00016C0E B228 0039                  		cmp.b	$39(a0),d1
00016C12 6500                       		bcs.s	loc_16456
00016C14 1001                       		move.b	d1,d0
00016C16 7200                       		moveq	#0,d1
00016C18 4A00                       		tst.b	d0
00016C1A 6A00                       		bpl.s	loc_16456
00016C1C 1228 0039                  		move.b	$39(a0),d1
00016C20 5901                       		subq.b	#4,d1
00016C22                            
00016C22                            loc_16456:
00016C22 1141 0038                  		move.b	d1,$38(a0)
00016C26 2268 003C                  		movea.l	$3C(a0),a1
00016C2A 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016C30 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016C36 4A41                       		tst.w	d1
00016C38 6600                       		bne.s	loc_16474
00016C3A 117C 0001 001C             		move.b	#1,$1C(a0)
00016C40                            
00016C40                            loc_16474:
00016C40 0C41 0008                  		cmpi.w	#8,d1
00016C44 6600                       		bne.s	loc_16480
00016C46 117C 0000 001C             		move.b	#0,$1C(a0)
00016C4C                            
00016C4C                            loc_16480:
00016C4C 6100 BFD0                  		bsr.w	Obj63_ChangeDir
00016C50                            
00016C50                            loc_16484:
00016C50 4EF9 0000 DCB8             		jmp	SpeedToPos
00016C56                            ; ===========================================================================
00016C56                            Ani_obj6F:
00016C56                            	include "_anim\obj6F.asm"
00016C56                            ; ---------------------------------------------------------------------------
00016C56                            ; Animation script - platform on conveyor belt (SBZ)
00016C56                            ; ---------------------------------------------------------------------------
00016C56 0000                       		dc.w byte_1648E-Ani_obj6F
00016C58 0000                       		dc.w byte_164A2-Ani_obj6F
00016C5A 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016C67 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016C6E 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016C72 00                         		even
00016C72 00                         		even
00016C72                            
00016C72 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016C78 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016C7E 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016C92 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016CA6 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016CBA 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016CCE 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016CE2 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016CF6                            ; ===========================================================================
00016CF6                            ; ---------------------------------------------------------------------------
00016CF6                            ; Object 70 - large girder block (SBZ)
00016CF6                            ; ---------------------------------------------------------------------------
00016CF6                            
00016CF6                            Obj70:					; XREF: Obj_Index
00016CF6 7000                       		moveq	#0,d0
00016CF8 1028 0024                  		move.b	$24(a0),d0
00016CFC 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016D00 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016D04                            ; ===========================================================================
00016D04 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016D06 0000                       		dc.w Obj70_Action-Obj70_Index
00016D08                            ; ===========================================================================
00016D08                            
00016D08                            Obj70_Main:				; XREF: Obj70_Index
00016D08 5428 0024                  		addq.b	#2,$24(a0)
00016D0C 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016D14 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016D1A 0028 0004 0001             		ori.b	#4,1(a0)
00016D20 117C 0004 0018             		move.b	#4,$18(a0)
00016D26 117C 0060 0019             		move.b	#$60,$19(a0)
00016D2C 117C 0018 0016             		move.b	#$18,$16(a0)
00016D32 3168 0008 0032             		move.w	8(a0),$32(a0)
00016D38 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016D3E 6100 0000                  		bsr.w	Obj70_Move2
00016D42                            
00016D42                            Obj70_Action:				; XREF: Obj70_Index
00016D42 3F28 0008                  		move.w	8(a0),-(sp)
00016D46 4A68 003A                  		tst.w	$3A(a0)
00016D4A 6700                       		beq.s	Obj70_Move
00016D4C 5368 003A                  		subq.w	#1,$3A(a0)
00016D50 6600                       		bne.s	Obj70_Solid
00016D52                            
00016D52                            Obj70_Move:
00016D52 4EB9 0000 DCB8             		jsr	SpeedToPos
00016D58 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016D5C 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016D5E 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016D62                            
00016D62                            Obj70_Solid:
00016D62 381F                       		move.w	(sp)+,d4
00016D64 4A28 0001                  		tst.b	1(a0)
00016D68 6A00                       		bpl.s	Obj70_ChkDel
00016D6A 7200                       		moveq	#0,d1
00016D6C 1228 0019                  		move.b	$19(a0),d1
00016D70 0641 000B                  		addi.w	#$B,d1
00016D74 7400                       		moveq	#0,d2
00016D76 1428 0016                  		move.b	$16(a0),d2
00016D7A 3602                       		move.w	d2,d3
00016D7C 5243                       		addq.w	#1,d3
00016D7E 6100 932E                  		bsr.w	SolidObject
00016D82                            
00016D82                            Obj70_ChkDel:
00016D82 3028 0032                  		move.w	$32(a0),d0
00016D86 0240 FF80                  		andi.w	#$FF80,d0
00016D8A 3238 F700                  		move.w	($FFFFF700).w,d1
00016D8E 0441 0080                  		subi.w	#$80,d1
00016D92 0241 FF80                  		andi.w	#$FF80,d1
00016D96 9041                       		sub.w	d1,d0
00016D98 0C40 0280                  		cmpi.w	#$280,d0
00016D9C 6200                       		bhi.s	Obj70_Delete
00016D9E 4EF9 0000 DCDE             		jmp	DisplaySprite
00016DA4                            ; ===========================================================================
00016DA4                            
00016DA4                            Obj70_Delete:
00016DA4 4EF9 0000 DD1A             		jmp	DeleteObject
00016DAA                            ; ===========================================================================
00016DAA                            
00016DAA                            Obj70_Move2:				; XREF: Obj70_Main
00016DAA 1028 0038                  		move.b	$38(a0),d0
00016DAE 0240 0018                  		andi.w	#$18,d0
00016DB2 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016DB8 43F1 0000                  		lea	(a1,d0.w),a1
00016DBC 3159 0010                  		move.w	(a1)+,$10(a0)
00016DC0 3159 0012                  		move.w	(a1)+,$12(a0)
00016DC4 3159 0034                  		move.w	(a1)+,$34(a0)
00016DC8 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016DCC 317C 0007 003A             		move.w	#7,$3A(a0)
00016DD2 4E75                       		rts	
00016DD4                            ; ===========================================================================
00016DD4 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016DDC 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016DE4 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016DEC 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016DF4                            ; ---------------------------------------------------------------------------
00016DF4                            ; Sprite mappings - large girder block (SBZ)
00016DF4                            ; ---------------------------------------------------------------------------
00016DF4                            Map_obj70:
00016DF4                            	include "_maps\obj70.asm"
00016DF4                            ; ---------------------------------------------------------------------------
00016DF4                            ; Sprite mappings - large girder block (SBZ)
00016DF4                            ; ---------------------------------------------------------------------------
00016DF4 0000                       		dc.w byte_1662A-Map_obj70
00016DF6 0C                         byte_1662A:	dc.b $C
00016DF7 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016DFC 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016E01 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016E06 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016E0B E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016E10 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016E15 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016E1A 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016E1F E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016E24 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016E29 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016E2E 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016E34 00                         		even
00016E34 00                         		even
00016E34                            
00016E34                            ; ===========================================================================
00016E34                            ; ---------------------------------------------------------------------------
00016E34                            ; Object 72 - teleporter (SBZ)
00016E34                            ; ---------------------------------------------------------------------------
00016E34                            
00016E34                            Obj72:					; XREF: Obj_Index
00016E34 7000                       		moveq	#0,d0
00016E36 1028 0024                  		move.b	$24(a0),d0
00016E3A 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016E3E 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016E42 3028 0008                  		move.w	8(a0),d0
00016E46 0240 FF80                  		andi.w	#$FF80,d0
00016E4A 3238 F700                  		move.w	($FFFFF700).w,d1
00016E4E 0441 0080                  		subi.w	#$80,d1
00016E52 0241 FF80                  		andi.w	#$FF80,d1
00016E56 9041                       		sub.w	d1,d0
00016E58 0C40 0280                  		cmpi.w	#$280,d0
00016E5C 6200                       		bhi.s	Obj72_Delete
00016E5E 4E75                       		rts	
00016E60                            ; ===========================================================================
00016E60                            
00016E60                            Obj72_Delete:
00016E60 4EF9 0000 DD1A             		jmp	DeleteObject
00016E66                            ; ===========================================================================
00016E66 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016E68 0000                       		dc.w loc_166C8-Obj72_Index
00016E6A 0000                       		dc.w loc_1675E-Obj72_Index
00016E6C 0000                       		dc.w loc_16798-Obj72_Index
00016E6E                            ; ===========================================================================
00016E6E                            
00016E6E                            Obj72_Main:				; XREF: Obj72_Index
00016E6E 5428 0024                  		addq.b	#2,$24(a0)
00016E72 1028 0028                  		move.b	$28(a0),d0
00016E76 D040                       		add.w	d0,d0
00016E78 0240 001E                  		andi.w	#$1E,d0
00016E7C 45FA 0000                  		lea	Obj72_Data(pc),a2
00016E80 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016E84 315A 003A                  		move.w	(a2)+,$3A(a0)
00016E88 214A 003C                  		move.l	a2,$3C(a0)
00016E8C 315A 0036                  		move.w	(a2)+,$36(a0)
00016E90 315A 0038                  		move.w	(a2)+,$38(a0)
00016E94                            
00016E94                            loc_166C8:				; XREF: Obj72_Index
00016E94 43F8 D000                  		lea	($FFFFD000).w,a1
00016E98 3029 0008                  		move.w	8(a1),d0
00016E9C 9068 0008                  		sub.w	8(a0),d0
00016EA0 0828 0000 0022             		btst	#0,$22(a0)
00016EA6 6700                       		beq.s	loc_166E0
00016EA8 0640 000F                  		addi.w	#$F,d0
00016EAC                            
00016EAC                            loc_166E0:
00016EAC 0C40 0010                  		cmpi.w	#$10,d0
00016EB0 6400                       		bcc.s	locret_1675C
00016EB2 3229 000C                  		move.w	$C(a1),d1
00016EB6 9268 000C                  		sub.w	$C(a0),d1
00016EBA 0641 0020                  		addi.w	#$20,d1
00016EBE 0C41 0040                  		cmpi.w	#$40,d1
00016EC2 6400                       		bcc.s	locret_1675C
00016EC4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016EC8 6600                       		bne.s	locret_1675C
00016ECA 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00016ED0 6600                       		bne.s	loc_1670E
00016ED2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016ED8 6500                       		bcs.s	locret_1675C
00016EDA                            
00016EDA                            loc_1670E:
00016EDA 5428 0024                  		addq.b	#2,$24(a0)
00016EDE 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016EE4 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00016EEA 337C 0800 0014             		move.w	#$800,$14(a1)
00016EF0 337C 0000 0010             		move.w	#0,$10(a1)
00016EF6 337C 0000 0012             		move.w	#0,$12(a1)
00016EFC 08A8 0005 0022             		bclr	#5,$22(a0)
00016F02 08A9 0005 0022             		bclr	#5,$22(a1)
00016F08 08E9 0001 0022             		bset	#1,$22(a1)
00016F0E 3368 0008 0008             		move.w	8(a0),8(a1)
00016F14 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016F1A 4228 0032                  		clr.b	$32(a0)
00016F1E 303C 00BE                  		move.w	#$BE,d0
00016F22 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00016F28                            
00016F28                            locret_1675C:
00016F28 4E75                       		rts	
00016F2A                            ; ===========================================================================
00016F2A                            
00016F2A                            loc_1675E:				; XREF: Obj72_Index
00016F2A 43F8 D000                  		lea	($FFFFD000).w,a1
00016F2E 1028 0032                  		move.b	$32(a0),d0
00016F32 5428 0032                  		addq.b	#2,$32(a0)
00016F36 4EB9 0000 2C64             		jsr	(CalcSine).l
00016F3C EA40                       		asr.w	#5,d0
00016F3E 3428 000C                  		move.w	$C(a0),d2
00016F42 9440                       		sub.w	d0,d2
00016F44 3342 000C                  		move.w	d2,$C(a1)
00016F48 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00016F4E 6600                       		bne.s	locret_16796
00016F50 6100 0000                  		bsr.w	sub_1681C
00016F54 5428 0024                  		addq.b	#2,$24(a0)
00016F58 303C 00BC                  		move.w	#$BC,d0
00016F5C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play teleport sound
00016F62                            
00016F62                            locret_16796:
00016F62 4E75                       		rts	
00016F64                            ; ===========================================================================
00016F64                            
00016F64                            loc_16798:				; XREF: Obj72_Index
00016F64 588F                       		addq.l	#4,sp
00016F66 43F8 D000                  		lea	($FFFFD000).w,a1
00016F6A 5328 002E                  		subq.b	#1,$2E(a0)
00016F6E 6A00                       		bpl.s	loc_167DA
00016F70 3368 0036 0008             		move.w	$36(a0),8(a1)
00016F76 3368 0038 000C             		move.w	$38(a0),$C(a1)
00016F7C 7200                       		moveq	#0,d1
00016F7E 1228 003A                  		move.b	$3A(a0),d1
00016F82 5801                       		addq.b	#4,d1
00016F84 B228 003B                  		cmp.b	$3B(a0),d1
00016F88 6500                       		bcs.s	loc_167C2
00016F8A 7200                       		moveq	#0,d1
00016F8C 6000                       		bra.s	loc_16800
00016F8E                            ; ===========================================================================
00016F8E                            
00016F8E                            loc_167C2:
00016F8E 1141 003A                  		move.b	d1,$3A(a0)
00016F92 2468 003C                  		movea.l	$3C(a0),a2
00016F96 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00016F9C 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00016FA2 6000 0000                  		bra.w	sub_1681C
00016FA6                            ; ===========================================================================
00016FA6                            
00016FA6                            loc_167DA:
00016FA6 2429 0008                  		move.l	8(a1),d2
00016FAA 2629 000C                  		move.l	$C(a1),d3
00016FAE 3029 0010                  		move.w	$10(a1),d0
00016FB2 48C0                       		ext.l	d0
00016FB4 E180                       		asl.l	#8,d0
00016FB6 D480                       		add.l	d0,d2
00016FB8 3029 0012                  		move.w	$12(a1),d0
00016FBC 48C0                       		ext.l	d0
00016FBE E180                       		asl.l	#8,d0
00016FC0 D680                       		add.l	d0,d3
00016FC2 2342 0008                  		move.l	d2,8(a1)
00016FC6 2343 000C                  		move.l	d3,$C(a1)
00016FCA 4E75                       		rts	
00016FCC                            ; ===========================================================================
00016FCC                            
00016FCC                            loc_16800:
00016FCC 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00016FD2 4228 0024                  		clr.b	$24(a0)
00016FD6 4238 F7C8                  		clr.b	($FFFFF7C8).w
00016FDA 337C 0000 0010             		move.w	#0,$10(a1)
00016FE0 337C 0200 0012             		move.w	#$200,$12(a1)
00016FE6 4E75                       		rts	
00016FE8                            
00016FE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016FE8                            
00016FE8                            
00016FE8                            sub_1681C:
00016FE8 7000                       		moveq	#0,d0
00016FEA 343C 1000                  		move.w	#$1000,d2
00016FEE 3028 0036                  		move.w	$36(a0),d0
00016FF2 9069 0008                  		sub.w	8(a1),d0
00016FF6 6C00                       		bge.s	loc_16830
00016FF8 4440                       		neg.w	d0
00016FFA 4442                       		neg.w	d2
00016FFC                            
00016FFC                            loc_16830:
00016FFC 7200                       		moveq	#0,d1
00016FFE 363C 1000                  		move.w	#$1000,d3
00017002 3228 0038                  		move.w	$38(a0),d1
00017006 9269 000C                  		sub.w	$C(a1),d1
0001700A 6C00                       		bge.s	loc_16844
0001700C 4441                       		neg.w	d1
0001700E 4443                       		neg.w	d3
00017010                            
00017010                            loc_16844:
00017010 B240                       		cmp.w	d0,d1
00017012 6500                       		bcs.s	loc_1687A
00017014 7200                       		moveq	#0,d1
00017016 3228 0038                  		move.w	$38(a0),d1
0001701A 9269 000C                  		sub.w	$C(a1),d1
0001701E 4841                       		swap	d1
00017020 83C3                       		divs.w	d3,d1
00017022 7000                       		moveq	#0,d0
00017024 3028 0036                  		move.w	$36(a0),d0
00017028 9069 0008                  		sub.w	8(a1),d0
0001702C 6700                       		beq.s	loc_16866
0001702E 4840                       		swap	d0
00017030 81C1                       		divs.w	d1,d0
00017032                            
00017032                            loc_16866:
00017032 3340 0010                  		move.w	d0,$10(a1)
00017036 3343 0012                  		move.w	d3,$12(a1)
0001703A 4A41                       		tst.w	d1
0001703C 6A00                       		bpl.s	loc_16874
0001703E 4441                       		neg.w	d1
00017040                            
00017040                            loc_16874:
00017040 3141 002E                  		move.w	d1,$2E(a0)
00017044 4E75                       		rts	
00017046                            ; ===========================================================================
00017046                            
00017046                            loc_1687A:
00017046 7000                       		moveq	#0,d0
00017048 3028 0036                  		move.w	$36(a0),d0
0001704C 9069 0008                  		sub.w	8(a1),d0
00017050 4840                       		swap	d0
00017052 81C2                       		divs.w	d2,d0
00017054 7200                       		moveq	#0,d1
00017056 3228 0038                  		move.w	$38(a0),d1
0001705A 9269 000C                  		sub.w	$C(a1),d1
0001705E 6700                       		beq.s	loc_16898
00017060 4841                       		swap	d1
00017062 83C0                       		divs.w	d0,d1
00017064                            
00017064                            loc_16898:
00017064 3341 0012                  		move.w	d1,$12(a1)
00017068 3342 0010                  		move.w	d2,$10(a1)
0001706C 4A40                       		tst.w	d0
0001706E 6A00                       		bpl.s	loc_168A6
00017070 4440                       		neg.w	d0
00017072                            
00017072                            loc_168A6:
00017072 3140 002E                  		move.w	d0,$2E(a0)
00017076 4E75                       		rts	
00017078                            ; End of function sub_1681C
00017078                            
00017078                            ; ===========================================================================
00017078 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
0001707E 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00017084 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00017088 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
0001708E 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00017094 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
0001709A 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000170A0 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000170A6 0884 0298 0894             		dc.w $884, $298, $894
000170AC 0270 0894 0190             		dc.w $270, $894, $190
000170B2 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
000170B8 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
000170BE 1184 0498 1158             		dc.w $1184, $498, $1158
000170C4 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
000170CA 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
000170D0 04E8 0F94 0590             		dc.w $4E8, $F94, $590
000170D6 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
000170DC 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
000170E2 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
000170E8 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
000170EE 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
000170F4 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
000170FA 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00017100                            ; ===========================================================================
00017100                            ; ---------------------------------------------------------------------------
00017100                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00017100                            ; ---------------------------------------------------------------------------
00017100                            
00017100                            Obj78:					; XREF: Obj_Index
00017100 7000                       		moveq	#0,d0
00017102 1028 0024                  		move.b	$24(a0),d0
00017106 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
0001710A 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
0001710E                            ; ===========================================================================
0001710E 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00017110 0000                       		dc.w Obj78_Action-Obj78_Index
00017112 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017114 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00017116 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017118 0000                       		dc.w Obj78_Delete-Obj78_Index
0001711A 0000                       		dc.w loc_16CC0-Obj78_Index
0001711C                            ; ===========================================================================
0001711C                            
0001711C                            locret_16950:
0001711C 4E75                       		rts	
0001711E                            ; ===========================================================================
0001711E                            
0001711E                            Obj78_Main:				; XREF: Obj78_Index
0001711E 117C 0007 0016             		move.b	#7,$16(a0)
00017124 117C 0008 0017             		move.b	#8,$17(a0)
0001712A 4EB9 0000 DC8C             		jsr	ObjectFall
00017130 4EBA E4A6                  		jsr	ObjHitFloor
00017134 4A41                       		tst.w	d1
00017136 6AE4                       		bpl.s	locret_16950
00017138 D368 000C                  		add.w	d1,$C(a0)
0001713C 4268 0012                  		clr.w	$12(a0)
00017140 5428 0024                  		addq.b	#2,$24(a0)
00017144 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
0001714C 317C 22B0 0002             		move.w	#$22B0,2(a0)
00017152 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00017158 6700                       		beq.s	loc_16996
0001715A 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00017160                            
00017160                            loc_16996:
00017160 0228 0003 0001             		andi.b	#3,1(a0)
00017166 0028 0004 0001             		ori.b	#4,1(a0)
0001716C 1168 0001 0022             		move.b	1(a0),$22(a0)
00017172 117C 0004 0018             		move.b	#4,$18(a0)
00017178 117C 0008 0019             		move.b	#8,$19(a0)
0001717E 117C 000B 0020             		move.b	#$B,$20(a0)
00017184 3428 0008                  		move.w	8(a0),d2
00017188 7A0C                       		moveq	#$C,d5
0001718A 0828 0000 0022             		btst	#0,$22(a0)
00017190 6700                       		beq.s	loc_169CA
00017192 4445                       		neg.w	d5
00017194                            
00017194                            loc_169CA:
00017194 1C3C 0004                  		move.b	#4,d6
00017198 7600                       		moveq	#0,d3
0001719A 7804                       		moveq	#4,d4
0001719C 2448                       		movea.l	a0,a2
0001719E 7202                       		moveq	#2,d1
000171A0                            
000171A0                            Obj78_LoadBody:
000171A0 4EB9 0000 E17A             		jsr	SingleObjLoad2
000171A6 6600                       		bne.s	Obj78_QuitLoad
000171A8 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
000171AC 1346 0024                  		move.b	d6,$24(a1)
000171B0 5406                       		addq.b	#2,d6
000171B2 2368 0004 0004             		move.l	4(a0),4(a1)
000171B8 3368 0002 0002             		move.w	2(a0),2(a1)
000171BE 137C 0005 0018             		move.b	#5,$18(a1)
000171C4 137C 0008 0019             		move.b	#8,$19(a1)
000171CA 137C 00CB 0020             		move.b	#$CB,$20(a1)
000171D0 D445                       		add.w	d5,d2
000171D2 3342 0008                  		move.w	d2,8(a1)
000171D6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000171DC 1368 0022 0022             		move.b	$22(a0),$22(a1)
000171E2 1368 0022 0001             		move.b	$22(a0),1(a1)
000171E8 137C 0008 001A             		move.b	#8,$1A(a1)
000171EE 234A 003C                  		move.l	a2,$3C(a1)
000171F2 1344 003C                  		move.b	d4,$3C(a1)
000171F6 5804                       		addq.b	#4,d4
000171F8 2449                       		movea.l	a1,a2
000171FA                            
000171FA                            Obj78_QuitLoad:
000171FA 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
000171FE                            
000171FE 117C 0007 002A             		move.b	#7,$2A(a0)
00017204 4228 003C                  		clr.b	$3C(a0)
00017208                            
00017208                            Obj78_Action:				; XREF: Obj78_Index
00017208 4A28 0022                  		tst.b	$22(a0)
0001720C 6B00 0000                  		bmi.w	loc_16C96
00017210 7000                       		moveq	#0,d0
00017212 1028 0025                  		move.b	$25(a0),d0
00017216 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
0001721A 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
0001721E 1228 002B                  		move.b	$2B(a0),d1
00017222 6A00                       		bpl.s	Obj78_Display
00017224 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001722A 1028 0026                  		move.b	$26(a0),d0
0001722E 0240 007F                  		andi.w	#$7F,d0
00017232 5828 0026                  		addq.b	#4,$26(a0)
00017236 1031 0000                  		move.b	(a1,d0.w),d0
0001723A 6A00                       		bpl.s	Obj78_AniHead
0001723C 08A8 0007 002B             		bclr	#7,$2B(a0)
00017242 6000                       		bra.s	Obj78_Display
00017244                            ; ===========================================================================
00017244                            
00017244                            Obj78_AniHead:
00017244 0201 0010                  		andi.b	#$10,d1
00017248 D001                       		add.b	d1,d0
0001724A 1140 001A                  		move.b	d0,$1A(a0)
0001724E                            
0001724E                            Obj78_Display:
0001724E 3028 0008                  		move.w	8(a0),d0
00017252 0240 FF80                  		andi.w	#$FF80,d0
00017256 3238 F700                  		move.w	($FFFFF700).w,d1
0001725A 0441 0080                  		subi.w	#$80,d1
0001725E 0241 FF80                  		andi.w	#$FF80,d1
00017262 9041                       		sub.w	d1,d0
00017264 0C40 0280                  		cmpi.w	#$280,d0
00017268 6200 0000                  		bhi.w	Obj78_ChkGone
0001726C 4EF9 0000 DCDE             		jmp	DisplaySprite
00017272                            ; ===========================================================================
00017272                            
00017272                            Obj78_ChkGone:
00017272 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017276 7000                       		moveq	#0,d0
00017278 1028 0023                  		move.b	$23(a0),d0
0001727C 6700                       		beq.s	loc_16ABC
0001727E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017284                            
00017284                            loc_16ABC:
00017284 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
0001728A 4E75                       		rts	
0001728C                            ; ===========================================================================
0001728C                            
0001728C                            Obj78_Delete:				; XREF: Obj78_Index
0001728C 4EF9 0000 DD1A             		jmp	DeleteObject
00017292                            ; ===========================================================================
00017292 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00017294 0000                       		dc.w loc_16B02-Obj78_Index2
00017296                            ; ===========================================================================
00017296                            
00017296                            Obj78_Move:				; XREF: Obj78_Index2
00017296 5328 002A                  		subq.b	#1,$2A(a0)
0001729A 6B00                       		bmi.s	Obj78_Move2
0001729C 4E75                       		rts	
0001729E                            ; ===========================================================================
0001729E                            
0001729E                            Obj78_Move2:
0001729E 5428 0025                  		addq.b	#2,$25(a0)
000172A2 117C 0010 002A             		move.b	#$10,$2A(a0)
000172A8 317C FF40 0010             		move.w	#-$C0,$10(a0)
000172AE 317C 0040 0014             		move.w	#$40,$14(a0)
000172B4 0868 0004 002B             		bchg	#4,$2B(a0)
000172BA 6600                       		bne.s	loc_16AFC
000172BC 4268 0010                  		clr.w	$10(a0)
000172C0 4468 0014                  		neg.w	$14(a0)
000172C4                            
000172C4                            loc_16AFC:
000172C4 08E8 0007 002B             		bset	#7,$2B(a0)
000172CA                            
000172CA                            loc_16B02:				; XREF: Obj78_Index2
000172CA 5328 002A                  		subq.b	#1,$2A(a0)
000172CE 6B00                       		bmi.s	loc_16B5E
000172D0 2F28 0008                  		move.l	8(a0),-(sp)
000172D4 2428 0008                  		move.l	8(a0),d2
000172D8 3028 0010                  		move.w	$10(a0),d0
000172DC 0828 0000 0022             		btst	#0,$22(a0)
000172E2 6700                       		beq.s	loc_16B1E
000172E4 4440                       		neg.w	d0
000172E6                            
000172E6                            loc_16B1E:
000172E6 48C0                       		ext.l	d0
000172E8 E180                       		asl.l	#8,d0
000172EA D480                       		add.l	d0,d2
000172EC 2142 0008                  		move.l	d2,8(a0)
000172F0 4EBA E2E6                  		jsr	ObjHitFloor
000172F4 241F                       		move.l	(sp)+,d2
000172F6 0C41 FFF8                  		cmpi.w	#-8,d1
000172FA 6D00                       		blt.s	loc_16B70
000172FC 0C41 000C                  		cmpi.w	#$C,d1
00017300 6C00                       		bge.s	loc_16B70
00017302 D368 000C                  		add.w	d1,$C(a0)
00017306 4842                       		swap	d2
00017308 B468 0008                  		cmp.w	8(a0),d2
0001730C 6700                       		beq.s	locret_16B5C
0001730E 7000                       		moveq	#0,d0
00017310 1028 003C                  		move.b	$3C(a0),d0
00017314 5228 003C                  		addq.b	#1,$3C(a0)
00017318 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001731E 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017322                            
00017322                            locret_16B5C:
00017322 4E75                       		rts	
00017324                            ; ===========================================================================
00017324                            
00017324                            loc_16B5E:
00017324 5528 0025                  		subq.b	#2,$25(a0)
00017328 117C 0007 002A             		move.b	#7,$2A(a0)
0001732E 317C 0000 0010             		move.w	#0,$10(a0)
00017334 4E75                       		rts	
00017336                            ; ===========================================================================
00017336                            
00017336                            loc_16B70:
00017336 2142 0008                  		move.l	d2,8(a0)
0001733A 0868 0000 0022             		bchg	#0,$22(a0)
00017340 1168 0022 0001             		move.b	$22(a0),1(a0)
00017346 7000                       		moveq	#0,d0
00017348 1028 003C                  		move.b	$3C(a0),d0
0001734C 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00017352 5228 003C                  		addq.b	#1,$3C(a0)
00017356 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001735C 4E75                       		rts	
0001735E                            ; ===========================================================================
0001735E                            
0001735E                            Obj78_BodySeg2:				; XREF: Obj78_Index
0001735E 2268 003C                  		movea.l	$3C(a0),a1
00017362 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017368 6A00                       		bpl.s	Obj78_BodySeg1
0001736A 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017370 1028 0026                  		move.b	$26(a0),d0
00017374 0240 007F                  		andi.w	#$7F,d0
00017378 5828 0026                  		addq.b	#4,$26(a0)
0001737C 4A31 0004                  		tst.b	4(a1,d0.w)
00017380 6A00                       		bpl.s	Obj78_AniBody
00017382 5828 0026                  		addq.b	#4,$26(a0)
00017386                            
00017386                            Obj78_AniBody:
00017386 1031 0000                  		move.b	(a1,d0.w),d0
0001738A 5000                       		addq.b	#8,d0
0001738C 1140 001A                  		move.b	d0,$1A(a0)
00017390                            
00017390                            Obj78_BodySeg1:				; XREF: Obj78_Index
00017390 2268 003C                  		movea.l	$3C(a0),a1
00017394 4A28 0022                  		tst.b	$22(a0)
00017398 6B00 0000                  		bmi.w	loc_16C90
0001739C 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000173A2 1169 0025 0025             		move.b	$25(a1),$25(a0)
000173A8 6700 0000                  		beq.w	loc_16C64
000173AC 3169 0014 0014             		move.w	$14(a1),$14(a0)
000173B2 3029 0010                  		move.w	$10(a1),d0
000173B6 D069 0014                  		add.w	$14(a1),d0
000173BA 3140 0010                  		move.w	d0,$10(a0)
000173BE 2428 0008                  		move.l	8(a0),d2
000173C2 2602                       		move.l	d2,d3
000173C4 3028 0010                  		move.w	$10(a0),d0
000173C8 0828 0000 0022             		btst	#0,$22(a0)
000173CE 6700                       		beq.s	loc_16C0C
000173D0 4440                       		neg.w	d0
000173D2                            
000173D2                            loc_16C0C:
000173D2 48C0                       		ext.l	d0
000173D4 E180                       		asl.l	#8,d0
000173D6 D480                       		add.l	d0,d2
000173D8 2142 0008                  		move.l	d2,8(a0)
000173DC 4843                       		swap	d3
000173DE B668 0008                  		cmp.w	8(a0),d3
000173E2 6700                       		beq.s	loc_16C64
000173E4 7000                       		moveq	#0,d0
000173E6 1028 003C                  		move.b	$3C(a0),d0
000173EA 1231 002C                  		move.b	$2C(a1,d0.w),d1
000173EE 0C01 0080                  		cmpi.b	#-$80,d1
000173F2 6600                       		bne.s	loc_16C50
000173F4 4843                       		swap	d3
000173F6 2143 0008                  		move.l	d3,8(a0)
000173FA 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000173FE 0868 0000 0022             		bchg	#0,$22(a0)
00017404 1168 0022 0001             		move.b	$22(a0),1(a0)
0001740A 5228 003C                  		addq.b	#1,$3C(a0)
0001740E 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017414 6000                       		bra.s	loc_16C64
00017416                            ; ===========================================================================
00017416                            
00017416                            loc_16C50:
00017416 4881                       		ext.w	d1
00017418 D368 000C                  		add.w	d1,$C(a0)
0001741C 5228 003C                  		addq.b	#1,$3C(a0)
00017420 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017426 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001742A                            
0001742A                            loc_16C64:
0001742A 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00017430 6700                       		beq.s	loc_16C90
00017432 0C11 0027                  		cmpi.b	#$27,0(a1)
00017436 6700                       		beq.s	loc_16C7C
00017438 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
0001743E 6600                       		bne.s	loc_16C82
00017440                            
00017440                            loc_16C7C:
00017440 117C 000A 0024             		move.b	#$A,$24(a0)
00017446                            
00017446                            loc_16C82:
00017446 4EF9 0000 DCDE             		jmp	DisplaySprite
0001744C                            
0001744C                            ; ===========================================================================
0001744C FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00017454                            ; ===========================================================================
00017454                            
00017454                            loc_16C90:
00017454 08E9 0007 0022             		bset	#7,$22(a1)
0001745A                            
0001745A                            loc_16C96:
0001745A 7000                       		moveq	#0,d0
0001745C 1028 0024                  		move.b	$24(a0),d0
00017460 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00017464 0828 0000 0022             		btst	#0,$22(a0)
0001746A 6700                       		beq.s	loc_16CAA
0001746C 4440                       		neg.w	d0
0001746E                            
0001746E                            loc_16CAA:
0001746E 3140 0010                  		move.w	d0,$10(a0)
00017472 317C FC00 0012             		move.w	#-$400,$12(a0)
00017478 117C 000C 0024             		move.b	#$C,$24(a0)
0001747E 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00017484                            
00017484                            loc_16CC0:				; XREF: Obj78_Index
00017484 4EB9 0000 DC8C             		jsr	ObjectFall
0001748A 4A68 0012                  		tst.w	$12(a0)
0001748E 6B00                       		bmi.s	loc_16CE0
00017490 4EBA E146                  		jsr	ObjHitFloor
00017494 4A41                       		tst.w	d1
00017496 6A00                       		bpl.s	loc_16CE0
00017498 D368 000C                  		add.w	d1,$C(a0)
0001749C 317C FC00 0012             		move.w	#-$400,$12(a0)
000174A2                            
000174A2                            loc_16CE0:
000174A2 4A28 0001                  		tst.b	1(a0)
000174A6 6A00 FDCA                  		bpl.w	Obj78_ChkGone
000174AA 4EF9 0000 DCDE             		jmp	DisplaySprite
000174B0                            ; ===========================================================================
000174B0                            Ani_obj78:
000174B0                            	include "_anim\obj78.asm"
000174B0                            ; ---------------------------------------------------------------------------
000174B0                            ; Animation script - Caterkiller enemy (uses non-standard format)
000174B0                            ; ---------------------------------------------------------------------------
000174B0 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000174C0 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
000174D0 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
000174E0 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
000174F0 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017500 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00017510 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00017520 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00017530                            	even
00017530                            	even
00017530                            
00017530                            ; ---------------------------------------------------------------------------
00017530                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017530                            ; ---------------------------------------------------------------------------
00017530                            Map_obj78:
00017530                            	include "_maps\obj78.asm"
00017530                            ; ---------------------------------------------------------------------------
00017530                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017530                            ; ---------------------------------------------------------------------------
00017530 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00017534 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00017538 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
0001753C 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00017540 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00017544 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00017548 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
0001754C 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00017550 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00017554 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00017558 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
0001755C 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00017560 01                         byte_16D9E:	dc.b 1
00017561 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00017566 01                         byte_16DA4:	dc.b 1
00017567 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
0001756C 01                         byte_16DAA:	dc.b 1
0001756D F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00017572 01                         byte_16DB0:	dc.b 1
00017573 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00017578 01                         byte_16DB6:	dc.b 1
00017579 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
0001757E 01                         byte_16DBC:	dc.b 1
0001757F ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00017584 01                         byte_16DC2:	dc.b 1
00017585 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
0001758A 01                         byte_16DC8:	dc.b 1
0001758B EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00017590 01                         byte_16DCE:	dc.b 1
00017591 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00017596 01                         byte_16DD4:	dc.b 1
00017597 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
0001759C 01                         byte_16DDA:	dc.b 1
0001759D F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
000175A2 01                         byte_16DE0:	dc.b 1
000175A3 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000175A8 01                         byte_16DE6:	dc.b 1
000175A9 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000175AE 01                         byte_16DEC:	dc.b 1
000175AF F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000175B4 01                         byte_16DF2:	dc.b 1
000175B5 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000175BA 01                         byte_16DF8:	dc.b 1
000175BB F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000175C0 01                         byte_16DFE:	dc.b 1
000175C1 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000175C6 01                         byte_16E04:	dc.b 1
000175C7 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000175CC 01                         byte_16E0A:	dc.b 1
000175CD F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000175D2 01                         byte_16E10:	dc.b 1
000175D3 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
000175D8 01                         byte_16E16:	dc.b 1
000175D9 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
000175DE 01                         byte_16E1C:	dc.b 1
000175DF ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
000175E4 01                         byte_16E22:	dc.b 1
000175E5 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
000175EA 01                         byte_16E28:	dc.b 1
000175EB EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
000175F0                            		even
000175F0                            		even
000175F0                            
000175F0                            ; ===========================================================================
000175F0                            ; ---------------------------------------------------------------------------
000175F0                            ; Object 79 - lamppost
000175F0                            ; ---------------------------------------------------------------------------
000175F0                            
000175F0                            Obj79:					; XREF: Obj_Index
000175F0 7000                       		moveq	#0,d0
000175F2 1028 0024                  		move.b	$24(a0),d0
000175F6 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
000175FA 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
000175FE 4EFA 8786                  		jmp	MarkObjGone
00017602                            ; ===========================================================================
00017602 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017604 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00017606 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00017608 0000                       		dc.w Obj79_Twirl-Obj79_Index
0001760A                            ; ===========================================================================
0001760A                            
0001760A                            Obj79_Main:				; XREF: Obj79_Index
0001760A 5428 0024                  		addq.b	#2,$24(a0)
0001760E 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00017616 317C 07A0 0002             		move.w	#$7A0,2(a0)
0001761C 117C 0004 0001             		move.b	#4,1(a0)
00017622 117C 0008 0019             		move.b	#8,$19(a0)
00017628 117C 0005 0018             		move.b	#5,$18(a0)
0001762E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017632 7000                       		moveq	#0,d0
00017634 1028 0023                  		move.b	$23(a0),d0
00017638 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001763E 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017644 6600                       		bne.s	Obj79_RedLamp
00017646 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001764A 0201 007F                  		andi.b	#$7F,d1
0001764E 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00017652 0202 007F                  		andi.b	#$7F,d2
00017656 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00017658 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
0001765A                            
0001765A                            Obj79_RedLamp:
0001765A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017660 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00017666 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
0001766C 4E75                       		rts	
0001766E                            ; ===========================================================================
0001766E                            
0001766E                            Obj79_BlueLamp:				; XREF: Obj79_Index
0001766E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00017672 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00017676 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001767A 6B00 0000                  		bmi.w	locret_16F90
0001767E 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017682 0201 007F                  		andi.b	#$7F,d1
00017686 1428 0028                  		move.b	$28(a0),d2
0001768A 0202 007F                  		andi.b	#$7F,d2
0001768E B202                       		cmp.b	d2,d1
00017690 6500                       		bcs.s	Obj79_HitLamp
00017692 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017696 7000                       		moveq	#0,d0
00017698 1028 0023                  		move.b	$23(a0),d0
0001769C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000176A2 117C 0004 0024             		move.b	#4,$24(a0)
000176A8 117C 0003 001A             		move.b	#3,$1A(a0)
000176AE 6000 0000                  		bra.w	locret_16F90
000176B2                            ; ===========================================================================
000176B2                            
000176B2                            Obj79_HitLamp:
000176B2 3038 D008                  		move.w	($FFFFD008).w,d0
000176B6 9068 0008                  		sub.w	8(a0),d0
000176BA 5040                       		addq.w	#8,d0
000176BC 0C40 0010                  		cmpi.w	#$10,d0
000176C0 6400 0000                  		bcc.w	locret_16F90
000176C4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000176C8 9068 000C                  		sub.w	$C(a0),d0
000176CC 0640 0040                  		addi.w	#$40,d0
000176D0 0C40 0068                  		cmpi.w	#$68,d0
000176D4 6400                       		bcc.s	locret_16F90
000176D6 303C 00A1                  		move.w	#$A1,d0
000176DA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lamppost sound
000176E0 5428 0024                  		addq.b	#2,$24(a0)
000176E4 4EB9 0000 E164             		jsr	SingleObjLoad
000176EA 6600                       		bne.s	loc_16F76
000176EC 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
000176F0 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
000176F6 3368 0008 0030             		move.w	8(a0),$30(a1)
000176FC 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017702 0469 0018 0032             		subi.w	#$18,$32(a1)
00017708 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00017710 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017716 137C 0004 0001             		move.b	#4,1(a1)
0001771C 137C 0008 0019             		move.b	#8,$19(a1)
00017722 137C 0004 0018             		move.b	#4,$18(a1)
00017728 137C 0002 001A             		move.b	#2,$1A(a1)
0001772E 337C 0020 0036             		move.w	#$20,$36(a1)
00017734                            
00017734                            loc_16F76:
00017734 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
0001773A 6100 0000                  		bsr.w	Obj79_StoreInfo
0001773E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017742 7000                       		moveq	#0,d0
00017744 1028 0023                  		move.b	$23(a0),d0
00017748 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001774E                            
0001774E                            locret_16F90:
0001774E 4E75                       		rts	
00017750                            ; ===========================================================================
00017750                            
00017750                            Obj79_AfterHit:				; XREF: Obj79_Index
00017750 4E75                       		rts	
00017752                            ; ===========================================================================
00017752                            
00017752                            Obj79_Twirl:				; XREF: Obj79_Index
00017752 5368 0036                  		subq.w	#1,$36(a0)
00017756 6A00                       		bpl.s	loc_16FA0
00017758 117C 0004 0024             		move.b	#4,$24(a0)
0001775E                            
0001775E                            loc_16FA0:
0001775E 1028 0026                  		move.b	$26(a0),d0
00017762 0428 0010 0026             		subi.b	#$10,$26(a0)
00017768 0400 0040                  		subi.b	#$40,d0
0001776C 4EB9 0000 2C64             		jsr	(CalcSine).l
00017772 C3FC 0C00                  		muls.w	#$C00,d1
00017776 4841                       		swap	d1
00017778 D268 0030                  		add.w	$30(a0),d1
0001777C 3141 0008                  		move.w	d1,8(a0)
00017780 C1FC 0C00                  		muls.w	#$C00,d0
00017784 4840                       		swap	d0
00017786 D068 0032                  		add.w	$32(a0),d0
0001778A 3140 000C                  		move.w	d0,$C(a0)
0001778E 4E75                       		rts	
00017790                            ; ===========================================================================
00017790                            ; ---------------------------------------------------------------------------
00017790                            ; Subroutine to	store information when you hit a lamppost
00017790                            ; ---------------------------------------------------------------------------
00017790                            
00017790                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00017790 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017796 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
0001779C 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
000177A2 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000177A8 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000177AE 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
000177B4 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
000177BA 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000177C0 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
000177C6 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
000177CC 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
000177D2 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
000177D8 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
000177DE 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
000177E4 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
000177EA 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
000177F0 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
000177F6 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
000177FC 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017802 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017808 4E75                       		rts	
0001780A                            
0001780A                            ; ---------------------------------------------------------------------------
0001780A                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001780A                            ; ---------------------------------------------------------------------------
0001780A                            
0001780A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001780A                            
0001780A                            
0001780A                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
0001780A 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00017810 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017816 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
0001781C 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017822 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017828 4278 FE20                  		clr.w	($FFFFFE20).w
0001782C 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017830 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017836 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
0001783C 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017840 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017846 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
0001784C 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017852 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017858 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
0001785E 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017864 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
0001786A 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017870 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017876 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
0001787C 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017882 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017888 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001788E 6600                       		bne.s	loc_170E4
00017890 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017896 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
0001789C 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000178A2                            
000178A2                            loc_170E4:
000178A2 4A38 FE30                  		tst.b	($FFFFFE30).w
000178A6 6A00                       		bpl.s	locret_170F6
000178A8 3038 FE32                  		move.w	($FFFFFE32).w,d0
000178AC 0440 00A0                  		subi.w	#$A0,d0
000178B0 31C0 F728                  		move.w	d0,($FFFFF728).w
000178B4                            
000178B4                            locret_170F6:
000178B4 4E75                       		rts	
000178B6                            ; End of function Obj79_LoadInfo
000178B6                            
000178B6                            ; ===========================================================================
000178B6                            ; ---------------------------------------------------------------------------
000178B6                            ; Sprite mappings - lamppost
000178B6                            ; ---------------------------------------------------------------------------
000178B6                            Map_obj79:
000178B6                            	include "_maps\obj79.asm"
000178B6                            ; ---------------------------------------------------------------------------
000178B6                            ; Sprite mappings - lamppost
000178B6                            ; ---------------------------------------------------------------------------
000178B6 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
000178BA 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
000178BE 06                         byte_17100:	dc.b 6
000178BF E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000178C4 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000178C9 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000178CE F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000178D3 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
000178D8 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
000178DD 04                         byte_1711F:	dc.b 4
000178DE E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000178E3 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000178E8 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000178ED F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000178F2 02                         byte_17134:	dc.b 2
000178F3 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
000178F8 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
000178FD 06                         byte_1713F:	dc.b 6
000178FE E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017903 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017908 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001790D F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017912 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017917 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
0001791C                            		even
0001791C                            		even
0001791C                            
0001791C                            ; ===========================================================================
0001791C                            ; ---------------------------------------------------------------------------
0001791C                            ; Object 7D - hidden points at the end of a level
0001791C                            ; ---------------------------------------------------------------------------
0001791C                            
0001791C                            Obj7D:					; XREF: Obj_Index
0001791C 7000                       		moveq	#0,d0
0001791E 1028 0024                  		move.b	$24(a0),d0
00017922 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017926 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
0001792A                            ; ===========================================================================
0001792A 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
0001792C 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
0001792E                            ; ===========================================================================
0001792E                            
0001792E                            Obj7D_Main:				; XREF: Obj7D_Index
0001792E 7410                       		moveq	#$10,d2
00017930 3602                       		move.w	d2,d3
00017932 D643                       		add.w	d3,d3
00017934 43F8 D000                  		lea	($FFFFD000).w,a1
00017938 3029 0008                  		move.w	8(a1),d0
0001793C 9068 0008                  		sub.w	8(a0),d0
00017940 D042                       		add.w	d2,d0
00017942 B043                       		cmp.w	d3,d0
00017944 6400                       		bcc.s	Obj7D_ChkDel
00017946 3229 000C                  		move.w	$C(a1),d1
0001794A 9268 000C                  		sub.w	$C(a0),d1
0001794E D242                       		add.w	d2,d1
00017950 B243                       		cmp.w	d3,d1
00017952 6400                       		bcc.s	Obj7D_ChkDel
00017954 4A78 FE08                  		tst.w	($FFFFFE08).w
00017958 6600                       		bne.s	Obj7D_ChkDel
0001795A 4A38 F7CD                  		tst.b	($FFFFF7CD).w
0001795E 6600                       		bne.s	Obj7D_ChkDel
00017960 5428 0024                  		addq.b	#2,$24(a0)
00017964 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
0001796C 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017972 0028 0004 0001             		ori.b	#4,1(a0)
00017978 117C 0000 0018             		move.b	#0,$18(a0)
0001797E 117C 0010 0019             		move.b	#$10,$19(a0)
00017984 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0001798A 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017990 303C 00C9                  		move.w	#$C9,d0
00017994 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play bonus sound
0001799A 7000                       		moveq	#0,d0
0001799C 1028 0028                  		move.b	$28(a0),d0
000179A0 D040                       		add.w	d0,d0
000179A2 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
000179A6 4EB9 0000 0000             		jsr	AddPoints
000179AC                            
000179AC                            Obj7D_ChkDel:
000179AC 3028 0008                  		move.w	8(a0),d0
000179B0 0240 FF80                  		andi.w	#$FF80,d0
000179B4 3238 F700                  		move.w	($FFFFF700).w,d1
000179B8 0441 0080                  		subi.w	#$80,d1
000179BC 0241 FF80                  		andi.w	#$FF80,d1
000179C0 9041                       		sub.w	d1,d0
000179C2 0C40 0280                  		cmpi.w	#$280,d0
000179C6 6200                       		bhi.s	Obj7D_Delete
000179C8 4E75                       		rts	
000179CA                            ; ===========================================================================
000179CA                            
000179CA                            Obj7D_Delete:
000179CA 4EF9 0000 DD1A             		jmp	DeleteObject
000179D0                            ; ===========================================================================
000179D0 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
000179D2 03E8                       		dc.w 1000
000179D4 0064                       		dc.w 100
000179D6 0001                       		dc.w 1
000179D8                            ; ===========================================================================
000179D8                            
000179D8                            Obj7D_DelayDel:				; XREF: Obj7D_Index
000179D8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
000179DC 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
000179DE 3028 0008                  		move.w	8(a0),d0
000179E2 0240 FF80                  		andi.w	#-$80,d0
000179E6 3238 F700                  		move.w	($FFFFF700).w,d1
000179EA 0441 0080                  		subi.w	#$80,d1
000179EE 0241 FF80                  		andi.w	#-$80,d1
000179F2 9041                       		sub.w	d1,d0
000179F4 0C40 0280                  		cmpi.w	#$280,d0
000179F8 6200                       		bhi.s	Obj7D_Delete2
000179FA 4EF9 0000 DCDE             		jmp	DisplaySprite
00017A00                            ; ===========================================================================
00017A00                            
00017A00                            Obj7D_Delete2:
00017A00 4EF9 0000 DD1A             		jmp	DeleteObject
00017A06                            ; ===========================================================================
00017A06                            ; ---------------------------------------------------------------------------
00017A06                            ; Sprite mappings - hidden points at the end of	a level
00017A06                            ; ---------------------------------------------------------------------------
00017A06                            Map_obj7D:
00017A06                            	include "_maps\obj7D.asm"
00017A06                            ; ---------------------------------------------------------------------------
00017A06                            ; Sprite mappings - hidden points at the end of	a level
00017A06                            ; ---------------------------------------------------------------------------
00017A06 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017A0A 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017A0E 00                         byte_17250:	dc.b 0
00017A0F 01                         byte_17251:	dc.b 1
00017A10 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017A15 01                         byte_17257:	dc.b 1
00017A16 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017A1B 01                         byte_1725D:	dc.b 1
00017A1C F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017A22 00                         		even
00017A22 00                         		even
00017A22                            
00017A22                            ; ===========================================================================
00017A22                            ; ---------------------------------------------------------------------------
00017A22                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017A22                            ; ---------------------------------------------------------------------------
00017A22                            
00017A22                            Obj8A:					; XREF: Obj_Index
00017A22 7000                       		moveq	#0,d0
00017A24 1028 0024                  		move.b	$24(a0),d0
00017A28 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017A2C 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017A30                            ; ===========================================================================
00017A30 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017A32 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017A34                            ; ===========================================================================
00017A34                            
00017A34                            Obj8A_Main:				; XREF: Obj8A_Index
00017A34 5428 0024                  		addq.b	#2,$24(a0)
00017A38 317C 0120 0008             		move.w	#$120,8(a0)
00017A3E 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017A44 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017A4C 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017A52 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017A56 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017A5A 117C 0000 0001             		move.b	#0,1(a0)
00017A60 117C 0000 0018             		move.b	#0,$18(a0)
00017A66 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017A6C 6600                       		bne.s	Obj8A_Display	; if not, branch
00017A6E 317C 00A6 0002             		move.w	#$A6,2(a0)
00017A74 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017A7A 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017A7E 6700                       		beq.s	Obj8A_Display	; if not, branch
00017A80 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017A86 6600                       		bne.s	Obj8A_Display	; if not, branch
00017A88 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017A8E 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017A94 4EF9 0000 DD1A             		jmp	DeleteObject
00017A9A                            ; ===========================================================================
00017A9A                            
00017A9A                            Obj8A_Display:				; XREF: Obj8A_Index
00017A9A 4EF9 0000 DCDE             		jmp	DisplaySprite
00017AA0                            ; ===========================================================================
00017AA0                            ; ---------------------------------------------------------------------------
00017AA0                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017AA0                            ; ---------------------------------------------------------------------------
00017AA0                            Map_obj8A:
00017AA0                            	include "_maps\obj8A.asm"
00017AA0                            ; ================================================================================
00017AA0                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 20:55:17 GMT-0500 (Central Daylight Time)
00017AA0                            ; ================================================================================
00017AA0                            
00017AA0                            DATAV02AM357W0A:
00017AA0 0000 0000                  	dc.w DATAV02AM357W0A_0-DATAV02AM357W0A, DATAV02AM357W0A_1-DATAV02AM357W0A
00017AA4 0000 0000                  	dc.w DATAV02AM357W0A_2-DATAV02AM357W0A, DATAV02AM357W0A_3-DATAV02AM357W0A
00017AA8 0000 0000                  	dc.w DATAV02AM357W0A_4-DATAV02AM357W0A, DATAV02AM357W0A_5-DATAV02AM357W0A
00017AAC 0000 0000                  	dc.w DATAV02AM357W0A_6-DATAV02AM357W0A, DATAV02AM357W0A_7-DATAV02AM357W0A
00017AB0 0000 0000                  	dc.w DATAV02AM357W0A_8-DATAV02AM357W0A, DATAV02AM357W0A_9-DATAV02AM357W0A
00017AB4 0000                       	dc.w DATAV02AM357W0A_A-DATAV02AM357W0A
00017AB6 0E                         DATAV02AM357W0A_0: dc.b $E
00017AB7 F805 802E 88               	dc.b $F8, $5, $80, $2E, $88
00017ABC F805 8026 98               	dc.b $F8, $5, $80, $26, $98
00017AC1 F805 801A A8               	dc.b $F8, $5, $80, $1A, $A8
00017AC6 F801 8046 B8               	dc.b $F8, $1, $80, $46, $B8
00017ACB F805 801E C0               	dc.b $F8, $5, $80, $1E, $C0
00017AD0 F805 803E D8               	dc.b $F8, $5, $80, $3E, $D8
00017AD5 F805 800E E8               	dc.b $F8, $5, $80, $E, $E8
00017ADA F805 8004 F8               	dc.b $F8, $5, $80, $4, $F8
00017ADF F809 8008 08               	dc.b $F8, $9, $80, $8, $8
00017AE4 F805 802E 28               	dc.b $F8, $5, $80, $2E, $28
00017AE9 F805 803E 38               	dc.b $F8, $5, $80, $3E, $38
00017AEE F805 8004 48               	dc.b $F8, $5, $80, $4, $48
00017AF3 F805 805C 58               	dc.b $F8, $5, $80, $5C, $58
00017AF8 F805 805C 68               	dc.b $F8, $5, $80, $5C, $68
00017AFD 10                         DATAV02AM357W0A_1: dc.b $10
00017AFE D805 0000 80               	dc.b $D8, $5, $0, $0, $80
00017B03 D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00017B08 D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00017B0D D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
00017B12 D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00017B17 D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00017B1C D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
00017B21 D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00017B26 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00017B2B 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
00017B30 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00017B35 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00017B3A 0805 0016 08               	dc.b $8, $5, $0, $16, $8
00017B3F 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
00017B44 0805 0004 30               	dc.b $8, $5, $0, $4, $30
00017B49 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
00017B4E 0A                         DATAV02AM357W0A_2: dc.b $A
00017B4F D805 0012 80               	dc.b $D8, $5, $0, $12, $80
00017B54 D805 0022 90               	dc.b $D8, $5, $0, $22, $90
00017B59 D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
00017B5E D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
00017B63 D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
00017B68 D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
00017B6D D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
00017B72 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
00017B77 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
00017B7C 0805 0036 08               	dc.b $8, $5, $0, $36, $8
00017B81 18                         DATAV02AM357W0A_3: dc.b $18
00017B82 D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
00017B87 D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00017B8C D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
00017B91 D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00017B96 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017B9B D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
00017BA0 D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00017BA5 D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00017BAA D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017BAF D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00017BB4 D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00017BB9 D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00017BBE D801 0046 50               	dc.b $D8, $1, $0, $46, $50
00017BC3 D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00017BC8 D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00017BCD 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
00017BD2 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00017BD7 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00017BDC 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
00017BE1 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00017BE6 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00017BEB 0805 0004 10               	dc.b $8, $5, $0, $4, $10
00017BF0 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00017BF5 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00017BFA 14                         DATAV02AM357W0A_4: dc.b $14
00017BFB D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
00017C00 D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00017C05 D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00017C0A D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00017C0F D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00017C14 D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00017C19 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00017C1E 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
00017C23 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00017C28 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00017C2D 0005 0004 24               	dc.b $0, $5, $0, $4, $24
00017C32 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00017C37 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00017C3C 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
00017C41 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
00017C46 2001 0046 10               	dc.b $20, $1, $0, $46, $10
00017C4B 2005 0050 18               	dc.b $20, $5, $0, $50, $18
00017C50 2005 0022 30               	dc.b $20, $5, $0, $22, $30
00017C55 2001 0046 40               	dc.b $20, $1, $0, $46, $40
00017C5A 2005 000E 48               	dc.b $20, $5, $0, $E, $48
00017C5F 1A                         DATAV02AM357W0A_5: dc.b $1A
00017C60 D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
00017C65 D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
00017C6A D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
00017C6F D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
00017C74 D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
00017C79 D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
00017C7E D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017C83 D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00017C88 D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00017C8D D805 0032 38               	dc.b $D8, $5, $0, $32, $38
00017C92 D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00017C97 D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00017C9C 0809 0008 88               	dc.b $8, $9, $0, $8, $88
00017CA1 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00017CA6 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00017CAB 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
00017CB0 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
00017CB5 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00017CBA 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00017CBF 0805 0004 08               	dc.b $8, $5, $0, $4, $8
00017CC4 0805 0058 18               	dc.b $8, $5, $0, $58, $18
00017CC9 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00017CCE 0809 0008 38               	dc.b $8, $9, $0, $8, $38
00017CD3 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
00017CD8 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00017CDD 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
00017CE2 17                         DATAV02AM357W0A_6: dc.b $17
00017CE3 D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
00017CE8 D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00017CED D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
00017CF2 D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
00017CF7 D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00017CFC D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
00017D01 D005 0022 08               	dc.b $D0, $5, $0, $22, $8
00017D06 D005 0026 18               	dc.b $D0, $5, $0, $26, $18
00017D0B D005 0000 28               	dc.b $D0, $5, $0, $0, $28
00017D10 D005 0022 38               	dc.b $D0, $5, $0, $22, $38
00017D15 D005 0004 48               	dc.b $D0, $5, $0, $4, $48
00017D1A D009 0008 58               	dc.b $D0, $9, $0, $8, $58
00017D1F 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017D24 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017D29 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
00017D2E 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
00017D33 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
00017D38 0005 0004 14               	dc.b $0, $5, $0, $4, $14
00017D3D 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
00017D42 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
00017D47 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
00017D4C 2005 0058 04               	dc.b $20, $5, $0, $58, $4
00017D51 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
00017D56 1F                         DATAV02AM357W0A_7: dc.b $1F
00017D57 D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
00017D5C D805 0012 90               	dc.b $D8, $5, $0, $12, $90
00017D61 D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
00017D66 D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
00017D6B D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
00017D70 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017D75 D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
00017D7A D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
00017D7F D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
00017D84 D805 0004 18               	dc.b $D8, $5, $0, $4, $18
00017D89 D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
00017D8E D805 0058 38               	dc.b $D8, $5, $0, $58, $38
00017D93 D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
00017D98 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
00017D9D 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
00017DA2 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017DA7 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017DAC 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
00017DB1 0009 0008 00               	dc.b $0, $9, $0, $8, $0
00017DB6 0001 0046 14               	dc.b $0, $1, $0, $46, $14
00017DBB 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
00017DC0 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
00017DC5 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
00017DCA 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
00017DCF 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
00017DD4 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
00017DD9 0001 0046 74               	dc.b $0, $1, $0, $46, $74
00017DDE 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
00017DE3 2005 0004 08               	dc.b $20, $5, $0, $4, $8
00017DE8 2005 0012 18               	dc.b $20, $5, $0, $12, $18
00017DED 2005 0004 28               	dc.b $20, $5, $0, $4, $28
00017DF2 0F                         DATAV02AM357W0A_8: dc.b $F
00017DF3 F805 0012 80               	dc.b $F8, $5, $0, $12, $80
00017DF8 F805 0022 90               	dc.b $F8, $5, $0, $22, $90
00017DFD F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
00017E02 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
00017E07 F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
00017E0C F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
00017E11 F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
00017E16 F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
00017E1B F805 0042 00               	dc.b $F8, $5, $0, $42, $0
00017E20 F805 0048 18               	dc.b $F8, $5, $0, $48, $18
00017E25 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
00017E2A F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
00017E2F F805 000E 50               	dc.b $F8, $5, $0, $E, $50
00017E34 F805 0000 60               	dc.b $F8, $5, $0, $0, $60
00017E39 F805 0004 70               	dc.b $F8, $5, $0, $4, $70
00017E3E 08                         DATAV02AM357W0A_9: dc.b $8
00017E3F 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
00017E44 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
00017E49 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
00017E4E 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
00017E53 3005 0000 08               	dc.b $30, $5, $0, $0, $8
00017E58 3005 0004 18               	dc.b $30, $5, $0, $4, $18
00017E5D 3001 0046 28               	dc.b $30, $1, $0, $46, $28
00017E62 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
00017E67 20                         DATAV02AM357W0A_A: dc.b $20
00017E68 ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
00017E6D ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
00017E72 ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
00017E77 ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
00017E7C ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
00017E81 ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
00017E86 ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
00017E8B FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
00017E90 FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
00017E95 FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
00017E9A FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
00017E9F FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
00017EA4 FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
00017EA9 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
00017EAE 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
00017EB3 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
00017EB8 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
00017EBD 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
00017EC2 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
00017EC7 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
00017ECC 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
00017ED1 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
00017ED6 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
00017EDB 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
00017EE0 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
00017EE5 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
00017EEA 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
00017EEF 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
00017EF4 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
00017EF9 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
00017EFE 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
00017F03 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
00017F08                            	even
00017F08                            	even
00017F08                            
00017F08                            ; ===========================================================================
00017F08                            ; ---------------------------------------------------------------------------
00017F08                            ; Object 3D - matthew boss - modified by GK89
00017F08                            ; ---------------------------------------------------------------------------
00017F08                            
00017F08                            Obj3D:					; XREF: Obj_Index
00017F08 7000                       		moveq	#0,d0
00017F0A 1028 0024                  		move.b	$24(a0),d0
00017F0E 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017F12 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00017F16                            ; ===========================================================================
00017F16 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00017F18 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00017F1A 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00017F1C 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00017F1E                            
00017F1E 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00017F20 0401                       		dc.b 4,	1
00017F22 0607                       		dc.b 6,	7
00017F24                            ; ===========================================================================
00017F24                            
00017F24                            Obj3D_Main:				; XREF: Obj3D_Index
00017F24 45F9 0001 7F1E             		lea	(Obj3D_ObjData).l,a2
00017F2A 2248                       		movea.l	a0,a1
00017F2C 7202                       		moveq	#2,d1
00017F2E 6000                       		bra.s	Obj3D_LoadBoss
00017F30                            ; ===========================================================================
00017F30                            
00017F30                            Obj3D_Loop:
00017F30 4EB9 0000 E17A             		jsr	SingleObjLoad2
00017F36 6600                       		bne.s	loc_17772
00017F38                            
00017F38                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00017F38 135A 0024                  		move.b	(a2)+,$24(a1)
00017F3C 12BC 003D                  		move.b	#$3D,0(a1)
00017F40 3368 0008 0008             		move.w	8(a0),8(a1)
00017F46 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017F4C 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00017F54 337C 0400 0002             		move.w	#$400,2(a1)
00017F5A 137C 0004 0001             		move.b	#4,1(a1)
00017F60 137C 0020 0019             		move.b	#$20,$19(a1)
00017F66 137C 0003 0018             		move.b	#3,$18(a1)
00017F6C 135A 001C                  		move.b	(a2)+,$1C(a1)
00017F70 2348 0034                  		move.l	a0,$34(a1)
00017F74 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00017F78                            
00017F78                            loc_17772:
00017F78 3168 0008 0030             		move.w	8(a0),$30(a0)
00017F7E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017F84 117C 000F 0020             		move.b	#$F,$20(a0)
00017F8A 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
00017F90                            
00017F90                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00017F90 7000                       		moveq	#0,d0
00017F92 1028 0025                  		move.b	$25(a0),d0
00017F96 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00017F9A 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00017F9E 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017FA4 4EB9 0000 AD9E             		jsr	AnimateSprite
00017FAA 1028 0022                  		move.b	$22(a0),d0
00017FAE 0200 0003                  		andi.b	#3,d0
00017FB2 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017FB8 8128 0001                  		or.b	d0,1(a0)
00017FBC 4EF9 0000 DCDE             		jmp	DisplaySprite
00017FC2                            ; ===========================================================================
00017FC2 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00017FC4 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00017FC6 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00017FC8 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00017FCA 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00017FCC 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00017FCE 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00017FD0                            ; ===========================================================================
00017FD0                            
00017FD0                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00017FD0 4EB9 0000 0000             		jsr    Obj3D_ShipMove
00017FD6 6100 0000                  		bsr.w	BossMove
00017FDA 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00017FE0 6600                       		bne.s	loc_177E6
00017FE2 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00017FE8 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00017FEC                            
00017FEC                            loc_177E6:
00017FEC 1028 003F                  		move.b	$3F(a0),d0
00017FF0 4EB9 0000 2C64             		jsr	(CalcSine).l
00017FF6 EC40                       		asr.w	#6,d0
00017FF8 D068 0038                  		add.w	$38(a0),d0
00017FFC 3140 000C                  		move.w	d0,$C(a0)
00018000 3168 0030 0008             		move.w	$30(a0),8(a0)
00018006 5428 003F                  		addq.b	#2,$3F(a0)
0001800A 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00018010 6400                       		bcc.s	locret_1784A
00018012 4A28 0022                  		tst.b	$22(a0)
00018016 6B00                       		bmi.s	loc_1784C
00018018 4A28 0020                  		tst.b	$20(a0)
0001801C 6600                       		bne.s	locret_1784A
0001801E 4A28 003E                  		tst.b	$3E(a0)
00018022 6600                       		bne.s	Obj3D_ShipFlash
00018024 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001802A 303C 00AC                  		move.w	#$AC,d0
0001802E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018034                            
00018034                            Obj3D_ShipFlash:
00018034 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018038 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001803A 4A51                       		tst.w	(a1)
0001803C 6600                       		bne.s	loc_1783C
0001803E 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018042                            
00018042                            loc_1783C:
00018042 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018044 5328 003E                  		subq.b	#1,$3E(a0)
00018048 6600                       		bne.s	locret_1784A
0001804A 117C 000F 0020             		move.b	#$F,$20(a0)
00018050                            
00018050                            locret_1784A:
00018050 4E75                       		rts	
00018052                            ; ===========================================================================
00018052                            
00018052                            loc_1784C:				; XREF: loc_177E6
00018052 7064                       		moveq	#100,d0
00018054 6100 0000                  		bsr.w	AddPoints
00018058 117C 0008 0025             		move.b	#8,$25(a0)
0001805E 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018064 4E75                       		rts	
00018066                            
00018066                            ; ---------------------------------------------------------------------------
00018066                            ; Defeated boss	subroutine
00018066                            ; ---------------------------------------------------------------------------
00018066                            
00018066                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018066                            
00018066                            
00018066                            BossDefeated:
00018066 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001806A 0200 0007                  		andi.b	#7,d0
0001806E 6600                       		bne.s	locret_178A2
00018070 4EB9 0000 E164             		jsr	SingleObjLoad
00018076 6600                       		bne.s	locret_178A2
00018078 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001807C 3368 0008 0008             		move.w	8(a0),8(a1)
00018082 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018088 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001808E 3200                       		move.w	d0,d1
00018090 7200                       		moveq	#0,d1
00018092 1200                       		move.b	d0,d1
00018094 E409                       		lsr.b	#2,d1
00018096 0441 0020                  		subi.w	#$20,d1
0001809A D369 0008                  		add.w	d1,8(a1)
0001809E E048                       		lsr.w	#8,d0
000180A0 E608                       		lsr.b	#3,d0
000180A2 D169 000C                  		add.w	d0,$C(a1)
000180A6                            
000180A6                            locret_178A2:
000180A6 4E75                       		rts	
000180A8                            ; End of function BossDefeated
000180A8                            
000180A8                            ; ---------------------------------------------------------------------------
000180A8                            ; Subroutine to	move a boss
000180A8                            ; ---------------------------------------------------------------------------
000180A8                            
000180A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000180A8                            
000180A8                            
000180A8                            BossMove:
000180A8 2428 0030                  		move.l	$30(a0),d2
000180AC 2628 0038                  		move.l	$38(a0),d3
000180B0 3028 0010                  		move.w	$10(a0),d0
000180B4 48C0                       		ext.l	d0
000180B6 E180                       		asl.l	#8,d0
000180B8 D480                       		add.l	d0,d2
000180BA 3028 0012                  		move.w	$12(a0),d0
000180BE 48C0                       		ext.l	d0
000180C0 E180                       		asl.l	#8,d0
000180C2 D680                       		add.l	d0,d3
000180C4 2142 0030                  		move.l	d2,$30(a0)
000180C8 2143 0038                  		move.l	d3,$38(a0)
000180CC 4E75                       		rts	
000180CE                            ; End of function BossMove
000180CE                            
000180CE                            ; ===========================================================================
000180CE                            
000180CE                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
000180CE 6100 FFD8                  		bsr.w	BossMove
000180D2 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000180D8 6600                       		bne.s	loc_17916
000180DA 317C 0000 0010             		move.w	#0,$10(a0)
000180E0 317C 0000 0012             		move.w	#0,$12(a0)
000180E6 5428 0025                  		addq.b	#2,$25(a0)
000180EA 4EB9 0000 E17A             		jsr	SingleObjLoad2
000180F0 6600                       		bne.s	loc_17910
000180F2 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
000180F6 3368 0030 0008             		move.w	$30(a0),8(a1)
000180FC 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018102 2348 0034                  		move.l	a0,$34(a1)
00018106                            
00018106                            loc_17910:
00018106 317C 0077 003C             		move.w	#$77,$3C(a0)
0001810C                            
0001810C                            loc_17916:
0001810C 6000 FEDE                  		bra.w	loc_177E6
00018110                            ; ===========================================================================
00018110                            
00018110                            Obj3D_ShipMove:				; XREF:  sonic follow move
00018110 5368 003C                  		subq.w	#1,$3C(a0)
00018114 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
0001811A 5428 0025                  		addq.b	#2,$25(a0)
0001811E 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018124 3038 D008                  		move.w	($FFFFD008).w,d0	 
00018128 9068 0008                  		sub.w	8(a0),d0		 
0001812C 6A00                       		bpl.s	Obj3D_left			 
0001812E 08A8 0000 0022             		bclr	#0,$22(a0)		 
00018134 6000                       		bra.s	Obj3D_right		 
00018136 08A8 0005 0022             		bclr	#5,$22(a0)
0001813C 4EB9 0000 0000              		jsr     loc_17950
00018142 4E75                       		rts
00018144                            ; ===========================================================================
00018144                            
00018144                            Obj3D_right:
00018144 317C FF00 0010             		move.w	#-$100,$10(a0)	
0001814A 4E75                       		Rts
0001814C                            
0001814C                            Obj3D_left:
0001814C 317C 0100 0010             		move.w	#$100,$10(a0)	 
00018152 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
00018158 6600                       		bne.s	RTSboss  	; if not, branch
0001815A 0868 0000 0022              		bchg	#0,$22(a0)
00018160                            
00018160                            RTSboss:	    
00018160 4E75                       		rts
00018162                             ; ===========================================================================
00018162                            
00018162                            Obj3D_UpStuff:
00018162 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
00018166 9068 000C                  		sub.w	$C(a0),d0		 
0001816A 6A00                       		bpl.s	Obj3D_down			 
0001816C 6000                        		bra.s	Obj3D_up		 
0001816E 08A8 0005 0022             		bclr	#5,$22(a0)
00018174                             
00018174                            Obj3D_up:		
00018174 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
0001817A 4E75                        	    rts
0001817C                            
0001817C                            Obj3D_down:
0001817C 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
00018182                            
00018182                            loc_17950:
00018182 6000 FE68                  		bra.w	loc_177E6
00018186                            ; ===========================================================================
00018186                            
00018186                            loc_17954:				; XREF: Obj3D_ShipIndex
00018186 5368 003C                  		subq.w	#1,$3C(a0)
0001818A 6B00                       		bmi.s	loc_17960
0001818C 6100 FF1A                  		bsr.w	BossMove
00018190 6000                       		bra.s	loc_17976
00018192                            ; ===========================================================================
00018192                            
00018192                            loc_17960:
00018192 0868 0000 0022             		bchg	#0,$22(a0)
00018198 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001819E 5528 0025                  		subq.b	#2,$25(a0)
000181A2 317C 0000 0010             		move.w	#0,$10(a0)
000181A8                            
000181A8                            loc_17976:
000181A8 6000 FE42                  		bra.w	loc_177E6
000181AC                            ; ===========================================================================
000181AC                            
000181AC                            loc_1797A:				; XREF: Obj3D_ShipIndex
000181AC 5368 003C                  		subq.w	#1,$3C(a0)
000181B0 6B00                       		bmi.s	loc_17984
000181B2 6000 FEB2                  		bra.w	BossDefeated
000181B6                            ; ===========================================================================
000181B6                            
000181B6                            loc_17984:
000181B6 08E8 0000 0022             		bset	#0,$22(a0)
000181BC 08A8 0007 0022             		bclr	#7,$22(a0)
000181C2 4268 0010                  		clr.w	$10(a0)
000181C6 5428 0025                  		addq.b	#2,$25(a0)
000181CA 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000181D0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000181D4 6600                       		bne.s	locret_179AA
000181D6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000181DC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000181E2 6000 FE82                  		bra.w	BossDefeated
000181E6                            
000181E6                            locret_179AA:
000181E6 4E75                       		rts	
000181E8                            ; ===========================================================================
000181E8                            
000181E8                            loc_179AC:				; XREF: Obj3D_ShipIndex
000181E8 4EB9 0000 DC8C             		jsr ObjectFall		
000181EE 5268 003C                  		addq.w	#1,$3C(a0)
000181F2 6700                       		beq.s	loc_179BC
000181F4 6A00                       		bpl.s	loc_179C2
000181F6 6000                       		bra.s	loc_179EE
000181F8                            ; ===========================================================================
000181F8                            
000181F8                            loc_179BC:
000181F8 4268 0012                  		clr.w	$12(a0)
000181FC 6000                       		bra.s	loc_179EE
000181FE                            ; ===========================================================================
000181FE                            
000181FE                            loc_179C2:
000181FE 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018204 6500                       		bcs.s	loc_179DA
00018206 6700                       		beq.s	loc_179E0
00018208 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001820E 6500                       		bcs.s	loc_179EE
00018210 5428 0025                  		addq.b	#2,$25(a0)
00018214 6000                       		bra.s	loc_179EE
00018216                            ; ===========================================================================
00018216                            
00018216                            loc_179DA:
00018216 5168 0012                  		subq.w	#8,$12(a0)
0001821A 6000                       		bra.s	loc_179EE
0001821C 6000 FE48                  		bra.w	BossDefeated
00018220                            ; ===========================================================================
00018220                            
00018220                            loc_179E0:
00018220 4268 0012                  		clr.w	$12(a0)
00018224 303C 0081                  		move.w	#$81,d0
00018228 4EB9 0000 15BA             		jsr	(PlaySound).l	; play GHZ music
0001822E                            
0001822E                            loc_179EE:
0001822E 6100 FE78                  		bsr.w	BossMove
00018232 6000 FDB8                  		bra.w	loc_177E6
00018236                            ; ===========================================================================
00018236                            
00018236                            loc_179F6:				; XREF: Obj3D_ShipIndex
00018236 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
0001823C 6700                       		beq.s	loc_17A10
0001823E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018242 6000                       		bra.s	loc_17A16
00018244                            ; ===========================================================================
00018244                            
00018244                            loc_17A10:
00018244 4A28 0001                  		tst.b	1(a0)
00018248 6A00                       		bpl.s	Obj3D_ShipDel
0001824A                            
0001824A                            loc_17A16:
0001824A 6100 FE5C                  		bsr.w	BossMove
0001824E 6000 FD9C                  		bra.w	loc_177E6
00018252                            ; ===========================================================================
00018252                            
00018252                            Obj3D_ShipDel:
00018252 4EF9 0000 DD1A             		jmp	DeleteObject
00018258                            ; ===========================================================================
00018258                            
00018258                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00018258 7000                       		moveq	#0,d0
0001825A 7201                       		moveq	#1,d1
0001825C 2268 0034                  		movea.l	$34(a0),a1
00018260 1029 0025                  		move.b	$25(a1),d0
00018264 5900                       		subq.b	#4,d0
00018266 6600                       		bne.s	loc_17A3E
00018268 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001826E 6600                       		bne.s	loc_17A46
00018270 7204                       		moveq	#4,d1
00018272                            
00018272                            loc_17A3E:
00018272 5D00                       		subq.b	#6,d0
00018274 6B00                       		bmi.s	loc_17A46
00018276 720A                       		moveq	#$A,d1
00018278 6000                       		bra.s	loc_17A5A
0001827A                            ; ===========================================================================
0001827A                            
0001827A                            loc_17A46:
0001827A 4A29 0020                  		tst.b	$20(a1)
0001827E 6600                       		bne.s	loc_17A50
00018280 7205                       		moveq	#5,d1
00018282 6000                       		bra.s	loc_17A5A
00018284                            ; ===========================================================================
00018284                            
00018284                            loc_17A50:
00018284 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001828A 6500                       		bcs.s	loc_17A5A
0001828C 7204                       		moveq	#4,d1
0001828E                            
0001828E                            loc_17A5A:
0001828E 1141 001C                  		move.b	d1,$1C(a0)
00018292 5500                       		subq.b	#2,d0
00018294 6600                       		bne.s	Obj3D_FaceDisp
00018296 117C 0006 001C             		move.b	#6,$1C(a0)
0001829C 4A28 0001                  		tst.b	1(a0)
000182A0 6A00                       		bpl.s	Obj3D_FaceDel
000182A2                            
000182A2                            Obj3D_FaceDisp:
000182A2 6000                       		bra.s	Obj3D_Display
000182A4                            ; ===========================================================================
000182A4                            
000182A4                            Obj3D_FaceDel:
000182A4 4EF9 0000 DD1A             		jmp	DeleteObject
000182AA                            ; ===========================================================================
000182AA                            
000182AA                            Obj3D_FlameMain:			; XREF: Obj3D_Index
000182AA 117C 0007 001C             		move.b	#7,$1C(a0)
000182B0 2268 0034                  		movea.l	$34(a0),a1
000182B4 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
000182BA 6600                       		bne.s	loc_17A96
000182BC 117C 000B 001C             		move.b	#$B,$1C(a0)
000182C2 4A28 0001                  		tst.b	1(a0)
000182C6 6A00                       		bpl.s	Obj3D_FlameDel
000182C8 6000                       		bra.s	Obj3D_FlameDisp
000182CA                            ; ===========================================================================
000182CA                            
000182CA                            loc_17A96:
000182CA 3029 0010                  		move.w	$10(a1),d0
000182CE 6700                       		beq.s	Obj3D_FlameDisp
000182D0 117C 0008 001C             		move.b	#8,$1C(a0)
000182D6                            
000182D6                            Obj3D_FlameDisp:
000182D6 6000                       		bra.s	Obj3D_Display
000182D8                            ; ===========================================================================
000182D8                            
000182D8                            Obj3D_FlameDel:
000182D8 4EF9 0000 DD1A             		jmp	DeleteObject
000182DE                            ; ===========================================================================
000182DE                            
000182DE                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000182DE 2268 0034                  		movea.l	$34(a0),a1
000182E2 3169 0008 0008             		move.w	8(a1),8(a0)
000182E8 3169 000C 000C             		move.w	$C(a1),$C(a0)
000182EE 1169 0022 0022             		move.b	$22(a1),$22(a0)
000182F4 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000182FA 4EB9 0000 AD9E             		jsr	AnimateSprite
00018300 1028 0022                  		move.b	$22(a0),d0
00018304 0200 0003                  		andi.b	#3,d0
00018308 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001830E 8128 0001                  		or.b	d0,1(a0)
00018312 4EF9 0000 DCDE             		jmp	DisplaySprite
00018318                            ; ===========================================================================
00018318                            ; ---------------------------------------------------------------------------
00018318                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00018318                            ; ---------------------------------------------------------------------------
00018318                            
00018318                            Obj48:					; XREF: Obj_Index
00018318 7000                       		moveq	#0,d0
0001831A 1028 0024                  		move.b	$24(a0),d0
0001831E 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00018322 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00018326                            ; ===========================================================================
00018326 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00018328 0000                       		dc.w Obj48_Base-Obj48_Index
0001832A 0000                       		dc.w Obj48_Display2-Obj48_Index
0001832C 0000                       		dc.w loc_17C68-Obj48_Index
0001832E 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018330                            ; ===========================================================================
00018330                            
00018330                            Obj48_Main:				; XREF: Obj48_Index
00018330 5428 0024                  		addq.b	#2,$24(a0)
00018334 317C 4080 0026             		move.w	#$4080,$26(a0)
0001833A 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018340 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00018348 317C 046C 0002             		move.w	#$46C,2(a0)
0001834E 45E8 0028                  		lea	$28(a0),a2
00018352 14FC 0000                  		move.b	#0,(a2)+
00018356 7205                       		moveq	#5,d1
00018358 2248                       		movea.l	a0,a1
0001835A 6000                       		bra.s	loc_17B60
0001835C                            ; ===========================================================================
0001835C                            
0001835C                            Obj48_MakeLinks:
0001835C 4EB9 0000 E17A             		jsr	SingleObjLoad2
00018362 6600                       		bne.s	Obj48_MakeBall
00018364 3368 0008 0008             		move.w	8(a0),8(a1)
0001836A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018370 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00018374 137C 0006 0024             		move.b	#6,$24(a1)
0001837A 237C 0000 81F2 0004        		move.l	#Map_obj15,4(a1)
00018382 337C 0380 0002             		move.w	#$380,2(a1)
00018388 137C 0001 001A             		move.b	#1,$1A(a1)
0001838E 5228 0028                  		addq.b	#1,$28(a0)
00018392                            
00018392                            loc_17B60:				; XREF: Obj48_Main
00018392 3A09                       		move.w	a1,d5
00018394 0445 D000                  		subi.w	#$D000,d5
00018398 EC4D                       		lsr.w	#6,d5
0001839A 0245 007F                  		andi.w	#$7F,d5
0001839E 14C5                       		move.b	d5,(a2)+
000183A0 137C 0004 0001             		move.b	#4,1(a1)
000183A6 137C 0008 0019             		move.b	#8,$19(a1)
000183AC 137C 0006 0018             		move.b	#6,$18(a1)
000183B2 2368 0034 0034             		move.l	$34(a0),$34(a1)
000183B8 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
000183BC                            
000183BC                            Obj48_MakeBall:
000183BC 137C 0008 0024             		move.b	#8,$24(a1)
000183C2 237C 0000 8750 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000183CA 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
000183D0 137C 0001 001A             		move.b	#1,$1A(a1)
000183D6 137C 0005 0018             		move.b	#5,$18(a1)
000183DC 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000183E2 4E75                       		rts	
000183E4                            ; ===========================================================================
000183E4                            
000183E4 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
000183EA                            
000183EA                            ; ===========================================================================
000183EA                            
000183EA                            Obj48_Base:				; XREF: Obj48_Index
000183EA 47F9 0001 83E4             		lea	(Obj48_PosData).l,a3
000183F0 45E8 0028                  		lea	$28(a0),a2
000183F4 7C00                       		moveq	#0,d6
000183F6 1C1A                       		move.b	(a2)+,d6
000183F8                            
000183F8                            loc_17BC6:
000183F8 7800                       		moveq	#0,d4
000183FA 181A                       		move.b	(a2)+,d4
000183FC ED4C                       		lsl.w	#6,d4
000183FE 0684 00FF D000             		addi.l	#$FFD000,d4
00018404 2244                       		movea.l	d4,a1
00018406 101B                       		move.b	(a3)+,d0
00018408 B029 003C                  		cmp.b	$3C(a1),d0
0001840C 6700                       		beq.s	loc_17BE0
0001840E 5229 003C                  		addq.b	#1,$3C(a1)
00018412                            
00018412                            loc_17BE0:
00018412 51CE FFE4                  		dbf	d6,loc_17BC6
00018416                            
00018416 B029 003C                  		cmp.b	$3C(a1),d0
0001841A 6600                       		bne.s	loc_17BFA
0001841C 2268 0034                  		movea.l	$34(a0),a1
00018420 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00018426 6600                       		bne.s	loc_17BFA
00018428 5428 0024                  		addq.b	#2,$24(a0)
0001842C                            
0001842C                            loc_17BFA:
0001842C 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018432 6700                       		beq.s	Obj48_Display
00018434 5268 0032                  		addq.w	#1,$32(a0)
00018438                            
00018438                            Obj48_Display:
00018438 6100 0000                  		bsr.w	sub_17C2A
0001843C 1028 0026                  		move.b	$26(a0),d0
00018440 4EB9 0000 8164             		jsr	(Obj15_Move2).l
00018446 4EF9 0000 DCDE             		jmp	DisplaySprite
0001844C                            ; ===========================================================================
0001844C                            
0001844C                            Obj48_Display2:				; XREF: Obj48_Index
0001844C 6100 0000                  		bsr.w	sub_17C2A
00018450 4EB9 0000 8124             		jsr	(Obj48_Move).l
00018456 4EF9 0000 DCDE             		jmp	DisplaySprite
0001845C                            
0001845C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001845C                            
0001845C                            
0001845C                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
0001845C 2268 0034                  		movea.l	$34(a0),a1
00018460 0628 0020 001B             		addi.b	#$20,$1B(a0)
00018466 6400                       		bcc.s	loc_17C3C
00018468 0868 0000 001A             		bchg	#0,$1A(a0)
0001846E                            
0001846E                            loc_17C3C:
0001846E 3169 0008 003A             		move.w	8(a1),$3A(a0)
00018474 3029 000C                  		move.w	$C(a1),d0
00018478 D068 0032                  		add.w	$32(a0),d0
0001847C 3140 0038                  		move.w	d0,$38(a0)
00018480 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018486 4A29 0022                  		tst.b	$22(a1)
0001848A 6A00                       		bpl.s	locret_17C66
0001848C 10BC 003F                  		move.b	#$3F,0(a0)
00018490 117C 0000 0024             		move.b	#0,$24(a0)
00018496                            
00018496                            locret_17C66:
00018496 4E75                       		rts	
00018498                            ; End of function sub_17C2A
00018498                            
00018498                            ; ===========================================================================
00018498                            
00018498                            loc_17C68:				; XREF: Obj48_Index
00018498 2268 0034                  		movea.l	$34(a0),a1
0001849C 4A29 0022                  		tst.b	$22(a1)
000184A0 6A00                       		bpl.s	Obj48_Display3
000184A2 10BC 003F                  		move.b	#$3F,0(a0)
000184A6 117C 0000 0024             		move.b	#0,$24(a0)
000184AC                            
000184AC                            Obj48_Display3:
000184AC 4EF9 0000 DCDE             		jmp	DisplaySprite
000184B2                            ; ===========================================================================
000184B2                            
000184B2                            Obj48_ChkVanish:			; XREF: Obj48_Index
000184B2 7000                       		moveq	#0,d0
000184B4 4A28 001A                  		tst.b	$1A(a0)
000184B8 6600                       		bne.s	Obj48_Vanish
000184BA 5200                       		addq.b	#1,d0
000184BC                            
000184BC                            Obj48_Vanish:
000184BC 1140 001A                  		move.b	d0,$1A(a0)
000184C0 2268 0034                  		movea.l	$34(a0),a1
000184C4 4A29 0022                  		tst.b	$22(a1)
000184C8 6A00                       		bpl.s	Obj48_Display4
000184CA 117C 0000 0020             		move.b	#0,$20(a0)
000184D0 6100 FB94                  		bsr.w	BossDefeated
000184D4 5328 003C                  		subq.b	#1,$3C(a0)
000184D8 6A00                       		bpl.s	Obj48_Display4
000184DA 10BC 003F                  		move.b	#$3F,(a0)
000184DE 117C 0000 0024             		move.b	#0,$24(a0)
000184E4                            
000184E4                            Obj48_Display4:
000184E4 4EF9 0000 DCDE             		jmp	DisplaySprite
000184EA                            ; ===========================================================================
000184EA                            Ani_Eggman:
000184EA                            	include "_anim\Eggman.asm"
000184EA                            ; ---------------------------------------------------------------------------
000184EA                            ; Animation script - Eggman (bosses)
000184EA                            ; ---------------------------------------------------------------------------
000184EA 0000                       		dc.w byte_17CD4-Ani_Eggman
000184EC 0000                       		dc.w byte_17CD8-Ani_Eggman
000184EE 0000                       		dc.w byte_17CDC-Ani_Eggman
000184F0 0000                       		dc.w byte_17CE0-Ani_Eggman
000184F2 0000                       		dc.w byte_17CE4-Ani_Eggman
000184F4 0000                       		dc.w byte_17CE8-Ani_Eggman
000184F6 0000                       		dc.w byte_17CEC-Ani_Eggman
000184F8 0000                       		dc.w byte_17CF0-Ani_Eggman
000184FA 0000                       		dc.w byte_17CF4-Ani_Eggman
000184FC 0000                       		dc.w byte_17CF8-Ani_Eggman
000184FE 0000                       		dc.w byte_17CFC-Ani_Eggman
00018500 0000                       		dc.w byte_17D00-Ani_Eggman
00018502 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00018506 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
0001850A 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
0001850E 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00018512 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00018516 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
0001851A 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
0001851E 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018522 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00018526 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
0001852A 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
0001852E 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
0001853A                            		even
0001853A                            		even
0001853A                            
0001853A                            ; ---------------------------------------------------------------------------
0001853A                            ; Sprite mappings - Eggman (boss levels)
0001853A                            ; ---------------------------------------------------------------------------
0001853A                            Map_Eggman:
0001853A                            	include "_maps\Eggman.asm"
0001853A                            Map_dc7e:
0001853A 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
0001853C 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
0001853E 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00018540 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
00018542 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
00018544 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
00018546 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
00018548 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
0001854A 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
0001854C 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
0001854E 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00018550 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
00018552 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
00018554 06                         Map_dc7e_1A: 	dc.b $6
00018555 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
0001855A EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
0001855F FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
00018564 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00018569 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
0001856E 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00018573 02                         Map_dc7e_39: 	dc.b $2
00018574 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018579 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
0001857E 02                         Map_dc7e_44: 	dc.b $2
0001857F E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018584 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018589 03                         Map_dc7e_4F: 	dc.b $3
0001858A E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
0001858F EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
00018594 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
00018599 03                         Map_dc7e_5F: 	dc.b $3
0001859A E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
0001859F EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
000185A4 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
000185A9 03                         Map_dc7e_6F: 	dc.b $3
000185AA E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000185AF EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000185B4 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000185B9 03                         Map_dc7e_7F: 	dc.b $3
000185BA E404 0064 04               	dc.b $E4, $4, $0, $64, $4
000185BF E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000185C4 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000185C9 04                         Map_dc7e_8F: 	dc.b $4
000185CA E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
000185CF E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000185D4 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000185D9 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000185DE 01                         Map_dc7e_A4: 	dc.b $1
000185DF 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
000185E4 01                         Map_dc7e_AA: 	dc.b $1
000185E5 0405 0031 22               	dc.b $4, $5, $0, $31, $22
000185EA 00                         Map_dc7e_B0: 	dc.b $0
000185EB 02                         Map_dc7e_B1: 	dc.b $2
000185EC 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
000185F1 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
000185F6 02                         Map_dc7e_BC: 	dc.b $2
000185F7 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
000185FC 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
00018602 00                         	even
00018602 00                         	even
00018602                            
00018602                            ; ---------------------------------------------------------------------------
00018602                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018602                            ; ---------------------------------------------------------------------------
00018602                            Map_BossItems:
00018602                            	include "_maps\Boss items.asm"
00018602                            ; ---------------------------------------------------------------------------
00018602                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018602                            ; ---------------------------------------------------------------------------
00018602 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00018606 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
0001860A 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
0001860E 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00018612 01                         byte_17DE4:	dc.b 1
00018613 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018618 02                         byte_17DEA:	dc.b 2
00018619 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
0001861E F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018623 00                         		dc.b 0
00018624 01                         byte_17DF6:	dc.b 1
00018625 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
0001862A 01                         byte_17DFC:	dc.b 1
0001862B 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018630 01                         byte_17E02:	dc.b 1
00018631 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00018636 04                         byte_17E08:	dc.b 4
00018637 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
0001863C F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018641 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00018646 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001864B 00                         		dc.b 0
0001864C 02                         byte_17E1E:	dc.b 2
0001864D 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00018652 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00018657 00                         		dc.b 0
00018658 02                         byte_17E2A:	dc.b 2
00018659 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
0001865E 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00018664 00                         		even
00018664 00                         		even
00018664                            
00018664                            ; ===========================================================================
00018664                            ; ---------------------------------------------------------------------------
00018664                            ; Object 77 - Eggman (LZ)
00018664                            ; ---------------------------------------------------------------------------
00018664                            
00018664                            Obj77:					; XREF: Obj_Index
00018664 7000                       		moveq	#0,d0
00018666 1028 0024                  		move.b	$24(a0),d0
0001866A 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001866E 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00018672                            ; ===========================================================================
00018672 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00018674 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00018676 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00018678 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001867A                            
0001867A 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001867C 0401                       		dc.b 4,	1
0001867E 0607                       		dc.b 6,	7
00018680                            ; ===========================================================================
00018680                            
00018680                            Obj77_Main:				; XREF: Obj77_Index
00018680 317C 1E10 0008             		move.w	#$1E10,8(a0)
00018686 317C 05C0 000C             		move.w	#$5C0,$C(a0)
0001868C 3168 0008 0030             		move.w	8(a0),$30(a0)
00018692 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018698 117C 000F 0020             		move.b	#$F,$20(a0)
0001869E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000186A4 117C 0004 0018             		move.b	#4,$18(a0)
000186AA 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
000186AE 2248                       		movea.l	a0,a1
000186B0 7202                       		moveq	#2,d1
000186B2 6000                       		bra.s	Obj77_LoadBoss
000186B4                            ; ===========================================================================
000186B4                            
000186B4                            Obj77_Loop:
000186B4 4EB9 0000 E17A             		jsr	SingleObjLoad2
000186BA 6600                       		bne.s	Obj77_ShipMain
000186BC 12BC 0077                  		move.b	#$77,0(a1)
000186C0 3368 0008 0008             		move.w	8(a0),8(a1)
000186C6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000186CC                            
000186CC                            Obj77_LoadBoss:				; XREF: Obj77_Main
000186CC 08A8 0000 0022             		bclr	#0,$22(a0)
000186D2 4229 0025                  		clr.b	$25(a1)
000186D6 135A 0024                  		move.b	(a2)+,$24(a1)
000186DA 135A 001C                  		move.b	(a2)+,$1C(a1)
000186DE 1368 0018 0018             		move.b	$18(a0),$18(a1)
000186E4 237C 0001 853A 0004        		move.l	#Map_Eggman,4(a1)
000186EC 337C 0400 0002             		move.w	#$400,2(a1)
000186F2 137C 0004 0001             		move.b	#4,1(a1)
000186F8 137C 0020 0019             		move.b	#$20,$19(a1)
000186FE 2348 0034                  		move.l	a0,$34(a1)
00018702 51C9 FFB0                  		dbf	d1,Obj77_Loop
00018706                            
00018706                            Obj77_ShipMain:
00018706 43F8 D000                  		lea	($FFFFD000).w,a1
0001870A 7000                       		moveq	#0,d0
0001870C 1028 0025                  		move.b	$25(a0),d0
00018710 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
00018714 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
00018718 43F9 0001 84EA             		lea	(Ani_Eggman).l,a1
0001871E 4EB9 0000 AD9E             		jsr	AnimateSprite
00018724 7003                       		moveq	#3,d0
00018726 C028 0022                  		and.b	$22(a0),d0
0001872A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018730 8128 0001                  		or.b	d0,1(a0)
00018734 4EF9 0000 DCDE             		jmp	DisplaySprite
0001873A                            ; ===========================================================================
0001873A 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001873E 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00018742 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
00018746 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001874A                            ; ===========================================================================
0001874A                            
0001874A                            loc_17F1E:				; XREF: Obj77_ShipIndex
0001874A 3029 0008                  		move.w	8(a1),d0
0001874E 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00018752 6500                       		bcs.s	loc_17F38
00018754 317C FE80 0012             		move.w	#-$180,$12(a0)
0001875A 317C 0060 0010             		move.w	#$60,$10(a0)
00018760 5428 0025                  		addq.b	#2,$25(a0)
00018764                            
00018764                            loc_17F38:
00018764 6100 F942                  		bsr.w	BossMove
00018768 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001876E 3168 0030 0008             		move.w	$30(a0),8(a0)
00018774                            
00018774                            loc_17F48:
00018774 4A28 003D                  		tst.b	$3D(a0)
00018778 6600                       		bne.s	loc_17F8E
0001877A 4A28 0022                  		tst.b	$22(a0)
0001877E 6B00                       		bmi.s	loc_17F92
00018780 4A28 0020                  		tst.b	$20(a0)
00018784 6600                       		bne.s	locret_17F8C
00018786 4A28 003E                  		tst.b	$3E(a0)
0001878A 6600                       		bne.s	loc_17F70
0001878C 117C 0020 003E             		move.b	#$20,$3E(a0)
00018792 303C 00AC                  		move.w	#$AC,d0
00018796 4EB9 0000 15C0             		jsr	(PlaySound_Special).l
0001879C                            
0001879C                            loc_17F70:
0001879C 43F8 FB22                  		lea	($FFFFFB22).w,a1
000187A0 7000                       		moveq	#0,d0
000187A2 4A51                       		tst.w	(a1)
000187A4 6600                       		bne.s	loc_17F7E
000187A6 303C 0EEE                  		move.w	#$EEE,d0
000187AA                            
000187AA                            loc_17F7E:
000187AA 3280                       		move.w	d0,(a1)
000187AC 5328 003E                  		subq.b	#1,$3E(a0)
000187B0 6600                       		bne.s	locret_17F8C
000187B2 117C 000F 0020             		move.b	#$F,$20(a0)
000187B8                            
000187B8                            locret_17F8C:
000187B8 4E75                       		rts	
000187BA                            ; ===========================================================================
000187BA                            
000187BA                            loc_17F8E:				; XREF: loc_17F48
000187BA 6000 F8AA                  		bra.w	BossDefeated
000187BE                            ; ===========================================================================
000187BE                            
000187BE                            loc_17F92:				; XREF: loc_17F48
000187BE 7064                       		moveq	#100,d0
000187C0 6100 0000                  		bsr.w	AddPoints
000187C4 117C 00FF 003D             		move.b	#-1,$3D(a0)
000187CA 4E75                       		rts	
000187CC                            ; ===========================================================================
000187CC                            
000187CC                            loc_17FA0:				; XREF: Obj77_ShipIndex
000187CC 70FE                       		moveq	#-2,d0
000187CE 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
000187D4 6500                       		bcs.s	loc_17FB6
000187D6 317C 1E48 0030             		move.w	#$1E48,$30(a0)
000187DC 4268 0010                  		clr.w	$10(a0)
000187E0 5240                       		addq.w	#1,d0
000187E2                            
000187E2                            loc_17FB6:
000187E2 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
000187E8 6E00                       		bgt.s	loc_17FCA
000187EA 317C 0500 0038             		move.w	#$500,$38(a0)
000187F0 4268 0012                  		clr.w	$12(a0)
000187F4 5240                       		addq.w	#1,d0
000187F6                            
000187F6                            loc_17FCA:
000187F6 6600                       		bne.s	loc_17FDC
000187F8 317C 0140 0010             		move.w	#$140,$10(a0)
000187FE 317C FE00 0012             		move.w	#-$200,$12(a0)
00018804 5428 0025                  		addq.b	#2,$25(a0)
00018808                            
00018808                            loc_17FDC:
00018808 6000 FF5A                  		bra.w	loc_17F38
0001880C                            ; ===========================================================================
0001880C                            
0001880C                            loc_17FE0:				; XREF: Obj77_ShipIndex
0001880C 70FE                       		moveq	#-2,d0
0001880E 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
00018814 6500                       		bcs.s	loc_17FF6
00018816 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001881C 4268 0010                  		clr.w	$10(a0)
00018820 5240                       		addq.w	#1,d0
00018822                            
00018822                            loc_17FF6:
00018822 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
00018828 6E00                       		bgt.s	loc_1800A
0001882A 317C 04C0 0038             		move.w	#$4C0,$38(a0)
00018830 4268 0012                  		clr.w	$12(a0)
00018834 5240                       		addq.w	#1,d0
00018836                            
00018836                            loc_1800A:
00018836 6600                       		bne.s	loc_1801A
00018838 317C FE80 0012             		move.w	#-$180,$12(a0)
0001883E 5428 0025                  		addq.b	#2,$25(a0)
00018842 4228 003F                  		clr.b	$3F(a0)
00018846                            
00018846                            loc_1801A:
00018846 6000 FF1C                  		bra.w	loc_17F38
0001884A                            ; ===========================================================================
0001884A                            
0001884A                            loc_1801E:				; XREF: Obj77_ShipIndex
0001884A 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
00018850 6E00                       		bgt.s	loc_1804E
00018852 317C 0100 0038             		move.w	#$100,$38(a0)
00018858 317C 0140 0010             		move.w	#$140,$10(a0)
0001885E 317C FF80 0012             		move.w	#-$80,$12(a0)
00018864 4A28 003D                  		tst.b	$3D(a0)
00018868 6700                       		beq.s	loc_18046
0001886A E1E8 0010                  		asl	$10(a0)
0001886E E1E8 0012                  		asl	$12(a0)
00018872                            
00018872                            loc_18046:
00018872 5428 0025                  		addq.b	#2,$25(a0)
00018876 6000 FEEC                  		bra.w	loc_17F38
0001887A                            ; ===========================================================================
0001887A                            
0001887A                            loc_1804E:
0001887A 08E8 0000 0022             		bset	#0,$22(a0)
00018880 5428 003F                  		addq.b	#2,$3F(a0)
00018884 1028 003F                  		move.b	$3F(a0),d0
00018888 4EB9 0000 2C64             		jsr	(CalcSine).l
0001888E 4A41                       		tst.w	d1
00018890 6A00                       		bpl.s	loc_1806C
00018892 08A8 0000 0022             		bclr	#0,$22(a0)
00018898                            
00018898                            loc_1806C:
00018898 E840                       		asr.w	#4,d0
0001889A 4840                       		swap	d0
0001889C 4240                       		clr.w	d0
0001889E D0A8 0030                  		add.l	$30(a0),d0
000188A2 4840                       		swap	d0
000188A4 3140 0008                  		move.w	d0,8(a0)
000188A8 3028 0012                  		move.w	$12(a0),d0
000188AC 3238 D00C                  		move.w	($FFFFD00C).w,d1
000188B0 9268 000C                  		sub.w	$C(a0),d1
000188B4 6500                       		bcs.s	loc_180A2
000188B6 0441 0048                  		subi.w	#$48,d1
000188BA 6500                       		bcs.s	loc_180A2
000188BC E240                       		asr.w	#1,d0
000188BE 0441 0028                  		subi.w	#$28,d1
000188C2 6500                       		bcs.s	loc_180A2
000188C4 E240                       		asr.w	#1,d0
000188C6 0441 0028                  		subi.w	#$28,d1
000188CA 6500                       		bcs.s	loc_180A2
000188CC 7000                       		moveq	#0,d0
000188CE                            
000188CE                            loc_180A2:
000188CE 48C0                       		ext.l	d0
000188D0 E180                       		asl.l	#8,d0
000188D2 4A28 003D                  		tst.b	$3D(a0)
000188D6 6700                       		beq.s	loc_180AE
000188D8 D080                       		add.l	d0,d0
000188DA                            
000188DA                            loc_180AE:
000188DA D1A8 0038                  		add.l	d0,$38(a0)
000188DE 3168 0038 000C             		move.w	$38(a0),$C(a0)
000188E4 6000 FE8E                  		bra.w	loc_17F48
000188E8                            ; ===========================================================================
000188E8                            
000188E8                            loc_180BC:				; XREF: Obj77_ShipIndex
000188E8 70FE                       		moveq	#-2,d0
000188EA 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
000188F0 6500                       		bcs.s	loc_180D2
000188F2 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
000188F8 4268 0010                  		clr.w	$10(a0)
000188FC 5240                       		addq.w	#1,d0
000188FE                            
000188FE                            loc_180D2:
000188FE 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
00018904 6E00                       		bgt.s	loc_180E6
00018906 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001890C 4268 0012                  		clr.w	$12(a0)
00018910 5240                       		addq.w	#1,d0
00018912                            
00018912                            loc_180E6:
00018912 6600                       		bne.s	loc_180F2
00018914 5428 0025                  		addq.b	#2,$25(a0)
00018918 08A8 0000 0022             		bclr	#0,$22(a0)
0001891E                            
0001891E                            loc_180F2:
0001891E 6000 FE44                  		bra.w	loc_17F38
00018922                            ; ===========================================================================
00018922                            
00018922                            loc_180F6:				; XREF: Obj77_ShipIndex
00018922 4A28 003D                  		tst.b	$3D(a0)
00018926 6600                       		bne.s	loc_18112
00018928 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
0001892E 6D00                       		blt.s	loc_18126
00018930 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
00018936 6E00                       		bgt.s	loc_18126
00018938 117C 0032 003C             		move.b	#$32,$3C(a0)
0001893E                            
0001893E                            loc_18112:
0001893E 303C 0082                  		move.w	#$82,d0
00018942 4EB9 0000 15BA             		jsr	(PlaySound).l	; play LZ music
00018948 08E8 0000 0022             		bset	#0,$22(a0)
0001894E 5428 0025                  		addq.b	#2,$25(a0)
00018952                            
00018952                            loc_18126:
00018952 6000 FE10                  		bra.w	loc_17F38
00018956                            ; ===========================================================================
00018956                            
00018956                            loc_1812A:				; XREF: Obj77_ShipIndex
00018956 4A28 003D                  		tst.b	$3D(a0)
0001895A 6600                       		bne.s	loc_18136
0001895C 5328 003C                  		subq.b	#1,$3C(a0)
00018960 6600                       		bne.s	loc_1814E
00018962                            
00018962                            loc_18136:
00018962 4228 003C                  		clr.b	$3C(a0)
00018966 317C 0400 0010             		move.w	#$400,$10(a0)
0001896C 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018972 4228 003D                  		clr.b	$3D(a0)
00018976 5428 0025                  		addq.b	#2,$25(a0)
0001897A                            
0001897A                            loc_1814E:
0001897A 6000 FDE8                  		bra.w	loc_17F38
0001897E                            ; ===========================================================================
0001897E                            
0001897E                            loc_18152:				; XREF: Obj77_ShipIndex
0001897E 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
00018984 6400                       		bcc.s	loc_18160
00018986 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001898A 6000                       		bra.s	loc_18166
0001898C                            ; ===========================================================================
0001898C                            
0001898C                            loc_18160:
0001898C 4A28 0001                  		tst.b	1(a0)
00018990 6A00                       		bpl.s	Obj77_ShipDel
00018992                            
00018992                            loc_18166:
00018992 6000 FDD0                  		bra.w	loc_17F38
00018996                            ; ===========================================================================
00018996                            
00018996                            Obj77_ShipDel:
00018996 4EF9 0000 DD1A             		jmp	DeleteObject
0001899C                            ; ===========================================================================
0001899C                            
0001899C                            Obj77_FaceMain:				; XREF: Obj77_Index
0001899C 2268 0034                  		movea.l	$34(a0),a1
000189A0 1011                       		move.b	(a1),d0
000189A2 B010                       		cmp.b	(a0),d0
000189A4 6600                       		bne.s	Obj77_FaceDel
000189A6 7000                       		moveq	#0,d0
000189A8 1029 0025                  		move.b	$25(a1),d0
000189AC 7201                       		moveq	#1,d1
000189AE 4A28 003D                  		tst.b	$3D(a0)
000189B2 6700                       		beq.s	loc_1818C
000189B4 720A                       		moveq	#$A,d1
000189B6 6000                       		bra.s	loc_181A0
000189B8                            ; ===========================================================================
000189B8                            
000189B8                            loc_1818C:
000189B8 4A29 0020                  		tst.b	$20(a1)
000189BC 6600                       		bne.s	loc_18196
000189BE 7205                       		moveq	#5,d1
000189C0 6000                       		bra.s	loc_181A0
000189C2                            ; ===========================================================================
000189C2                            
000189C2                            loc_18196:
000189C2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000189C8 6500                       		bcs.s	loc_181A0
000189CA 7204                       		moveq	#4,d1
000189CC                            
000189CC                            loc_181A0:
000189CC 1141 001C                  		move.b	d1,$1C(a0)
000189D0 0C00 000E                  		cmpi.b	#$E,d0
000189D4 6600                       		bne.s	loc_181B6
000189D6 117C 0006 001C             		move.b	#6,$1C(a0)
000189DC 4A28 0001                  		tst.b	1(a0)
000189E0 6A00                       		bpl.s	Obj77_FaceDel
000189E2                            
000189E2                            loc_181B6:
000189E2 6000                       		bra.s	Obj77_Display
000189E4                            ; ===========================================================================
000189E4                            
000189E4                            Obj77_FaceDel:
000189E4 4EF9 0000 DD1A             		jmp	DeleteObject
000189EA                            ; ===========================================================================
000189EA                            
000189EA                            Obj77_FlameMain:			; XREF: Obj77_Index
000189EA 117C 0007 001C             		move.b	#7,$1C(a0)
000189F0 2268 0034                  		movea.l	$34(a0),a1
000189F4 1011                       		move.b	(a1),d0
000189F6 B010                       		cmp.b	(a0),d0
000189F8 6600                       		bne.s	Obj77_FlameDel
000189FA 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
00018A00 6600                       		bne.s	loc_181F0
00018A02 117C 000B 001C             		move.b	#$B,$1C(a0)
00018A08 4A28 0001                  		tst.b	1(a0)
00018A0C 6A00                       		bpl.s	Obj77_FlameDel
00018A0E 6000                       		bra.s	loc_181F0
00018A10                            ; ===========================================================================
00018A10 4A69 0010                  		tst.w	$10(a1)
00018A14 6700                       		beq.s	loc_181F0
00018A16 117C 0008 001C             		move.b	#8,$1C(a0)
00018A1C                            
00018A1C                            loc_181F0:
00018A1C 6000                       		bra.s	Obj77_Display
00018A1E                            ; ===========================================================================
00018A1E                            
00018A1E                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
00018A1E 4EF9 0000 DD1A             		jmp	DeleteObject
00018A24                            ; ===========================================================================
00018A24                            
00018A24                            Obj77_Display:
00018A24 43F9 0001 84EA             		lea	(Ani_Eggman).l,a1
00018A2A 4EB9 0000 AD9E             		jsr	AnimateSprite
00018A30 2268 0034                  		movea.l	$34(a0),a1
00018A34 3169 0008 0008             		move.w	8(a1),8(a0)
00018A3A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018A40 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018A46 7003                       		moveq	#3,d0
00018A48 C028 0022                  		and.b	$22(a0),d0
00018A4C 0228 00FC 0001             		andi.b	#-4,1(a0)
00018A52 8128 0001                  		or.b	d0,1(a0)
00018A56 4EF9 0000 DCDE             		jmp	DisplaySprite
00018A5C                            ; ===========================================================================
00018A5C                            ; ---------------------------------------------------------------------------
00018A5C                            ; Object 73 - Eggman (MZ)
00018A5C                            ; ---------------------------------------------------------------------------
00018A5C                            
00018A5C                            Obj73:					; XREF: Obj_Index
00018A5C 7000                       		moveq	#0,d0
00018A5E 1028 0024                  		move.b	$24(a0),d0
00018A62 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018A66 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018A6A                            ; ===========================================================================
00018A6A 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018A6C 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018A6E 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018A70 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018A72 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018A74                            
00018A74 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018A77 0401 04                    		dc.b 4,	1, 4
00018A7A 0607 04                    		dc.b 6,	7, 4
00018A7D 0800 03                    		dc.b 8,	0, 3
00018A80                            ; ===========================================================================
00018A80                            
00018A80                            Obj73_Main:				; XREF: Obj73_Index
00018A80 3168 0008 0030             		move.w	8(a0),$30(a0)
00018A86 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018A8C 117C 000F 0020             		move.b	#$F,$20(a0)
00018A92 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018A98 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018A9C 2248                       		movea.l	a0,a1
00018A9E 7203                       		moveq	#3,d1
00018AA0 6000                       		bra.s	Obj73_LoadBoss
00018AA2                            ; ===========================================================================
00018AA2                            
00018AA2                            Obj73_Loop:
00018AA2 4EB9 0000 E17A             		jsr	SingleObjLoad2
00018AA8 6600                       		bne.s	Obj73_ShipMain
00018AAA 12BC 0073                  		move.b	#$73,0(a1)
00018AAE 3368 0008 0008             		move.w	8(a0),8(a1)
00018AB4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018ABA                            
00018ABA                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018ABA 08A8 0000 0022             		bclr	#0,$22(a0)
00018AC0 4229 0025                  		clr.b	$25(a1)
00018AC4 135A 0024                  		move.b	(a2)+,$24(a1)
00018AC8 135A 001C                  		move.b	(a2)+,$1C(a1)
00018ACC 135A 0018                  		move.b	(a2)+,$18(a1)
00018AD0 237C 0001 853A 0004        		move.l	#Map_Eggman,4(a1)
00018AD8 337C 0400 0002             		move.w	#$400,2(a1)
00018ADE 137C 0004 0001             		move.b	#4,1(a1)
00018AE4 137C 0020 0019             		move.b	#$20,$19(a1)
00018AEA 2348 0034                  		move.l	a0,$34(a1)
00018AEE 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018AF2                            
00018AF2                            Obj73_ShipMain:
00018AF2 7000                       		moveq	#0,d0
00018AF4 1028 0025                  		move.b	$25(a0),d0
00018AF8 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018AFC 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018B00 43F9 0001 84EA             		lea	(Ani_Eggman).l,a1
00018B06 4EB9 0000 AD9E             		jsr	AnimateSprite
00018B0C 7003                       		moveq	#3,d0
00018B0E C028 0022                  		and.b	$22(a0),d0
00018B12 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018B18 8128 0001                  		or.b	d0,1(a0)
00018B1C 4EF9 0000 DCDE             		jmp	DisplaySprite
00018B22                            ; ===========================================================================
00018B22 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018B24 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018B26 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018B28 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018B2A 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018B2C                            ; ===========================================================================
00018B2C                            
00018B2C                            loc_18302:				; XREF: Obj73_ShipIndex
00018B2C 1028 003F                  		move.b	$3F(a0),d0
00018B30 5428 003F                  		addq.b	#2,$3F(a0)
00018B34 4EB9 0000 2C64             		jsr	(CalcSine).l
00018B3A E440                       		asr.w	#2,d0
00018B3C 3140 0012                  		move.w	d0,$12(a0)
00018B40 317C FF00 0010             		move.w	#-$100,$10(a0)
00018B46 6100 F560                  		bsr.w	BossMove
00018B4A 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018B50 6600                       		bne.s	loc_18334
00018B52 5428 0025                  		addq.b	#2,$25(a0)
00018B56 4228 0028                  		clr.b	$28(a0)
00018B5A 42A8 0010                  		clr.l	$10(a0)
00018B5E                            
00018B5E                            loc_18334:
00018B5E 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00018B64 1140 0034                  		move.b	d0,$34(a0)
00018B68                            
00018B68                            loc_1833E:
00018B68 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018B6E 3168 0030 0008             		move.w	$30(a0),8(a0)
00018B74 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018B7A 6400                       		bcc.s	locret_18390
00018B7C 4A28 0022                  		tst.b	$22(a0)
00018B80 6B00                       		bmi.s	loc_18392
00018B82 4A28 0020                  		tst.b	$20(a0)
00018B86 6600                       		bne.s	locret_18390
00018B88 4A28 003E                  		tst.b	$3E(a0)
00018B8C 6600                       		bne.s	loc_18374
00018B8E 117C 0028 003E             		move.b	#$28,$3E(a0)
00018B94 303C 00AC                  		move.w	#$AC,d0
00018B98 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018B9E                            
00018B9E                            loc_18374:
00018B9E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018BA2 7000                       		moveq	#0,d0
00018BA4 4A51                       		tst.w	(a1)
00018BA6 6600                       		bne.s	loc_18382
00018BA8 303C 0EEE                  		move.w	#$EEE,d0
00018BAC                            
00018BAC                            loc_18382:
00018BAC 3280                       		move.w	d0,(a1)
00018BAE 5328 003E                  		subq.b	#1,$3E(a0)
00018BB2 6600                       		bne.s	locret_18390
00018BB4 117C 000F 0020             		move.b	#$F,$20(a0)
00018BBA                            
00018BBA                            locret_18390:
00018BBA 4E75                       		rts	
00018BBC                            ; ===========================================================================
00018BBC                            
00018BBC                            loc_18392:				; XREF: loc_1833E
00018BBC 7064                       		moveq	#100,d0
00018BBE 6100 0000                  		bsr.w	AddPoints
00018BC2 117C 0004 0025             		move.b	#4,$25(a0)
00018BC8 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018BCE 4268 0010                  		clr.w	$10(a0)
00018BD2 4E75                       		rts	
00018BD4                            ; ===========================================================================
00018BD4                            
00018BD4                            loc_183AA:				; XREF: Obj73_ShipIndex
00018BD4 7000                       		moveq	#0,d0
00018BD6 1028 0028                  		move.b	$28(a0),d0
00018BDA 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018BDE 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018BE2 0228 0006 0028             		andi.b	#6,$28(a0)
00018BE8 6000 FF7E                  		bra.w	loc_1833E
00018BEC                            ; ===========================================================================
00018BEC 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018BEE 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018BF0 0000                       		dc.w loc_183CA-off_183C2
00018BF2 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018BF4                            ; ===========================================================================
00018BF4                            
00018BF4                            loc_183CA:				; XREF: off_183C2
00018BF4 4A68 0010                  		tst.w	$10(a0)
00018BF8 6600                       		bne.s	loc_183FE
00018BFA 7040                       		moveq	#$40,d0
00018BFC 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018C02 6700                       		beq.s	loc_183E6
00018C04 6500                       		bcs.s	loc_183DE
00018C06 4440                       		neg.w	d0
00018C08                            
00018C08                            loc_183DE:
00018C08 3140 0012                  		move.w	d0,$12(a0)
00018C0C 6000 F49A                  		bra.w	BossMove
00018C10                            ; ===========================================================================
00018C10                            
00018C10                            loc_183E6:
00018C10 317C 0200 0010             		move.w	#$200,$10(a0)
00018C16 317C 0100 0012             		move.w	#$100,$12(a0)
00018C1C 0828 0000 0022             		btst	#0,$22(a0)
00018C22 6600                       		bne.s	loc_183FE
00018C24 4468 0010                  		neg.w	$10(a0)
00018C28                            
00018C28                            loc_183FE:
00018C28 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018C2E 6400                       		bcc.s	Obj73_MakeLava
00018C30 6100 F476                  		bsr.w	BossMove
00018C34 5968 0012                  		subq.w	#4,$12(a0)
00018C38                            
00018C38                            Obj73_MakeLava:
00018C38 5328 0034                  		subq.b	#1,$34(a0)
00018C3C 6400                       		bcc.s	loc_1845C
00018C3E 4EB9 0000 E164             		jsr	SingleObjLoad
00018C44 6600                       		bne.s	loc_1844A
00018C46 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018C4A 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018C50 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00018C56 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018C5C 80FC 0050                  		divu.w	#$50,d0
00018C60 4840                       		swap	d0
00018C62 0640 1878                  		addi.w	#$1878,d0
00018C66 3340 0008                  		move.w	d0,8(a1)
00018C6A EE09                       		lsr.b	#7,d1
00018C6C 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018C72                            
00018C72                            loc_1844A:
00018C72 4EB9 0000 2C3E             		jsr	(RandomNumber).l
00018C78 0200 001F                  		andi.b	#$1F,d0
00018C7C 0600 0040                  		addi.b	#$40,d0
00018C80 1140 0034                  		move.b	d0,$34(a0)
00018C84                            
00018C84                            loc_1845C:
00018C84 0828 0000 0022             		btst	#0,$22(a0)
00018C8A 6700                       		beq.s	loc_18474
00018C8C 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018C92 6D00                       		blt.s	locret_1849C
00018C94 317C 1910 0030             		move.w	#$1910,$30(a0)
00018C9A 6000                       		bra.s	loc_18482
00018C9C                            ; ===========================================================================
00018C9C                            
00018C9C                            loc_18474:
00018C9C 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018CA2 6E00                       		bgt.s	locret_1849C
00018CA4 317C 1830 0030             		move.w	#$1830,$30(a0)
00018CAA                            
00018CAA                            loc_18482:
00018CAA 4268 0010                  		clr.w	$10(a0)
00018CAE 317C FE80 0012             		move.w	#-$180,$12(a0)
00018CB4 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018CBA 6400                       		bcc.s	loc_18498
00018CBC 4468 0012                  		neg.w	$12(a0)
00018CC0                            
00018CC0                            loc_18498:
00018CC0 5428 0028                  		addq.b	#2,$28(a0)
00018CC4                            
00018CC4                            locret_1849C:
00018CC4 4E75                       		rts	
00018CC6                            ; ===========================================================================
00018CC6                            
00018CC6                            Obj73_MakeLava2:			; XREF: off_183C2
00018CC6 6100 F3E0                  		bsr.w	BossMove
00018CCA 3028 0038                  		move.w	$38(a0),d0
00018CCE 0440 022C                  		subi.w	#$22C,d0
00018CD2 6E00                       		bgt.s	locret_184F4
00018CD4 303C 022C                  		move.w	#$22C,d0
00018CD8 4A68 0012                  		tst.w	$12(a0)
00018CDC 6700                       		beq.s	loc_184EA
00018CDE 4268 0012                  		clr.w	$12(a0)
00018CE2 317C 0050 003C             		move.w	#$50,$3C(a0)
00018CE8 0868 0000 0022             		bchg	#0,$22(a0)
00018CEE 4EB9 0000 E164             		jsr	SingleObjLoad
00018CF4 6600                       		bne.s	loc_184EA
00018CF6 3368 0030 0008             		move.w	$30(a0),8(a1)
00018CFC 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018D02 0669 0018 000C             		addi.w	#$18,$C(a1)
00018D08 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018D0C 137C 0001 0028             		move.b	#1,$28(a1)
00018D12                            
00018D12                            loc_184EA:
00018D12 5368 003C                  		subq.w	#1,$3C(a0)
00018D16 6600                       		bne.s	locret_184F4
00018D18 5428 0028                  		addq.b	#2,$28(a0)
00018D1C                            
00018D1C                            locret_184F4:
00018D1C 4E75                       		rts	
00018D1E                            ; ===========================================================================
00018D1E                            
00018D1E                            loc_184F6:				; XREF: Obj73_ShipIndex
00018D1E 5368 003C                  		subq.w	#1,$3C(a0)
00018D22 6B00                       		bmi.s	loc_18500
00018D24 6000 F340                  		bra.w	BossDefeated
00018D28                            ; ===========================================================================
00018D28                            
00018D28                            loc_18500:
00018D28 08E8 0000 0022             		bset	#0,$22(a0)
00018D2E 08A8 0007 0022             		bclr	#7,$22(a0)
00018D34 4268 0010                  		clr.w	$10(a0)
00018D38 5428 0025                  		addq.b	#2,$25(a0)
00018D3C 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018D42 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018D46 6600                       		bne.s	locret_1852A
00018D48 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018D4E 4268 0012                  		clr.w	$12(a0)
00018D52                            
00018D52                            locret_1852A:
00018D52 4E75                       		rts	
00018D54                            ; ===========================================================================
00018D54                            
00018D54                            loc_1852C:				; XREF: Obj73_ShipIndex
00018D54 5268 003C                  		addq.w	#1,$3C(a0)
00018D58 6700                       		beq.s	loc_18544
00018D5A 6A00                       		bpl.s	loc_1854E
00018D5C 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018D62 6400                       		bcc.s	loc_18544
00018D64 0668 0018 0012             		addi.w	#$18,$12(a0)
00018D6A 6000                       		bra.s	loc_1857A
00018D6C                            ; ===========================================================================
00018D6C                            
00018D6C                            loc_18544:
00018D6C 4268 0012                  		clr.w	$12(a0)
00018D70 4268 003C                  		clr.w	$3C(a0)
00018D74 6000                       		bra.s	loc_1857A
00018D76                            ; ===========================================================================
00018D76                            
00018D76                            loc_1854E:
00018D76 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018D7C 6500                       		bcs.s	loc_18566
00018D7E 6700                       		beq.s	loc_1856C
00018D80 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018D86 6500                       		bcs.s	loc_1857A
00018D88 5428 0025                  		addq.b	#2,$25(a0)
00018D8C 6000                       		bra.s	loc_1857A
00018D8E                            ; ===========================================================================
00018D8E                            
00018D8E                            loc_18566:
00018D8E 5168 0012                  		subq.w	#8,$12(a0)
00018D92 6000                       		bra.s	loc_1857A
00018D94                            ; ===========================================================================
00018D94                            
00018D94                            loc_1856C:
00018D94 4268 0012                  		clr.w	$12(a0)
00018D98 303C 0083                  		move.w	#$83,d0
00018D9C 4EB9 0000 15BA             		jsr	(PlaySound).l	; play MZ music
00018DA2                            
00018DA2                            loc_1857A:
00018DA2 6100 F304                  		bsr.w	BossMove
00018DA6 6000 FDC0                  		bra.w	loc_1833E
00018DAA                            ; ===========================================================================
00018DAA                            
00018DAA                            loc_18582:				; XREF: Obj73_ShipIndex
00018DAA 317C 0500 0010             		move.w	#$500,$10(a0)
00018DB0 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018DB6 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018DBC 6400                       		bcc.s	loc_1859C
00018DBE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018DC2 6000                       		bra.s	loc_185A2
00018DC4                            ; ===========================================================================
00018DC4                            
00018DC4                            loc_1859C:
00018DC4 4A28 0001                  		tst.b	1(a0)
00018DC8 6A00                       		bpl.s	Obj73_ShipDel
00018DCA                            
00018DCA                            loc_185A2:
00018DCA 6100 F2DC                  		bsr.w	BossMove
00018DCE 6000 FD98                  		bra.w	loc_1833E
00018DD2                            ; ===========================================================================
00018DD2                            
00018DD2                            Obj73_ShipDel:
00018DD2 4EF9 0000 DD1A             		jmp	DeleteObject
00018DD8                            ; ===========================================================================
00018DD8                            
00018DD8                            Obj73_FaceMain:				; XREF: Obj73_Index
00018DD8 7000                       		moveq	#0,d0
00018DDA 7201                       		moveq	#1,d1
00018DDC 2268 0034                  		movea.l	$34(a0),a1
00018DE0 1029 0025                  		move.b	$25(a1),d0
00018DE4 5540                       		subq.w	#2,d0
00018DE6 6600                       		bne.s	loc_185D2
00018DE8 0829 0001 0028             		btst	#1,$28(a1)
00018DEE 6700                       		beq.s	loc_185DA
00018DF0 4A69 0012                  		tst.w	$12(a1)
00018DF4 6600                       		bne.s	loc_185DA
00018DF6 7204                       		moveq	#4,d1
00018DF8 6000                       		bra.s	loc_185EE
00018DFA                            ; ===========================================================================
00018DFA                            
00018DFA                            loc_185D2:
00018DFA 5500                       		subq.b	#2,d0
00018DFC 6B00                       		bmi.s	loc_185DA
00018DFE 720A                       		moveq	#$A,d1
00018E00 6000                       		bra.s	loc_185EE
00018E02                            ; ===========================================================================
00018E02                            
00018E02                            loc_185DA:
00018E02 4A29 0020                  		tst.b	$20(a1)
00018E06 6600                       		bne.s	loc_185E4
00018E08 7205                       		moveq	#5,d1
00018E0A 6000                       		bra.s	loc_185EE
00018E0C                            ; ===========================================================================
00018E0C                            
00018E0C                            loc_185E4:
00018E0C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018E12 6500                       		bcs.s	loc_185EE
00018E14 7204                       		moveq	#4,d1
00018E16                            
00018E16                            loc_185EE:
00018E16 1141 001C                  		move.b	d1,$1C(a0)
00018E1A 5900                       		subq.b	#4,d0
00018E1C 6600                       		bne.s	loc_18602
00018E1E 117C 0006 001C             		move.b	#6,$1C(a0)
00018E24 4A28 0001                  		tst.b	1(a0)
00018E28 6A00                       		bpl.s	Obj73_FaceDel
00018E2A                            
00018E2A                            loc_18602:
00018E2A 6000                       		bra.s	Obj73_Display
00018E2C                            ; ===========================================================================
00018E2C                            
00018E2C                            Obj73_FaceDel:
00018E2C 4EF9 0000 DD1A             		jmp	DeleteObject
00018E32                            ; ===========================================================================
00018E32                            
00018E32                            Obj73_FlameMain:			; XREF: Obj73_Index
00018E32 117C 0007 001C             		move.b	#7,$1C(a0)
00018E38 2268 0034                  		movea.l	$34(a0),a1
00018E3C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018E42 6D00                       		blt.s	loc_1862A
00018E44 117C 000B 001C             		move.b	#$B,$1C(a0)
00018E4A 4A28 0001                  		tst.b	1(a0)
00018E4E 6A00                       		bpl.s	Obj73_FlameDel
00018E50 6000                       		bra.s	loc_18636
00018E52                            ; ===========================================================================
00018E52                            
00018E52                            loc_1862A:
00018E52 4A69 0010                  		tst.w	$10(a1)
00018E56 6700                       		beq.s	loc_18636
00018E58 117C 0008 001C             		move.b	#8,$1C(a0)
00018E5E                            
00018E5E                            loc_18636:
00018E5E 6000                       		bra.s	Obj73_Display
00018E60                            ; ===========================================================================
00018E60                            
00018E60                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018E60 4EF9 0000 DD1A             		jmp	DeleteObject
00018E66                            ; ===========================================================================
00018E66                            
00018E66                            Obj73_Display:
00018E66 43F9 0001 84EA             		lea	(Ani_Eggman).l,a1
00018E6C 4EB9 0000 AD9E             		jsr	AnimateSprite
00018E72                            
00018E72                            loc_1864A:
00018E72 2268 0034                  		movea.l	$34(a0),a1
00018E76 3169 0008 0008             		move.w	8(a1),8(a0)
00018E7C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018E82 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018E88 7003                       		moveq	#3,d0
00018E8A C028 0022                  		and.b	$22(a0),d0
00018E8E 0228 00FC 0001             		andi.b	#-4,1(a0)
00018E94 8128 0001                  		or.b	d0,1(a0)
00018E98 4EF9 0000 DCDE             		jmp	DisplaySprite
00018E9E                            ; ===========================================================================
00018E9E                            
00018E9E                            Obj73_TubeMain:				; XREF: Obj73_Index
00018E9E 2268 0034                  		movea.l	$34(a0),a1
00018EA2 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018EA8 6600                       		bne.s	loc_18688
00018EAA 4A28 0001                  		tst.b	1(a0)
00018EAE 6A00                       		bpl.s	Obj73_TubeDel
00018EB0                            
00018EB0                            loc_18688:
00018EB0 217C 0001 8602 0004        		move.l	#Map_BossItems,4(a0)
00018EB8 317C 246C 0002             		move.w	#$246C,2(a0)
00018EBE 117C 0004 001A             		move.b	#4,$1A(a0)
00018EC4 60AC                       		bra.s	loc_1864A
00018EC6                            ; ===========================================================================
00018EC6                            
00018EC6                            Obj73_TubeDel:
00018EC6 4EF9 0000 DD1A             		jmp	DeleteObject
00018ECC                            ; ===========================================================================
00018ECC                            ; ---------------------------------------------------------------------------
00018ECC                            ; Object 74 - lava that	Eggman drops (MZ)
00018ECC                            ; ---------------------------------------------------------------------------
00018ECC                            
00018ECC                            Obj74:					; XREF: Obj_Index
00018ECC 7000                       		moveq	#0,d0
00018ECE 1028 0024                  		move.b	$24(a0),d0
00018ED2 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018ED6 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018EDA 4EF9 0000 DCDE             		jmp	DisplaySprite
00018EE0                            ; ===========================================================================
00018EE0 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018EE2 0000                       		dc.w Obj74_Action-Obj74_Index
00018EE4 0000                       		dc.w loc_18886-Obj74_Index
00018EE6 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018EE8                            ; ===========================================================================
00018EE8                            
00018EE8                            Obj74_Main:				; XREF: Obj74_Index
00018EE8 117C 0008 0016             		move.b	#8,$16(a0)
00018EEE 117C 0008 0017             		move.b	#8,$17(a0)
00018EF4 217C 0000 B99C 0004        		move.l	#Map_obj14,4(a0)
00018EFC 317C 0345 0002             		move.w	#$345,2(a0)
00018F02 117C 0004 0001             		move.b	#4,1(a0)
00018F08 117C 0005 0018             		move.b	#5,$18(a0)
00018F0E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018F14 117C 0008 0019             		move.b	#8,$19(a0)
00018F1A 5428 0024                  		addq.b	#2,$24(a0)
00018F1E 4A28 0028                  		tst.b	$28(a0)
00018F22 6600                       		bne.s	loc_1870A
00018F24 117C 008B 0020             		move.b	#$8B,$20(a0)
00018F2A 5428 0024                  		addq.b	#2,$24(a0)
00018F2E 6000 0000                  		bra.w	loc_18886
00018F32                            ; ===========================================================================
00018F32                            
00018F32                            loc_1870A:
00018F32 117C 001E 0029             		move.b	#$1E,$29(a0)
00018F38 303C 00AE                  		move.w	#$AE,d0
00018F3C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava sound
00018F42                            
00018F42                            Obj74_Action:				; XREF: Obj74_Index
00018F42 7000                       		moveq	#0,d0
00018F44 1028 0025                  		move.b	$25(a0),d0
00018F48 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00018F4C 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018F50 4EB9 0000 DCB8             		jsr	SpeedToPos
00018F56 43F9 0000 EB98             		lea	(Ani_obj14).l,a1
00018F5C 4EB9 0000 AD9E             		jsr	AnimateSprite
00018F62 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00018F68 6200                       		bhi.s	Obj74_Delete
00018F6A 4E75                       		rts	
00018F6C                            ; ===========================================================================
00018F6C                            
00018F6C                            Obj74_Delete:
00018F6C 4EF9 0000 DD1A             		jmp	DeleteObject
00018F72                            ; ===========================================================================
00018F72 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018F74 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00018F76 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00018F78 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00018F7A                            ; ===========================================================================
00018F7A                            
00018F7A                            Obj74_Drop:				; XREF: Obj74_Index2
00018F7A 08E8 0001 0022             		bset	#1,$22(a0)
00018F80 5328 0029                  		subq.b	#1,$29(a0)
00018F84 6A00                       		bpl.s	locret_18780
00018F86 117C 008B 0020             		move.b	#$8B,$20(a0)
00018F8C 4228 0028                  		clr.b	$28(a0)
00018F90 0668 0018 0012             		addi.w	#$18,$12(a0)
00018F96 08A8 0001 0022             		bclr	#1,$22(a0)
00018F9C 6100 C63A                  		bsr.w	ObjHitFloor
00018FA0 4A41                       		tst.w	d1
00018FA2 6A00                       		bpl.s	locret_18780
00018FA4 5428 0025                  		addq.b	#2,$25(a0)
00018FA8                            
00018FA8                            locret_18780:
00018FA8 4E75                       		rts	
00018FAA                            ; ===========================================================================
00018FAA                            
00018FAA                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00018FAA 5568 000C                  		subq.w	#2,$C(a0)
00018FAE 08E8 0007 0002             		bset	#7,2(a0)
00018FB4 317C 00A0 0010             		move.w	#$A0,$10(a0)
00018FBA 4268 0012                  		clr.w	$12(a0)
00018FBE 3168 0008 0030             		move.w	8(a0),$30(a0)
00018FC4 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018FCA 117C 0003 0029             		move.b	#3,$29(a0)
00018FD0 4EB9 0000 E17A             		jsr	SingleObjLoad2
00018FD6 6600                       		bne.s	loc_187CA
00018FD8 47D1                       		lea	(a1),a3
00018FDA 45D0                       		lea	(a0),a2
00018FDC 7003                       		moveq	#3,d0
00018FDE                            
00018FDE                            Obj74_Loop:
00018FDE 26DA                       		move.l	(a2)+,(a3)+
00018FE0 26DA                       		move.l	(a2)+,(a3)+
00018FE2 26DA                       		move.l	(a2)+,(a3)+
00018FE4 26DA                       		move.l	(a2)+,(a3)+
00018FE6 51C8 FFF6                  		dbf	d0,Obj74_Loop
00018FEA                            
00018FEA 4469 0010                  		neg.w	$10(a1)
00018FEE 5429 0025                  		addq.b	#2,$25(a1)
00018FF2                            
00018FF2                            loc_187CA:
00018FF2 5428 0025                  		addq.b	#2,$25(a0)
00018FF6 4E75                       		rts	
00018FF8                            
00018FF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018FF8                            
00018FF8                            
00018FF8                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00018FF8 4EB9 0000 E17A             		jsr	SingleObjLoad2
00018FFE 6600                       		bne.s	locret_187EE
00019000 3368 0008 0008             		move.w	8(a0),8(a1)
00019006 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001900C 12BC 0074                  		move.b	#$74,(a1)
00019010 337C 0067 0028             		move.w	#$67,$28(a1)
00019016                            
00019016                            locret_187EE:
00019016 4E75                       		rts	
00019018                            ; End of function Obj74_Duplicate2
00019018                            
00019018                            ; ===========================================================================
00019018                            
00019018                            Obj74_Duplicate:			; XREF: Obj74_Index2
00019018 6100 C5BE                  		bsr.w	ObjHitFloor
0001901C 4A41                       		tst.w	d1
0001901E 6A00                       		bpl.s	loc_18826
00019020 3028 0008                  		move.w	8(a0),d0
00019024 0C40 1940                  		cmpi.w	#$1940,d0
00019028 6E00                       		bgt.s	loc_1882C
0001902A 3228 0030                  		move.w	$30(a0),d1
0001902E B240                       		cmp.w	d0,d1
00019030 6700                       		beq.s	loc_1881E
00019032 0240 0010                  		andi.w	#$10,d0
00019036 0241 0010                  		andi.w	#$10,d1
0001903A B240                       		cmp.w	d0,d1
0001903C 6700                       		beq.s	loc_1881E
0001903E 61B8                       		bsr.s	Obj74_Duplicate2
00019040 3168 0008 0032             		move.w	8(a0),$32(a0)
00019046                            
00019046                            loc_1881E:
00019046 3168 0008 0030             		move.w	8(a0),$30(a0)
0001904C 4E75                       		rts	
0001904E                            ; ===========================================================================
0001904E                            
0001904E                            loc_18826:
0001904E 5428 0025                  		addq.b	#2,$25(a0)
00019052 4E75                       		rts	
00019054                            ; ===========================================================================
00019054                            
00019054                            loc_1882C:
00019054 5428 0024                  		addq.b	#2,$24(a0)
00019058 4E75                       		rts	
0001905A                            ; ===========================================================================
0001905A                            
0001905A                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001905A 08A8 0001 0022             		bclr	#1,$22(a0)
00019060 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00019066 3028 0008                  		move.w	8(a0),d0
0001906A 9068 0032                  		sub.w	$32(a0),d0
0001906E 6A00                       		bpl.s	loc_1884A
00019070 4440                       		neg.w	d0
00019072                            
00019072                            loc_1884A:
00019072 0C40 0012                  		cmpi.w	#$12,d0
00019076 6600                       		bne.s	loc_18856
00019078 08A8 0007 0002             		bclr	#7,2(a0)
0001907E                            
0001907E                            loc_18856:
0001907E 6100 C558                  		bsr.w	ObjHitFloor
00019082 4A41                       		tst.w	d1
00019084 6A00                       		bpl.s	locret_1887E
00019086 5328 0029                  		subq.b	#1,$29(a0)
0001908A 6700                       		beq.s	Obj74_Delete2
0001908C 4268 0012                  		clr.w	$12(a0)
00019090 3168 0032 0008             		move.w	$32(a0),8(a0)
00019096 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001909C 08E8 0007 0002             		bset	#7,2(a0)
000190A2 5528 0025                  		subq.b	#2,$25(a0)
000190A6                            
000190A6                            locret_1887E:
000190A6 4E75                       		rts	
000190A8                            ; ===========================================================================
000190A8                            
000190A8                            Obj74_Delete2:
000190A8 4EF9 0000 DD1A             		jmp	DeleteObject
000190AE                            ; ===========================================================================
000190AE                            
000190AE                            loc_18886:				; XREF: Obj74_Index
000190AE 08E8 0007 0002             		bset	#7,2(a0)
000190B4 5328 0029                  		subq.b	#1,$29(a0)
000190B8 6600                       		bne.s	Obj74_Animate
000190BA 117C 0001 001C             		move.b	#1,$1C(a0)
000190C0 5968 000C                  		subq.w	#4,$C(a0)
000190C4 4228 0020                  		clr.b	$20(a0)
000190C8                            
000190C8                            Obj74_Animate:
000190C8 43F9 0000 EB98             		lea	(Ani_obj14).l,a1
000190CE 4EF9 0000 AD9E             		jmp	AnimateSprite
000190D4                            ; ===========================================================================
000190D4                            
000190D4                            Obj74_Delete3:				; XREF: Obj74_Index
000190D4 4EF9 0000 DD1A             		jmp	DeleteObject
000190DA                            ; ===========================================================================
000190DA                            
000190DA                            Obj7A_Delete:
000190DA 4EF9 0000 DD1A             		jmp	DeleteObject
000190E0                            ; ===========================================================================
000190E0                            ; ---------------------------------------------------------------------------
000190E0                            ; Object 7A - Eggman (SLZ)
000190E0                            ; ---------------------------------------------------------------------------
000190E0                            
000190E0                            Obj7A:					; XREF: Obj_Index
000190E0 7000                       		moveq	#0,d0
000190E2 1028 0024                  		move.b	$24(a0),d0
000190E6 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
000190EA 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
000190EE                            ; ===========================================================================
000190EE 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
000190F0 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
000190F2 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
000190F4 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
000190F6 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
000190F8                            
000190F8 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000190FB 0401 04                    		dc.b 4,	1, 4
000190FE 0607 04                    		dc.b 6,	7, 4
00019101 0800 03                    		dc.b 8,	0, 3
00019104                            ; ===========================================================================
00019104                            
00019104                            Obj7A_Main:				; XREF: Obj7A_Index
00019104 317C 2188 0008             		move.w	#$2188,8(a0)
0001910A 317C 0228 000C             		move.w	#$228,$C(a0)
00019110 3168 0008 0030             		move.w	8(a0),$30(a0)
00019116 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001911C 117C 000F 0020             		move.b	#$F,$20(a0)
00019122 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019128 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001912C 2248                       		movea.l	a0,a1
0001912E 7203                       		moveq	#3,d1
00019130 6000                       		bra.s	Obj7A_LoadBoss
00019132                            ; ===========================================================================
00019132                            
00019132                            Obj7A_Loop:
00019132 4EB9 0000 E17A             		jsr	SingleObjLoad2
00019138 6600                       		bne.s	loc_1895C
0001913A 12BC 007A                  		move.b	#$7A,0(a1)
0001913E 3368 0008 0008             		move.w	8(a0),8(a1)
00019144 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001914A                            
0001914A                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001914A 08A8 0000 0022             		bclr	#0,$22(a0)
00019150 4229 0025                  		clr.b	$25(a1)
00019154 135A 0024                  		move.b	(a2)+,$24(a1)
00019158 135A 001C                  		move.b	(a2)+,$1C(a1)
0001915C 135A 0018                  		move.b	(a2)+,$18(a1)
00019160 237C 0001 853A 0004        		move.l	#Map_Eggman,4(a1)
00019168 337C 0400 0002             		move.w	#$400,2(a1)
0001916E 137C 0004 0001             		move.b	#4,1(a1)
00019174 137C 0020 0019             		move.b	#$20,$19(a1)
0001917A 2348 0034                  		move.l	a0,$34(a1)
0001917E 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00019182                            
00019182                            loc_1895C:
00019182 43F8 D040                  		lea	($FFFFD040).w,a1
00019186 45E8 002A                  		lea	$2A(a0),a2
0001918A 705E                       		moveq	#$5E,d0
0001918C 723E                       		moveq	#$3E,d1
0001918E                            
0001918E                            loc_18968:
0001918E B011                       		cmp.b	(a1),d0
00019190 6600                       		bne.s	loc_18974
00019192 4A29 0028                  		tst.b	$28(a1)
00019196 6700                       		beq.s	loc_18974
00019198 34C9                       		move.w	a1,(a2)+
0001919A                            
0001919A                            loc_18974:
0001919A D2FC 0040                  		adda.w	#$40,a1
0001919E 51C9 FFEE                  		dbf	d1,loc_18968
000191A2                            
000191A2                            Obj7A_ShipMain:				; XREF: Obj7A_Index
000191A2 7000                       		moveq	#0,d0
000191A4 1028 0025                  		move.b	$25(a0),d0
000191A8 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
000191AC 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
000191B0 43F9 0001 84EA             		lea	(Ani_Eggman).l,a1
000191B6 4EB9 0000 AD9E             		jsr	AnimateSprite
000191BC 7003                       		moveq	#3,d0
000191BE C028 0022                  		and.b	$22(a0),d0
000191C2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000191C8 8128 0001                  		or.b	d0,1(a0)
000191CC 4EF9 0000 DCDE             		jmp	DisplaySprite
000191D2                            ; ===========================================================================
000191D2 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
000191D4 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
000191D6 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
000191D8 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
000191DA 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
000191DC 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
000191DE                            ; ===========================================================================
000191DE                            
000191DE                            loc_189B8:				; XREF: Obj7A_ShipIndex
000191DE 317C FF00 0010             		move.w	#-$100,$10(a0)
000191E4 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
000191EA 6400                       		bcc.s	loc_189CA
000191EC 5428 0025                  		addq.b	#2,$25(a0)
000191F0                            
000191F0                            loc_189CA:
000191F0 6100 EEB6                  		bsr.w	BossMove
000191F4 1028 003F                  		move.b	$3F(a0),d0
000191F8 5428 003F                  		addq.b	#2,$3F(a0)
000191FC 4EB9 0000 2C64             		jsr	(CalcSine).l
00019202 EC40                       		asr.w	#6,d0
00019204 D068 0038                  		add.w	$38(a0),d0
00019208 3140 000C                  		move.w	d0,$C(a0)
0001920C 3168 0030 0008             		move.w	$30(a0),8(a0)
00019212 6000                       		bra.s	loc_189FE
00019214                            ; ===========================================================================
00019214                            
00019214                            loc_189EE:
00019214 6100 EE92                  		bsr.w	BossMove
00019218 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001921E 3168 0030 0008             		move.w	$30(a0),8(a0)
00019224                            
00019224                            loc_189FE:
00019224 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001922A 6400                       		bcc.s	locret_18A44
0001922C 4A28 0022                  		tst.b	$22(a0)
00019230 6B00                       		bmi.s	loc_18A46
00019232 4A28 0020                  		tst.b	$20(a0)
00019236 6600                       		bne.s	locret_18A44
00019238 4A28 003E                  		tst.b	$3E(a0)
0001923C 6600                       		bne.s	loc_18A28
0001923E 117C 0020 003E             		move.b	#$20,$3E(a0)
00019244 303C 00AC                  		move.w	#$AC,d0
00019248 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001924E                            
0001924E                            loc_18A28:
0001924E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019252 7000                       		moveq	#0,d0
00019254 4A51                       		tst.w	(a1)
00019256 6600                       		bne.s	loc_18A36
00019258 303C 0EEE                  		move.w	#$EEE,d0
0001925C                            
0001925C                            loc_18A36:
0001925C 3280                       		move.w	d0,(a1)
0001925E 5328 003E                  		subq.b	#1,$3E(a0)
00019262 6600                       		bne.s	locret_18A44
00019264 117C 000F 0020             		move.b	#$F,$20(a0)
0001926A                            
0001926A                            locret_18A44:
0001926A 4E75                       		rts	
0001926C                            ; ===========================================================================
0001926C                            
0001926C                            loc_18A46:
0001926C 7064                       		moveq	#100,d0
0001926E 6100 0000                  		bsr.w	AddPoints
00019272 117C 0006 0025             		move.b	#6,$25(a0)
00019278 117C 0078 003C             		move.b	#$78,$3C(a0)
0001927E 4268 0010                  		clr.w	$10(a0)
00019282 4E75                       		rts	
00019284                            ; ===========================================================================
00019284                            
00019284                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00019284 3028 0030                  		move.w	$30(a0),d0
00019288 317C 0200 0010             		move.w	#$200,$10(a0)
0001928E 0828 0000 0022             		btst	#0,$22(a0)
00019294 6600                       		bne.s	loc_18A7C
00019296 4468 0010                  		neg.w	$10(a0)
0001929A 0C40 2008                  		cmpi.w	#$2008,d0
0001929E 6E00                       		bgt.s	loc_18A88
000192A0 6000                       		bra.s	loc_18A82
000192A2                            ; ===========================================================================
000192A2                            
000192A2                            loc_18A7C:
000192A2 0C40 2138                  		cmpi.w	#$2138,d0
000192A6 6D00                       		blt.s	loc_18A88
000192A8                            
000192A8                            loc_18A82:
000192A8 0868 0000 0022             		bchg	#0,$22(a0)
000192AE                            
000192AE                            loc_18A88:
000192AE 3028 0008                  		move.w	8(a0),d0
000192B2 72FF                       		moveq	#-1,d1
000192B4 7402                       		moveq	#2,d2
000192B6 45E8 002A                  		lea	$2A(a0),a2
000192BA 7828                       		moveq	#$28,d4
000192BC 4A68 0010                  		tst.w	$10(a0)
000192C0 6A00                       		bpl.s	loc_18A9E
000192C2 4444                       		neg.w	d4
000192C4                            
000192C4                            loc_18A9E:
000192C4 321A                       		move.w	(a2)+,d1
000192C6 2641                       		movea.l	d1,a3
000192C8 082B 0003 0022             		btst	#3,$22(a3)
000192CE 6600                       		bne.s	loc_18AB4
000192D0 362B 0008                  		move.w	8(a3),d3
000192D4 D644                       		add.w	d4,d3
000192D6 9640                       		sub.w	d0,d3
000192D8 6700                       		beq.s	loc_18AC0
000192DA                            
000192DA                            loc_18AB4:
000192DA 51CA FFE8                  		dbf	d2,loc_18A9E
000192DE                            
000192DE 1142 0028                  		move.b	d2,$28(a0)
000192E2 6000 FF0C                  		bra.w	loc_189CA
000192E6                            ; ===========================================================================
000192E6                            
000192E6                            loc_18AC0:
000192E6 1142 0028                  		move.b	d2,$28(a0)
000192EA 5428 0025                  		addq.b	#2,$25(a0)
000192EE 117C 0028 003C             		move.b	#$28,$3C(a0)
000192F4 6000 FEFA                  		bra.w	loc_189CA
000192F8                            ; ===========================================================================
000192F8                            
000192F8                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000192F8 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000192FE 6600                       		bne.s	loc_18B36
00019300 70FF                       		moveq	#-1,d0
00019302 1028 0028                  		move.b	$28(a0),d0
00019306 4880                       		ext.w	d0
00019308 6B00                       		bmi.s	loc_18B40
0001930A 5540                       		subq.w	#2,d0
0001930C 4440                       		neg.w	d0
0001930E D040                       		add.w	d0,d0
00019310 43E8 002A                  		lea	$2A(a0),a1
00019314 3031 0000                  		move.w	(a1,d0.w),d0
00019318 2440                       		movea.l	d0,a2
0001931A 43F8 D040                  		lea	($FFFFD040).w,a1
0001931E 723E                       		moveq	#$3E,d1
00019320                            
00019320                            loc_18AFA:
00019320 B0A9 003C                  		cmp.l	$3C(a1),d0
00019324 6700                       		beq.s	loc_18B40
00019326 D2FC 0040                  		adda.w	#$40,a1
0001932A 51C9 FFF4                  		dbf	d1,loc_18AFA
0001932E                            
0001932E 2F08                       		move.l	a0,-(sp)
00019330 41D2                       		lea	(a2),a0
00019332 4EB9 0000 E17A             		jsr	SingleObjLoad2
00019338 205F                       		movea.l	(sp)+,a0
0001933A 6600                       		bne.s	loc_18B40
0001933C 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019340 3368 0008 0008             		move.w	8(a0),8(a1)
00019346 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001934C 0669 0020 000C             		addi.w	#$20,$C(a1)
00019352 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019358 234A 003C                  		move.l	a2,$3C(a1)
0001935C                            
0001935C                            loc_18B36:
0001935C 5328 003C                  		subq.b	#1,$3C(a0)
00019360 6700                       		beq.s	loc_18B40
00019362 6000 FEC0                  		bra.w	loc_189FE
00019366                            ; ===========================================================================
00019366                            
00019366                            loc_18B40:
00019366 5528 0025                  		subq.b	#2,$25(a0)
0001936A 6000 FE84                  		bra.w	loc_189CA
0001936E                            ; ===========================================================================
0001936E                            
0001936E                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001936E 5328 003C                  		subq.b	#1,$3C(a0)
00019372 6B00                       		bmi.s	loc_18B52
00019374 6000 ECF0                  		bra.w	BossDefeated
00019378                            ; ===========================================================================
00019378                            
00019378                            loc_18B52:
00019378 5428 0025                  		addq.b	#2,$25(a0)
0001937C 4268 0012                  		clr.w	$12(a0)
00019380 08E8 0000 0022             		bset	#0,$22(a0)
00019386 08A8 0007 0022             		bclr	#7,$22(a0)
0001938C 4268 0010                  		clr.w	$10(a0)
00019390 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00019396 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001939A 6600                       		bne.s	loc_18B7C
0001939C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000193A2                            
000193A2                            loc_18B7C:
000193A2 6000 FE80                  		bra.w	loc_189FE
000193A6                            ; ===========================================================================
000193A6                            
000193A6                            loc_18B80:				; XREF: Obj7A_ShipIndex
000193A6 5228 003C                  		addq.b	#1,$3C(a0)
000193AA 6700                       		beq.s	loc_18B90
000193AC 6A00                       		bpl.s	loc_18B96
000193AE 0668 0018 0012             		addi.w	#$18,$12(a0)
000193B4 6000                       		bra.s	loc_18BC2
000193B6                            ; ===========================================================================
000193B6                            
000193B6                            loc_18B90:
000193B6 4268 0012                  		clr.w	$12(a0)
000193BA 6000                       		bra.s	loc_18BC2
000193BC                            ; ===========================================================================
000193BC                            
000193BC                            loc_18B96:
000193BC 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
000193C2 6500                       		bcs.s	loc_18BAE
000193C4 6700                       		beq.s	loc_18BB4
000193C6 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
000193CC 6500                       		bcs.s	loc_18BC2
000193CE 5428 0025                  		addq.b	#2,$25(a0)
000193D2 6000                       		bra.s	loc_18BC2
000193D4                            ; ===========================================================================
000193D4                            
000193D4                            loc_18BAE:
000193D4 5168 0012                  		subq.w	#8,$12(a0)
000193D8 6000                       		bra.s	loc_18BC2
000193DA                            ; ===========================================================================
000193DA                            
000193DA                            loc_18BB4:
000193DA 4268 0012                  		clr.w	$12(a0)
000193DE 303C 0084                  		move.w	#$84,d0
000193E2 4EB9 0000 15BA             		jsr	(PlaySound).l	; play SLZ music
000193E8                            
000193E8                            loc_18BC2:
000193E8 6000 FE2A                  		bra.w	loc_189EE
000193EC                            ; ===========================================================================
000193EC                            
000193EC                            loc_18BC6:				; XREF: Obj7A_ShipIndex
000193EC 317C 0400 0010             		move.w	#$400,$10(a0)
000193F2 317C FFC0 0012             		move.w	#-$40,$12(a0)
000193F8 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000193FE 6400                       		bcc.s	loc_18BE0
00019400 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019404 6000                       		bra.s	loc_18BE8
00019406                            ; ===========================================================================
00019406                            
00019406                            loc_18BE0:
00019406 4A28 0001                  		tst.b	1(a0)
0001940A 6A00 FCCE                  		bpl.w	Obj7A_Delete
0001940E                            
0001940E                            loc_18BE8:
0001940E 6100 EC98                  		bsr.w	BossMove
00019412 6000 FDDC                  		bra.w	loc_189CA
00019416                            ; ===========================================================================
00019416                            
00019416                            Obj7A_FaceMain:				; XREF: Obj7A_Index
00019416 7000                       		moveq	#0,d0
00019418 7201                       		moveq	#1,d1
0001941A 2268 0034                  		movea.l	$34(a0),a1
0001941E 1029 0025                  		move.b	$25(a1),d0
00019422 0C00 0006                  		cmpi.b	#6,d0
00019426 6B00                       		bmi.s	loc_18C06
00019428 720A                       		moveq	#$A,d1
0001942A 6000                       		bra.s	loc_18C1A
0001942C                            ; ===========================================================================
0001942C                            
0001942C                            loc_18C06:
0001942C 4A29 0020                  		tst.b	$20(a1)
00019430 6600                       		bne.s	loc_18C10
00019432 7205                       		moveq	#5,d1
00019434 6000                       		bra.s	loc_18C1A
00019436                            ; ===========================================================================
00019436                            
00019436                            loc_18C10:
00019436 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001943C 6500                       		bcs.s	loc_18C1A
0001943E 7204                       		moveq	#4,d1
00019440                            
00019440                            loc_18C1A:
00019440 1141 001C                  		move.b	d1,$1C(a0)
00019444 0C00 000A                  		cmpi.b	#$A,d0
00019448 6600                       		bne.s	loc_18C32
0001944A 117C 0006 001C             		move.b	#6,$1C(a0)
00019450 4A28 0001                  		tst.b	1(a0)
00019454 6A00 FC84                  		bpl.w	Obj7A_Delete
00019458                            
00019458                            loc_18C32:
00019458 6000                       		bra.s	loc_18C6C
0001945A                            ; ===========================================================================
0001945A                            
0001945A                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001945A 117C 0008 001C             		move.b	#8,$1C(a0)
00019460 2268 0034                  		movea.l	$34(a0),a1
00019464 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001946A 6600                       		bne.s	loc_18C56
0001946C 4A28 0001                  		tst.b	1(a0)
00019470 6A00 FC68                  		bpl.w	Obj7A_Delete
00019474 117C 000B 001C             		move.b	#$B,$1C(a0)
0001947A 6000                       		bra.s	loc_18C6C
0001947C                            ; ===========================================================================
0001947C                            
0001947C                            loc_18C56:
0001947C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019482 6E00                       		bgt.s	loc_18C6C
00019484 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001948A 6D00                       		blt.s	loc_18C6C
0001948C 117C 0007 001C             		move.b	#7,$1C(a0)
00019492                            
00019492                            loc_18C6C:
00019492 43F9 0001 84EA             		lea	(Ani_Eggman).l,a1
00019498 4EB9 0000 AD9E             		jsr	AnimateSprite
0001949E                            
0001949E                            loc_18C78:
0001949E 2268 0034                  		movea.l	$34(a0),a1
000194A2 3169 0008 0008             		move.w	8(a1),8(a0)
000194A8 3169 000C 000C             		move.w	$C(a1),$C(a0)
000194AE 1169 0022 0022             		move.b	$22(a1),$22(a0)
000194B4 7003                       		moveq	#3,d0
000194B6 C028 0022                  		and.b	$22(a0),d0
000194BA 0228 00FC 0001             		andi.b	#-4,1(a0)
000194C0 8128 0001                  		or.b	d0,1(a0)
000194C4 4EF9 0000 DCDE             		jmp	DisplaySprite
000194CA                            ; ===========================================================================
000194CA                            
000194CA                            Obj7A_TubeMain:				; XREF: Obj7A_Index
000194CA 2268 0034                  		movea.l	$34(a0),a1
000194CE 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000194D4 6600                       		bne.s	loc_18CB8
000194D6 4A28 0001                  		tst.b	1(a0)
000194DA 6A00 FBFE                  		bpl.w	Obj7A_Delete
000194DE                            
000194DE                            loc_18CB8:
000194DE 217C 0001 8602 0004        		move.l	#Map_BossItems,4(a0)
000194E6 317C 246C 0002             		move.w	#$246C,2(a0)
000194EC 117C 0003 001A             		move.b	#3,$1A(a0)
000194F2 60AA                       		bra.s	loc_18C78
000194F4                            ; ===========================================================================
000194F4                            ; ---------------------------------------------------------------------------
000194F4                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
000194F4                            ; ---------------------------------------------------------------------------
000194F4                            
000194F4                            Obj7B:					; XREF: Obj_Index
000194F4 7000                       		moveq	#0,d0
000194F6 1028 0024                  		move.b	$24(a0),d0
000194FA 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
000194FE 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
00019502 3028 0030                  		move.w	$30(a0),d0
00019506 0240 FF80                  		andi.w	#$FF80,d0
0001950A 3238 F700                  		move.w	($FFFFF700).w,d1
0001950E 0441 0080                  		subi.w	#$80,d1
00019512 0241 FF80                  		andi.w	#$FF80,d1
00019516 9041                       		sub.w	d1,d0
00019518 6B00 FBC0                  		bmi.w	Obj7A_Delete
0001951C 0C40 0280                  		cmpi.w	#$280,d0
00019520 6200 FBB8                  		bhi.w	Obj7A_Delete
00019524 4EF9 0000 DCDE             		jmp	DisplaySprite
0001952A                            ; ===========================================================================
0001952A 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001952C 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001952E 0000                       		dc.w loc_18DC6-Obj7B_Index
00019530 0000                       		dc.w loc_18EAA-Obj7B_Index
00019532 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00019534 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00019536                            ; ===========================================================================
00019536                            
00019536                            Obj7B_Main:				; XREF: Obj7B_Index
00019536 217C 0001 20A4 0004        		move.l	#Map_obj5Ea,4(a0)
0001953E 317C 0518 0002             		move.w	#$518,2(a0)
00019544 117C 0001 001A             		move.b	#1,$1A(a0)
0001954A 0028 0004 0001             		ori.b	#4,1(a0)
00019550 117C 0004 0018             		move.b	#4,$18(a0)
00019556 117C 008B 0020             		move.b	#$8B,$20(a0)
0001955C 117C 000C 0019             		move.b	#$C,$19(a0)
00019562 2268 003C                  		movea.l	$3C(a0),a1
00019566 3169 0008 0030             		move.w	8(a1),$30(a0)
0001956C 3169 000C 0034             		move.w	$C(a1),$34(a0)
00019572 08E8 0000 0022             		bset	#0,$22(a0)
00019578 3028 0008                  		move.w	8(a0),d0
0001957C B069 0008                  		cmp.w	8(a1),d0
00019580 6E00                       		bgt.s	loc_18D68
00019582 08A8 0000 0022             		bclr	#0,$22(a0)
00019588 117C 0002 003A             		move.b	#2,$3A(a0)
0001958E                            
0001958E                            loc_18D68:
0001958E 5428 0024                  		addq.b	#2,$24(a0)
00019592                            
00019592                            Obj7B_Fall:				; XREF: Obj7B_Index
00019592 4EB9 0000 DC8C             		jsr	ObjectFall
00019598 2268 003C                  		movea.l	$3C(a0),a1
0001959C 45F9 0000 0000             		lea	(word_19018).l,a2
000195A2 7000                       		moveq	#0,d0
000195A4 1029 001A                  		move.b	$1A(a1),d0
000195A8 3228 0008                  		move.w	8(a0),d1
000195AC 9268 0030                  		sub.w	$30(a0),d1
000195B0 6400                       		bcc.s	loc_18D8E
000195B2 5440                       		addq.w	#2,d0
000195B4                            
000195B4                            loc_18D8E:
000195B4 D040                       		add.w	d0,d0
000195B6 3228 0034                  		move.w	$34(a0),d1
000195BA D272 0000                  		add.w	(a2,d0.w),d1
000195BE B268 000C                  		cmp.w	$C(a0),d1
000195C2 6E00                       		bgt.s	locret_18DC4
000195C4 2268 003C                  		movea.l	$3C(a0),a1
000195C8 7202                       		moveq	#2,d1
000195CA 0828 0000 0022             		btst	#0,$22(a0)
000195D0 6700                       		beq.s	loc_18DAE
000195D2 7200                       		moveq	#0,d1
000195D4                            
000195D4                            loc_18DAE:
000195D4 317C 00F0 0028             		move.w	#$F0,$28(a0)
000195DA 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
000195E0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000195E6 6000 0000                  		bra.w	loc_18FA2
000195EA                            ; ===========================================================================
000195EA                            
000195EA                            locret_18DC4:
000195EA 4E75                       		rts	
000195EC                            ; ===========================================================================
000195EC                            
000195EC                            loc_18DC6:				; XREF: Obj7B_Index
000195EC 2268 003C                  		movea.l	$3C(a0),a1
000195F0 7000                       		moveq	#0,d0
000195F2 1028 003A                  		move.b	$3A(a0),d0
000195F6 9029 003A                  		sub.b	$3A(a1),d0
000195FA 6700                       		beq.s	loc_18E2A
000195FC 6400                       		bcc.s	loc_18DDA
000195FE 4400                       		neg.b	d0
00019600                            
00019600                            loc_18DDA:
00019600 323C F7E8                  		move.w	#-$818,d1
00019604 343C FEEC                  		move.w	#-$114,d2
00019608 0C00 0001                  		cmpi.b	#1,d0
0001960C 6700                       		beq.s	loc_18E00
0001960E 323C F6A0                  		move.w	#-$960,d1
00019612 343C FF0C                  		move.w	#-$F4,d2
00019616 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001961C 6D00                       		blt.s	loc_18E00
0001961E 323C F5E0                  		move.w	#-$A20,d1
00019622 343C FF80                  		move.w	#-$80,d2
00019626                            
00019626                            loc_18E00:
00019626 3141 0012                  		move.w	d1,$12(a0)
0001962A 3142 0010                  		move.w	d2,$10(a0)
0001962E 3028 0008                  		move.w	8(a0),d0
00019632 9068 0030                  		sub.w	$30(a0),d0
00019636 6400                       		bcc.s	loc_18E16
00019638 4468 0010                  		neg.w	$10(a0)
0001963C                            
0001963C                            loc_18E16:
0001963C 117C 0001 001A             		move.b	#1,$1A(a0)
00019642 317C 0020 0028             		move.w	#$20,$28(a0)
00019648 5428 0024                  		addq.b	#2,$24(a0)
0001964C 6000 0000                  		bra.w	loc_18EAA
00019650                            ; ===========================================================================
00019650                            
00019650                            loc_18E2A:				; XREF: loc_18DC6
00019650 45F9 0000 0000             		lea	(word_19018).l,a2
00019656 7000                       		moveq	#0,d0
00019658 1029 001A                  		move.b	$1A(a1),d0
0001965C 343C 0028                  		move.w	#$28,d2
00019660 3228 0008                  		move.w	8(a0),d1
00019664 9268 0030                  		sub.w	$30(a0),d1
00019668 6400                       		bcc.s	loc_18E48
0001966A 4442                       		neg.w	d2
0001966C 5440                       		addq.w	#2,d0
0001966E                            
0001966E                            loc_18E48:
0001966E D040                       		add.w	d0,d0
00019670 3228 0034                  		move.w	$34(a0),d1
00019674 D272 0000                  		add.w	(a2,d0.w),d1
00019678 3141 000C                  		move.w	d1,$C(a0)
0001967C D468 0030                  		add.w	$30(a0),d2
00019680 3142 0008                  		move.w	d2,8(a0)
00019684 4268 000E                  		clr.w	$E(a0)
00019688 4268 000A                  		clr.w	$A(a0)
0001968C 5368 0028                  		subq.w	#1,$28(a0)
00019690 6600                       		bne.s	loc_18E7A
00019692 317C 0020 0028             		move.w	#$20,$28(a0)
00019698 117C 0008 0024             		move.b	#8,$24(a0)
0001969E 4E75                       		rts	
000196A0                            ; ===========================================================================
000196A0                            
000196A0                            loc_18E7A:
000196A0 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
000196A6 6600                       		bne.s	loc_18E88
000196A8 117C 0005 001F             		move.b	#5,$1F(a0)
000196AE                            
000196AE                            loc_18E88:
000196AE 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
000196B4 6600                       		bne.s	loc_18E96
000196B6 117C 0002 001F             		move.b	#2,$1F(a0)
000196BC                            
000196BC                            loc_18E96:
000196BC 5328 001E                  		subq.b	#1,$1E(a0)
000196C0 6E00                       		bgt.s	locret_18EA8
000196C2 0868 0000 001A             		bchg	#0,$1A(a0)
000196C8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000196CE                            
000196CE                            locret_18EA8:
000196CE 4E75                       		rts	
000196D0                            ; ===========================================================================
000196D0                            
000196D0                            loc_18EAA:				; XREF: Obj7B_Index
000196D0 43F8 D040                  		lea	($FFFFD040).w,a1
000196D4 707A                       		moveq	#$7A,d0
000196D6 7240                       		moveq	#$40,d1
000196D8 743E                       		moveq	#$3E,d2
000196DA                            
000196DA                            loc_18EB4:
000196DA B011                       		cmp.b	(a1),d0
000196DC 6700                       		beq.s	loc_18EC0
000196DE D2C1                       		adda.w	d1,a1
000196E0 51CA FFF8                  		dbf	d2,loc_18EB4
000196E4                            
000196E4 6000                       		bra.s	loc_18F38
000196E6                            ; ===========================================================================
000196E6                            
000196E6                            loc_18EC0:
000196E6 3029 0008                  		move.w	8(a1),d0
000196EA 3229 000C                  		move.w	$C(a1),d1
000196EE 3428 0008                  		move.w	8(a0),d2
000196F2 3628 000C                  		move.w	$C(a0),d3
000196F6 45FA 0000                  		lea	byte_19022(pc),a2
000196FA 47FA 0000                  		lea	byte_19026(pc),a3
000196FE 181A                       		move.b	(a2)+,d4
00019700 4884                       		ext.w	d4
00019702 D044                       		add.w	d4,d0
00019704 181B                       		move.b	(a3)+,d4
00019706 4884                       		ext.w	d4
00019708 D444                       		add.w	d4,d2
0001970A B440                       		cmp.w	d0,d2
0001970C 6500                       		bcs.s	loc_18F38
0001970E 181A                       		move.b	(a2)+,d4
00019710 4884                       		ext.w	d4
00019712 D044                       		add.w	d4,d0
00019714 181B                       		move.b	(a3)+,d4
00019716 4884                       		ext.w	d4
00019718 D444                       		add.w	d4,d2
0001971A B042                       		cmp.w	d2,d0
0001971C 6500                       		bcs.s	loc_18F38
0001971E 181A                       		move.b	(a2)+,d4
00019720 4884                       		ext.w	d4
00019722 D244                       		add.w	d4,d1
00019724 181B                       		move.b	(a3)+,d4
00019726 4884                       		ext.w	d4
00019728 D644                       		add.w	d4,d3
0001972A B641                       		cmp.w	d1,d3
0001972C 6500                       		bcs.s	loc_18F38
0001972E 181A                       		move.b	(a2)+,d4
00019730 4884                       		ext.w	d4
00019732 D244                       		add.w	d4,d1
00019734 181B                       		move.b	(a3)+,d4
00019736 4884                       		ext.w	d4
00019738 D644                       		add.w	d4,d3
0001973A B243                       		cmp.w	d3,d1
0001973C 6500                       		bcs.s	loc_18F38
0001973E 5428 0024                  		addq.b	#2,$24(a0)
00019742 4268 0028                  		clr.w	$28(a0)
00019746 4229 0020                  		clr.b	$20(a1)
0001974A 5329 0021                  		subq.b	#1,$21(a1)
0001974E 6600                       		bne.s	loc_18F38
00019750 08E9 0007 0022             		bset	#7,$22(a1)
00019756 4268 0010                  		clr.w	$10(a0)
0001975A 4268 0012                  		clr.w	$12(a0)
0001975E                            
0001975E                            loc_18F38:
0001975E 4A68 0012                  		tst.w	$12(a0)
00019762 6A00                       		bpl.s	loc_18F5C
00019764 4EB9 0000 DC8C             		jsr	ObjectFall
0001976A 3028 0034                  		move.w	$34(a0),d0
0001976E 0440 002F                  		subi.w	#$2F,d0
00019772 B068 000C                  		cmp.w	$C(a0),d0
00019776 6E00                       		bgt.s	loc_18F58
00019778 4EB9 0000 DC8C             		jsr	ObjectFall
0001977E                            
0001977E                            loc_18F58:
0001977E 6000 FF20                  		bra.w	loc_18E7A
00019782                            ; ===========================================================================
00019782                            
00019782                            loc_18F5C:
00019782 4EB9 0000 DC8C             		jsr	ObjectFall
00019788 2268 003C                  		movea.l	$3C(a0),a1
0001978C 45F9 0000 0000             		lea	(word_19018).l,a2
00019792 7000                       		moveq	#0,d0
00019794 1029 001A                  		move.b	$1A(a1),d0
00019798 3228 0008                  		move.w	8(a0),d1
0001979C 9268 0030                  		sub.w	$30(a0),d1
000197A0 6400                       		bcc.s	loc_18F7E
000197A2 5440                       		addq.w	#2,d0
000197A4                            
000197A4                            loc_18F7E:
000197A4 D040                       		add.w	d0,d0
000197A6 3228 0034                  		move.w	$34(a0),d1
000197AA D272 0000                  		add.w	(a2,d0.w),d1
000197AE B268 000C                  		cmp.w	$C(a0),d1
000197B2 6ECA                       		bgt.s	loc_18F58
000197B4 2268 003C                  		movea.l	$3C(a0),a1
000197B8 7202                       		moveq	#2,d1
000197BA 4A68 0010                  		tst.w	$10(a0)
000197BE 6B00                       		bmi.s	loc_18F9C
000197C0 7200                       		moveq	#0,d1
000197C2                            
000197C2                            loc_18F9C:
000197C2 317C 0000 0028             		move.w	#0,$28(a0)
000197C8                            
000197C8                            loc_18FA2:
000197C8 1341 003A                  		move.b	d1,$3A(a1)
000197CC 1141 003A                  		move.b	d1,$3A(a0)
000197D0 B229 001A                  		cmp.b	$1A(a1),d1
000197D4 6700                       		beq.s	loc_19008
000197D6 08A9 0003 0022             		bclr	#3,$22(a1)
000197DC 6700                       		beq.s	loc_19008
000197DE 4229 0025                  		clr.b	$25(a1)
000197E2 137C 0002 0024             		move.b	#2,$24(a1)
000197E8 45F8 D000                  		lea	($FFFFD000).w,a2
000197EC 3568 0012 0012             		move.w	$12(a0),$12(a2)
000197F2 446A 0012                  		neg.w	$12(a2)
000197F6 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
000197FC 6600                       		bne.s	loc_18FDC
000197FE E0EA 0012                  		asr	$12(a2)
00019802                            
00019802                            loc_18FDC:
00019802 08EA 0001 0022             		bset	#1,$22(a2)
00019808 08AA 0003 0022             		bclr	#3,$22(a2)
0001980E 422A 003C                  		clr.b	$3C(a2)
00019812 2F08                       		move.l	a0,-(sp)
00019814 41D2                       		lea	(a2),a0
00019816 4EBA A30A                  		jsr	Obj01_ChkRoll
0001981A 205F                       		movea.l	(sp)+,a0
0001981C 157C 0002 0024             		move.b	#2,$24(a2)
00019822 303C 00CC                  		move.w	#$CC,d0
00019826 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001982C                            
0001982C                            loc_19008:
0001982C 4268 0010                  		clr.w	$10(a0)
00019830 4268 0012                  		clr.w	$12(a0)
00019834 5428 0024                  		addq.b	#2,$24(a0)
00019838 6000 FE66                  		bra.w	loc_18E7A
0001983C                            ; ===========================================================================
0001983C FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019846                            		even
00019846 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001984A                            		even
0001984A 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001984E                            		even
0001984E                            ; ===========================================================================
0001984E                            
0001984E                            Obj7B_Explode:				; XREF: Obj7B_Index
0001984E 10BC 003F                  		move.b	#$3F,(a0)
00019852 4228 0024                  		clr.b	$24(a0)
00019856 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001985C 6700                       		beq.s	Obj7B_MakeFrag
0001985E 4E75                       		rts	
00019860                            ; ===========================================================================
00019860                            
00019860                            Obj7B_MakeFrag:
00019860 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019866 7203                       		moveq	#3,d1
00019868 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001986C                            
0001986C                            Obj7B_Loop:
0001986C 4EB9 0000 E164             		jsr	SingleObjLoad
00019872 6600                       		bne.s	loc_1909A
00019874 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019878 137C 000A 0024             		move.b	#$A,$24(a1)
0001987E 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019886 137C 0003 0018             		move.b	#3,$18(a1)
0001988C 337C 0518 0002             		move.w	#$518,2(a1)
00019892 3368 0008 0008             		move.w	8(a0),8(a1)
00019898 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001989E 335A 0010                  		move.w	(a2)+,$10(a1)
000198A2 335A 0012                  		move.w	(a2)+,$12(a1)
000198A6 137C 0098 0020             		move.b	#$98,$20(a1)
000198AC 0029 0004 0001             		ori.b	#4,1(a1)
000198B2 08E9 0007 0001             		bset	#7,1(a1)
000198B8 137C 000C 0019             		move.b	#$C,$19(a1)
000198BE                            
000198BE                            loc_1909A:
000198BE 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
000198C2                            
000198C2 4E75                       		rts	
000198C4                            ; ===========================================================================
000198C4 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
000198C8 FF60 FDC0                  		dc.w $FF60, $FDC0
000198CC 0100 FCC0                  		dc.w $100, $FCC0
000198D0 00A0 FDC0                  		dc.w $A0, $FDC0
000198D4                            ; ===========================================================================
000198D4                            
000198D4                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
000198D4 4EB9 0000 DCB8             		jsr	SpeedToPos
000198DA 3168 0008 0030             		move.w	8(a0),$30(a0)
000198E0 3168 000C 0034             		move.w	$C(a0),$34(a0)
000198E6 0668 0018 0012             		addi.w	#$18,$12(a0)
000198EC 7004                       		moveq	#4,d0
000198EE C078 FE0E                  		and.w	($FFFFFE0E).w,d0
000198F2 E448                       		lsr.w	#2,d0
000198F4 1140 001A                  		move.b	d0,$1A(a0)
000198F8 4A28 0001                  		tst.b	1(a0)
000198FC 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019900 4E75                       		rts	
00019902                            ; ===========================================================================
00019902                            ; ---------------------------------------------------------------------------
00019902                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019902                            ; ---------------------------------------------------------------------------
00019902                            Map_obj7B:
00019902                            	include "_maps\obj7B.asm"
00019902                            ; ---------------------------------------------------------------------------
00019902                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019902                            ; ---------------------------------------------------------------------------
00019902 0000                       		dc.w byte_190E2-Map_obj7B
00019904 0000                       		dc.w byte_190E8-Map_obj7B
00019906 01                         byte_190E2:	dc.b 1
00019907 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001990C 01                         byte_190E8:	dc.b 1
0001990D FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019912                            		even
00019912                            		even
00019912                            
00019912                            ; ===========================================================================
00019912                            ; ---------------------------------------------------------------------------
00019912                            ; Object 75 - Eggman (SYZ)
00019912                            ; ---------------------------------------------------------------------------
00019912                            
00019912                            Obj75:					; XREF: Obj_Index
00019912 7000                       		moveq	#0,d0
00019914 1028 0024                  		move.b	$24(a0),d0
00019918 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001991C 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019920                            ; ===========================================================================
00019920 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019922 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019924 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019926 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019928 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001992A                            
0001992A 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001992D 0401 05                    		dc.b 4,	1, 5
00019930 0607 05                    		dc.b 6,	7, 5
00019933 0800 05                    		dc.b 8,	0, 5
00019936                            ; ===========================================================================
00019936                            
00019936                            Obj75_Main:				; XREF: Obj75_Index
00019936 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001993C 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019942 3168 0008 0030             		move.w	8(a0),$30(a0)
00019948 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001994E 117C 000F 0020             		move.b	#$F,$20(a0)
00019954 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001995A 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001995E 2248                       		movea.l	a0,a1
00019960 7203                       		moveq	#3,d1
00019962 6000                       		bra.s	Obj75_LoadBoss
00019964                            ; ===========================================================================
00019964                            
00019964                            Obj75_Loop:
00019964 4EB9 0000 E17A             		jsr	SingleObjLoad2
0001996A 6600                       		bne.s	Obj75_ShipMain
0001996C 12BC 0075                  		move.b	#$75,(a1)
00019970 3368 0008 0008             		move.w	8(a0),8(a1)
00019976 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001997C                            
0001997C                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001997C 08A8 0000 0022             		bclr	#0,$22(a0)
00019982 4229 0025                  		clr.b	$25(a1)
00019986 135A 0024                  		move.b	(a2)+,$24(a1)
0001998A 135A 001C                  		move.b	(a2)+,$1C(a1)
0001998E 135A 0018                  		move.b	(a2)+,$18(a1)
00019992 237C 0001 853A 0004        		move.l	#Map_Eggman,4(a1)
0001999A 337C 0400 0002             		move.w	#$400,2(a1)
000199A0 137C 0004 0001             		move.b	#4,1(a1)
000199A6 137C 0020 0019             		move.b	#$20,$19(a1)
000199AC 2348 0034                  		move.l	a0,$34(a1)
000199B0 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
000199B4                            
000199B4                            Obj75_ShipMain:				; XREF: Obj75_Index
000199B4 7000                       		moveq	#0,d0
000199B6 1028 0025                  		move.b	$25(a0),d0
000199BA 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
000199BE 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
000199C2 43F9 0001 84EA             		lea	(Ani_Eggman).l,a1
000199C8 4EB9 0000 AD9E             		jsr	AnimateSprite
000199CE 7003                       		moveq	#3,d0
000199D0 C028 0022                  		and.b	$22(a0),d0
000199D4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000199DA 8128 0001                  		or.b	d0,1(a0)
000199DE 4EF9 0000 DCDE             		jmp	DisplaySprite
000199E4                            ; ===========================================================================
000199E4 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
000199E8 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
000199EC 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
000199F0                            ; ===========================================================================
000199F0                            
000199F0                            loc_191CC:				; XREF: Obj75_ShipIndex
000199F0 317C FF00 0010             		move.w	#-$100,$10(a0)
000199F6 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
000199FC 6400                       		bcc.s	loc_191DE
000199FE 5428 0025                  		addq.b	#2,$25(a0)
00019A02                            
00019A02                            loc_191DE:
00019A02 1028 003F                  		move.b	$3F(a0),d0
00019A06 5428 003F                  		addq.b	#2,$3F(a0)
00019A0A 4EB9 0000 2C64             		jsr	(CalcSine).l
00019A10 E440                       		asr.w	#2,d0
00019A12 3140 0012                  		move.w	d0,$12(a0)
00019A16                            
00019A16                            loc_191F2:
00019A16 6100 E690                  		bsr.w	BossMove
00019A1A 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019A20 3168 0030 0008             		move.w	$30(a0),8(a0)
00019A26                            
00019A26                            loc_19202:
00019A26 3028 0008                  		move.w	8(a0),d0
00019A2A 0440 2C00                  		subi.w	#$2C00,d0
00019A2E EA48                       		lsr.w	#5,d0
00019A30 1140 0034                  		move.b	d0,$34(a0)
00019A34 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019A3A 6400                       		bcc.s	locret_19256
00019A3C 4A28 0022                  		tst.b	$22(a0)
00019A40 6B00                       		bmi.s	loc_19258
00019A42 4A28 0020                  		tst.b	$20(a0)
00019A46 6600                       		bne.s	locret_19256
00019A48 4A28 003E                  		tst.b	$3E(a0)
00019A4C 6600                       		bne.s	loc_1923A
00019A4E 117C 0020 003E             		move.b	#$20,$3E(a0)
00019A54 303C 00AC                  		move.w	#$AC,d0
00019A58 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019A5E                            
00019A5E                            loc_1923A:
00019A5E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019A62 7000                       		moveq	#0,d0
00019A64 4A51                       		tst.w	(a1)
00019A66 6600                       		bne.s	loc_19248
00019A68 303C 0EEE                  		move.w	#$EEE,d0
00019A6C                            
00019A6C                            loc_19248:
00019A6C 3280                       		move.w	d0,(a1)
00019A6E 5328 003E                  		subq.b	#1,$3E(a0)
00019A72 6600                       		bne.s	locret_19256
00019A74 117C 000F 0020             		move.b	#$F,$20(a0)
00019A7A                            
00019A7A                            locret_19256:
00019A7A 4E75                       		rts	
00019A7C                            ; ===========================================================================
00019A7C                            
00019A7C                            loc_19258:				; XREF: loc_19202
00019A7C 7064                       		moveq	#100,d0
00019A7E 6100 0000                  		bsr.w	AddPoints
00019A82 117C 0006 0025             		move.b	#6,$25(a0)
00019A88 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019A8E 4268 0010                  		clr.w	$10(a0)
00019A92 4E75                       		rts	
00019A94                            ; ===========================================================================
00019A94                            
00019A94                            loc_19270:				; XREF: Obj75_ShipIndex
00019A94 3028 0030                  		move.w	$30(a0),d0
00019A98 317C 0140 0010             		move.w	#$140,$10(a0)
00019A9E 0828 0000 0022             		btst	#0,$22(a0)
00019AA4 6600                       		bne.s	loc_1928E
00019AA6 4468 0010                  		neg.w	$10(a0)
00019AAA 0C40 2C08                  		cmpi.w	#$2C08,d0
00019AAE 6E00                       		bgt.s	loc_1929E
00019AB0 6000                       		bra.s	loc_19294
00019AB2                            ; ===========================================================================
00019AB2                            
00019AB2                            loc_1928E:
00019AB2 0C40 2D38                  		cmpi.w	#$2D38,d0
00019AB6 6D00                       		blt.s	loc_1929E
00019AB8                            
00019AB8                            loc_19294:
00019AB8 0868 0000 0022             		bchg	#0,$22(a0)
00019ABE 4228 003D                  		clr.b	$3D(a0)
00019AC2                            
00019AC2                            loc_1929E:
00019AC2 0440 2C10                  		subi.w	#$2C10,d0
00019AC6 0240 001F                  		andi.w	#$1F,d0
00019ACA 0440 001F                  		subi.w	#$1F,d0
00019ACE 6A00                       		bpl.s	loc_192AE
00019AD0 4440                       		neg.w	d0
00019AD2                            
00019AD2                            loc_192AE:
00019AD2 5340                       		subq.w	#1,d0
00019AD4 6E00                       		bgt.s	loc_192E8
00019AD6 4A28 003D                  		tst.b	$3D(a0)
00019ADA 6600                       		bne.s	loc_192E8
00019ADC 3238 D008                  		move.w	($FFFFD008).w,d1
00019AE0 0441 2C00                  		subi.w	#$2C00,d1
00019AE4 EA41                       		asr.w	#5,d1
00019AE6 B228 0034                  		cmp.b	$34(a0),d1
00019AEA 6600                       		bne.s	loc_192E8
00019AEC 7000                       		moveq	#0,d0
00019AEE 1028 0034                  		move.b	$34(a0),d0
00019AF2 EB40                       		asl.w	#5,d0
00019AF4 0640 2C10                  		addi.w	#$2C10,d0
00019AF8 3140 0030                  		move.w	d0,$30(a0)
00019AFC 6100 0000                  		bsr.w	Obj75_FindBlocks
00019B00 5428 0025                  		addq.b	#2,$25(a0)
00019B04 4268 0028                  		clr.w	$28(a0)
00019B08 4268 0010                  		clr.w	$10(a0)
00019B0C                            
00019B0C                            loc_192E8:
00019B0C 6000 FEF4                  		bra.w	loc_191DE
00019B10                            ; ===========================================================================
00019B10                            
00019B10                            loc_192EC:				; XREF: Obj75_ShipIndex
00019B10 7000                       		moveq	#0,d0
00019B12 1028 0028                  		move.b	$28(a0),d0
00019B16 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019B1A 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019B1E                            ; ===========================================================================
00019B1E 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019B20 0000                       		dc.w loc_19348-off_192FA
00019B22 0000                       		dc.w loc_1938E-off_192FA
00019B24 0000                       		dc.w loc_193D0-off_192FA
00019B26                            ; ===========================================================================
00019B26                            
00019B26                            loc_19302:				; XREF: off_192FA
00019B26 317C 0180 0012             		move.w	#$180,$12(a0)
00019B2C 3028 0038                  		move.w	$38(a0),d0
00019B30 0C40 0556                  		cmpi.w	#$556,d0
00019B34 6500                       		bcs.s	loc_19344
00019B36 317C 0556 0038             		move.w	#$556,$38(a0)
00019B3C 4268 003C                  		clr.w	$3C(a0)
00019B40 70FF                       		moveq	#-1,d0
00019B42 3028 0036                  		move.w	$36(a0),d0
00019B46 6700                       		beq.s	loc_1933C
00019B48 2240                       		movea.l	d0,a1
00019B4A 137C 00FF 0029             		move.b	#-1,$29(a1)
00019B50 117C 00FF 0029             		move.b	#-1,$29(a0)
00019B56 2348 0034                  		move.l	a0,$34(a1)
00019B5A 317C 0032 003C             		move.w	#$32,$3C(a0)
00019B60                            
00019B60                            loc_1933C:
00019B60 4268 0012                  		clr.w	$12(a0)
00019B64 5428 0028                  		addq.b	#2,$28(a0)
00019B68                            
00019B68                            loc_19344:
00019B68 6000 FEAC                  		bra.w	loc_191F2
00019B6C                            ; ===========================================================================
00019B6C                            
00019B6C                            loc_19348:				; XREF: off_192FA
00019B6C 5368 003C                  		subq.w	#1,$3C(a0)
00019B70 6A00                       		bpl.s	loc_19366
00019B72 5428 0028                  		addq.b	#2,$28(a0)
00019B76 317C F800 0012             		move.w	#-$800,$12(a0)
00019B7C 4A68 0036                  		tst.w	$36(a0)
00019B80 6600                       		bne.s	loc_19362
00019B82 E0E8 0012                  		asr	$12(a0)
00019B86                            
00019B86                            loc_19362:
00019B86 7000                       		moveq	#0,d0
00019B88 6000                       		bra.s	loc_1937C
00019B8A                            ; ===========================================================================
00019B8A                            
00019B8A                            loc_19366:
00019B8A 7000                       		moveq	#0,d0
00019B8C 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019B92 6E00                       		bgt.s	loc_1937C
00019B94 7002                       		moveq	#2,d0
00019B96 0828 0001 003D             		btst	#1,$3D(a0)
00019B9C 6700                       		beq.s	loc_1937C
00019B9E 4440                       		neg.w	d0
00019BA0                            
00019BA0                            loc_1937C:
00019BA0 D068 0038                  		add.w	$38(a0),d0
00019BA4 3140 000C                  		move.w	d0,$C(a0)
00019BA8 3168 0030 0008             		move.w	$30(a0),8(a0)
00019BAE 6000 FE76                  		bra.w	loc_19202
00019BB2                            ; ===========================================================================
00019BB2                            
00019BB2                            loc_1938E:				; XREF: off_192FA
00019BB2 303C 04DA                  		move.w	#$4DA,d0
00019BB6 4A68 0036                  		tst.w	$36(a0)
00019BBA 6700                       		beq.s	loc_1939C
00019BBC 0440 0018                  		subi.w	#$18,d0
00019BC0                            
00019BC0                            loc_1939C:
00019BC0 B068 0038                  		cmp.w	$38(a0),d0
00019BC4 6D00                       		blt.s	loc_193BE
00019BC6 317C 0008 003C             		move.w	#8,$3C(a0)
00019BCC 4A68 0036                  		tst.w	$36(a0)
00019BD0 6700                       		beq.s	loc_193B4
00019BD2 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019BD8                            
00019BD8                            loc_193B4:
00019BD8 5428 0028                  		addq.b	#2,$28(a0)
00019BDC 4268 0012                  		clr.w	$12(a0)
00019BE0 6000                       		bra.s	loc_193CC
00019BE2                            ; ===========================================================================
00019BE2                            
00019BE2                            loc_193BE:
00019BE2 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019BE8 6C00                       		bge.s	loc_193CC
00019BEA 0668 000C 0012             		addi.w	#$C,$12(a0)
00019BF0                            
00019BF0                            loc_193CC:
00019BF0 6000 FE24                  		bra.w	loc_191F2
00019BF4                            ; ===========================================================================
00019BF4                            
00019BF4                            loc_193D0:				; XREF: off_192FA
00019BF4 5368 003C                  		subq.w	#1,$3C(a0)
00019BF8 6E00                       		bgt.s	loc_19406
00019BFA 6B00                       		bmi.s	loc_193EE
00019BFC 70FF                       		moveq	#-1,d0
00019BFE 3028 0036                  		move.w	$36(a0),d0
00019C02 6700                       		beq.s	loc_193E8
00019C04 2240                       		movea.l	d0,a1
00019C06 137C 000A 0029             		move.b	#$A,$29(a1)
00019C0C                            
00019C0C                            loc_193E8:
00019C0C 4268 0036                  		clr.w	$36(a0)
00019C10 6000                       		bra.s	loc_19406
00019C12                            ; ===========================================================================
00019C12                            
00019C12                            loc_193EE:
00019C12 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019C18 6600                       		bne.s	loc_19406
00019C1A 4228 0029                  		clr.b	$29(a0)
00019C1E 5528 0025                  		subq.b	#2,$25(a0)
00019C22 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019C28 6000                       		bra.s	loc_19446
00019C2A                            ; ===========================================================================
00019C2A                            
00019C2A                            loc_19406:
00019C2A 7001                       		moveq	#1,d0
00019C2C 4A68 0036                  		tst.w	$36(a0)
00019C30 6700                       		beq.s	loc_19410
00019C32 7002                       		moveq	#2,d0
00019C34                            
00019C34                            loc_19410:
00019C34 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019C3A 6700                       		beq.s	loc_19424
00019C3C 6D00                       		blt.s	loc_1941C
00019C3E 4440                       		neg.w	d0
00019C40                            
00019C40                            loc_1941C:
00019C40 4A68 0036                  		tst.w	$36(a0)
00019C44 D168 0038                  		add.w	d0,$38(a0)
00019C48                            
00019C48                            loc_19424:
00019C48 7000                       		moveq	#0,d0
00019C4A 4A68 0036                  		tst.w	$36(a0)
00019C4E 6700                       		beq.s	loc_19438
00019C50 7002                       		moveq	#2,d0
00019C52 0828 0000 003D             		btst	#0,$3D(a0)
00019C58 6700                       		beq.s	loc_19438
00019C5A 4440                       		neg.w	d0
00019C5C                            
00019C5C                            loc_19438:
00019C5C D068 0038                  		add.w	$38(a0),d0
00019C60 3140 000C                  		move.w	d0,$C(a0)
00019C64 3168 0030 0008             		move.w	$30(a0),8(a0)
00019C6A                            
00019C6A                            loc_19446:
00019C6A 6000 FDBA                  		bra.w	loc_19202
00019C6E                            
00019C6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019C6E                            
00019C6E                            
00019C6E                            Obj75_FindBlocks:			; XREF: loc_192AE
00019C6E 4268 0036                  		clr.w	$36(a0)
00019C72 43F8 D040                  		lea	($FFFFD040).w,a1
00019C76 703E                       		moveq	#$3E,d0
00019C78 7276                       		moveq	#$76,d1
00019C7A 1428 0034                  		move.b	$34(a0),d2
00019C7E                            
00019C7E                            Obj75_FindLoop:
00019C7E B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019C80 6600                       		bne.s	loc_1946A	; if not, branch
00019C82 B429 0028                  		cmp.b	$28(a1),d2
00019C86 6600                       		bne.s	loc_1946A
00019C88 3149 0036                  		move.w	a1,$36(a0)
00019C8C 6000                       		bra.s	locret_19472
00019C8E                            ; ===========================================================================
00019C8E                            
00019C8E                            loc_1946A:
00019C8E 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019C92 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019C96                            
00019C96                            locret_19472:
00019C96 4E75                       		rts	
00019C98                            ; End of function Obj75_FindBlocks
00019C98                            
00019C98                            ; ===========================================================================
00019C98                            
00019C98                            loc_19474:				; XREF: Obj75_ShipIndex
00019C98 5368 003C                  		subq.w	#1,$3C(a0)
00019C9C 6B00                       		bmi.s	loc_1947E
00019C9E 6000 E3C6                  		bra.w	BossDefeated
00019CA2                            ; ===========================================================================
00019CA2                            
00019CA2                            loc_1947E:
00019CA2 5428 0025                  		addq.b	#2,$25(a0)
00019CA6 4268 0012                  		clr.w	$12(a0)
00019CAA 08E8 0000 0022             		bset	#0,$22(a0)
00019CB0 08A8 0007 0022             		bclr	#7,$22(a0)
00019CB6 4268 0010                  		clr.w	$10(a0)
00019CBA 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019CC0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019CC4 6600                       		bne.s	loc_194A8
00019CC6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019CCC                            
00019CCC                            loc_194A8:
00019CCC 6000 FD58                  		bra.w	loc_19202
00019CD0                            ; ===========================================================================
00019CD0                            
00019CD0                            loc_194AC:				; XREF: Obj75_ShipIndex
00019CD0 5268 003C                  		addq.w	#1,$3C(a0)
00019CD4 6700                       		beq.s	loc_194BC
00019CD6 6A00                       		bpl.s	loc_194C2
00019CD8 0668 0018 0012             		addi.w	#$18,$12(a0)
00019CDE 6000                       		bra.s	loc_194EE
00019CE0                            ; ===========================================================================
00019CE0                            
00019CE0                            loc_194BC:
00019CE0 4268 0012                  		clr.w	$12(a0)
00019CE4 6000                       		bra.s	loc_194EE
00019CE6                            ; ===========================================================================
00019CE6                            
00019CE6                            loc_194C2:
00019CE6 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019CEC 6500                       		bcs.s	loc_194DA
00019CEE 6700                       		beq.s	loc_194E0
00019CF0 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019CF6 6500                       		bcs.s	loc_194EE
00019CF8 5428 0025                  		addq.b	#2,$25(a0)
00019CFC 6000                       		bra.s	loc_194EE
00019CFE                            ; ===========================================================================
00019CFE                            
00019CFE                            loc_194DA:
00019CFE 5168 0012                  		subq.w	#8,$12(a0)
00019D02 6000                       		bra.s	loc_194EE
00019D04                            ; ===========================================================================
00019D04                            
00019D04                            loc_194E0:
00019D04 4268 0012                  		clr.w	$12(a0)
00019D08 303C 0085                  		move.w	#$85,d0
00019D0C 4EB9 0000 15BA             		jsr	(PlaySound).l	; play SYZ music
00019D12                            
00019D12                            loc_194EE:
00019D12 6000 FD02                  		bra.w	loc_191F2
00019D16                            ; ===========================================================================
00019D16                            
00019D16                            loc_194F2:				; XREF: Obj75_ShipIndex
00019D16 317C 0400 0010             		move.w	#$400,$10(a0)
00019D1C 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019D22 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019D28 6400                       		bcc.s	loc_1950C
00019D2A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019D2E 6000                       		bra.s	loc_19512
00019D30                            ; ===========================================================================
00019D30                            
00019D30                            loc_1950C:
00019D30 4A28 0001                  		tst.b	1(a0)
00019D34 6A00                       		bpl.s	Obj75_ShipDelete
00019D36                            
00019D36                            loc_19512:
00019D36 6100 E370                  		bsr.w	BossMove
00019D3A 6000 FCC6                  		bra.w	loc_191DE
00019D3E                            ; ===========================================================================
00019D3E                            
00019D3E                            Obj75_ShipDelete:
00019D3E 4EF9 0000 DD1A             		jmp	DeleteObject
00019D44                            ; ===========================================================================
00019D44                            
00019D44                            Obj75_FaceMain:				; XREF: Obj75_Index
00019D44 7201                       		moveq	#1,d1
00019D46 2268 0034                  		movea.l	$34(a0),a1
00019D4A 7000                       		moveq	#0,d0
00019D4C 1029 0025                  		move.b	$25(a1),d0
00019D50 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019D54 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019D58 1141 001C                  		move.b	d1,$1C(a0)
00019D5C 1010                       		move.b	(a0),d0
00019D5E B011                       		cmp.b	(a1),d0
00019D60 6600                       		bne.s	Obj75_FaceDelete
00019D62 6000                       		bra.s	loc_195BE
00019D64                            ; ===========================================================================
00019D64                            
00019D64                            Obj75_FaceDelete:
00019D64 4EF9 0000 DD1A             		jmp	DeleteObject
00019D6A                            ; ===========================================================================
00019D6A 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019D6E 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019D72 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019D76                            ; ===========================================================================
00019D76                            
00019D76                            loc_19552:				; XREF: off_19546
00019D76 720A                       		moveq	#$A,d1
00019D78 4E75                       		rts	
00019D7A                            ; ===========================================================================
00019D7A                            
00019D7A                            loc_19556:				; XREF: off_19546
00019D7A 7206                       		moveq	#6,d1
00019D7C 4E75                       		rts	
00019D7E                            ; ===========================================================================
00019D7E                            
00019D7E                            loc_1955A:				; XREF: off_19546
00019D7E 7000                       		moveq	#0,d0
00019D80 1029 0028                  		move.b	$28(a1),d0
00019D84 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019D88 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019D8C                            ; ===========================================================================
00019D8C 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019D90 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019D94                            ; ===========================================================================
00019D94                            
00019D94                            loc_19570:				; XREF: off_19568
00019D94 6000                       		bra.s	loc_19574
00019D96                            ; ===========================================================================
00019D96                            
00019D96                            loc_19572:				; XREF: off_19568
00019D96 7206                       		moveq	#6,d1
00019D98                            
00019D98                            loc_19574:				; XREF: off_19546
00019D98 4A29 0020                  		tst.b	$20(a1)
00019D9C 6600                       		bne.s	loc_1957E
00019D9E 7205                       		moveq	#5,d1
00019DA0 4E75                       		rts	
00019DA2                            ; ===========================================================================
00019DA2                            
00019DA2                            loc_1957E:
00019DA2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019DA8 6500                       		bcs.s	locret_19588
00019DAA 7204                       		moveq	#4,d1
00019DAC                            
00019DAC                            locret_19588:
00019DAC 4E75                       		rts	
00019DAE                            ; ===========================================================================
00019DAE                            
00019DAE                            Obj75_FlameMain:			; XREF: Obj75_Index
00019DAE 117C 0007 001C             		move.b	#7,$1C(a0)
00019DB4 2268 0034                  		movea.l	$34(a0),a1
00019DB8 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019DBE 6600                       		bne.s	loc_195AA
00019DC0 117C 000B 001C             		move.b	#$B,$1C(a0)
00019DC6 4A28 0001                  		tst.b	1(a0)
00019DCA 6A00                       		bpl.s	Obj75_FlameDelete
00019DCC 6000                       		bra.s	loc_195B6
00019DCE                            ; ===========================================================================
00019DCE                            
00019DCE                            loc_195AA:
00019DCE 4A69 0010                  		tst.w	$10(a1)
00019DD2 6700                       		beq.s	loc_195B6
00019DD4 117C 0008 001C             		move.b	#8,$1C(a0)
00019DDA                            
00019DDA                            loc_195B6:
00019DDA 6000                       		bra.s	loc_195BE
00019DDC                            ; ===========================================================================
00019DDC                            
00019DDC                            Obj75_FlameDelete:
00019DDC 4EF9 0000 DD1A             		jmp	DeleteObject
00019DE2                            ; ===========================================================================
00019DE2                            
00019DE2                            loc_195BE:
00019DE2 43F9 0001 84EA             		lea	(Ani_Eggman).l,a1
00019DE8 4EB9 0000 AD9E             		jsr	AnimateSprite
00019DEE 2268 0034                  		movea.l	$34(a0),a1
00019DF2 3169 0008 0008             		move.w	8(a1),8(a0)
00019DF8 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019DFE                            
00019DFE                            loc_195DA:
00019DFE 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019E04 7003                       		moveq	#3,d0
00019E06 C028 0022                  		and.b	$22(a0),d0
00019E0A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019E10 8128 0001                  		or.b	d0,1(a0)
00019E14 4EF9 0000 DCDE             		jmp	DisplaySprite
00019E1A                            ; ===========================================================================
00019E1A                            
00019E1A                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019E1A 217C 0001 8602 0004        		move.l	#Map_BossItems,4(a0)
00019E22 317C 246C 0002             		move.w	#$246C,2(a0)
00019E28 117C 0005 001A             		move.b	#5,$1A(a0)
00019E2E 2268 0034                  		movea.l	$34(a0),a1
00019E32 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019E38 6600                       		bne.s	loc_1961C
00019E3A 4A28 0001                  		tst.b	1(a0)
00019E3E 6A00                       		bpl.s	Obj75_SpikeDelete
00019E40                            
00019E40                            loc_1961C:
00019E40 3169 0008 0008             		move.w	8(a1),8(a0)
00019E46 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019E4C 3028 003C                  		move.w	$3C(a0),d0
00019E50 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019E56 6600                       		bne.s	loc_19652
00019E58 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019E5E 6700                       		beq.s	loc_1964C
00019E60 4A29 0028                  		tst.b	$28(a1)
00019E64 6600                       		bne.s	loc_19658
00019E66 0C40 0094                  		cmpi.w	#$94,d0
00019E6A 6C00                       		bge.s	loc_19658
00019E6C 5E40                       		addq.w	#7,d0
00019E6E 6000                       		bra.s	loc_19658
00019E70                            ; ===========================================================================
00019E70                            
00019E70                            loc_1964C:
00019E70 4A69 003C                  		tst.w	$3C(a1)
00019E74 6A00                       		bpl.s	loc_19658
00019E76                            
00019E76                            loc_19652:
00019E76 4A40                       		tst.w	d0
00019E78 6F00                       		ble.s	loc_19658
00019E7A 5B40                       		subq.w	#5,d0
00019E7C                            
00019E7C                            loc_19658:
00019E7C 3140 003C                  		move.w	d0,$3C(a0)
00019E80 E440                       		asr.w	#2,d0
00019E82 D168 000C                  		add.w	d0,$C(a0)
00019E86 117C 0008 0019             		move.b	#8,$19(a0)
00019E8C 117C 000C 0016             		move.b	#$C,$16(a0)
00019E92 4228 0020                  		clr.b	$20(a0)
00019E96 2268 0034                  		movea.l	$34(a0),a1
00019E9A 4A29 0020                  		tst.b	$20(a1)
00019E9E 6700                       		beq.s	loc_19688
00019EA0 4A29 0029                  		tst.b	$29(a1)
00019EA4 6600                       		bne.s	loc_19688
00019EA6 117C 0084 0020             		move.b	#$84,$20(a0)
00019EAC                            
00019EAC                            loc_19688:
00019EAC 6000 FF50                  		bra.w	loc_195DA
00019EB0                            ; ===========================================================================
00019EB0                            
00019EB0                            Obj75_SpikeDelete:
00019EB0 4EF9 0000 DD1A             		jmp	DeleteObject
00019EB6                            ; ===========================================================================
00019EB6                            ; ---------------------------------------------------------------------------
00019EB6                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019EB6                            ; ---------------------------------------------------------------------------
00019EB6                            
00019EB6                            Obj76:					; XREF: Obj_Index
00019EB6 7000                       		moveq	#0,d0
00019EB8 1028 0024                  		move.b	$24(a0),d0
00019EBC 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019EC0 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019EC4                            ; ===========================================================================
00019EC4 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019EC6 0000                       		dc.w Obj76_Action-Obj76_Index
00019EC8 0000                       		dc.w loc_19762-Obj76_Index
00019ECA                            ; ===========================================================================
00019ECA                            
00019ECA                            Obj76_Main:				; XREF: Obj76_Index
00019ECA 7800                       		moveq	#0,d4
00019ECC 3A3C 2C10                  		move.w	#$2C10,d5
00019ED0 7C09                       		moveq	#9,d6
00019ED2 43D0                       		lea	(a0),a1
00019ED4 6000                       		bra.s	Obj76_MakeBlock
00019ED6                            ; ===========================================================================
00019ED6                            
00019ED6                            Obj76_Loop:
00019ED6 4EB9 0000 E164             		jsr	SingleObjLoad
00019EDC 6600                       		bne.s	Obj76_ExitLoop
00019EDE                            
00019EDE                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019EDE 12BC 0076                  		move.b	#$76,(a1)
00019EE2 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00019EEA 337C 4000 0002             		move.w	#$4000,2(a1)
00019EF0 137C 0004 0001             		move.b	#4,1(a1)
00019EF6 137C 0010 0019             		move.b	#$10,$19(a1)
00019EFC 137C 0010 0016             		move.b	#$10,$16(a1)
00019F02 137C 0003 0018             		move.b	#3,$18(a1)
00019F08 3345 0008                  		move.w	d5,8(a1)	; set x-position
00019F0C 337C 0582 000C             		move.w	#$582,$C(a1)
00019F12 3344 0028                  		move.w	d4,$28(a1)
00019F16 0644 0101                  		addi.w	#$101,d4
00019F1A 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019F1E 5429 0024                  		addq.b	#2,$24(a1)
00019F22 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019F26                            
00019F26                            Obj76_ExitLoop:
00019F26 4E75                       		rts	
00019F28                            ; ===========================================================================
00019F28                            
00019F28                            Obj76_Action:				; XREF: Obj76_Index
00019F28 1028 0029                  		move.b	$29(a0),d0
00019F2C B028 0028                  		cmp.b	$28(a0),d0
00019F30 6700                       		beq.s	Obj76_Solid
00019F32 4A00                       		tst.b	d0
00019F34 6B00                       		bmi.s	loc_19718
00019F36                            
00019F36                            loc_19712:
00019F36 6100 0000                  		bsr.w	Obj76_Break
00019F3A 6000                       		bra.s	Obj76_Display
00019F3C                            ; ===========================================================================
00019F3C                            
00019F3C                            loc_19718:
00019F3C 2268 0034                  		movea.l	$34(a0),a1
00019F40 4A29 0021                  		tst.b	$21(a1)
00019F44 67F0                       		beq.s	loc_19712
00019F46 3169 0008 0008             		move.w	8(a1),8(a0)
00019F4C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019F52 0668 002C 000C             		addi.w	#$2C,$C(a0)
00019F58 B2C8                       		cmpa.w	a0,a1
00019F5A 6500                       		bcs.s	Obj76_Display
00019F5C 3029 0012                  		move.w	$12(a1),d0
00019F60 48C0                       		ext.l	d0
00019F62 E080                       		asr.l	#8,d0
00019F64 D168 000C                  		add.w	d0,$C(a0)
00019F68 6000                       		bra.s	Obj76_Display
00019F6A                            ; ===========================================================================
00019F6A                            
00019F6A                            Obj76_Solid:				; XREF: Obj76_Action
00019F6A 323C 001B                  		move.w	#$1B,d1
00019F6E 343C 0010                  		move.w	#$10,d2
00019F72 363C 0011                  		move.w	#$11,d3
00019F76 3828 0008                  		move.w	8(a0),d4
00019F7A 4EB9 0001 00AE             		jsr	SolidObject
00019F80                            
00019F80                            Obj76_Display:				; XREF: Obj76_Action
00019F80 4EF9 0000 DCDE             		jmp	DisplaySprite
00019F86                            ; ===========================================================================
00019F86                            
00019F86                            loc_19762:				; XREF: Obj76_Index
00019F86 4A28 0001                  		tst.b	1(a0)
00019F8A 6A00                       		bpl.s	Obj76_Delete
00019F8C 4EB9 0000 DC8C             		jsr	ObjectFall
00019F92 4EF9 0000 DCDE             		jmp	DisplaySprite
00019F98                            ; ===========================================================================
00019F98                            
00019F98                            Obj76_Delete:
00019F98 4EF9 0000 DD1A             		jmp	DeleteObject
00019F9E                            
00019F9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019F9E                            
00019F9E                            
00019F9E                            Obj76_Break:				; XREF: Obj76_Action
00019F9E 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019FA2 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00019FA6 7801                       		moveq	#1,d4
00019FA8 7203                       		moveq	#3,d1
00019FAA 7438                       		moveq	#$38,d2
00019FAC 5428 0024                  		addq.b	#2,$24(a0)
00019FB0 117C 0008 0019             		move.b	#8,$19(a0)
00019FB6 117C 0008 0016             		move.b	#8,$16(a0)
00019FBC 43D0                       		lea	(a0),a1
00019FBE 6000                       		bra.s	Obj76_MakeFrag
00019FC0                            ; ===========================================================================
00019FC0                            
00019FC0                            Obj76_LoopFrag:
00019FC0 4EB9 0000 E17A             		jsr	SingleObjLoad2
00019FC6 6600                       		bne.s	loc_197D4
00019FC8                            
00019FC8                            Obj76_MakeFrag:
00019FC8 45D0                       		lea	(a0),a2
00019FCA 47D1                       		lea	(a1),a3
00019FCC 7603                       		moveq	#3,d3
00019FCE                            
00019FCE                            loc_197AA:
00019FCE 26DA                       		move.l	(a2)+,(a3)+
00019FD0 26DA                       		move.l	(a2)+,(a3)+
00019FD2 26DA                       		move.l	(a2)+,(a3)+
00019FD4 26DA                       		move.l	(a2)+,(a3)+
00019FD6 51CB FFF6                  		dbf	d3,loc_197AA
00019FDA                            
00019FDA 335C 0010                  		move.w	(a4)+,$10(a1)
00019FDE 335C 0012                  		move.w	(a4)+,$12(a1)
00019FE2 361D                       		move.w	(a5)+,d3
00019FE4 D769 0008                  		add.w	d3,8(a1)
00019FE8 361D                       		move.w	(a5)+,d3
00019FEA D769 000C                  		add.w	d3,$C(a1)
00019FEE 1344 001A                  		move.b	d4,$1A(a1)
00019FF2 5244                       		addq.w	#1,d4
00019FF4 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
00019FF8                            
00019FF8                            loc_197D4:
00019FF8 303C 00CB                  		move.w	#$CB,d0
00019FFC 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A002                            ; End of function Obj76_Break
0001A002                            
0001A002                            ; ===========================================================================
0001A002 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A006 0180 FE00                  		dc.w $180, $FE00
0001A00A FF00 FF00                  		dc.w $FF00, $FF00
0001A00E 0100 FF00                  		dc.w $100, $FF00
0001A012 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A016 0010 0000                  		dc.w $10, 0
0001A01A 0000 0010                  		dc.w 0,	$10
0001A01E 0010 0010                  		dc.w $10, $10
0001A022                            ; ---------------------------------------------------------------------------
0001A022                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A022                            ; ---------------------------------------------------------------------------
0001A022                            Map_obj76:
0001A022                            	include "_maps\obj76.asm"
0001A022                            ; ---------------------------------------------------------------------------
0001A022                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A022                            ; ---------------------------------------------------------------------------
0001A022 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A026 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A02A 0000                       		dc.w byte_19826-Map_obj76
0001A02C 02                         byte_19808:	dc.b 2
0001A02D F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A032 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A037 00                         		dc.b 0
0001A038 01                         byte_19814:	dc.b 1
0001A039 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A03E 01                         byte_1981A:	dc.b 1
0001A03F F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A044 01                         byte_19820:	dc.b 1
0001A045 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A04A 01                         byte_19826:	dc.b 1
0001A04B F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A050                            		even
0001A050                            		even
0001A050                            
0001A050                            ; ===========================================================================
0001A050                            
0001A050                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A050 4EF9 0000 DD1A             		jmp	DeleteObject
0001A056                            ; ===========================================================================
0001A056                            ; ---------------------------------------------------------------------------
0001A056                            ; Object 82 - Eggman (SBZ2)
0001A056                            ; ---------------------------------------------------------------------------
0001A056                            
0001A056                            Obj82:					; XREF: Obj_Index
0001A056 7000                       		moveq	#0,d0
0001A058 1028 0024                  		move.b	$24(a0),d0
0001A05C 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A060 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A064                            ; ===========================================================================
0001A064 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A066 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A068 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A06A                            
0001A06A 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A06D 0400 03                    		dc.b 4,	0, 3
0001A070                            ; ===========================================================================
0001A070                            
0001A070                            Obj82_Main:				; XREF: Obj82_Index
0001A070 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A074 317C 2160 0008             		move.w	#$2160,8(a0)
0001A07A 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A080 117C 000F 0020             		move.b	#$F,$20(a0)
0001A086 117C 0010 0021             		move.b	#$10,$21(a0)
0001A08C 08A8 0000 0022             		bclr	#0,$22(a0)
0001A092 4228 0025                  		clr.b	$25(a0)
0001A096 115A 0024                  		move.b	(a2)+,$24(a0)
0001A09A 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A09E 115A 0018                  		move.b	(a2)+,$18(a0)
0001A0A2 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A0AA 317C 0400 0002             		move.w	#$400,2(a0)
0001A0B0 117C 0004 0001             		move.b	#4,1(a0)
0001A0B6 08E8 0007 0001             		bset	#7,1(a0)
0001A0BC 117C 0020 0019             		move.b	#$20,$19(a0)
0001A0C2 4EB9 0000 E17A             		jsr	SingleObjLoad2
0001A0C8 6600                       		bne.s	Obj82_Eggman
0001A0CA 2348 0034                  		move.l	a0,$34(a1)
0001A0CE 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A0D2 337C 2130 0008             		move.w	#$2130,8(a1)
0001A0D8 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A0DE 4228 0025                  		clr.b	$25(a0)
0001A0E2 135A 0024                  		move.b	(a2)+,$24(a1)
0001A0E6 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A0EA 135A 0018                  		move.b	(a2)+,$18(a1)
0001A0EE 237C 0000 C4D2 0004        		move.l	#Map_obj32,4(a1)
0001A0F6 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A0FC 137C 0004 0001             		move.b	#4,1(a1)
0001A102 08E9 0007 0001             		bset	#7,1(a1)
0001A108 137C 0010 0019             		move.b	#$10,$19(a1)
0001A10E 137C 0000 001A             		move.b	#0,$1A(a1)
0001A114                            
0001A114                            Obj82_Eggman:				; XREF: Obj82_Index
0001A114 7000                       		moveq	#0,d0
0001A116 1028 0025                  		move.b	$25(a0),d0
0001A11A 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A11E 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A122 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A126 4EB9 0000 AD9E             		jsr	AnimateSprite
0001A12C 4EF9 0000 DCDE             		jmp	DisplaySprite
0001A132                            ; ===========================================================================
0001A132 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A134 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A136 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A138 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A13A                            ; ===========================================================================
0001A13A                            
0001A13A                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A13A 3028 0008                  		move.w	8(a0),d0
0001A13E 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A142 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A146 6400                       		bcc.s	loc_19934	; if not, branch
0001A148 5428 0025                  		addq.b	#2,$25(a0)
0001A14C 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A152 117C 0001 001C             		move.b	#1,$1C(a0)
0001A158                            
0001A158                            loc_19934:				; XREF: Obj82_EggIndex
0001A158 4EF9 0000 DCB8             		jmp	SpeedToPos
0001A15E                            ; ===========================================================================
0001A15E                            
0001A15E                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A15E 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A162 6600                       		bne.s	loc_19954	; if time remains, branch
0001A164 5428 0025                  		addq.b	#2,$25(a0)
0001A168 117C 0002 001C             		move.b	#2,$1C(a0)
0001A16E 5868 000C                  		addq.w	#4,$C(a0)
0001A172 317C 000F 003C             		move.w	#15,$3C(a0)
0001A178                            
0001A178                            loc_19954:
0001A178 60DE                       		bra.s	loc_19934
0001A17A                            ; ===========================================================================
0001A17A                            
0001A17A                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A17A 5368 003C                  		subq.w	#1,$3C(a0)
0001A17E 6E00                       		bgt.s	loc_199D0
0001A180 6600                       		bne.s	loc_1996A
0001A182 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A188 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A18E                            
0001A18E                            loc_1996A:
0001A18E 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A194 6E00                       		bgt.s	loc_19976
0001A196 4268 0010                  		clr.w	$10(a0)
0001A19A                            
0001A19A                            loc_19976:
0001A19A 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A1A0 4A68 0012                  		tst.w	$12(a0)
0001A1A4 6B00                       		bmi.s	Obj82_FindBlocks
0001A1A6 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A1AC 6500                       		bcs.s	Obj82_FindBlocks
0001A1AE 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A1B4 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A1BA 6500                       		bcs.s	Obj82_FindBlocks
0001A1BC 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A1C2 4268 0012                  		clr.w	$12(a0)
0001A1C6                            
0001A1C6                            Obj82_FindBlocks:
0001A1C6 3028 0010                  		move.w	$10(a0),d0
0001A1CA 8068 0012                  		or.w	$12(a0),d0
0001A1CE 6600                       		bne.s	loc_199D0
0001A1D0 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A1D4 703E                       		moveq	#$3E,d0
0001A1D6 7240                       		moveq	#$40,d1
0001A1D8                            
0001A1D8                            Obj82_FindLoop:	
0001A1D8 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A1DA 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A1DE 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A1E2                            
0001A1E2 6600                       		bne.s	loc_199D0
0001A1E4 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A1EA 5428 0025                  		addq.b	#2,$25(a0)
0001A1EE 117C 0001 001C             		move.b	#1,$1C(a0)
0001A1F4                            
0001A1F4                            loc_199D0:
0001A1F4 6000 FF62                  		bra.w	loc_19934
0001A1F8                            ; ===========================================================================
0001A1F8                            
0001A1F8                            Obj82_Switch:				; XREF: Obj82_Index
0001A1F8 7000                       		moveq	#0,d0
0001A1FA 1028 0025                  		move.b	$25(a0),d0
0001A1FE 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A202 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A206                            ; ===========================================================================
0001A206 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A208 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A20A                            ; ===========================================================================
0001A20A                            
0001A20A                            loc_199E6:				; XREF: Obj82_SwIndex
0001A20A 2268 0034                  		movea.l	$34(a0),a1
0001A20E 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A214 6600                       		bne.s	Obj82_SwDisplay
0001A216 117C 0001 001A             		move.b	#1,$1A(a0)
0001A21C 5428 0025                  		addq.b	#2,$25(a0)
0001A220                            
0001A220                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A220 4EF9 0000 DCDE             		jmp	DisplaySprite
0001A226                            ; ===========================================================================
0001A226                            Ani_obj82:
0001A226                            	include "_anim\obj82.asm"
0001A226                            ; ---------------------------------------------------------------------------
0001A226                            ; Animation script - Eggman (SBZ2)
0001A226                            ; ---------------------------------------------------------------------------
0001A226 0000                       		dc.w byte_19A10-Ani_obj82
0001A228 0000                       		dc.w byte_19A14-Ani_obj82
0001A22A 0000                       		dc.w byte_19A18-Ani_obj82
0001A22C 0000                       		dc.w byte_19A20-Ani_obj82
0001A22E 0000                       		dc.w byte_19A24-Ani_obj82
0001A230 0000                       		dc.w byte_19A2A-Ani_obj82
0001A232 0000                       		dc.w byte_19A30-Ani_obj82
0001A234 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A238 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A23C 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A244 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A248 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A24E 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A254 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A258                            		even
0001A258                            		even
0001A258                            
0001A258                            ; ---------------------------------------------------------------------------
0001A258                            ; Sprite mappings - Eggman (SBZ2)
0001A258                            ; ---------------------------------------------------------------------------
0001A258                            Map_obj82:
0001A258                            	include "_maps\obj82.asm"
0001A258                            ; ================================================================================
0001A258                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A258                            ; ================================================================================
0001A258                            
0001A258                            DATAA16Z12RYSAF:
0001A258 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A25C 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A260 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A264 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A268 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A26C 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A26E 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A26F FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A274 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A279 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A27E 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A27F E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A284 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A289 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A28E FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A293 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A294 E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A299 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A29E 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A2A3 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A2A8 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A2A9 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A2AE 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A2B3 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A2B8 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A2B9 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A2BE 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A2C3 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A2C8 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A2CD 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A2CE E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A2D3 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A2D8 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A2DD 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A2E2 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A2E3 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A2E8 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A2ED 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A2F2 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A2F7 F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A2FC F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A301 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A306 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A307 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A30C E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A311 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A316 F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A31B 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A31C 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A321 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A326 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A32B 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A330 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A335 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A336 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A33B E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A340 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A345 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A34A E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A34F F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A354 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A359 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A35E 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A35F EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A364 F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A369 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A36E                            	even
0001A36E                            	even
0001A36E                            
0001A36E                            ; ===========================================================================
0001A36E                            ; ---------------------------------------------------------------------------
0001A36E                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A36E                            ; ---------------------------------------------------------------------------
0001A36E                            
0001A36E                            Obj83:					; XREF: Obj_Index
0001A36E 7000                       		moveq	#0,d0
0001A370 1028 0024                  		move.b	$24(a0),d0
0001A374 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A378 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A37C                            ; ===========================================================================
0001A37C 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A37E 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A380 0000                       		dc.w loc_19C36-Obj83_Index
0001A382 0000                       		dc.w loc_19C62-Obj83_Index
0001A384 0000                       		dc.w loc_19C72-Obj83_Index
0001A386 0000                       		dc.w loc_19C80-Obj83_Index
0001A388                            ; ===========================================================================
0001A388                            
0001A388                            Obj83_Main:				; XREF: Obj83_Index
0001A388 317C 2080 0008             		move.w	#$2080,8(a0)
0001A38E 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A394 117C 0080 0019             		move.b	#$80,$19(a0)
0001A39A 117C 0010 0016             		move.b	#$10,$16(a0)
0001A3A0 117C 0004 0001             		move.b	#4,1(a0)
0001A3A6 08E8 0007 0001             		bset	#7,1(a0)
0001A3AC 7800                       		moveq	#0,d4
0001A3AE 3A3C 2010                  		move.w	#$2010,d5
0001A3B2 7C07                       		moveq	#7,d6
0001A3B4 45E8 0030                  		lea	$30(a0),a2
0001A3B8                            
0001A3B8                            Obj83_MakeBlock:
0001A3B8 4EB9 0000 E164             		jsr	SingleObjLoad
0001A3BE 6600                       		bne.s	Obj83_ExitMake
0001A3C0 34C9                       		move.w	a1,(a2)+
0001A3C2 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A3C6 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A3CE 337C 4518 0002             		move.w	#$4518,2(a1)
0001A3D4 137C 0004 0001             		move.b	#4,1(a1)
0001A3DA 137C 0010 0019             		move.b	#$10,$19(a1)
0001A3E0 137C 0010 0016             		move.b	#$10,$16(a1)
0001A3E6 137C 0003 0018             		move.b	#3,$18(a1)
0001A3EC 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A3F0 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A3F6 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A3FA 137C 0008 0024             		move.b	#8,$24(a1)
0001A400 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A404                            
0001A404                            Obj83_ExitMake:
0001A404 5428 0024                  		addq.b	#2,$24(a0)
0001A408 4E75                       		rts	
0001A40A                            ; ===========================================================================
0001A40A                            
0001A40A                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A40A 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A410 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A412 4228 001A                  		clr.b	$1A(a0)
0001A416 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A41A                            
0001A41A                            Obj83_Solid:
0001A41A 7000                       		moveq	#0,d0
0001A41C 1028 001A                  		move.b	$1A(a0),d0
0001A420 4400                       		neg.b	d0
0001A422 4880                       		ext.w	d0
0001A424 5040                       		addq.w	#8,d0
0001A426 E940                       		asl.w	#4,d0
0001A428 383C 2100                  		move.w	#$2100,d4
0001A42C 9840                       		sub.w	d0,d4
0001A42E 1140 0019                  		move.b	d0,$19(a0)
0001A432 3144 0008                  		move.w	d4,8(a0)
0001A436 720B                       		moveq	#$B,d1
0001A438 D240                       		add.w	d0,d1
0001A43A 7410                       		moveq	#$10,d2
0001A43C 7611                       		moveq	#$11,d3
0001A43E 4EF9 0001 00AE             		jmp	SolidObject
0001A444                            ; ===========================================================================
0001A444                            
0001A444                            loc_19C36:				; XREF: Obj83_Index
0001A444 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A44A 6400                       		bcc.s	Obj83_Solid2
0001A44C 70FF                       		moveq	#-1,d0
0001A44E 1028 001A                  		move.b	$1A(a0),d0
0001A452 4880                       		ext.w	d0
0001A454 D040                       		add.w	d0,d0
0001A456 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A45A 2240                       		movea.l	d0,a1
0001A45C 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A462 5228 001A                  		addq.b	#1,$1A(a0)
0001A466 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A46C 6700                       		beq.s	loc_19C62
0001A46E                            
0001A46E                            Obj83_Solid2:
0001A46E 60AA                       		bra.s	Obj83_Solid
0001A470                            ; ===========================================================================
0001A470                            
0001A470                            loc_19C62:				; XREF: Obj83_Index
0001A470 08A8 0003 0022             		bclr	#3,$22(a0)
0001A476 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A47C 6000 FBD2                  		bra.w	loc_1982C
0001A480                            ; ===========================================================================
0001A480                            
0001A480                            loc_19C72:				; XREF: Obj83_Index
0001A480 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A486 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A488 4EF9 0000 DCDE             		jmp	DisplaySprite
0001A48E                            ; ===========================================================================
0001A48E                            
0001A48E                            loc_19C80:				; XREF: Obj83_Index
0001A48E 4A28 0001                  		tst.b	1(a0)
0001A492 6A00 FBBC                  		bpl.w	loc_1982C
0001A496 4EB9 0000 DC8C             		jsr	ObjectFall
0001A49C 4EF9 0000 DCDE             		jmp	DisplaySprite
0001A4A2                            ; ===========================================================================
0001A4A2                            
0001A4A2                            Obj83_Break:				; XREF: loc_19C72
0001A4A2 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A4A6 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A4AA 7801                       		moveq	#1,d4
0001A4AC 7203                       		moveq	#3,d1
0001A4AE 7438                       		moveq	#$38,d2
0001A4B0 5428 0024                  		addq.b	#2,$24(a0)
0001A4B4 117C 0008 0019             		move.b	#8,$19(a0)
0001A4BA 117C 0008 0016             		move.b	#8,$16(a0)
0001A4C0 43D0                       		lea	(a0),a1
0001A4C2 6000                       		bra.s	Obj83_MakeFrag
0001A4C4                            ; ===========================================================================
0001A4C4                            
0001A4C4                            Obj83_LoopFrag:
0001A4C4 4EB9 0000 E17A             		jsr	SingleObjLoad2
0001A4CA 6600                       		bne.s	Obj83_BreakSnd
0001A4CC                            
0001A4CC                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A4CC 45D0                       		lea	(a0),a2
0001A4CE 47D1                       		lea	(a1),a3
0001A4D0 7603                       		moveq	#3,d3
0001A4D2                            
0001A4D2                            loc_19CC4:
0001A4D2 26DA                       		move.l	(a2)+,(a3)+
0001A4D4 26DA                       		move.l	(a2)+,(a3)+
0001A4D6 26DA                       		move.l	(a2)+,(a3)+
0001A4D8 26DA                       		move.l	(a2)+,(a3)+
0001A4DA 51CB FFF6                  		dbf	d3,loc_19CC4
0001A4DE                            
0001A4DE 335C 0012                  		move.w	(a4)+,$12(a1)
0001A4E2 361D                       		move.w	(a5)+,d3
0001A4E4 D769 0008                  		add.w	d3,8(a1)
0001A4E8 361D                       		move.w	(a5)+,d3
0001A4EA D769 000C                  		add.w	d3,$C(a1)
0001A4EE 1344 001A                  		move.b	d4,$1A(a1)
0001A4F2 5244                       		addq.w	#1,d4
0001A4F4 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A4F8                            
0001A4F8                            Obj83_BreakSnd:
0001A4F8 303C 00CB                  		move.w	#$CB,d0
0001A4FC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A502 4EF9 0000 DCDE             		jmp	DisplaySprite
0001A508                            ; ===========================================================================
0001A508 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A50C 0120 00C0                  		dc.w $120, $C0
0001A510 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A514 0010 0000                  		dc.w $10, 0
0001A518 0000 0010                  		dc.w 0,	$10
0001A51C 0010 0010                  		dc.w $10, $10
0001A520                            ; ---------------------------------------------------------------------------
0001A520                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A520                            ; ---------------------------------------------------------------------------
0001A520                            Map_obj83:
0001A520                            	include "_maps\obj83.asm"
0001A520                            ; ---------------------------------------------------------------------------
0001A520                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A520                            ; ---------------------------------------------------------------------------
0001A520 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A524 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A528 0000                       		dc.w byte_19D46-Map_obj83
0001A52A 01                         byte_19D1C:	dc.b 1
0001A52B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A530 02                         byte_19D22:	dc.b 2
0001A531 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A536 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A53B 00                         		dc.b 0
0001A53C 02                         byte_19D2E:	dc.b 2
0001A53D F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A542 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A547 00                         		dc.b 0
0001A548 02                         byte_19D3A:	dc.b 2
0001A549 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A54E F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A553 00                         		dc.b 0
0001A554 02                         byte_19D46:	dc.b 2
0001A555 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A55A F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A560 00                         		even
0001A560 00                         		even
0001A560                            
0001A560                            ; ===========================================================================
0001A560                            ; ---------------------------------------------------------------------------
0001A560                            ; Object 85 - Eggman (FZ)
0001A560                            ; ---------------------------------------------------------------------------
0001A560                            
0001A560                            Obj85_Delete:
0001A560 4EF9 0000 DD1A             		jmp	DeleteObject
0001A566                            ; ===========================================================================
0001A566                            
0001A566                            Obj85:					; XREF: Obj_Index
0001A566 7000                       		moveq	#0,d0
0001A568 1028 0024                  		move.b	$24(a0),d0
0001A56C 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A570 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A574                            ; ===========================================================================
0001A574 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A576 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A578 0000                       		dc.w loc_1A38E-Obj85_Index
0001A57A 0000                       		dc.w loc_1A346-Obj85_Index
0001A57C 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A57E 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A580 0000                       		dc.w loc_1A264-Obj85_Index
0001A582                            
0001A582 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A588 0001 A258                  		dc.l Map_obj82		; mappings pointer
0001A58C 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A592 0000 0000                  		dc.l Map_obj84
0001A596 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A59C 0000 0000                  		dc.l Map_FZBoss
0001A5A0 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A5A6 0001 A258                  		dc.l Map_obj82
0001A5AA 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A5B0 0001 853A                  		dc.l Map_Eggman
0001A5B4 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A5BA 0001 853A                  		dc.l Map_Eggman
0001A5BE                            
0001A5BE 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A5C3 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A5C8 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A5CD 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A5D2 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A5D7 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A5DC                            ; ===========================================================================
0001A5DC                            
0001A5DC                            Obj85_Main:				; XREF: Obj85_Index
0001A5DC 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A5E0 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A5E4 2248                       		movea.l	a0,a1
0001A5E6 7205                       		moveq	#5,d1
0001A5E8 6000                       		bra.s	Obj85_LoadBoss
0001A5EA                            ; ===========================================================================
0001A5EA                            
0001A5EA                            Obj85_Loop:
0001A5EA 4EB9 0000 E17A             		jsr	SingleObjLoad2
0001A5F0 6600                       		bne.s	loc_19E20
0001A5F2                            
0001A5F2                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A5F2 12BC 0085                  		move.b	#$85,(a1)
0001A5F6 335A 0008                  		move.w	(a2)+,8(a1)
0001A5FA 335A 000C                  		move.w	(a2)+,$C(a1)
0001A5FE 335A 0002                  		move.w	(a2)+,2(a1)
0001A602 235A 0004                  		move.l	(a2)+,4(a1)
0001A606 135B 0024                  		move.b	(a3)+,$24(a1)
0001A60A 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A60E 135B 0018                  		move.b	(a3)+,$18(a1)
0001A612 135B 0017                  		move.b	(a3)+,$17(a1)
0001A616 135B 0016                  		move.b	(a3)+,$16(a1)
0001A61A 137C 0004 0001             		move.b	#4,1(a1)
0001A620 08E8 0007 0001             		bset	#7,1(a0)
0001A626 2348 0034                  		move.l	a0,$34(a1)
0001A62A 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A62E                            
0001A62E                            loc_19E20:
0001A62E 45E8 0036                  		lea	$36(a0),a2
0001A632 4EB9 0000 E164             		jsr	SingleObjLoad
0001A638 6600                       		bne.s	loc_19E5A
0001A63A 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A63E 3489                       		move.w	a1,(a2)
0001A640 2348 0034                  		move.l	a0,$34(a1)
0001A644 45E8 0038                  		lea	$38(a0),a2
0001A648 7400                       		moveq	#0,d2
0001A64A 7203                       		moveq	#3,d1
0001A64C                            
0001A64C                            loc_19E3E:
0001A64C 4EB9 0000 E17A             		jsr	SingleObjLoad2
0001A652 6600                       		bne.s	loc_19E5A
0001A654 34C9                       		move.w	a1,(a2)+
0001A656 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A65A 2348 0034                  		move.l	a0,$34(a1)
0001A65E 1342 0028                  		move.b	d2,$28(a1)
0001A662 5442                       		addq.w	#2,d2
0001A664 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A668                            
0001A668                            loc_19E5A:
0001A668 317C 0000 0034             		move.w	#0,$34(a0)
0001A66E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A674 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A67A                            
0001A67A                            Obj85_Eggman:				; XREF: Obj85_Index
0001A67A 7000                       		moveq	#0,d0
0001A67C 1028 0034                  		move.b	$34(a0),d0
0001A680 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A684 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A688 4EF9 0000 DCDE             		jmp	DisplaySprite
0001A68E                            ; ===========================================================================
0001A68E 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A692 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A696 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A69A 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A69E                            ; ===========================================================================
0001A69E                            
0001A69E                            loc_19E90:				; XREF: off_19E80
0001A69E 4AB8 F680                  		tst.l	($FFFFF680).w
0001A6A2 6600                       		bne.s	loc_19EA2
0001A6A4 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A6AA 6500                       		bcs.s	loc_19EA2
0001A6AC 5428 0034                  		addq.b	#2,$34(a0)
0001A6B0                            
0001A6B0                            loc_19EA2:
0001A6B0 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A6B4 4E75                       		rts	
0001A6B6                            ; ===========================================================================
0001A6B6                            
0001A6B6                            loc_19EA8:				; XREF: off_19E80
0001A6B6 4A68 0030                  		tst.w	$30(a0)
0001A6BA 6A00                       		bpl.s	loc_19F10
0001A6BC 4268 0030                  		clr.w	$30(a0)
0001A6C0 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001A6C6 0240 000C                  		andi.w	#$C,d0
0001A6CA 3200                       		move.w	d0,d1
0001A6CC 5441                       		addq.w	#2,d1
0001A6CE 4A80                       		tst.l	d0
0001A6D0 6A00                       		bpl.s	loc_19EC6
0001A6D2 C141                       		exg	d1,d0
0001A6D4                            
0001A6D4                            loc_19EC6:
0001A6D4 43FA 0000                  		lea	word_19FD6(pc),a1
0001A6D8 3031 0000                  		move.w	(a1,d0.w),d0
0001A6DC 3231 1000                  		move.w	(a1,d1.w),d1
0001A6E0 3140 0030                  		move.w	d0,$30(a0)
0001A6E4 74FF                       		moveq	#-1,d2
0001A6E6 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A6EA 2242                       		movea.l	d2,a1
0001A6EC 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A6F2 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A6F8 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A6FC 2242                       		movea.l	d2,a1
0001A6FE 137C 0001 0029             		move.b	#1,$29(a1)
0001A704 337C 0000 0030             		move.w	#0,$30(a1)
0001A70A 317C 0001 0032             		move.w	#1,$32(a0)
0001A710 4228 0035                  		clr.b	$35(a0)
0001A714 303C 00B7                  		move.w	#$B7,d0
0001A718 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A71E                            
0001A71E                            loc_19F10:
0001A71E 4A68 0032                  		tst.w	$32(a0)
0001A722 6B00 0000                  		bmi.w	loc_19FA6
0001A726 08A8 0000 0022             		bclr	#0,$22(a0)
0001A72C 3038 D008                  		move.w	($FFFFD008).w,d0
0001A730 9068 0008                  		sub.w	8(a0),d0
0001A734 6500                       		bcs.s	loc_19F2E
0001A736 08E8 0000 0022             		bset	#0,$22(a0)
0001A73C                            
0001A73C                            loc_19F2E:
0001A73C 323C 002B                  		move.w	#$2B,d1
0001A740 343C 0014                  		move.w	#$14,d2
0001A744 363C 0014                  		move.w	#$14,d3
0001A748 3828 0008                  		move.w	8(a0),d4
0001A74C 4EB9 0001 00AE             		jsr	SolidObject
0001A752 4A44                       		tst.w	d4
0001A754 6E00                       		bgt.s	loc_19F50
0001A756                            
0001A756                            loc_19F48:
0001A756 4A28 0035                  		tst.b	$35(a0)
0001A75A 6600                       		bne.s	loc_19F88
0001A75C 6000                       		bra.s	loc_19F96
0001A75E                            ; ===========================================================================
0001A75E                            
0001A75E                            loc_19F50:
0001A75E 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A762 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A768 66EC                       		bne.s	loc_19F48
0001A76A 303C 0300                  		move.w	#$300,d0
0001A76E 0828 0000 0022             		btst	#0,$22(a0)
0001A774 6600                       		bne.s	loc_19F6A
0001A776 4440                       		neg.w	d0
0001A778                            
0001A778                            loc_19F6A:
0001A778 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A77C 4A28 0035                  		tst.b	$35(a0)
0001A780 6600                       		bne.s	loc_19F88
0001A782 5328 0021                  		subq.b	#1,$21(a0)
0001A786 117C 0064 0035             		move.b	#$64,$35(a0)
0001A78C 303C 00AC                  		move.w	#$AC,d0
0001A790 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A796                            
0001A796                            loc_19F88:
0001A796 5328 0035                  		subq.b	#1,$35(a0)
0001A79A 6700                       		beq.s	loc_19F96
0001A79C 117C 0003 001C             		move.b	#3,$1C(a0)
0001A7A2 6000                       		bra.s	loc_19F9C
0001A7A4                            ; ===========================================================================
0001A7A4                            
0001A7A4                            loc_19F96:
0001A7A4 117C 0001 001C             		move.b	#1,$1C(a0)
0001A7AA                            
0001A7AA                            loc_19F9C:
0001A7AA 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001A7AE 4EF9 0000 AD9E             		jmp	AnimateSprite
0001A7B4                            ; ===========================================================================
0001A7B4                            
0001A7B4                            loc_19FA6:
0001A7B4 4A28 0021                  		tst.b	$21(a0)
0001A7B8 6700                       		beq.s	loc_19FBC
0001A7BA 5428 0034                  		addq.b	#2,$34(a0)
0001A7BE 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A7C4 4268 0032                  		clr.w	$32(a0)
0001A7C8 4E75                       		rts	
0001A7CA                            ; ===========================================================================
0001A7CA                            
0001A7CA                            loc_19FBC:
0001A7CA 117C 0006 0034             		move.b	#6,$34(a0)
0001A7D0 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A7D6 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A7DC 117C 0014 0016             		move.b	#$14,$16(a0)
0001A7E2 4E75                       		rts	
0001A7E4                            ; ===========================================================================
0001A7E4 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A7F4                            ; ===========================================================================
0001A7F4                            
0001A7F4                            loc_19FE6:				; XREF: off_19E80
0001A7F4 70FF                       		moveq	#-1,d0
0001A7F6 3028 0036                  		move.w	$36(a0),d0
0001A7FA 2240                       		movea.l	d0,a1
0001A7FC 4A68 0030                  		tst.w	$30(a0)
0001A800 6A00                       		bpl.s	loc_1A000
0001A802 4268 0030                  		clr.w	$30(a0)
0001A806 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A80C 6100                       		bsr.s	loc_1A020
0001A80E                            
0001A80E                            loc_1A000:
0001A80E 700F                       		moveq	#$F,d0
0001A810 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A814 6600                       		bne.s	loc_1A00A
0001A816 6100                       		bsr.s	loc_1A020
0001A818                            
0001A818                            loc_1A00A:
0001A818 4A68 0032                  		tst.w	$32(a0)
0001A81C 6700                       		beq.s	locret_1A01E
0001A81E 5528 0034                  		subq.b	#2,$34(a0)
0001A822 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A828 4268 0032                  		clr.w	$32(a0)
0001A82C                            
0001A82C                            locret_1A01E:
0001A82C 4E75                       		rts	
0001A82E                            ; ===========================================================================
0001A82E                            
0001A82E                            loc_1A020:
0001A82E 303C 00B1                  		move.w	#$B1,d0
0001A832 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A838                            ; ===========================================================================
0001A838                            
0001A838                            loc_1A02A:				; XREF: off_19E80
0001A838 117C 0030 0017             		move.b	#$30,$17(a0)
0001A83E 08E8 0000 0022             		bset	#0,$22(a0)
0001A844 4EB9 0000 DCB8             		jsr	SpeedToPos
0001A84A 117C 0006 001A             		move.b	#6,$1A(a0)
0001A850 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A856 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A85C 6500                       		bcs.s	loc_1A070
0001A85E 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A864 5428 0034                  		addq.b	#2,$34(a0)
0001A868 117C 0020 0017             		move.b	#$20,$17(a0)
0001A86E 317C 0100 0010             		move.w	#$100,$10(a0)
0001A874 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A87A 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A87E                            
0001A87E                            loc_1A070:
0001A87E 6000 0000                  		bra.w	loc_1A166
0001A882                            ; ===========================================================================
0001A882                            
0001A882                            loc_1A074:				; XREF: off_19E80
0001A882 08E8 0000 0022             		bset	#0,$22(a0)
0001A888 117C 0004 001C             		move.b	#4,$1C(a0)
0001A88E 4EB9 0000 DCB8             		jsr	SpeedToPos
0001A894 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A89A 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A8A0 6500                       		bcs.s	loc_1A09A
0001A8A2 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A8A8                            
0001A8A8                            loc_1A09A:
0001A8A8 317C 0400 0010             		move.w	#$400,$10(a0)
0001A8AE 3028 0008                  		move.w	8(a0),d0
0001A8B2 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A8B6 6A00                       		bpl.s	loc_1A0B4
0001A8B8 317C 0500 0010             		move.w	#$500,$10(a0)
0001A8BE 6000 0000                  		bra.w	loc_1A0F2
0001A8C2                            ; ===========================================================================
0001A8C2                            
0001A8C2                            loc_1A0B4:
0001A8C2 0440 0070                  		subi.w	#$70,d0
0001A8C6 6500                       		bcs.s	loc_1A0F2
0001A8C8 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A8CE 5140                       		subq.w	#8,d0
0001A8D0 6500                       		bcs.s	loc_1A0F2
0001A8D2 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A8D8 5140                       		subq.w	#8,d0
0001A8DA 6500                       		bcs.s	loc_1A0F2
0001A8DC 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A8E2 5140                       		subq.w	#8,d0
0001A8E4 6500                       		bcs.s	loc_1A0F2
0001A8E6 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A8EC 5140                       		subq.w	#8,d0
0001A8EE 6500                       		bcs.s	loc_1A0F2
0001A8F0 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A8F6 0440 0038                  		subi.w	#$38,d0
0001A8FA 6500                       		bcs.s	loc_1A0F2
0001A8FC 4268 0010                  		clr.w	$10(a0)
0001A900                            
0001A900                            loc_1A0F2:
0001A900 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A906 6500                       		bcs.s	loc_1A110
0001A908 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A90E 317C 0240 0010             		move.w	#$240,$10(a0)
0001A914 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A91A 5428 0034                  		addq.b	#2,$34(a0)
0001A91E                            
0001A91E                            loc_1A110:
0001A91E 6000                       		bra.s	loc_1A15C
0001A920                            ; ===========================================================================
0001A920                            
0001A920                            loc_1A112:				; XREF: off_19E80
0001A920 4EB9 0000 DCB8             		jsr	SpeedToPos
0001A926 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A92C 6500                       		bcs.s	loc_1A124
0001A92E 4268 0010                  		clr.w	$10(a0)
0001A932                            
0001A932                            loc_1A124:
0001A932 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A938 4A68 0012                  		tst.w	$12(a0)
0001A93C 6B00                       		bmi.s	loc_1A142
0001A93E 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A944 6500                       		bcs.s	loc_1A142
0001A946 317C 0592 000C             		move.w	#$592,$C(a0)
0001A94C 4268 0012                  		clr.w	$12(a0)
0001A950                            
0001A950                            loc_1A142:
0001A950 3028 0010                  		move.w	$10(a0),d0
0001A954 8068 0012                  		or.w	$12(a0),d0
0001A958 6600                       		bne.s	loc_1A15C
0001A95A 5428 0034                  		addq.b	#2,$34(a0)
0001A95E 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A964 117C 0001 0021             		move.b	#1,$21(a0)
0001A96A                            
0001A96A                            loc_1A15C:
0001A96A 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001A96E 4EB9 0000 AD9E             		jsr	AnimateSprite
0001A974                            
0001A974                            loc_1A166:
0001A974 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A97A 6C00                       		bge.s	loc_1A172
0001A97C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A980                            
0001A980                            loc_1A172:
0001A980 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A986 6C00                       		bge.s	locret_1A190
0001A988 323C 001B                  		move.w	#$1B,d1
0001A98C 343C 0070                  		move.w	#$70,d2
0001A990 363C 0071                  		move.w	#$71,d3
0001A994 3828 0008                  		move.w	8(a0),d4
0001A998 4EF9 0001 00AE             		jmp	SolidObject
0001A99E                            ; ===========================================================================
0001A99E                            
0001A99E                            locret_1A190:
0001A99E 4E75                       		rts	
0001A9A0                            ; ===========================================================================
0001A9A0                            
0001A9A0                            loc_1A192:				; XREF: off_19E80
0001A9A0 217C 0001 853A 0004        		move.l	#Map_Eggman,4(a0)
0001A9A8 317C 0400 0002             		move.w	#$400,2(a0)
0001A9AE 117C 0000 001C             		move.b	#0,$1C(a0)
0001A9B4 08E8 0000 0022             		bset	#0,$22(a0)
0001A9BA 4EB9 0000 DCB8             		jsr	SpeedToPos
0001A9C0 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A9C6 6400                       		bcc.s	loc_1A1D0
0001A9C8 317C 0180 0010             		move.w	#$180,$10(a0)
0001A9CE 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001A9D4 117C 000F 0020             		move.b	#$F,$20(a0)
0001A9DA 5428 0034                  		addq.b	#2,$34(a0)
0001A9DE                            
0001A9DE                            loc_1A1D0:
0001A9DE 6000 FF8A                  		bra.w	loc_1A15C
0001A9E2                            ; ===========================================================================
0001A9E2                            
0001A9E2                            loc_1A1D4:				; XREF: off_19E80
0001A9E2 08E8 0000 0022             		bset	#0,$22(a0)
0001A9E8 4EB9 0000 DCB8             		jsr	SpeedToPos
0001A9EE 4A68 0030                  		tst.w	$30(a0)
0001A9F2 6600                       		bne.s	loc_1A1FC
0001A9F4 4A28 0020                  		tst.b	$20(a0)
0001A9F8 6600                       		bne.s	loc_1A216
0001A9FA 317C 001E 0030             		move.w	#$1E,$30(a0)
0001AA00 303C 00AC                  		move.w	#$AC,d0
0001AA04 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AA0A                            
0001AA0A                            loc_1A1FC:
0001AA0A 5368 0030                  		subq.w	#1,$30(a0)
0001AA0E 6600                       		bne.s	loc_1A216
0001AA10 4A28 0022                  		tst.b	$22(a0)
0001AA14 6A00                       		bpl.s	loc_1A210
0001AA16 317C 0060 0012             		move.w	#$60,$12(a0)
0001AA1C 6000                       		bra.s	loc_1A216
0001AA1E                            ; ===========================================================================
0001AA1E                            
0001AA1E                            loc_1A210:
0001AA1E 117C 000F 0020             		move.b	#$F,$20(a0)
0001AA24                            
0001AA24                            loc_1A216:
0001AA24 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001AA2A 6D00                       		blt.s	loc_1A23A
0001AA2C 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001AA32 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001AA38 4278 D014                  		clr.w	($FFFFD014).w
0001AA3C 4A68 0012                  		tst.w	$12(a0)
0001AA40 6A00                       		bpl.s	loc_1A248
0001AA42 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001AA48                            
0001AA48                            loc_1A23A:
0001AA48 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001AA4E 6D00                       		blt.s	loc_1A248
0001AA50 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001AA56                            
0001AA56                            loc_1A248:
0001AA56 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001AA5C 6500                       		bcs.s	loc_1A260
0001AA5E 4A28 0001                  		tst.b	1(a0)
0001AA62 6B00                       		bmi.s	loc_1A260
0001AA64 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001AA6A 6000 FAF4                  		bra.w	Obj85_Delete
0001AA6E                            ; ===========================================================================
0001AA6E                            
0001AA6E                            loc_1A260:
0001AA6E 6000 FEFA                  		bra.w	loc_1A15C
0001AA72                            ; ===========================================================================
0001AA72                            
0001AA72                            loc_1A264:				; XREF: Obj85_Index
0001AA72 2268 0034                  		movea.l	$34(a0),a1
0001AA76 1011                       		move.b	(a1),d0
0001AA78 B010                       		cmp.b	(a0),d0
0001AA7A 6600 FAE4                  		bne.w	Obj85_Delete
0001AA7E 117C 0007 001C             		move.b	#7,$1C(a0)
0001AA84 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AA8A 6C00                       		bge.s	loc_1A280
0001AA8C 6000                       		bra.s	loc_1A2A6
0001AA8E                            ; ===========================================================================
0001AA8E                            
0001AA8E                            loc_1A280:
0001AA8E 4A69 0010                  		tst.w	$10(a1)
0001AA92 6700                       		beq.s	loc_1A28C
0001AA94 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AA9A                            
0001AA9A                            loc_1A28C:
0001AA9A 43FA DA4E                  		lea	Ani_Eggman(pc),a1
0001AA9E 4EB9 0000 AD9E             		jsr	AnimateSprite
0001AAA4                            
0001AAA4                            loc_1A296:
0001AAA4 2268 0034                  		movea.l	$34(a0),a1
0001AAA8 3169 0008 0008             		move.w	8(a1),8(a0)
0001AAAE 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AAB4                            
0001AAB4                            loc_1A2A6:
0001AAB4 2268 0034                  		movea.l	$34(a0),a1
0001AAB8 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AABE 7003                       		moveq	#3,d0
0001AAC0 C028 0022                  		and.b	$22(a0),d0
0001AAC4 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AACA 8128 0001                  		or.b	d0,1(a0)
0001AACE 4EF9 0000 DCDE             		jmp	DisplaySprite
0001AAD4                            ; ===========================================================================
0001AAD4                            
0001AAD4                            loc_1A2C6:				; XREF: Obj85_Index
0001AAD4 2268 0034                  		movea.l	$34(a0),a1
0001AAD8 1011                       		move.b	(a1),d0
0001AADA B010                       		cmp.b	(a0),d0
0001AADC 6600 FA82                  		bne.w	Obj85_Delete
0001AAE0 0CA9 0001 853A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AAE8 6700                       		beq.s	loc_1A2E4
0001AAEA 117C 000A 001A             		move.b	#$A,$1A(a0)
0001AAF0 60C2                       		bra.s	loc_1A2A6
0001AAF2                            ; ===========================================================================
0001AAF2                            
0001AAF2                            loc_1A2E4:
0001AAF2 117C 0001 001C             		move.b	#1,$1C(a0)
0001AAF8 4A29 0021                  		tst.b	$21(a1)
0001AAFC 6F00                       		ble.s	loc_1A312
0001AAFE 117C 0006 001C             		move.b	#6,$1C(a0)
0001AB04 217C 0001 853A 0004        		move.l	#Map_Eggman,4(a0)
0001AB0C 317C 0400 0002             		move.w	#$400,2(a0)
0001AB12 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001AB16 4EB9 0000 AD9E             		jsr	AnimateSprite
0001AB1C 6000 FF86                  		bra.w	loc_1A296
0001AB20                            ; ===========================================================================
0001AB20                            
0001AB20                            loc_1A312:
0001AB20 4A28 0001                  		tst.b	1(a0)
0001AB24 6A00 FA3A                  		bpl.w	Obj85_Delete
0001AB28 6100 D53C                  		bsr.w	BossDefeated
0001AB2C 117C 0002 0018             		move.b	#2,$18(a0)
0001AB32 117C 0000 001C             		move.b	#0,$1C(a0)
0001AB38 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001AB40 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001AB46 43FA 0000                  		lea	Ani_obj85(pc),a1
0001AB4A 4EB9 0000 AD9E             		jsr	AnimateSprite
0001AB50 6000 FF52                  		bra.w	loc_1A296
0001AB54                            ; ===========================================================================
0001AB54                            
0001AB54                            loc_1A346:				; XREF: Obj85_Index
0001AB54 08E8 0000 0022             		bset	#0,$22(a0)
0001AB5A 2268 0034                  		movea.l	$34(a0),a1
0001AB5E 0CA9 0001 853A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AB66 6700                       		beq.s	loc_1A35E
0001AB68 6000 FF4A                  		bra.w	loc_1A2A6
0001AB6C                            ; ===========================================================================
0001AB6C                            
0001AB6C                            loc_1A35E:
0001AB6C 3169 0008 0008             		move.w	8(a1),8(a0)
0001AB72 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AB78 4A28 001E                  		tst.b	$1E(a0)
0001AB7C 6600                       		bne.s	loc_1A376
0001AB7E 117C 0014 001E             		move.b	#$14,$1E(a0)
0001AB84                            
0001AB84                            loc_1A376:
0001AB84 5328 001E                  		subq.b	#1,$1E(a0)
0001AB88 6E00                       		bgt.s	loc_1A38A
0001AB8A 5228 001A                  		addq.b	#1,$1A(a0)
0001AB8E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001AB94 6E00 F9CA                  		bgt.w	Obj85_Delete
0001AB98                            
0001AB98                            loc_1A38A:
0001AB98 6000 FF0A                  		bra.w	loc_1A296
0001AB9C                            ; ===========================================================================
0001AB9C                            
0001AB9C                            loc_1A38E:				; XREF: Obj85_Index
0001AB9C 117C 000B 001A             		move.b	#$B,$1A(a0)
0001ABA2 3038 D008                  		move.w	($FFFFD008).w,d0
0001ABA6 9068 0008                  		sub.w	8(a0),d0
0001ABAA 6500                       		bcs.s	loc_1A3A6
0001ABAC 4A28 0001                  		tst.b	1(a0)
0001ABB0 6A00 F9AE                  		bpl.w	Obj85_Delete
0001ABB4                            
0001ABB4                            loc_1A3A6:
0001ABB4 4EF9 0000 DCDE             		jmp	DisplaySprite
0001ABBA                            ; ===========================================================================
0001ABBA                            
0001ABBA                            loc_1A3AC:				; XREF: Obj85_Index
0001ABBA 117C 0000 001A             		move.b	#0,$1A(a0)
0001ABC0 08E8 0000 0022             		bset	#0,$22(a0)
0001ABC6 2268 0034                  		movea.l	$34(a0),a1
0001ABCA 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001ABD0 6600                       		bne.s	loc_1A3D0
0001ABD2 0CA9 0001 853A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001ABDA 6700 F984                  		beq.w	Obj85_Delete
0001ABDE                            
0001ABDE                            loc_1A3D0:
0001ABDE 6000 FED4                  		bra.w	loc_1A2A6
0001ABE2                            ; ===========================================================================
0001ABE2                            Ani_obj85:
0001ABE2                            	include "_anim\obj85.asm"
0001ABE2                            ; ---------------------------------------------------------------------------
0001ABE2                            ; Animation script - Eggman (FZ)
0001ABE2                            ; ---------------------------------------------------------------------------
0001ABE2 0000                       		dc.w byte_1A3D6-Ani_obj85
0001ABE4 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001ABE8                            		even
0001ABE8                            		even
0001ABE8                            
0001ABE8                            Map_Eggman2:
0001ABE8                            	include "_maps\Eggman2.asm"
0001ABE8                            ; ---------------------------------------------------------------------------
0001ABE8                            ; Sprite mappings - Eggman (FZ)
0001ABE8                            ; ---------------------------------------------------------------------------
0001ABE8 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001ABEA 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001ABEC 06                         byte_1A3DE:	dc.b 6
0001ABED E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001ABF2 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001ABF7 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001ABFC FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AC01 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AC06 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AC0B 06                         byte_1A3FD:	dc.b 6
0001AC0C E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001AC11 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001AC16 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AC1B FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AC20 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AC25 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AC2A                            		even
0001AC2A                            		even
0001AC2A                            
0001AC2A                            Map_FZBoss:
0001AC2A                            	include "_maps\FZ boss.asm"
0001AC2A                            ; ---------------------------------------------------------------------------
0001AC2A                            ; Sprite mappings - boss (FZ)
0001AC2A                            ; ---------------------------------------------------------------------------
0001AC2A 0000                       		dc.w byte_1A422-Map_FZBoss
0001AC2C 0000                       		dc.w byte_1A42D-Map_FZBoss
0001AC2E 0000                       		dc.w byte_1A43D-Map_FZBoss
0001AC30 02                         byte_1A422:	dc.b 2
0001AC31 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AC36 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AC3B 03                         byte_1A42D:	dc.b 3
0001AC3C 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AC41 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AC46 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AC4B 02                         byte_1A43D:	dc.b 2
0001AC4C 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AC51 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AC56                            		even
0001AC56                            		even
0001AC56                            
0001AC56                            ; ===========================================================================
0001AC56                            
0001AC56                            Obj84_Delete:
0001AC56 4EF9 0000 DD1A             		jmp	DeleteObject
0001AC5C                            ; ===========================================================================
0001AC5C                            ; ---------------------------------------------------------------------------
0001AC5C                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AC5C                            ; ---------------------------------------------------------------------------
0001AC5C                            
0001AC5C                            Obj84:					; XREF: Obj_Index
0001AC5C 7000                       		moveq	#0,d0
0001AC5E 1028 0024                  		move.b	$24(a0),d0
0001AC62 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AC66 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AC6A                            ; ===========================================================================
0001AC6A 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AC6C 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AC6E 0000                       		dc.w loc_1A57E-Obj84_Index
0001AC70                            
0001AC70 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AC74 2550 0620                  		dc.w $2550, $620
0001AC78 2490 04C0                  		dc.w $2490, $4C0
0001AC7C 2510 04C0                  		dc.w $2510, $4C0
0001AC80                            ; ===========================================================================
0001AC80                            
0001AC80                            Obj84_Main:				; XREF: Obj84_Index
0001AC80 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AC84 7000                       		moveq	#0,d0
0001AC86 1028 0028                  		move.b	$28(a0),d0
0001AC8A D040                       		add.w	d0,d0
0001AC8C D2C0                       		adda.w	d0,a1
0001AC8E 117C 0004 0001             		move.b	#4,1(a0)
0001AC94 08E8 0007 0001             		bset	#7,1(a0)
0001AC9A 08E8 0004 0001             		bset	#4,1(a0)
0001ACA0 317C 0300 0002             		move.w	#$300,2(a0)
0001ACA6 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001ACAE 3159 0008                  		move.w	(a1)+,8(a0)
0001ACB2 3151 000C                  		move.w	(a1),$C(a0)
0001ACB6 3159 0038                  		move.w	(a1)+,$38(a0)
0001ACBA 117C 0020 0016             		move.b	#$20,$16(a0)
0001ACC0 117C 0060 0017             		move.b	#$60,$17(a0)
0001ACC6 117C 0020 0019             		move.b	#$20,$19(a0)
0001ACCC 117C 0060 0016             		move.b	#$60,$16(a0)
0001ACD2 117C 0003 0018             		move.b	#3,$18(a0)
0001ACD8 5428 0024                  		addq.b	#2,$24(a0)
0001ACDC                            
0001ACDC                            loc_1A4CE:				; XREF: Obj84_Index
0001ACDC 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001ACE2 6F00                       		ble.s	loc_1A4DC
0001ACE4 08E8 0001 0001             		bset	#1,1(a0)
0001ACEA                            
0001ACEA                            loc_1A4DC:
0001ACEA 42A8 003C                  		clr.l	$3C(a0)
0001ACEE 4A28 0029                  		tst.b	$29(a0)
0001ACF2 6700                       		beq.s	loc_1A4EA
0001ACF4 5428 0024                  		addq.b	#2,$24(a0)
0001ACF8                            
0001ACF8                            loc_1A4EA:
0001ACF8 2028 003C                  		move.l	$3C(a0),d0
0001ACFC 2228 0038                  		move.l	$38(a0),d1
0001AD00 D280                       		add.l	d0,d1
0001AD02 4841                       		swap	d1
0001AD04 3141 000C                  		move.w	d1,$C(a0)
0001AD08 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001AD0E 6600                       		bne.s	loc_1A524
0001AD10 4A68 0030                  		tst.w	$30(a0)
0001AD14 6A00                       		bpl.s	loc_1A524
0001AD16 70F6                       		moveq	#-$A,d0
0001AD18 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AD1E 6F00                       		ble.s	loc_1A514
0001AD20 700E                       		moveq	#$E,d0
0001AD22                            
0001AD22                            loc_1A514:
0001AD22 D240                       		add.w	d0,d1
0001AD24 2268 0034                  		movea.l	$34(a0),a1
0001AD28 3341 000C                  		move.w	d1,$C(a1)
0001AD2C 3368 0008 0008             		move.w	8(a0),8(a1)
0001AD32                            
0001AD32                            loc_1A524:
0001AD32 323C 002B                  		move.w	#$2B,d1
0001AD36 343C 0060                  		move.w	#$60,d2
0001AD3A 363C 0061                  		move.w	#$61,d3
0001AD3E 3828 0008                  		move.w	8(a0),d4
0001AD42 4EB9 0001 00AE             		jsr	SolidObject
0001AD48 7000                       		moveq	#0,d0
0001AD4A 3228 003C                  		move.w	$3C(a0),d1
0001AD4E 6A00                       		bpl.s	loc_1A550
0001AD50 4441                       		neg.w	d1
0001AD52 5141                       		subq.w	#8,d1
0001AD54 6500                       		bcs.s	loc_1A55C
0001AD56 5200                       		addq.b	#1,d0
0001AD58 E841                       		asr.w	#4,d1
0001AD5A D041                       		add.w	d1,d0
0001AD5C 6000                       		bra.s	loc_1A55C
0001AD5E                            ; ===========================================================================
0001AD5E                            
0001AD5E                            loc_1A550:
0001AD5E 0441 0027                  		subi.w	#$27,d1
0001AD62 6500                       		bcs.s	loc_1A55C
0001AD64 5200                       		addq.b	#1,d0
0001AD66 E841                       		asr.w	#4,d1
0001AD68 D041                       		add.w	d1,d0
0001AD6A                            
0001AD6A                            loc_1A55C:
0001AD6A 1140 001A                  		move.b	d0,$1A(a0)
0001AD6E 3038 D008                  		move.w	($FFFFD008).w,d0
0001AD72 9068 0008                  		sub.w	8(a0),d0
0001AD76 6B00                       		bmi.s	loc_1A578
0001AD78 0440 0140                  		subi.w	#$140,d0
0001AD7C 6B00                       		bmi.s	loc_1A578
0001AD7E 4A28 0001                  		tst.b	1(a0)
0001AD82 6A00 FED2                  		bpl.w	Obj84_Delete
0001AD86                            
0001AD86                            loc_1A578:
0001AD86 4EF9 0000 DCDE             		jmp	DisplaySprite
0001AD8C                            ; ===========================================================================
0001AD8C                            
0001AD8C                            loc_1A57E:				; XREF: Obj84_Index
0001AD8C 7000                       		moveq	#0,d0
0001AD8E 1028 0028                  		move.b	$28(a0),d0
0001AD92 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001AD96 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001AD9A 6000 FF5C                  		bra.w	loc_1A4EA
0001AD9E                            ; ===========================================================================
0001AD9E 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001ADA0 0000                       		dc.w loc_1A598-off_1A590
0001ADA2 0000                       		dc.w loc_1A604-off_1A590
0001ADA4 0000                       		dc.w loc_1A604-off_1A590
0001ADA6                            ; ===========================================================================
0001ADA6                            
0001ADA6                            loc_1A598:				; XREF: off_1A590
0001ADA6 4A28 0029                  		tst.b	$29(a0)
0001ADAA 6600                       		bne.s	loc_1A5D4
0001ADAC 2268 0034                  		movea.l	$34(a0),a1
0001ADB0 4A29 0021                  		tst.b	$21(a1)
0001ADB4 6600                       		bne.s	loc_1A5B4
0001ADB6 6100 D2AE                  		bsr.w	BossDefeated
0001ADBA 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001ADC2                            
0001ADC2                            loc_1A5B4:
0001ADC2 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001ADCA 6400                       		bcc.s	locret_1A602
0001ADCC 42A8 003C                  		clr.l	$3C(a0)
0001ADD0 2268 0034                  		movea.l	$34(a0),a1
0001ADD4 5369 0032                  		subq.w	#1,$32(a1)
0001ADD8 4269 0030                  		clr.w	$30(a1)
0001ADDC 5528 0024                  		subq.b	#2,$24(a0)
0001ADE0 4E75                       		rts	
0001ADE2                            ; ===========================================================================
0001ADE2                            
0001ADE2                            loc_1A5D4:
0001ADE2 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001ADE8 6C00                       		bge.s	loc_1A5E4
0001ADEA 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001ADF2                            
0001ADF2                            loc_1A5E4:
0001ADF2 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001ADFA 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001AE00 6E00                       		bgt.s	locret_1A602
0001AE02 4268 003E                  		clr.w	$3E(a0)
0001AE06 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001AE0C 4228 0029                  		clr.b	$29(a0)
0001AE10                            
0001AE10                            locret_1A602:
0001AE10 4E75                       		rts	
0001AE12                            ; ===========================================================================
0001AE12                            
0001AE12                            loc_1A604:				; XREF: off_1A590
0001AE12 08E8 0001 0001             		bset	#1,1(a0)
0001AE18 4A28 0029                  		tst.b	$29(a0)
0001AE1C 6600                       		bne.s	loc_1A646
0001AE1E 2268 0034                  		movea.l	$34(a0),a1
0001AE22 4A29 0021                  		tst.b	$21(a1)
0001AE26 6600                       		bne.s	loc_1A626
0001AE28 6100 D23C                  		bsr.w	BossDefeated
0001AE2C 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001AE34                            
0001AE34                            loc_1A626:
0001AE34 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001AE3C 6400                       		bcc.s	locret_1A674
0001AE3E 42A8 003C                  		clr.l	$3C(a0)
0001AE42 2268 0034                  		movea.l	$34(a0),a1
0001AE46 5369 0032                  		subq.w	#1,$32(a1)
0001AE4A 4269 0030                  		clr.w	$30(a1)
0001AE4E 5528 0024                  		subq.b	#2,$24(a0)
0001AE52 4E75                       		rts	
0001AE54                            ; ===========================================================================
0001AE54                            
0001AE54                            loc_1A646:
0001AE54 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AE5A 6D00                       		blt.s	loc_1A656
0001AE5C 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AE64                            
0001AE64                            loc_1A656:
0001AE64 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AE6C 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AE72 6D00                       		blt.s	locret_1A674
0001AE74 4268 003E                  		clr.w	$3E(a0)
0001AE78 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AE7E 4228 0029                  		clr.b	$29(a0)
0001AE82                            
0001AE82                            locret_1A674:
0001AE82 4E75                       		rts	
0001AE84                            ; ===========================================================================
0001AE84                            ; ---------------------------------------------------------------------------
0001AE84                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AE84                            ; ---------------------------------------------------------------------------
0001AE84                            Map_obj84:
0001AE84                            	include "_maps\obj84.asm"
0001AE84                            ; ---------------------------------------------------------------------------
0001AE84                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AE84                            ; ---------------------------------------------------------------------------
0001AE84 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AE88 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001AE8C 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001AE90 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AE94 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AE98 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001AE9C 06                         byte_1A68E:	dc.b 6
0001AE9D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AEA2 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AEA7 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AEAC B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AEB1 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AEB6 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AEBB 08                         byte_1A6AD:	dc.b 8
0001AEBC A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AEC1 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AEC6 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AECB B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AED0 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AED5 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AEDA D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AEDF D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AEE4 0A                         byte_1A6D6:	dc.b $A
0001AEE5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AEEA A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AEEF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AEF4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AEF9 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AEFE B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AF03 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AF08 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AF0D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AF12 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AF17 0C                         byte_1A709:	dc.b $C
0001AF18 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF1D A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AF22 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AF27 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AF2C B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AF31 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AF36 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AF3B D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AF40 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AF45 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AF4A 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AF4F 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AF54 0D                         byte_1A746:	dc.b $D
0001AF55 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF5A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AF5F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AF64 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AF69 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AF6E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AF73 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AF78 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AF7D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AF82 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AF87 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AF8C 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AF91 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AF96 0E                         byte_1A788:	dc.b $E
0001AF97 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF9C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AFA1 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AFA6 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AFAB B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AFB0 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AFB5 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AFBA D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AFBF F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AFC4 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AFC9 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AFCE 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AFD3 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AFD8 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001AFDD 02                         byte_1A7CF:	dc.b 2
0001AFDE F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001AFE3 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001AFE8                            		even
0001AFE8                            		even
0001AFE8                            
0001AFE8                            ; ===========================================================================
0001AFE8                            ; ---------------------------------------------------------------------------
0001AFE8                            ; Object 86 - energy balls (FZ)
0001AFE8                            ; ---------------------------------------------------------------------------
0001AFE8                            
0001AFE8                            Obj86:					; XREF: Obj_Index
0001AFE8 7000                       		moveq	#0,d0
0001AFEA 1028 0024                  		move.b	$24(a0),d0
0001AFEE 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001AFF2 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001AFF6                            ; ===========================================================================
0001AFF6 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001AFF8 0000                       		dc.w Obj86_Generator-Obj86_Index
0001AFFA 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001AFFC 0000                       		dc.w loc_1A962-Obj86_Index
0001AFFE 0000                       		dc.w loc_1A982-Obj86_Index
0001B000                            ; ===========================================================================
0001B000                            
0001B000                            Obj86_Main:				; XREF: Obj86_Index
0001B000 317C 2588 0008             		move.w	#$2588,8(a0)
0001B006 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B00C 317C 0300 0002             		move.w	#$300,2(a0)
0001B012 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B01A 117C 0000 001C             		move.b	#0,$1C(a0)
0001B020 117C 0003 0018             		move.b	#3,$18(a0)
0001B026 117C 0008 0017             		move.b	#8,$17(a0)
0001B02C 117C 0008 0016             		move.b	#8,$16(a0)
0001B032 117C 0004 0001             		move.b	#4,1(a0)
0001B038 08E8 0007 0001             		bset	#7,1(a0)
0001B03E 5428 0024                  		addq.b	#2,$24(a0)
0001B042                            
0001B042                            Obj86_Generator:			; XREF: Obj86_Index
0001B042 2268 0034                  		movea.l	$34(a0),a1
0001B046 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B04C 6600                       		bne.s	loc_1A850
0001B04E 10BC 003F                  		move.b	#$3F,(a0)
0001B052 117C 0000 0024             		move.b	#0,$24(a0)
0001B058 4EF9 0000 DCDE             		jmp	DisplaySprite
0001B05E                            ; ===========================================================================
0001B05E                            
0001B05E                            loc_1A850:
0001B05E 117C 0000 001C             		move.b	#0,$1C(a0)
0001B064 4A28 0029                  		tst.b	$29(a0)
0001B068 6700                       		beq.s	loc_1A86C
0001B06A 5428 0024                  		addq.b	#2,$24(a0)
0001B06E 117C 0001 001C             		move.b	#1,$1C(a0)
0001B074 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B07A                            
0001B07A                            loc_1A86C:
0001B07A 323C 0013                  		move.w	#$13,d1
0001B07E 343C 0008                  		move.w	#8,d2
0001B082 363C 0011                  		move.w	#$11,d3
0001B086 3828 0008                  		move.w	8(a0),d4
0001B08A 4EB9 0001 00AE             		jsr	SolidObject
0001B090 3038 D008                  		move.w	($FFFFD008).w,d0
0001B094 9068 0008                  		sub.w	8(a0),d0
0001B098 6B00                       		bmi.s	loc_1A89A
0001B09A 0440 0140                  		subi.w	#$140,d0
0001B09E 6B00                       		bmi.s	loc_1A89A
0001B0A0 4A28 0001                  		tst.b	1(a0)
0001B0A4 6A00 FBB0                  		bpl.w	Obj84_Delete
0001B0A8                            
0001B0A8                            loc_1A89A:
0001B0A8 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B0AC 4EB9 0000 AD9E             		jsr	AnimateSprite
0001B0B2 4EF9 0000 DCDE             		jmp	DisplaySprite
0001B0B8                            ; ===========================================================================
0001B0B8                            
0001B0B8                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B0B8 4A28 0029                  		tst.b	$29(a0)
0001B0BC 6700 0000                  		beq.w	loc_1A954
0001B0C0 4228 0029                  		clr.b	$29(a0)
0001B0C4 D068 0030                  		add.w	$30(a0),d0
0001B0C8 0240 001E                  		andi.w	#$1E,d0
0001B0CC D4C0                       		adda.w	d0,a2
0001B0CE 5868 0030                  		addq.w	#4,$30(a0)
0001B0D2 4268 0032                  		clr.w	$32(a0)
0001B0D6 7403                       		moveq	#3,d2
0001B0D8                            
0001B0D8                            Obj86_Loop:
0001B0D8 4EB9 0000 E17A             		jsr	SingleObjLoad2
0001B0DE 6600 0000                  		bne.w	loc_1A954
0001B0E2 12BC 0086                  		move.b	#$86,(a1)
0001B0E6 3368 0008 0008             		move.w	8(a0),8(a1)
0001B0EC 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B0F2 137C 0008 0024             		move.b	#8,$24(a1)
0001B0F8 337C 2300 0002             		move.w	#$2300,2(a1)
0001B0FE 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B106 137C 000C 0016             		move.b	#$C,$16(a1)
0001B10C 137C 000C 0017             		move.b	#$C,$17(a1)
0001B112 137C 0000 0020             		move.b	#0,$20(a1)
0001B118 137C 0003 0018             		move.b	#3,$18(a1)
0001B11E 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B124 137C 0004 0001             		move.b	#4,1(a1)
0001B12A 08E9 0007 0001             		bset	#7,1(a1)
0001B130 2348 0034                  		move.l	a0,$34(a1)
0001B134 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001B13A 3228 0032                  		move.w	$32(a0),d1
0001B13E C3FC FFB1                  		muls.w	#-$4F,d1
0001B142 0641 2578                  		addi.w	#$2578,d1
0001B146 0240 001F                  		andi.w	#$1F,d0
0001B14A 0440 0010                  		subi.w	#$10,d0
0001B14E D041                       		add.w	d1,d0
0001B150 3340 0030                  		move.w	d0,$30(a1)
0001B154 5268 0032                  		addq.w	#1,$32(a0)
0001B158 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B15E 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B162                            
0001B162                            loc_1A954:
0001B162 4A68 0032                  		tst.w	$32(a0)
0001B166 6600                       		bne.s	loc_1A95E
0001B168 5428 0024                  		addq.b	#2,$24(a0)
0001B16C                            
0001B16C                            loc_1A95E:
0001B16C 6000 FF0C                  		bra.w	loc_1A86C
0001B170                            ; ===========================================================================
0001B170                            
0001B170                            loc_1A962:				; XREF: Obj86_Index
0001B170 117C 0002 001C             		move.b	#2,$1C(a0)
0001B176 4A68 0038                  		tst.w	$38(a0)
0001B17A 6600                       		bne.s	loc_1A97E
0001B17C 117C 0002 0024             		move.b	#2,$24(a0)
0001B182 2268 0034                  		movea.l	$34(a0),a1
0001B186 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B18C                            
0001B18C                            loc_1A97E:
0001B18C 6000 FEEC                  		bra.w	loc_1A86C
0001B190                            ; ===========================================================================
0001B190                            
0001B190                            loc_1A982:				; XREF: Obj86_Index
0001B190 7000                       		moveq	#0,d0
0001B192 1028 0025                  		move.b	$25(a0),d0
0001B196 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B19A 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001B19E 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B1A2 4EB9 0000 AD9E             		jsr	AnimateSprite
0001B1A8 4EF9 0000 DCDE             		jmp	DisplaySprite
0001B1AE                            ; ===========================================================================
0001B1AE 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B1B0 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B1B2 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001B1B4                            ; ===========================================================================
0001B1B4                            
0001B1B4                            loc_1A9A6:				; XREF: Obj86_Index2
0001B1B4 3028 0030                  		move.w	$30(a0),d0
0001B1B8 9068 0008                  		sub.w	8(a0),d0
0001B1BC E940                       		asl.w	#4,d0
0001B1BE 3140 0010                  		move.w	d0,$10(a0)
0001B1C2 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B1C8 5428 0025                  		addq.b	#2,$25(a0)
0001B1CC 4E75                       		rts	
0001B1CE                            ; ===========================================================================
0001B1CE                            
0001B1CE                            loc_1A9C0:				; XREF: Obj86_Index2
0001B1CE 4A68 0010                  		tst.w	$10(a0)
0001B1D2 6700                       		beq.s	loc_1A9E6
0001B1D4 4EB9 0000 DCB8             		jsr	SpeedToPos
0001B1DA 3028 0008                  		move.w	8(a0),d0
0001B1DE 9068 0030                  		sub.w	$30(a0),d0
0001B1E2 6400                       		bcc.s	loc_1A9E6
0001B1E4 4268 0010                  		clr.w	$10(a0)
0001B1E8 D168 0008                  		add.w	d0,8(a0)
0001B1EC 2268 0034                  		movea.l	$34(a0),a1
0001B1F0 5369 0032                  		subq.w	#1,$32(a1)
0001B1F4                            
0001B1F4                            loc_1A9E6:
0001B1F4 117C 0000 001C             		move.b	#0,$1C(a0)
0001B1FA 5368 0028                  		subq.w	#1,$28(a0)
0001B1FE 6600                       		bne.s	locret_1AA1C
0001B200 5428 0025                  		addq.b	#2,$25(a0)
0001B204 117C 0001 001C             		move.b	#1,$1C(a0)
0001B20A 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B210 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B216 7000                       		moveq	#0,d0
0001B218 3038 D008                  		move.w	($FFFFD008).w,d0
0001B21C 9068 0008                  		sub.w	8(a0),d0
0001B220 3140 0010                  		move.w	d0,$10(a0)
0001B224 317C 0140 0012             		move.w	#$140,$12(a0)
0001B22A                            
0001B22A                            locret_1AA1C:
0001B22A 4E75                       		rts	
0001B22C                            ; ===========================================================================
0001B22C                            
0001B22C                            loc_1AA1E:				; XREF: Obj86_Index2
0001B22C 4EB9 0000 DCB8             		jsr	SpeedToPos
0001B232 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B238 6400                       		bcc.s	loc_1AA34
0001B23A 5368 0028                  		subq.w	#1,$28(a0)
0001B23E 6700                       		beq.s	loc_1AA34
0001B240 4E75                       		rts	
0001B242                            ; ===========================================================================
0001B242                            
0001B242                            loc_1AA34:
0001B242 2268 0034                  		movea.l	$34(a0),a1
0001B246 5369 0038                  		subq.w	#1,$38(a1)
0001B24A 6000 FA0A                  		bra.w	Obj84_Delete
0001B24E                            ; ===========================================================================
0001B24E                            Ani_obj86:
0001B24E                            	include "_anim\obj86.asm"
0001B24E                            ; ---------------------------------------------------------------------------
0001B24E                            ; Animation script - energy ball launcher (FZ)
0001B24E                            ; ---------------------------------------------------------------------------
0001B24E 0000                       		dc.w byte_1AA46-Ani_obj86
0001B250 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B252 0000                       		dc.w byte_1AA50-Ani_obj86
0001B254 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B258 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B25E 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B264                            		even
0001B264                            		even
0001B264                            
0001B264                            ; ---------------------------------------------------------------------------
0001B264                            ; Sprite mappings - energy ball	launcher (FZ)
0001B264                            ; ---------------------------------------------------------------------------
0001B264                            Map_obj86:
0001B264                            	include "_maps\obj86.asm"
0001B264                            ; ---------------------------------------------------------------------------
0001B264                            ; Sprite mappings - energy ball	launcher (FZ)
0001B264                            ; ---------------------------------------------------------------------------
0001B264 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B268 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B26C 01                         byte_1AA5E:	dc.b 1
0001B26D F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B272 01                         byte_1AA64:	dc.b 1
0001B273 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B278 01                         byte_1AA6A:	dc.b 1
0001B279 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B27E 01                         byte_1AA70:	dc.b 1
0001B27F F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B284                            		even
0001B284                            		even
0001B284                            
0001B284                            Ani_obj86a:
0001B284                            	include "_anim\obj86a.asm"
0001B284                            ; ---------------------------------------------------------------------------
0001B284                            ; Animation script - energy balls (FZ)
0001B284                            ; ---------------------------------------------------------------------------
0001B284 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B286 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B288 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B297 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B2A6 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B2AA 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B2B4                            		even
0001B2B4                            		even
0001B2B4                            
0001B2B4                            ; ---------------------------------------------------------------------------
0001B2B4                            ; Sprite mappings - energy balls (FZ)
0001B2B4                            ; ---------------------------------------------------------------------------
0001B2B4                            Map_obj86a:
0001B2B4                            	include "_maps\obj86a.asm"
0001B2B4                            ; ---------------------------------------------------------------------------
0001B2B4                            ; Sprite mappings - energy balls (FZ)
0001B2B4                            ; ---------------------------------------------------------------------------
0001B2B4 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B2B8 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B2BC 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B2C0 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B2C4 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B2C8 0000                       		dc.w byte_1AB20-Map_obj86a
0001B2CA 02                         byte_1AABC:	dc.b 2
0001B2CB F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B2D0 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B2D5 02                         byte_1AAC7:	dc.b 2
0001B2D6 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B2DB F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B2E0 02                         byte_1AAD2:	dc.b 2
0001B2E1 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B2E6 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B2EB 02                         byte_1AADD:	dc.b 2
0001B2EC F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B2F1 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B2F6 02                         byte_1AAE8:	dc.b 2
0001B2F7 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B2FC 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B301 02                         byte_1AAF3:	dc.b 2
0001B302 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B307 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B30C 01                         byte_1AAFE:	dc.b 1
0001B30D F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B312 01                         byte_1AB04:	dc.b 1
0001B313 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B318 02                         byte_1AB0A:	dc.b 2
0001B319 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B31E 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B323 02                         byte_1AB15:	dc.b 2
0001B324 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B329 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B32E 00                         byte_1AB20:	dc.b 0
0001B330 00                         		even
0001B330 00                         		even
0001B330                            
0001B330                            ; ===========================================================================
0001B330                            ; ---------------------------------------------------------------------------
0001B330                            ; Object 3E - prison capsule
0001B330                            ; ---------------------------------------------------------------------------
0001B330                            
0001B330                            Obj3E:					; XREF: Obj_Index
0001B330 7000                       		moveq	#0,d0
0001B332 1028 0024                  		move.b	$24(a0),d0
0001B336 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B33A 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B33E 3028 0008                  		move.w	8(a0),d0
0001B342 0240 FF80                  		andi.w	#$FF80,d0
0001B346 3238 F700                  		move.w	($FFFFF700).w,d1
0001B34A 0441 0080                  		subi.w	#$80,d1
0001B34E 0241 FF80                  		andi.w	#$FF80,d1
0001B352 9041                       		sub.w	d1,d0
0001B354 0C40 0280                  		cmpi.w	#$280,d0
0001B358 6200                       		bhi.s	Obj3E_Delete
0001B35A 4EF9 0000 DCDE             		jmp	DisplaySprite
0001B360                            ; ===========================================================================
0001B360                            
0001B360                            Obj3E_Delete:
0001B360 4EF9 0000 DD1A             		jmp	DeleteObject
0001B366                            ; ===========================================================================
0001B366 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B368 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B36A 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B36C 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B36E 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B370 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B372 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B374 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B376                            
0001B376 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B37A 040C 0501                  		dc.b 4,	$C, 5, 1
0001B37E 0610 0403                  		dc.b 6,	$10, 4,	3
0001B382 0810 0305                  		dc.b 8,	$10, 3,	5
0001B386                            ; ===========================================================================
0001B386                            
0001B386                            Obj3E_Main:				; XREF: Obj3E_Index
0001B386 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B38E 317C 049D 0002             		move.w	#$49D,2(a0)
0001B394 117C 0004 0001             		move.b	#4,1(a0)
0001B39A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B3A0 7000                       		moveq	#0,d0
0001B3A2 1028 0028                  		move.b	$28(a0),d0
0001B3A6 E548                       		lsl.w	#2,d0
0001B3A8 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B3AC 1159 0024                  		move.b	(a1)+,$24(a0)
0001B3B0 1159 0019                  		move.b	(a1)+,$19(a0)
0001B3B4 1159 0018                  		move.b	(a1)+,$18(a0)
0001B3B8 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B3BC 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B3C0 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B3C2 117C 0006 0020             		move.b	#6,$20(a0)
0001B3C8 117C 0008 0021             		move.b	#8,$21(a0)
0001B3CE                            
0001B3CE                            Obj3E_Not02:
0001B3CE 4E75                       		rts	
0001B3D0                            ; ===========================================================================
0001B3D0                            
0001B3D0                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B3D0 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B3D6 6700                       		beq.s	Obj3E_ChkOpened
0001B3D8 323C 002B                  		move.w	#$2B,d1
0001B3DC 343C 0018                  		move.w	#$18,d2
0001B3E0 363C 0018                  		move.w	#$18,d3
0001B3E4 3828 0008                  		move.w	8(a0),d4
0001B3E8 4EF9 0001 00AE             		jmp	SolidObject
0001B3EE                            ; ===========================================================================
0001B3EE                            
0001B3EE                            Obj3E_ChkOpened:
0001B3EE 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B3F2 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B3F4 4228 0025                  		clr.b	$25(a0)
0001B3F8 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B3FE 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B404                            
0001B404                            Obj3E_DoOpen:
0001B404 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B40A 4E75                       		rts	
0001B40C                            ; ===========================================================================
0001B40C                            
0001B40C                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B40C 323C 0017                  		move.w	#$17,d1
0001B410 343C 0008                  		move.w	#8,d2
0001B414 363C 0008                  		move.w	#8,d3
0001B418 3828 0008                  		move.w	8(a0),d4
0001B41C 4EB9 0001 00AE             		jsr	SolidObject
0001B422 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B428 4EB9 0000 AD9E             		jsr	AnimateSprite
0001B42E 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B434 4A28 0025                  		tst.b	$25(a0)
0001B438 6700                       		beq.s	locret_1AC60
0001B43A 5068 000C                  		addq.w	#8,$C(a0)
0001B43E 117C 000A 0024             		move.b	#$A,$24(a0)
0001B444 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B44A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B44E 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B452 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B458 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B45E 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B460 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B466 6000                       		bra.s	Obj3E_ContinueCode
0001B468                            
0001B468                            Obj3E_MoveLeft:
0001B468 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B46E                            
0001B46E                            Obj3E_ContinueCode:
0001B46E 4228 0025                  		clr.b	$25(a0)
0001B472 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B478 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B47E                            
0001B47E                            locret_1AC60:
0001B47E 4E75                       		rts	
0001B480                            ; ===========================================================================
0001B480                            
0001B480                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B480 7007                       		moveq	#7,d0
0001B482 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B486 6600                       		bne.s	loc_1ACA0
0001B488 4EB9 0000 E164             		jsr	SingleObjLoad
0001B48E 6600                       		bne.s	loc_1ACA0
0001B490 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B494 3368 0008 0008             		move.w	8(a0),8(a1)
0001B49A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B4A0 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001B4A6 7200                       		moveq	#0,d1
0001B4A8 1200                       		move.b	d0,d1
0001B4AA E409                       		lsr.b	#2,d1
0001B4AC 0441 0020                  		subi.w	#$20,d1
0001B4B0 D369 0008                  		add.w	d1,8(a1)
0001B4B4 E048                       		lsr.w	#8,d0
0001B4B6 E608                       		lsr.b	#3,d0
0001B4B8 D169 000C                  		add.w	d0,$C(a1)
0001B4BC                            
0001B4BC                            loc_1ACA0:
0001B4BC 5368 001E                  		subq.w	#1,$1E(a0)
0001B4C0 6700                       		beq.s	Obj3E_MakeAnimal
0001B4C2 4E75                       		rts	
0001B4C4                            ; ===========================================================================
0001B4C4                            
0001B4C4                            Obj3E_MakeAnimal:
0001B4C4 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B4CA 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B4D0 117C 0006 001A             		move.b	#6,$1A(a0)
0001B4D6 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B4DC 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B4E2 7C07                       		moveq	#7,d6
0001B4E4 3A3C 009A                  		move.w	#$9A,d5
0001B4E8 78E4                       		moveq	#-$1C,d4
0001B4EA                            
0001B4EA                            Obj3E_Loop:
0001B4EA 4EB9 0000 E164             		jsr	SingleObjLoad
0001B4F0 6600                       		bne.s	locret_1ACF8
0001B4F2 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B4F6 3368 0008 0008             		move.w	8(a0),8(a1)
0001B4FC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B502 D969 0008                  		add.w	d4,8(a1)
0001B506 5E44                       		addq.w	#7,d4
0001B508 3345 0036                  		move.w	d5,$36(a1)
0001B50C 5145                       		subq.w	#8,d5
0001B50E 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B512                            
0001B512                            locret_1ACF8:
0001B512 4E75                       		rts	
0001B514                            ; ===========================================================================
0001B514                            
0001B514                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B514 7007                       		moveq	#7,d0
0001B516 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B51A 6600                       		bne.s	loc_1AD38
0001B51C 4EB9 0000 E164             		jsr	SingleObjLoad
0001B522 6600                       		bne.s	loc_1AD38
0001B524 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B528 3368 0008 0008             		move.w	8(a0),8(a1)
0001B52E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B534 4EB9 0000 2C3E             		jsr	(RandomNumber).l
0001B53A 0240 001F                  		andi.w	#$1F,d0
0001B53E 5D40                       		subq.w	#6,d0
0001B540 4A41                       		tst.w	d1
0001B542 6A00                       		bpl.s	loc_1AD2E
0001B544 4440                       		neg.w	d0
0001B546                            
0001B546                            loc_1AD2E:
0001B546 D169 0008                  		add.w	d0,8(a1)
0001B54A 337C 000C 0036             		move.w	#$C,$36(a1)
0001B550                            
0001B550                            loc_1AD38:
0001B550 5368 001E                  		subq.w	#1,$1E(a0)
0001B554 6600                       		bne.s	locret_1AD48
0001B556 5428 0024                  		addq.b	#2,$24(a0)
0001B55A 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B560                            
0001B560                            locret_1AD48:
0001B560 4E75                       		rts	
0001B562                            ; ===========================================================================
0001B562                            
0001B562                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B562 703E                       		moveq	#$3E,d0
0001B564 7228                       		moveq	#$28,d1
0001B566 7440                       		moveq	#$40,d2
0001B568 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B56C                            
0001B56C                            Obj3E_FindObj28:
0001B56C B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B56E 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B570 D2C2                       		adda.w	d2,a1		; next object RAM
0001B572 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B576                            
0001B576 4EB9 0000 F36A             		jsr	GotThroughAct
0001B57C 4EF9 0000 DD1A             		jmp	DeleteObject
0001B582                            ; ===========================================================================
0001B582                            
0001B582                            Obj3E_Obj28Found:
0001B582 4E75                       		rts	
0001B584                            ; ===========================================================================
0001B584                            Ani_obj3E:
0001B584                            	include "_anim\obj3E.asm"
0001B584                            ; ---------------------------------------------------------------------------
0001B584                            ; Animation script - prison capsule
0001B584                            ; ---------------------------------------------------------------------------
0001B584 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B586 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B588 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B58C                            		even
0001B58C                            		even
0001B58C                            
0001B58C                            ; ---------------------------------------------------------------------------
0001B58C                            ; Sprite mappings - prison capsule
0001B58C                            ; ---------------------------------------------------------------------------
0001B58C                            Map_obj3E:
0001B58C                            	include "_maps\obj3E.asm"
0001B58C                            ; ---------------------------------------------------------------------------
0001B58C                            ; Sprite mappings - prison capsule
0001B58C                            ; ---------------------------------------------------------------------------
0001B58C 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B590 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B594 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B598 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B59A 07                         byte_1AD82:	dc.b 7
0001B59B E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B5A0 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B5A5 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B5AA F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B5AF F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B5B4 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B5B9 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B5BE 01                         byte_1ADA6:	dc.b 1
0001B5BF F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B5C4 06                         byte_1ADAC:	dc.b 6
0001B5C5 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B5CA 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B5CF 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B5D4 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B5D9 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B5DE 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B5E3 01                         byte_1ADCB:	dc.b 1
0001B5E4 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B5E9 02                         byte_1ADD1:	dc.b 2
0001B5EA E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B5EF 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B5F4 01                         byte_1ADDC:	dc.b 1
0001B5F5 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B5FA 00                         byte_1ADE2:	dc.b 0
0001B5FC 00                         		even
0001B5FC 00                         		even
0001B5FC                            
0001B5FC                            ; ---------------------------------------------------------------------------
0001B5FC                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B5FC                            ; ---------------------------------------------------------------------------
0001B5FC                            
0001B5FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B5FC                            
0001B5FC                            
0001B5FC                            TouchResponse:				; XREF: Obj01
0001B5FC 4E71                       		nop	
0001B5FE 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B602 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B606 5142                       		subq.w	#8,d2
0001B608 7A00                       		moveq	#0,d5
0001B60A 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B60E 5705                       		subq.b	#3,d5
0001B610 9645                       		sub.w	d5,d3
0001B612 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B618 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B61A 0643 000C                  		addi.w	#$C,d3
0001B61E 7A0A                       		moveq	#$A,d5
0001B620                            
0001B620                            Touch_NoDuck:
0001B620 383C 0010                  		move.w	#$10,d4
0001B624 DA45                       		add.w	d5,d5
0001B626 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B62A 3C3C 005F                  		move.w	#$5F,d6
0001B62E                            
0001B62E                            Touch_Loop:
0001B62E 4A29 0001                  		tst.b	1(a1)
0001B632 6A00                       		bpl.s	Touch_NextObj
0001B634 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B638 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B63A                            
0001B63A                            Touch_NextObj:
0001B63A 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B63E 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B642                            
0001B642 7000                       		moveq	#0,d0
0001B644 4E75                       		rts	
0001B646                            ; ===========================================================================
0001B646 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B648 0C14                       		dc.b   $C, $14
0001B64A 140C                       		dc.b  $14,  $C
0001B64C 0410                       		dc.b	4, $10
0001B64E 0C12                       		dc.b   $C, $12
0001B650 1010                       		dc.b  $10, $10
0001B652 0606                       		dc.b	6,   6
0001B654 180C                       		dc.b  $18,  $C
0001B656 0C10                       		dc.b   $C, $10
0001B658 100C                       		dc.b  $10,  $C
0001B65A 0808                       		dc.b	8,   8
0001B65C 1410                       		dc.b  $14, $10
0001B65E 1408                       		dc.b  $14,   8
0001B660 0E0E                       		dc.b   $E,  $E
0001B662 1818                       		dc.b  $18, $18
0001B664 2810                       		dc.b  $28, $10
0001B666 1018                       		dc.b  $10, $18
0001B668 0810                       		dc.b	8, $10
0001B66A 2070                       		dc.b  $20, $70
0001B66C 4020                       		dc.b  $40, $20
0001B66E 8020                       		dc.b  $80, $20
0001B670 2020                       		dc.b  $20, $20
0001B672 0808                       		dc.b	8,   8
0001B674 0404                       		dc.b	4,   4
0001B676 2008                       		dc.b  $20,   8
0001B678 0C0C                       		dc.b   $C,  $C
0001B67A 0804                       		dc.b	8,   4
0001B67C 1804                       		dc.b  $18,   4
0001B67E 2804                       		dc.b  $28,   4
0001B680 0408                       		dc.b	4,   8
0001B682 0418                       		dc.b	4, $18
0001B684 0428                       		dc.b	4, $28
0001B686 0420                       		dc.b	4, $20
0001B688 1818                       		dc.b  $18, $18
0001B68A 0C18                       		dc.b   $C, $18
0001B68C 4808                       		dc.b  $48,   8
0001B68E                            ; ===========================================================================
0001B68E                            
0001B68E                            Touch_Height:				; XREF: TouchResponse
0001B68E 0240 003F                  		andi.w	#$3F,d0
0001B692 D040                       		add.w	d0,d0
0001B694 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B698 7200                       		moveq	#0,d1
0001B69A 121A                       		move.b	(a2)+,d1
0001B69C 3029 0008                  		move.w	8(a1),d0
0001B6A0 9041                       		sub.w	d1,d0
0001B6A2 9042                       		sub.w	d2,d0
0001B6A4 6400                       		bcc.s	loc_1AE98
0001B6A6 D241                       		add.w	d1,d1
0001B6A8 D041                       		add.w	d1,d0
0001B6AA 6500                       		bcs.s	Touch_Width
0001B6AC 6000 FF8C                  		bra.w	Touch_NextObj
0001B6B0                            ; ===========================================================================
0001B6B0                            
0001B6B0                            loc_1AE98:
0001B6B0 B044                       		cmp.w	d4,d0
0001B6B2 6200 FF86                  		bhi.w	Touch_NextObj
0001B6B6                            
0001B6B6                            Touch_Width:
0001B6B6 7200                       		moveq	#0,d1
0001B6B8 121A                       		move.b	(a2)+,d1
0001B6BA 3029 000C                  		move.w	$C(a1),d0
0001B6BE 9041                       		sub.w	d1,d0
0001B6C0 9043                       		sub.w	d3,d0
0001B6C2 6400                       		bcc.s	loc_1AEB6
0001B6C4 D241                       		add.w	d1,d1
0001B6C6 D240                       		add.w	d0,d1
0001B6C8 6500                       		bcs.s	Touch_ChkValue
0001B6CA 6000 FF6E                  		bra.w	Touch_NextObj
0001B6CE                            ; ===========================================================================
0001B6CE                            
0001B6CE                            loc_1AEB6:
0001B6CE B045                       		cmp.w	d5,d0
0001B6D0 6200 FF68                  		bhi.w	Touch_NextObj
0001B6D4                            
0001B6D4                            Touch_ChkValue:
0001B6D4 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B6D8 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B6DC 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B6E0 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B6E4 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B6E8 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B6EA 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B6EE                            
0001B6EE                            ; touch	response is $40-$7F
0001B6EE                            
0001B6EE 1029 0020                  		move.b	$20(a1),d0
0001B6F2 0200 003F                  		andi.b	#$3F,d0
0001B6F6 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B6FA 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B6FC 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B702 6400 0000                  		bcc.w	locret_1AEF2
0001B706 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B70A                            
0001B70A                            locret_1AEF2:
0001B70A 4E75                       		rts	
0001B70C                            ; ===========================================================================
0001B70C                            
0001B70C                            Touch_Monitor:
0001B70C 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B710 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B712 3028 000C                  		move.w	$C(a0),d0
0001B716 0440 0010                  		subi.w	#$10,d0
0001B71A B069 000C                  		cmp.w	$C(a1),d0
0001B71E 6500                       		bcs.s	locret_1AF2E
0001B720 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B724 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B72A 4A29 0025                  		tst.b	$25(a1)
0001B72E 6600                       		bne.s	locret_1AF2E
0001B730 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B734 4E75                       		rts	
0001B736                            ; ===========================================================================
0001B736                            
0001B736                            loc_1AF1E:
0001B736 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B73C 6600                       		bne.s	locret_1AF2E
0001B73E 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B742 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B746                            
0001B746                            locret_1AF2E:
0001B746 4E75                       		rts	
0001B748                            ; ===========================================================================
0001B748                            
0001B748                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B748 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B74C 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B74E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B754 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B758                            
0001B758                            loc_1AF40:
0001B758 4A29 0021                  		tst.b	$21(a1)
0001B75C 6700                       		beq.s	Touch_KillEnemy
0001B75E 4468 0010                  		neg.w	$10(a0)
0001B762 4468 0012                  		neg.w	$12(a0)
0001B766 E0E8 0010                  		asr	$10(a0)
0001B76A E0E8 0012                  		asr	$12(a0)
0001B76E 137C 0000 0020             		move.b	#0,$20(a1)
0001B774 5329 0021                  		subq.b	#1,$21(a1)
0001B778 6600                       		bne.s	locret_1AF68
0001B77A 08E9 0007 0022             		bset	#7,$22(a1)
0001B780                            
0001B780                            locret_1AF68:
0001B780 4E75                       		rts	
0001B782                            ; ===========================================================================
0001B782                            
0001B782                            Touch_KillEnemy:
0001B782 08E9 0007 0022             		bset	#7,$22(a1)
0001B788 7000                       		moveq	#0,d0
0001B78A 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B78E 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B792 0C40 0006                  		cmpi.w	#6,d0
0001B796 6500                       		bcs.s	loc_1AF82
0001B798 7006                       		moveq	#6,d0
0001B79A                            
0001B79A                            loc_1AF82:
0001B79A 3340 003E                  		move.w	d0,$3E(a1)
0001B79E 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B7A2 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B7A8 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B7AA 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B7AE 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B7B4                            
0001B7B4                            loc_1AF9C:
0001B7B4 6100 0000                  		bsr.w	AddPoints
0001B7B8 7400                       		moveq	#0,d2	; GMZ
0001B7BA 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001B7BC 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001B7BE                            
0001B7BE                            TouchKE_Explode:
0001B7BE 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B7C2 137C 0000 0024             		move.b	#0,$24(a1)
0001B7C8 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001B7CC                            
0001B7CC                            TouchKE_NextExplosion:
0001B7CC 5802                       		addq.b	#4,d2
0001B7CE 4EB9 0000 E164             		jsr	SingleObjLoad
0001B7D4 6600                       		bne.s	TouchKE_NoExplosion
0001B7D6 336A 0008 0008             		move.w	8(a2),8(a1)
0001B7DC 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001B7E2 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001B7E6                            
0001B7E6                            TouchKE_NoExplosion:
0001B7E6 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001B7E8 4A68 0012                  		tst.w	$12(a0)
0001B7EC 6B00                       		bmi.s	loc_1AFC2
0001B7EE 3028 000C                  		move.w	$C(a0),d0
0001B7F2 B069 000C                  		cmp.w	$C(a1),d0
0001B7F6 6400                       		bcc.s	loc_1AFCA
0001B7F8 4468 0012                  		neg.w	$12(a0)
0001B7FC 4E75                       		rts	
0001B7FE                            ; ===========================================================================
0001B7FE                            
0001B7FE                            loc_1AFC2:
0001B7FE 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B804 4E75                       		rts	
0001B806                            ; ===========================================================================
0001B806                            
0001B806                            loc_1AFCA:
0001B806 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B80C 4E75                       		rts	
0001B80E                            ; ===========================================================================
0001B80E 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B816                            ; ===========================================================================
0001B816                            
0001B816                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B816 08E9 0007 0022             		bset	#7,$22(a1)
0001B81C                            
0001B81C                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B81C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B820 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B822                            
0001B822                            loc_1AFE6:				; XREF: Touch_Hurt
0001B822 70FF                       		moveq	#-1,d0
0001B824 4E75                       		rts	
0001B826                            ; ===========================================================================
0001B826                            
0001B826                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B826 4E71                       		nop	
0001B828 4A68 0030                  		tst.w	$30(a0)
0001B82C 66F4                       		bne.s	loc_1AFE6
0001B82E 2449                       		movea.l	a1,a2
0001B830                            
0001B830                            ; End of function TouchResponse
0001B830                            ; continue straight to HurtSonic
0001B830                            
0001B830                            ; ---------------------------------------------------------------------------
0001B830                            ; Hurting Sonic	subroutine
0001B830                            ; ---------------------------------------------------------------------------
0001B830                            
0001B830                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B830                            
0001B830                            
0001B830                            HurtSonic:
0001B830 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B834 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B836 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B83A 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B83E 4EB9 0000 E164             		jsr	SingleObjLoad
0001B844 6600                       		bne.s	Hurt_Shield
0001B846 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B84A 3368 0008 0008             		move.w	8(a0),8(a1)
0001B850 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B856                            
0001B856                            Hurt_Shield:
0001B856 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B85C 117C 0004 0024             		move.b	#4,$24(a0)
0001B862 6100 86B8                  		bsr.w	Sonic_ResetOnFloor
0001B866 08E8 0001 0022             		bset	#1,$22(a0)
0001B86C 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B872 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B878 0828 0006 0022             		btst	#6,$22(a0)
0001B87E 6700                       		beq.s	Hurt_Reverse
0001B880 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B886 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B88C                            
0001B88C                            Hurt_Reverse:
0001B88C 3028 0008                  		move.w	8(a0),d0
0001B890 B06A 0008                  		cmp.w	8(a2),d0
0001B894 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B896 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B89A                            
0001B89A                            Hurt_ChkSpikes:
0001B89A 317C 0000 0014             		move.w	#0,$14(a0)
0001B8A0 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B8A6 317C 0078 0030             		move.w	#$78,$30(a0)
0001B8AC 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B8B0 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B8B4 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B8B6 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B8BA 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B8BC 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B8C0                            
0001B8C0                            Hurt_Sound:
0001B8C0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l
0001B8C6 70FF                       		moveq	#-1,d0
0001B8C8 4E75                       		rts	
0001B8CA                            ; ===========================================================================
0001B8CA                            
0001B8CA                            Hurt_NoRings:
0001B8CA 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B8CE 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B8D2                            ; End of function HurtSonic
0001B8D2                            
0001B8D2                            ; ---------------------------------------------------------------------------
0001B8D2                            ; Subroutine to	kill Sonic
0001B8D2                            ; ---------------------------------------------------------------------------
0001B8D2                            
0001B8D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B8D2                            
0001B8D2                            
0001B8D2                            KillSonic:
0001B8D2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B8D6 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B8D8 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B8DE 117C 0006 0024             		move.b	#6,$24(a0)
0001B8E4 6100 8636                  		bsr.w	Sonic_ResetOnFloor
0001B8E8 08E8 0001 0022             		bset	#1,$22(a0)
0001B8EE 317C F900 0012             		move.w	#-$700,$12(a0)
0001B8F4 317C 0000 0010             		move.w	#0,$10(a0)
0001B8FA 317C 0000 0014             		move.w	#0,$14(a0)
0001B900 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B906 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B90C 08E8 0007 0002             		bset	#7,2(a0)
0001B912 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B916 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B91A 6600                       		bne.s	Kill_Sound
0001B91C 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B920                            
0001B920                            Kill_Sound:
0001B920 4EB9 0000 15C0             		jsr	(PlaySound_Special).l
0001B926                            
0001B926                            Kill_NoDeath:
0001B926 70FF                       		moveq	#-1,d0
0001B928 4E75                       		rts	
0001B92A                            ; End of function KillSonic
0001B92A                            
0001B92A                            
0001B92A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B92A                            
0001B92A                            
0001B92A                            Touch_Special:				; XREF: Touch_ChkValue
0001B92A 1229 0020                  		move.b	$20(a1),d1
0001B92E 0201 003F                  		andi.b	#$3F,d1
0001B932 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B936 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B938 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B93C 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B93E 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B942 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B944 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B948 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B94A 4E75                       		rts	
0001B94C                            ; ===========================================================================
0001B94C                            
0001B94C                            Touch_CatKiller:			; XREF: Touch_Special
0001B94C 6000 FEC8                  		bra.w	loc_1AFDA
0001B950                            ; ===========================================================================
0001B950                            
0001B950                            Touch_Yadrin:				; XREF: Touch_Special
0001B950 9A40                       		sub.w	d0,d5
0001B952 0C45 0008                  		cmpi.w	#8,d5
0001B956 6400                       		bcc.s	loc_1B144
0001B958 3029 0008                  		move.w	8(a1),d0
0001B95C 5940                       		subq.w	#4,d0
0001B95E 0829 0000 0022             		btst	#0,$22(a1)
0001B964 6700                       		beq.s	loc_1B130
0001B966 0440 0010                  		subi.w	#$10,d0
0001B96A                            
0001B96A                            loc_1B130:
0001B96A 9042                       		sub.w	d2,d0
0001B96C 6400                       		bcc.s	loc_1B13C
0001B96E 0640 0018                  		addi.w	#$18,d0
0001B972 6500                       		bcs.s	loc_1B140
0001B974 6000                       		bra.s	loc_1B144
0001B976                            ; ===========================================================================
0001B976                            
0001B976                            loc_1B13C:
0001B976 B044                       		cmp.w	d4,d0
0001B978 6200                       		bhi.s	loc_1B144
0001B97A                            
0001B97A                            loc_1B140:
0001B97A 6000 FEA0                  		bra.w	Touch_ChkHurt
0001B97E                            ; ===========================================================================
0001B97E                            
0001B97E                            loc_1B144:
0001B97E 6000 FDC8                  		bra.w	Touch_Enemy
0001B982                            ; ===========================================================================
0001B982                            
0001B982                            Touch_D7orE1:				; XREF: Touch_Special
0001B982 5229 0021                  		addq.b	#1,$21(a1)
0001B986 4E75                       		rts	
0001B988                            ; End of function Touch_Special
0001B988                            
0001B988                            ; ---------------------------------------------------------------------------
0001B988                            ; Subroutine to	show the special stage layout
0001B988                            ; ---------------------------------------------------------------------------
0001B988                            
0001B988                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B988                            
0001B988                            
0001B988                            SS_ShowLayout:				; XREF: SpecialStage
0001B988 6100 0000                  		bsr.w	SS_AniWallsRings
0001B98C 6100 0000                  		bsr.w	SS_AniItems
0001B990 3F05                       		move.w	d5,-(sp)
0001B992 43F8 8000                  		lea	($FFFF8000).w,a1
0001B996 1038 F780                  		move.b	($FFFFF780).w,d0
0001B99A 0200 00FC                  		andi.b	#$FC,d0
0001B99E 4EB9 0000 2C64             		jsr	(CalcSine).l
0001B9A4 3800                       		move.w	d0,d4
0001B9A6 3A01                       		move.w	d1,d5
0001B9A8 C9FC 0018                  		muls.w	#$18,d4
0001B9AC CBFC 0018                  		muls.w	#$18,d5
0001B9B0 7400                       		moveq	#0,d2
0001B9B2 3438 F700                  		move.w	($FFFFF700).w,d2
0001B9B6 84FC 0018                  		divu.w	#$18,d2
0001B9BA 4842                       		swap	d2
0001B9BC 4442                       		neg.w	d2
0001B9BE 0642 FF4C                  		addi.w	#-$B4,d2
0001B9C2 7600                       		moveq	#0,d3
0001B9C4 3638 F704                  		move.w	($FFFFF704).w,d3
0001B9C8 86FC 0018                  		divu.w	#$18,d3
0001B9CC 4843                       		swap	d3
0001B9CE 4443                       		neg.w	d3
0001B9D0 0643 FF4C                  		addi.w	#-$B4,d3
0001B9D4 3E3C 000F                  		move.w	#$F,d7
0001B9D8                            
0001B9D8                            loc_1B19E:
0001B9D8 48A7 E000                  		movem.w	d0-d2,-(sp)
0001B9DC 48A7 C000                  		movem.w	d0-d1,-(sp)
0001B9E0 4440                       		neg.w	d0
0001B9E2 C3C2                       		muls.w	d2,d1
0001B9E4 C1C3                       		muls.w	d3,d0
0001B9E6 2C00                       		move.l	d0,d6
0001B9E8 DC81                       		add.l	d1,d6
0001B9EA 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001B9EE C1C2                       		muls.w	d2,d0
0001B9F0 C3C3                       		muls.w	d3,d1
0001B9F2 D280                       		add.l	d0,d1
0001B9F4 2406                       		move.l	d6,d2
0001B9F6 3C3C 000F                  		move.w	#$F,d6
0001B9FA                            
0001B9FA                            loc_1B1C0:
0001B9FA 2002                       		move.l	d2,d0
0001B9FC E080                       		asr.l	#8,d0
0001B9FE 32C0                       		move.w	d0,(a1)+
0001BA00 2001                       		move.l	d1,d0
0001BA02 E080                       		asr.l	#8,d0
0001BA04 32C0                       		move.w	d0,(a1)+
0001BA06 D485                       		add.l	d5,d2
0001BA08 D284                       		add.l	d4,d1
0001BA0A 51CE FFEE                  		dbf	d6,loc_1B1C0
0001BA0E                            
0001BA0E 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001BA12 0643 0018                  		addi.w	#$18,d3
0001BA16 51CF FFC0                  		dbf	d7,loc_1B19E
0001BA1A                            
0001BA1A 3A1F                       		move.w	(sp)+,d5
0001BA1C 41F9 00FF 0000             		lea	($FF0000).l,a0
0001BA22 7000                       		moveq	#0,d0
0001BA24 3038 F704                  		move.w	($FFFFF704).w,d0
0001BA28 80FC 0018                  		divu.w	#$18,d0
0001BA2C C0FC 0080                  		mulu.w	#$80,d0
0001BA30 D1C0                       		adda.l	d0,a0
0001BA32 7000                       		moveq	#0,d0
0001BA34 3038 F700                  		move.w	($FFFFF700).w,d0
0001BA38 80FC 0018                  		divu.w	#$18,d0
0001BA3C D0C0                       		adda.w	d0,a0
0001BA3E 49F8 8000                  		lea	($FFFF8000).w,a4
0001BA42 3E3C 000F                  		move.w	#$F,d7
0001BA46                            
0001BA46                            loc_1B20C:
0001BA46 3C3C 000F                  		move.w	#$F,d6
0001BA4A                            
0001BA4A                            loc_1B210:
0001BA4A 7000                       		moveq	#0,d0
0001BA4C 1018                       		move.b	(a0)+,d0
0001BA4E 6700                       		beq.s	loc_1B268
0001BA50 0C00 004E                  		cmpi.b	#$4E,d0
0001BA54 6200                       		bhi.s	loc_1B268
0001BA56 3614                       		move.w	(a4),d3
0001BA58 0643 0120                  		addi.w	#$120,d3
0001BA5C 0C43 0070                  		cmpi.w	#$70,d3
0001BA60 6500                       		bcs.s	loc_1B268
0001BA62 0C43 01D0                  		cmpi.w	#$1D0,d3
0001BA66 6400                       		bcc.s	loc_1B268
0001BA68 342C 0002                  		move.w	2(a4),d2
0001BA6C 0642 00F0                  		addi.w	#$F0,d2
0001BA70 0C42 0070                  		cmpi.w	#$70,d2
0001BA74 6500                       		bcs.s	loc_1B268
0001BA76 0C42 0170                  		cmpi.w	#$170,d2
0001BA7A 6400                       		bcc.s	loc_1B268
0001BA7C 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001BA82 E748                       		lsl.w	#3,d0
0001BA84 4BF5 0000                  		lea	(a5,d0.w),a5
0001BA88 225D                       		movea.l	(a5)+,a1
0001BA8A 321D                       		move.w	(a5)+,d1
0001BA8C D241                       		add.w	d1,d1
0001BA8E D2F1 1000                  		adda.w	(a1,d1.w),a1
0001BA92 365D                       		movea.w	(a5)+,a3
0001BA94 7200                       		moveq	#0,d1
0001BA96 1219                       		move.b	(a1)+,d1
0001BA98 5301                       		subq.b	#1,d1
0001BA9A 6B00                       		bmi.s	loc_1B268
0001BA9C 4EB9 0000 DE3C             		jsr	sub_D762
0001BAA2                            
0001BAA2                            loc_1B268:
0001BAA2 584C                       		addq.w	#4,a4
0001BAA4 51CE FFA4                  		dbf	d6,loc_1B210
0001BAA8                            
0001BAA8 41E8 0070                  		lea	$70(a0),a0
0001BAAC 51CF FF98                  		dbf	d7,loc_1B20C
0001BAB0                            
0001BAB0 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001BAB4 0C05 0050                  		cmpi.b	#$50,d5
0001BAB8 6700                       		beq.s	loc_1B288
0001BABA 24BC 0000 0000             		move.l	#0,(a2)
0001BAC0 4E75                       		rts	
0001BAC2                            ; ===========================================================================
0001BAC2                            
0001BAC2                            loc_1B288:
0001BAC2 157C 0000 FFFB             		move.b	#0,-5(a2)
0001BAC8 4E75                       		rts	
0001BACA                            ; End of function SS_ShowLayout
0001BACA                            
0001BACA                            ; ---------------------------------------------------------------------------
0001BACA                            ; Subroutine to	animate	walls and rings	in the special stage
0001BACA                            ; ---------------------------------------------------------------------------
0001BACA                            
0001BACA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BACA                            
0001BACA                            
0001BACA                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001BACA 43F9 00FF 400C             		lea	($FF400C).l,a1
0001BAD0 7000                       		moveq	#0,d0
0001BAD2 1038 F780                  		move.b	($FFFFF780).w,d0
0001BAD6 E408                       		lsr.b	#2,d0
0001BAD8 0240 000F                  		andi.w	#$F,d0
0001BADC 7223                       		moveq	#$23,d1
0001BADE                            
0001BADE                            loc_1B2A4:
0001BADE 3280                       		move.w	d0,(a1)
0001BAE0 5049                       		addq.w	#8,a1
0001BAE2 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001BAE6                            
0001BAE6 43F9 00FF 4005             		lea	($FF4005).l,a1
0001BAEC 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001BAF0 6A00                       		bpl.s	loc_1B2C8
0001BAF2 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001BAF8 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001BAFC 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001BB02                            
0001BB02                            loc_1B2C8:
0001BB02 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001BB08 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001BB0C 6A00                       		bpl.s	loc_1B2E4
0001BB0E 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001BB14 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001BB18 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BB1E                            
0001BB1E                            loc_1B2E4:
0001BB1E 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BB22 1340 0138                  		move.b	d0,$138(a1)
0001BB26 1340 0160                  		move.b	d0,$160(a1)
0001BB2A 1340 0148                  		move.b	d0,$148(a1)
0001BB2E 1340 0150                  		move.b	d0,$150(a1)
0001BB32 1340 01D8                  		move.b	d0,$1D8(a1)
0001BB36 1340 01E0                  		move.b	d0,$1E0(a1)
0001BB3A 1340 01E8                  		move.b	d0,$1E8(a1)
0001BB3E 1340 01F0                  		move.b	d0,$1F0(a1)
0001BB42 1340 01F8                  		move.b	d0,$1F8(a1)
0001BB46 1340 0200                  		move.b	d0,$200(a1)
0001BB4A 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BB4E 6A00                       		bpl.s	loc_1B326
0001BB50 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BB56 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001BB5A 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001BB60                            
0001BB60                            loc_1B326:
0001BB60 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001BB64 1340 0168                  		move.b	d0,$168(a1)
0001BB68 1340 0170                  		move.b	d0,$170(a1)
0001BB6C 1340 0178                  		move.b	d0,$178(a1)
0001BB70 1340 0180                  		move.b	d0,$180(a1)
0001BB74 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001BB78 6A00                       		bpl.s	loc_1B350
0001BB7A 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001BB80 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001BB84 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001BB8A                            
0001BB8A                            loc_1B350:
0001BB8A 43F9 00FF 4016             		lea	($FF4016).l,a1
0001BB90 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001BB96 7000                       		moveq	#0,d0
0001BB98 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001BB9C D040                       		add.w	d0,d0
0001BB9E 41F0 0000                  		lea	(a0,d0.w),a0
0001BBA2 3290                       		move.w	(a0),(a1)
0001BBA4 3368 0002 0008             		move.w	2(a0),8(a1)
0001BBAA 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BBB0 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BBB6 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BBBC 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BBC2 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BBC8 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BBCE D0FC 0020                  		adda.w	#$20,a0
0001BBD2 D2FC 0048                  		adda.w	#$48,a1
0001BBD6 3290                       		move.w	(a0),(a1)
0001BBD8 3368 0002 0008             		move.w	2(a0),8(a1)
0001BBDE 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BBE4 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BBEA 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BBF0 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BBF6 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BBFC 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BC02 D0FC 0020                  		adda.w	#$20,a0
0001BC06 D2FC 0048                  		adda.w	#$48,a1
0001BC0A 3290                       		move.w	(a0),(a1)
0001BC0C 3368 0002 0008             		move.w	2(a0),8(a1)
0001BC12 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BC18 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BC1E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BC24 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BC2A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BC30 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BC36 D0FC 0020                  		adda.w	#$20,a0
0001BC3A D2FC 0048                  		adda.w	#$48,a1
0001BC3E 3290                       		move.w	(a0),(a1)
0001BC40 3368 0002 0008             		move.w	2(a0),8(a1)
0001BC46 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BC4C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BC52 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BC58 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BC5E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BC64 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BC6A D0FC 0020                  		adda.w	#$20,a0
0001BC6E D2FC 0048                  		adda.w	#$48,a1
0001BC72 4E75                       		rts	
0001BC74                            ; End of function SS_AniWallsRings
0001BC74                            
0001BC74                            ; ===========================================================================
0001BC74 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BC84 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BC94 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BCA4 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BCB4 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BCC4 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BCD4 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BCE4 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BCF4                            ; ---------------------------------------------------------------------------
0001BCF4                            ; Subroutine to	remove items when you collect them in the special stage
0001BCF4                            ; ---------------------------------------------------------------------------
0001BCF4                            
0001BCF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BCF4                            
0001BCF4                            
0001BCF4                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BCF4 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BCFA 303C 001F                  		move.w	#$1F,d0
0001BCFE                            
0001BCFE                            loc_1B4C4:
0001BCFE 4A12                       		tst.b	(a2)
0001BD00 6700                       		beq.s	locret_1B4CE
0001BD02 504A                       		addq.w	#8,a2
0001BD04 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BD08                            
0001BD08                            locret_1B4CE:
0001BD08 4E75                       		rts	
0001BD0A                            ; End of function SS_RemoveCollectedItem
0001BD0A                            
0001BD0A                            ; ---------------------------------------------------------------------------
0001BD0A                            ; Subroutine to	animate	special	stage items when you touch them
0001BD0A                            ; ---------------------------------------------------------------------------
0001BD0A                            
0001BD0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD0A                            
0001BD0A                            
0001BD0A                            SS_AniItems:				; XREF: SS_ShowLayout
0001BD0A 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BD10 3E3C 001F                  		move.w	#$1F,d7
0001BD14                            
0001BD14                            loc_1B4DA:
0001BD14 7000                       		moveq	#0,d0
0001BD16 1010                       		move.b	(a0),d0
0001BD18 6700                       		beq.s	loc_1B4E8
0001BD1A E548                       		lsl.w	#2,d0
0001BD1C 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BD20 4E91                       		jsr	(a1)
0001BD22                            
0001BD22                            loc_1B4E8:
0001BD22 5048                       		addq.w	#8,a0
0001BD24                            
0001BD24                            loc_1B4EA:
0001BD24 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BD28                            
0001BD28 4E75                       		rts	
0001BD2A                            ; End of function SS_AniItems
0001BD2A                            
0001BD2A                            ; ===========================================================================
0001BD2A 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BD2E 0000 0000                  		dc.l SS_AniBumper
0001BD32 0000 0000                  		dc.l SS_Ani1Up
0001BD36 0000 0000                  		dc.l SS_AniReverse
0001BD3A 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BD3E 0000 0000                  		dc.l SS_AniGlassBlock
0001BD42                            ; ===========================================================================
0001BD42                            
0001BD42                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001BD42 5328 0002                  		subq.b	#1,2(a0)
0001BD46 6A00                       		bpl.s	locret_1B530
0001BD48 117C 0005 0002             		move.b	#5,2(a0)
0001BD4E 7000                       		moveq	#0,d0
0001BD50 1028 0003                  		move.b	3(a0),d0
0001BD54 5228 0003                  		addq.b	#1,3(a0)
0001BD58 2268 0004                  		movea.l	4(a0),a1
0001BD5C 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001BD60 1280                       		move.b	d0,(a1)
0001BD62 6600                       		bne.s	locret_1B530
0001BD64 4290                       		clr.l	(a0)
0001BD66 42A8 0004                  		clr.l	4(a0)
0001BD6A                            
0001BD6A                            locret_1B530:
0001BD6A 4E75                       		rts	
0001BD6C                            ; ===========================================================================
0001BD6C 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001BD72                            ; ===========================================================================
0001BD72                            
0001BD72                            SS_AniBumper:				; XREF: SS_AniIndex
0001BD72 5328 0002                  		subq.b	#1,2(a0)
0001BD76 6A00                       		bpl.s	locret_1B566
0001BD78 117C 0007 0002             		move.b	#7,2(a0)
0001BD7E 7000                       		moveq	#0,d0
0001BD80 1028 0003                  		move.b	3(a0),d0
0001BD84 5228 0003                  		addq.b	#1,3(a0)
0001BD88 2268 0004                  		movea.l	4(a0),a1
0001BD8C 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BD90 6600                       		bne.s	loc_1B564
0001BD92 4290                       		clr.l	(a0)
0001BD94 42A8 0004                  		clr.l	4(a0)
0001BD98 12BC 0025                  		move.b	#$25,(a1)
0001BD9C 4E75                       		rts	
0001BD9E                            ; ===========================================================================
0001BD9E                            
0001BD9E                            loc_1B564:
0001BD9E 1280                       		move.b	d0,(a1)
0001BDA0                            
0001BDA0                            locret_1B566:
0001BDA0 4E75                       		rts	
0001BDA2                            ; ===========================================================================
0001BDA2 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BDA8                            ; ===========================================================================
0001BDA8                            
0001BDA8                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BDA8 5328 0002                  		subq.b	#1,2(a0)
0001BDAC 6A00                       		bpl.s	locret_1B596
0001BDAE 117C 0005 0002             		move.b	#5,2(a0)
0001BDB4 7000                       		moveq	#0,d0
0001BDB6 1028 0003                  		move.b	3(a0),d0
0001BDBA 5228 0003                  		addq.b	#1,3(a0)
0001BDBE 2268 0004                  		movea.l	4(a0),a1
0001BDC2 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BDC6 1280                       		move.b	d0,(a1)
0001BDC8 6600                       		bne.s	locret_1B596
0001BDCA 4290                       		clr.l	(a0)
0001BDCC 42A8 0004                  		clr.l	4(a0)
0001BDD0                            
0001BDD0                            locret_1B596:
0001BDD0 4E75                       		rts	
0001BDD2                            ; ===========================================================================
0001BDD2 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BDD8                            ; ===========================================================================
0001BDD8                            
0001BDD8                            SS_AniReverse:				; XREF: SS_AniIndex
0001BDD8 5328 0002                  		subq.b	#1,2(a0)
0001BDDC 6A00                       		bpl.s	locret_1B5CC
0001BDDE 117C 0007 0002             		move.b	#7,2(a0)
0001BDE4 7000                       		moveq	#0,d0
0001BDE6 1028 0003                  		move.b	3(a0),d0
0001BDEA 5228 0003                  		addq.b	#1,3(a0)
0001BDEE 2268 0004                  		movea.l	4(a0),a1
0001BDF2 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BDF6 6600                       		bne.s	loc_1B5CA
0001BDF8 4290                       		clr.l	(a0)
0001BDFA 42A8 0004                  		clr.l	4(a0)
0001BDFE 12BC 002B                  		move.b	#$2B,(a1)
0001BE02 4E75                       		rts	
0001BE04                            ; ===========================================================================
0001BE04                            
0001BE04                            loc_1B5CA:
0001BE04 1280                       		move.b	d0,(a1)
0001BE06                            
0001BE06                            locret_1B5CC:
0001BE06 4E75                       		rts	
0001BE08                            ; ===========================================================================
0001BE08 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BE0E                            ; ===========================================================================
0001BE0E                            
0001BE0E                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BE0E 5328 0002                  		subq.b	#1,2(a0)
0001BE12 6A00                       		bpl.s	locret_1B60C
0001BE14 117C 0005 0002             		move.b	#5,2(a0)
0001BE1A 7000                       		moveq	#0,d0
0001BE1C 1028 0003                  		move.b	3(a0),d0
0001BE20 5228 0003                  		addq.b	#1,3(a0)
0001BE24 2268 0004                  		movea.l	4(a0),a1
0001BE28 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BE2C 1280                       		move.b	d0,(a1)
0001BE2E 6600                       		bne.s	locret_1B60C
0001BE30 4290                       		clr.l	(a0)
0001BE32 42A8 0004                  		clr.l	4(a0)
0001BE36 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BE3C 303C 00A8                  		move.w	#$A8,d0
0001BE40 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BE46                            
0001BE46                            locret_1B60C:
0001BE46 4E75                       		rts	
0001BE48                            ; ===========================================================================
0001BE48 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BE4E                            ; ===========================================================================
0001BE4E                            
0001BE4E                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BE4E 5328 0002                  		subq.b	#1,2(a0)
0001BE52 6A00                       		bpl.s	locret_1B640
0001BE54 117C 0001 0002             		move.b	#1,2(a0)
0001BE5A 7000                       		moveq	#0,d0
0001BE5C 1028 0003                  		move.b	3(a0),d0
0001BE60 5228 0003                  		addq.b	#1,3(a0)
0001BE64 2268 0004                  		movea.l	4(a0),a1
0001BE68 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BE6C 1280                       		move.b	d0,(a1)
0001BE6E 6600                       		bne.s	locret_1B640
0001BE70 12A8 0004                  		move.b	4(a0),(a1)
0001BE74 4290                       		clr.l	(a0)
0001BE76 42A8 0004                  		clr.l	4(a0)
0001BE7A                            
0001BE7A                            locret_1B640:
0001BE7A 4E75                       		rts	
0001BE7C                            ; ===========================================================================
0001BE7C 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BE86                            ; ---------------------------------------------------------------------------
0001BE86                            ; Special stage	layout pointers
0001BE86                            ; ---------------------------------------------------------------------------
0001BE86                            SS_LayoutIndex:
0001BE86                            	include "_inc\Special stage layout pointers.asm"
0001BE86                            ; ---------------------------------------------------------------------------
0001BE86                            ; Special stage	layout pointers
0001BE86                            ; ---------------------------------------------------------------------------
0001BE86 0000 0000                  	dc.l SS_1
0001BE8A 0000 0000                  	dc.l SS_2
0001BE8E 0000 0000                  	dc.l SS_3
0001BE92 0000 0000                  	dc.l SS_4
0001BE96 0000 0000                  	dc.l SS_5
0001BE9A 0000 0000                  	dc.l SS_6
0001BE9E                            	even
0001BE9E                            	even
0001BE9E                            
0001BE9E                            ; ---------------------------------------------------------------------------
0001BE9E                            ; Special stage	start locations
0001BE9E                            ; ---------------------------------------------------------------------------
0001BE9E                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BEB6                            		even
0001BEB6                            
0001BEB6                            ; ---------------------------------------------------------------------------
0001BEB6                            ; Subroutine to	load special stage layout
0001BEB6                            ; ---------------------------------------------------------------------------
0001BEB6                            
0001BEB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BEB6                            
0001BEB6                            
0001BEB6                            SS_Load:				; XREF: SpecialStage
0001BEB6 7000                       		moveq	#0,d0
0001BEB8 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BEBC 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BEC0 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BEC6 6500                       		bcs.s	SS_ChkEmldNum
0001BEC8 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BECE                            
0001BECE                            SS_ChkEmldNum:
0001BECE 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BED4 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BED6 7200                       		moveq	#0,d1
0001BED8 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001BEDC 5301                       		subq.b	#1,d1
0001BEDE 6500                       		bcs.s	SS_LoadData
0001BEE0 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001BEE4                            
0001BEE4                            SS_ChkEmldLoop:	
0001BEE4 B033 1000                  		cmp.b	(a3,d1.w),d0
0001BEE8 6600                       		bne.s	SS_ChkEmldRepeat
0001BEEA 60CA                       		bra.s	SS_Load
0001BEEC                            ; ===========================================================================
0001BEEC                            
0001BEEC                            SS_ChkEmldRepeat:
0001BEEC 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BEF0                            
0001BEF0                            SS_LoadData:
0001BEF0 E548                       		lsl.w	#2,d0
0001BEF2 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BEF6 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001BEFA 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001BEFE 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BF02 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BF08 303C 0000                  		move.w	#0,d0
0001BF0C 4EB9 0000 1942             		jsr	(EniDec).l
0001BF12 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BF18 303C 0FFF                  		move.w	#$FFF,d0
0001BF1C                            
0001BF1C                            SS_ClrRAM3:
0001BF1C 4299                       		clr.l	(a1)+
0001BF1E 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001BF22                            
0001BF22 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BF28 41F9 00FF 4000             		lea	($FF4000).l,a0
0001BF2E 723F                       		moveq	#$3F,d1
0001BF30                            
0001BF30                            loc_1B6F6:
0001BF30 743F                       		moveq	#$3F,d2
0001BF32                            
0001BF32                            loc_1B6F8:
0001BF32 12D8                       		move.b	(a0)+,(a1)+
0001BF34 51CA FFFC                  		dbf	d2,loc_1B6F8
0001BF38                            
0001BF38 43E9 0040                  		lea	$40(a1),a1
0001BF3C 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001BF40                            
0001BF40 43F9 00FF 4008             		lea	($FF4008).l,a1
0001BF46 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001BF4C 724D                       		moveq	#$4D,d1
0001BF4E                            
0001BF4E                            loc_1B714:
0001BF4E 22D8                       		move.l	(a0)+,(a1)+
0001BF50 32FC 0000                  		move.w	#0,(a1)+
0001BF54 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001BF5A 32D8                       		move.w	(a0)+,(a1)+
0001BF5C 51C9 FFF0                  		dbf	d1,loc_1B714
0001BF60                            
0001BF60 43F9 00FF 4400             		lea	($FF4400).l,a1
0001BF66 323C 003F                  		move.w	#$3F,d1
0001BF6A                            
0001BF6A                            loc_1B730:
0001BF6A                            
0001BF6A 4299                       		clr.l	(a1)+
0001BF6C 51C9 FFFC                  		dbf	d1,loc_1B730
0001BF70                            
0001BF70 4E75                       		rts	
0001BF72                            ; End of function SS_Load
0001BF72                            
0001BF72                            ; ===========================================================================
0001BF72                            ; ---------------------------------------------------------------------------
0001BF72                            ; Special stage	mappings and VRAM pointers
0001BF72                            ; ---------------------------------------------------------------------------
0001BF72                            SS_MapIndex:
0001BF72                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001BF72                            ; ---------------------------------------------------------------------------
0001BF72                            ; Special stage	mappings and VRAM pointers
0001BF72                            ; ---------------------------------------------------------------------------
0001BF72 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001BF76 0142                       	dc.w $142		; VRAM setting
0001BF78 0000 0000                  	dc.l Map_SSWalls
0001BF7C 0142                       	dc.w $142
0001BF7E 0000 0000                  	dc.l Map_SSWalls
0001BF82 0142                       	dc.w $142
0001BF84 0000 0000                  	dc.l Map_SSWalls
0001BF88 0142                       	dc.w $142
0001BF8A 0000 0000                  	dc.l Map_SSWalls
0001BF8E 0142                       	dc.w $142
0001BF90 0000 0000                  	dc.l Map_SSWalls
0001BF94 0142                       	dc.w $142
0001BF96 0000 0000                  	dc.l Map_SSWalls
0001BF9A 0142                       	dc.w $142
0001BF9C 0000 0000                  	dc.l Map_SSWalls
0001BFA0 0142                       	dc.w $142
0001BFA2 0000 0000                  	dc.l Map_SSWalls
0001BFA6 0142                       	dc.w $142
0001BFA8 0000 0000                  	dc.l Map_SSWalls
0001BFAC 2142                       	dc.w $2142
0001BFAE 0000 0000                  	dc.l Map_SSWalls
0001BFB2 2142                       	dc.w $2142
0001BFB4 0000 0000                  	dc.l Map_SSWalls
0001BFB8 2142                       	dc.w $2142
0001BFBA 0000 0000                  	dc.l Map_SSWalls
0001BFBE 2142                       	dc.w $2142
0001BFC0 0000 0000                  	dc.l Map_SSWalls
0001BFC4 2142                       	dc.w $2142
0001BFC6 0000 0000                  	dc.l Map_SSWalls
0001BFCA 2142                       	dc.w $2142
0001BFCC 0000 0000                  	dc.l Map_SSWalls
0001BFD0 2142                       	dc.w $2142
0001BFD2 0000 0000                  	dc.l Map_SSWalls
0001BFD6 2142                       	dc.w $2142
0001BFD8 0000 0000                  	dc.l Map_SSWalls
0001BFDC 2142                       	dc.w $2142
0001BFDE 0000 0000                  	dc.l Map_SSWalls
0001BFE2 4142                       	dc.w $4142
0001BFE4 0000 0000                  	dc.l Map_SSWalls
0001BFE8 4142                       	dc.w $4142
0001BFEA 0000 0000                  	dc.l Map_SSWalls
0001BFEE 4142                       	dc.w $4142
0001BFF0 0000 0000                  	dc.l Map_SSWalls
0001BFF4 4142                       	dc.w $4142
0001BFF6 0000 0000                  	dc.l Map_SSWalls
0001BFFA 4142                       	dc.w $4142
0001BFFC 0000 0000                  	dc.l Map_SSWalls
0001C000 4142                       	dc.w $4142
0001C002 0000 0000                  	dc.l Map_SSWalls
0001C006 4142                       	dc.w $4142
0001C008 0000 0000                  	dc.l Map_SSWalls
0001C00C 4142                       	dc.w $4142
0001C00E 0000 0000                  	dc.l Map_SSWalls
0001C012 4142                       	dc.w $4142
0001C014 0000 0000                  	dc.l Map_SSWalls
0001C018 6142                       	dc.w $6142
0001C01A 0000 0000                  	dc.l Map_SSWalls
0001C01E 6142                       	dc.w $6142
0001C020 0000 0000                  	dc.l Map_SSWalls
0001C024 6142                       	dc.w $6142
0001C026 0000 0000                  	dc.l Map_SSWalls
0001C02A 6142                       	dc.w $6142
0001C02C 0000 0000                  	dc.l Map_SSWalls
0001C030 6142                       	dc.w $6142
0001C032 0000 0000                  	dc.l Map_SSWalls
0001C036 6142                       	dc.w $6142
0001C038 0000 0000                  	dc.l Map_SSWalls
0001C03C 6142                       	dc.w $6142
0001C03E 0000 0000                  	dc.l Map_SSWalls
0001C042 6142                       	dc.w $6142
0001C044 0000 0000                  	dc.l Map_SSWalls
0001C048 6142                       	dc.w $6142
0001C04A 0000 F1D2                  	dc.l Map_obj47
0001C04E 023B                       	dc.w $23B
0001C050 0000 0000                  	dc.l Map_SS_R
0001C054 0570                       	dc.w $570
0001C056 0000 0000                  	dc.l Map_SS_R
0001C05A 0251                       	dc.w $251
0001C05C 0000 0000                  	dc.l Map_SS_R
0001C060 0370                       	dc.w $370
0001C062 0000 0000                  	dc.l Map_SS_Up
0001C066 0263                       	dc.w $263
0001C068 0000 0000                  	dc.l Map_SS_Down
0001C06C 0263                       	dc.w $263
0001C06E 0000 0000                  	dc.l Map_SS_R
0001C072 22F0                       	dc.w $22F0
0001C074 0000 0000                  	dc.l Map_SS_Glass
0001C078 0470                       	dc.w $470
0001C07A 0000 0000                  	dc.l Map_SS_Glass
0001C07E 05F0                       	dc.w $5F0
0001C080 0000 0000                  	dc.l Map_SS_Glass
0001C084 65F0                       	dc.w $65F0
0001C086 0000 0000                  	dc.l Map_SS_Glass
0001C08A 25F0                       	dc.w $25F0
0001C08C 0000 0000                  	dc.l Map_SS_Glass
0001C090 45F0                       	dc.w $45F0
0001C092 0000 0000                  	dc.l Map_SS_R
0001C096 02F0                       	dc.w $2F0
0001C098 0100 F1D2                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C09C 023B                       	dc.w $23B
0001C09E 0200 F1D2                  	dc.l Map_obj47+$2000000
0001C0A2 023B                       	dc.w $23B
0001C0A4 0000 0000                  	dc.l Map_SS_R
0001C0A8 0797                       	dc.w $797
0001C0AA 0000 0000                  	dc.l Map_SS_R
0001C0AE 07A0                       	dc.w $7A0
0001C0B0 0000 0000                  	dc.l Map_SS_R
0001C0B4 07A9                       	dc.w $7A9
0001C0B6 0000 0000                  	dc.l Map_SS_R
0001C0BA 0797                       	dc.w $797
0001C0BC 0000 0000                  	dc.l Map_SS_R
0001C0C0 07A0                       	dc.w $7A0
0001C0C2 0000 0000                  	dc.l Map_SS_R
0001C0C6 07A9                       	dc.w $7A9
0001C0C8 0000 A53C                  	dc.l Map_obj25
0001C0CC 27B2                       	dc.w $27B2
0001C0CE 0000 0000                  	dc.l Map_SS_Chaos3
0001C0D2 0770                       	dc.w $770
0001C0D4 0000 0000                  	dc.l Map_SS_Chaos3
0001C0D8 2770                       	dc.w $2770
0001C0DA 0000 0000                  	dc.l Map_SS_Chaos3
0001C0DE 4770                       	dc.w $4770
0001C0E0 0000 0000                  	dc.l Map_SS_Chaos3
0001C0E4 6770                       	dc.w $6770
0001C0E6 0000 0000                  	dc.l Map_SS_Chaos1
0001C0EA 0770                       	dc.w $770
0001C0EC 0000 0000                  	dc.l Map_SS_Chaos2
0001C0F0 0770                       	dc.w $770
0001C0F2 0000 0000                  	dc.l Map_SS_R
0001C0F6 04F0                       	dc.w $4F0
0001C0F8 0400 A53C                  	dc.l Map_obj25+$4000000
0001C0FC 27B2                       	dc.w $27B2
0001C0FE 0500 A53C                  	dc.l Map_obj25+$5000000
0001C102 27B2                       	dc.w $27B2
0001C104 0600 A53C                  	dc.l Map_obj25+$6000000
0001C108 27B2                       	dc.w $27B2
0001C10A 0700 A53C                  	dc.l Map_obj25+$7000000
0001C10E 27B2                       	dc.w $27B2
0001C110 0000 0000                  	dc.l Map_SS_Glass
0001C114 23F0                       	dc.w $23F0
0001C116 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C11A 23F0                       	dc.w $23F0
0001C11C 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C120 23F0                       	dc.w $23F0
0001C122 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C126 23F0                       	dc.w $23F0
0001C128 0000 0000                  	dc.l Map_SS_R+$2000000
0001C12C 04F0                       	dc.w $4F0
0001C12E 0000 0000                  	dc.l Map_SS_Glass
0001C132 05F0                       	dc.w $5F0
0001C134 0000 0000                  	dc.l Map_SS_Glass
0001C138 65F0                       	dc.w $65F0
0001C13A 0000 0000                  	dc.l Map_SS_Glass
0001C13E 25F0                       	dc.w $25F0
0001C140 0000 0000                  	dc.l Map_SS_Glass
0001C144 45F0                       	dc.w $45F0
0001C144 45F0                       	dc.w $45F0
0001C146                            
0001C146                            ; ---------------------------------------------------------------------------
0001C146                            ; Sprite mappings - special stage "R" block
0001C146                            ; ---------------------------------------------------------------------------
0001C146                            Map_SS_R:
0001C146                            	include "_maps\SSRblock.asm"
0001C146                            ; ---------------------------------------------------------------------------
0001C146                            ; Sprite mappings - special stage "R" block
0001C146                            ; ---------------------------------------------------------------------------
0001C146 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C14A 0000                       		dc.w byte_1B91E-Map_SS_R
0001C14C 01                         byte_1B912:	dc.b 1
0001C14D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C152 01                         byte_1B918:	dc.b 1
0001C153 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C158 00                         byte_1B91E:	dc.b 0
0001C15A 00                         		even
0001C15A 00                         		even
0001C15A                            
0001C15A                            ; ---------------------------------------------------------------------------
0001C15A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C15A                            ; ---------------------------------------------------------------------------
0001C15A                            Map_SS_Glass:
0001C15A                            	include "_maps\SSglassblock.asm"
0001C15A                            ; ---------------------------------------------------------------------------
0001C15A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C15A                            ; ---------------------------------------------------------------------------
0001C15A 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C15E 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C162 01                         byte_1B928:	dc.b 1
0001C163 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C168 01                         byte_1B92E:	dc.b 1
0001C169 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C16E 01                         byte_1B934:	dc.b 1
0001C16F F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C174 01                         byte_1B93A:	dc.b 1
0001C175 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C17A                            		even
0001C17A                            		even
0001C17A                            
0001C17A                            ; ---------------------------------------------------------------------------
0001C17A                            ; Sprite mappings - special stage "UP" block
0001C17A                            ; ---------------------------------------------------------------------------
0001C17A                            Map_SS_Up:
0001C17A                            	include "_maps\SSUPblock.asm"
0001C17A                            ; ---------------------------------------------------------------------------
0001C17A                            ; Sprite mappings - special stage "UP" block
0001C17A                            ; ---------------------------------------------------------------------------
0001C17A 0000                       		dc.w byte_1B944-Map_SS_Up
0001C17C 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C17E 01                         byte_1B944:	dc.b 1
0001C17F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C184 01                         byte_1B94A:	dc.b 1
0001C185 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C18A                            		even
0001C18A                            		even
0001C18A                            
0001C18A                            ; ---------------------------------------------------------------------------
0001C18A                            ; Sprite mappings - special stage "DOWN" block
0001C18A                            ; ---------------------------------------------------------------------------
0001C18A                            Map_SS_Down:
0001C18A                            	include "_maps\SSDOWNblock.asm"
0001C18A                            ; ---------------------------------------------------------------------------
0001C18A                            ; Sprite mappings - special stage "DOWN" block
0001C18A                            ; ---------------------------------------------------------------------------
0001C18A 0000                       		dc.w byte_1B954-Map_SS_Down
0001C18C 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C18E 01                         byte_1B954:	dc.b 1
0001C18F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C194 01                         byte_1B95A:	dc.b 1
0001C195 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C19A                            		even
0001C19A                            		even
0001C19A                            
0001C19A                            ; ---------------------------------------------------------------------------
0001C19A                            ; Sprite mappings - special stage chaos	emeralds
0001C19A                            ; ---------------------------------------------------------------------------
0001C19A 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C19C 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C19E 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C1A0 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C1A2 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C1A4 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C1A6 01                         byte_1B96C:	dc.b 1
0001C1A7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C1AC 01                         byte_1B972:	dc.b 1
0001C1AD F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C1B2 01                         byte_1B978:	dc.b 1
0001C1B3 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C1B8 01                         byte_1B97E:	dc.b 1
0001C1B9 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C1BE                            		even
0001C1BE                            ; ===========================================================================
0001C1BE                            ; ---------------------------------------------------------------------------
0001C1BE                            ; Object 09 - Sonic (special stage)
0001C1BE                            ; ---------------------------------------------------------------------------
0001C1BE                            
0001C1BE                            Obj09:					; XREF: Obj_Index
0001C1BE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C1C2 6700                       		beq.s	Obj09_Normal	; if not, branch
0001C1C4 6100 0000                  		bsr.w	SS_FixCamera
0001C1C8 6000 0000                  		bra.w	DebugMode
0001C1CC                            ; ===========================================================================
0001C1CC                            
0001C1CC                            Obj09_Normal:
0001C1CC 7000                       		moveq	#0,d0
0001C1CE 1028 0024                  		move.b	$24(a0),d0
0001C1D2 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C1D6 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C1DA                            ; ===========================================================================
0001C1DA 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C1DC 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C1DE 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C1E0 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C1E2                            ; ===========================================================================
0001C1E2                            
0001C1E2                            Obj09_Main:				; XREF: Obj09_Index
0001C1E2 5428 0024                  		addq.b	#2,$24(a0)
0001C1E6 117C 000E 0016             		move.b	#$E,$16(a0)
0001C1EC 117C 0007 0017             		move.b	#7,$17(a0)
0001C1F2 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C1FA 317C 0780 0002             		move.w	#$780,2(a0)
0001C200 117C 0004 0001             		move.b	#4,1(a0)
0001C206 117C 0000 0018             		move.b	#0,$18(a0)
0001C20C 117C 0002 001C             		move.b	#2,$1C(a0)
0001C212 08E8 0002 0022             		bset	#2,$22(a0)
0001C218 08E8 0001 0022             		bset	#1,$22(a0)
0001C21E                            
0001C21E                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C21E 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C222 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C224 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001C22A 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C22C 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C232                            
0001C232                            Obj09_NoDebug:
0001C232 117C 0000 0030             		move.b	#0,$30(a0)
0001C238 7000                       		moveq	#0,d0
0001C23A 1028 0022                  		move.b	$22(a0),d0
0001C23E 0240 0002                  		andi.w	#2,d0
0001C242 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C246 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C24A 4EBA 818A                  		jsr	LoadSonicDynPLC
0001C24E 4EF9 0000 DCDE             		jmp	DisplaySprite
0001C254                            ; ===========================================================================
0001C254 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C256 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C258                            ; ===========================================================================
0001C258                            
0001C258                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C258 6100 0000                  		bsr.w	Obj09_Jump
0001C25C 6100 0000                  		bsr.w	Obj09_Move
0001C260 6100 0000                  		bsr.w	Obj09_Fall
0001C264 6000                       		bra.s	Obj09_Display
0001C266                            ; ===========================================================================
0001C266                            
0001C266                            Obj09_InAir:				; XREF: Obj09_Modes
0001C266 6100 0000                  		bsr.w	nullsub_2
0001C26A 6100 0000                  		bsr.w	Obj09_Move
0001C26E 6100 0000                  		bsr.w	Obj09_Fall
0001C272                            
0001C272                            Obj09_Display:				; XREF: Obj09_OnWall
0001C272 6100 0000                  		bsr.w	Obj09_ChkItems
0001C276 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C27A 4EB9 0000 DCB8             		jsr	SpeedToPos
0001C280 6100 0000                  		bsr.w	SS_FixCamera
0001C284 3038 F780                  		move.w	($FFFFF780).w,d0
0001C288 D078 F782                  		add.w	($FFFFF782).w,d0
0001C28C 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C290 4EB9 0001 4140             		jsr	Sonic_Animate
0001C296 4E75                       		rts	
0001C298                            
0001C298                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C298                            
0001C298                            
0001C298                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C298 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C29E 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C2A0 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C2A4                            
0001C2A4                            Obj09_ChkRight:
0001C2A4 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C2AA 6700                       		beq.s	loc_1BA78	; if not, branch
0001C2AC 6100 0000                  		bsr.w	Obj09_MoveRight
0001C2B0                            
0001C2B0                            loc_1BA78:
0001C2B0 1038 F602                  		move.b	($FFFFF602).w,d0
0001C2B4 0200 000C                  		andi.b	#$C,d0
0001C2B8 6600                       		bne.s	loc_1BAA8
0001C2BA 3028 0014                  		move.w	$14(a0),d0
0001C2BE 6700                       		beq.s	loc_1BAA8
0001C2C0 6B00                       		bmi.s	loc_1BA9A
0001C2C2 0440 000C                  		subi.w	#$C,d0
0001C2C6 6400                       		bcc.s	loc_1BA94
0001C2C8 303C 0000                  		move.w	#0,d0
0001C2CC                            
0001C2CC                            loc_1BA94:
0001C2CC 3140 0014                  		move.w	d0,$14(a0)
0001C2D0 6000                       		bra.s	loc_1BAA8
0001C2D2                            ; ===========================================================================
0001C2D2                            
0001C2D2                            loc_1BA9A:
0001C2D2 0640 000C                  		addi.w	#$C,d0
0001C2D6 6400                       		bcc.s	loc_1BAA4
0001C2D8 303C 0000                  		move.w	#0,d0
0001C2DC                            
0001C2DC                            loc_1BAA4:
0001C2DC 3140 0014                  		move.w	d0,$14(a0)
0001C2E0                            
0001C2E0                            loc_1BAA8:
0001C2E0 1038 F780                  		move.b	($FFFFF780).w,d0
0001C2E4 0600 0020                  		addi.b	#$20,d0
0001C2E8 0200 00C0                  		andi.b	#$C0,d0
0001C2EC 4400                       		neg.b	d0
0001C2EE 4EB9 0000 2C64             		jsr	(CalcSine).l
0001C2F4 C3E8 0014                  		muls.w	$14(a0),d1
0001C2F8 D3A8 0008                  		add.l	d1,8(a0)
0001C2FC C1E8 0014                  		muls.w	$14(a0),d0
0001C300 D1A8 000C                  		add.l	d0,$C(a0)
0001C304 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C308 2428 000C                  		move.l	$C(a0),d2
0001C30C 2628 0008                  		move.l	8(a0),d3
0001C310 6100 0000                  		bsr.w	sub_1BCE8
0001C314 6700                       		beq.s	loc_1BAF2
0001C316 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C31A 93A8 0008                  		sub.l	d1,8(a0)
0001C31E 91A8 000C                  		sub.l	d0,$C(a0)
0001C322 317C 0000 0014             		move.w	#0,$14(a0)
0001C328 4E75                       		rts	
0001C32A                            ; ===========================================================================
0001C32A                            
0001C32A                            loc_1BAF2:
0001C32A 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C32E 4E75                       		rts	
0001C330                            ; End of function Obj09_Move
0001C330                            
0001C330                            
0001C330                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C330                            
0001C330                            
0001C330                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C330 08E8 0000 0022             		bset	#0,$22(a0)
0001C336 3028 0014                  		move.w	$14(a0),d0
0001C33A 6700                       		beq.s	loc_1BB06
0001C33C 6A00                       		bpl.s	loc_1BB1A
0001C33E                            
0001C33E                            loc_1BB06:
0001C33E 0440 000C                  		subi.w	#$C,d0
0001C342 0C40 F800                  		cmpi.w	#-$800,d0
0001C346 6E00                       		bgt.s	loc_1BB14
0001C348 303C F800                  		move.w	#-$800,d0
0001C34C                            
0001C34C                            loc_1BB14:
0001C34C 3140 0014                  		move.w	d0,$14(a0)
0001C350 4E75                       		rts	
0001C352                            ; ===========================================================================
0001C352                            
0001C352                            loc_1BB1A:
0001C352 0440 0040                  		subi.w	#$40,d0
0001C356 6400                       		bcc.s	loc_1BB22
0001C358 4E71                       		nop	
0001C35A                            
0001C35A                            loc_1BB22:
0001C35A 3140 0014                  		move.w	d0,$14(a0)
0001C35E 4E75                       		rts	
0001C360                            ; End of function Obj09_MoveLeft
0001C360                            
0001C360                            
0001C360                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C360                            
0001C360                            
0001C360                            Obj09_MoveRight:			; XREF: Obj09_Move
0001C360 08A8 0000 0022             		bclr	#0,$22(a0)
0001C366 3028 0014                  		move.w	$14(a0),d0
0001C36A 6B00                       		bmi.s	loc_1BB48
0001C36C 0640 000C                  		addi.w	#$C,d0
0001C370 0C40 0800                  		cmpi.w	#$800,d0
0001C374 6D00                       		blt.s	loc_1BB42
0001C376 303C 0800                  		move.w	#$800,d0
0001C37A                            
0001C37A                            loc_1BB42:
0001C37A 3140 0014                  		move.w	d0,$14(a0)
0001C37E 6000                       		bra.s	locret_1BB54
0001C380                            ; ===========================================================================
0001C380                            
0001C380                            loc_1BB48:
0001C380 0640 0040                  		addi.w	#$40,d0
0001C384 6400                       		bcc.s	loc_1BB50
0001C386 4E71                       		nop	
0001C388                            
0001C388                            loc_1BB50:
0001C388 3140 0014                  		move.w	d0,$14(a0)
0001C38C                            
0001C38C                            locret_1BB54:
0001C38C 4E75                       		rts	
0001C38E                            ; End of function Obj09_MoveRight
0001C38E                            
0001C38E                            
0001C38E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C38E                            
0001C38E                            
0001C38E                            Obj09_Jump:				; XREF: Obj09_OnWall
0001C38E 1038 F603                  		move.b	($FFFFF603).w,d0
0001C392 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001C396 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001C398 1038 F780                  		move.b	($FFFFF780).w,d0
0001C39C 0200 00FC                  		andi.b	#$FC,d0
0001C3A0 4400                       		neg.b	d0
0001C3A2 0400 0040                  		subi.b	#$40,d0
0001C3A6 4EB9 0000 2C64             		jsr	(CalcSine).l
0001C3AC C3FC 0680                  		muls.w	#$680,d1
0001C3B0 E081                       		asr.l	#8,d1
0001C3B2 3141 0010                  		move.w	d1,$10(a0)
0001C3B6 C1FC 0680                  		muls.w	#$680,d0
0001C3BA E080                       		asr.l	#8,d0
0001C3BC 3140 0012                  		move.w	d0,$12(a0)
0001C3C0 08E8 0001 0022             		bset	#1,$22(a0)
0001C3C6 303C 00A0                  		move.w	#$A0,d0
0001C3CA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play jumping sound
0001C3D0                            
0001C3D0                            Obj09_NoJump:
0001C3D0 4E75                       		rts	
0001C3D2                            ; End of function Obj09_Jump
0001C3D2                            
0001C3D2                            
0001C3D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3D2                            
0001C3D2                            
0001C3D2                            nullsub_2:				; XREF: Obj09_InAir
0001C3D2 4E75                       		rts	
0001C3D4                            ; End of function nullsub_2
0001C3D4                            
0001C3D4                            ; ===========================================================================
0001C3D4                            ; ---------------------------------------------------------------------------
0001C3D4                            ; unused subroutine to limit Sonic's upward vertical speed
0001C3D4                            ; ---------------------------------------------------------------------------
0001C3D4 323C FC00                  		move.w	#-$400,d1
0001C3D8 B268 0012                  		cmp.w	$12(a0),d1
0001C3DC 6F00                       		ble.s	locret_1BBB4
0001C3DE 1038 F602                  		move.b	($FFFFF602).w,d0
0001C3E2 0200 0070                  		andi.b	#$70,d0
0001C3E6 6600                       		bne.s	locret_1BBB4
0001C3E8 3141 0012                  		move.w	d1,$12(a0)
0001C3EC                            
0001C3EC                            locret_1BBB4:
0001C3EC 4E75                       		rts	
0001C3EE                            ; ---------------------------------------------------------------------------
0001C3EE                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C3EE                            ; ---------------------------------------------------------------------------
0001C3EE                            
0001C3EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3EE                            
0001C3EE                            
0001C3EE                            SS_FixCamera:				; XREF: Obj09
0001C3EE 3428 000C                  		move.w	$C(a0),d2
0001C3F2 3628 0008                  		move.w	8(a0),d3
0001C3F6 3038 F700                  		move.w	($FFFFF700).w,d0
0001C3FA 0443 00A0                  		subi.w	#$A0,d3
0001C3FE 6500                       		bcs.s	loc_1BBCE
0001C400 9043                       		sub.w	d3,d0
0001C402 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C406                            
0001C406                            loc_1BBCE:
0001C406 3038 F704                  		move.w	($FFFFF704).w,d0
0001C40A 0442 0070                  		subi.w	#$70,d2
0001C40E 6500                       		bcs.s	locret_1BBDE
0001C410 9042                       		sub.w	d2,d0
0001C412 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C416                            
0001C416                            locret_1BBDE:
0001C416 4E75                       		rts	
0001C418                            ; End of function SS_FixCamera
0001C418                            
0001C418                            ; ===========================================================================
0001C418                            
0001C418                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C418 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C41E 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C424 6600                       		bne.s	loc_1BBF4
0001C426 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C42C                            
0001C42C                            loc_1BBF4:
0001C42C 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C432 6D00                       		blt.s	loc_1BC12
0001C434 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C43A 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001C440 5428 0024                  		addq.b	#2,$24(a0)
0001C444 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C44A                            
0001C44A                            loc_1BC12:
0001C44A 3038 F780                  		move.w	($FFFFF780).w,d0
0001C44E D078 F782                  		add.w	($FFFFF782).w,d0
0001C452 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C456 4EB9 0001 4140             		jsr	Sonic_Animate
0001C45C 4EB9 0001 43D6             		jsr	LoadSonicDynPLC
0001C462 6100 FF8A                  		bsr.w	SS_FixCamera
0001C466 4EF9 0000 DCDE             		jmp	DisplaySprite
0001C46C                            ; ===========================================================================
0001C46C                            
0001C46C                            Obj09_Exit2:				; XREF: Obj09_Index
0001C46C 5368 0038                  		subq.w	#1,$38(a0)
0001C470 6600                       		bne.s	loc_1BC40
0001C472 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C478                            
0001C478                            loc_1BC40:
0001C478 4EB9 0001 4140             		jsr	Sonic_Animate
0001C47E 4EB9 0001 43D6             		jsr	LoadSonicDynPLC
0001C484 6100 FF68                  		bsr.w	SS_FixCamera
0001C488 4EF9 0000 DCDE             		jmp	DisplaySprite
0001C48E                            
0001C48E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C48E                            
0001C48E                            
0001C48E                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C48E 2428 000C                  		move.l	$C(a0),d2
0001C492 2628 0008                  		move.l	8(a0),d3
0001C496 1038 F780                  		move.b	($FFFFF780).w,d0
0001C49A 0200 00FC                  		andi.b	#$FC,d0
0001C49E 4EB9 0000 2C64             		jsr	(CalcSine).l
0001C4A4 3828 0010                  		move.w	$10(a0),d4
0001C4A8 48C4                       		ext.l	d4
0001C4AA E184                       		asl.l	#8,d4
0001C4AC C1FC 002A                  		muls.w	#$2A,d0
0001C4B0 D084                       		add.l	d4,d0
0001C4B2 3828 0012                  		move.w	$12(a0),d4
0001C4B6 48C4                       		ext.l	d4
0001C4B8 E184                       		asl.l	#8,d4
0001C4BA C3FC 002A                  		muls.w	#$2A,d1
0001C4BE D284                       		add.l	d4,d1
0001C4C0 D680                       		add.l	d0,d3
0001C4C2 6100 0000                  		bsr.w	sub_1BCE8
0001C4C6 6700                       		beq.s	loc_1BCB0
0001C4C8 9680                       		sub.l	d0,d3
0001C4CA 7000                       		moveq	#0,d0
0001C4CC 3140 0010                  		move.w	d0,$10(a0)
0001C4D0 08A8 0001 0022             		bclr	#1,$22(a0)
0001C4D6 D481                       		add.l	d1,d2
0001C4D8 6100 0000                  		bsr.w	sub_1BCE8
0001C4DC 6700                       		beq.s	loc_1BCC6
0001C4DE 9481                       		sub.l	d1,d2
0001C4E0 7200                       		moveq	#0,d1
0001C4E2 3141 0012                  		move.w	d1,$12(a0)
0001C4E6 4E75                       		rts	
0001C4E8                            ; ===========================================================================
0001C4E8                            
0001C4E8                            loc_1BCB0:
0001C4E8 D481                       		add.l	d1,d2
0001C4EA 6100 0000                  		bsr.w	sub_1BCE8
0001C4EE 6700                       		beq.s	loc_1BCD4
0001C4F0 9481                       		sub.l	d1,d2
0001C4F2 7200                       		moveq	#0,d1
0001C4F4 3141 0012                  		move.w	d1,$12(a0)
0001C4F8 08A8 0001 0022             		bclr	#1,$22(a0)
0001C4FE                            
0001C4FE                            loc_1BCC6:
0001C4FE E080                       		asr.l	#8,d0
0001C500 E081                       		asr.l	#8,d1
0001C502 3140 0010                  		move.w	d0,$10(a0)
0001C506 3141 0012                  		move.w	d1,$12(a0)
0001C50A 4E75                       		rts	
0001C50C                            ; ===========================================================================
0001C50C                            
0001C50C                            loc_1BCD4:
0001C50C E080                       		asr.l	#8,d0
0001C50E E081                       		asr.l	#8,d1
0001C510 3140 0010                  		move.w	d0,$10(a0)
0001C514 3141 0012                  		move.w	d1,$12(a0)
0001C518 08E8 0001 0022             		bset	#1,$22(a0)
0001C51E 4E75                       		rts	
0001C520                            ; End of function Obj09_Fall
0001C520                            
0001C520                            
0001C520                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C520                            
0001C520                            
0001C520                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C520 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C526 7800                       		moveq	#0,d4
0001C528 4842                       		swap	d2
0001C52A 3802                       		move.w	d2,d4
0001C52C 4842                       		swap	d2
0001C52E 0644 0044                  		addi.w	#$44,d4
0001C532 88FC 0018                  		divu.w	#$18,d4
0001C536 C8FC 0080                  		mulu.w	#$80,d4
0001C53A D3C4                       		adda.l	d4,a1
0001C53C 7800                       		moveq	#0,d4
0001C53E 4843                       		swap	d3
0001C540 3803                       		move.w	d3,d4
0001C542 4843                       		swap	d3
0001C544 0644 0014                  		addi.w	#$14,d4
0001C548 88FC 0018                  		divu.w	#$18,d4
0001C54C D2C4                       		adda.w	d4,a1
0001C54E 7A00                       		moveq	#0,d5
0001C550 1819                       		move.b	(a1)+,d4
0001C552 6100                       		bsr.s	sub_1BD30
0001C554 1819                       		move.b	(a1)+,d4
0001C556 6100                       		bsr.s	sub_1BD30
0001C558 D2FC 007E                  		adda.w	#$7E,a1
0001C55C 1819                       		move.b	(a1)+,d4
0001C55E 6100                       		bsr.s	sub_1BD30
0001C560 1819                       		move.b	(a1)+,d4
0001C562 6100                       		bsr.s	sub_1BD30
0001C564 4A05                       		tst.b	d5
0001C566 4E75                       		rts	
0001C568                            ; End of function sub_1BCE8
0001C568                            
0001C568                            
0001C568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C568                            
0001C568                            
0001C568                            sub_1BD30:				; XREF: sub_1BCE8
0001C568 6700                       		beq.s	locret_1BD44
0001C56A 0C04 0028                  		cmpi.b	#$28,d4
0001C56E 6700                       		beq.s	locret_1BD44
0001C570 0C04 003A                  		cmpi.b	#$3A,d4
0001C574 6500                       		bcs.s	loc_1BD46
0001C576 0C04 004B                  		cmpi.b	#$4B,d4
0001C57A 6400                       		bcc.s	loc_1BD46
0001C57C                            
0001C57C                            locret_1BD44:
0001C57C 4E75                       		rts	
0001C57E                            ; ===========================================================================
0001C57E                            
0001C57E                            loc_1BD46:
0001C57E 1144 0030                  		move.b	d4,$30(a0)
0001C582 2149 0032                  		move.l	a1,$32(a0)
0001C586 7AFF                       		moveq	#-1,d5
0001C588 4E75                       		rts	
0001C58A                            ; End of function sub_1BD30
0001C58A                            
0001C58A                            
0001C58A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C58A                            
0001C58A                            
0001C58A                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C58A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C590 7800                       		moveq	#0,d4
0001C592 3828 000C                  		move.w	$C(a0),d4
0001C596 0644 0050                  		addi.w	#$50,d4
0001C59A 88FC 0018                  		divu.w	#$18,d4
0001C59E C8FC 0080                  		mulu.w	#$80,d4
0001C5A2 D3C4                       		adda.l	d4,a1
0001C5A4 7800                       		moveq	#0,d4
0001C5A6 3828 0008                  		move.w	8(a0),d4
0001C5AA 0644 0020                  		addi.w	#$20,d4
0001C5AE 88FC 0018                  		divu.w	#$18,d4
0001C5B2 D2C4                       		adda.w	d4,a1
0001C5B4 1811                       		move.b	(a1),d4
0001C5B6 6600                       		bne.s	Obj09_ChkCont
0001C5B8 4A28 003A                  		tst.b	$3A(a0)
0001C5BC 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C5C0 7800                       		moveq	#0,d4
0001C5C2 4E75                       		rts	
0001C5C4                            ; ===========================================================================
0001C5C4                            
0001C5C4                            Obj09_ChkCont:
0001C5C4 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C5C8 6600                       		bne.s	Obj09_Chk1Up
0001C5CA 6100 F728                  		bsr.w	SS_RemoveCollectedItem
0001C5CE 6600                       		bne.s	Obj09_GetCont
0001C5D0 14BC 0001                  		move.b	#1,(a2)
0001C5D4 2549 0004                  		move.l	a1,4(a2)
0001C5D8                            
0001C5D8                            Obj09_GetCont:
0001C5D8 4EB9 0000 A224             		jsr	CollectRing
0001C5DE 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C5E4 6500                       		bcs.s	Obj09_NoCont
0001C5E6 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C5EC 6600                       		bne.s	Obj09_NoCont
0001C5EE 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C5F2 303C 00BF                  		move.w	#$BF,d0
0001C5F6 4EB9 0000 15BA             		jsr	(PlaySound).l	; play extra continue sound
0001C5FC                            
0001C5FC                            Obj09_NoCont:
0001C5FC 7800                       		moveq	#0,d4
0001C5FE 4E75                       		rts	
0001C600                            ; ===========================================================================
0001C600                            
0001C600                            Obj09_Chk1Up:
0001C600 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C604 6600                       		bne.s	Obj09_ChkEmer
0001C606 6100 F6EC                  		bsr.w	SS_RemoveCollectedItem
0001C60A 6600                       		bne.s	Obj09_Get1Up
0001C60C 14BC 0003                  		move.b	#3,(a2)
0001C610 2549 0004                  		move.l	a1,4(a2)
0001C614                            
0001C614                            Obj09_Get1Up:
0001C614 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C618 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C61C 303C 0088                  		move.w	#$88,d0
0001C620 4EB9 0000 15BA             		jsr	(PlaySound).l	; play extra life music
0001C626 7800                       		moveq	#0,d4
0001C628 4E75                       		rts	
0001C62A                            ; ===========================================================================
0001C62A                            
0001C62A                            Obj09_ChkEmer:
0001C62A 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C62E 6500                       		bcs.s	Obj09_ChkGhost
0001C630 0C04 0040                  		cmpi.b	#$40,d4
0001C634 6200                       		bhi.s	Obj09_ChkGhost
0001C636 6100 F6BC                  		bsr.w	SS_RemoveCollectedItem
0001C63A 6600                       		bne.s	Obj09_GetEmer
0001C63C 14BC 0005                  		move.b	#5,(a2)
0001C640 2549 0004                  		move.l	a1,4(a2)
0001C644                            
0001C644                            Obj09_GetEmer:
0001C644 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C64A 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C64C 0404 003B                  		subi.b	#$3B,d4
0001C650 7000                       		moveq	#0,d0
0001C652 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C656 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C65A 1584 0000                  		move.b	d4,(a2,d0.w)
0001C65E 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C662                            
0001C662                            Obj09_NoEmer:
0001C662 303C 0093                  		move.w	#$93,d0
0001C666 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play emerald music
0001C66C 7800                       		moveq	#0,d4
0001C66E 4E75                       		rts	
0001C670                            ; ===========================================================================
0001C670                            
0001C670                            Obj09_ChkGhost:
0001C670 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C674 6600                       		bne.s	Obj09_ChkGhostTag
0001C676 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C67C                            
0001C67C                            Obj09_ChkGhostTag:
0001C67C 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C680 6600                       		bne.s	Obj09_NoGhost
0001C682 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C688 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C68A 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C690                            
0001C690                            Obj09_NoGhost:
0001C690 78FF                       		moveq	#-1,d4
0001C692 4E75                       		rts	
0001C694                            ; ===========================================================================
0001C694                            
0001C694                            Obj09_MakeGhostSolid:
0001C694 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C69A 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C69C 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C6A2 723F                       		moveq	#$3F,d1
0001C6A4                            
0001C6A4                            Obj09_GhostLoop2:
0001C6A4 743F                       		moveq	#$3F,d2
0001C6A6                            
0001C6A6                            Obj09_GhostLoop:
0001C6A6 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C6AA 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C6AC 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C6B0                            
0001C6B0                            Obj09_NoReplace:
0001C6B0 5249                       		addq.w	#1,a1
0001C6B2 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C6B6 43E9 0040                  		lea	$40(a1),a1
0001C6BA 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C6BE                            
0001C6BE                            Obj09_GhostNotSolid:
0001C6BE 4228 003A                  		clr.b	$3A(a0)
0001C6C2 7800                       		moveq	#0,d4
0001C6C4 4E75                       		rts	
0001C6C6                            ; End of function Obj09_ChkItems
0001C6C6                            
0001C6C6                            
0001C6C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C6C6                            
0001C6C6                            
0001C6C6                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C6C6 1028 0030                  		move.b	$30(a0),d0
0001C6CA 6600                       		bne.s	Obj09_ChkBumper
0001C6CC 5328 0036                  		subq.b	#1,$36(a0)
0001C6D0 6A00                       		bpl.s	loc_1BEA0
0001C6D2 117C 0000 0036             		move.b	#0,$36(a0)
0001C6D8                            
0001C6D8                            loc_1BEA0:
0001C6D8 5328 0037                  		subq.b	#1,$37(a0)
0001C6DC 6A00                       		bpl.s	locret_1BEAC
0001C6DE 117C 0000 0037             		move.b	#0,$37(a0)
0001C6E4                            
0001C6E4                            locret_1BEAC:
0001C6E4 4E75                       		rts	
0001C6E6                            ; ===========================================================================
0001C6E6                            
0001C6E6                            Obj09_ChkBumper:
0001C6E6 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C6EA 6600                       		bne.s	Obj09_GOAL
0001C6EC 2228 0032                  		move.l	$32(a0),d1
0001C6F0 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C6F6 3401                       		move.w	d1,d2
0001C6F8 0241 007F                  		andi.w	#$7F,d1
0001C6FC C2FC 0018                  		mulu.w	#$18,d1
0001C700 0441 0014                  		subi.w	#$14,d1
0001C704 EE4A                       		lsr.w	#7,d2
0001C706 0242 007F                  		andi.w	#$7F,d2
0001C70A C4FC 0018                  		mulu.w	#$18,d2
0001C70E 0442 0044                  		subi.w	#$44,d2
0001C712 9268 0008                  		sub.w	8(a0),d1
0001C716 9468 000C                  		sub.w	$C(a0),d2
0001C71A 4EB9 0000 2F32             		jsr	(CalcAngle).l
0001C720 4EB9 0000 2C64             		jsr	(CalcSine).l
0001C726 C3FC F900                  		muls.w	#-$700,d1
0001C72A E081                       		asr.l	#8,d1
0001C72C 3141 0010                  		move.w	d1,$10(a0)
0001C730 C1FC F900                  		muls.w	#-$700,d0
0001C734 E080                       		asr.l	#8,d0
0001C736 3140 0012                  		move.w	d0,$12(a0)
0001C73A 08E8 0001 0022             		bset	#1,$22(a0)
0001C740 6100 F5B2                  		bsr.w	SS_RemoveCollectedItem
0001C744 6600                       		bne.s	Obj09_BumpSnd
0001C746 14BC 0002                  		move.b	#2,(a2)
0001C74A 2028 0032                  		move.l	$32(a0),d0
0001C74E 5380                       		subq.l	#1,d0
0001C750 2540 0004                  		move.l	d0,4(a2)
0001C754                            
0001C754                            Obj09_BumpSnd:
0001C754 303C 00B4                  		move.w	#$B4,d0
0001C758 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C75E                            ; ===========================================================================
0001C75E                            
0001C75E                            Obj09_GOAL:
0001C75E 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C762 6600                       		bne.s	Obj09_UPblock
0001C764 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C768 303C 00A8                  		move.w	#$A8,d0		; change item
0001C76C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C772 4E75                       		rts	
0001C774                            ; ===========================================================================
0001C774                            
0001C774                            Obj09_UPblock:
0001C774 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C778 6600                       		bne.s	Obj09_DOWNblock
0001C77A 4A28 0036                  		tst.b	$36(a0)
0001C77E 6600 0000                  		bne.w	Obj09_NoGlass
0001C782 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C788 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C78E 6700                       		beq.s	Obj09_UPsnd
0001C790 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C794 2268 0032                  		movea.l	$32(a0),a1
0001C798 5389                       		subq.l	#1,a1
0001C79A 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C79E                            
0001C79E                            Obj09_UPsnd:
0001C79E 303C 00A9                  		move.w	#$A9,d0
0001C7A2 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C7A8                            ; ===========================================================================
0001C7A8                            
0001C7A8                            Obj09_DOWNblock:
0001C7A8 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C7AC 6600                       		bne.s	Obj09_Rblock
0001C7AE 4A28 0036                  		tst.b	$36(a0)
0001C7B2 6600 0000                  		bne.w	Obj09_NoGlass
0001C7B6 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C7BC 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C7C2 6600                       		bne.s	Obj09_DOWNsnd
0001C7C4 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C7C8 2268 0032                  		movea.l	$32(a0),a1
0001C7CC 5389                       		subq.l	#1,a1
0001C7CE 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C7D2                            
0001C7D2                            Obj09_DOWNsnd:
0001C7D2 303C 00A9                  		move.w	#$A9,d0
0001C7D6 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C7DC                            ; ===========================================================================
0001C7DC                            
0001C7DC                            Obj09_Rblock:
0001C7DC 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C7E0 6600                       		bne.s	Obj09_ChkGlass
0001C7E2 4A28 0037                  		tst.b	$37(a0)
0001C7E6 6600 0000                  		bne.w	Obj09_NoGlass
0001C7EA 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C7F0 6100 F502                  		bsr.w	SS_RemoveCollectedItem
0001C7F4 6600                       		bne.s	Obj09_RevStage
0001C7F6 14BC 0004                  		move.b	#4,(a2)
0001C7FA 2028 0032                  		move.l	$32(a0),d0
0001C7FE 5380                       		subq.l	#1,d0
0001C800 2540 0004                  		move.l	d0,4(a2)
0001C804                            
0001C804                            Obj09_RevStage:
0001C804 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C808 303C 00A9                  		move.w	#$A9,d0
0001C80C 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play sound
0001C812                            ; ===========================================================================
0001C812                            
0001C812                            Obj09_ChkGlass:
0001C812 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C816 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C818 0C00 002E                  		cmpi.b	#$2E,d0
0001C81C 6700                       		beq.s	Obj09_Glass
0001C81E 0C00 002F                  		cmpi.b	#$2F,d0
0001C822 6700                       		beq.s	Obj09_Glass
0001C824 0C00 0030                  		cmpi.b	#$30,d0
0001C828 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C82A                            
0001C82A                            Obj09_Glass:
0001C82A 6100 F4C8                  		bsr.w	SS_RemoveCollectedItem
0001C82E 6600                       		bne.s	Obj09_GlassSnd
0001C830 14BC 0006                  		move.b	#6,(a2)
0001C834 2268 0032                  		movea.l	$32(a0),a1
0001C838 5389                       		subq.l	#1,a1
0001C83A 2549 0004                  		move.l	a1,4(a2)
0001C83E 1011                       		move.b	(a1),d0
0001C840 5200                       		addq.b	#1,d0		; change glass type when touched
0001C842 0C00 0030                  		cmpi.b	#$30,d0
0001C846 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C848 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C84A                            
0001C84A                            Obj09_GlassUpdate:
0001C84A 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C84E                            
0001C84E                            Obj09_GlassSnd:
0001C84E 303C 00BA                  		move.w	#$BA,d0
0001C852 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C858                            ; ===========================================================================
0001C858                            
0001C858                            Obj09_NoGlass:
0001C858 4E75                       		rts	
0001C85A                            ; End of function Obj09_ChkItems2
0001C85A                            
0001C85A                            ; ===========================================================================
0001C85A                            ; ---------------------------------------------------------------------------
0001C85A                            ; Object 10 - blank
0001C85A                            ; ---------------------------------------------------------------------------
0001C85A                            
0001C85A                            Obj10:					; XREF: Obj_Index
0001C85A 4E75                       		rts	
0001C85C                            ; ---------------------------------------------------------------------------
0001C85C                            ; Subroutine to	animate	level graphics
0001C85C                            ; ---------------------------------------------------------------------------
0001C85C                            
0001C85C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C85C                            
0001C85C                            
0001C85C                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C85C 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C860 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C862 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C868 6100 0000                  		bsr.w	AniArt_GiantRing
0001C86C 7000                       		moveq	#0,d0
0001C86E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C872 D040                       		add.w	d0,d0
0001C874 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C878 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C87C                            ; ===========================================================================
0001C87C                            
0001C87C                            AniArt_Pause:
0001C87C 4E75                       		rts	
0001C87E                            ; End of function AniArt_Load
0001C87E                            
0001C87E                            ; ===========================================================================
0001C87E 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C882 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C886 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C88A 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C88C                            ; ===========================================================================
0001C88C                            ; ---------------------------------------------------------------------------
0001C88C                            ; Animated pattern routine - Green Hill
0001C88C                            ; ---------------------------------------------------------------------------
0001C88C                            
0001C88C                            AniArt_GHZ:				; XREF: AniArt_Index
0001C88C 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C890 6A00                       		bpl.s	loc_1C08A
0001C892 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C898 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C89E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C8A2 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C8A6 0240 0001                  		andi.w	#1,d0
0001C8AA 6700                       		beq.s	loc_1C078
0001C8AC 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C8B0                            
0001C8B0                            loc_1C078:
0001C8B0 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C8BA 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C8BE 6000 0000                  		bra.w	LoadTiles
0001C8C2                            ; ===========================================================================
0001C8C2                            
0001C8C2                            loc_1C08A:
0001C8C2 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C8C6 6A00                       		bpl.s	loc_1C0C0
0001C8C8 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C8CE 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C8D4 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C8D8 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C8DC 0240 0001                  		andi.w	#1,d0
0001C8E0 6700                       		beq.s	loc_1C0AE
0001C8E2 43E9 0200                  		lea	$200(a1),a1
0001C8E6                            
0001C8E6                            loc_1C0AE:
0001C8E6 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C8F0 323C 000F                  		move.w	#$F,d1
0001C8F4 6000 0000                  		bra.w	LoadTiles
0001C8F8                            ; ===========================================================================
0001C8F8                            
0001C8F8                            loc_1C0C0:
0001C8F8 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C8FC 6A00                       		bpl.s	locret_1C10C
0001C8FE 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C904 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C908 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C90C 0240 0003                  		andi.w	#3,d0
0001C910 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C914 0800 0000                  		btst	#0,d0
0001C918 6600                       		bne.s	loc_1C0E8
0001C91A 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C920                            
0001C920                            loc_1C0E8:
0001C920 EF48                       		lsl.w	#7,d0
0001C922 3200                       		move.w	d0,d1
0001C924 D040                       		add.w	d0,d0
0001C926 D041                       		add.w	d1,d0
0001C928 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C932 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C938 43F1 0000                  		lea	(a1,d0.w),a1
0001C93C 323C 000B                  		move.w	#$B,d1
0001C940 6100 0000                  		bsr.w	LoadTiles
0001C944                            
0001C944                            locret_1C10C:
0001C944 4E75                       		rts	
0001C946                            ; ===========================================================================
0001C946 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C94A                            ; ===========================================================================
0001C94A                            ; ---------------------------------------------------------------------------
0001C94A                            ; Animated pattern routine - Marble
0001C94A                            ; ---------------------------------------------------------------------------
0001C94A                            
0001C94A                            AniArt_MZ:				; XREF: AniArt_Index
0001C94A 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C94E 6A00                       		bpl.s	loc_1C150
0001C950 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C956 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C95C 7000                       		moveq	#0,d0
0001C95E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C962 5200                       		addq.b	#1,d0
0001C964 0C00 0003                  		cmpi.b	#3,d0
0001C968 6600                       		bne.s	loc_1C134
0001C96A 7000                       		moveq	#0,d0
0001C96C                            
0001C96C                            loc_1C134:
0001C96C 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C970 C0FC 0100                  		mulu.w	#$100,d0
0001C974 D2C0                       		adda.w	d0,a1
0001C976 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C980 323C 0007                  		move.w	#7,d1
0001C984 6100 0000                  		bsr.w	LoadTiles
0001C988                            
0001C988                            loc_1C150:
0001C988 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C98C 6A00                       		bpl.s	loc_1C1AE
0001C98E 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C994 7000                       		moveq	#0,d0
0001C996 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C99A 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C9A0 EE58                       		ror.w	#7,d0
0001C9A2 D8C0                       		adda.w	d0,a4
0001C9A4 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C9AE 7600                       		moveq	#0,d3
0001C9B0 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C9B4 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C9B8 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C9BC 343C 0003                  		move.w	#3,d2
0001C9C0                            
0001C9C0                            loc_1C188:
0001C9C0 3003                       		move.w	d3,d0
0001C9C2 D040                       		add.w	d0,d0
0001C9C4 0240 001E                  		andi.w	#$1E,d0
0001C9C8 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001C9CE 3033 0000                  		move.w	(a3,d0.w),d0
0001C9D2 47F3 0000                  		lea	(a3,d0.w),a3
0001C9D6 224C                       		movea.l	a4,a1
0001C9D8 323C 001F                  		move.w	#$1F,d1
0001C9DC 4E93                       		jsr	(a3)
0001C9DE 5843                       		addq.w	#4,d3
0001C9E0 51CA FFDE                  		dbf	d2,loc_1C188
0001C9E4 4E75                       		rts	
0001C9E6                            ; ===========================================================================
0001C9E6                            
0001C9E6                            loc_1C1AE:
0001C9E6 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C9EA 6A00 0000                  		bpl.w	locret_1C1EA
0001C9EE 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C9F4 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001C9FA 7000                       		moveq	#0,d0
0001C9FC 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001CA00 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001CA04 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001CA0A C0FC 00C0                  		mulu.w	#$C0,d0
0001CA0E D2C0                       		adda.w	d0,a1
0001CA10 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001CA1A 323C 0005                  		move.w	#5,d1
0001CA1E 6000 0000                  		bra.w	LoadTiles
0001CA22                            ; ===========================================================================
0001CA22                            
0001CA22                            locret_1C1EA:
0001CA22 4E75                       		rts	
0001CA24                            ; ===========================================================================
0001CA24                            ; ---------------------------------------------------------------------------
0001CA24                            ; Animated pattern routine - Scrap Brain
0001CA24                            ; ---------------------------------------------------------------------------
0001CA24                            
0001CA24                            AniArt_SBZ:				; XREF: AniArt_Index
0001CA24 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001CA28 6700                       		beq.s	loc_1C1F8
0001CA2A 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001CA2E 6000                       		bra.s	loc_1C250
0001CA30                            ; ===========================================================================
0001CA30                            
0001CA30                            loc_1C1F8:
0001CA30 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CA34 6A00                       		bpl.s	loc_1C250
0001CA36 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001CA3C 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001CA42 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001CA4C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CA50 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CA54 0240 0007                  		andi.w	#7,d0
0001CA58 6700                       		beq.s	loc_1C234
0001CA5A 5340                       		subq.w	#1,d0
0001CA5C C0FC 0180                  		mulu.w	#$180,d0
0001CA60 43F1 0000                  		lea	(a1,d0.w),a1
0001CA64 323C 000B                  		move.w	#$B,d1
0001CA68 6000 0000                  		bra.w	LoadTiles
0001CA6C                            ; ===========================================================================
0001CA6C                            
0001CA6C                            loc_1C234:
0001CA6C 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001CA72                            
0001CA72                            loc_1C23A:
0001CA72 323C 0005                  		move.w	#5,d1
0001CA76 6100 0000                  		bsr.w	LoadTiles
0001CA7A 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CA80 323C 0005                  		move.w	#5,d1
0001CA84 6000 0000                  		bra.w	LoadTiles
0001CA88                            ; ===========================================================================
0001CA88                            
0001CA88                            loc_1C250:
0001CA88 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001CA8C 6700                       		beq.s	loc_1C25C
0001CA8E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CA92 6000                       		bra.s	locret_1C2A0
0001CA94                            ; ===========================================================================
0001CA94                            
0001CA94                            loc_1C25C:
0001CA94 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CA98 6A00                       		bpl.s	locret_1C2A0
0001CA9A 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CAA0 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CAA6 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001CAB0 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CAB4 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CAB8 0240 0007                  		andi.w	#7,d0
0001CABC 6700                       		beq.s	loc_1C298
0001CABE 5340                       		subq.w	#1,d0
0001CAC0 C0FC 0180                  		mulu.w	#$180,d0
0001CAC4 43F1 0000                  		lea	(a1,d0.w),a1
0001CAC8 323C 000B                  		move.w	#$B,d1
0001CACC 6000 0000                  		bra.w	LoadTiles
0001CAD0                            ; ===========================================================================
0001CAD0                            
0001CAD0                            loc_1C298:
0001CAD0 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001CAD6 609A                       		bra.s	loc_1C23A
0001CAD8                            ; ===========================================================================
0001CAD8                            
0001CAD8                            locret_1C2A0:
0001CAD8 4E75                       		rts	
0001CADA                            ; ===========================================================================
0001CADA                            ; ---------------------------------------------------------------------------
0001CADA                            ; Animated pattern routine - ending sequence
0001CADA                            ; ---------------------------------------------------------------------------
0001CADA                            
0001CADA                            AniArt_Ending:				; XREF: AniArt_Index
0001CADA 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CADE 6A00                       		bpl.s	loc_1C2F4
0001CAE0 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CAE6 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CAEC 45F8 9400                  		lea	($FFFF9400).w,a2
0001CAF0 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CAF4 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CAF8 0240 0001                  		andi.w	#1,d0
0001CAFC 6700                       		beq.s	loc_1C2CE
0001CAFE 43E9 0200                  		lea	$200(a1),a1
0001CB02 45EA 0200                  		lea	$200(a2),a2
0001CB06                            
0001CB06                            loc_1C2CE:
0001CB06 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CB10 323C 000F                  		move.w	#$F,d1
0001CB14 6100 0000                  		bsr.w	LoadTiles
0001CB18 224A                       		movea.l	a2,a1
0001CB1A 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CB24 323C 000F                  		move.w	#$F,d1
0001CB28 6000 0000                  		bra.w	LoadTiles
0001CB2C                            ; ===========================================================================
0001CB2C                            
0001CB2C                            loc_1C2F4:
0001CB2C 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CB30 6A00                       		bpl.s	loc_1C33C
0001CB32 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CB38 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CB3C 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CB40 0240 0007                  		andi.w	#7,d0
0001CB44 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CB48 EF48                       		lsl.w	#7,d0
0001CB4A 3200                       		move.w	d0,d1
0001CB4C D040                       		add.w	d0,d0
0001CB4E D041                       		add.w	d1,d0
0001CB50 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CB5A 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CB60 43F1 0000                  		lea	(a1,d0.w),a1
0001CB64 323C 000B                  		move.w	#$B,d1
0001CB68 6000 0000                  		bra.w	LoadTiles
0001CB6C                            ; ===========================================================================
0001CB6C 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CB74                            ; ===========================================================================
0001CB74                            
0001CB74                            loc_1C33C:
0001CB74 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CB78 6A00                       		bpl.s	loc_1C37A
0001CB7A 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CB80 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CB84 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CB88 0240 0003                  		andi.w	#3,d0
0001CB8C 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CB90 E148                       		lsl.w	#8,d0
0001CB92 D040                       		add.w	d0,d0
0001CB94 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CB9E 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CBA2 43F1 0000                  		lea	(a1,d0.w),a1
0001CBA6 323C 000F                  		move.w	#$F,d1
0001CBAA 6000 0000                  		bra.w	LoadTiles
0001CBAE                            ; ===========================================================================
0001CBAE 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001CBB2                            ; ===========================================================================
0001CBB2                            
0001CBB2                            loc_1C37A:
0001CBB2 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001CBB6 6A00                       		bpl.s	locret_1C3B4
0001CBB8 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001CBBE 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001CBC2 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001CBC6 0240 0003                  		andi.w	#3,d0
0001CBCA 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001CBCE E148                       		lsl.w	#8,d0
0001CBD0 D040                       		add.w	d0,d0
0001CBD2 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001CBDC 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001CBE0 43F1 0000                  		lea	(a1,d0.w),a1
0001CBE4 323C 000F                  		move.w	#$F,d1
0001CBE8 6000 0000                  		bra.w	LoadTiles
0001CBEC                            ; ===========================================================================
0001CBEC                            
0001CBEC                            locret_1C3B4:
0001CBEC 4E75                       		rts	
0001CBEE                            ; ===========================================================================
0001CBEE                            
0001CBEE                            AniArt_none:				; XREF: AniArt_Index
0001CBEE 4E75                       		rts	
0001CBF0                            
0001CBF0                            ; ---------------------------------------------------------------------------
0001CBF0                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001CBF0                            ; ---------------------------------------------------------------------------
0001CBF0                            
0001CBF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CBF0                            
0001CBF0                            
0001CBF0                            LoadTiles:
0001CBF0 2C99                       		move.l	(a1)+,(a6)
0001CBF2 2C99                       		move.l	(a1)+,(a6)
0001CBF4 2C99                       		move.l	(a1)+,(a6)
0001CBF6 2C99                       		move.l	(a1)+,(a6)
0001CBF8 2C99                       		move.l	(a1)+,(a6)
0001CBFA 2C99                       		move.l	(a1)+,(a6)
0001CBFC 2C99                       		move.l	(a1)+,(a6)
0001CBFE 2C99                       		move.l	(a1)+,(a6)
0001CC00 51C9 FFEE                  		dbf	d1,LoadTiles
0001CC04 4E75                       		rts	
0001CC06                            ; End of function LoadTiles
0001CC06                            
0001CC06                            ; ===========================================================================
0001CC06                            ; ---------------------------------------------------------------------------
0001CC06                            ; Animated pattern routine - more Marble Zone
0001CC06                            ; ---------------------------------------------------------------------------
0001CC06 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001CC0A 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001CC0E 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001CC12 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001CC16 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CC1A 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CC1E 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CC22 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CC26                            ; ===========================================================================
0001CC26                            
0001CC26                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CC26 2C91                       		move.l	(a1),(a6)
0001CC28 43E9 0010                  		lea	$10(a1),a1
0001CC2C 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CC30 4E75                       		rts	
0001CC32                            ; ===========================================================================
0001CC32                            
0001CC32                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CC32 2029 0002                  		move.l	2(a1),d0
0001CC36 1029 0001                  		move.b	1(a1),d0
0001CC3A E098                       		ror.l	#8,d0
0001CC3C 2C80                       		move.l	d0,(a6)
0001CC3E 43E9 0010                  		lea	$10(a1),a1
0001CC42 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CC46 4E75                       		rts	
0001CC48                            ; ===========================================================================
0001CC48                            
0001CC48                            loc_1C410:				; XREF: AniArt_MZextra
0001CC48 2CA9 0002                  		move.l	2(a1),(a6)
0001CC4C 43E9 0010                  		lea	$10(a1),a1
0001CC50 51C9 FFF6                  		dbf	d1,loc_1C410
0001CC54 4E75                       		rts	
0001CC56                            ; ===========================================================================
0001CC56                            
0001CC56                            loc_1C41E:				; XREF: AniArt_MZextra
0001CC56 2029 0004                  		move.l	4(a1),d0
0001CC5A 1029 0003                  		move.b	3(a1),d0
0001CC5E E098                       		ror.l	#8,d0
0001CC60 2C80                       		move.l	d0,(a6)
0001CC62 43E9 0010                  		lea	$10(a1),a1
0001CC66 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CC6A 4E75                       		rts	
0001CC6C                            ; ===========================================================================
0001CC6C                            
0001CC6C                            loc_1C434:				; XREF: AniArt_MZextra
0001CC6C 2CA9 0004                  		move.l	4(a1),(a6)
0001CC70 43E9 0010                  		lea	$10(a1),a1
0001CC74 51C9 FFF6                  		dbf	d1,loc_1C434
0001CC78 4E75                       		rts	
0001CC7A                            ; ===========================================================================
0001CC7A                            
0001CC7A                            loc_1C442:				; XREF: AniArt_MZextra
0001CC7A 2029 0006                  		move.l	6(a1),d0
0001CC7E 1029 0005                  		move.b	5(a1),d0
0001CC82 E098                       		ror.l	#8,d0
0001CC84 2C80                       		move.l	d0,(a6)
0001CC86 43E9 0010                  		lea	$10(a1),a1
0001CC8A 51C9 FFEE                  		dbf	d1,loc_1C442
0001CC8E 4E75                       		rts	
0001CC90                            ; ===========================================================================
0001CC90                            
0001CC90                            loc_1C458:				; XREF: AniArt_MZextra
0001CC90 2CA9 0006                  		move.l	6(a1),(a6)
0001CC94 43E9 0010                  		lea	$10(a1),a1
0001CC98 51C9 FFF6                  		dbf	d1,loc_1C458
0001CC9C 4E75                       		rts	
0001CC9E                            ; ===========================================================================
0001CC9E                            
0001CC9E                            loc_1C466:				; XREF: AniArt_MZextra
0001CC9E 2029 0008                  		move.l	8(a1),d0
0001CCA2 1029 0007                  		move.b	7(a1),d0
0001CCA6 E098                       		ror.l	#8,d0
0001CCA8 2C80                       		move.l	d0,(a6)
0001CCAA 43E9 0010                  		lea	$10(a1),a1
0001CCAE 51C9 FFEE                  		dbf	d1,loc_1C466
0001CCB2 4E75                       		rts	
0001CCB4                            ; ===========================================================================
0001CCB4                            
0001CCB4                            loc_1C47C:				; XREF: AniArt_MZextra
0001CCB4 2CA9 0008                  		move.l	8(a1),(a6)
0001CCB8 43E9 0010                  		lea	$10(a1),a1
0001CCBC 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CCC0 4E75                       		rts	
0001CCC2                            ; ===========================================================================
0001CCC2                            
0001CCC2                            loc_1C48A:				; XREF: AniArt_MZextra
0001CCC2 2029 000A                  		move.l	$A(a1),d0
0001CCC6 1029 0009                  		move.b	9(a1),d0
0001CCCA E098                       		ror.l	#8,d0
0001CCCC 2C80                       		move.l	d0,(a6)
0001CCCE 43E9 0010                  		lea	$10(a1),a1
0001CCD2 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CCD6 4E75                       		rts	
0001CCD8                            ; ===========================================================================
0001CCD8                            
0001CCD8                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CCD8 2CA9 000A                  		move.l	$A(a1),(a6)
0001CCDC 43E9 0010                  		lea	$10(a1),a1
0001CCE0 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CCE4 4E75                       		rts	
0001CCE6                            ; ===========================================================================
0001CCE6                            
0001CCE6                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CCE6 2029 000C                  		move.l	$C(a1),d0
0001CCEA 1029 000B                  		move.b	$B(a1),d0
0001CCEE E098                       		ror.l	#8,d0
0001CCF0 2C80                       		move.l	d0,(a6)
0001CCF2 43E9 0010                  		lea	$10(a1),a1
0001CCF6 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CCFA 4E75                       		rts	
0001CCFC                            ; ===========================================================================
0001CCFC                            
0001CCFC                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CCFC 2CA9 000C                  		move.l	$C(a1),(a6)
0001CD00 43E9 0010                  		lea	$10(a1),a1
0001CD04 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CD08 4E75                       		rts	
0001CD0A                            ; ===========================================================================
0001CD0A                            
0001CD0A                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CD0A 2029 000C                  		move.l	$C(a1),d0
0001CD0E E198                       		rol.l	#8,d0
0001CD10 1011                       		move.b	0(a1),d0
0001CD12 2C80                       		move.l	d0,(a6)
0001CD14 43E9 0010                  		lea	$10(a1),a1
0001CD18 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CD1C 4E75                       		rts	
0001CD1E                            ; ===========================================================================
0001CD1E                            
0001CD1E                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CD1E 3CA9 000E                  		move.w	$E(a1),(a6)
0001CD22 3C91                       		move.w	0(a1),(a6)
0001CD24 43E9 0010                  		lea	$10(a1),a1
0001CD28 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CD2C 4E75                       		rts	
0001CD2E                            ; ===========================================================================
0001CD2E                            
0001CD2E                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CD2E 2011                       		move.l	0(a1),d0
0001CD30 1029 000F                  		move.b	$F(a1),d0
0001CD34 E098                       		ror.l	#8,d0
0001CD36 2C80                       		move.l	d0,(a6)
0001CD38 43E9 0010                  		lea	$10(a1),a1
0001CD3C 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CD40 4E75                       		rts	
0001CD42                            
0001CD42                            ; ---------------------------------------------------------------------------
0001CD42                            ; Animated pattern routine - giant ring
0001CD42                            ; ---------------------------------------------------------------------------
0001CD42                            
0001CD42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CD42                            
0001CD42                            
0001CD42                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CD42 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CD46 6600                       		bne.s	loc_1C518
0001CD48 4E75                       		rts	
0001CD4A                            ; ===========================================================================
0001CD4A                            
0001CD4A                            loc_1C518:
0001CD4A 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CD50 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CD56 7000                       		moveq	#0,d0
0001CD58 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CD5C 43F1 0000                  		lea	(a1,d0.w),a1
0001CD60 0640 8000                  		addi.w	#$8000,d0
0001CD64 E588                       		lsl.l	#2,d0
0001CD66 E448                       		lsr.w	#2,d0
0001CD68 0040 4000                  		ori.w	#$4000,d0
0001CD6C 4840                       		swap	d0
0001CD6E 2D40 0004                  		move.l	d0,4(a6)
0001CD72 323C 000D                  		move.w	#$D,d1
0001CD76 6000 FE78                  		bra.w	LoadTiles
0001CD7A                            ; End of function AniArt_GiantRing
0001CD7A                            
0001CD7A                            ; ===========================================================================
0001CD7A                            ; ---------------------------------------------------------------------------
0001CD7A                            ; Object 21 - SCORE, TIME, RINGS
0001CD7A                            ; ---------------------------------------------------------------------------
0001CD7A                            
0001CD7A                            Obj21:					; XREF: Obj_Index
0001CD7A 7000                       		moveq	#0,d0
0001CD7C 1028 0024                  		move.b	$24(a0),d0
0001CD80 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CD84 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CD88                            ; ===========================================================================
0001CD88 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CD8A 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CD8C                            ; ===========================================================================
0001CD8C                            
0001CD8C                            Obj21_Main:				; XREF: Obj21_Main
0001CD8C 5428 0024                  		addq.b	#2,$24(a0)
0001CD90 317C 0090 0008             		move.w	#$90,8(a0)
0001CD96 317C 0108 000A             		move.w	#$108,$A(a0)
0001CD9C 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CDA4 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CDAA 117C 0000 0001             		move.b	#0,1(a0)
0001CDB0 117C 0000 0018             		move.b	#0,$18(a0)
0001CDB6                            
0001CDB6                            Obj21_Flash:				; XREF: Obj21_Main
0001CDB6 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CDBA 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CDBC 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CDC0 4EF9 0000 DCDE             		jmp	DisplaySprite
0001CDC6                            ; ===========================================================================
0001CDC6                            
0001CDC6                            Obj21_Flash2:
0001CDC6 7000                       		moveq	#0,d0
0001CDC8 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CDCE 6600                       		bne.s	Obj21_Display
0001CDD0 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CDD2 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CDD8 6600                       		bne.s	Obj21_Display	; if not, branch
0001CDDA 5440                       		addq.w	#2,d0		; make time counter flash red
0001CDDC                            
0001CDDC                            Obj21_Display:
0001CDDC 1140 001A                  		move.b	d0,$1A(a0)
0001CDE0 4EF9 0000 DCDE             		jmp	DisplaySprite
0001CDE6                            ; ===========================================================================
0001CDE6                            ; ---------------------------------------------------------------------------
0001CDE6                            ; Sprite mappings - SCORE, TIME, RINGS
0001CDE6                            ; ---------------------------------------------------------------------------
0001CDE6                            Map_obj21:
0001CDE6                            	include "_maps\obj21.asm"
0001CDE6                            ; ---------------------------------------------------------------------------
0001CDE6                            ; Sprite mappings - SCORE, TIME, RINGS
0001CDE6                            ; ---------------------------------------------------------------------------
0001CDE6 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CDEA 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CDEE 0A                         byte_1C5BC:	dc.b $A
0001CDEF 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CDF4 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CDF9 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CDFE 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CE03 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CE08 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CE0D A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CE12 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CE17 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CE1C 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CE21 00                         		dc.b 0
0001CE22 0A                         byte_1C5F0:	dc.b $A
0001CE23 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CE28 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CE2D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CE32 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CE37 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CE3C A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CE41 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CE46 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CE4B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CE50 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CE55 00                         		dc.b 0
0001CE56 0A                         byte_1C624:	dc.b $A
0001CE57 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CE5C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CE61 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CE66 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CE6B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CE70 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CE75 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CE7A A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CE7F 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CE84 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CE89 00                         		dc.b 0
0001CE8A 0A                         byte_1C658:	dc.b $A
0001CE8B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CE90 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CE95 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CE9A 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CE9F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CEA4 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CEA9 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CEAE A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CEB3 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CEB8 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CEBE 00                         		even
0001CEBE 00                         		even
0001CEBE                            
0001CEBE                            ; ---------------------------------------------------------------------------
0001CEBE                            ; Add points subroutine
0001CEBE                            ; ---------------------------------------------------------------------------
0001CEBE                            
0001CEBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEBE                            
0001CEBE                            
0001CEBE                            AddPoints:
0001CEBE 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CEC4 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CEC8 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CECC D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CECE 223C 000F 423F             		move.l	#999999,d1
0001CED4 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CED6 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CEDA 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CEDC 2481                       		move.l	d1,(a2)
0001CEDE                            
0001CEDE                            loc_1C6AC:
0001CEDE 2013                       		move.l	(a3),d0
0001CEE0 B092                       		cmp.l	(a2),d0
0001CEE2 6500 0000                  		bcs.w	locret_1C6B6
0001CEE6 2480                       		move.l	d0,(a2)
0001CEE8                            
0001CEE8                            locret_1C6B6:
0001CEE8 4E75                       		rts	
0001CEEA                            ; End of function AddPoints
0001CEEA                            
0001CEEA                            ; ---------------------------------------------------------------------------
0001CEEA                            ; Subroutine to	update the HUD
0001CEEA                            ; ---------------------------------------------------------------------------
0001CEEA                            
0001CEEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEEA                            
0001CEEA                            
0001CEEA                            HudUpdate:
0001CEEA 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CEEE 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CEF2 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CEF6 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CEF8 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CEFC 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CF02 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CF06 6100 0000                  		bsr.w	Hud_Score
0001CF0A                            
0001CF0A                            Hud_ChkRings:
0001CF0A 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CF0E 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001CF10 6A00                       		bpl.s	loc_1C6E4
0001CF12 6100 0000                  		bsr.w	Hud_LoadZero
0001CF16                            
0001CF16                            loc_1C6E4:
0001CF16 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CF1A 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CF20 7200                       		moveq	#0,d1
0001CF22 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CF26 6100 0000                  		bsr.w	Hud_Rings
0001CF2A                            
0001CF2A                            Hud_ChkTime:
0001CF2A 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001CF2E 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001CF30 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CF34 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001CF36 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001CF3A 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001CF40 6700                       		beq.s	TimeOver	; if yes, branch
0001CF42 5221                       		addq.b	#1,-(a1)
0001CF44 0C11 003C                  		cmpi.b	#60,(a1)
0001CF48 6500                       		bcs.s	Hud_ChkLives
0001CF4A 12BC 0000                  		move.b	#0,(a1)
0001CF4E 5221                       		addq.b	#1,-(a1)
0001CF50 0C11 003C                  		cmpi.b	#60,(a1)
0001CF54 6500                       		bcs.s	loc_1C734
0001CF56 12BC 0000                  		move.b	#0,(a1)
0001CF5A 5221                       		addq.b	#1,-(a1)
0001CF5C 0C11 0009                  		cmpi.b	#9,(a1)
0001CF60 6500                       		bcs.s	loc_1C734
0001CF62 12BC 0009                  		move.b	#9,(a1)
0001CF66                            
0001CF66                            loc_1C734:
0001CF66 203C 5E40 0003             		move.l	#$5E400003,d0
0001CF6C 7200                       		moveq	#0,d1
0001CF6E 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001CF72 6100 0000                  		bsr.w	Hud_Mins
0001CF76 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001CF7C 7200                       		moveq	#0,d1
0001CF7E 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001CF82 6100 0000                  		bsr.w	Hud_Secs
0001CF86                            
0001CF86                            Hud_ChkLives:
0001CF86 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CF8A 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001CF8C 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CF90 6100 0000                  		bsr.w	Hud_Lives
0001CF94                            
0001CF94                            Hud_ChkBonus:
0001CF94 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001CF98 6700                       		beq.s	Hud_End		; if not, branch
0001CF9A 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CF9E 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001CFA8 7200                       		moveq	#0,d1
0001CFAA 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CFAE 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CFB2 7200                       		moveq	#0,d1
0001CFB4 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CFB8 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CFBC                            
0001CFBC                            Hud_End:
0001CFBC 4E75                       		rts	
0001CFBE                            ; ===========================================================================
0001CFBE                            
0001CFBE                            TimeOver:				; XREF: Hud_ChkTime
0001CFBE 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001CFC2 41F8 D000                  		lea	($FFFFD000).w,a0
0001CFC6 2448                       		movea.l	a0,a2
0001CFC8 6100 E908                  		bsr.w	KillSonic
0001CFCC 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001CFD2 4E75                       		rts	
0001CFD4                            ; ===========================================================================
0001CFD4                            
0001CFD4                            HudDebug:				; XREF: HudUpdate
0001CFD4 6100 0000                  		bsr.w	HudDb_XY
0001CFD8 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CFDC 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001CFDE 6A00                       		bpl.s	HudDb_Rings
0001CFE0 6100 0000                  		bsr.w	Hud_LoadZero
0001CFE4                            
0001CFE4                            HudDb_Rings:
0001CFE4 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CFE8 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CFEE 7200                       		moveq	#0,d1
0001CFF0 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CFF4 6100 0000                  		bsr.w	Hud_Rings
0001CFF8                            
0001CFF8                            HudDb_ObjCount:
0001CFF8 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001CFFE 7200                       		moveq	#0,d1
0001D000 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D004 6100 0000                  		bsr.w	Hud_Secs
0001D008 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D00C 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D00E 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D012 6100 0000                  		bsr.w	Hud_Lives
0001D016                            
0001D016                            HudDb_ChkBonus:
0001D016 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D01A 6700                       		beq.s	HudDb_End	; if not, branch
0001D01C 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D020 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D02A 7200                       		moveq	#0,d1
0001D02C 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D030 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D034 7200                       		moveq	#0,d1
0001D036 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D03A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D03E                            
0001D03E                            HudDb_End:
0001D03E 4E75                       		rts	
0001D040                            ; End of function HudUpdate
0001D040                            
0001D040                            ; ---------------------------------------------------------------------------
0001D040                            ; Subroutine to	load "0" on the	HUD
0001D040                            ; ---------------------------------------------------------------------------
0001D040                            
0001D040                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D040                            
0001D040                            
0001D040                            Hud_LoadZero:				; XREF: HudUpdate
0001D040 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D04A 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D04E 343C 0002                  		move.w	#2,d2
0001D052 6000                       		bra.s	loc_1C83E
0001D054                            ; End of function Hud_LoadZero
0001D054                            
0001D054                            ; ---------------------------------------------------------------------------
0001D054                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D054                            ; ---------------------------------------------------------------------------
0001D054                            
0001D054                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D054                            
0001D054                            
0001D054                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D054 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D05A 6100 0000                  		bsr.w	Hud_Lives
0001D05E 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D068 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D06C 343C 000E                  		move.w	#$E,d2
0001D070                            
0001D070                            loc_1C83E:				; XREF: Hud_LoadZero
0001D070 43FA 0000                  		lea	Art_Hud(pc),a1
0001D074                            
0001D074                            loc_1C842:
0001D074 323C 000F                  		move.w	#$F,d1
0001D078 101A                       		move.b	(a2)+,d0
0001D07A 6B00                       		bmi.s	loc_1C85E
0001D07C 4880                       		ext.w	d0
0001D07E EB48                       		lsl.w	#5,d0
0001D080 47F1 0000                  		lea	(a1,d0.w),a3
0001D084                            
0001D084                            loc_1C852:
0001D084 2C9B                       		move.l	(a3)+,(a6)
0001D086 51C9 FFFC                  		dbf	d1,loc_1C852
0001D08A                            
0001D08A                            loc_1C858:
0001D08A 51CA FFE8                  		dbf	d2,loc_1C842
0001D08E                            
0001D08E 4E75                       		rts	
0001D090                            ; ===========================================================================
0001D090                            
0001D090                            loc_1C85E:
0001D090 2CBC 0000 0000             		move.l	#0,(a6)
0001D096 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D09A                            
0001D09A 60EE                       		bra.s	loc_1C858
0001D09C                            ; End of function Hud_Base
0001D09C                            
0001D09C                            ; ===========================================================================
0001D09C 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D0A8 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D0AC                            ; ---------------------------------------------------------------------------
0001D0AC                            ; Subroutine to	load debug mode	numbers	patterns
0001D0AC                            ; ---------------------------------------------------------------------------
0001D0AC                            
0001D0AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0AC                            
0001D0AC                            
0001D0AC                            HudDb_XY:				; XREF: HudDebug
0001D0AC 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D0B6 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D0BA 4841                       		swap	d1
0001D0BC 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D0C0 6100                       		bsr.s	HudDb_XY2
0001D0C2 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D0C6 4841                       		swap	d1
0001D0C8 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D0CC                            ; End of function HudDb_XY
0001D0CC                            
0001D0CC                            
0001D0CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0CC                            
0001D0CC                            
0001D0CC                            HudDb_XY2:
0001D0CC 7C07                       		moveq	#7,d6
0001D0CE 43F9 0000 05F4             		lea	(Art_Text).l,a1
0001D0D4                            
0001D0D4                            HudDb_XYLoop:
0001D0D4 E959                       		rol.w	#4,d1
0001D0D6 3401                       		move.w	d1,d2
0001D0D8 0242 000F                  		andi.w	#$F,d2
0001D0DC 0C42 000A                  		cmpi.w	#$A,d2
0001D0E0 6500                       		bcs.s	loc_1C8B2
0001D0E2 5E42                       		addq.w	#7,d2
0001D0E4                            
0001D0E4                            loc_1C8B2:
0001D0E4 EB4A                       		lsl.w	#5,d2
0001D0E6 47F1 2000                  		lea	(a1,d2.w),a3
0001D0EA 2C9B                       		move.l	(a3)+,(a6)
0001D0EC 2C9B                       		move.l	(a3)+,(a6)
0001D0EE 2C9B                       		move.l	(a3)+,(a6)
0001D0F0 2C9B                       		move.l	(a3)+,(a6)
0001D0F2 2C9B                       		move.l	(a3)+,(a6)
0001D0F4 2C9B                       		move.l	(a3)+,(a6)
0001D0F6 2C9B                       		move.l	(a3)+,(a6)
0001D0F8 2C9B                       		move.l	(a3)+,(a6)
0001D0FA 4841                       		swap	d1
0001D0FC 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D100                            
0001D100 4E75                       		rts	
0001D102                            ; End of function HudDb_XY2
0001D102                            
0001D102                            ; ---------------------------------------------------------------------------
0001D102                            ; Subroutine to	load rings numbers patterns
0001D102                            ; ---------------------------------------------------------------------------
0001D102                            
0001D102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D102                            
0001D102                            
0001D102                            Hud_Rings:				; XREF: HudUpdate
0001D102 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D108 7C02                       		moveq	#2,d6
0001D10A 6000                       		bra.s	Hud_LoadArt
0001D10C                            ; End of function Hud_Rings
0001D10C                            
0001D10C                            ; ---------------------------------------------------------------------------
0001D10C                            ; Subroutine to	load score numbers patterns
0001D10C                            ; ---------------------------------------------------------------------------
0001D10C                            
0001D10C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D10C                            
0001D10C                            
0001D10C                            Hud_Score:				; XREF: HudUpdate
0001D10C 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D112 7C05                       		moveq	#5,d6
0001D114                            
0001D114                            Hud_LoadArt:
0001D114 7800                       		moveq	#0,d4
0001D116 43FA 0000                  		lea	Art_Hud(pc),a1
0001D11A                            
0001D11A                            Hud_ScoreLoop:
0001D11A 7400                       		moveq	#0,d2
0001D11C 261A                       		move.l	(a2)+,d3
0001D11E                            
0001D11E                            loc_1C8EC:
0001D11E 9283                       		sub.l	d3,d1
0001D120 6500                       		bcs.s	loc_1C8F4
0001D122 5242                       		addq.w	#1,d2
0001D124 60F8                       		bra.s	loc_1C8EC
0001D126                            ; ===========================================================================
0001D126                            
0001D126                            loc_1C8F4:
0001D126 D283                       		add.l	d3,d1
0001D128 4A42                       		tst.w	d2
0001D12A 6700                       		beq.s	loc_1C8FE
0001D12C 383C 0001                  		move.w	#1,d4
0001D130                            
0001D130                            loc_1C8FE:
0001D130 4A44                       		tst.w	d4
0001D132 6700                       		beq.s	loc_1C92C
0001D134 ED4A                       		lsl.w	#6,d2
0001D136 2D40 0004                  		move.l	d0,4(a6)
0001D13A 47F1 2000                  		lea	(a1,d2.w),a3
0001D13E 2C9B                       		move.l	(a3)+,(a6)
0001D140 2C9B                       		move.l	(a3)+,(a6)
0001D142 2C9B                       		move.l	(a3)+,(a6)
0001D144 2C9B                       		move.l	(a3)+,(a6)
0001D146 2C9B                       		move.l	(a3)+,(a6)
0001D148 2C9B                       		move.l	(a3)+,(a6)
0001D14A 2C9B                       		move.l	(a3)+,(a6)
0001D14C 2C9B                       		move.l	(a3)+,(a6)
0001D14E 2C9B                       		move.l	(a3)+,(a6)
0001D150 2C9B                       		move.l	(a3)+,(a6)
0001D152 2C9B                       		move.l	(a3)+,(a6)
0001D154 2C9B                       		move.l	(a3)+,(a6)
0001D156 2C9B                       		move.l	(a3)+,(a6)
0001D158 2C9B                       		move.l	(a3)+,(a6)
0001D15A 2C9B                       		move.l	(a3)+,(a6)
0001D15C 2C9B                       		move.l	(a3)+,(a6)
0001D15E                            
0001D15E                            loc_1C92C:
0001D15E 0680 0040 0000             		addi.l	#$400000,d0
0001D164 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D168                            
0001D168 4E75                       		rts	
0001D16A                            ; End of function Hud_Score
0001D16A                            
0001D16A                            ; ---------------------------------------------------------------------------
0001D16A                            ; Subroutine to	load countdown numbers on the continue screen
0001D16A                            ; ---------------------------------------------------------------------------
0001D16A                            
0001D16A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D16A                            
0001D16A                            
0001D16A                            ContScrCounter:				; XREF: ContinueScreen
0001D16A 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D174 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D17A 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D180 7C01                       		moveq	#1,d6
0001D182 7800                       		moveq	#0,d4
0001D184 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D188                            
0001D188                            ContScr_Loop:
0001D188 7400                       		moveq	#0,d2
0001D18A 261A                       		move.l	(a2)+,d3
0001D18C                            
0001D18C                            loc_1C95A:
0001D18C 9283                       		sub.l	d3,d1
0001D18E 6500                       		bcs.s	loc_1C962
0001D190 5242                       		addq.w	#1,d2
0001D192 60F8                       		bra.s	loc_1C95A
0001D194                            ; ===========================================================================
0001D194                            
0001D194                            loc_1C962:
0001D194 D283                       		add.l	d3,d1
0001D196 ED4A                       		lsl.w	#6,d2
0001D198 47F1 2000                  		lea	(a1,d2.w),a3
0001D19C 2C9B                       		move.l	(a3)+,(a6)
0001D19E 2C9B                       		move.l	(a3)+,(a6)
0001D1A0 2C9B                       		move.l	(a3)+,(a6)
0001D1A2 2C9B                       		move.l	(a3)+,(a6)
0001D1A4 2C9B                       		move.l	(a3)+,(a6)
0001D1A6 2C9B                       		move.l	(a3)+,(a6)
0001D1A8 2C9B                       		move.l	(a3)+,(a6)
0001D1AA 2C9B                       		move.l	(a3)+,(a6)
0001D1AC 2C9B                       		move.l	(a3)+,(a6)
0001D1AE 2C9B                       		move.l	(a3)+,(a6)
0001D1B0 2C9B                       		move.l	(a3)+,(a6)
0001D1B2 2C9B                       		move.l	(a3)+,(a6)
0001D1B4 2C9B                       		move.l	(a3)+,(a6)
0001D1B6 2C9B                       		move.l	(a3)+,(a6)
0001D1B8 2C9B                       		move.l	(a3)+,(a6)
0001D1BA 2C9B                       		move.l	(a3)+,(a6)
0001D1BC 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D1C0                            
0001D1C0 4E75                       		rts	
0001D1C2                            ; End of function ContScrCounter
0001D1C2                            
0001D1C2                            ; ===========================================================================
0001D1C2                            ; ---------------------------------------------------------------------------
0001D1C2                            ; HUD counter sizes
0001D1C2                            ; ---------------------------------------------------------------------------
0001D1C2 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D1C6 0000 2710                  Hud_10000:	dc.l 10000
0001D1CA 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D1CE 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D1D2 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D1D6 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D1DA                            
0001D1DA                            ; ---------------------------------------------------------------------------
0001D1DA                            ; Subroutine to	load time numbers patterns
0001D1DA                            ; ---------------------------------------------------------------------------
0001D1DA                            
0001D1DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1DA                            
0001D1DA                            
0001D1DA                            Hud_Mins:				; XREF: Hud_ChkTime
0001D1DA 45F9 0001 D1D6             		lea	(Hud_1).l,a2
0001D1E0 7C00                       		moveq	#0,d6
0001D1E2 6000                       		bra.s	loc_1C9BA
0001D1E4                            ; End of function Hud_Mins
0001D1E4                            
0001D1E4                            
0001D1E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1E4                            
0001D1E4                            
0001D1E4                            Hud_Secs:				; XREF: Hud_ChkTime
0001D1E4 45F9 0001 D1D2             		lea	(Hud_10).l,a2
0001D1EA 7C01                       		moveq	#1,d6
0001D1EC                            
0001D1EC                            loc_1C9BA:
0001D1EC 7800                       		moveq	#0,d4
0001D1EE 43FA 0000                  		lea	Art_Hud(pc),a1
0001D1F2                            
0001D1F2                            Hud_TimeLoop:
0001D1F2 7400                       		moveq	#0,d2
0001D1F4 261A                       		move.l	(a2)+,d3
0001D1F6                            
0001D1F6                            loc_1C9C4:
0001D1F6 9283                       		sub.l	d3,d1
0001D1F8 6500                       		bcs.s	loc_1C9CC
0001D1FA 5242                       		addq.w	#1,d2
0001D1FC 60F8                       		bra.s	loc_1C9C4
0001D1FE                            ; ===========================================================================
0001D1FE                            
0001D1FE                            loc_1C9CC:
0001D1FE D283                       		add.l	d3,d1
0001D200 4A42                       		tst.w	d2
0001D202 6700                       		beq.s	loc_1C9D6
0001D204 383C 0001                  		move.w	#1,d4
0001D208                            
0001D208                            loc_1C9D6:
0001D208 ED4A                       		lsl.w	#6,d2
0001D20A 2D40 0004                  		move.l	d0,4(a6)
0001D20E 47F1 2000                  		lea	(a1,d2.w),a3
0001D212 2C9B                       		move.l	(a3)+,(a6)
0001D214 2C9B                       		move.l	(a3)+,(a6)
0001D216 2C9B                       		move.l	(a3)+,(a6)
0001D218 2C9B                       		move.l	(a3)+,(a6)
0001D21A 2C9B                       		move.l	(a3)+,(a6)
0001D21C 2C9B                       		move.l	(a3)+,(a6)
0001D21E 2C9B                       		move.l	(a3)+,(a6)
0001D220 2C9B                       		move.l	(a3)+,(a6)
0001D222 2C9B                       		move.l	(a3)+,(a6)
0001D224 2C9B                       		move.l	(a3)+,(a6)
0001D226 2C9B                       		move.l	(a3)+,(a6)
0001D228 2C9B                       		move.l	(a3)+,(a6)
0001D22A 2C9B                       		move.l	(a3)+,(a6)
0001D22C 2C9B                       		move.l	(a3)+,(a6)
0001D22E 2C9B                       		move.l	(a3)+,(a6)
0001D230 2C9B                       		move.l	(a3)+,(a6)
0001D232 0680 0040 0000             		addi.l	#$400000,d0
0001D238 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D23C                            
0001D23C 4E75                       		rts	
0001D23E                            ; End of function Hud_Secs
0001D23E                            
0001D23E                            ; ---------------------------------------------------------------------------
0001D23E                            ; Subroutine to	load time/ring bonus numbers patterns
0001D23E                            ; ---------------------------------------------------------------------------
0001D23E                            
0001D23E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D23E                            
0001D23E                            
0001D23E                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D23E 45F9 0001 D1CA             		lea	(Hud_1000).l,a2
0001D244 7C03                       		moveq	#3,d6
0001D246 7800                       		moveq	#0,d4
0001D248 43FA 0000                  		lea	Art_Hud(pc),a1
0001D24C                            
0001D24C                            Hud_BonusLoop:
0001D24C 7400                       		moveq	#0,d2
0001D24E 261A                       		move.l	(a2)+,d3
0001D250                            
0001D250                            loc_1CA1E:
0001D250 9283                       		sub.l	d3,d1
0001D252 6500                       		bcs.s	loc_1CA26
0001D254 5242                       		addq.w	#1,d2
0001D256 60F8                       		bra.s	loc_1CA1E
0001D258                            ; ===========================================================================
0001D258                            
0001D258                            loc_1CA26:
0001D258 D283                       		add.l	d3,d1
0001D25A 4A42                       		tst.w	d2
0001D25C 6700                       		beq.s	loc_1CA30
0001D25E 383C 0001                  		move.w	#1,d4
0001D262                            
0001D262                            loc_1CA30:
0001D262 4A44                       		tst.w	d4
0001D264 6700                       		beq.s	Hud_ClrBonus
0001D266 ED4A                       		lsl.w	#6,d2
0001D268 47F1 2000                  		lea	(a1,d2.w),a3
0001D26C 2C9B                       		move.l	(a3)+,(a6)
0001D26E 2C9B                       		move.l	(a3)+,(a6)
0001D270 2C9B                       		move.l	(a3)+,(a6)
0001D272 2C9B                       		move.l	(a3)+,(a6)
0001D274 2C9B                       		move.l	(a3)+,(a6)
0001D276 2C9B                       		move.l	(a3)+,(a6)
0001D278 2C9B                       		move.l	(a3)+,(a6)
0001D27A 2C9B                       		move.l	(a3)+,(a6)
0001D27C 2C9B                       		move.l	(a3)+,(a6)
0001D27E 2C9B                       		move.l	(a3)+,(a6)
0001D280 2C9B                       		move.l	(a3)+,(a6)
0001D282 2C9B                       		move.l	(a3)+,(a6)
0001D284 2C9B                       		move.l	(a3)+,(a6)
0001D286 2C9B                       		move.l	(a3)+,(a6)
0001D288 2C9B                       		move.l	(a3)+,(a6)
0001D28A 2C9B                       		move.l	(a3)+,(a6)
0001D28C                            
0001D28C                            loc_1CA5A:
0001D28C 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D290                            
0001D290 4E75                       		rts	
0001D292                            ; ===========================================================================
0001D292                            
0001D292                            Hud_ClrBonus:
0001D292 7A0F                       		moveq	#$F,d5
0001D294                            
0001D294                            Hud_ClrBonusLoop:
0001D294 2CBC 0000 0000             		move.l	#0,(a6)
0001D29A 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D29E                            
0001D29E 60EC                       		bra.s	loc_1CA5A
0001D2A0                            ; End of function Hud_TimeRingBonus
0001D2A0                            
0001D2A0                            ; ---------------------------------------------------------------------------
0001D2A0                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D2A0                            ; ---------------------------------------------------------------------------
0001D2A0                            
0001D2A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2A0                            
0001D2A0                            
0001D2A0                            Hud_Lives:				; XREF: Hud_ChkLives
0001D2A0 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D2A6 7200                       		moveq	#0,d1
0001D2A8 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D2AC 45F9 0001 D1D2             		lea	(Hud_10).l,a2
0001D2B2 7C01                       		moveq	#1,d6
0001D2B4 7800                       		moveq	#0,d4
0001D2B6 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D2BA                            
0001D2BA                            Hud_LivesLoop:
0001D2BA 2D40 0004                  		move.l	d0,4(a6)
0001D2BE 7400                       		moveq	#0,d2
0001D2C0 261A                       		move.l	(a2)+,d3
0001D2C2                            
0001D2C2                            loc_1CA90:
0001D2C2 9283                       		sub.l	d3,d1
0001D2C4 6500                       		bcs.s	loc_1CA98
0001D2C6 5242                       		addq.w	#1,d2
0001D2C8 60F8                       		bra.s	loc_1CA90
0001D2CA                            ; ===========================================================================
0001D2CA                            
0001D2CA                            loc_1CA98:
0001D2CA D283                       		add.l	d3,d1
0001D2CC 4A42                       		tst.w	d2
0001D2CE 6700                       		beq.s	loc_1CAA2
0001D2D0 383C 0001                  		move.w	#1,d4
0001D2D4                            
0001D2D4                            loc_1CAA2:
0001D2D4 4A44                       		tst.w	d4
0001D2D6 6700                       		beq.s	Hud_ClrLives
0001D2D8                            
0001D2D8                            loc_1CAA6:
0001D2D8 EB4A                       		lsl.w	#5,d2
0001D2DA 47F1 2000                  		lea	(a1,d2.w),a3
0001D2DE 2C9B                       		move.l	(a3)+,(a6)
0001D2E0 2C9B                       		move.l	(a3)+,(a6)
0001D2E2 2C9B                       		move.l	(a3)+,(a6)
0001D2E4 2C9B                       		move.l	(a3)+,(a6)
0001D2E6 2C9B                       		move.l	(a3)+,(a6)
0001D2E8 2C9B                       		move.l	(a3)+,(a6)
0001D2EA 2C9B                       		move.l	(a3)+,(a6)
0001D2EC 2C9B                       		move.l	(a3)+,(a6)
0001D2EE                            
0001D2EE                            loc_1CABC:
0001D2EE 0680 0040 0000             		addi.l	#$400000,d0
0001D2F4 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D2F8                            
0001D2F8 4E75                       		rts	
0001D2FA                            ; ===========================================================================
0001D2FA                            
0001D2FA                            Hud_ClrLives:
0001D2FA 4A46                       		tst.w	d6
0001D2FC 67DA                       		beq.s	loc_1CAA6
0001D2FE 7A07                       		moveq	#7,d5
0001D300                            
0001D300                            Hud_ClrLivesLoop:
0001D300 2CBC 0000 0000             		move.l	#0,(a6)
0001D306 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D30A 60E2                       		bra.s	loc_1CABC
0001D30C                            ; End of function Hud_Lives
0001D30C                            
0001D30C                            ; ===========================================================================
0001D30C                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D60C                            		even
0001D60C                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D74C                            		even
0001D74C                            ; ===========================================================================
0001D74C                            ; ---------------------------------------------------------------------------
0001D74C                            ; When debug mode is currently in use
0001D74C                            ; ---------------------------------------------------------------------------
0001D74C                            
0001D74C                            DebugMode:				; XREF: Obj01; Obj09
0001D74C 7000                       		moveq	#0,d0
0001D74E 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D752 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D756 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D75A                            ; ===========================================================================
0001D75A 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D75C 0000                       		dc.w Debug_Skip-Debug_Index
0001D75E                            ; ===========================================================================
0001D75E                            
0001D75E                            Debug_Main:				; XREF: Debug_Index
0001D75E 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D762 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D768 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D76E 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D774 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D77A 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D780 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D786 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D78C 117C 0000 001A             		move.b	#0,$1A(a0)
0001D792 117C 0000 001C             		move.b	#0,$1C(a0)
0001D798 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D79E 6600                       		bne.s	Debug_Zone	; if not, branch
0001D7A0 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D7A6 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D7AC 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D7AE 6000                       		bra.s	Debug_UseList
0001D7B0                            ; ===========================================================================
0001D7B0                            
0001D7B0                            Debug_Zone:
0001D7B0 7000                       		moveq	#0,d0
0001D7B2 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D7B6                            
0001D7B6                            Debug_UseList:
0001D7B6 45F9 0000 0000             		lea	(DebugList).l,a2
0001D7BC D040                       		add.w	d0,d0
0001D7BE D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D7C2 3C1A                       		move.w	(a2)+,d6
0001D7C4 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D7C8 6200                       		bhi.s	loc_1CF9E
0001D7CA 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D7D0                            
0001D7D0                            loc_1CF9E:
0001D7D0 6100 0000                  		bsr.w	Debug_ShowItem
0001D7D4 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D7DA 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D7E0                            
0001D7E0                            Debug_Skip:				; XREF: Debug_Index
0001D7E0 7006                       		moveq	#6,d0
0001D7E2 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D7E8 6700                       		beq.s	loc_1CFBE
0001D7EA 7000                       		moveq	#0,d0
0001D7EC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D7F0                            
0001D7F0                            loc_1CFBE:
0001D7F0 45F9 0000 0000             		lea	(DebugList).l,a2
0001D7F6 D040                       		add.w	d0,d0
0001D7F8 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D7FC 3C1A                       		move.w	(a2)+,d6
0001D7FE 6100 0000                  		bsr.w	Debug_Control
0001D802 4EF9 0000 DCDE             		jmp	DisplaySprite
0001D808                            
0001D808                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D808                            
0001D808                            
0001D808                            Debug_Control:
0001D808 7800                       		moveq	#0,d4
0001D80A 323C 0001                  		move.w	#1,d1
0001D80E 1838 F605                  		move.b	($FFFFF605).w,d4
0001D812 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D816 6600                       		bne.s	loc_1D018	; if yes, branch
0001D818 1038 F604                  		move.b	($FFFFF604).w,d0
0001D81C 0240 000F                  		andi.w	#$F,d0
0001D820 6600                       		bne.s	loc_1D000
0001D822 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D828 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D82E 6000 0000                  		bra.w	Debug_BackItem
0001D832                            ; ===========================================================================
0001D832                            
0001D832                            loc_1D000:
0001D832 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D836 6600                       		bne.s	loc_1D01C
0001D838 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D83E 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D842 6600                       		bne.s	loc_1D018
0001D844 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D84A                            
0001D84A                            loc_1D018:
0001D84A 1838 F604                  		move.b	($FFFFF604).w,d4
0001D84E                            
0001D84E                            loc_1D01C:
0001D84E 7200                       		moveq	#0,d1
0001D850 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D854 5241                       		addq.w	#1,d1
0001D856 4841                       		swap	d1
0001D858 E881                       		asr.l	#4,d1
0001D85A 2428 000C                  		move.l	$C(a0),d2
0001D85E 2628 0008                  		move.l	8(a0),d3
0001D862 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D866 6700                       		beq.s	loc_1D03C	; if not, branch
0001D868 9481                       		sub.l	d1,d2
0001D86A 6400                       		bcc.s	loc_1D03C
0001D86C 7400                       		moveq	#0,d2
0001D86E                            
0001D86E                            loc_1D03C:
0001D86E 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D872 6700                       		beq.s	loc_1D052	; if not, branch
0001D874 D481                       		add.l	d1,d2
0001D876 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D87C 6500                       		bcs.s	loc_1D052
0001D87E 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D884                            
0001D884                            loc_1D052:
0001D884 0804 0002                  		btst	#2,d4
0001D888 6700                       		beq.s	loc_1D05E
0001D88A 9681                       		sub.l	d1,d3
0001D88C 6400                       		bcc.s	loc_1D05E
0001D88E 7600                       		moveq	#0,d3
0001D890                            
0001D890                            loc_1D05E:
0001D890 0804 0003                  		btst	#3,d4
0001D894 6700                       		beq.s	loc_1D066
0001D896 D681                       		add.l	d1,d3
0001D898                            
0001D898                            loc_1D066:
0001D898 2142 000C                  		move.l	d2,$C(a0)
0001D89C 2143 0008                  		move.l	d3,8(a0)
0001D8A0                            
0001D8A0                            Debug_BackItem:
0001D8A0 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D8A6 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D8A8 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D8AE 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D8B0 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D8B4 6400                       		bcc.s	Debug_NoLoop
0001D8B6 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D8BA 6000                       		bra.s	Debug_NoLoop
0001D8BC                            ; ===========================================================================
0001D8BC                            
0001D8BC                            Debug_NextItem:
0001D8BC 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D8C2 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D8C4 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D8C8 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D8CC 6200                       		bhi.s	Debug_NoLoop
0001D8CE 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D8D4                            
0001D8D4                            Debug_NoLoop:
0001D8D4 6000 0000                  		bra.w	Debug_ShowItem
0001D8D8                            ; ===========================================================================
0001D8D8                            
0001D8D8                            Debug_MakeItem:
0001D8D8 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D8DE 6700                       		beq.s	Debug_Exit	; if not, branch
0001D8E0 4EB9 0000 E164             		jsr	SingleObjLoad
0001D8E6 6600                       		bne.s	Debug_Exit
0001D8E8 3368 0008 0008             		move.w	8(a0),8(a1)
0001D8EE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D8F4 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D8F8 1368 0001 0001             		move.b	1(a0),1(a1)
0001D8FE 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D904 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D90A 7000                       		moveq	#0,d0
0001D90C 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D910 E748                       		lsl.w	#3,d0
0001D912 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D918 4E75                       		rts	
0001D91A                            ; ===========================================================================
0001D91A                            
0001D91A                            Debug_Exit:
0001D91A 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D920 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D922 7000                       		moveq	#0,d0
0001D924 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D928 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D930 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D936 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D93A 3140 000A                  		move.w	d0,$A(a0)
0001D93E 3140 000E                  		move.w	d0,$E(a0)
0001D942 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D948 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D94E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D954 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D956 4278 F780                  		clr.w	($FFFFF780).w
0001D95A 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D960 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D968 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D96E 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D974 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D97A 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D980                            
0001D980                            Debug_DoNothing:
0001D980 4E75                       		rts	
0001D982                            ; End of function Debug_Control
0001D982                            
0001D982                            
0001D982                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D982                            
0001D982                            
0001D982                            Debug_ShowItem:				; XREF: Debug_Main
0001D982 7000                       		moveq	#0,d0
0001D984 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D988 E748                       		lsl.w	#3,d0
0001D98A 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D990 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D996 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D99C 4E75                       		rts	
0001D99E                            ; End of function Debug_ShowItem
0001D99E                            
0001D99E                            ; ===========================================================================
0001D99E                            ; ---------------------------------------------------------------------------
0001D99E                            ; Debug	list pointers
0001D99E                            ; ---------------------------------------------------------------------------
0001D99E                            DebugList:
0001D99E                            	include "_inc\Debug list pointers.asm"
0001D99E                            ; ---------------------------------------------------------------------------
0001D99E                            ; Debug	list pointers
0001D99E                            ; ---------------------------------------------------------------------------
0001D99E 0000                       	dc.w Debug_GHZ-DebugList
0001D9A0 0000                       	dc.w Debug_LZ-DebugList
0001D9A2 0000                       	dc.w Debug_MZ-DebugList
0001D9A4 0000                       	dc.w Debug_SLZ-DebugList
0001D9A6 0000                       	dc.w Debug_SYZ-DebugList
0001D9A8 0000                       	dc.w Debug_SBZ-DebugList
0001D9AA 0000                       	dc.w Debug_Ending-DebugList
0001D9AA 0000                       	dc.w Debug_Ending-DebugList
0001D9AC                            
0001D9AC                            ; ---------------------------------------------------------------------------
0001D9AC                            ; Debug	list - Green Hill
0001D9AC                            ; ---------------------------------------------------------------------------
0001D9AC                            Debug_GHZ:
0001D9AC                            	include "_inc\Debug list - GHZ.asm"
0001D9AC                            ; ---------------------------------------------------------------------------
0001D9AC                            ; Debug	list - Green Hill
0001D9AC                            ; ---------------------------------------------------------------------------
0001D9AC 0010                       	dc.w $10			; number of items in list
0001D9AE 2500 A53C                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D9B2 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D9B6 2600 AB42                  	dc.l Map_obj26+$26000000
0001D9BA 0000 0680                  	dc.b 0,	0, 6, $80
0001D9BE 1F00 9D34                  	dc.l Map_obj1F+$1F000000
0001D9C2 0000 0400                  	dc.b 0,	0, 4, 0
0001D9C6 2200 9FF0                  	dc.l Map_obj22+$22000000
0001D9CA 0000 0444                  	dc.b 0,	0, 4, $44
0001D9CE 2B00 B1B6                  	dc.l Map_obj2B+$2B000000
0001D9D2 0000 047B                  	dc.b 0,	0, 4, $7B
0001D9D6 3600 D6C6                  	dc.l Map_obj36+$36000000
0001D9DA 0000 051B                  	dc.b 0,	0, 5, $1B
0001D9DE 1800 86E2                  	dc.l Map_obj18+$18000000
0001D9E2 0000 4000                  	dc.b 0,	0, $40,	0
0001D9E6 3B00 D7EC                  	dc.l Map_obj3B+$3B000000
0001D9EA 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001D9EE 4000 FE78                  	dc.l Map_obj40+$40000000
0001D9F2 0000 04F0                  	dc.b 0,	0, 4, $F0
0001D9F6 4100 E3F2                  	dc.l Map_obj41+$41000000
0001D9FA 0000 0523                  	dc.b 0,	0, 5, $23
0001D9FE 4200 E618                  	dc.l Map_obj42+$42000000
0001DA02 0000 249B                  	dc.b 0,	0, $24,	$9B
0001DA06 4400 E926                  	dc.l Map_obj44+$44000000
0001DA0A 0000 434C                  	dc.b 0,	0, $43,	$4C
0001DA0E 1900 8750                  	dc.l Map_obj48+$19000000
0001DA12 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001DA16 7901 78B6                  	dc.l Map_obj79+$79000000
0001DA1A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DA1E 4B00 A57C                  	dc.l Map_obj4B+$4B000000
0001DA22 0000 2400                  	dc.b 0,	0, $24,	0
0001DA26 7D01 7A06                  	dc.l Map_obj7D+$7D000000
0001DA2A 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001DA2E                            	even
0001DA2E                            	even
0001DA2E                            
0001DA2E                            ; ---------------------------------------------------------------------------
0001DA2E                            ; Debug	list - Labyrinth
0001DA2E                            ; ---------------------------------------------------------------------------
0001DA2E                            Debug_LZ:
0001DA2E                            	include "_inc\Debug list - LZ.asm"
0001DA2E                            ; ---------------------------------------------------------------------------
0001DA2E                            ; Debug	list - Labyrinth
0001DA2E                            ; ---------------------------------------------------------------------------
0001DA2E 0019                       	dc.w $19
0001DA30 2500 A53C                  	dc.l Map_obj25+$25000000
0001DA34 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DA38 2600 AB42                  	dc.l Map_obj26+$26000000
0001DA3C 0000 0680                  	dc.b 0,	0, 6, $80
0001DA40 4100 E3F2                  	dc.l Map_obj41+$41000000
0001DA44 0000 0523                  	dc.b 0,	0, 5, $23
0001DA48 2C00 B266                  	dc.l Map_obj2C+$2C000000
0001DA4C 0800 2486                  	dc.b 8,	0, $24,	$86
0001DA50 2D00 B45A                  	dc.l Map_obj2D+$2D000000
0001DA54 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001DA58 1601 264C                  	dc.l Map_obj16+$16000000
0001DA5C 0000 03CC                  	dc.b 0,	0, 3, $CC
0001DA60 1601 264C                  	dc.l Map_obj16+$16000000
0001DA64 0203 03CC                  	dc.b 2,	3, 3, $CC
0001DA68 3300 C912                  	dc.l Map_obj33+$33000000
0001DA6C 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DA70 3200 C4D2                  	dc.l Map_obj32+$32000000
0001DA74 0000 0513                  	dc.b 0,	0, 5, $13
0001DA78 3600 D6C6                  	dc.l Map_obj36+$36000000
0001DA7C 0000 051B                  	dc.b 0,	0, 5, $1B
0001DA80 5201 076E                  	dc.l Map_obj52a+$52000000
0001DA84 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001DA88 6101 2874                  	dc.l Map_obj61+$61000000
0001DA8C 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001DA90 6101 2874                  	dc.l Map_obj61+$61000000
0001DA94 1301 43E6                  	dc.b $13, 1, $43, $E6
0001DA98 6101 2874                  	dc.l Map_obj61+$61000000
0001DA9C 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001DAA0 6201 29C8                  	dc.l Map_obj62+$62000000
0001DAA4 0000 443E                  	dc.b 0,	0, $44,	$3E
0001DAA8 6101 2874                  	dc.l Map_obj61+$61000000
0001DAAC 2702 43E6                  	dc.b $27, 2, $43, $E6
0001DAB0 6101 2874                  	dc.l Map_obj61+$61000000
0001DAB4 3003 43E6                  	dc.b $30, 3, $43, $E6
0001DAB8 6301 2D2A                  	dc.l Map_obj63+$63000000
0001DABC 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001DAC0 6001 2596                  	dc.l Map_obj60+$60000000
0001DAC4 0000 0467                  	dc.b 0,	0, 4, $67
0001DAC8 6401 3070                  	dc.l Map_obj64+$64000000
0001DACC 8413 8348                  	dc.b $84, $13, $83, $48
0001DAD0 6501 31F8                  	dc.l Map_obj65+$65000000
0001DAD4 0202 C259                  	dc.b 2,	2, $C2,	$59
0001DAD8 6501 31F8                  	dc.l Map_obj65+$65000000
0001DADC 0909 C259                  	dc.b 9,	9, $C2,	$59
0001DAE0 0B01 19E6                  	dc.l Map_obj0B+$B000000
0001DAE4 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DAE8 0C01 1AB6                  	dc.l Map_obj0C+$C000000
0001DAEC 0200 4328                  	dc.b 2,	0, $43,	$28
0001DAF0 7901 78B6                  	dc.l Map_obj79+$79000000
0001DAF4 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DAF8                            	even
0001DAF8                            	even
0001DAF8                            
0001DAF8                            ; ---------------------------------------------------------------------------
0001DAF8                            ; Debug	list - Marble
0001DAF8                            ; ---------------------------------------------------------------------------
0001DAF8                            Debug_MZ:
0001DAF8                            	include "_inc\Debug list - MZ.asm"
0001DAF8                            ; ---------------------------------------------------------------------------
0001DAF8                            ; Debug	list - Marble
0001DAF8                            ; ---------------------------------------------------------------------------
0001DAF8 0012                       	dc.w $12
0001DAFA 2500 A53C                  	dc.l Map_obj25+$25000000
0001DAFE 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DB02 2600 AB42                  	dc.l Map_obj26+$26000000
0001DB06 0000 0680                  	dc.b 0,	0, 6, $80
0001DB0A 2200 9FF0                  	dc.l Map_obj22+$22000000
0001DB0E 0000 0444                  	dc.b 0,	0, 4, $44
0001DB12 3600 D6C6                  	dc.l Map_obj36+$36000000
0001DB16 0000 051B                  	dc.b 0,	0, 5, $1B
0001DB1A 4100 E3F2                  	dc.l Map_obj41+$41000000
0001DB1E 0000 0523                  	dc.b 0,	0, 5, $23
0001DB22 1300 B99C                  	dc.l Map_obj14+$13000000
0001DB26 0000 0345                  	dc.b 0,	0, 3, $45
0001DB2A 4600 EFD8                  	dc.l Map_obj46+$46000000
0001DB2E 0000 4000                  	dc.b 0,	0, $40,	0
0001DB32 4C00 F924                  	dc.l Map_obj4C+$4C000000
0001DB36 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DB3A 4E00 FC08                  	dc.l Map_obj4E+$4E000000
0001DB3E 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DB42 3300 C912                  	dc.l Map_obj33+$33000000
0001DB46 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DB4A 5001 0006                  	dc.l Map_obj50+$50000000
0001DB4E 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DB52 5101 04A2                  	dc.l Map_obj51+$51000000
0001DB56 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DB5A 5201 0718                  	dc.l Map_obj52+$52000000
0001DB5E 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DB62 5300 8CE8                  	dc.l Map_obj53+$53000000
0001DB66 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DB6A 5400 F8EA                  	dc.l Map_obj54+$54000000
0001DB6E 0000 8680                  	dc.b 0,	0, $86,	$80
0001DB72 5501 090C                  	dc.l Map_obj55+$55000000
0001DB76 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DB7A 7801 7530                  	dc.l Map_obj78+$78000000
0001DB7E 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DB82 7901 78B6                  	dc.l Map_obj79+$79000000
0001DB86 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DB8A                            	even
0001DB8A                            	even
0001DB8A                            
0001DB8A                            ; ---------------------------------------------------------------------------
0001DB8A                            ; Debug	list - Star Light
0001DB8A                            ; ---------------------------------------------------------------------------
0001DB8A                            Debug_SLZ:
0001DB8A                            	include "_inc\Debug list - SLZ.asm"
0001DB8A                            ; ---------------------------------------------------------------------------
0001DB8A                            ; Debug	list - Star Light
0001DB8A                            ; ---------------------------------------------------------------------------
0001DB8A 000F                       	dc.w $F
0001DB8C 2500 A53C                  	dc.l Map_obj25+$25000000
0001DB90 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DB94 2600 AB42                  	dc.l Map_obj26+$26000000
0001DB98 0000 0680                  	dc.b 0,	0, 6, $80
0001DB9C 5901 140E                  	dc.l Map_obj59+$59000000
0001DBA0 0000 4000                  	dc.b 0,	0, $40,	0
0001DBA4 5300 8CE8                  	dc.l Map_obj53+$53000000
0001DBA8 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DBAC 1800 8740                  	dc.l Map_obj18b+$18000000
0001DBB0 0000 4000                  	dc.b 0,	0, $40,	0
0001DBB4 5A01 1548                  	dc.l Map_obj5A+$5A000000
0001DBB8 0000 4000                  	dc.b 0,	0, $40,	0
0001DBBC 5B01 1700                  	dc.l Map_obj5B+$5B000000
0001DBC0 0000 4000                  	dc.b 0,	0, $40,	0
0001DBC4 5D01 1CD0                  	dc.l Map_obj5D+$5D000000
0001DBC8 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001DBCC 5E01 2062                  	dc.l Map_obj5E+$5E000000
0001DBD0 0000 0374                  	dc.b 0,	0, 3, $74
0001DBD4 4100 E3F2                  	dc.l Map_obj41+$41000000
0001DBD8 0000 0523                  	dc.b 0,	0, 5, $23
0001DBDC 1300 B99C                  	dc.l Map_obj14+$13000000
0001DBE0 0000 0480                  	dc.b 0,	0, 4, $80
0001DBE4 1C00 8DF8                  	dc.l Map_obj1C+$1C000000
0001DBE8 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001DBEC 5F01 22E0                  	dc.l Map_obj5F+$5F000000
0001DBF0 0000 0400                  	dc.b 0,	0, 4, 0
0001DBF4 6001 2596                  	dc.l Map_obj60+$60000000
0001DBF8 0000 2429                  	dc.b 0,	0, $24,	$29
0001DBFC 7901 78B6                  	dc.l Map_obj79+$79000000
0001DC00 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DC04                            	even
0001DC04                            	even
0001DC04                            
0001DC04                            ; ---------------------------------------------------------------------------
0001DC04                            ; Debug	list - Spring Yard
0001DC04                            ; ---------------------------------------------------------------------------
0001DC04                            Debug_SYZ:
0001DC04                            	include "_inc\Debug list - SYZ.asm"
0001DC04                            ; ---------------------------------------------------------------------------
0001DC04                            ; Debug	list - Spring Yard
0001DC04                            ; ---------------------------------------------------------------------------
0001DC04 000F                       	dc.w $F
0001DC06 2500 A53C                  	dc.l Map_obj25+$25000000
0001DC0A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DC0E 2600 AB42                  	dc.l Map_obj26+$26000000
0001DC12 0000 0680                  	dc.b 0,	0, 6, $80
0001DC16 3600 D6C6                  	dc.l Map_obj36+$36000000
0001DC1A 0000 051B                  	dc.b 0,	0, 5, $1B
0001DC1E 4100 E3F2                  	dc.l Map_obj41+$41000000
0001DC22 0000 0523                  	dc.b 0,	0, 5, $23
0001DC26 4300 E878                  	dc.l Map_obj43+$43000000
0001DC2A 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DC2E 1200 F056                  	dc.l Map_obj12+$12000000
0001DC32 0000 0000                  	dc.b 0,	0, 0, 0
0001DC36 4700 F1D2                  	dc.l Map_obj47+$47000000
0001DC3A 0000 0380                  	dc.b 0,	0, 3, $80
0001DC3E 1F00 9D34                  	dc.l Map_obj1F+$1F000000
0001DC42 0000 0400                  	dc.b 0,	0, 4, 0
0001DC46 2200 9FF0                  	dc.l Map_obj22+$22000000
0001DC4A 0000 0444                  	dc.b 0,	0, 4, $44
0001DC4E 5001 0006                  	dc.l Map_obj50+$50000000
0001DC52 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DC56 1800 872E                  	dc.l Map_obj18a+$18000000
0001DC5A 0000 4000                  	dc.b 0,	0, $40,	0
0001DC5E 5601 0DCE                  	dc.l Map_obj56+$56000000
0001DC62 0000 4000                  	dc.b 0,	0, $40,	0
0001DC66 3200 C4D2                  	dc.l Map_obj32+$32000000
0001DC6A 0000 0513                  	dc.b 0,	0, 5, $13
0001DC6E 7801 7530                  	dc.l Map_obj78+$78000000
0001DC72 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DC76 7901 78B6                  	dc.l Map_obj79+$79000000
0001DC7A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DC7E                            	even
0001DC7E                            	even
0001DC7E                            
0001DC7E                            ; ---------------------------------------------------------------------------
0001DC7E                            ; Debug	list - Scrap Brain
0001DC7E                            ; ---------------------------------------------------------------------------
0001DC7E                            Debug_SBZ:
0001DC7E                            	include "_inc\Debug list - SBZ.asm"
0001DC7E                            ; ---------------------------------------------------------------------------
0001DC7E                            ; Debug	list - Scrap Brain
0001DC7E                            ; ---------------------------------------------------------------------------
0001DC7E 001D                       	dc.w $1D
0001DC80 2500 A53C                  	dc.l Map_obj25+$25000000
0001DC84 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DC88 2600 AB42                  	dc.l Map_obj26+$26000000
0001DC8C 0000 0680                  	dc.b 0,	0, 6, $80
0001DC90 5F01 22E0                  	dc.l Map_obj5F+$5F000000
0001DC94 0000 0400                  	dc.b 0,	0, 4, 0
0001DC98 6001 2596                  	dc.l Map_obj60+$60000000
0001DC9C 0000 0429                  	dc.b 0,	0, 4, $29
0001DCA0 7801 7530                  	dc.l Map_obj78+$78000000
0001DCA4 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DCA8 1501 116A                  	dc.l Map_obj15b+$15000000
0001DCAC 0702 4391                  	dc.b 7,	2, $43,	$91
0001DCB0 6701 5E44                  	dc.l Map_obj67+$67000000
0001DCB4 E000 C344                  	dc.b $E0, 0, $C3, $44
0001DCB8 5201 0718                  	dc.l Map_obj52+$52000000
0001DCBC 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DCC0 3200 C4D2                  	dc.l Map_obj32+$32000000
0001DCC4 0000 0513                  	dc.b 0,	0, 5, $13
0001DCC8 6901 609E                  	dc.l Map_obj69+$69000000
0001DCCC 0300 4492                  	dc.b 3,	0, $44,	$92
0001DCD0 6901 60F8                  	dc.l Map_obj69a+$69000000
0001DCD4 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DCD8 6A01 6356                  	dc.l Map_obj6A+$6A000000
0001DCDC 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DCE0 5300 8CE8                  	dc.l Map_obj53+$53000000
0001DCE4 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DCE8 5201 0718                  	dc.l Map_obj52+$52000000
0001DCEC 3903 4460                  	dc.b $39, 3, $44, $60
0001DCF0 6B01 6726                  	dc.l Map_obj6B+$6B000000
0001DCF4 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DCF8 2A00 8F8E                  	dc.l Map_obj2A+$2A000000
0001DCFC 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DD00 6B01 6726                  	dc.l Map_obj6B+$6B000000
0001DD04 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DD08 6A01 6356                  	dc.l Map_obj6A+$6A000000
0001DD0C 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DD10 6B01 6726                  	dc.l Map_obj6B+$6B000000
0001DD14 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DD18 6A01 6356                  	dc.l Map_obj6A+$6A000000
0001DD1C 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DD20 6B01 6726                  	dc.l Map_obj6B+$6B000000
0001DD24 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DD28 6C01 68E8                  	dc.l Map_obj6C+$6C000000
0001DD2C 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DD30 6D00 ECC8                  	dc.l Map_obj6D+$6D000000
0001DD34 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DD38 6D00 ECC8                  	dc.l Map_obj6D+$6D000000
0001DD3C 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DD40 6E01 699E                  	dc.l Map_obj6E+$6E000000
0001DD44 0400 047E                  	dc.b 4,	0, 4, $7E
0001DD48 7001 6DF4                  	dc.l Map_obj70+$70000000
0001DD4C 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DD50 7101 1B76                  	dc.l Map_obj71+$71000000
0001DD54 1100 8680                  	dc.b $11, 0, $86, $80
0001DD58 1E00 944C                  	dc.l Map_obj1E+$1E000000
0001DD5C 0400 2302                  	dc.b 4,	0, $23,	2
0001DD60 7901 78B6                  	dc.l Map_obj79+$79000000
0001DD64 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DD68                            	even
0001DD68                            	even
0001DD68                            
0001DD68                            ; ---------------------------------------------------------------------------
0001DD68                            ; Debug	list - ending sequence / special stage
0001DD68                            ; ---------------------------------------------------------------------------
0001DD68                            Debug_Ending:
0001DD68                            	include "_inc\Debug list - Ending and SS.asm"
0001DD68                            ; ---------------------------------------------------------------------------
0001DD68                            ; Debug	list - ending sequence / special stage
0001DD68                            ; ---------------------------------------------------------------------------
0001DD68 000D                       	dc.w $D
0001DD6A 2500 A53C                  	dc.l Map_obj25+$25000000
0001DD6E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DD72 4700 F1D2                  	dc.l Map_obj47+$47000000
0001DD76 0000 0380                  	dc.b 0,	0, 3, $80
0001DD7A 2800 9A66                  	dc.l Map_obj28a+$28000000
0001DD7E 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DD82 2800 9A66                  	dc.l Map_obj28a+$28000000
0001DD86 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DD8A 2800 9A66                  	dc.l Map_obj28a+$28000000
0001DD8E 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001DD92 2800 9A4E                  	dc.l Map_obj28+$28000000
0001DD96 0D00 0553                  	dc.b $D, 0, 5, $53
0001DD9A 2800 9A4E                  	dc.l Map_obj28+$28000000
0001DD9E 0E00 0553                  	dc.b $E, 0, 5, $53
0001DDA2 2800 9A4E                  	dc.l Map_obj28+$28000000
0001DDA6 0F00 0573                  	dc.b $F, 0, 5, $73
0001DDAA 2800 9A4E                  	dc.l Map_obj28+$28000000
0001DDAE 1000 0573                  	dc.b $10, 0, 5,	$73
0001DDB2 2800 9A66                  	dc.l Map_obj28a+$28000000
0001DDB6 1100 0585                  	dc.b $11, 0, 5,	$85
0001DDBA 2800 9A7E                  	dc.l Map_obj28b+$28000000
0001DDBE 1200 0593                  	dc.b $12, 0, 5,	$93
0001DDC2 2800 9A66                  	dc.l Map_obj28a+$28000000
0001DDC6 1300 0565                  	dc.b $13, 0, 5,	$65
0001DDCA 2800 9A7E                  	dc.l Map_obj28b+$28000000
0001DDCE 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DDD2                            	even
0001DDD2                            	even
0001DDD2                            
0001DDD2                            ; ---------------------------------------------------------------------------
0001DDD2                            ; Main level load blocks
0001DDD2                            ; ---------------------------------------------------------------------------
0001DDD2                            MainLoadBlocks:
0001DDD2                            	include "_inc\Main level load blocks.asm"
0001DDD2                            ; ---------------------------------------------------------------------------
0001DDD2                            ; Main level load blocks
0001DDD2                            ;
0001DDD2                            ; ===FORMAT===
0001DDD2                            ; level	patterns + (1st	PLC num	* 10^6)
0001DDD2                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DDD2                            ; 256x256 mappings
0001DDD2                            ; blank, music (unused), pal index (unused), pal index
0001DDD2                            ; ---------------------------------------------------------------------------
0001DDD2 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DDD6 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DDDA 0000 0000                  	dc.l Blk256_GHZ
0001DDDE 0081 0404                  	dc.b 0,	$81, 4,	4
0001DDE2 0000 0000                  	dc.l Nem_LZ+$6000000
0001DDE6 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DDEA 0000 0000                  	dc.l Blk256_LZ
0001DDEE 0082 0505                  	dc.b 0,	$82, 5,	5
0001DDF2 0000 0000                  	dc.l Nem_MZ+$8000000
0001DDF6 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DDFA 0000 0000                  	dc.l Blk256_MZ
0001DDFE 0083 0606                  	dc.b 0,	$83, 6,	6
0001DE02 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DE06 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DE0A 0000 0000                  	dc.l Blk256_SLZ
0001DE0E 0084 0707                  	dc.b 0,	$84, 7,	7
0001DE12 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DE16 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DE1A 0000 0000                  	dc.l Blk256_SYZ
0001DE1E 0085 0808                  	dc.b 0,	$85, 8,	8
0001DE22 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DE26 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DE2A 0000 0000                  	dc.l Blk256_SBZ
0001DE2E 0086 0909                  	dc.b 0,	$86, 9,	9
0001DE32 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DE36 0000 0000                  	dc.l Blk16_GHZ
0001DE3A 0000 0000                  	dc.l Blk256_GHZ
0001DE3E 0086 1313                  	dc.b 0,	$86, $13, $13
0001DE42                            	even
0001DE42                            	even
0001DE42                            
0001DE42                            ; ---------------------------------------------------------------------------
0001DE42                            ; Pattern load cues
0001DE42                            ; ---------------------------------------------------------------------------
0001DE42                            ArtLoadCues:
0001DE42                            	include "_inc\Pattern load cues.asm"
0001DE42                            ; ---------------------------------------------------------------------------
0001DE42                            ; Pattern load cues - index
0001DE42                            ; ---------------------------------------------------------------------------
0001DE42 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DE46 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DE4A 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DE4E 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DE52 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DE56 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DE5A 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DE5E 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DE62 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DE66 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DE6A 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DE6E 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DE72 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DE76 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DE7A 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DE7E 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DE82                            ; ---------------------------------------------------------------------------
0001DE82                            ; Pattern load cues - standard block 1
0001DE82                            ; ---------------------------------------------------------------------------
0001DE82 0004                       PLC_Main:	dc.w 4
0001DE84 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DE88 F400                       		dc.w $F400
0001DE8A 0000 0000                  		dc.l Nem_Hud		; HUD
0001DE8E D940                       		dc.w $D940
0001DE90 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DE94 FA80                       		dc.w $FA80
0001DE96 0000 0000                  		dc.l Nem_Ring		; rings
0001DE9A F640                       		dc.w $F640
0001DE9C 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DEA0 F2E0                       		dc.w $F2E0
0001DEA2                            ; ---------------------------------------------------------------------------
0001DEA2                            ; Pattern load cues - standard block 2
0001DEA2                            ; ---------------------------------------------------------------------------
0001DEA2 0002                       PLC_Main2:	dc.w 2
0001DEA4 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DEA8 D000                       		dc.w $D000
0001DEAA 0000 0000                  		dc.l Nem_Shield		; shield
0001DEAE A820                       		dc.w $A820
0001DEB0 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DEB4 AB80                       		dc.w $AB80
0001DEB6                            ; ---------------------------------------------------------------------------
0001DEB6                            ; Pattern load cues - explosion
0001DEB6                            ; ---------------------------------------------------------------------------
0001DEB6 0000                       PLC_Explode:	dc.w 0
0001DEB8 0000 0000                  		dc.l Nem_Explode	; explosion
0001DEBC B400                       		dc.w $B400
0001DEBE                            ; ---------------------------------------------------------------------------
0001DEBE                            ; Pattern load cues - game/time	over
0001DEBE                            ; ---------------------------------------------------------------------------
0001DEBE 0000                       PLC_GameOver:	dc.w 0
0001DEC0 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DEC4 ABC0                       		dc.w $ABC0
0001DEC6                            ; ---------------------------------------------------------------------------
0001DEC6                            ; Pattern load cues - Green Hill
0001DEC6                            ; ---------------------------------------------------------------------------
0001DEC6 000B                       PLC_GHZ:	dc.w $B
0001DEC8 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DECC 0000                       		dc.w 0
0001DECE 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DED2 39A0                       		dc.w $39A0
0001DED4 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DED8 6B00                       		dc.w $6B00
0001DEDA 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DEDE 7A00                       		dc.w $7A00
0001DEE0 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DEE4 8000                       		dc.w $8000
0001DEE6 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DEEA 8880                       		dc.w $8880
0001DEEC 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DEF0 8F60                       		dc.w $8F60
0001DEF2 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DEF6 9360                       		dc.w $9360
0001DEF8 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DEFC 9E00                       		dc.w $9E00
0001DEFE 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DF02 A360                       		dc.w $A360
0001DF04 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DF08 A460                       		dc.w $A460
0001DF0A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DF0E A660                       		dc.w $A660
0001DF10 0005                       PLC_GHZ2:	dc.w 5
0001DF12 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DF16 7000                       		dc.w $7000
0001DF18 0000 0000                  		dc.l Nem_Bridge		; bridge
0001DF1C 71C0                       		dc.w $71C0
0001DF1E 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001DF22 7300                       		dc.w $7300
0001DF24 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001DF28 7540                       		dc.w $7540
0001DF2A 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001DF2E A1E0                       		dc.w $A1E0
0001DF30 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001DF34 6980                       		dc.w $6980
0001DF36                            ; ---------------------------------------------------------------------------
0001DF36                            ; Pattern load cues - Labyrinth
0001DF36                            ; ---------------------------------------------------------------------------
0001DF36 000B                       PLC_LZ:		dc.w $B
0001DF38 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001DF3C 0000                       		dc.w 0
0001DF3E 0000 0000                  		dc.l Nem_LzBlock1	; block
0001DF42 3C00                       		dc.w $3C00
0001DF44 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001DF48 3E00                       		dc.w $3E00
0001DF4A 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001DF4E 4B20                       		dc.w $4B20
0001DF50 0000 0000                  		dc.l Nem_Water		; water	surface
0001DF54 6000                       		dc.w $6000
0001DF56 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001DF5A 6200                       		dc.w $6200
0001DF5C 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001DF60 6500                       		dc.w $6500
0001DF62 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001DF66 6900                       		dc.w $6900
0001DF68 0000 0000                  		dc.l Nem_LzBlock3	; block
0001DF6C 7780                       		dc.w $7780
0001DF6E 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001DF72 7880                       		dc.w $7880
0001DF74 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001DF78 7980                       		dc.w $7980
0001DF7A 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001DF7E 94C0                       		dc.w $94C0
0001DF80 000C                       PLC_LZ2:	dc.w $C
0001DF82 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001DF86 7BC0                       		dc.w $7BC0
0001DF88 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001DF8C 7CC0                       		dc.w $7CC0
0001DF8E 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001DF92 7EC0                       		dc.w $7EC0
0001DF94 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001DF98 5D20                       		dc.w $5D20
0001DF9A 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001DF9E 8800                       		dc.w $8800
0001DFA0 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001DFA4 89E0                       		dc.w $89E0
0001DFA6 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DFAA 8CE0                       		dc.w $8CE0
0001DFAC 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001DFB0 90C0                       		dc.w $90C0
0001DFB2 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DFB6 A1E0                       		dc.w $A1E0
0001DFB8 0000 0000                  		dc.l Nem_Cork		; cork block
0001DFBC A000                       		dc.w $A000
0001DFBE 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DFC2 A360                       		dc.w $A360
0001DFC4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DFC8 A460                       		dc.w $A460
0001DFCA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DFCE A660                       		dc.w $A660
0001DFD0                            ; ---------------------------------------------------------------------------
0001DFD0                            ; Pattern load cues - Marble
0001DFD0                            ; ---------------------------------------------------------------------------
0001DFD0 0009                       PLC_MZ:		dc.w 9
0001DFD2 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001DFD6 0000                       		dc.w 0
0001DFD8 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001DFDC 6000                       		dc.w $6000
0001DFDE 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DFE2 68A0                       		dc.w $68A0
0001DFE4 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DFE8 7000                       		dc.w $7000
0001DFEA 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001DFEE 71C0                       		dc.w $71C0
0001DFF0 0000 0000                  		dc.l Nem_Lava		; lava
0001DFF4 7500                       		dc.w $7500
0001DFF6 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DFFA 8880                       		dc.w $8880
0001DFFC 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E000 8F60                       		dc.w $8F60
0001E002 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E006 9700                       		dc.w $9700
0001E008 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E00C 9FE0                       		dc.w $9FE0
0001E00E 0004                       PLC_MZ2:	dc.w 4
0001E010 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001E014 A260                       		dc.w $A260
0001E016 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E01A A360                       		dc.w $A360
0001E01C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E020 A460                       		dc.w $A460
0001E022 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E026 A660                       		dc.w $A660
0001E028 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001E02C 5700                       		dc.w $5700
0001E02E                            ; ---------------------------------------------------------------------------
0001E02E                            ; Pattern load cues - Star Light
0001E02E                            ; ---------------------------------------------------------------------------
0001E02E 0008                       PLC_SLZ:	dc.w 8
0001E030 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E034 0000                       		dc.w 0
0001E036 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E03A 8000                       		dc.w $8000
0001E03C 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E040 8520                       		dc.w $8520
0001E042 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E046 9000                       		dc.w $9000
0001E048 0000 0000                  		dc.l Nem_SlzBlock	; block
0001E04C 9C00                       		dc.w $9C00
0001E04E 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001E052 A260                       		dc.w $A260
0001E054 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E058 A360                       		dc.w $A360
0001E05A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E05E A460                       		dc.w $A460
0001E060 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E064 A660                       		dc.w $A660
0001E066 0005                       PLC_SLZ2:	dc.w 5
0001E068 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E06C 6E80                       		dc.w $6E80
0001E06E 0000 0000                  		dc.l Nem_Fan		; fan
0001E072 7400                       		dc.w $7400
0001E074 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E078 7980                       		dc.w $7980
0001E07A 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E07E 7B80                       		dc.w $7B80
0001E080 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E084 9B00                       		dc.w $9B00
0001E086 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E08A 9E00                       		dc.w $9E00
0001E08C                            ; ---------------------------------------------------------------------------
0001E08C                            ; Pattern load cues - Spring Yard
0001E08C                            ; ---------------------------------------------------------------------------
0001E08C 0004                       PLC_SYZ:	dc.w 4
0001E08E 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E092 0000                       		dc.w 0
0001E094 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E098 8000                       		dc.w $8000
0001E09A 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E09E 8880                       		dc.w $8880
0001E0A0 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E0A4 8F60                       		dc.w $8F60
0001E0A6 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E0AA 9700                       		dc.w $9700
0001E0AC 0007                       PLC_SYZ2:	dc.w 7
0001E0AE 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E0B2 7000                       		dc.w $7000
0001E0B4 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E0B8 72C0                       		dc.w $72C0
0001E0BA 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E0BE 7740                       		dc.w $7740
0001E0C0 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E0C4 9FE0                       		dc.w $9FE0
0001E0C6 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E0CA A1E0                       		dc.w $A1E0
0001E0CC 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E0D0 A360                       		dc.w $A360
0001E0D2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E0D6 A460                       		dc.w $A460
0001E0D8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E0DC A660                       		dc.w $A660
0001E0DE                            ; ---------------------------------------------------------------------------
0001E0DE                            ; Pattern load cues - Scrap Brain
0001E0DE                            ; ---------------------------------------------------------------------------
0001E0DE 000B                       PLC_SBZ:	dc.w $B
0001E0E0 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E0E4 0000                       		dc.w 0
0001E0E6 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E0EA 5800                       		dc.w $5800
0001E0EC 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E0F0 5D00                       		dc.w $5D00
0001E0F2 0000 0000                  		dc.l Nem_Girder		; girder
0001E0F6 5E00                       		dc.w $5E00
0001E0F8 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E0FC 6040                       		dc.w $6040
0001E0FE 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E102 6880                       		dc.w $6880
0001E104 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E108 6900                       		dc.w $6900
0001E10A 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E10E 7220                       		dc.w $7220
0001E110 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E114 76A0                       		dc.w $76A0
0001E116 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E11A 7B20                       		dc.w $7B20
0001E11C 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E120 7EA0                       		dc.w $7EA0
0001E122 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E126 9860                       		dc.w $9860
0001E128 000C                       PLC_SBZ2:	dc.w $C
0001E12A 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E12E 5600                       		dc.w $5600
0001E130 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E134 8000                       		dc.w $8000
0001E136 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E13A 8520                       		dc.w $8520
0001E13C 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E140 8C00                       		dc.w $8C00
0001E142 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E146 8DE0                       		dc.w $8DE0
0001E148 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E14C 8FC0                       		dc.w $8FC0
0001E14E 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E152 9240                       		dc.w $9240
0001E154 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E158 7F20                       		dc.w $7F20
0001E15A 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E15E 9BE0                       		dc.w $9BE0
0001E160 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E164 A1E0                       		dc.w $A1E0
0001E166 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E16A A360                       		dc.w $A360
0001E16C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E170 A460                       		dc.w $A460
0001E172 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E176 A660                       		dc.w $A660
0001E178                            ; ---------------------------------------------------------------------------
0001E178                            ; Pattern load cues - title card
0001E178                            ; ---------------------------------------------------------------------------
0001E178 0000                       PLC_TitleCard:	dc.w 0
0001E17A 0000 0000                  		dc.l Nem_TitleCard
0001E17E B000                       		dc.w $B000
0001E180                            ; ---------------------------------------------------------------------------
0001E180                            ; Pattern load cues - act 3 boss
0001E180                            ; ---------------------------------------------------------------------------
0001E180 0005                       PLC_Boss:	dc.w 5
0001E182 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E186 8000                       		dc.w $8000
0001E188 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E18C 8D80                       		dc.w $8D80
0001E18E 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E192 93A0                       		dc.w $93A0
0001E194 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E198 A300                       		dc.w $A300
0001E19A 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E19E A300                       		dc.w $A300
0001E1A0 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E1A4 A540                       		dc.w $A540
0001E1A6                            ; ---------------------------------------------------------------------------
0001E1A6                            ; Pattern load cues - act 1/2 signpost
0001E1A6                            ; ---------------------------------------------------------------------------
0001E1A6 0002                       PLC_Signpost:	dc.w 2
0001E1A8 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E1AC D000                       		dc.w $D000
0001E1AE 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E1B2 96C0                       		dc.w $96C0
0001E1B4 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E1B8 8C40                       		dc.w $8C40
0001E1BA                            ; ---------------------------------------------------------------------------
0001E1BA                            ; Pattern load cues - beta special stage warp effect
0001E1BA                            ; ---------------------------------------------------------------------------
0001E1BA 0000                       PLC_Warp:	dc.w 0
0001E1BC 0000 0000                  		dc.l Nem_Warp
0001E1C0 A820                       		dc.w $A820
0001E1C2                            ; ---------------------------------------------------------------------------
0001E1C2                            ; Pattern load cues - special stage
0001E1C2                            ; ---------------------------------------------------------------------------
0001E1C2 0010                       PLC_SpeStage:	dc.w $10
0001E1C4 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E1C8 0000                       		dc.w 0
0001E1CA 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E1CE 0A20                       		dc.w $A20
0001E1D0 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E1D4 2840                       		dc.w $2840
0001E1D6 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E1DA 4760                       		dc.w $4760
0001E1DC 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E1E0 4A20                       		dc.w $4A20
0001E1E2 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E1E6 4C60                       		dc.w $4C60
0001E1E8 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E1EC 5E00                       		dc.w $5E00
0001E1EE 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E1F2 6E00                       		dc.w $6E00
0001E1F4 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E1F8 7E00                       		dc.w $7E00
0001E1FA 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E1FE 8E00                       		dc.w $8E00
0001E200 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E204 9E00                       		dc.w $9E00
0001E206 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E20A AE00                       		dc.w $AE00
0001E20C 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E210 BE00                       		dc.w $BE00
0001E212 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E216 EE00                       		dc.w $EE00
0001E218 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E21C F2E0                       		dc.w $F2E0
0001E21E 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E222 F400                       		dc.w $F400
0001E224 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E228 F520                       		dc.w $F520
0001E22A 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E22E F2E0                       		dc.w $F2E0
0001E230 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E234 F400                       		dc.w $F400
0001E236 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E23A F520                       		dc.w $F520
0001E23C                            ; ---------------------------------------------------------------------------
0001E23C                            ; Pattern load cues - GHZ animals
0001E23C                            ; ---------------------------------------------------------------------------
0001E23C 0001                       PLC_GHZAnimals:	dc.w 1
0001E23E 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E242 B000                       		dc.w $B000
0001E244 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E248 B240                       		dc.w $B240
0001E24A                            ; ---------------------------------------------------------------------------
0001E24A                            ; Pattern load cues - LZ animals
0001E24A                            ; ---------------------------------------------------------------------------
0001E24A 0001                       PLC_LZAnimals:	dc.w 1
0001E24C 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E250 B000                       		dc.w $B000
0001E252 0000 0000                  		dc.l Nem_Seal		; seal
0001E256 B240                       		dc.w $B240
0001E258                            ; ---------------------------------------------------------------------------
0001E258                            ; Pattern load cues - MZ animals
0001E258                            ; ---------------------------------------------------------------------------
0001E258 0001                       PLC_MZAnimals:	dc.w 1
0001E25A 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E25E B000                       		dc.w $B000
0001E260 0000 0000                  		dc.l Nem_Seal		; seal
0001E264 B240                       		dc.w $B240
0001E266                            ; ---------------------------------------------------------------------------
0001E266                            ; Pattern load cues - SLZ animals
0001E266                            ; ---------------------------------------------------------------------------
0001E266 0001                       PLC_SLZAnimals:	dc.w 1
0001E268 0000 0000                  		dc.l Nem_Pig		; pig
0001E26C B000                       		dc.w $B000
0001E26E 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E272 B240                       		dc.w $B240
0001E274                            ; ---------------------------------------------------------------------------
0001E274                            ; Pattern load cues - SYZ animals
0001E274                            ; ---------------------------------------------------------------------------
0001E274 0001                       PLC_SYZAnimals:	dc.w 1
0001E276 0000 0000                  		dc.l Nem_Pig		; pig
0001E27A B000                       		dc.w $B000
0001E27C 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E280 B240                       		dc.w $B240
0001E282                            ; ---------------------------------------------------------------------------
0001E282                            ; Pattern load cues - SBZ animals
0001E282                            ; ---------------------------------------------------------------------------
0001E282 0001                       PLC_SBZAnimals:	dc.w 1
0001E284 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E288 B000                       		dc.w $B000
0001E28A 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E28E B240                       		dc.w $B240
0001E290                            ; ---------------------------------------------------------------------------
0001E290                            ; Pattern load cues - special stage results screen
0001E290                            ; ---------------------------------------------------------------------------
0001E290 0001                       PLC_SpeStResult:dc.w 1
0001E292 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E296 A820                       		dc.w $A820
0001E298 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E29C AA20                       		dc.w $AA20
0001E29E                            ; ---------------------------------------------------------------------------
0001E29E                            ; Pattern load cues - ending sequence
0001E29E                            ; ---------------------------------------------------------------------------
0001E29E 000E                       PLC_Ending:	dc.w $E
0001E2A0 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E2A4 0000                       		dc.w 0
0001E2A6 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E2AA 39A0                       		dc.w $39A0
0001E2AC 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E2B0 6B00                       		dc.w $6B00
0001E2B2 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E2B6 7400                       		dc.w $7400
0001E2B8 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E2BC 78A0                       		dc.w $78A0
0001E2BE 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E2C2 7C20                       		dc.w $7C20
0001E2C4 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E2C8 A480                       		dc.w $A480
0001E2CA 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E2CE AA60                       		dc.w $AA60
0001E2D0 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E2D4 ACA0                       		dc.w $ACA0
0001E2D6 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E2DA AE60                       		dc.w $AE60
0001E2DC 0000 0000                  		dc.l Nem_Seal		; seal
0001E2E0 B0A0                       		dc.w $B0A0
0001E2E2 0000 0000                  		dc.l Nem_Pig		; pig
0001E2E6 B260                       		dc.w $B260
0001E2E8 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E2EC B4A0                       		dc.w $B4A0
0001E2EE 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E2F2 B660                       		dc.w $B660
0001E2F4 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E2F8 B8A0                       		dc.w $B8A0
0001E2FA                            ; ---------------------------------------------------------------------------
0001E2FA                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E2FA                            ; ---------------------------------------------------------------------------
0001E2FA 0002                       PLC_TryAgain:	dc.w 2
0001E2FC 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E300 78A0                       		dc.w $78A0
0001E302 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E306 7C20                       		dc.w $7C20
0001E308 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E30C B400                       		dc.w $B400
0001E30E                            ; ---------------------------------------------------------------------------
0001E30E                            ; Pattern load cues - Eggman on SBZ 2
0001E30E                            ; ---------------------------------------------------------------------------
0001E30E 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E310 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E314 A300                       		dc.w $A300
0001E316 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E31A 8000                       		dc.w $8000
0001E31C 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E320 9400                       		dc.w $9400
0001E322                            ; ---------------------------------------------------------------------------
0001E322                            ; Pattern load cues - final boss
0001E322                            ; ---------------------------------------------------------------------------
0001E322 0004                       PLC_FZBoss:	dc.w 4
0001E324 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E328 7400                       		dc.w $7400
0001E32A 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E32E 6000                       		dc.w $6000
0001E330 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E334 8000                       		dc.w $8000
0001E336 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E33A 8E00                       		dc.w $8E00
0001E33C 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E340 A540                       		dc.w $A540
0001E342                            		even
0001E342                            		even
0001E342                            
0001E342                            		incbin	misc\padding.bin
0001E430                            		even
0001E430                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E880                            		even
0001E880                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E912                            		even
0001E912                            Nem_Gomer:	incbin	artnem\gomer.bin
0001EA54                            		even
0001EA54                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001EAA2                            		even
0001EAA2                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001EBB6                            		even
0001EBB6                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001FA80                            		even
0001FA80                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023B86                            		even
00023B86                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00023BBA                            		even
00023BBA                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00023C78                            		even
00023C78                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00024120                            		even
00024120                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
0002417E                            		even
0002417E                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00024D84                            		even
00024D84                            ; ---------------------------------------------------------------------------
00024D84                            ; Sprite mappings - Sonic
00024D84                            ; ---------------------------------------------------------------------------
00024D84                            Map_Sonic:
00024D84                            	include "_maps\Sonic.asm"
00024D84                            Map_6d2d:
00024D84 0000                       Map_6d2d_0: 	dc.w Map_6d2d_B8-Map_6d2d
00024D86 0000                       Map_6d2d_2: 	dc.w Map_6d2d_B9-Map_6d2d
00024D88 0000                       Map_6d2d_4: 	dc.w Map_6d2d_C4-Map_6d2d
00024D8A 0000                       Map_6d2d_6: 	dc.w Map_6d2d_D4-Map_6d2d
00024D8C 0000                       Map_6d2d_8: 	dc.w Map_6d2d_E4-Map_6d2d
00024D8E 0000                       Map_6d2d_A: 	dc.w Map_6d2d_F4-Map_6d2d
00024D90 0000                       Map_6d2d_C: 	dc.w Map_6d2d_104-Map_6d2d
00024D92 0000                       Map_6d2d_E: 	dc.w Map_6d2d_119-Map_6d2d
00024D94 0000                       Map_6d2d_10: 	dc.w Map_6d2d_124-Map_6d2d
00024D96 0000                       Map_6d2d_12: 	dc.w Map_6d2d_12F-Map_6d2d
00024D98 0000                       Map_6d2d_14: 	dc.w Map_6d2d_144-Map_6d2d
00024D9A 0000                       Map_6d2d_16: 	dc.w Map_6d2d_14F-Map_6d2d
00024D9C 0000                       Map_6d2d_18: 	dc.w Map_6d2d_15F-Map_6d2d
00024D9E 0000                       Map_6d2d_1A: 	dc.w Map_6d2d_179-Map_6d2d
00024DA0 0000                       Map_6d2d_1C: 	dc.w Map_6d2d_198-Map_6d2d
00024DA2 0000                       Map_6d2d_1E: 	dc.w Map_6d2d_1AD-Map_6d2d
00024DA4 0000                       Map_6d2d_20: 	dc.w Map_6d2d_1C7-Map_6d2d
00024DA6 0000                       Map_6d2d_22: 	dc.w Map_6d2d_1DC-Map_6d2d
00024DA8 0000                       Map_6d2d_24: 	dc.w Map_6d2d_1F6-Map_6d2d
00024DAA 0000                       Map_6d2d_26: 	dc.w Map_6d2d_20B-Map_6d2d
00024DAC 0000                       Map_6d2d_28: 	dc.w Map_6d2d_216-Map_6d2d
00024DAE 0000                       Map_6d2d_2A: 	dc.w Map_6d2d_221-Map_6d2d
00024DB0 0000                       Map_6d2d_2C: 	dc.w Map_6d2d_236-Map_6d2d
00024DB2 0000                       Map_6d2d_2E: 	dc.w Map_6d2d_241-Map_6d2d
00024DB4 0000                       Map_6d2d_30: 	dc.w Map_6d2d_251-Map_6d2d
00024DB6 0000                       Map_6d2d_32: 	dc.w Map_6d2d_270-Map_6d2d
00024DB8 0000                       Map_6d2d_34: 	dc.w Map_6d2d_28F-Map_6d2d
00024DBA 0000                       Map_6d2d_36: 	dc.w Map_6d2d_2A4-Map_6d2d
00024DBC 0000                       Map_6d2d_38: 	dc.w Map_6d2d_2BE-Map_6d2d
00024DBE 0000                       Map_6d2d_3A: 	dc.w Map_6d2d_2D3-Map_6d2d
00024DC0 0000                       Map_6d2d_3C: 	dc.w Map_6d2d_2ED-Map_6d2d
00024DC2 0000                       Map_6d2d_3E: 	dc.w Map_6d2d_2F8-Map_6d2d
00024DC4 0000                       Map_6d2d_40: 	dc.w Map_6d2d_303-Map_6d2d
00024DC6 0000                       Map_6d2d_42: 	dc.w Map_6d2d_30E-Map_6d2d
00024DC8 0000                       Map_6d2d_44: 	dc.w Map_6d2d_319-Map_6d2d
00024DCA 0000                       Map_6d2d_46: 	dc.w Map_6d2d_32E-Map_6d2d
00024DCC 0000                       Map_6d2d_48: 	dc.w Map_6d2d_33E-Map_6d2d
00024DCE 0000                       Map_6d2d_4A: 	dc.w Map_6d2d_353-Map_6d2d
00024DD0 0000                       Map_6d2d_4C: 	dc.w Map_6d2d_363-Map_6d2d
00024DD2 0000                       Map_6d2d_4E: 	dc.w Map_6d2d_36E-Map_6d2d
00024DD4 0000                       Map_6d2d_50: 	dc.w Map_6d2d_379-Map_6d2d
00024DD6 0000                       Map_6d2d_52: 	dc.w Map_6d2d_384-Map_6d2d
00024DD8 0000                       Map_6d2d_54: 	dc.w Map_6d2d_38F-Map_6d2d
00024DDA 0000                       Map_6d2d_56: 	dc.w Map_6d2d_3A4-Map_6d2d
00024DDC 0000                       Map_6d2d_58: 	dc.w Map_6d2d_3AF-Map_6d2d
00024DDE 0000                       Map_6d2d_5A: 	dc.w Map_6d2d_3C4-Map_6d2d
00024DE0 0000                       Map_6d2d_5C: 	dc.w Map_6d2d_3CF-Map_6d2d
00024DE2 0000                       Map_6d2d_5E: 	dc.w Map_6d2d_3D5-Map_6d2d
00024DE4 0000                       Map_6d2d_60: 	dc.w Map_6d2d_3DB-Map_6d2d
00024DE6 0000                       Map_6d2d_62: 	dc.w Map_6d2d_3E1-Map_6d2d
00024DE8 0000                       Map_6d2d_64: 	dc.w Map_6d2d_3E7-Map_6d2d
00024DEA 0000                       Map_6d2d_66: 	dc.w Map_6d2d_3ED-Map_6d2d
00024DEC 0000                       Map_6d2d_68: 	dc.w Map_6d2d_3F8-Map_6d2d
00024DEE 0000                       Map_6d2d_6A: 	dc.w Map_6d2d_3FE-Map_6d2d
00024DF0 0000                       Map_6d2d_6C: 	dc.w Map_6d2d_409-Map_6d2d
00024DF2 0000                       Map_6d2d_6E: 	dc.w Map_6d2d_40F-Map_6d2d
00024DF4 0000                       Map_6d2d_70: 	dc.w Map_6d2d_41A-Map_6d2d
00024DF6 0000                       Map_6d2d_72: 	dc.w Map_6d2d_42F-Map_6d2d
00024DF8 0000                       Map_6d2d_74: 	dc.w Map_6d2d_44E-Map_6d2d
00024DFA 0000                       Map_6d2d_76: 	dc.w Map_6d2d_459-Map_6d2d
00024DFC 0000                       Map_6d2d_78: 	dc.w Map_6d2d_464-Map_6d2d
00024DFE 0000                       Map_6d2d_7A: 	dc.w Map_6d2d_479-Map_6d2d
00024E00 0000                       Map_6d2d_7C: 	dc.w Map_6d2d_484-Map_6d2d
00024E02 0000                       Map_6d2d_7E: 	dc.w Map_6d2d_494-Map_6d2d
00024E04 0000                       Map_6d2d_80: 	dc.w Map_6d2d_4A9-Map_6d2d
00024E06 0000                       Map_6d2d_82: 	dc.w Map_6d2d_4B9-Map_6d2d
00024E08 0000                       Map_6d2d_84: 	dc.w Map_6d2d_4CE-Map_6d2d
00024E0A 0000                       Map_6d2d_86: 	dc.w Map_6d2d_4E3-Map_6d2d
00024E0C 0000                       Map_6d2d_88: 	dc.w Map_6d2d_4FD-Map_6d2d
00024E0E 0000                       Map_6d2d_8A: 	dc.w Map_6d2d_517-Map_6d2d
00024E10 0000                       Map_6d2d_8C: 	dc.w Map_6d2d_522-Map_6d2d
00024E12 0000                       Map_6d2d_8E: 	dc.w Map_6d2d_532-Map_6d2d
00024E14 0000                       Map_6d2d_90: 	dc.w Map_6d2d_53D-Map_6d2d
00024E16 0000                       Map_6d2d_92: 	dc.w Map_6d2d_54D-Map_6d2d
00024E18 0000                       Map_6d2d_94: 	dc.w Map_6d2d_558-Map_6d2d
00024E1A 0000                       Map_6d2d_96: 	dc.w Map_6d2d_568-Map_6d2d
00024E1C 0000                       Map_6d2d_98: 	dc.w Map_6d2d_578-Map_6d2d
00024E1E 0000                       Map_6d2d_9A: 	dc.w Map_6d2d_592-Map_6d2d
00024E20 0000                       Map_6d2d_9C: 	dc.w Map_6d2d_5AC-Map_6d2d
00024E22 0000                       Map_6d2d_9E: 	dc.w Map_6d2d_5B7-Map_6d2d
00024E24 0000                       Map_6d2d_A0: 	dc.w Map_6d2d_5C7-Map_6d2d
00024E26 0000                       Map_6d2d_A2: 	dc.w Map_6d2d_5CD-Map_6d2d
00024E28 0000                       Map_6d2d_A4: 	dc.w Map_6d2d_5D3-Map_6d2d
00024E2A 0000                       Map_6d2d_A6: 	dc.w Map_6d2d_5D9-Map_6d2d
00024E2C 0000                       Map_6d2d_A8: 	dc.w Map_6d2d_5EE-Map_6d2d
00024E2E 0000                       Map_6d2d_AA: 	dc.w Map_6d2d_5FE-Map_6d2d
00024E30 0000                       Map_6d2d_AC: 	dc.w Map_6d2d_60E-Map_6d2d
00024E32 0000                       Map_6d2d_AE: 	dc.w Map_6d2d_61E-Map_6d2d
00024E34 0000                       Map_6d2d_B0: 	dc.w Map_6d2d_629-Map_6d2d
00024E36 0000                       Map_6d2d_B2: 	dc.w Map_6d2d_634-Map_6d2d
00024E38 0000                       Map_6d2d_B4: 	dc.w Map_6d2d_644-Map_6d2d
00024E3A 0000                       Map_6d2d_B6: 	dc.w Map_6d2d_64F-Map_6d2d
00024E3C 00                         Map_6d2d_B8: 	dc.b $0
00024E3D 02                         Map_6d2d_B9: 	dc.b $2
00024E3E ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00024E43 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00024E48 03                         Map_6d2d_C4: 	dc.b $3
00024E49 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024E4E FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024E53 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024E58 03                         Map_6d2d_D4: 	dc.b $3
00024E59 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024E5E FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024E63 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024E68 03                         Map_6d2d_E4: 	dc.b $3
00024E69 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024E6E FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024E73 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024E78 03                         Map_6d2d_F4: 	dc.b $3
00024E79 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00024E7E 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00024E83 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024E88 04                         Map_6d2d_104: 	dc.b $4
00024E89 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00024E8E FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00024E93 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00024E98 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00024E9D 02                         Map_6d2d_119: 	dc.b $2
00024E9E EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00024EA3 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00024EA8 02                         Map_6d2d_124: 	dc.b $2
00024EA9 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00024EAE FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00024EB3 04                         Map_6d2d_12F: 	dc.b $4
00024EB4 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00024EB9 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00024EBE FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00024EC3 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00024EC8 02                         Map_6d2d_144: 	dc.b $2
00024EC9 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
00024ECE EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00024ED3 03                         Map_6d2d_14F: 	dc.b $3
00024ED4 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00024ED9 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00024EDE 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00024EE3 05                         Map_6d2d_15F: 	dc.b $5
00024EE4 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024EE9 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00024EEE FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00024EF3 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00024EF8 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00024EFD 06                         Map_6d2d_179: 	dc.b $6
00024EFE EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024F03 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024F08 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00024F0D 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00024F12 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00024F17 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00024F1C 04                         Map_6d2d_198: 	dc.b $4
00024F1D ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00024F22 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00024F27 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00024F2C 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00024F31 05                         Map_6d2d_1AD: 	dc.b $5
00024F32 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024F37 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00024F3C FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00024F41 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00024F46 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00024F4B 04                         Map_6d2d_1C7: 	dc.b $4
00024F4C EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024F51 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024F56 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00024F5B 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00024F60 05                         Map_6d2d_1DC: 	dc.b $5
00024F61 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00024F66 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00024F6B FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00024F70 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00024F75 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00024F7A 04                         Map_6d2d_1F6: 	dc.b $4
00024F7B F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00024F80 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00024F85 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00024F8A 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00024F8F 02                         Map_6d2d_20B: 	dc.b $2
00024F90 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00024F95 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00024F9A 02                         Map_6d2d_216: 	dc.b $2
00024F9B F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00024FA0 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00024FA5 04                         Map_6d2d_221: 	dc.b $4
00024FA6 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
00024FAB EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00024FB0 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00024FB5 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00024FBA 02                         Map_6d2d_236: 	dc.b $2
00024FBB F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00024FC0 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00024FC5 03                         Map_6d2d_241: 	dc.b $3
00024FC6 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00024FCB EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00024FD0 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00024FD5 06                         Map_6d2d_251: 	dc.b $6
00024FD6 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00024FDB ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00024FE0 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00024FE5 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00024FEA 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00024FEF FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00024FF4 06                         Map_6d2d_270: 	dc.b $6
00024FF5 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00024FFA E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00024FFF EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00025004 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00025009 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
0002500E 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00025013 04                         Map_6d2d_28F: 	dc.b $4
00025014 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00025019 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
0002501E EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00025023 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00025028 05                         Map_6d2d_2A4: 	dc.b $5
00025029 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
0002502E ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00025033 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00025038 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
0002503D 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00025042 04                         Map_6d2d_2BE: 	dc.b $4
00025043 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00025048 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
0002504D EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00025052 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00025057 05                         Map_6d2d_2D3: 	dc.b $5
00025058 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
0002505D EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00025062 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00025067 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
0002506C 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00025071 02                         Map_6d2d_2ED: 	dc.b $2
00025072 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025077 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002507C 02                         Map_6d2d_2F8: 	dc.b $2
0002507D EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025082 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00025087 02                         Map_6d2d_303: 	dc.b $2
00025088 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
0002508D FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00025092 02                         Map_6d2d_30E: 	dc.b $2
00025093 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025098 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002509D 04                         Map_6d2d_319: 	dc.b $4
0002509E EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000250A3 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000250A8 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000250AD FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
000250B2 03                         Map_6d2d_32E: 	dc.b $3
000250B3 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000250B8 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000250BD FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000250C2 04                         Map_6d2d_33E: 	dc.b $4
000250C3 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000250C8 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000250CD FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000250D2 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
000250D7 03                         Map_6d2d_353: 	dc.b $3
000250D8 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000250DD EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000250E2 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000250E7 02                         Map_6d2d_363: 	dc.b $2
000250E8 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000250ED F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000250F2 02                         Map_6d2d_36E: 	dc.b $2
000250F3 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000250F8 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000250FD 02                         Map_6d2d_379: 	dc.b $2
000250FE F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025103 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025108 02                         Map_6d2d_384: 	dc.b $2
00025109 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002510E F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025113 04                         Map_6d2d_38F: 	dc.b $4
00025114 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025119 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002511E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025123 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025128 02                         Map_6d2d_3A4: 	dc.b $2
00025129 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002512E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025133 04                         Map_6d2d_3AF: 	dc.b $4
00025134 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025139 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002513E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025143 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025148 02                         Map_6d2d_3C4: 	dc.b $2
00025149 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002514E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025153 01                         Map_6d2d_3CF: 	dc.b $1
00025154 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025159 01                         Map_6d2d_3D5: 	dc.b $1
0002515A F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002515F 01                         Map_6d2d_3DB: 	dc.b $1
00025160 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025165 01                         Map_6d2d_3E1: 	dc.b $1
00025166 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002516B 01                         Map_6d2d_3E7: 	dc.b $1
0002516C F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025171 02                         Map_6d2d_3ED: 	dc.b $2
00025172 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00025177 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
0002517C 01                         Map_6d2d_3F8: 	dc.b $1
0002517D F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025182 02                         Map_6d2d_3FE: 	dc.b $2
00025183 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00025188 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
0002518D 01                         Map_6d2d_409: 	dc.b $1
0002518E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025193 02                         Map_6d2d_40F: 	dc.b $2
00025194 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00025199 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
0002519E 04                         Map_6d2d_41A: 	dc.b $4
0002519F ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000251A4 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
000251A9 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
000251AE 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
000251B3 06                         Map_6d2d_42F: 	dc.b $6
000251B4 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
000251B9 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
000251BE 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
000251C3 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
000251C8 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
000251CD F400 0011 04               	dc.b $F4, $0, $0, $11, $4
000251D2 02                         Map_6d2d_44E: 	dc.b $2
000251D3 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
000251D8 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
000251DD 02                         Map_6d2d_459: 	dc.b $2
000251DE 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
000251E3 EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
000251E8 04                         Map_6d2d_464: 	dc.b $4
000251E9 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
000251EE F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
000251F3 0408 000C 03               	dc.b $4, $8, $0, $C, $3
000251F8 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
000251FD 02                         Map_6d2d_479: 	dc.b $2
000251FE F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00025203 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00025208 03                         Map_6d2d_484: 	dc.b $3
00025209 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
0002520E FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
00025213 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00025218 04                         Map_6d2d_494: 	dc.b $4
00025219 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002521E F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00025223 0408 000C 02               	dc.b $4, $8, $0, $C, $2
00025228 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
0002522D 03                         Map_6d2d_4A9: 	dc.b $3
0002522E E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
00025233 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
00025238 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
0002523D 04                         Map_6d2d_4B9: 	dc.b $4
0002523E F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00025243 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00025248 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
0002524D F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00025252 04                         Map_6d2d_4CE: 	dc.b $4
00025253 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00025258 0005 000C 08               	dc.b $0, $5, $0, $C, $8
0002525D F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00025262 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00025267 05                         Map_6d2d_4E3: 	dc.b $5
00025268 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
0002526D F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
00025272 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00025277 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
0002527C 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00025281 05                         Map_6d2d_4FD: 	dc.b $5
00025282 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00025287 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
0002528C 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00025291 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00025296 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
0002529B 02                         Map_6d2d_517: 	dc.b $2
0002529C ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000252A1 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000252A6 03                         Map_6d2d_522: 	dc.b $3
000252A7 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000252AC 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000252B1 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000252B6 02                         Map_6d2d_532: 	dc.b $2
000252B7 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000252BC 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000252C1 03                         Map_6d2d_53D: 	dc.b $3
000252C2 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000252C7 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000252CC 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000252D1 02                         Map_6d2d_54D: 	dc.b $2
000252D2 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000252D7 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
000252DC 03                         Map_6d2d_558: 	dc.b $3
000252DD EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000252E2 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
000252E7 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
000252EC 03                         Map_6d2d_568: 	dc.b $3
000252ED E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000252F2 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000252F7 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
000252FC 05                         Map_6d2d_578: 	dc.b $5
000252FD E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025302 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025307 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
0002530C 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025311 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025316 05                         Map_6d2d_592: 	dc.b $5
00025317 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002531C E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025321 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025326 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
0002532B 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025330 02                         Map_6d2d_5AC: 	dc.b $2
00025331 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025336 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
0002533B 03                         Map_6d2d_5B7: 	dc.b $3
0002533C EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025341 F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00025346 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
0002534B 01                         Map_6d2d_5C7: 	dc.b $1
0002534C F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
00025351 01                         Map_6d2d_5CD: 	dc.b $1
00025352 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
00025357 01                         Map_6d2d_5D3: 	dc.b $1
00025358 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
0002535D 04                         Map_6d2d_5D9: 	dc.b $4
0002535E F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
00025363 F705 0808 04               	dc.b $F7, $5, $8, $8, $4
00025368 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
0002536D 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
00025372 03                         Map_6d2d_5EE: 	dc.b $3
00025373 F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
00025378 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
0002537D 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
00025382 03                         Map_6d2d_5FE: 	dc.b $3
00025383 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
00025388 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0002538D 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
00025392 03                         Map_6d2d_60E: 	dc.b $3
00025393 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00025398 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
0002539D 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
000253A2 02                         Map_6d2d_61E: 	dc.b $2
000253A3 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000253A8 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000253AD 02                         Map_6d2d_629: 	dc.b $2
000253AE F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000253B3 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000253B8 03                         Map_6d2d_634: 	dc.b $3
000253B9 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
000253BE 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
000253C3 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
000253C8 02                         Map_6d2d_644: 	dc.b $2
000253C9 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
000253CE EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
000253D3 04                         Map_6d2d_64F: 	dc.b $4
000253D4 ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
000253D9 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
000253DE F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
000253E3 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
000253E8                            	even
000253E8                            	even
000253E8                            
000253E8                            ; ---------------------------------------------------------------------------
000253E8                            ; Uncompressed graphics	loading	array for Sonic
000253E8                            ; ---------------------------------------------------------------------------
000253E8                            SonicDynPLC:
000253E8                            	include "_inc\Sonic dynamic pattern load cues.asm"
000253E8                            DPLC_2d5b:
000253E8 0000                       DPLC_2d5b_0: 	dc.w DPLC_2d5b_B8-DPLC_2d5b
000253EA 0000                       DPLC_2d5b_2: 	dc.w DPLC_2d5b_B9-DPLC_2d5b
000253EC 0000                       DPLC_2d5b_4: 	dc.w DPLC_2d5b_BE-DPLC_2d5b
000253EE 0000                       DPLC_2d5b_6: 	dc.w DPLC_2d5b_C5-DPLC_2d5b
000253F0 0000                       DPLC_2d5b_8: 	dc.w DPLC_2d5b_CC-DPLC_2d5b
000253F2 0000                       DPLC_2d5b_A: 	dc.w DPLC_2d5b_D3-DPLC_2d5b
000253F4 0000                       DPLC_2d5b_C: 	dc.w DPLC_2d5b_DA-DPLC_2d5b
000253F6 0000                       DPLC_2d5b_E: 	dc.w DPLC_2d5b_E3-DPLC_2d5b
000253F8 0000                       DPLC_2d5b_10: 	dc.w DPLC_2d5b_E8-DPLC_2d5b
000253FA 0000                       DPLC_2d5b_12: 	dc.w DPLC_2d5b_ED-DPLC_2d5b
000253FC 0000                       DPLC_2d5b_14: 	dc.w DPLC_2d5b_F6-DPLC_2d5b
000253FE 0000                       DPLC_2d5b_16: 	dc.w DPLC_2d5b_FB-DPLC_2d5b
00025400 0000                       DPLC_2d5b_18: 	dc.w DPLC_2d5b_102-DPLC_2d5b
00025402 0000                       DPLC_2d5b_1A: 	dc.w DPLC_2d5b_10D-DPLC_2d5b
00025404 0000                       DPLC_2d5b_1C: 	dc.w DPLC_2d5b_11A-DPLC_2d5b
00025406 0000                       DPLC_2d5b_1E: 	dc.w DPLC_2d5b_123-DPLC_2d5b
00025408 0000                       DPLC_2d5b_20: 	dc.w DPLC_2d5b_12E-DPLC_2d5b
0002540A 0000                       DPLC_2d5b_22: 	dc.w DPLC_2d5b_137-DPLC_2d5b
0002540C 0000                       DPLC_2d5b_24: 	dc.w DPLC_2d5b_142-DPLC_2d5b
0002540E 0000                       DPLC_2d5b_26: 	dc.w DPLC_2d5b_14B-DPLC_2d5b
00025410 0000                       DPLC_2d5b_28: 	dc.w DPLC_2d5b_150-DPLC_2d5b
00025412 0000                       DPLC_2d5b_2A: 	dc.w DPLC_2d5b_155-DPLC_2d5b
00025414 0000                       DPLC_2d5b_2C: 	dc.w DPLC_2d5b_15E-DPLC_2d5b
00025416 0000                       DPLC_2d5b_2E: 	dc.w DPLC_2d5b_163-DPLC_2d5b
00025418 0000                       DPLC_2d5b_30: 	dc.w DPLC_2d5b_16A-DPLC_2d5b
0002541A 0000                       DPLC_2d5b_32: 	dc.w DPLC_2d5b_177-DPLC_2d5b
0002541C 0000                       DPLC_2d5b_34: 	dc.w DPLC_2d5b_184-DPLC_2d5b
0002541E 0000                       DPLC_2d5b_36: 	dc.w DPLC_2d5b_18D-DPLC_2d5b
00025420 0000                       DPLC_2d5b_38: 	dc.w DPLC_2d5b_198-DPLC_2d5b
00025422 0000                       DPLC_2d5b_3A: 	dc.w DPLC_2d5b_1A1-DPLC_2d5b
00025424 0000                       DPLC_2d5b_3C: 	dc.w DPLC_2d5b_1AC-DPLC_2d5b
00025426 0000                       DPLC_2d5b_3E: 	dc.w DPLC_2d5b_1B1-DPLC_2d5b
00025428 0000                       DPLC_2d5b_40: 	dc.w DPLC_2d5b_1B6-DPLC_2d5b
0002542A 0000                       DPLC_2d5b_42: 	dc.w DPLC_2d5b_1BB-DPLC_2d5b
0002542C 0000                       DPLC_2d5b_44: 	dc.w DPLC_2d5b_1C0-DPLC_2d5b
0002542E 0000                       DPLC_2d5b_46: 	dc.w DPLC_2d5b_1C9-DPLC_2d5b
00025430 0000                       DPLC_2d5b_48: 	dc.w DPLC_2d5b_1D0-DPLC_2d5b
00025432 0000                       DPLC_2d5b_4A: 	dc.w DPLC_2d5b_1D9-DPLC_2d5b
00025434 0000                       DPLC_2d5b_4C: 	dc.w DPLC_2d5b_1E0-DPLC_2d5b
00025436 0000                       DPLC_2d5b_4E: 	dc.w DPLC_2d5b_1E5-DPLC_2d5b
00025438 0000                       DPLC_2d5b_50: 	dc.w DPLC_2d5b_1EA-DPLC_2d5b
0002543A 0000                       DPLC_2d5b_52: 	dc.w DPLC_2d5b_1EF-DPLC_2d5b
0002543C 0000                       DPLC_2d5b_54: 	dc.w DPLC_2d5b_1F4-DPLC_2d5b
0002543E 0000                       DPLC_2d5b_56: 	dc.w DPLC_2d5b_1FD-DPLC_2d5b
00025440 0000                       DPLC_2d5b_58: 	dc.w DPLC_2d5b_202-DPLC_2d5b
00025442 0000                       DPLC_2d5b_5A: 	dc.w DPLC_2d5b_20B-DPLC_2d5b
00025444 0000                       DPLC_2d5b_5C: 	dc.w DPLC_2d5b_210-DPLC_2d5b
00025446 0000                       DPLC_2d5b_5E: 	dc.w DPLC_2d5b_213-DPLC_2d5b
00025448 0000                       DPLC_2d5b_60: 	dc.w DPLC_2d5b_216-DPLC_2d5b
0002544A 0000                       DPLC_2d5b_62: 	dc.w DPLC_2d5b_219-DPLC_2d5b
0002544C 0000                       DPLC_2d5b_64: 	dc.w DPLC_2d5b_21C-DPLC_2d5b
0002544E 0000                       DPLC_2d5b_66: 	dc.w DPLC_2d5b_21F-DPLC_2d5b
00025450 0000                       DPLC_2d5b_68: 	dc.w DPLC_2d5b_224-DPLC_2d5b
00025452 0000                       DPLC_2d5b_6A: 	dc.w DPLC_2d5b_227-DPLC_2d5b
00025454 0000                       DPLC_2d5b_6C: 	dc.w DPLC_2d5b_22C-DPLC_2d5b
00025456 0000                       DPLC_2d5b_6E: 	dc.w DPLC_2d5b_22F-DPLC_2d5b
00025458 0000                       DPLC_2d5b_70: 	dc.w DPLC_2d5b_234-DPLC_2d5b
0002545A 0000                       DPLC_2d5b_72: 	dc.w DPLC_2d5b_23D-DPLC_2d5b
0002545C 0000                       DPLC_2d5b_74: 	dc.w DPLC_2d5b_242-DPLC_2d5b
0002545E 0000                       DPLC_2d5b_76: 	dc.w DPLC_2d5b_247-DPLC_2d5b
00025460 0000                       DPLC_2d5b_78: 	dc.w DPLC_2d5b_24C-DPLC_2d5b
00025462 0000                       DPLC_2d5b_7A: 	dc.w DPLC_2d5b_251-DPLC_2d5b
00025464 0000                       DPLC_2d5b_7C: 	dc.w DPLC_2d5b_254-DPLC_2d5b
00025466 0000                       DPLC_2d5b_7E: 	dc.w DPLC_2d5b_25B-DPLC_2d5b
00025468 0000                       DPLC_2d5b_80: 	dc.w DPLC_2d5b_260-DPLC_2d5b
0002546A 0000                       DPLC_2d5b_82: 	dc.w DPLC_2d5b_267-DPLC_2d5b
0002546C 0000                       DPLC_2d5b_84: 	dc.w DPLC_2d5b_270-DPLC_2d5b
0002546E 0000                       DPLC_2d5b_86: 	dc.w DPLC_2d5b_279-DPLC_2d5b
00025470 0000                       DPLC_2d5b_88: 	dc.w DPLC_2d5b_284-DPLC_2d5b
00025472 0000                       DPLC_2d5b_8A: 	dc.w DPLC_2d5b_28F-DPLC_2d5b
00025474 0000                       DPLC_2d5b_8C: 	dc.w DPLC_2d5b_294-DPLC_2d5b
00025476 0000                       DPLC_2d5b_8E: 	dc.w DPLC_2d5b_29B-DPLC_2d5b
00025478 0000                       DPLC_2d5b_90: 	dc.w DPLC_2d5b_2A0-DPLC_2d5b
0002547A 0000                       DPLC_2d5b_92: 	dc.w DPLC_2d5b_2A7-DPLC_2d5b
0002547C 0000                       DPLC_2d5b_94: 	dc.w DPLC_2d5b_2AC-DPLC_2d5b
0002547E 0000                       DPLC_2d5b_96: 	dc.w DPLC_2d5b_2B3-DPLC_2d5b
00025480 0000                       DPLC_2d5b_98: 	dc.w DPLC_2d5b_2BA-DPLC_2d5b
00025482 0000                       DPLC_2d5b_9A: 	dc.w DPLC_2d5b_2C5-DPLC_2d5b
00025484 0000                       DPLC_2d5b_9C: 	dc.w DPLC_2d5b_2D0-DPLC_2d5b
00025486 0000                       DPLC_2d5b_9E: 	dc.w DPLC_2d5b_2D5-DPLC_2d5b
00025488 0000                       DPLC_2d5b_A0: 	dc.w DPLC_2d5b_2DC-DPLC_2d5b
0002548A 0000                       DPLC_2d5b_A2: 	dc.w DPLC_2d5b_2DF-DPLC_2d5b
0002548C 0000                       DPLC_2d5b_A4: 	dc.w DPLC_2d5b_2E2-DPLC_2d5b
0002548E 0000                       DPLC_2d5b_A6: 	dc.w DPLC_2d5b_2E5-DPLC_2d5b
00025490 0000                       DPLC_2d5b_A8: 	dc.w DPLC_2d5b_2EA-DPLC_2d5b
00025492 0000                       DPLC_2d5b_AA: 	dc.w DPLC_2d5b_2F1-DPLC_2d5b
00025494 0000                       DPLC_2d5b_AC: 	dc.w DPLC_2d5b_2F8-DPLC_2d5b
00025496 0000                       DPLC_2d5b_AE: 	dc.w DPLC_2d5b_2FF-DPLC_2d5b
00025498 0000                       DPLC_2d5b_B0: 	dc.w DPLC_2d5b_304-DPLC_2d5b
0002549A 0000                       DPLC_2d5b_B2: 	dc.w DPLC_2d5b_309-DPLC_2d5b
0002549C 0000                       DPLC_2d5b_B4: 	dc.w DPLC_2d5b_30E-DPLC_2d5b
0002549E 0000                       DPLC_2d5b_B6: 	dc.w DPLC_2d5b_313-DPLC_2d5b
000254A0 00                         DPLC_2d5b_B8: 	dc.b $0
000254A1 02                         DPLC_2d5b_B9: 	dc.b $2
000254A2 F000                       	dc.b $F0, $0
000254A4 1010                       	dc.b $10, $10
000254A6 03                         DPLC_2d5b_BE: 	dc.b $3
000254A7 5012                       	dc.b $50, $12
000254A9 5018                       	dc.b $50, $18
000254AB 201E                       	dc.b $20, $1E
000254AD 03                         DPLC_2d5b_C5: 	dc.b $3
000254AE 5021                       	dc.b $50, $21
000254B0 5018                       	dc.b $50, $18
000254B2 201E                       	dc.b $20, $1E
000254B4 03                         DPLC_2d5b_CC: 	dc.b $3
000254B5 5021                       	dc.b $50, $21
000254B7 5018                       	dc.b $50, $18
000254B9 2027                       	dc.b $20, $27
000254BB 03                         DPLC_2d5b_D3: 	dc.b $3
000254BC 802A                       	dc.b $80, $2A
000254BE 2033                       	dc.b $20, $33
000254C0 2036                       	dc.b $20, $36
000254C2 04                         DPLC_2d5b_DA: 	dc.b $4
000254C3 7039                       	dc.b $70, $39
000254C5 5041                       	dc.b $50, $41
000254C7 5047                       	dc.b $50, $47
000254C9 104D                       	dc.b $10, $4D
000254CB 02                         DPLC_2d5b_E3: 	dc.b $2
000254CC 7039                       	dc.b $70, $39
000254CE B04F                       	dc.b $B0, $4F
000254D0 02                         DPLC_2d5b_E8: 	dc.b $2
000254D1 505B                       	dc.b $50, $5B
000254D3 8061                       	dc.b $80, $61
000254D5 04                         DPLC_2d5b_ED: 	dc.b $4
000254D6 505B                       	dc.b $50, $5B
000254D8 506A                       	dc.b $50, $6A
000254DA 5070                       	dc.b $50, $70
000254DC 1076                       	dc.b $10, $76
000254DE 02                         DPLC_2d5b_F6: 	dc.b $2
000254DF F4F0                       	dc.b $F4, $F0
000254E1 1500                       	dc.b $15, $0
000254E3 03                         DPLC_2d5b_FB: 	dc.b $3
000254E4 7039                       	dc.b $70, $39
000254E6 3078                       	dc.b $30, $78
000254E8 507C                       	dc.b $50, $7C
000254EA 05                         DPLC_2d5b_102: 	dc.b $5
000254EB 5082                       	dc.b $50, $82
000254ED 5088                       	dc.b $50, $88
000254EF 208E                       	dc.b $20, $8E
000254F1 5091                       	dc.b $50, $91
000254F3 0097                       	dc.b $0, $97
000254F5 06                         DPLC_2d5b_10D: 	dc.b $6
000254F6 5082                       	dc.b $50, $82
000254F8 1098                       	dc.b $10, $98
000254FA 309A                       	dc.b $30, $9A
000254FC 509E                       	dc.b $50, $9E
000254FE 30A4                       	dc.b $30, $A4
00025500 00A8                       	dc.b $0, $A8
00025502 04                         DPLC_2d5b_11A: 	dc.b $4
00025503 50A9                       	dc.b $50, $A9
00025505 10AF                       	dc.b $10, $AF
00025507 70B1                       	dc.b $70, $B1
00025509 20B9                       	dc.b $20, $B9
0002550B 05                         DPLC_2d5b_123: 	dc.b $5
0002550C 50BC                       	dc.b $50, $BC
0002550E 30C2                       	dc.b $30, $C2
00025510 70C6                       	dc.b $70, $C6
00025512 20CE                       	dc.b $20, $CE
00025514 10D1                       	dc.b $10, $D1
00025516 04                         DPLC_2d5b_12E: 	dc.b $4
00025517 50BC                       	dc.b $50, $BC
00025519 10D3                       	dc.b $10, $D3
0002551B 70D5                       	dc.b $70, $D5
0002551D 20DD                       	dc.b $20, $DD
0002551F 05                         DPLC_2d5b_137: 	dc.b $5
00025520 5082                       	dc.b $50, $82
00025522 1098                       	dc.b $10, $98
00025524 008E                       	dc.b $0, $8E
00025526 70E0                       	dc.b $70, $E0
00025528 20E8                       	dc.b $20, $E8
0002552A 04                         DPLC_2d5b_142: 	dc.b $4
0002552B 70EB                       	dc.b $70, $EB
0002552D 50F3                       	dc.b $50, $F3
0002552F 10F9                       	dc.b $10, $F9
00025531 50FB                       	dc.b $50, $FB
00025533 02                         DPLC_2d5b_14B: 	dc.b $2
00025534 70EB                       	dc.b $70, $EB
00025536 B101                       	dc.b $B1, $1
00025538 02                         DPLC_2d5b_150: 	dc.b $2
00025539 510D                       	dc.b $51, $D
0002553B 8113                       	dc.b $81, $13
0002553D 04                         DPLC_2d5b_155: 	dc.b $4
0002553E 510D                       	dc.b $51, $D
00025540 511C                       	dc.b $51, $1C
00025542 1122                       	dc.b $11, $22
00025544 5124                       	dc.b $51, $24
00025546 02                         DPLC_2d5b_15E: 	dc.b $2
00025547 510D                       	dc.b $51, $D
00025549 B12A                       	dc.b $B1, $2A
0002554B 03                         DPLC_2d5b_163: 	dc.b $3
0002554C 70EB                       	dc.b $70, $EB
0002554E 0101                       	dc.b $1, $1
00025550 8136                       	dc.b $81, $36
00025552 06                         DPLC_2d5b_16A: 	dc.b $6
00025553 513F                       	dc.b $51, $3F
00025555 1145                       	dc.b $11, $45
00025557 1147                       	dc.b $11, $47
00025559 8149                       	dc.b $81, $49
0002555B 0152                       	dc.b $1, $52
0002555D 0153                       	dc.b $1, $53
0002555F 06                         DPLC_2d5b_177: 	dc.b $6
00025560 513F                       	dc.b $51, $3F
00025562 2154                       	dc.b $21, $54
00025564 1157                       	dc.b $11, $57
00025566 1159                       	dc.b $11, $59
00025568 815B                       	dc.b $81, $5B
0002556A 0152                       	dc.b $1, $52
0002556C 04                         DPLC_2d5b_184: 	dc.b $4
0002556D 5164                       	dc.b $51, $64
0002556F 116A                       	dc.b $11, $6A
00025571 816C                       	dc.b $81, $6C
00025573 1175                       	dc.b $11, $75
00025575 05                         DPLC_2d5b_18D: 	dc.b $5
00025576 5177                       	dc.b $51, $77
00025578 217D                       	dc.b $21, $7D
0002557A 1180                       	dc.b $11, $80
0002557C 7182                       	dc.b $71, $82
0002557E 218A                       	dc.b $21, $8A
00025580 04                         DPLC_2d5b_198: 	dc.b $4
00025581 5177                       	dc.b $51, $77
00025583 118D                       	dc.b $11, $8D
00025585 818F                       	dc.b $81, $8F
00025587 1198                       	dc.b $11, $98
00025589 05                         DPLC_2d5b_1A1: 	dc.b $5
0002558A 513F                       	dc.b $51, $3F
0002558C 819A                       	dc.b $81, $9A
0002558E 1159                       	dc.b $11, $59
00025590 11A3                       	dc.b $11, $A3
00025592 0152                       	dc.b $1, $52
00025594 02                         DPLC_2d5b_1AC: 	dc.b $2
00025595 51A5                       	dc.b $51, $A5
00025597 B1AB                       	dc.b $B1, $AB
00025599 02                         DPLC_2d5b_1B1: 	dc.b $2
0002559A 505B                       	dc.b $50, $5B
0002559C B1B7                       	dc.b $B1, $B7
0002559E 02                         DPLC_2d5b_1B6: 	dc.b $2
0002559F 51A5                       	dc.b $51, $A5
000255A1 B1C3                       	dc.b $B1, $C3
000255A3 02                         DPLC_2d5b_1BB: 	dc.b $2
000255A4 505B                       	dc.b $50, $5B
000255A6 B1CF                       	dc.b $B1, $CF
000255A8 04                         DPLC_2d5b_1C0: 	dc.b $4
000255A9 51DB                       	dc.b $51, $DB
000255AB 11E1                       	dc.b $11, $E1
000255AD B1E3                       	dc.b $B1, $E3
000255AF 01EF                       	dc.b $1, $EF
000255B1 03                         DPLC_2d5b_1C9: 	dc.b $3
000255B2 51F0                       	dc.b $51, $F0
000255B4 11F6                       	dc.b $11, $F6
000255B6 B1F8                       	dc.b $B1, $F8
000255B8 04                         DPLC_2d5b_1D0: 	dc.b $4
000255B9 51DB                       	dc.b $51, $DB
000255BB 1204                       	dc.b $12, $4
000255BD B206                       	dc.b $B2, $6
000255BF 01EF                       	dc.b $1, $EF
000255C1 03                         DPLC_2d5b_1D9: 	dc.b $3
000255C2 51F0                       	dc.b $51, $F0
000255C4 11F6                       	dc.b $11, $F6
000255C6 B212                       	dc.b $B2, $12
000255C8 02                         DPLC_2d5b_1E0: 	dc.b $2
000255C9 521E                       	dc.b $52, $1E
000255CB B224                       	dc.b $B2, $24
000255CD 02                         DPLC_2d5b_1E5: 	dc.b $2
000255CE 510D                       	dc.b $51, $D
000255D0 B230                       	dc.b $B2, $30
000255D2 02                         DPLC_2d5b_1EA: 	dc.b $2
000255D3 521E                       	dc.b $52, $1E
000255D5 B23C                       	dc.b $B2, $3C
000255D7 02                         DPLC_2d5b_1EF: 	dc.b $2
000255D8 510D                       	dc.b $51, $D
000255DA B248                       	dc.b $B2, $48
000255DC 04                         DPLC_2d5b_1F4: 	dc.b $4
000255DD 5254                       	dc.b $52, $54
000255DF 125A                       	dc.b $12, $5A
000255E1 B25C                       	dc.b $B2, $5C
000255E3 0268                       	dc.b $2, $68
000255E5 02                         DPLC_2d5b_1FD: 	dc.b $2
000255E6 7269                       	dc.b $72, $69
000255E8 B271                       	dc.b $B2, $71
000255EA 04                         DPLC_2d5b_202: 	dc.b $4
000255EB 5254                       	dc.b $52, $54
000255ED 127D                       	dc.b $12, $7D
000255EF B27F                       	dc.b $B2, $7F
000255F1 0268                       	dc.b $2, $68
000255F3 02                         DPLC_2d5b_20B: 	dc.b $2
000255F4 7269                       	dc.b $72, $69
000255F6 B28B                       	dc.b $B2, $8B
000255F8 01                         DPLC_2d5b_210: 	dc.b $1
000255F9 F297                       	dc.b $F2, $97
000255FB 01                         DPLC_2d5b_213: 	dc.b $1
000255FC F2A7                       	dc.b $F2, $A7
000255FE 01                         DPLC_2d5b_216: 	dc.b $1
000255FF F2B7                       	dc.b $F2, $B7
00025601 01                         DPLC_2d5b_219: 	dc.b $1
00025602 F2C7                       	dc.b $F2, $C7
00025604 01                         DPLC_2d5b_21C: 	dc.b $1
00025605 F2D7                       	dc.b $F2, $D7
00025607 02                         DPLC_2d5b_21F: 	dc.b $2
00025608 B2E7                       	dc.b $B2, $E7
0002560A 22F3                       	dc.b $22, $F3
0002560C 01                         DPLC_2d5b_224: 	dc.b $1
0002560D F2F6                       	dc.b $F2, $F6
0002560F 02                         DPLC_2d5b_227: 	dc.b $2
00025610 B306                       	dc.b $B3, $6
00025612 2312                       	dc.b $23, $12
00025614 01                         DPLC_2d5b_22C: 	dc.b $1
00025615 F315                       	dc.b $F3, $15
00025617 02                         DPLC_2d5b_22F: 	dc.b $2
00025618 5325                       	dc.b $53, $25
0002561A B32B                       	dc.b $B3, $2B
0002561C 04                         DPLC_2d5b_234: 	dc.b $4
0002561D 5337                       	dc.b $53, $37
0002561F 733D                       	dc.b $73, $3D
00025621 1345                       	dc.b $13, $45
00025623 0347                       	dc.b $3, $47
00025625 02                         DPLC_2d5b_23D: 	dc.b $2
00025626 D348                       	dc.b $D3, $48
00025628 34EC                       	dc.b $34, $EC
0002562A 02                         DPLC_2d5b_242: 	dc.b $2
0002562B F528                       	dc.b $F5, $28
0002562D 0538                       	dc.b $5, $38
0002562F 02                         DPLC_2d5b_247: 	dc.b $2
00025630 F539                       	dc.b $F5, $39
00025632 0549                       	dc.b $5, $49
00025634 02                         DPLC_2d5b_24C: 	dc.b $2
00025635 E356                       	dc.b $E3, $56
00025637 054A                       	dc.b $5, $4A
00025639 01                         DPLC_2d5b_251: 	dc.b $1
0002563A 8365                       	dc.b $83, $65
0002563C 03                         DPLC_2d5b_254: 	dc.b $3
0002563D 736E                       	dc.b $73, $6E
0002563F 0376                       	dc.b $3, $76
00025641 3377                       	dc.b $33, $77
00025643 02                         DPLC_2d5b_25B: 	dc.b $2
00025644 E37B                       	dc.b $E3, $7B
00025646 054A                       	dc.b $5, $4A
00025648 03                         DPLC_2d5b_260: 	dc.b $3
00025649 B38A                       	dc.b $B3, $8A
0002564B 1396                       	dc.b $13, $96
0002564D 0398                       	dc.b $3, $98
0002564F 04                         DPLC_2d5b_267: 	dc.b $4
00025650 B399                       	dc.b $B3, $99
00025652 33A5                       	dc.b $33, $A5
00025654 03A9                       	dc.b $3, $A9
00025656 03AA                       	dc.b $3, $AA
00025658 04                         DPLC_2d5b_270: 	dc.b $4
00025659 B3AB                       	dc.b $B3, $AB
0002565B 33B7                       	dc.b $33, $B7
0002565D 03BB                       	dc.b $3, $BB
0002565F 03BC                       	dc.b $3, $BC
00025661 05                         DPLC_2d5b_279: 	dc.b $5
00025662 83BD                       	dc.b $83, $BD
00025664 13C6                       	dc.b $13, $C6
00025666 53C8                       	dc.b $53, $C8
00025668 13CE                       	dc.b $13, $CE
0002566A 03D0                       	dc.b $3, $D0
0002566C 05                         DPLC_2d5b_284: 	dc.b $5
0002566D 83D1                       	dc.b $83, $D1
0002566F 13DA                       	dc.b $13, $DA
00025671 53C8                       	dc.b $53, $C8
00025673 13CE                       	dc.b $13, $CE
00025675 03D0                       	dc.b $3, $D0
00025677 02                         DPLC_2d5b_28F: 	dc.b $2
00025678 83DC                       	dc.b $83, $DC
0002567A 73E5                       	dc.b $73, $E5
0002567C 03                         DPLC_2d5b_294: 	dc.b $3
0002567D 83ED                       	dc.b $83, $ED
0002567F 23F6                       	dc.b $23, $F6
00025681 13F9                       	dc.b $13, $F9
00025683 02                         DPLC_2d5b_29B: 	dc.b $2
00025684 83FB                       	dc.b $83, $FB
00025686 7404                       	dc.b $74, $4
00025688 03                         DPLC_2d5b_2A0: 	dc.b $3
00025689 83ED                       	dc.b $83, $ED
0002568B 240C                       	dc.b $24, $C
0002568D 140F                       	dc.b $14, $F
0002568F 02                         DPLC_2d5b_2A7: 	dc.b $2
00025690 5411                       	dc.b $54, $11
00025692 B417                       	dc.b $B4, $17
00025694 03                         DPLC_2d5b_2AC: 	dc.b $3
00025695 8423                       	dc.b $84, $23
00025697 342C                       	dc.b $34, $2C
00025699 0430                       	dc.b $4, $30
0002569B 03                         DPLC_2d5b_2B3: 	dc.b $3
0002569C 7431                       	dc.b $74, $31
0002569E 1439                       	dc.b $14, $39
000256A0 B43B                       	dc.b $B4, $3B
000256A2 05                         DPLC_2d5b_2BA: 	dc.b $5
000256A3 7447                       	dc.b $74, $47
000256A5 144F                       	dc.b $14, $4F
000256A7 5451                       	dc.b $54, $51
000256A9 3457                       	dc.b $34, $57
000256AB 045B                       	dc.b $4, $5B
000256AD 05                         DPLC_2d5b_2C5: 	dc.b $5
000256AE 745C                       	dc.b $74, $5C
000256B0 144F                       	dc.b $14, $4F
000256B2 5464                       	dc.b $54, $64
000256B4 3457                       	dc.b $34, $57
000256B6 045B                       	dc.b $4, $5B
000256B8 02                         DPLC_2d5b_2D0: 	dc.b $2
000256B9 246A                       	dc.b $24, $6A
000256BB F46D                       	dc.b $F4, $6D
000256BD 03                         DPLC_2d5b_2D5: 	dc.b $3
000256BE 247D                       	dc.b $24, $7D
000256C0 B480                       	dc.b $B4, $80
000256C2 248C                       	dc.b $24, $8C
000256C4 01                         DPLC_2d5b_2DC: 	dc.b $1
000256C5 B48F                       	dc.b $B4, $8F
000256C7 01                         DPLC_2d5b_2DF: 	dc.b $1
000256C8 549B                       	dc.b $54, $9B
000256CA 01                         DPLC_2d5b_2E2: 	dc.b $1
000256CB 14A1                       	dc.b $14, $A1
000256CD 02                         DPLC_2d5b_2E5: 	dc.b $2
000256CE E356                       	dc.b $E3, $56
000256D0 054A                       	dc.b $5, $4A
000256D2 03                         DPLC_2d5b_2EA: 	dc.b $3
000256D3 736E                       	dc.b $73, $6E
000256D5 0376                       	dc.b $3, $76
000256D7 3377                       	dc.b $33, $77
000256D9 03                         DPLC_2d5b_2F1: 	dc.b $3
000256DA B4A3                       	dc.b $B4, $A3
000256DC 14AF                       	dc.b $14, $AF
000256DE 34B1                       	dc.b $34, $B1
000256E0 03                         DPLC_2d5b_2F8: 	dc.b $3
000256E1 54B5                       	dc.b $54, $B5
000256E3 B4BB                       	dc.b $B4, $BB
000256E5 1074                       	dc.b $10, $74
000256E7 02                         DPLC_2d5b_2FF: 	dc.b $2
000256E8 F4C7                       	dc.b $F4, $C7
000256EA 24D7                       	dc.b $24, $D7
000256EC 02                         DPLC_2d5b_304: 	dc.b $2
000256ED F4DA                       	dc.b $F4, $DA
000256EF 14EA                       	dc.b $14, $EA
000256F1 02                         DPLC_2d5b_309: 	dc.b $2
000256F2 F502                       	dc.b $F5, $2
000256F4 2512                       	dc.b $25, $12
000256F6 02                         DPLC_2d5b_30E: 	dc.b $2
000256F7 F515                       	dc.b $F5, $15
000256F9 2525                       	dc.b $25, $25
000256FB 02                         DPLC_2d5b_313: 	dc.b $2
000256FC F54B                       	dc.b $F5, $4B
000256FE 755B                       	dc.b $75, $5B
00025700                            	even
00025700                            	even
00025700                            
00025700                            ; ---------------------------------------------------------------------------
00025700                            ; Uncompressed graphics	- Sonic
00025700                            ; ---------------------------------------------------------------------------
00025700                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
00030320                            		even
00030320                            ; ---------------------------------------------------------------------------
00030320                            ; Compressed graphics - various
00030320                            ; ---------------------------------------------------------------------------
00030320                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
00030424                            		even
00030424                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0003045E                            		even
0003045E                            Nem_Shield:	incbin	artnem\shield.bin	; shield
000305F4                            		even
000305F4                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0003073C                            		even
0003073C                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00030846                            		even
00030846                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00030898                            		even
00030898                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
00030AE0                            		even
00030AE0                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00030C66                            		even
00030C66                            ; ---------------------------------------------------------------------------
00030C66                            ; Sprite mappings - walls of the special stage
00030C66                            ; ---------------------------------------------------------------------------
00030C66                            Map_SSWalls:
00030C66                            	include "_maps\SSwalls.asm"
00030C66                            ; ---------------------------------------------------------------------------
00030C66                            ; Sprite mappings - walls of the special stage
00030C66                            ; ---------------------------------------------------------------------------
00030C66 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00030C6A 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
00030C6E 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
00030C72 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00030C76 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00030C7A 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
00030C7E 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
00030C82 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00030C86 01                         byte_2C584:	dc.b 1
00030C87 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00030C8C 01                         byte_2C58A:	dc.b 1
00030C8D F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
00030C92 01                         byte_2C590:	dc.b 1
00030C93 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00030C98 01                         byte_2C596:	dc.b 1
00030C99 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00030C9E 01                         byte_2C59C:	dc.b 1
00030C9F F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00030CA4 01                         byte_2C5A2:	dc.b 1
00030CA5 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00030CAA 01                         byte_2C5A8:	dc.b 1
00030CAB F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00030CB0 01                         byte_2C5AE:	dc.b 1
00030CB1 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00030CB6 01                         byte_2C5B4:	dc.b 1
00030CB7 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00030CBC 01                         byte_2C5BA:	dc.b 1
00030CBD F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
00030CC2 01                         byte_2C5C0:	dc.b 1
00030CC3 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00030CC8 01                         byte_2C5C6:	dc.b 1
00030CC9 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00030CCE 01                         byte_2C5CC:	dc.b 1
00030CCF F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00030CD4 01                         byte_2C5D2:	dc.b 1
00030CD5 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00030CDA 01                         byte_2C5D8:	dc.b 1
00030CDB F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00030CE0 01                         byte_2C5DE:	dc.b 1
00030CE1 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00030CE6                            		even
00030CE6                            		even
00030CE6                            ; ---------------------------------------------------------------------------
00030CE6                            ; Compressed graphics - special stage
00030CE6                            ; ---------------------------------------------------------------------------
00030CE6                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0003161E                            		even
0003161E                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0003176C                            		even
0003176C                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00032BFE                            		even
00032BFE                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00032EFE                            		even
00032EFE                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
000333F2                            		even
000333F2                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
000334E0                            		even
000334E0                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
000335B0                            		even
000335B0                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
000336A6                            		even
000336A6                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00033704                            		even
00033704                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00033796                            		even
00033796                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00033858                            		even
00033858                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00033926                            		even
00033926                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
000339F2                            		even
000339F2                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00033ABA                            		even
00033ABA                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00033B84                            		even
00033B84                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00033C54                            		even
00033C54                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00033E48                            		even
00033E48                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00033FB0                            		even
00033FB0                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00034060                            		even
00034060                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
0003413A                            		even
0003413A                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
000341BE                            		even
000341BE                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
0003433C                            		even
0003433C                            ; ---------------------------------------------------------------------------
0003433C                            ; Compressed graphics - GHZ stuff
0003433C                            ; ---------------------------------------------------------------------------
0003433C                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00034386                            		even
00034386                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
000344A0                            		even
000344A0                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
0003458C                            		even
0003458C                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
000345D4                            		even
000345D4                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00034772                            		even
00034772                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
000347EE                            		even
000347EE                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00034A02                            		even
00034A02                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00034B2E                            		even
00034B2E                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00034C5C                            		even
00034C5C                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00034CFA                            		even
00034CFA                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00034D5A                            		even
00034D5A                            ; ---------------------------------------------------------------------------
00034D5A                            ; Compressed graphics - LZ stuff
00034D5A                            ; ---------------------------------------------------------------------------
00034D5A                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00034E7E                            		even
00034E7E                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00035672                            		even
00035672                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
000357F2                            		even
000357F2                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
0003595C                            		even
0003595C                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00035FB2                            		even
00035FB2                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00036068                            		even
00036068                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0003610A                            		even
0003610A                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00036266                            		even
00036266                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000362CA                            		even
000362CA                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0003641C                            		even
0003641C                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
000368FE                            		even
000368FE                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00036A6E                            		even
00036A6E                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00036D26                            		even
00036D26                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00036E5E                            		even
00036E5E                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00036F88                            		even
00036F88                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00037098                            		even
00037098                            ; ---------------------------------------------------------------------------
00037098                            ; Compressed graphics - MZ stuff
00037098                            ; ---------------------------------------------------------------------------
00037098                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00037326                            		even
00037326                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
000373E4                            		even
000373E4                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
0003749C                            		even
0003749C                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
000374F0                            		even
000374F0                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
000377C2 00                         		even
000377C2                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
000380D8                            		even
000380D8                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
0003823C                            		even
0003823C                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000382C4                            		even
000382C4                            ; ---------------------------------------------------------------------------
000382C4                            ; Compressed graphics - SLZ stuff
000382C4                            ; ---------------------------------------------------------------------------
000382C4                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00038500                            		even
00038500                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00038646                            		even
00038646                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
0003888A                            		even
0003888A                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
000388EC                            		even
000388EC                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
000389CE                            		even
000389CE                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00038BB0                            		even
00038BB0                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00038CBC                            		even
00038CBC                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00038D60                            		even
00038D60                            ; ---------------------------------------------------------------------------
00038D60                            ; Compressed graphics - SYZ stuff
00038D60                            ; ---------------------------------------------------------------------------
00038D60                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00038ECA                            		even
00038ECA                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00038F2C                            		even
00038F2C                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
0003900E                            		even
0003900E                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
0003929C                            		even
0003929C                            ; ---------------------------------------------------------------------------
0003929C                            ; Compressed graphics - SBZ stuff
0003929C                            ; ---------------------------------------------------------------------------
0003929C                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
000392F0                            		even
000392F0                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
0003958C                            		even
0003958C                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00039790                            		even
00039790                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0003992E                            		even
0003992E                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00039C5E                            		even
00039C5E                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00039E3C                            		even
00039E3C                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00039E94                            		even
00039E94                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003A05E 00                         		even
0003A05E                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003A15C                            		even
0003A15C                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003A2E8                            		even
0003A2E8                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003A338                            		even
0003A338                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003A390                            		even
0003A390                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003A48C                            		even
0003A48C                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003A5A2                            		even
0003A5A2                            ; ---------------------------------------------------------------------------
0003A5A2                            ; Compressed graphics - enemies
0003A5A2                            ; ---------------------------------------------------------------------------
0003A5A2                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003A962                            		even
0003A962                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003AB0C 00                         		even
0003AB0C                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003AECE 00                         		even
0003AECE                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003B0B6                            		even
0003B0B6                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003B26E 00                         		even
0003B26E                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003B3B8                            		even
0003B3B8                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003B642                            		even
0003B642                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003BC66                            		even
0003BC66                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003BE5C                            		even
0003BE5C                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003C47A                            		even
0003C47A                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003C87A 00                         		even
0003C87A                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003CB76                            		even
0003CB76                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003CDBE                            		even
0003CDBE                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D056                            		even
0003D056                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003D234                            		even
0003D234                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003D3C2                            		even
0003D3C2                            ; ---------------------------------------------------------------------------
0003D3C2                            ; Compressed graphics - various
0003D3C2                            ; ---------------------------------------------------------------------------
0003D3C2                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003D9D0                            		even
0003D9D0                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003DAC6                            		even
0003DAC6                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003DBCC                            		even
0003DBCC                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003DCC0                            		even
0003DCC0                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003E204                            		even
0003E204                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003E86A                            		even
0003E86A                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003E91A                            		even
0003E91A                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003EAAC                            		even
0003EAAC                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003EBAE                            		even
0003EBAE                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003EC8A                            		even
0003EC8A                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003F106                            		even
0003F106                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003F1C6                            		even
0003F1C6                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003F33A                            		even
0003F33A                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003F63C                            		even
0003F63C                            ; ---------------------------------------------------------------------------
0003F63C                            ; Compressed graphics - continue screen
0003F63C                            ; ---------------------------------------------------------------------------
0003F63C                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003F8EC                            		even
0003F8EC                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003FB26                            		even
0003FB26                            ; ---------------------------------------------------------------------------
0003FB26                            ; Compressed graphics - animals
0003FB26                            ; ---------------------------------------------------------------------------
0003FB26                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003FC7E                            		even
0003FC7E                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003FDDA                            		even
0003FDDA                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003FF56                            		even
0003FF56                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00040072                            		even
00040072                            Nem_Pig:	incbin	artnem\pig.bin		; pig
000401A8                            		even
000401A8                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
000402E2                            		even
000402E2                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0004043E                            		even
0004043E                            ; ---------------------------------------------------------------------------
0004043E                            ; Compressed graphics - primary patterns and block mappings
0004043E                            ; ---------------------------------------------------------------------------
0004043E                            Blk16_GHZ:	incbin	map16\ghz.bin
00040D52                            		even
00040D52                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00042660                            		even
00042660                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
000439E0                            		even
000439E0                            Blk256_GHZ:	incbin	map256\ghz.bin
00045CDE                            		even
00045CDE                            Blk16_LZ:	incbin	map16\lz.bin
00046418                            		even
00046418                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
0004881A                            		even
0004881A                            Blk256_LZ:	incbin	map256\lz.bin
0004B19A                            		even
0004B19A                            Blk16_MZ:	incbin	map16\mz.bin
0004B8F6                            		even
0004B8F6                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004E17E                            		even
0004E17E                            Blk256_MZ:	incbin	map256\mz.bin
0004F902                            		even
0004F902                            Blk16_SLZ:	incbin	map16\slz.bin
0004FFCC                            		even
0004FFCC                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00051F20                            		even
00051F20                            Blk256_SLZ:	incbin	map256\slz.bin
0005259A                            		even
0005259A                            Blk16_SYZ:	incbin	map16\syz.bin
000531C0                            		even
000531C0                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00057752                            		even
00057752                            Blk256_SYZ:	incbin	map256\syz.bin
000597AE                            		even
000597AE                            Blk16_SBZ:	incbin	map16\sbz.bin
0005A6F6                            		even
0005A6F6                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005D0BA                            		even
0005D0BA                            Blk256_SBZ:	incbin	map256\sbz.bin
0005FBB0                            		even
0005FBB0                            ; ---------------------------------------------------------------------------
0005FBB0                            ; Compressed graphics - bosses and ending sequence
0005FBB0                            ; ---------------------------------------------------------------------------
0005FBB0                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
000603CA 00                         		even
000603CA                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
000606B4                            		even
000606B4                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
00060F38                            		even
00060F38                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00061C8E 00                         		even
00061C8E                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
000623F6                            		even
000623F6                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00062976                            		even
00062976                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00062A96                            		even
00062A96                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00062C94                            		even
00062C94                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00063E72                            		even
00063E72                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
000647B6                            		even
000647B6                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00064B8C                            		even
00064B8C                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0006511C                            		even
0006511C                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
000653A4                            		even
000653A4                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
00065992 00                         		even
00065992                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00065C1A                            		even
00065C1A                            		incbin	misc\padding2.bin
00065D1E                            		even
00065D1E                            ; ---------------------------------------------------------------------------
00065D1E                            ; Collision data
00065D1E                            ; ---------------------------------------------------------------------------
00065D1E                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00065E1E                            		even
00065E1E                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00066E1E                            		even
00066E1E                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00067E1E                            		even
00067E1E                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00067FD6 00                         		even
00067FD6                            Col_LZ:		incbin	collide\lz.bin		; LZ index
0006813E                            		even
0006813E                            Col_MZ:		incbin	collide\mz.bin		; MZ index
000682CE                            		even
000682CE                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
000684C2                            		even
000684C2                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
000686C8                            		even
000686C8                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00068966                            		even
00068966                            ; ---------------------------------------------------------------------------
00068966                            ; Special layouts
00068966                            ; ---------------------------------------------------------------------------
00068966                            SS_1:		incbin	sslayout\1.bin
00068BE0                            		even
00068BE0                            SS_2:		incbin	sslayout\2.bin
00068FF2                            		even
00068FF2                            SS_3:		incbin	sslayout\3.bin
0006934E                            		even
0006934E                            SS_4:		incbin	sslayout\4.bin
00069828                            		even
00069828                            SS_5:		incbin	sslayout\5.bin
00069CFA                            		even
00069CFA                            SS_6:		incbin	sslayout\6.bin
0006A00A                            		even
0006A00A                            ; ---------------------------------------------------------------------------
0006A00A                            ; Animated uncompressed graphics
0006A00A                            ; ---------------------------------------------------------------------------
0006A00A                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006A20A                            		even
0006A20A                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006A60A                            		even
0006A60A                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006AA8A                            		even
0006AA8A                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006AD8A                            		even
0006AD8A                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006B38A                            		even
0006B38A                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006B68A                            		even
0006B68A                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006C10A                            		even
0006C10A                            
0006C10A                            ; ---------------------------------------------------------------------------
0006C10A                            ; Level	layout index
0006C10A                            ; ---------------------------------------------------------------------------
0006C10A 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0006C110 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0006C116 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0006C11C 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0006C122 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0006C128 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0006C12E 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0006C134 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0006C13A 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0006C140 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0006C146 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0006C14C 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0006C152 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C158 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C15E 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C164 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0006C16A 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0006C170 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0006C176 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0006C17C 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0006C182 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0006C188 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0006C18E 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0006C194 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0006C19A 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006C1A0 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006C1A6 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006C1AC 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006C1B2                            
0006C1B2                            Level_GHZ1:	incbin	levels\ghz1.bin
0006C2A4                            		even
0006C2A4 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0006C2A8                            Level_GHZ2:	incbin	levels\ghz2.bin
0006C370                            		even
0006C370 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0006C374                            Level_GHZ3:	incbin	levels\ghz3.bin
0006C496                            		even
0006C496                            Level_GHZbg:	incbin	levels\ghzbg.bin
0006C4B8                            		even
0006C4B8 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0006C4BC 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0006C4C0                            
0006C4C0                            Level_LZ1:	incbin	levels\lz1.bin
0006C5C2                            		even
0006C5C2                            Level_LZbg:	incbin	levels\lzbg.bin
0006C6C4                            		even
0006C6C4 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0006C6C8                            Level_LZ2:	incbin	levels\lz2.bin
0006C762                            		even
0006C762 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0006C766                            Level_LZ3:	incbin	levels\lz3.bin
0006C880                            		even
0006C880 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0006C884                            Level_SBZ3:	incbin	levels\sbz3.bin
0006C93E                            		even
0006C93E 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0006C942                            
0006C942                            Level_MZ1:	incbin	levels\mz1.bin
0006C9E0                            		even
0006C9E0                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0006CA5A                            		even
0006CA5A                            Level_MZ2:	incbin	levels\mz2.bin
0006CAFE                            		even
0006CAFE                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0006CB90                            		even
0006CB90 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0006CB94                            Level_MZ3:	incbin	levels\mz3.bin
0006CC76                            		even
0006CC76                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006CD1A 00                         		even
0006CD1A 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006CD1E 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0006CD22                            
0006CD22                            Level_SLZ1:	incbin	levels\slz1.bin
0006CE34                            		even
0006CE34                            Level_SLZbg:	incbin	levels\slzbg.bin
0006CE4E                            		even
0006CE4E                            Level_SLZ2:	incbin	levels\slz2.bin
0006CF3E                            		even
0006CF3E                            Level_SLZ3:	incbin	levels\slz3.bin
0006D058                            		even
0006D058 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006D05C                            
0006D05C                            Level_SYZ1:	incbin	levels\syz1.bin
0006D118 00                         		even
0006D118                            Level_SYZbg:	incbin	levels\syzbg.bin
0006D152                            		even
0006D152 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0006D156                            Level_SYZ2:	incbin	levels\syz2.bin
0006D25A                            		even
0006D25A 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0006D25E                            Level_SYZ3:	incbin	levels\syz3.bin
0006D3B8 00                         		even
0006D3B8 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0006D3BC 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0006D3C0                            
0006D3C0                            Level_SBZ1:	incbin	levels\sbz1.bin
0006D4E2                            		even
0006D4E2                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006D520                            		even
0006D520                            Level_SBZ2:	incbin	levels\sbz2.bin
0006D662                            		even
0006D662                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0006D7CC                            		even
0006D7CC 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006D7D0 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006D7D4                            Level_End:	incbin	levels\ending.bin
0006D804 00                         		even
0006D804 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006D808                            
0006D808                            ; ---------------------------------------------------------------------------
0006D808                            ; Animated uncompressed giant ring graphics
0006D808                            ; ---------------------------------------------------------------------------
0006D808                            Art_BigRing:	incbin	artunc\bigring.bin
0006E448                            		even
0006E448                            
0006E448                            		incbin	misc\padding3.bin
0006E4E4                            		even
0006E4E4                            
0006E4E4                            ; ---------------------------------------------------------------------------
0006E4E4                            ; Sprite locations index
0006E4E4                            ; ---------------------------------------------------------------------------
0006E4E4 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E4E8 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E4EC 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E4F0 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E4F4 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E4F8 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E4FC 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E500 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E504 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E508 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E50C 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E510 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E514 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E518 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E51C 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E520 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E524 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E528 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E52C 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E530 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E534 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E538 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E53C 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E540 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E544 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E548 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E54C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E550 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E554 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006E558 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006E55C 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006E560 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006E564 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006E568 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006E56C 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006E570 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006E574 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006E57A                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006EDC6                            		even
0006EDC6                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006EE7A                            		even
0006EE7A                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0006F8BE                            		even
0006F8BE                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0006FC66                            		even
0006FC66                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0006FF9C                            		even
0006FF9C                            ObjPos_LZ3:	incbin	objpos\lz3.bin
000704E8                            		even
000704E8                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
00070980                            		even
00070980                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000709B2                            		even
000709B2                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
000709E4                            		even
000709E4                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
00070A16                            		even
00070A16                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
00070A48                            		even
00070A48                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
00070A92                            		even
00070A92                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00070AD0                            		even
00070AD0                            ObjPos_MZ1:	incbin	objpos\mz1.bin
00070E3C                            		even
00070E3C                            ObjPos_MZ2:	incbin	objpos\mz2.bin
000712E6                            		even
000712E6                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0007185C                            		even
0007185C                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
00071886                            		even
00071886                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
00071CEE                            		even
00071CEE                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
000722D0                            		even
000722D0                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
00072942                            		even
00072942                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00072EAC                            		even
00072EAC                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
000734B2                            		even
000734B2                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
00073BF0                            		even
00073BF0                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
000742CE                            		even
000742CE                            ObjPos_FZ:	incbin	objpos\fz.bin
000742E0                            		even
000742E0                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
00074312                            		even
00074312                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
00074344                            		even
00074344                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00074376                            		even
00074376                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
000743A8                            		even
000743A8                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
000743DA                            		even
000743DA                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
00074412                            		even
00074412                            ObjPos_End:	incbin	objpos\ending.bin
0007456E                            		even
0007456E FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00074574                            ; ---------------------------------------------------------------------------
00074574                            		incbin	misc\padding4.bin
00074B9E                            		even
00074B9E                            
00074B9E 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
00074BA2 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
00074BA6 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
00074BAA 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
00074BAE 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
00074BB2 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00074BB6                            ; ---------------------------------------------------------------------------
00074BB6                            ; PSG instruments used in music
00074BB6                            ; ---------------------------------------------------------------------------
00074BB6 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
00074BC2 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00074BCE 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00074BDA                            PSG1:		incbin	sound\psg1.bin
00074BF1                            PSG2:		incbin	sound\psg2.bin
00074BF8                            PSG3:		incbin	sound\psg3.bin
00074C09                            PSG4:		incbin	sound\psg4.bin
00074C14                            PSG6:		incbin	sound\psg6.bin
00074C23                            PSG5:		incbin	sound\psg5.bin
00074C4D                            PSG7:		incbin	sound\psg7.bin
00074C69                            PSG8:		incbin	sound\psg8.bin
00074C91                            PSG9:		incbin	sound\psg9.bin
00074CA2                            
00074CA2 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
00074CAA                            ; ---------------------------------------------------------------------------
00074CAA                            ; Music	Pointers
00074CAA                            ; ---------------------------------------------------------------------------
00074CAA 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
00074CB2 0000 0000 0000 0000        		dc.l Music83, Music84
00074CBA 0000 0000 0000 0000        		dc.l Music85, Music86
00074CC2 0000 0000 0000 0000        		dc.l Music87, Music88
00074CCA 0000 0000 0000 0000        		dc.l Music89, Music8A
00074CD2 0000 0000 0000 0000        		dc.l Music8B, Music8C
00074CDA 0000 0000 0000 0000        		dc.l Music8D, Music8E
00074CE2 0000 0000 0000 0000        		dc.l Music8F, Music90
00074CEA 0000 0000 0000 0000        		dc.l Music91, Music92
00074CF2 0000 0000 0000 0000        		dc.l Music93, Music94
00074CFA 0000 0000 0000 0000        		dc.l Music95, Music96
00074D02 0000 0000 0000 0000        		dc.l Music97, Music98
00074D0A 0000 0000 0000 0000        		dc.l Music99, Music9A
00074D12 0000 0000 0000 0000        		dc.l Music9B, Music9C
00074D1A 0000 0000 0000 0000        		dc.l Music9D, Music9E
00074D22 0000 0000                  		dc.l Music9F
00074D26                            ; ---------------------------------------------------------------------------
00074D26                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
00074D26                            ; ---------------------------------------------------------------------------
00074D26 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
00074D36 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
00074D46 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
00074D56 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
00074D66 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
00074D76 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00074D86 9090 9090                  		dc.b $90, $90, $90, $90
00074D8A                            
00074D8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074D8A                            
00074D8A                            
00074D8A                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
00074D8A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00074D92 4E71                       		nop	
00074D94 4E71                       		nop	
00074D96 4E71                       		nop	
00074D98                            
00074D98                            loc_71B5A:
00074D98 0839 0000 00A1 1100        		btst	#0,($A11100).l
00074DA0 66F6                       		bne.s	loc_71B5A
00074DA2                            
00074DA2 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
00074DAA 6700                       		beq.s	loc_71B82
00074DAC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00074DB4 4E71                       		nop	
00074DB6 4E71                       		nop	
00074DB8 4E71                       		nop	
00074DBA 4E71                       		nop	
00074DBC 4E71                       		nop	
00074DBE 60CA                       		bra.s	sub_71B4C
00074DC0                            ; ===========================================================================
00074DC0                            
00074DC0                            loc_71B82:
00074DC0 4DF9 00FF F000             		lea	($FFF000).l,a6
00074DC6 422E 000E                  		clr.b	$E(a6)
00074DCA 4A2E 0003                  		tst.b	3(a6)		; is music paused?
00074DCE 6600 0000                  		bne.w	loc_71E50	; if yes, branch
00074DD2 532E 0001                  		subq.b	#1,1(a6)
00074DD6 6600                       		bne.s	loc_71B9E
00074DD8 4EBA 0000                  		jsr	sub_7260C(pc)
00074DDC                            
00074DDC                            loc_71B9E:
00074DDC 102E 0004                  		move.b	4(a6),d0
00074DE0 6700                       		beq.s	loc_71BA8
00074DE2 4EBA 0000                  		jsr	sub_72504(pc)
00074DE6                            
00074DE6                            loc_71BA8:
00074DE6 4A2E 0024                  		tst.b	$24(a6)
00074DEA 6700                       		beq.s	loc_71BB2
00074DEC 4EBA 0000                  		jsr	sub_7267C(pc)
00074DF0                            
00074DF0                            loc_71BB2:
00074DF0 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00074DF4 6700                       		beq.s	loc_71BBC	; if not, branch
00074DF6 4EBA 0000                  		jsr	Sound_Play(pc)
00074DFA                            
00074DFA                            loc_71BBC:
00074DFA 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00074E00 6700                       		beq.s	loc_71BC8
00074E02 4EBA 0000                  		jsr	Sound_ChkValue(pc)
00074E06                            
00074E06                            loc_71BC8:
00074E06 4BEE 0040                  		lea	$40(a6),a5
00074E0A 4A15                       		tst.b	(a5)
00074E0C 6A00                       		bpl.s	loc_71BD4
00074E0E 4EBA 0000                  		jsr	sub_71C4E(pc)
00074E12                            
00074E12                            loc_71BD4:
00074E12 422E 0008                  		clr.b	8(a6)
00074E16 7E05                       		moveq	#5,d7
00074E18                            
00074E18                            loc_71BDA:
00074E18 DAFC 0030                  		adda.w	#$30,a5
00074E1C 4A15                       		tst.b	(a5)
00074E1E 6A00                       		bpl.s	loc_71BE6
00074E20 4EBA 0000                  		jsr	sub_71CCA(pc)
00074E24                            
00074E24                            loc_71BE6:
00074E24 51CF FFF2                  		dbf	d7,loc_71BDA
00074E28                            
00074E28 7E02                       		moveq	#2,d7
00074E2A                            
00074E2A                            loc_71BEC:
00074E2A DAFC 0030                  		adda.w	#$30,a5
00074E2E 4A15                       		tst.b	(a5)
00074E30 6A00                       		bpl.s	loc_71BF8
00074E32 4EBA 0000                  		jsr	sub_72850(pc)
00074E36                            
00074E36                            loc_71BF8:
00074E36 51CF FFF2                  		dbf	d7,loc_71BEC
00074E3A                            
00074E3A 1D7C 0080 000E             		move.b	#$80,$E(a6)
00074E40 7E02                       		moveq	#2,d7
00074E42                            
00074E42                            loc_71C04:
00074E42 DAFC 0030                  		adda.w	#$30,a5
00074E46 4A15                       		tst.b	(a5)
00074E48 6A00                       		bpl.s	loc_71C10
00074E4A 4EBA 0000                  		jsr	sub_71CCA(pc)
00074E4E                            
00074E4E                            loc_71C10:
00074E4E 51CF FFF2                  		dbf	d7,loc_71C04
00074E52                            
00074E52 7E02                       		moveq	#2,d7
00074E54                            
00074E54                            loc_71C16:
00074E54 DAFC 0030                  		adda.w	#$30,a5
00074E58 4A15                       		tst.b	(a5)
00074E5A 6A00                       		bpl.s	loc_71C22
00074E5C 4EBA 0000                  		jsr	sub_72850(pc)
00074E60                            
00074E60                            loc_71C22:
00074E60 51CF FFF2                  		dbf	d7,loc_71C16
00074E64 1D7C 0040 000E             		move.b	#$40,$E(a6)
00074E6A DAFC 0030                  		adda.w	#$30,a5
00074E6E 4A15                       		tst.b	(a5)
00074E70 6A00                       		bpl.s	loc_71C38
00074E72 4EBA 0000                  		jsr	sub_71CCA(pc)
00074E76                            
00074E76                            loc_71C38:
00074E76 DAFC 0030                  		adda.w	#$30,a5
00074E7A 4A15                       		tst.b	(a5)
00074E7C 6A00                       		bpl.s	loc_71C44
00074E7E 4EBA 0000                  		jsr	sub_72850(pc)
00074E82                            
00074E82                            loc_71C44:
00074E82 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00074E8A 4E75                       		rts	
00074E8C                            ; End of function sub_71B4C
00074E8C                            
00074E8C                            
00074E8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074E8C                            
00074E8C                            
00074E8C                            sub_71C4E:				; XREF: sub_71B4C
00074E8C 532D 000E                  		subq.b	#1,$E(a5)
00074E90 6600                       		bne.s	locret_71CAA
00074E92 1D7C 0080 0008             		move.b	#$80,8(a6)
00074E98 286D 0004                  		movea.l	4(a5),a4
00074E9C                            
00074E9C                            loc_71C5E:
00074E9C 7A00                       		moveq	#0,d5
00074E9E 1A1C                       		move.b	(a4)+,d5
00074EA0 0C05 00E0                  		cmpi.b	#-$20,d5
00074EA4 6500                       		bcs.s	loc_71C6E
00074EA6 4EBA 0000                  		jsr	sub_72A5A(pc)
00074EAA 60F0                       		bra.s	loc_71C5E
00074EAC                            ; ===========================================================================
00074EAC                            
00074EAC                            loc_71C6E:
00074EAC 4A05                       		tst.b	d5
00074EAE 6A00                       		bpl.s	loc_71C84
00074EB0 1B45 0010                  		move.b	d5,$10(a5)
00074EB4 1A1C                       		move.b	(a4)+,d5
00074EB6 6A00                       		bpl.s	loc_71C84
00074EB8 534C                       		subq.w	#1,a4
00074EBA 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00074EC0 6000                       		bra.s	loc_71C88
00074EC2                            ; ===========================================================================
00074EC2                            
00074EC2                            loc_71C84:
00074EC2 4EBA 0000                  		jsr	sub_71D40(pc)
00074EC6                            
00074EC6                            loc_71C88:
00074EC6 2B4C 0004                  		move.l	a4,4(a5)
00074ECA 0815 0002                  		btst	#2,(a5)
00074ECE 6600                       		bne.s	locret_71CAA
00074ED0 7000                       		moveq	#0,d0
00074ED2 102D 0010                  		move.b	$10(a5),d0
00074ED6 0C00 0080                  		cmpi.b	#$80,d0
00074EDA 6700                       		beq.s	locret_71CAA
00074EDC 0800 0003                  		btst	#3,d0
00074EE0 6600                       		bne.s	loc_71CAC
00074EE2 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
00074EE8                            
00074EE8                            locret_71CAA:
00074EE8 4E75                       		rts	
00074EEA                            ; ===========================================================================
00074EEA                            
00074EEA                            loc_71CAC:
00074EEA 0400 0088                  		subi.b	#$88,d0
00074EEE 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
00074EF2 13C0 00A0 00EA             		move.b	d0,($A000EA).l
00074EF8 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
00074F00 4E75                       		rts	
00074F02                            ; End of function sub_71C4E
00074F02                            
00074F02                            ; ===========================================================================
00074F02 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
00074F08                            
00074F08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074F08                            
00074F08                            
00074F08                            sub_71CCA:				; XREF: sub_71B4C
00074F08 532D 000E                  		subq.b	#1,$E(a5)
00074F0C 6600                       		bne.s	loc_71CE0
00074F0E 0895 0004                  		bclr	#4,(a5)
00074F12 4EBA 0000                  		jsr	sub_71CEC(pc)
00074F16 4EBA 0000                  		jsr	sub_71E18(pc)
00074F1A 6000 0000                  		bra.w	loc_726E2
00074F1E                            ; ===========================================================================
00074F1E                            
00074F1E                            loc_71CE0:
00074F1E 4EBA 0000                  		jsr	sub_71D9E(pc)
00074F22 4EBA 0000                  		jsr	sub_71DC6(pc)
00074F26 6000 0000                  		bra.w	loc_71E24
00074F2A                            ; End of function sub_71CCA
00074F2A                            
00074F2A                            
00074F2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074F2A                            
00074F2A                            
00074F2A                            sub_71CEC:				; XREF: sub_71CCA
00074F2A 286D 0004                  		movea.l	4(a5),a4
00074F2E 0895 0001                  		bclr	#1,(a5)
00074F32                            
00074F32                            loc_71CF4:
00074F32 7A00                       		moveq	#0,d5
00074F34 1A1C                       		move.b	(a4)+,d5
00074F36 0C05 00E0                  		cmpi.b	#-$20,d5
00074F3A 6500                       		bcs.s	loc_71D04
00074F3C 4EBA 0000                  		jsr	sub_72A5A(pc)
00074F40 60F0                       		bra.s	loc_71CF4
00074F42                            ; ===========================================================================
00074F42                            
00074F42                            loc_71D04:
00074F42 4EBA 0000                  		jsr	sub_726FE(pc)
00074F46 4A05                       		tst.b	d5
00074F48 6A00                       		bpl.s	loc_71D1A
00074F4A 4EBA 0000                  		jsr	sub_71D22(pc)
00074F4E 1A1C                       		move.b	(a4)+,d5
00074F50 6A00                       		bpl.s	loc_71D1A
00074F52 534C                       		subq.w	#1,a4
00074F54 6000 0000                  		bra.w	sub_71D60
00074F58                            ; ===========================================================================
00074F58                            
00074F58                            loc_71D1A:
00074F58 4EBA 0000                  		jsr	sub_71D40(pc)
00074F5C 6000 0000                  		bra.w	sub_71D60
00074F60                            ; End of function sub_71CEC
00074F60                            
00074F60                            
00074F60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074F60                            
00074F60                            
00074F60                            sub_71D22:				; XREF: sub_71CEC
00074F60 0405 0080                  		subi.b	#$80,d5
00074F64 6700                       		beq.s	loc_71D58
00074F66 DA2D 0008                  		add.b	8(a5),d5
00074F6A 0245 007F                  		andi.w	#$7F,d5
00074F6E E34D                       		lsl.w	#1,d5
00074F70 41FA 0000                  		lea	word_72790(pc),a0
00074F74 3C30 5000                  		move.w	(a0,d5.w),d6
00074F78 3B46 0010                  		move.w	d6,$10(a5)
00074F7C 4E75                       		rts	
00074F7E                            ; End of function sub_71D22
00074F7E                            
00074F7E                            
00074F7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074F7E                            
00074F7E                            
00074F7E                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00074F7E 1005                       		move.b	d5,d0
00074F80 122D 0002                  		move.b	2(a5),d1
00074F84                            
00074F84                            loc_71D46:
00074F84 5301                       		subq.b	#1,d1
00074F86 6700                       		beq.s	loc_71D4E
00074F88 D005                       		add.b	d5,d0
00074F8A 60F8                       		bra.s	loc_71D46
00074F8C                            ; ===========================================================================
00074F8C                            
00074F8C                            loc_71D4E:
00074F8C 1B40 000F                  		move.b	d0,$F(a5)
00074F90 1B40 000E                  		move.b	d0,$E(a5)
00074F94 4E75                       		rts	
00074F96                            ; End of function sub_71D40
00074F96                            
00074F96                            ; ===========================================================================
00074F96                            
00074F96                            loc_71D58:				; XREF: sub_71D22
00074F96 08D5 0001                  		bset	#1,(a5)
00074F9A 426D 0010                  		clr.w	$10(a5)
00074F9E                            
00074F9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074F9E                            
00074F9E                            
00074F9E                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
00074F9E 2B4C 0004                  		move.l	a4,4(a5)
00074FA2 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00074FA8 0815 0004                  		btst	#4,(a5)
00074FAC 6600                       		bne.s	locret_71D9C
00074FAE 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00074FB4 422D 000C                  		clr.b	$C(a5)
00074FB8 0815 0003                  		btst	#3,(a5)
00074FBC 6700                       		beq.s	locret_71D9C
00074FBE 206D 0014                  		movea.l	$14(a5),a0
00074FC2 1B58 0018                  		move.b	(a0)+,$18(a5)
00074FC6 1B58 0019                  		move.b	(a0)+,$19(a5)
00074FCA 1B58 001A                  		move.b	(a0)+,$1A(a5)
00074FCE 1018                       		move.b	(a0)+,d0
00074FD0 E208                       		lsr.b	#1,d0
00074FD2 1B40 001B                  		move.b	d0,$1B(a5)
00074FD6 426D 001C                  		clr.w	$1C(a5)
00074FDA                            
00074FDA                            locret_71D9C:
00074FDA 4E75                       		rts	
00074FDC                            ; End of function sub_71D60
00074FDC                            
00074FDC                            
00074FDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074FDC                            
00074FDC                            
00074FDC                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
00074FDC 4A2D 0012                  		tst.b	$12(a5)
00074FE0 6700                       		beq.s	locret_71DC4
00074FE2 532D 0012                  		subq.b	#1,$12(a5)
00074FE6 6600                       		bne.s	locret_71DC4
00074FE8 08D5 0001                  		bset	#1,(a5)
00074FEC 4A2D 0001                  		tst.b	1(a5)
00074FF0 6B00 0000                  		bmi.w	loc_71DBE
00074FF4 4EBA 0000                  		jsr	sub_726FE(pc)
00074FF8 584F                       		addq.w	#4,sp
00074FFA 4E75                       		rts	
00074FFC                            ; ===========================================================================
00074FFC                            
00074FFC                            loc_71DBE:
00074FFC 4EBA 0000                  		jsr	sub_729A0(pc)
00075000 584F                       		addq.w	#4,sp
00075002                            
00075002                            locret_71DC4:
00075002 4E75                       		rts	
00075004                            ; End of function sub_71D9E
00075004                            
00075004                            
00075004                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075004                            
00075004                            
00075004                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
00075004 584F                       		addq.w	#4,sp
00075006 0815 0003                  		btst	#3,(a5)
0007500A 6700                       		beq.s	locret_71E16
0007500C 4A2D 0018                  		tst.b	$18(a5)
00075010 6700                       		beq.s	loc_71DDA
00075012 532D 0018                  		subq.b	#1,$18(a5)
00075016 4E75                       		rts	
00075018                            ; ===========================================================================
00075018                            
00075018                            loc_71DDA:
00075018 532D 0019                  		subq.b	#1,$19(a5)
0007501C 6700                       		beq.s	loc_71DE2
0007501E 4E75                       		rts	
00075020                            ; ===========================================================================
00075020                            
00075020                            loc_71DE2:
00075020 206D 0014                  		movea.l	$14(a5),a0
00075024 1B68 0001 0019             		move.b	1(a0),$19(a5)
0007502A 4A2D 001B                  		tst.b	$1B(a5)
0007502E 6600                       		bne.s	loc_71DFE
00075030 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00075036 442D 001A                  		neg.b	$1A(a5)
0007503A 4E75                       		rts	
0007503C                            ; ===========================================================================
0007503C                            
0007503C                            loc_71DFE:
0007503C 532D 001B                  		subq.b	#1,$1B(a5)
00075040 1C2D 001A                  		move.b	$1A(a5),d6
00075044 4886                       		ext.w	d6
00075046 DC6D 001C                  		add.w	$1C(a5),d6
0007504A 3B46 001C                  		move.w	d6,$1C(a5)
0007504E DC6D 0010                  		add.w	$10(a5),d6
00075052 594F                       		subq.w	#4,sp
00075054                            
00075054                            locret_71E16:
00075054 4E75                       		rts	
00075056                            ; End of function sub_71DC6
00075056                            
00075056                            
00075056                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075056                            
00075056                            
00075056                            sub_71E18:				; XREF: sub_71CCA
00075056 0815 0001                  		btst	#1,(a5)
0007505A 6600                       		bne.s	locret_71E48
0007505C 3C2D 0010                  		move.w	$10(a5),d6
00075060 6700                       		beq.s	loc_71E4A
00075062                            
00075062                            loc_71E24:				; XREF: sub_71CCA
00075062 102D 001E                  		move.b	$1E(a5),d0
00075066 4880                       		ext.w	d0
00075068 DC40                       		add.w	d0,d6
0007506A 0815 0002                  		btst	#2,(a5)
0007506E 6600                       		bne.s	locret_71E48
00075070 3206                       		move.w	d6,d1
00075072 E049                       		lsr.w	#8,d1
00075074 103C 00A4                  		move.b	#-$5C,d0
00075078 4EBA 0000                  		jsr	sub_72722(pc)
0007507C 1206                       		move.b	d6,d1
0007507E 103C 00A0                  		move.b	#-$60,d0
00075082 4EBA 0000                  		jsr	sub_72722(pc)
00075086                            
00075086                            locret_71E48:
00075086 4E75                       		rts	
00075088                            ; ===========================================================================
00075088                            
00075088                            loc_71E4A:
00075088 08D5 0001                  		bset	#1,(a5)
0007508C 4E75                       		rts	
0007508E                            ; End of function sub_71E18
0007508E                            
0007508E                            ; ===========================================================================
0007508E                            
0007508E                            loc_71E50:				; XREF: sub_71B4C
0007508E 6B00                       		bmi.s	loc_71E94
00075090 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00075096 6700 0000                  		beq.w	loc_71EFE
0007509A 1D7C 0002 0003             		move.b	#2,3(a6)
000750A0 7602                       		moveq	#2,d3
000750A2 103C 00B4                  		move.b	#-$4C,d0
000750A6 7200                       		moveq	#0,d1
000750A8                            
000750A8                            loc_71E6A:
000750A8 4EBA 0000                  		jsr	sub_7272E(pc)
000750AC 4EBA 0000                  		jsr	sub_72764(pc)
000750B0 5200                       		addq.b	#1,d0
000750B2 51CB FFF4                  		dbf	d3,loc_71E6A
000750B6                            
000750B6 7602                       		moveq	#2,d3
000750B8 7028                       		moveq	#$28,d0
000750BA                            
000750BA                            loc_71E7C:
000750BA 1203                       		move.b	d3,d1
000750BC 4EBA 0000                  		jsr	sub_7272E(pc)
000750C0 5801                       		addq.b	#4,d1
000750C2 4EBA 0000                  		jsr	sub_7272E(pc)
000750C6 51CB FFF2                  		dbf	d3,loc_71E7C
000750CA                            
000750CA 4EBA 0000                  		jsr	sub_729B6(pc)
000750CE 6000 FDB2                  		bra.w	loc_71C44
000750D2                            ; ===========================================================================
000750D2                            
000750D2                            loc_71E94:				; XREF: loc_71E50
000750D2 422E 0003                  		clr.b	3(a6)
000750D6 7630                       		moveq	#$30,d3
000750D8 4BEE 0040                  		lea	$40(a6),a5
000750DC 7806                       		moveq	#6,d4
000750DE                            
000750DE                            loc_71EA0:
000750DE 0815 0007                  		btst	#7,(a5)
000750E2 6700                       		beq.s	loc_71EB8
000750E4 0815 0002                  		btst	#2,(a5)
000750E8 6600                       		bne.s	loc_71EB8
000750EA 103C 00B4                  		move.b	#-$4C,d0
000750EE 122D 000A                  		move.b	$A(a5),d1
000750F2 4EBA 0000                  		jsr	sub_72722(pc)
000750F6                            
000750F6                            loc_71EB8:
000750F6 DAC3                       		adda.w	d3,a5
000750F8 51CC FFE4                  		dbf	d4,loc_71EA0
000750FC                            
000750FC 4BEE 0220                  		lea	$220(a6),a5
00075100 7802                       		moveq	#2,d4
00075102                            
00075102                            loc_71EC4:
00075102 0815 0007                  		btst	#7,(a5)
00075106 6700                       		beq.s	loc_71EDC
00075108 0815 0002                  		btst	#2,(a5)
0007510C 6600                       		bne.s	loc_71EDC
0007510E 103C 00B4                  		move.b	#-$4C,d0
00075112 122D 000A                  		move.b	$A(a5),d1
00075116 4EBA 0000                  		jsr	sub_72722(pc)
0007511A                            
0007511A                            loc_71EDC:
0007511A DAC3                       		adda.w	d3,a5
0007511C 51CC FFE4                  		dbf	d4,loc_71EC4
00075120                            
00075120 4BEE 0340                  		lea	$340(a6),a5
00075124 0815 0007                  		btst	#7,(a5)
00075128 6700                       		beq.s	loc_71EFE
0007512A 0815 0002                  		btst	#2,(a5)
0007512E 6600                       		bne.s	loc_71EFE
00075130 103C 00B4                  		move.b	#-$4C,d0
00075134 122D 000A                  		move.b	$A(a5),d1
00075138 4EBA 0000                  		jsr	sub_72722(pc)
0007513C                            
0007513C                            loc_71EFE:
0007513C 6000 FD44                  		bra.w	loc_71C44
00075140                            
00075140                            ; ---------------------------------------------------------------------------
00075140                            ; Subroutine to	play a sound or	music track
00075140                            ; ---------------------------------------------------------------------------
00075140                            
00075140                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075140                            
00075140                            
00075140                            Sound_Play:				; XREF: sub_71B4C
00075140 2079 0007 4B9E             		movea.l	(Go_SoundTypes).l,a0
00075146 43EE 000A                  		lea	$A(a6),a1	; load music track number
0007514A 1616                       		move.b	0(a6),d3
0007514C 7802                       		moveq	#2,d4
0007514E                            
0007514E                            loc_71F12:
0007514E 1011                       		move.b	(a1),d0		; move track number to d0
00075150 1200                       		move.b	d0,d1
00075152 4219                       		clr.b	(a1)+
00075154 0400 0081                  		subi.b	#$81,d0
00075158 6500                       		bcs.s	loc_71F3E
0007515A 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00075160 6700                       		beq.s	loc_71F2C
00075162 1D41 000A                  		move.b	d1,$A(a6)
00075166 6000                       		bra.s	loc_71F3E
00075168                            ; ===========================================================================
00075168                            
00075168                            loc_71F2C:
00075168 0240 007F                  		andi.w	#$7F,d0
0007516C 1430 0000                  		move.b	(a0,d0.w),d2
00075170 B403                       		cmp.b	d3,d2
00075172 6500                       		bcs.s	loc_71F3E
00075174 1602                       		move.b	d2,d3
00075176 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0007517A                            
0007517A                            loc_71F3E:
0007517A 51CC FFD2                  		dbf	d4,loc_71F12
0007517E                            
0007517E 4A03                       		tst.b	d3
00075180 6B00                       		bmi.s	locret_71F4A
00075182 1C83                       		move.b	d3,0(a6)
00075184                            
00075184                            locret_71F4A:
00075184 4E75                       		rts	
00075186                            ; End of function Sound_Play
00075186                            
00075186                            
00075186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075186                            
00075186                            
00075186                            Sound_ChkValue:				; XREF: sub_71B4C
00075186 7E00                       		moveq	#0,d7
00075188 1E2E 0009                  		move.b	9(a6),d7
0007518C 6700 0000                  		beq.w	Sound_E4
00075190 6A00                       		bpl.s	locret_71F8C
00075192 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
00075198 0C07 009F                  		cmpi.b	#$9F,d7
0007519C 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
000751A0 0C07 00A0                  		cmpi.b	#$A0,d7
000751A4 6500 0000                  		bcs.w	locret_71F8C
000751A8 0C07 00CF                  		cmpi.b	#$CF,d7
000751AC 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
000751B0 0C07 00D0                  		cmpi.b	#$D0,d7
000751B4 6500 0000                  		bcs.w	locret_71F8C
000751B8 0C07 00E0                  		cmpi.b	#$E0,d7
000751BC 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
000751C0 0C07 00E5                  		cmpi.b	#$E5,d7
000751C4 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
000751C6                            
000751C6                            locret_71F8C:
000751C6 4E75                       		rts	
000751C8                            ; ===========================================================================
000751C8                            
000751C8                            Sound_E0toE5				; XREF: Sound_ChkValue
000751C8 0407 00E0                  		subi.b	#$E0,d7
000751CC E54F                       		lsl.w	#2,d7
000751CE 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000751D2                            ; ===========================================================================
000751D2                            
000751D2                            Sound_ExIndex:
000751D2 6000 0000                  		bra.w	Sound_E0
000751D6                            ; ===========================================================================
000751D6 6000 0000                  		bra.w	Sound_E1
000751DA                            ; ===========================================================================
000751DA 6000 0000                  		bra.w	Sound_E2
000751DE                            ; ===========================================================================
000751DE 6000 0000                  		bra.w	Sound_E3
000751E2                            ; ===========================================================================
000751E2 6000 0000                  		bra.w	Sound_E4
000751E6                            ; ===========================================================================
000751E6 6000 0000                  		bra.w	Sound_E5
000751EA                            ; ===========================================================================
000751EA                            ; ---------------------------------------------------------------------------
000751EA                            ; Play "Say-gaa" PCM sound
000751EA                            ; ---------------------------------------------------------------------------
000751EA                            
000751EA                            Sound_E1:				  
000751EA 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
000751F0 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
000751F6 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
000751FE                            PlayPCM_Loop:	  
000751FE 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00075204 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
00075208 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0007520C 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0007520E 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
00075210 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
00075214 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0007521A 4EB8 1418                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0007521E 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
00075224 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
00075226 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
00075228                            return_PlayPCM: 
00075228 584F                       		addq.w	#4,sp 
0007522A 4E75                       		rts
0007522C                            		
0007522C                            ; ---------------------------------------------------------------------------
0007522C                            ; Play you are an idiot pcm sound
0007522C                            ; since the sfx already crashes the game forever load it here :V
0007522C                            ; ---------------------------------------------------------------------------
0007522C                            
0007522C                            Sound_E5: 
0007522C 4EB8 14E8                  		jsr	ClearScreen
00075230                            		;control port on a5
00075230 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
00075236 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
0007523C 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
00075240 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
00075244 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
00075248                            		
00075248 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
0007524C                            		
0007524C 2ABC 4000 0000             		move.l	#$40000000,(a5)
00075252 41F9 0002 417E             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
00075258 4EB8 1664                  		jsr	NemDec
0007525C 43F9 00FF 0000             		lea	($FF0000).l,a1
00075262 41F9 0002 4120             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
00075268 303C 0000                  		move.w	#0,d0
0007526C 4EB8 1942                  		jsr	EniDec
00075270 43F9 00FF 0000             		lea	($FF0000).l,a1
00075276 203C 4304 0003             		move.l	#$43040003,d0
0007527C 7223                       		moveq	#35,d1
0007527E 740D                       		moveq	#13,d2
00075280 4EB8 1644                  		jsr	ShowVDPGraphics
00075284 7014                       		moveq	#20,d0
00075286 4EB8 2302                  		jsr	PalLoad2	; load pallet
0007528A                            		
0007528A                            Sound_E5_StartPCM:
0007528A 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00075290 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
00075296 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007529E                            PlayPCM_LoopE5:	  
0007529E                            
0007529E 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000752A4                            		
000752A4 5278 FE24                  		addq.w	#1,($FFFFFE24).w
000752A8                            		
000752A8 1038 FE24                  		move.b	($FFFFFE24).w,d0
000752AC 0200 000F                  		andi.b	#$F,d0
000752B0 6700                       		beq.s	SfxE5SwapPalette
000752B2                            		
000752B2 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
000752B6 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
000752BA 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
000752BC 67CC                       		beq.s	Sound_E5_StartPCM			; If d3 = 0, we finished playing the PCM sample, DONT STOP
000752BE 60DE                       		bra.s	PlayPCM_LoopE5
000752C0                            		
000752C0                            SfxE5SwapPalette:
000752C0                            		
000752C0 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
000752C6                            		
000752C6                            		
000752C6 0838 0004 FE24             		btst	#4,($FFFFFE24).w
000752CC 6700                       		beq.s	@not_black
000752CE 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
000752D4 6000                       		bra.s	@merge
000752D6                            	@not_black:
000752D6 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
000752DC                            	@merge:
000752DC 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
000752E0 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
000752E4 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
000752EA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000752EE                            		
000752EE 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
000752F2 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
000752F6 60A6                       		bra.s	PlayPCM_LoopE5
000752F8                            		
000752F8                            ; ===========================================================================
000752F8                            ; ---------------------------------------------------------------------------
000752F8                            ; Play music track $81-$9F
000752F8                            ; ---------------------------------------------------------------------------
000752F8                            
000752F8                            Sound_81to9F:				; XREF: Sound_ChkValue
000752F8 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
000752FC 6600                       		bne.s	loc_72024	; if not, branch
000752FE 4A2E 0027                  		tst.b	$27(a6)
00075302 6600 0000                  		bne.w	loc_721B6
00075306 4BEE 0040                  		lea	$40(a6),a5
0007530A 7009                       		moveq	#9,d0
0007530C                            
0007530C                            loc_71FE6:
0007530C 0895 0002                  		bclr	#2,(a5)
00075310 DAFC 0030                  		adda.w	#$30,a5
00075314 51C8 FFF6                  		dbf	d0,loc_71FE6
00075318                            
00075318 4BEE 0220                  		lea	$220(a6),a5
0007531C 7005                       		moveq	#5,d0
0007531E                            
0007531E                            loc_71FF8:
0007531E 0895 0007                  		bclr	#7,(a5)
00075322 DAFC 0030                  		adda.w	#$30,a5
00075326 51C8 FFF6                  		dbf	d0,loc_71FF8
0007532A 4216                       		clr.b	0(a6)
0007532C 204E                       		movea.l	a6,a0
0007532E 43EE 03A0                  		lea	$3A0(a6),a1
00075332 303C 0087                  		move.w	#$87,d0
00075336                            
00075336                            loc_72012:
00075336 22D8                       		move.l	(a0)+,(a1)+
00075338 51C8 FFFC                  		dbf	d0,loc_72012
0007533C                            
0007533C 1D7C 0080 0027             		move.b	#$80,$27(a6)
00075342 4216                       		clr.b	0(a6)
00075344 6000                       		bra.s	loc_7202C
00075346                            ; ===========================================================================
00075346                            
00075346                            loc_72024:
00075346 422E 0027                  		clr.b	$27(a6)
0007534A 422E 0026                  		clr.b	$26(a6)
0007534E                            
0007534E                            loc_7202C:
0007534E 4EBA 0000                  		jsr	sub_725CA(pc)
00075352 2879 0007 4BAE             		movea.l	(off_719A0).l,a4
00075358 0407 0081                  		subi.b	#$81,d7
0007535C 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00075362 2879 0007 4BA6             		movea.l	(Go_MusicIndex).l,a4
00075368 E54F                       		lsl.w	#2,d7
0007536A 2874 7000                  		movea.l	(a4,d7.w),a4
0007536E 7000                       		moveq	#0,d0
00075370 3014                       		move.w	(a4),d0
00075372 D08C                       		add.l	a4,d0
00075374 2D40 0018                  		move.l	d0,$18(a6)
00075378 102C 0005                  		move.b	5(a4),d0
0007537C 1D40 0028                  		move.b	d0,$28(a6)
00075380 4A2E 002A                  		tst.b	$2A(a6)
00075384 6700                       		beq.s	loc_72068
00075386 102E 0029                  		move.b	$29(a6),d0
0007538A                            
0007538A                            loc_72068:
0007538A 1D40 0002                  		move.b	d0,2(a6)
0007538E 1D40 0001                  		move.b	d0,1(a6)
00075392 7200                       		moveq	#0,d1
00075394 264C                       		movea.l	a4,a3
00075396 5C4C                       		addq.w	#6,a4
00075398 7E00                       		moveq	#0,d7
0007539A 1E2B 0002                  		move.b	2(a3),d7
0007539E 6700 0000                  		beq.w	loc_72114
000753A2 5307                       		subq.b	#1,d7
000753A4 123C 00C0                  		move.b	#-$40,d1
000753A8 182B 0004                  		move.b	4(a3),d4
000753AC 7C30                       		moveq	#$30,d6
000753AE 1A3C 0001                  		move.b	#1,d5
000753B2 43EE 0040                  		lea	$40(a6),a1
000753B6 45FA 0000                  		lea	byte_721BA(pc),a2
000753BA                            
000753BA                            loc_72098:
000753BA 08D1 0007                  		bset	#7,(a1)
000753BE 135A 0001                  		move.b	(a2)+,1(a1)
000753C2 1344 0002                  		move.b	d4,2(a1)
000753C6 1346 000D                  		move.b	d6,$D(a1)
000753CA 1341 000A                  		move.b	d1,$A(a1)
000753CE 1345 000E                  		move.b	d5,$E(a1)
000753D2 7000                       		moveq	#0,d0
000753D4 301C                       		move.w	(a4)+,d0
000753D6 D08B                       		add.l	a3,d0
000753D8 2340 0004                  		move.l	d0,4(a1)
000753DC 335C 0008                  		move.w	(a4)+,8(a1)
000753E0 D2C6                       		adda.w	d6,a1
000753E2 51CF FFD6                  		dbf	d7,loc_72098
000753E6 0C2B 0007 0002             		cmpi.b	#7,2(a3)
000753EC 6600                       		bne.s	loc_720D8
000753EE 702B                       		moveq	#$2B,d0
000753F0 7200                       		moveq	#0,d1
000753F2 4EBA 0000                  		jsr	sub_7272E(pc)
000753F6 6000 0000                  		bra.w	loc_72114
000753FA                            ; ===========================================================================
000753FA                            
000753FA                            loc_720D8:
000753FA 7028                       		moveq	#$28,d0
000753FC 7206                       		moveq	#6,d1
000753FE 4EBA 0000                  		jsr	sub_7272E(pc)
00075402 103C 0042                  		move.b	#$42,d0
00075406 727F                       		moveq	#$7F,d1
00075408 4EBA 0000                  		jsr	sub_72764(pc)
0007540C 103C 004A                  		move.b	#$4A,d0
00075410 727F                       		moveq	#$7F,d1
00075412 4EBA 0000                  		jsr	sub_72764(pc)
00075416 103C 0046                  		move.b	#$46,d0
0007541A 727F                       		moveq	#$7F,d1
0007541C 4EBA 0000                  		jsr	sub_72764(pc)
00075420 103C 004E                  		move.b	#$4E,d0
00075424 727F                       		moveq	#$7F,d1
00075426 4EBA 0000                  		jsr	sub_72764(pc)
0007542A 103C 00B6                  		move.b	#-$4A,d0
0007542E 123C 00C0                  		move.b	#-$40,d1
00075432 4EBA 0000                  		jsr	sub_72764(pc)
00075436                            
00075436                            loc_72114:
00075436 7E00                       		moveq	#0,d7
00075438 1E2B 0003                  		move.b	3(a3),d7
0007543C 6700                       		beq.s	loc_72154
0007543E 5307                       		subq.b	#1,d7
00075440 43EE 0190                  		lea	$190(a6),a1
00075444 45FA 0000                  		lea	byte_721C2(pc),a2
00075448                            
00075448                            loc_72126:
00075448 08D1 0007                  		bset	#7,(a1)
0007544C 135A 0001                  		move.b	(a2)+,1(a1)
00075450 1344 0002                  		move.b	d4,2(a1)
00075454 1346 000D                  		move.b	d6,$D(a1)
00075458 1345 000E                  		move.b	d5,$E(a1)
0007545C 7000                       		moveq	#0,d0
0007545E 301C                       		move.w	(a4)+,d0
00075460 D08B                       		add.l	a3,d0
00075462 2340 0004                  		move.l	d0,4(a1)
00075466 335C 0008                  		move.w	(a4)+,8(a1)
0007546A 101C                       		move.b	(a4)+,d0
0007546C 135C 000B                  		move.b	(a4)+,$B(a1)
00075470 D2C6                       		adda.w	d6,a1
00075472 51CF FFD4                  		dbf	d7,loc_72126
00075476                            
00075476                            loc_72154:
00075476 43EE 0220                  		lea	$220(a6),a1
0007547A 7E05                       		moveq	#5,d7
0007547C                            
0007547C                            loc_7215A:
0007547C 4A11                       		tst.b	(a1)
0007547E 6A00 0000                  		bpl.w	loc_7217C
00075482 7000                       		moveq	#0,d0
00075484 1029 0001                  		move.b	1(a1),d0
00075488 6B00                       		bmi.s	loc_7216E
0007548A 5500                       		subq.b	#2,d0
0007548C E508                       		lsl.b	#2,d0
0007548E 6000                       		bra.s	loc_72170
00075490                            ; ===========================================================================
00075490                            
00075490                            loc_7216E:
00075490 E608                       		lsr.b	#3,d0
00075492                            
00075492                            loc_72170:
00075492 41FA 0000                  		lea	dword_722CC(pc),a0
00075496 2070 0000                  		movea.l	(a0,d0.w),a0
0007549A 08D0 0002                  		bset	#2,(a0)
0007549E                            
0007549E                            loc_7217C:
0007549E D2C6                       		adda.w	d6,a1
000754A0 51CF FFDA                  		dbf	d7,loc_7215A
000754A4                            
000754A4 4A6E 0340                  		tst.w	$340(a6)
000754A8 6A00                       		bpl.s	loc_7218E
000754AA 08EE 0002 0100             		bset	#2,$100(a6)
000754B0                            
000754B0                            loc_7218E:
000754B0 4A6E 0370                  		tst.w	$370(a6)
000754B4 6A00                       		bpl.s	loc_7219A
000754B6 08EE 0002 01F0             		bset	#2,$1F0(a6)
000754BC                            
000754BC                            loc_7219A:
000754BC 4BEE 0070                  		lea	$70(a6),a5
000754C0 7805                       		moveq	#5,d4
000754C2                            
000754C2                            loc_721A0:
000754C2 4EBA 0000                  		jsr	sub_726FE(pc)
000754C6 DAC6                       		adda.w	d6,a5
000754C8 51CC FFF8                  		dbf	d4,loc_721A0
000754CC 7802                       		moveq	#2,d4
000754CE                            
000754CE                            loc_721AC:
000754CE 4EBA 0000                  		jsr	sub_729A0(pc)
000754D2 DAC6                       		adda.w	d6,a5
000754D4 51CC FFF8                  		dbf	d4,loc_721AC
000754D8                            
000754D8                            loc_721B6:
000754D8 584F                       		addq.w	#4,sp
000754DA 4E75                       		rts	
000754DC                            ; ===========================================================================
000754DC 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
000754E4                            		even
000754E4 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
000754E8                            		even
000754E8                            ; ===========================================================================
000754E8                            ; ---------------------------------------------------------------------------
000754E8                            ; Play normal sound effect
000754E8                            ; ---------------------------------------------------------------------------
000754E8                            
000754E8                            Sound_A0toCF:				; XREF: Sound_ChkValue
000754E8 4A2E 0027                  		tst.b	$27(a6)
000754EC 6600 0000                  		bne.w	loc_722C6
000754F0 4A2E 0004                  		tst.b	4(a6)
000754F4 6600 0000                  		bne.w	loc_722C6
000754F8 4A2E 0024                  		tst.b	$24(a6)
000754FC 6600 0000                  		bne.w	loc_722C6
00075500 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
00075504 6600                       		bne.s	Sound_notB5	; if not, branch
00075506 4A2E 002B                  		tst.b	$2B(a6)
0007550A 6600                       		bne.s	loc_721EE
0007550C 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
00075510                            
00075510                            loc_721EE:
00075510 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
00075516                            
00075516                            Sound_notB5:
00075516 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
0007551A 6600                       		bne.s	Sound_notA7	; if not, branch
0007551C 4A2E 002C                  		tst.b	$2C(a6)
00075520 6600 0000                  		bne.w	locret_722C4
00075524 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0007552A                            
0007552A                            Sound_notA7:
0007552A 2079 0007 4BAA             		movea.l	(Go_SoundIndex).l,a0
00075530 0407 00A0                  		subi.b	#$A0,d7
00075534 E54F                       		lsl.w	#2,d7
00075536 2670 7000                  		movea.l	(a0,d7.w),a3
0007553A 224B                       		movea.l	a3,a1
0007553C 7200                       		moveq	#0,d1
0007553E 3219                       		move.w	(a1)+,d1
00075540 D28B                       		add.l	a3,d1
00075542 1A19                       		move.b	(a1)+,d5
00075544 1E19                       		move.b	(a1)+,d7
00075546 5307                       		subq.b	#1,d7
00075548 7C30                       		moveq	#$30,d6
0007554A                            
0007554A                            loc_72228:
0007554A 7600                       		moveq	#0,d3
0007554C 1629 0001                  		move.b	1(a1),d3
00075550 1803                       		move.b	d3,d4
00075552 6B00                       		bmi.s	loc_72244
00075554 5543                       		subq.w	#2,d3
00075556 E54B                       		lsl.w	#2,d3
00075558 4BFA 0000                  		lea	dword_722CC(pc),a5
0007555C 2A75 3000                  		movea.l	(a5,d3.w),a5
00075560 08D5 0002                  		bset	#2,(a5)
00075564 6000                       		bra.s	loc_7226E
00075566                            ; ===========================================================================
00075566                            
00075566                            loc_72244:
00075566 E64B                       		lsr.w	#3,d3
00075568 4BFA 0000                  		lea	dword_722CC(pc),a5
0007556C 2A75 3000                  		movea.l	(a5,d3.w),a5
00075570 08D5 0002                  		bset	#2,(a5)
00075574 0C04 00C0                  		cmpi.b	#$C0,d4
00075578 6600                       		bne.s	loc_7226E
0007557A 1004                       		move.b	d4,d0
0007557C 0000 001F                  		ori.b	#$1F,d0
00075580 13C0 00C0 0011             		move.b	d0,($C00011).l
00075586 0840 0005                  		bchg	#5,d0
0007558A 13C0 00C0 0011             		move.b	d0,($C00011).l
00075590                            
00075590                            loc_7226E:
00075590 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
00075594 244D                       		movea.l	a5,a2
00075596 700B                       		moveq	#$B,d0
00075598                            
00075598                            loc_72276:
00075598 429A                       		clr.l	(a2)+
0007559A 51C8 FFFC                  		dbf	d0,loc_72276
0007559E                            
0007559E 3A99                       		move.w	(a1)+,(a5)
000755A0 1B45 0002                  		move.b	d5,2(a5)
000755A4 7000                       		moveq	#0,d0
000755A6 3019                       		move.w	(a1)+,d0
000755A8 D08B                       		add.l	a3,d0
000755AA 2B40 0004                  		move.l	d0,4(a5)
000755AE 3B59 0008                  		move.w	(a1)+,8(a5)
000755B2 1B7C 0001 000E             		move.b	#1,$E(a5)
000755B8 1B46 000D                  		move.b	d6,$D(a5)
000755BC 4A04                       		tst.b	d4
000755BE 6B00                       		bmi.s	loc_722A8
000755C0 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000755C6 2B41 0020                  		move.l	d1,$20(a5)
000755CA                            
000755CA                            loc_722A8:
000755CA 51CF FF7E                  		dbf	d7,loc_72228
000755CE                            
000755CE 4A2E 0250                  		tst.b	$250(a6)
000755D2 6A00                       		bpl.s	loc_722B8
000755D4 08EE 0002 0340             		bset	#2,$340(a6)
000755DA                            
000755DA                            loc_722B8:
000755DA 4A2E 0310                  		tst.b	$310(a6)
000755DE 6A00                       		bpl.s	locret_722C4
000755E0 08EE 0002 0370             		bset	#2,$370(a6)
000755E6                            
000755E6                            locret_722C4:
000755E6 4E75                       		rts	
000755E8                            ; ===========================================================================
000755E8                            
000755E8                            loc_722C6:
000755E8 4216                       		clr.b	0(a6)
000755EA 4E75                       		rts	
000755EC                            ; ===========================================================================
000755EC 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
000755F0 0000 0000                  		dc.l 0
000755F4 00FF F100                  		dc.l $FFF100
000755F8 00FF F130                  		dc.l $FFF130
000755FC 00FF F190                  		dc.l $FFF190
00075600 00FF F1C0                  		dc.l $FFF1C0
00075604 00FF F1F0                  		dc.l $FFF1F0
00075608 00FF F1F0                  		dc.l $FFF1F0
0007560C 00FF F220                  dword_722EC:	dc.l $FFF220
00075610 0000 0000                  		dc.l 0
00075614 00FF F250                  		dc.l $FFF250
00075618 00FF F280                  		dc.l $FFF280
0007561C 00FF F2B0                  		dc.l $FFF2B0
00075620 00FF F2E0                  		dc.l $FFF2E0
00075624 00FF F310                  		dc.l $FFF310
00075628 00FF F310                  		dc.l $FFF310
0007562C                            ; ===========================================================================
0007562C                            ; ---------------------------------------------------------------------------
0007562C                            ; Play GHZ waterfall sound
0007562C                            ; ---------------------------------------------------------------------------
0007562C                            
0007562C                            Sound_D0toDF:				; XREF: Sound_ChkValue
0007562C 4A2E 0027                  		tst.b	$27(a6)
00075630 6600 0000                  		bne.w	locret_723C6
00075634 4A2E 0004                  		tst.b	4(a6)
00075638 6600 0000                  		bne.w	locret_723C6
0007563C 4A2E 0024                  		tst.b	$24(a6)
00075640 6600 0000                  		bne.w	locret_723C6
00075644 2079 0007 4BA2             		movea.l	(Go_SoundD0).l,a0
0007564A 0407 00D0                  		subi.b	#$D0,d7
0007564E E54F                       		lsl.w	#2,d7
00075650 2670 7000                  		movea.l	(a0,d7.w),a3
00075654 224B                       		movea.l	a3,a1
00075656 7000                       		moveq	#0,d0
00075658 3019                       		move.w	(a1)+,d0
0007565A D08B                       		add.l	a3,d0
0007565C 2D40 0020                  		move.l	d0,$20(a6)
00075660 1A19                       		move.b	(a1)+,d5
00075662 1E19                       		move.b	(a1)+,d7
00075664 5307                       		subq.b	#1,d7
00075666 7C30                       		moveq	#$30,d6
00075668                            
00075668                            loc_72348:
00075668 1829 0001                  		move.b	1(a1),d4
0007566C 6B00                       		bmi.s	loc_7235A
0007566E 08EE 0002 0100             		bset	#2,$100(a6)
00075674 4BEE 0340                  		lea	$340(a6),a5
00075678 6000                       		bra.s	loc_72364
0007567A                            ; ===========================================================================
0007567A                            
0007567A                            loc_7235A:
0007567A 08EE 0002 01F0             		bset	#2,$1F0(a6)
00075680 4BEE 0370                  		lea	$370(a6),a5
00075684                            
00075684                            loc_72364:
00075684 244D                       		movea.l	a5,a2
00075686 700B                       		moveq	#$B,d0
00075688                            
00075688                            loc_72368:
00075688 429A                       		clr.l	(a2)+
0007568A 51C8 FFFC                  		dbf	d0,loc_72368
0007568E                            
0007568E 3A99                       		move.w	(a1)+,(a5)
00075690 1B45 0002                  		move.b	d5,2(a5)
00075694 7000                       		moveq	#0,d0
00075696 3019                       		move.w	(a1)+,d0
00075698 D08B                       		add.l	a3,d0
0007569A 2B40 0004                  		move.l	d0,4(a5)
0007569E 3B59 0008                  		move.w	(a1)+,8(a5)
000756A2 1B7C 0001 000E             		move.b	#1,$E(a5)
000756A8 1B46 000D                  		move.b	d6,$D(a5)
000756AC 4A04                       		tst.b	d4
000756AE 6B00                       		bmi.s	loc_72396
000756B0 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000756B6                            
000756B6                            loc_72396:
000756B6 51CF FFB0                  		dbf	d7,loc_72348
000756BA                            
000756BA 4A2E 0250                  		tst.b	$250(a6)
000756BE 6A00                       		bpl.s	loc_723A6
000756C0 08EE 0002 0340             		bset	#2,$340(a6)
000756C6                            
000756C6                            loc_723A6:
000756C6 4A2E 0310                  		tst.b	$310(a6)
000756CA 6A00                       		bpl.s	locret_723C6
000756CC 08EE 0002 0370             		bset	#2,$370(a6)
000756D2 0004 001F                  		ori.b	#$1F,d4
000756D6 13C4 00C0 0011             		move.b	d4,($C00011).l
000756DC 0844 0005                  		bchg	#5,d4
000756E0 13C4 00C0 0011             		move.b	d4,($C00011).l
000756E6                            
000756E6                            locret_723C6:
000756E6 4E75                       		rts	
000756E8                            ; End of function Sound_ChkValue
000756E8                            
000756E8                            ; ===========================================================================
000756E8 00FF F100                  		dc.l $FFF100
000756EC 00FF F1F0                  		dc.l $FFF1F0
000756F0 00FF F250                  		dc.l $FFF250
000756F4 00FF F310                  		dc.l $FFF310
000756F8 00FF F340                  		dc.l $FFF340
000756FC 00FF F370                  		dc.l $FFF370
00075700                            
00075700                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075700                            
00075700                            
00075700                            Snd_FadeOut1:				; XREF: Sound_E0
00075700 4216                       		clr.b	0(a6)
00075702 4BEE 0220                  		lea	$220(a6),a5
00075706 7E05                       		moveq	#5,d7
00075708                            
00075708                            loc_723EA:
00075708 4A15                       		tst.b	(a5)
0007570A 6A00 0000                  		bpl.w	loc_72472
0007570E 0895 0007                  		bclr	#7,(a5)
00075712 7600                       		moveq	#0,d3
00075714 162D 0001                  		move.b	1(a5),d3
00075718 6B00                       		bmi.s	loc_7243C
0007571A 4EBA 0000                  		jsr	sub_726FE(pc)
0007571E 0C03 0004                  		cmpi.b	#4,d3
00075722 6600                       		bne.s	loc_72416
00075724 4A2E 0340                  		tst.b	$340(a6)
00075728 6A00                       		bpl.s	loc_72416
0007572A 4BEE 0340                  		lea	$340(a6),a5
0007572E 226E 0020                  		movea.l	$20(a6),a1
00075732 6000                       		bra.s	loc_72428
00075734                            ; ===========================================================================
00075734                            
00075734                            loc_72416:
00075734 5503                       		subq.b	#2,d3
00075736 E50B                       		lsl.b	#2,d3
00075738 41FA FEB2                  		lea	dword_722CC(pc),a0
0007573C 264D                       		movea.l	a5,a3
0007573E 2A70 3000                  		movea.l	(a0,d3.w),a5
00075742 226E 0018                  		movea.l	$18(a6),a1
00075746                            
00075746                            loc_72428:
00075746 0895 0002                  		bclr	#2,(a5)
0007574A 08D5 0001                  		bset	#1,(a5)
0007574E 102D 000B                  		move.b	$B(a5),d0
00075752 4EBA 0000                  		jsr	sub_72C4E(pc)
00075756 2A4B                       		movea.l	a3,a5
00075758 6000                       		bra.s	loc_72472
0007575A                            ; ===========================================================================
0007575A                            
0007575A                            loc_7243C:
0007575A 4EBA 0000                  		jsr	sub_729A0(pc)
0007575E 41EE 0370                  		lea	$370(a6),a0
00075762 0C03 00E0                  		cmpi.b	#$E0,d3
00075766 6700                       		beq.s	loc_7245A
00075768 0C03 00C0                  		cmpi.b	#$C0,d3
0007576C 6700                       		beq.s	loc_7245A
0007576E E60B                       		lsr.b	#3,d3
00075770 41FA FE7A                  		lea	dword_722CC(pc),a0
00075774 2070 3000                  		movea.l	(a0,d3.w),a0
00075778                            
00075778                            loc_7245A:
00075778 0890 0002                  		bclr	#2,(a0)
0007577C 08D0 0001                  		bset	#1,(a0)
00075780 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00075786 6600                       		bne.s	loc_72472
00075788 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00075790                            
00075790                            loc_72472:
00075790 DAFC 0030                  		adda.w	#$30,a5
00075794 51CF FF72                  		dbf	d7,loc_723EA
00075798                            
00075798 4E75                       		rts	
0007579A                            ; End of function Snd_FadeOut1
0007579A                            
0007579A                            
0007579A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007579A                            
0007579A                            
0007579A                            Snd_FadeOut2:				; XREF: Sound_E0
0007579A 4BEE 0340                  		lea	$340(a6),a5
0007579E 4A15                       		tst.b	(a5)
000757A0 6A00                       		bpl.s	loc_724AE
000757A2 0895 0007                  		bclr	#7,(a5)
000757A6 0815 0002                  		btst	#2,(a5)
000757AA 6600                       		bne.s	loc_724AE
000757AC 4EBA 0000                  		jsr	loc_7270A(pc)
000757B0 4BEE 0100                  		lea	$100(a6),a5
000757B4 0895 0002                  		bclr	#2,(a5)
000757B8 08D5 0001                  		bset	#1,(a5)
000757BC 4A15                       		tst.b	(a5)
000757BE 6A00                       		bpl.s	loc_724AE
000757C0 226E 0018                  		movea.l	$18(a6),a1
000757C4 102D 000B                  		move.b	$B(a5),d0
000757C8 4EBA 0000                  		jsr	sub_72C4E(pc)
000757CC                            
000757CC                            loc_724AE:
000757CC 4BEE 0370                  		lea	$370(a6),a5
000757D0 4A15                       		tst.b	(a5)
000757D2 6A00                       		bpl.s	locret_724E4
000757D4 0895 0007                  		bclr	#7,(a5)
000757D8 0815 0002                  		btst	#2,(a5)
000757DC 6600                       		bne.s	locret_724E4
000757DE 4EBA 0000                  		jsr	loc_729A6(pc)
000757E2 4BEE 01F0                  		lea	$1F0(a6),a5
000757E6 0895 0002                  		bclr	#2,(a5)
000757EA 08D5 0001                  		bset	#1,(a5)
000757EE 4A15                       		tst.b	(a5)
000757F0 6A00                       		bpl.s	locret_724E4
000757F2 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000757F8 6600                       		bne.s	locret_724E4
000757FA 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
00075802                            
00075802                            locret_724E4:
00075802 4E75                       		rts	
00075804                            ; End of function Snd_FadeOut2
00075804                            
00075804                            ; ===========================================================================
00075804                            ; ---------------------------------------------------------------------------
00075804                            ; Fade out music
00075804                            ; ---------------------------------------------------------------------------
00075804                            
00075804                            Sound_E0:				; XREF: Sound_ExIndex
00075804 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
00075808 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0007580C 1D7C 0003 0006             		move.b	#3,6(a6)
00075812 1D7C 0028 0004             		move.b	#$28,4(a6)
00075818 422E 0040                  		clr.b	$40(a6)
0007581C 422E 002A                  		clr.b	$2A(a6)
00075820 4E75                       		rts	
00075822                            
00075822                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075822                            
00075822                            
00075822                            sub_72504:				; XREF: sub_71B4C
00075822 102E 0006                  		move.b	6(a6),d0
00075826 6700                       		beq.s	loc_72510
00075828 532E 0006                  		subq.b	#1,6(a6)
0007582C 4E75                       		rts	
0007582E                            ; ===========================================================================
0007582E                            
0007582E                            loc_72510:
0007582E 532E 0004                  		subq.b	#1,4(a6)
00075832 6700 0000                  		beq.w	Sound_E4
00075836 1D7C 0003 0006             		move.b	#3,6(a6)
0007583C 4BEE 0070                  		lea	$70(a6),a5
00075840 7E05                       		moveq	#5,d7
00075842                            
00075842                            loc_72524:
00075842 4A15                       		tst.b	(a5)
00075844 6A00                       		bpl.s	loc_72538
00075846 522D 0009                  		addq.b	#1,9(a5)
0007584A 6A00                       		bpl.s	loc_72534
0007584C 0895 0007                  		bclr	#7,(a5)
00075850 6000                       		bra.s	loc_72538
00075852                            ; ===========================================================================
00075852                            
00075852                            loc_72534:
00075852 4EBA 0000                  		jsr	sub_72CB4(pc)
00075856                            
00075856                            loc_72538:
00075856 DAFC 0030                  		adda.w	#$30,a5
0007585A 51CF FFE6                  		dbf	d7,loc_72524
0007585E                            
0007585E 7E02                       		moveq	#2,d7
00075860                            
00075860                            loc_72542:
00075860 4A15                       		tst.b	(a5)
00075862 6A00                       		bpl.s	loc_72560
00075864 522D 0009                  		addq.b	#1,9(a5)
00075868 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0007586E 6500                       		bcs.s	loc_72558
00075870 0895 0007                  		bclr	#7,(a5)
00075874 6000                       		bra.s	loc_72560
00075876                            ; ===========================================================================
00075876                            
00075876                            loc_72558:
00075876 1C2D 0009                  		move.b	9(a5),d6
0007587A 4EBA 0000                  		jsr	sub_7296A(pc)
0007587E                            
0007587E                            loc_72560:
0007587E DAFC 0030                  		adda.w	#$30,a5
00075882 51CF FFDC                  		dbf	d7,loc_72542
00075886                            
00075886 4E75                       		rts	
00075888                            ; End of function sub_72504
00075888                            
00075888                            
00075888                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075888                            
00075888                            
00075888                            sub_7256A:				; XREF: Sound_E4; sub_725CA
00075888 7602                       		moveq	#2,d3
0007588A 7028                       		moveq	#$28,d0
0007588C                            
0007588C                            loc_7256E:
0007588C 1203                       		move.b	d3,d1
0007588E 4EBA 0000                  		jsr	sub_7272E(pc)
00075892 5801                       		addq.b	#4,d1
00075894 4EBA 0000                  		jsr	sub_7272E(pc)
00075898 51CB FFF2                  		dbf	d3,loc_7256E
0007589C                            
0007589C 7040                       		moveq	#$40,d0
0007589E 727F                       		moveq	#$7F,d1
000758A0 7802                       		moveq	#2,d4
000758A2                            
000758A2                            loc_72584:
000758A2 7603                       		moveq	#3,d3
000758A4                            
000758A4                            loc_72586:
000758A4 4EBA 0000                  		jsr	sub_7272E(pc)
000758A8 4EBA 0000                  		jsr	sub_72764(pc)
000758AC 5840                       		addq.w	#4,d0
000758AE 51CB FFF4                  		dbf	d3,loc_72586
000758B2                            
000758B2 0400 000F                  		subi.b	#$F,d0
000758B6 51CC FFEA                  		dbf	d4,loc_72584
000758BA                            
000758BA 4E75                       		rts	
000758BC                            ; End of function sub_7256A
000758BC                            
000758BC                            ; ===========================================================================
000758BC                            ; ---------------------------------------------------------------------------
000758BC                            ; Stop music
000758BC                            ; ---------------------------------------------------------------------------
000758BC                            
000758BC                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
000758BC 702B                       		moveq	#$2B,d0
000758BE 123C 0080                  		move.b	#$80,d1
000758C2 4EBA 0000                  		jsr	sub_7272E(pc)
000758C6 7027                       		moveq	#$27,d0
000758C8 7200                       		moveq	#0,d1
000758CA 4EBA 0000                  		jsr	sub_7272E(pc)
000758CE 204E                       		movea.l	a6,a0
000758D0 303C 00E3                  		move.w	#$E3,d0
000758D4                            
000758D4                            loc_725B6:
000758D4 4298                       		clr.l	(a0)+
000758D6 51C8 FFFC                  		dbf	d0,loc_725B6
000758DA                            
000758DA 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
000758E0 4EBA FFA6                  		jsr	sub_7256A(pc)
000758E4 6000 0000                  		bra.w	sub_729B6
000758E8                            
000758E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000758E8                            
000758E8                            
000758E8                            sub_725CA:				; XREF: Sound_ChkValue
000758E8 204E                       		movea.l	a6,a0
000758EA 1216                       		move.b	0(a6),d1
000758EC 142E 0027                  		move.b	$27(a6),d2
000758F0 162E 002A                  		move.b	$2A(a6),d3
000758F4 182E 0026                  		move.b	$26(a6),d4
000758F8 3A2E 000A                  		move.w	$A(a6),d5
000758FC 303C 0087                  		move.w	#$87,d0
00075900                            
00075900                            loc_725E4:
00075900 4298                       		clr.l	(a0)+
00075902 51C8 FFFC                  		dbf	d0,loc_725E4
00075906                            
00075906 1C81                       		move.b	d1,0(a6)
00075908 1D42 0027                  		move.b	d2,$27(a6)
0007590C 1D43 002A                  		move.b	d3,$2A(a6)
00075910 1D44 0026                  		move.b	d4,$26(a6)
00075914 3D45 000A                  		move.w	d5,$A(a6)
00075918 1D7C 0080 0009             		move.b	#$80,9(a6)
0007591E 4EBA FF68                  		jsr	sub_7256A(pc)
00075922 6000 0000                  		bra.w	sub_729B6
00075926                            ; End of function sub_725CA
00075926                            
00075926                            
00075926                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075926                            
00075926                            
00075926                            sub_7260C:				; XREF: sub_71B4C
00075926 1D6E 0002 0001             		move.b	2(a6),1(a6)
0007592C 41EE 004E                  		lea	$4E(a6),a0
00075930 7030                       		moveq	#$30,d0
00075932 7209                       		moveq	#9,d1
00075934                            
00075934                            loc_7261A:
00075934 5210                       		addq.b	#1,(a0)
00075936 D0C0                       		adda.w	d0,a0
00075938 51C9 FFFA                  		dbf	d1,loc_7261A
0007593C                            
0007593C 4E75                       		rts	
0007593E                            ; End of function sub_7260C
0007593E                            
0007593E                            ; ===========================================================================
0007593E                            ; ---------------------------------------------------------------------------
0007593E                            ; Speed	up music
0007593E                            ; ---------------------------------------------------------------------------
0007593E                            
0007593E                            Sound_E2:				; XREF: Sound_ExIndex
0007593E 4A2E 0027                  		tst.b	$27(a6)
00075942 6600                       		bne.s	loc_7263E
00075944 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0007594A 1D6E 0029 0001             		move.b	$29(a6),1(a6)
00075950 1D7C 0080 002A             		move.b	#$80,$2A(a6)
00075956 4E75                       		rts	
00075958                            ; ===========================================================================
00075958                            
00075958                            loc_7263E:
00075958 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0007595E 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
00075964 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0007596A 4E75                       		rts	
0007596C                            ; ===========================================================================
0007596C                            ; ---------------------------------------------------------------------------
0007596C                            ; Change music back to normal speed
0007596C                            ; ---------------------------------------------------------------------------
0007596C                            
0007596C                            Sound_E3:				; XREF: Sound_ExIndex
0007596C 4A2E 0027                  		tst.b	$27(a6)
00075970 6600                       		bne.s	loc_7266A
00075972 1D6E 0028 0002             		move.b	$28(a6),2(a6)
00075978 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0007597E 422E 002A                  		clr.b	$2A(a6)
00075982 4E75                       		rts	
00075984                            ; ===========================================================================
00075984                            
00075984                            loc_7266A:
00075984 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0007598A 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
00075990 422E 03CA                  		clr.b	$3CA(a6)
00075994 4E75                       		rts	
00075996                            
00075996                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075996                            
00075996                            
00075996                            sub_7267C:				; XREF: sub_71B4C
00075996 4A2E 0025                  		tst.b	$25(a6)
0007599A 6700                       		beq.s	loc_72688
0007599C 532E 0025                  		subq.b	#1,$25(a6)
000759A0 4E75                       		rts	
000759A2                            ; ===========================================================================
000759A2                            
000759A2                            loc_72688:
000759A2 4A2E 0026                  		tst.b	$26(a6)
000759A6 6700                       		beq.s	loc_726D6
000759A8 532E 0026                  		subq.b	#1,$26(a6)
000759AC 1D7C 0002 0025             		move.b	#2,$25(a6)
000759B2 4BEE 0070                  		lea	$70(a6),a5
000759B6 7E05                       		moveq	#5,d7
000759B8                            
000759B8                            loc_7269E:
000759B8 4A15                       		tst.b	(a5)
000759BA 6A00                       		bpl.s	loc_726AA
000759BC 532D 0009                  		subq.b	#1,9(a5)
000759C0 4EBA 0000                  		jsr	sub_72CB4(pc)
000759C4                            
000759C4                            loc_726AA:
000759C4 DAFC 0030                  		adda.w	#$30,a5
000759C8 51CF FFEE                  		dbf	d7,loc_7269E
000759CC 7E02                       		moveq	#2,d7
000759CE                            
000759CE                            loc_726B4:
000759CE 4A15                       		tst.b	(a5)
000759D0 6A00                       		bpl.s	loc_726CC
000759D2 532D 0009                  		subq.b	#1,9(a5)
000759D6 1C2D 0009                  		move.b	9(a5),d6
000759DA 0C06 0010                  		cmpi.b	#$10,d6
000759DE 6500                       		bcs.s	loc_726C8
000759E0 7C0F                       		moveq	#$F,d6
000759E2                            
000759E2                            loc_726C8:
000759E2 4EBA 0000                  		jsr	sub_7296A(pc)
000759E6                            
000759E6                            loc_726CC:
000759E6 DAFC 0030                  		adda.w	#$30,a5
000759EA 51CF FFE2                  		dbf	d7,loc_726B4
000759EE 4E75                       		rts	
000759F0                            ; ===========================================================================
000759F0                            
000759F0                            loc_726D6:
000759F0 08AE 0002 0040             		bclr	#2,$40(a6)
000759F6 422E 0024                  		clr.b	$24(a6)
000759FA 4E75                       		rts	
000759FC                            ; End of function sub_7267C
000759FC                            
000759FC                            ; ===========================================================================
000759FC                            
000759FC                            loc_726E2:				; XREF: sub_71CCA
000759FC 0815 0001                  		btst	#1,(a5)
00075A00 6600                       		bne.s	locret_726FC
00075A02 0815 0002                  		btst	#2,(a5)
00075A06 6600                       		bne.s	locret_726FC
00075A08 7028                       		moveq	#$28,d0
00075A0A 122D 0001                  		move.b	1(a5),d1
00075A0E 0001 00F0                  		ori.b	#-$10,d1
00075A12 6000 0000                  		bra.w	sub_7272E
00075A16                            ; ===========================================================================
00075A16                            
00075A16                            locret_726FC:
00075A16 4E75                       		rts	
00075A18                            
00075A18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A18                            
00075A18                            
00075A18                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
00075A18 0815 0004                  		btst	#4,(a5)
00075A1C 6600                       		bne.s	locret_72714
00075A1E 0815 0002                  		btst	#2,(a5)
00075A22 6600                       		bne.s	locret_72714
00075A24                            
00075A24                            loc_7270A:				; XREF: Snd_FadeOut2
00075A24 7028                       		moveq	#$28,d0
00075A26 122D 0001                  		move.b	1(a5),d1
00075A2A 6000 0000                  		bra.w	sub_7272E
00075A2E                            ; ===========================================================================
00075A2E                            
00075A2E                            locret_72714:
00075A2E 4E75                       		rts	
00075A30                            ; End of function sub_726FE
00075A30                            
00075A30                            ; ===========================================================================
00075A30                            
00075A30                            loc_72716:				; XREF: sub_72A5A
00075A30 0815 0002                  		btst	#2,(a5)
00075A34 6600                       		bne.s	locret_72720
00075A36 6000 0000                  		bra.w	sub_72722
00075A3A                            ; ===========================================================================
00075A3A                            
00075A3A                            locret_72720:
00075A3A 4E75                       		rts	
00075A3C                            
00075A3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A3C                            
00075A3C                            
00075A3C                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
00075A3C 082D 0002 0001             		btst	#2,1(a5)
00075A42 6600                       		bne.s	loc_7275A
00075A44 D02D 0001                  		add.b	1(a5),d0
00075A48                            ; End of function sub_72722
00075A48                            
00075A48                            
00075A48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A48                            
00075A48                            
00075A48                            sub_7272E:				; XREF: loc_71E6A
00075A48 1439 00A0 4000             		move.b	($A04000).l,d2
00075A4E 0802 0007                  		btst	#7,d2
00075A52 66F4                       		bne.s	sub_7272E
00075A54 13C0 00A0 4000             		move.b	d0,($A04000).l
00075A5A 4E71                       		nop	
00075A5C 4E71                       		nop	
00075A5E 4E71                       		nop	
00075A60                            
00075A60                            loc_72746:
00075A60 1439 00A0 4000             		move.b	($A04000).l,d2
00075A66 0802 0007                  		btst	#7,d2
00075A6A 66F4                       		bne.s	loc_72746
00075A6C                            
00075A6C 13C1 00A0 4001             		move.b	d1,($A04001).l
00075A72 4E75                       		rts	
00075A74                            ; End of function sub_7272E
00075A74                            
00075A74                            ; ===========================================================================
00075A74                            
00075A74                            loc_7275A:				; XREF: sub_72722
00075A74 142D 0001                  		move.b	1(a5),d2
00075A78 0882 0002                  		bclr	#2,d2
00075A7C D002                       		add.b	d2,d0
00075A7E                            
00075A7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A7E                            
00075A7E                            
00075A7E                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
00075A7E 1439 00A0 4000             		move.b	($A04000).l,d2
00075A84 0802 0007                  		btst	#7,d2
00075A88 66F4                       		bne.s	sub_72764
00075A8A 13C0 00A0 4002             		move.b	d0,($A04002).l
00075A90 4E71                       		nop	
00075A92 4E71                       		nop	
00075A94 4E71                       		nop	
00075A96                            
00075A96                            loc_7277C:
00075A96 1439 00A0 4000             		move.b	($A04000).l,d2
00075A9C 0802 0007                  		btst	#7,d2
00075AA0 66F4                       		bne.s	loc_7277C
00075AA2                            
00075AA2 13C1 00A0 4003             		move.b	d1,($A04003).l
00075AA8 4E75                       		rts	
00075AAA                            ; End of function sub_72764
00075AAA                            
00075AAA                            ; ===========================================================================
00075AAA 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00075ABC 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00075ACE 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
00075ADE 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
00075AEE 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
00075AFE 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
00075B0E 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
00075B1E 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
00075B2E 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
00075B3E 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
00075B4E 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00075B5E 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
00075B6A                            
00075B6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075B6A                            
00075B6A                            
00075B6A                            sub_72850:				; XREF: sub_71B4C
00075B6A 532D 000E                  		subq.b	#1,$E(a5)
00075B6E 6600                       		bne.s	loc_72866
00075B70 0895 0004                  		bclr	#4,(a5)
00075B74 4EBA 0000                  		jsr	sub_72878(pc)
00075B78 4EBA 0000                  		jsr	sub_728DC(pc)
00075B7C 6000 0000                  		bra.w	loc_7292E
00075B80                            ; ===========================================================================
00075B80                            
00075B80                            loc_72866:
00075B80 4EBA F45A                  		jsr	sub_71D9E(pc)
00075B84 4EBA 0000                  		jsr	sub_72926(pc)
00075B88 4EBA F47A                  		jsr	sub_71DC6(pc)
00075B8C 4EBA 0000                  		jsr	sub_728E2(pc)
00075B90 4E75                       		rts	
00075B92                            ; End of function sub_72850
00075B92                            
00075B92                            
00075B92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075B92                            
00075B92                            
00075B92                            sub_72878:				; XREF: sub_72850
00075B92 0895 0001                  		bclr	#1,(a5)
00075B96 286D 0004                  		movea.l	4(a5),a4
00075B9A                            
00075B9A                            loc_72880:
00075B9A 7A00                       		moveq	#0,d5
00075B9C 1A1C                       		move.b	(a4)+,d5
00075B9E 0C05 00E0                  		cmpi.b	#$E0,d5
00075BA2 6500                       		bcs.s	loc_72890
00075BA4 4EBA 0000                  		jsr	sub_72A5A(pc)
00075BA8 60F0                       		bra.s	loc_72880
00075BAA                            ; ===========================================================================
00075BAA                            
00075BAA                            loc_72890:
00075BAA 4A05                       		tst.b	d5
00075BAC 6A00                       		bpl.s	loc_728A4
00075BAE 4EBA 0000                  		jsr	sub_728AC(pc)
00075BB2 1A1C                       		move.b	(a4)+,d5
00075BB4 4A05                       		tst.b	d5
00075BB6 6A00                       		bpl.s	loc_728A4
00075BB8 534C                       		subq.w	#1,a4
00075BBA 6000 F3E2                  		bra.w	sub_71D60
00075BBE                            ; ===========================================================================
00075BBE                            
00075BBE                            loc_728A4:
00075BBE 4EBA F3BE                  		jsr	sub_71D40(pc)
00075BC2 6000 F3DA                  		bra.w	sub_71D60
00075BC6                            ; End of function sub_72878
00075BC6                            
00075BC6                            
00075BC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075BC6                            
00075BC6                            
00075BC6                            sub_728AC:				; XREF: sub_72878
00075BC6 0405 0081                  		subi.b	#$81,d5
00075BCA 6500                       		bcs.s	loc_728CA
00075BCC DA2D 0008                  		add.b	8(a5),d5
00075BD0 0245 007F                  		andi.w	#$7F,d5
00075BD4 E34D                       		lsl.w	#1,d5
00075BD6 41FA 0000                  		lea	word_729CE(pc),a0
00075BDA 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00075BE0 6000 F3BC                  		bra.w	sub_71D60
00075BE4                            ; ===========================================================================
00075BE4                            
00075BE4                            loc_728CA:
00075BE4 08D5 0001                  		bset	#1,(a5)
00075BE8 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00075BEE 4EBA F3AE                  		jsr	sub_71D60(pc)
00075BF2 6000 0000                  		bra.w	sub_729A0
00075BF6                            ; End of function sub_728AC
00075BF6                            
00075BF6                            
00075BF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075BF6                            
00075BF6                            
00075BF6                            sub_728DC:				; XREF: sub_72850
00075BF6 3C2D 0010                  		move.w	$10(a5),d6
00075BFA 6B00                       		bmi.s	loc_72920
00075BFC                            ; End of function sub_728DC
00075BFC                            
00075BFC                            
00075BFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075BFC                            
00075BFC                            
00075BFC                            sub_728E2:				; XREF: sub_72850
00075BFC 102D 001E                  		move.b	$1E(a5),d0
00075C00 4880                       		ext.w	d0
00075C02 DC40                       		add.w	d0,d6
00075C04 0815 0002                  		btst	#2,(a5)
00075C08 6600                       		bne.s	locret_7291E
00075C0A 0815 0001                  		btst	#1,(a5)
00075C0E 6600                       		bne.s	locret_7291E
00075C10 102D 0001                  		move.b	1(a5),d0
00075C14 0C00 00E0                  		cmpi.b	#$E0,d0
00075C18 6600                       		bne.s	loc_72904
00075C1A 103C 00C0                  		move.b	#$C0,d0
00075C1E                            
00075C1E                            loc_72904:
00075C1E 3206                       		move.w	d6,d1
00075C20 0201 000F                  		andi.b	#$F,d1
00075C24 8001                       		or.b	d1,d0
00075C26 E84E                       		lsr.w	#4,d6
00075C28 0206 003F                  		andi.b	#$3F,d6
00075C2C 13C0 00C0 0011             		move.b	d0,($C00011).l
00075C32 13C6 00C0 0011             		move.b	d6,($C00011).l
00075C38                            
00075C38                            locret_7291E:
00075C38 4E75                       		rts	
00075C3A                            ; End of function sub_728E2
00075C3A                            
00075C3A                            ; ===========================================================================
00075C3A                            
00075C3A                            loc_72920:				; XREF: sub_728DC
00075C3A 08D5 0001                  		bset	#1,(a5)
00075C3E 4E75                       		rts	
00075C40                            
00075C40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075C40                            
00075C40                            
00075C40                            sub_72926:				; XREF: sub_72850
00075C40 4A2D 000B                  		tst.b	$B(a5)
00075C44 6700 0000                  		beq.w	locret_7298A
00075C48                            
00075C48                            loc_7292E:				; XREF: sub_72850
00075C48 1C2D 0009                  		move.b	9(a5),d6
00075C4C 7000                       		moveq	#0,d0
00075C4E 102D 000B                  		move.b	$B(a5),d0
00075C52 6700                       		beq.s	sub_7296A
00075C54 2079 0007 4BB2             		movea.l	(Go_PSGIndex).l,a0
00075C5A 5340                       		subq.w	#1,d0
00075C5C E548                       		lsl.w	#2,d0
00075C5E 2070 0000                  		movea.l	(a0,d0.w),a0
00075C62 102D 000C                  		move.b	$C(a5),d0
00075C66 1030 0000                  		move.b	(a0,d0.w),d0
00075C6A 522D 000C                  		addq.b	#1,$C(a5)
00075C6E 0800 0007                  		btst	#7,d0
00075C72 6700                       		beq.s	loc_72960
00075C74 0C00 0080                  		cmpi.b	#$80,d0
00075C78 6700                       		beq.s	loc_7299A
00075C7A                            
00075C7A                            loc_72960:
00075C7A DC40                       		add.w	d0,d6
00075C7C 0C06 0010                  		cmpi.b	#$10,d6
00075C80 6500                       		bcs.s	sub_7296A
00075C82 7C0F                       		moveq	#$F,d6
00075C84                            ; End of function sub_72926
00075C84                            
00075C84                            
00075C84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075C84                            
00075C84                            
00075C84                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00075C84 0815 0001                  		btst	#1,(a5)
00075C88 6600                       		bne.s	locret_7298A
00075C8A 0815 0002                  		btst	#2,(a5)
00075C8E 6600                       		bne.s	locret_7298A
00075C90 0815 0004                  		btst	#4,(a5)
00075C94 6600                       		bne.s	loc_7298C
00075C96                            
00075C96                            loc_7297C:
00075C96 8C2D 0001                  		or.b	1(a5),d6
00075C9A 0606 0010                  		addi.b	#$10,d6
00075C9E 13C6 00C0 0011             		move.b	d6,($C00011).l
00075CA4                            
00075CA4                            locret_7298A:
00075CA4 4E75                       		rts	
00075CA6                            ; ===========================================================================
00075CA6                            
00075CA6                            loc_7298C:
00075CA6 4A2D 0013                  		tst.b	$13(a5)
00075CAA 67EA                       		beq.s	loc_7297C
00075CAC 4A2D 0012                  		tst.b	$12(a5)
00075CB0 66E4                       		bne.s	loc_7297C
00075CB2 4E75                       		rts	
00075CB4                            ; End of function sub_7296A
00075CB4                            
00075CB4                            ; ===========================================================================
00075CB4                            
00075CB4                            loc_7299A:				; XREF: sub_72926
00075CB4 532D 000C                  		subq.b	#1,$C(a5)
00075CB8 4E75                       		rts	
00075CBA                            
00075CBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075CBA                            
00075CBA                            
00075CBA                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00075CBA 0815 0002                  		btst	#2,(a5)
00075CBE 6600                       		bne.s	locret_729B4
00075CC0                            
00075CC0                            loc_729A6:				; XREF: Snd_FadeOut2
00075CC0 102D 0001                  		move.b	1(a5),d0
00075CC4 0000 001F                  		ori.b	#$1F,d0
00075CC8 13C0 00C0 0011             		move.b	d0,($C00011).l
00075CCE                            
00075CCE                            locret_729B4:
00075CCE 4E75                       		rts	
00075CD0                            ; End of function sub_729A0
00075CD0                            
00075CD0                            
00075CD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075CD0                            
00075CD0                            
00075CD0                            sub_729B6:				; XREF: loc_71E7C
00075CD0 41F9 00C0 0011             		lea	($C00011).l,a0
00075CD6 10BC 009F                  		move.b	#$9F,(a0)
00075CDA 10BC 00BF                  		move.b	#$BF,(a0)
00075CDE 10BC 00DF                  		move.b	#$DF,(a0)
00075CE2 10BC 00FF                  		move.b	#$FF,(a0)
00075CE6 4E75                       		rts	
00075CE8                            ; End of function sub_729B6
00075CE8                            
00075CE8                            ; ===========================================================================
00075CE8 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00075CFA 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
00075D0C 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
00075D20 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00075D34 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00075D48 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00075D5C 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00075D70 0011 0000                  		dc.w $11, 0
00075D74                            
00075D74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075D74                            
00075D74                            
00075D74                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00075D74 0445 00E0                  		subi.w	#$E0,d5
00075D78 E54D                       		lsl.w	#2,d5
00075D7A 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00075D7E                            ; End of function sub_72A5A
00075D7E                            
00075D7E                            ; ===========================================================================
00075D7E                            
00075D7E                            loc_72A64:
00075D7E 6000 0000                  		bra.w	loc_72ACC
00075D82                            ; ===========================================================================
00075D82 6000 0000                  		bra.w	loc_72AEC
00075D86                            ; ===========================================================================
00075D86 6000 0000                  		bra.w	loc_72AF2
00075D8A                            ; ===========================================================================
00075D8A 6000 0000                  		bra.w	loc_72AF8
00075D8E                            ; ===========================================================================
00075D8E 6000 0000                  		bra.w	loc_72B14
00075D92                            ; ===========================================================================
00075D92 6000 0000                  		bra.w	loc_72B9E
00075D96                            ; ===========================================================================
00075D96 6000 0000                  		bra.w	loc_72BA4
00075D9A                            ; ===========================================================================
00075D9A 6000 0000                  		bra.w	loc_72BAE
00075D9E                            ; ===========================================================================
00075D9E 6000 0000                  		bra.w	loc_72BB4
00075DA2                            ; ===========================================================================
00075DA2 6000 0000                  		bra.w	loc_72BBE
00075DA6                            ; ===========================================================================
00075DA6 6000 0000                  		bra.w	loc_72BC6
00075DAA                            ; ===========================================================================
00075DAA 6000 0000                  		bra.w	loc_72BD0
00075DAE                            ; ===========================================================================
00075DAE 6000 0000                  		bra.w	loc_72BE6
00075DB2                            ; ===========================================================================
00075DB2 6000 0000                  		bra.w	loc_72BEE
00075DB6                            ; ===========================================================================
00075DB6 6000 0000                  		bra.w	loc_72BF4
00075DBA                            ; ===========================================================================
00075DBA 6000 0000                  		bra.w	loc_72C26
00075DBE                            ; ===========================================================================
00075DBE 6000 0000                  		bra.w	loc_72D30
00075DC2                            ; ===========================================================================
00075DC2 6000 0000                  		bra.w	loc_72D52
00075DC6                            ; ===========================================================================
00075DC6 6000 0000                  		bra.w	loc_72D58
00075DCA                            ; ===========================================================================
00075DCA 6000 0000                  		bra.w	loc_72E06
00075DCE                            ; ===========================================================================
00075DCE 6000 0000                  		bra.w	loc_72E20
00075DD2                            ; ===========================================================================
00075DD2 6000 0000                  		bra.w	loc_72E26
00075DD6                            ; ===========================================================================
00075DD6 6000 0000                  		bra.w	loc_72E2C
00075DDA                            ; ===========================================================================
00075DDA 6000 0000                  		bra.w	loc_72E38
00075DDE                            ; ===========================================================================
00075DDE 6000 0000                  		bra.w	loc_72E52
00075DE2                            ; ===========================================================================
00075DE2 6000 0000                  		bra.w	loc_72E64
00075DE6                            ; ===========================================================================
00075DE6                            
00075DE6                            loc_72ACC:				; XREF: loc_72A64
00075DE6 121C                       		move.b	(a4)+,d1
00075DE8 4A2D 0001                  		tst.b	1(a5)
00075DEC 6B00                       		bmi.s	locret_72AEA
00075DEE 102D 000A                  		move.b	$A(a5),d0
00075DF2 0200 0037                  		andi.b	#$37,d0
00075DF6 8200                       		or.b	d0,d1
00075DF8 1B41 000A                  		move.b	d1,$A(a5)
00075DFC 103C 00B4                  		move.b	#$B4,d0
00075E00 6000 FC2E                  		bra.w	loc_72716
00075E04                            ; ===========================================================================
00075E04                            
00075E04                            locret_72AEA:
00075E04 4E75                       		rts	
00075E06                            ; ===========================================================================
00075E06                            
00075E06                            loc_72AEC:				; XREF: loc_72A64
00075E06 1B5C 001E                  		move.b	(a4)+,$1E(a5)
00075E0A 4E75                       		rts	
00075E0C                            ; ===========================================================================
00075E0C                            
00075E0C                            loc_72AF2:				; XREF: loc_72A64
00075E0C 1D5C 0007                  		move.b	(a4)+,7(a6)
00075E10 4E75                       		rts	
00075E12                            ; ===========================================================================
00075E12                            
00075E12                            loc_72AF8:				; XREF: loc_72A64
00075E12 7000                       		moveq	#0,d0
00075E14 102D 000D                  		move.b	$D(a5),d0
00075E18 2875 0000                  		movea.l	(a5,d0.w),a4
00075E1C 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
00075E24 544C                       		addq.w	#2,a4
00075E26 5800                       		addq.b	#4,d0
00075E28 1B40 000D                  		move.b	d0,$D(a5)
00075E2C 4E75                       		rts	
00075E2E                            ; ===========================================================================
00075E2E                            
00075E2E                            loc_72B14:				; XREF: loc_72A64
00075E2E 204E                       		movea.l	a6,a0
00075E30 43EE 03A0                  		lea	$3A0(a6),a1
00075E34 303C 0087                  		move.w	#$87,d0
00075E38                            
00075E38                            loc_72B1E:
00075E38 20D9                       		move.l	(a1)+,(a0)+
00075E3A 51C8 FFFC                  		dbf	d0,loc_72B1E
00075E3E                            
00075E3E 08EE 0002 0040             		bset	#2,$40(a6)
00075E44 264D                       		movea.l	a5,a3
00075E46 1C3C 0028                  		move.b	#$28,d6
00075E4A 9C2E 0026                  		sub.b	$26(a6),d6
00075E4E 7E05                       		moveq	#5,d7
00075E50 4BEE 0070                  		lea	$70(a6),a5
00075E54                            
00075E54                            loc_72B3A:
00075E54 0815 0007                  		btst	#7,(a5)
00075E58 6700                       		beq.s	loc_72B5C
00075E5A 08D5 0001                  		bset	#1,(a5)
00075E5E DD2D 0009                  		add.b	d6,9(a5)
00075E62 0815 0002                  		btst	#2,(a5)
00075E66 6600                       		bne.s	loc_72B5C
00075E68 7000                       		moveq	#0,d0
00075E6A 102D 000B                  		move.b	$B(a5),d0
00075E6E 226E 0018                  		movea.l	$18(a6),a1
00075E72 4EBA 0000                  		jsr	sub_72C4E(pc)
00075E76                            
00075E76                            loc_72B5C:
00075E76 DAFC 0030                  		adda.w	#$30,a5
00075E7A 51CF FFD8                  		dbf	d7,loc_72B3A
00075E7E                            
00075E7E 7E02                       		moveq	#2,d7
00075E80                            
00075E80                            loc_72B66:
00075E80 0815 0007                  		btst	#7,(a5)
00075E84 6700                       		beq.s	loc_72B78
00075E86 08D5 0001                  		bset	#1,(a5)
00075E8A 4EBA FE2E                  		jsr	sub_729A0(pc)
00075E8E DD2D 0009                  		add.b	d6,9(a5)
00075E92                            
00075E92                            loc_72B78:
00075E92 DAFC 0030                  		adda.w	#$30,a5
00075E96 51CF FFE8                  		dbf	d7,loc_72B66
00075E9A 2A4B                       		movea.l	a3,a5
00075E9C 1D7C 0080 0024             		move.b	#$80,$24(a6)
00075EA2 1D7C 0028 0026             		move.b	#$28,$26(a6)
00075EA8 422E 0027                  		clr.b	$27(a6)
00075EAC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00075EB4 504F                       		addq.w	#8,sp
00075EB6 4E75                       		rts	
00075EB8                            ; ===========================================================================
00075EB8                            
00075EB8                            loc_72B9E:				; XREF: loc_72A64
00075EB8 1B5C 0002                  		move.b	(a4)+,2(a5)
00075EBC 4E75                       		rts	
00075EBE                            ; ===========================================================================
00075EBE                            
00075EBE                            loc_72BA4:				; XREF: loc_72A64
00075EBE 101C                       		move.b	(a4)+,d0
00075EC0 D12D 0009                  		add.b	d0,9(a5)
00075EC4 6000 0000                  		bra.w	sub_72CB4
00075EC8                            ; ===========================================================================
00075EC8                            
00075EC8                            loc_72BAE:				; XREF: loc_72A64
00075EC8 08D5 0004                  		bset	#4,(a5)
00075ECC 4E75                       		rts	
00075ECE                            ; ===========================================================================
00075ECE                            
00075ECE                            loc_72BB4:				; XREF: loc_72A64
00075ECE 1B54 0012                  		move.b	(a4),$12(a5)
00075ED2 1B5C 0013                  		move.b	(a4)+,$13(a5)
00075ED6 4E75                       		rts	
00075ED8                            ; ===========================================================================
00075ED8                            
00075ED8                            loc_72BBE:				; XREF: loc_72A64
00075ED8 101C                       		move.b	(a4)+,d0
00075EDA D12D 0008                  		add.b	d0,8(a5)
00075EDE 4E75                       		rts	
00075EE0                            ; ===========================================================================
00075EE0                            
00075EE0                            loc_72BC6:				; XREF: loc_72A64
00075EE0 1D54 0002                  		move.b	(a4),2(a6)
00075EE4 1D5C 0001                  		move.b	(a4)+,1(a6)
00075EE8 4E75                       		rts	
00075EEA                            ; ===========================================================================
00075EEA                            
00075EEA                            loc_72BD0:				; XREF: loc_72A64
00075EEA 41EE 0040                  		lea	$40(a6),a0
00075EEE 101C                       		move.b	(a4)+,d0
00075EF0 7230                       		moveq	#$30,d1
00075EF2 7409                       		moveq	#9,d2
00075EF4                            
00075EF4                            loc_72BDA:
00075EF4 1140 0002                  		move.b	d0,2(a0)
00075EF8 D0C1                       		adda.w	d1,a0
00075EFA 51CA FFF8                  		dbf	d2,loc_72BDA
00075EFE                            
00075EFE 4E75                       		rts	
00075F00                            ; ===========================================================================
00075F00                            
00075F00                            loc_72BE6:				; XREF: loc_72A64
00075F00 101C                       		move.b	(a4)+,d0
00075F02 D12D 0009                  		add.b	d0,9(a5)
00075F06 4E75                       		rts	
00075F08                            ; ===========================================================================
00075F08                            
00075F08                            loc_72BEE:				; XREF: loc_72A64
00075F08 422E 002C                  		clr.b	$2C(a6)
00075F0C 4E75                       		rts	
00075F0E                            ; ===========================================================================
00075F0E                            
00075F0E                            loc_72BF4:				; XREF: loc_72A64
00075F0E 0895 0007                  		bclr	#7,(a5)
00075F12 0895 0004                  		bclr	#4,(a5)
00075F16 4EBA FB00                  		jsr	sub_726FE(pc)
00075F1A 4A2E 0250                  		tst.b	$250(a6)
00075F1E 6B00                       		bmi.s	loc_72C22
00075F20 264D                       		movea.l	a5,a3
00075F22 4BEE 0100                  		lea	$100(a6),a5
00075F26 226E 0018                  		movea.l	$18(a6),a1
00075F2A 0895 0002                  		bclr	#2,(a5)
00075F2E 08D5 0001                  		bset	#1,(a5)
00075F32 102D 000B                  		move.b	$B(a5),d0
00075F36 4EBA 0000                  		jsr	sub_72C4E(pc)
00075F3A 2A4B                       		movea.l	a3,a5
00075F3C                            
00075F3C                            loc_72C22:
00075F3C 504F                       		addq.w	#8,sp
00075F3E 4E75                       		rts	
00075F40                            ; ===========================================================================
00075F40                            
00075F40                            loc_72C26:				; XREF: loc_72A64
00075F40 7000                       		moveq	#0,d0
00075F42 101C                       		move.b	(a4)+,d0
00075F44 1B40 000B                  		move.b	d0,$B(a5)
00075F48 0815 0002                  		btst	#2,(a5)
00075F4C 6600 0000                  		bne.w	locret_72CAA
00075F50 226E 0018                  		movea.l	$18(a6),a1
00075F54 4A2E 000E                  		tst.b	$E(a6)
00075F58 6700                       		beq.s	sub_72C4E
00075F5A 226D 0020                  		movea.l	$20(a5),a1
00075F5E 4A2E 000E                  		tst.b	$E(a6)
00075F62 6B00                       		bmi.s	sub_72C4E
00075F64 226E 0020                  		movea.l	$20(a6),a1
00075F68                            
00075F68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075F68                            
00075F68                            
00075F68                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00075F68 5340                       		subq.w	#1,d0
00075F6A 6B00                       		bmi.s	loc_72C5C
00075F6C 323C 0019                  		move.w	#$19,d1
00075F70                            
00075F70                            loc_72C56:
00075F70 D2C1                       		adda.w	d1,a1
00075F72 51C8 FFFC                  		dbf	d0,loc_72C56
00075F76                            
00075F76                            loc_72C5C:
00075F76 1219                       		move.b	(a1)+,d1
00075F78 1B41 001F                  		move.b	d1,$1F(a5)
00075F7C 1801                       		move.b	d1,d4
00075F7E 103C 00B0                  		move.b	#$B0,d0
00075F82 4EBA FAB8                  		jsr	sub_72722(pc)
00075F86 45FA 0000                  		lea	byte_72D18(pc),a2
00075F8A 7613                       		moveq	#$13,d3
00075F8C                            
00075F8C                            loc_72C72:
00075F8C 101A                       		move.b	(a2)+,d0
00075F8E 1219                       		move.b	(a1)+,d1
00075F90 4EBA FAAA                  		jsr	sub_72722(pc)
00075F94 51CB FFF6                  		dbf	d3,loc_72C72
00075F98 7A03                       		moveq	#3,d5
00075F9A 0244 0007                  		andi.w	#7,d4
00075F9E 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00075FA2 162D 0009                  		move.b	9(a5),d3
00075FA6                            
00075FA6                            loc_72C8C:
00075FA6 101A                       		move.b	(a2)+,d0
00075FA8 1219                       		move.b	(a1)+,d1
00075FAA E20C                       		lsr.b	#1,d4
00075FAC 6400                       		bcc.s	loc_72C96
00075FAE D203                       		add.b	d3,d1
00075FB0                            
00075FB0                            loc_72C96:
00075FB0 4EBA FA8A                  		jsr	sub_72722(pc)
00075FB4 51CD FFF0                  		dbf	d5,loc_72C8C
00075FB8 103C 00B4                  		move.b	#$B4,d0
00075FBC 122D 000A                  		move.b	$A(a5),d1
00075FC0 4EBA FA7A                  		jsr	sub_72722(pc)
00075FC4                            
00075FC4                            locret_72CAA:
00075FC4 4E75                       		rts	
00075FC6                            ; End of function sub_72C4E
00075FC6                            
00075FC6                            ; ===========================================================================
00075FC6 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00075FCE                            
00075FCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075FCE                            
00075FCE                            
00075FCE                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00075FCE 0815 0002                  		btst	#2,(a5)
00075FD2 6600                       		bne.s	locret_72D16
00075FD4 7000                       		moveq	#0,d0
00075FD6 102D 000B                  		move.b	$B(a5),d0
00075FDA 226E 0018                  		movea.l	$18(a6),a1
00075FDE 4A2E 000E                  		tst.b	$E(a6)
00075FE2 6700                       		beq.s	loc_72CD8
00075FE4 226E 0020                  		movea.l	$20(a6),a1
00075FE8 4A2E 000E                  		tst.b	$E(a6)
00075FEC 6B00                       		bmi.s	loc_72CD8
00075FEE 226E 0020                  		movea.l	$20(a6),a1
00075FF2                            
00075FF2                            loc_72CD8:
00075FF2 5340                       		subq.w	#1,d0
00075FF4 6B00                       		bmi.s	loc_72CE6
00075FF6 323C 0019                  		move.w	#$19,d1
00075FFA                            
00075FFA                            loc_72CE0:
00075FFA D2C1                       		adda.w	d1,a1
00075FFC 51C8 FFFC                  		dbf	d0,loc_72CE0
00076000                            
00076000                            loc_72CE6:
00076000 D2FC 0015                  		adda.w	#$15,a1
00076004 45FA 0000                  		lea	byte_72D2C(pc),a2
00076008 102D 001F                  		move.b	$1F(a5),d0
0007600C 0240 0007                  		andi.w	#7,d0
00076010 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00076014 162D 0009                  		move.b	9(a5),d3
00076018 6B00                       		bmi.s	locret_72D16
0007601A 7A03                       		moveq	#3,d5
0007601C                            
0007601C                            loc_72D02:
0007601C 101A                       		move.b	(a2)+,d0
0007601E 1219                       		move.b	(a1)+,d1
00076020 E20C                       		lsr.b	#1,d4
00076022 6400                       		bcc.s	loc_72D12
00076024 D203                       		add.b	d3,d1
00076026 6500                       		bcs.s	loc_72D12
00076028 4EBA FA12                  		jsr	sub_72722(pc)
0007602C                            
0007602C                            loc_72D12:
0007602C 51CD FFEE                  		dbf	d5,loc_72D02
00076030                            
00076030                            locret_72D16:
00076030 4E75                       		rts	
00076032                            ; End of function sub_72CB4
00076032                            
00076032                            ; ===========================================================================
00076032 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0007603C 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00076046 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0007604A                            ; ===========================================================================
0007604A                            
0007604A                            loc_72D30:				; XREF: loc_72A64
0007604A 08D5 0003                  		bset	#3,(a5)
0007604E 2B4C 0014                  		move.l	a4,$14(a5)
00076052 1B5C 0018                  		move.b	(a4)+,$18(a5)
00076056 1B5C 0019                  		move.b	(a4)+,$19(a5)
0007605A 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0007605E 101C                       		move.b	(a4)+,d0
00076060 E208                       		lsr.b	#1,d0
00076062 1B40 001B                  		move.b	d0,$1B(a5)
00076066 426D 001C                  		clr.w	$1C(a5)
0007606A 4E75                       		rts	
0007606C                            ; ===========================================================================
0007606C                            
0007606C                            loc_72D52:				; XREF: loc_72A64
0007606C 08D5 0003                  		bset	#3,(a5)
00076070 4E75                       		rts	
00076072                            ; ===========================================================================
00076072                            
00076072                            loc_72D58:				; XREF: loc_72A64
00076072 0895 0007                  		bclr	#7,(a5)
00076076 0895 0004                  		bclr	#4,(a5)
0007607A 4A2D 0001                  		tst.b	1(a5)
0007607E 6B00                       		bmi.s	loc_72D74
00076080 4A2E 0008                  		tst.b	8(a6)
00076084 6B00 0000                  		bmi.w	loc_72E02
00076088 4EBA F98E                  		jsr	sub_726FE(pc)
0007608C 6000                       		bra.s	loc_72D78
0007608E                            ; ===========================================================================
0007608E                            
0007608E                            loc_72D74:
0007608E 4EBA FC2A                  		jsr	sub_729A0(pc)
00076092                            
00076092                            loc_72D78:
00076092 4A2E 000E                  		tst.b	$E(a6)
00076096 6A00 0000                  		bpl.w	loc_72E02
0007609A 4216                       		clr.b	0(a6)
0007609C 7000                       		moveq	#0,d0
0007609E 102D 0001                  		move.b	1(a5),d0
000760A2 6B00                       		bmi.s	loc_72DCC
000760A4 41FA F546                  		lea	dword_722CC(pc),a0
000760A8 264D                       		movea.l	a5,a3
000760AA 0C00 0004                  		cmpi.b	#4,d0
000760AE 6600                       		bne.s	loc_72DA8
000760B0 4A2E 0340                  		tst.b	$340(a6)
000760B4 6A00                       		bpl.s	loc_72DA8
000760B6 4BEE 0340                  		lea	$340(a6),a5
000760BA 226E 0020                  		movea.l	$20(a6),a1
000760BE 6000                       		bra.s	loc_72DB8
000760C0                            ; ===========================================================================
000760C0                            
000760C0                            loc_72DA8:
000760C0 5500                       		subq.b	#2,d0
000760C2 E508                       		lsl.b	#2,d0
000760C4 2A70 0000                  		movea.l	(a0,d0.w),a5
000760C8 4A15                       		tst.b	(a5)
000760CA 6A00                       		bpl.s	loc_72DC8
000760CC 226E 0018                  		movea.l	$18(a6),a1
000760D0                            
000760D0                            loc_72DB8:
000760D0 0895 0002                  		bclr	#2,(a5)
000760D4 08D5 0001                  		bset	#1,(a5)
000760D8 102D 000B                  		move.b	$B(a5),d0
000760DC 4EBA FE8A                  		jsr	sub_72C4E(pc)
000760E0                            
000760E0                            loc_72DC8:
000760E0 2A4B                       		movea.l	a3,a5
000760E2 6000                       		bra.s	loc_72E02
000760E4                            ; ===========================================================================
000760E4                            
000760E4                            loc_72DCC:
000760E4 41EE 0370                  		lea	$370(a6),a0
000760E8 4A10                       		tst.b	(a0)
000760EA 6A00                       		bpl.s	loc_72DE0
000760EC 0C00 00E0                  		cmpi.b	#$E0,d0
000760F0 6700                       		beq.s	loc_72DEA
000760F2 0C00 00C0                  		cmpi.b	#$C0,d0
000760F6 6700                       		beq.s	loc_72DEA
000760F8                            
000760F8                            loc_72DE0:
000760F8 41FA F4F2                  		lea	dword_722CC(pc),a0
000760FC E608                       		lsr.b	#3,d0
000760FE 2070 0000                  		movea.l	(a0,d0.w),a0
00076102                            
00076102                            loc_72DEA:
00076102 0890 0002                  		bclr	#2,(a0)
00076106 08D0 0001                  		bset	#1,(a0)
0007610A 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00076110 6600                       		bne.s	loc_72E02
00076112 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007611A                            
0007611A                            loc_72E02:
0007611A 504F                       		addq.w	#8,sp
0007611C 4E75                       		rts	
0007611E                            ; ===========================================================================
0007611E                            
0007611E                            loc_72E06:				; XREF: loc_72A64
0007611E 1B7C 00E0 0001             		move.b	#$E0,1(a5)
00076124 1B5C 001F                  		move.b	(a4)+,$1F(a5)
00076128 0815 0002                  		btst	#2,(a5)
0007612C 6600                       		bne.s	locret_72E1E
0007612E 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
00076136                            
00076136                            locret_72E1E:
00076136 4E75                       		rts	
00076138                            ; ===========================================================================
00076138                            
00076138                            loc_72E20:				; XREF: loc_72A64
00076138 0895 0003                  		bclr	#3,(a5)
0007613C 4E75                       		rts	
0007613E                            ; ===========================================================================
0007613E                            
0007613E                            loc_72E26:				; XREF: loc_72A64
0007613E 1B5C 000B                  		move.b	(a4)+,$B(a5)
00076142 4E75                       		rts	
00076144                            ; ===========================================================================
00076144                            
00076144                            loc_72E2C:				; XREF: loc_72A64
00076144 101C                       		move.b	(a4)+,d0
00076146 E148                       		lsl.w	#8,d0
00076148 101C                       		move.b	(a4)+,d0
0007614A D8C0                       		adda.w	d0,a4
0007614C 534C                       		subq.w	#1,a4
0007614E 4E75                       		rts	
00076150                            ; ===========================================================================
00076150                            
00076150                            loc_72E38:				; XREF: loc_72A64
00076150 7000                       		moveq	#0,d0
00076152 101C                       		move.b	(a4)+,d0
00076154 121C                       		move.b	(a4)+,d1
00076156 4A35 0024                  		tst.b	$24(a5,d0.w)
0007615A 6600                       		bne.s	loc_72E48
0007615C 1B81 0024                  		move.b	d1,$24(a5,d0.w)
00076160                            
00076160                            loc_72E48:
00076160 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00076164 66DE                       		bne.s	loc_72E2C
00076166 544C                       		addq.w	#2,a4
00076168 4E75                       		rts	
0007616A                            ; ===========================================================================
0007616A                            
0007616A                            loc_72E52:				; XREF: loc_72A64
0007616A 7000                       		moveq	#0,d0
0007616C 102D 000D                  		move.b	$D(a5),d0
00076170 5900                       		subq.b	#4,d0
00076172 2B8C 0000                  		move.l	a4,(a5,d0.w)
00076176 1B40 000D                  		move.b	d0,$D(a5)
0007617A 60C8                       		bra.s	loc_72E2C
0007617C                            ; ===========================================================================
0007617C                            
0007617C                            loc_72E64:				; XREF: loc_72A64
0007617C 103C 0088                  		move.b	#$88,d0
00076180 123C 000F                  		move.b	#$F,d1
00076184 4EBA F8C2                  		jsr	sub_7272E(pc)
00076188 103C 008C                  		move.b	#$8C,d0
0007618C 123C 000F                  		move.b	#$F,d1
00076190 6000 F8B6                  		bra.w	sub_7272E
00076194                            ; ===========================================================================
00076194                            Kos_Z80:	incbin	sound\z80_1.bin
00076244 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
00076246 21                         		dc.b $21
00076247 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
00076249                            		incbin	sound\z80_2.bin
000778F4                            		even
000778F4                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
0007E0F4                            		even
0007E0F4                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
00087992                            		even
00087992                            Music83:	incbin	sound\music83.bin ; Marble Act 1
00087F20                            		even
00087F20                            Music84:	include	sound\music84.asm ; Star Light Act 1
00087F20                            music84_Header:
00087F20 =00000001                  smpsHeaderStartSong = 1
00087F20 0000                       	smpsHeaderVoice     music84_Voices
00087F22 0603                       	smpsHeaderChan      $06, $03
00087F24 0205                       	smpsHeaderTempo     $02, $05
00087F26                            
00087F2A 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
00087F2E 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
00087F32 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
00087F36 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
00087F3A 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
00087F3E 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
00087F44 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
00087F4A 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
00087F50                            
00087F50                            ; FM1 Data
00087F50                            music84_FM1:
00087F50 E0C0                       	smpsPan             panCenter, $00
00087F54 E107                       	smpsAlterNote       $07
00087F56 9B03 8007                  	dc.b	nD2, $03, nRst, $07
00087F5A E106                       	smpsAlterNote       $06
00087F5C 9903 800B                  	dc.b	nC2, $03, nRst, $0B
00087F60 E10B                       	smpsAlterNote       $0B
00087F62 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
00087F68 E10C                       	smpsAlterNote       $0C
00087F6A E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00087F6D E10B                       	smpsAlterNote       $0B
00087F6F E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00087F72 E109                       	smpsAlterNote       $09
00087F74 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
00087F79 E108                       	smpsAlterNote       $08
00087F7B 8001                       	dc.b	nRst, $01
00087F7D E10B                       	smpsAlterNote       $0B
00087F7F 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00087F85 E107                       	smpsAlterNote       $07
00087F87 9B03                       	dc.b	nD2, $03
00087F89                            
00087F89                            music84_Jump04:
00087F89 E107                       	smpsAlterNote       $07
00087F8B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00087F8F E10B                       	smpsAlterNote       $0B
00087F91 A202 8001                  	dc.b	nA2, $02, nRst, $01
00087F95 E107                       	smpsAlterNote       $07
00087F97 9B03                       	dc.b	nD2, $03
00087F99 E11A                       	smpsAlterNote       $1A
00087F9B A301                       	dc.b	nBb2, $01
00087F9D E1F2                       	smpsAlterNote       $F2
00087F9F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087FA2 E1FF                       	smpsAlterNote       $FF
00087FA4 E701                       	dc.b	smpsNoAttack, $01
00087FA6 E111                       	smpsAlterNote       $11
00087FA8 E701                       	dc.b	smpsNoAttack, $01
00087FAA E106                       	smpsAlterNote       $06
00087FAC E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00087FAF E107                       	smpsAlterNote       $07
00087FB1 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00087FB5 E108                       	smpsAlterNote       $08
00087FB7 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
00087FBF E109                       	smpsAlterNote       $09
00087FC1 A003                       	dc.b	nG2, $03
00087FC3 E10C                       	smpsAlterNote       $0C
00087FC5 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00087FC9 E1FD                       	smpsAlterNote       $FD
00087FCB A401                       	dc.b	nB2, $01
00087FCD E109                       	smpsAlterNote       $09
00087FCF E701                       	dc.b	smpsNoAttack, $01
00087FD1 E106                       	smpsAlterNote       $06
00087FD3 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00087FD6 E109                       	smpsAlterNote       $09
00087FD8 A007                       	dc.b	nG2, $07
00087FDA E108                       	smpsAlterNote       $08
00087FDC 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00087FE0 E107                       	smpsAlterNote       $07
00087FE2 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00087FE8 E10B                       	smpsAlterNote       $0B
00087FEA A203 8001                  	dc.b	nA2, $03, nRst, $01
00087FEE E107                       	smpsAlterNote       $07
00087FF0 9B03                       	dc.b	nD2, $03
00087FF2 E11A                       	smpsAlterNote       $1A
00087FF4 A301                       	dc.b	nBb2, $01
00087FF6 E1F9                       	smpsAlterNote       $F9
00087FF8 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087FFB E107                       	smpsAlterNote       $07
00087FFD E701                       	dc.b	smpsNoAttack, $01
00087FFF E111                       	smpsAlterNote       $11
00088001 E701                       	dc.b	smpsNoAttack, $01
00088003 E106                       	smpsAlterNote       $06
00088005 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0008800A E107                       	smpsAlterNote       $07
0008800C 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00088014 E1EC                       	smpsAlterNote       $EC
00088016 A101                       	dc.b	nAb2, $01
00088018 E108                       	smpsAlterNote       $08
0008801A E701                       	dc.b	smpsNoAttack, $01
0008801C E116                       	smpsAlterNote       $16
0008801E E701                       	dc.b	smpsNoAttack, $01
00088020 E1F5                       	smpsAlterNote       $F5
00088022 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088025 E10B                       	smpsAlterNote       $0B
00088027 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008802B E107                       	smpsAlterNote       $07
0008802D 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00088033 E109                       	smpsAlterNote       $09
00088035 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00088039 E10B                       	smpsAlterNote       $0B
0008803B 9603                       	dc.b	nA1, $03
0008803D E107                       	smpsAlterNote       $07
0008803F 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00088045 E10B                       	smpsAlterNote       $0B
00088047 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008804B E107                       	smpsAlterNote       $07
0008804D 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088051 E11A                       	smpsAlterNote       $1A
00088053 A301                       	dc.b	nBb2, $01
00088055 E1F9                       	smpsAlterNote       $F9
00088057 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008805A E107                       	smpsAlterNote       $07
0008805C E701                       	dc.b	smpsNoAttack, $01
0008805E E1FB                       	smpsAlterNote       $FB
00088060 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088063 E106                       	smpsAlterNote       $06
00088065 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088069 E107                       	smpsAlterNote       $07
0008806B 9B03                       	dc.b	nD2, $03
0008806D E108                       	smpsAlterNote       $08
0008806F 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00088075 E109                       	smpsAlterNote       $09
00088077 A002 8001                  	dc.b	nG2, $02, nRst, $01
0008807B E10C                       	smpsAlterNote       $0C
0008807D A303                       	dc.b	nBb2, $03
0008807F E1F0                       	smpsAlterNote       $F0
00088081 A401                       	dc.b	nB2, $01
00088083 E1FD                       	smpsAlterNote       $FD
00088085 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
0008808A E106                       	smpsAlterNote       $06
0008808C 8001                       	dc.b	nRst, $01
0008808E E109                       	smpsAlterNote       $09
00088090 A006 8001                  	dc.b	nG2, $06, nRst, $01
00088094 E108                       	smpsAlterNote       $08
00088096 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
0008809A E107                       	smpsAlterNote       $07
0008809C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000880A2 E10B                       	smpsAlterNote       $0B
000880A4 A203                       	dc.b	nA2, $03
000880A6 E107                       	smpsAlterNote       $07
000880A8 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000880AC E1F2                       	smpsAlterNote       $F2
000880AE A401                       	dc.b	nB2, $01
000880B0 E1FF                       	smpsAlterNote       $FF
000880B2 E701                       	dc.b	smpsNoAttack, $01
000880B4 E107                       	smpsAlterNote       $07
000880B6 E701                       	dc.b	smpsNoAttack, $01
000880B8 E1FB                       	smpsAlterNote       $FB
000880BA E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000880BD E106                       	smpsAlterNote       $06
000880BF E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000880C3 E107                       	smpsAlterNote       $07
000880C5 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
000880CF E117                       	smpsAlterNote       $17
000880D1 A001                       	dc.b	nG2, $01
000880D3 E1FA                       	smpsAlterNote       $FA
000880D5 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000880D8 E108                       	smpsAlterNote       $08
000880DA E701                       	dc.b	smpsNoAttack, $01
000880DC E1E7                       	smpsAlterNote       $E7
000880DE E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000880E1 E103                       	smpsAlterNote       $03
000880E3 E701                       	dc.b	smpsNoAttack, $01
000880E5 E10B                       	smpsAlterNote       $0B
000880E7 E702                       	dc.b	smpsNoAttack, $02
000880E9 E107                       	smpsAlterNote       $07
000880EB 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
000880F3 E106                       	smpsAlterNote       $06
000880F5 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
000880FB E10C                       	smpsAlterNote       $0C
000880FD 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
00088103 E109                       	smpsAlterNote       $09
00088105 9E03                       	dc.b	nF2, $03
00088107 E10C                       	smpsAlterNote       $0C
00088109 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008810D E1EA                       	smpsAlterNote       $EA
0008810F A201                       	dc.b	nA2, $01
00088111 E106                       	smpsAlterNote       $06
00088113 E701                       	dc.b	smpsNoAttack, $01
00088115 E1E2                       	smpsAlterNote       $E2
00088117 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008811A E1F0                       	smpsAlterNote       $F0
0008811C E701                       	dc.b	smpsNoAttack, $01
0008811E E10C                       	smpsAlterNote       $0C
00088120 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008812C E116                       	smpsAlterNote       $16
0008812E 9C01                       	dc.b	nEb2, $01
00088130 E105                       	smpsAlterNote       $05
00088132 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00088135 E1F1                       	smpsAlterNote       $F1
00088137 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008813A E1FF                       	smpsAlterNote       $FF
0008813C E701                       	dc.b	smpsNoAttack, $01
0008813E E109                       	smpsAlterNote       $09
00088140 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088144 E10C                       	smpsAlterNote       $0C
00088146 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00088152 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
00088158 E109                       	smpsAlterNote       $09
0008815A 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008815E E10C                       	smpsAlterNote       $0C
00088160 9703                       	dc.b	nBb1, $03
00088162 E11A                       	smpsAlterNote       $1A
00088164 A101                       	dc.b	nAb2, $01
00088166 E1FB                       	smpsAlterNote       $FB
00088168 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008816B E10A                       	smpsAlterNote       $0A
0008816D E701                       	dc.b	smpsNoAttack, $01
0008816F E1E8                       	smpsAlterNote       $E8
00088171 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088174 E106                       	smpsAlterNote       $06
00088176 E701                       	dc.b	smpsNoAttack, $01
00088178 E10C                       	smpsAlterNote       $0C
0008817A E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
00088186 E1F9                       	smpsAlterNote       $F9
00088188 9D01                       	dc.b	nE2, $01
0008818A E108                       	smpsAlterNote       $08
0008818C E701                       	dc.b	smpsNoAttack, $01
0008818E E1F6                       	smpsAlterNote       $F6
00088190 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088193 E109                       	smpsAlterNote       $09
00088195 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
00088199 E10C                       	smpsAlterNote       $0C
0008819B 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
000881A7 E108                       	smpsAlterNote       $08
000881A9 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000881AF E106                       	smpsAlterNote       $06
000881B1 A403 8001                  	dc.b	nB2, $03, nRst, $01
000881B5 E108                       	smpsAlterNote       $08
000881B7 9D03                       	dc.b	nE2, $03
000881B9 E1EB                       	smpsAlterNote       $EB
000881BB A801                       	dc.b	nEb3, $01
000881BD E109                       	smpsAlterNote       $09
000881BF E701                       	dc.b	smpsNoAttack, $01
000881C1 E1FA                       	smpsAlterNote       $FA
000881C3 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
000881C6 E108                       	smpsAlterNote       $08
000881C8 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
000881D4 E1E9                       	smpsAlterNote       $E9
000881D6 A301                       	dc.b	nBb2, $01
000881D8 E107                       	smpsAlterNote       $07
000881DA E701                       	dc.b	smpsNoAttack, $01
000881DC E1F0                       	smpsAlterNote       $F0
000881DE E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000881E1 E1F7                       	smpsAlterNote       $F7
000881E3 E701                       	dc.b	smpsNoAttack, $01
000881E5 E107                       	smpsAlterNote       $07
000881E7 E701                       	dc.b	smpsNoAttack, $01
000881E9 E106                       	smpsAlterNote       $06
000881EB E701                       	dc.b	smpsNoAttack, $01
000881ED E108                       	smpsAlterNote       $08
000881EF 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000881F5 E106                       	smpsAlterNote       $06
000881F7 A403 8001                  	dc.b	nB2, $03, nRst, $01
000881FB E108                       	smpsAlterNote       $08
000881FD 9D03                       	dc.b	nE2, $03
000881FF E10B                       	smpsAlterNote       $0B
00088201 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
00088209 E108                       	smpsAlterNote       $08
0008820B 9D03                       	dc.b	nE2, $03
0008820D E10B                       	smpsAlterNote       $0B
0008820F 9603 8001                  	dc.b	nA1, $03, nRst, $01
00088213 E113                       	smpsAlterNote       $13
00088215 A001                       	dc.b	nG2, $01
00088217 E118                       	smpsAlterNote       $18
00088219 E701                       	dc.b	smpsNoAttack, $01
0008821B E1E9                       	smpsAlterNote       $E9
0008821D E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00088220 E1F3                       	smpsAlterNote       $F3
00088222 E701                       	dc.b	smpsNoAttack, $01
00088224 E1FD                       	smpsAlterNote       $FD
00088226 E701                       	dc.b	smpsNoAttack, $01
00088228 E102                       	smpsAlterNote       $02
0008822A E701                       	dc.b	smpsNoAttack, $01
0008822C E107                       	smpsAlterNote       $07
0008822E 8001                       	dc.b	nRst, $01
00088230 E10B                       	smpsAlterNote       $0B
00088232 9603                       	dc.b	nA1, $03
00088234 E10C                       	smpsAlterNote       $0C
00088236 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
0008823C E10B                       	smpsAlterNote       $0B
0008823E 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0008824A 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
00088250 E107                       	smpsAlterNote       $07
00088252 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088258 E10B                       	smpsAlterNote       $0B
0008825A A203                       	dc.b	nA2, $03
0008825C E107                       	smpsAlterNote       $07
0008825E 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088262 E1F2                       	smpsAlterNote       $F2
00088264 A401                       	dc.b	nB2, $01
00088266 E1FF                       	smpsAlterNote       $FF
00088268 E701                       	dc.b	smpsNoAttack, $01
0008826A E107                       	smpsAlterNote       $07
0008826C E701                       	dc.b	smpsNoAttack, $01
0008826E E1FB                       	smpsAlterNote       $FB
00088270 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088273 E106                       	smpsAlterNote       $06
00088275 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088279 E107                       	smpsAlterNote       $07
0008827B 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008827F E108                       	smpsAlterNote       $08
00088281 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00088287 E109                       	smpsAlterNote       $09
00088289 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008828D E10C                       	smpsAlterNote       $0C
0008828F A302 8001                  	dc.b	nBb2, $02, nRst, $01
00088293 E1F0                       	smpsAlterNote       $F0
00088295 A401                       	dc.b	nB2, $01
00088297 E109                       	smpsAlterNote       $09
00088299 E701                       	dc.b	smpsNoAttack, $01
0008829B E106                       	smpsAlterNote       $06
0008829D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000882A0 E109                       	smpsAlterNote       $09
000882A2 A007                       	dc.b	nG2, $07
000882A4 E108                       	smpsAlterNote       $08
000882A6 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000882AA E107                       	smpsAlterNote       $07
000882AC 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000882B2 E10B                       	smpsAlterNote       $0B
000882B4 A202 8001                  	dc.b	nA2, $02, nRst, $01
000882B8 E107                       	smpsAlterNote       $07
000882BA 9B03                       	dc.b	nD2, $03
000882BC E11A                       	smpsAlterNote       $1A
000882BE A301                       	dc.b	nBb2, $01
000882C0 E1F2                       	smpsAlterNote       $F2
000882C2 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000882C5 E1FF                       	smpsAlterNote       $FF
000882C7 E701                       	dc.b	smpsNoAttack, $01
000882C9 E111                       	smpsAlterNote       $11
000882CB E701                       	dc.b	smpsNoAttack, $01
000882CD E106                       	smpsAlterNote       $06
000882CF E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000882D2 E107                       	smpsAlterNote       $07
000882D4 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000882E0 E117                       	smpsAlterNote       $17
000882E2 A001                       	dc.b	nG2, $01
000882E4 E1FA                       	smpsAlterNote       $FA
000882E6 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000882E9 E116                       	smpsAlterNote       $16
000882EB E701                       	dc.b	smpsNoAttack, $01
000882ED E1F5                       	smpsAlterNote       $F5
000882EF E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000882F2 E103                       	smpsAlterNote       $03
000882F4 E701                       	dc.b	smpsNoAttack, $01
000882F6 E10B                       	smpsAlterNote       $0B
000882F8 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000882FC E107                       	smpsAlterNote       $07
000882FE 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088304 E109                       	smpsAlterNote       $09
00088306 9E03                       	dc.b	nF2, $03
00088308 E10B                       	smpsAlterNote       $0B
0008830A 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008830E E107                       	smpsAlterNote       $07
00088310 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00088316 E10B                       	smpsAlterNote       $0B
00088318 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008831C E107                       	smpsAlterNote       $07
0008831E 9B03                       	dc.b	nD2, $03
00088320 E11A                       	smpsAlterNote       $1A
00088322 A301                       	dc.b	nBb2, $01
00088324 E1F9                       	smpsAlterNote       $F9
00088326 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088329 E107                       	smpsAlterNote       $07
0008832B E701                       	dc.b	smpsNoAttack, $01
0008832D E111                       	smpsAlterNote       $11
0008832F E701                       	dc.b	smpsNoAttack, $01
00088331 E106                       	smpsAlterNote       $06
00088333 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00088338 E107                       	smpsAlterNote       $07
0008833A 9B03                       	dc.b	nD2, $03
0008833C E108                       	smpsAlterNote       $08
0008833E 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00088344 E109                       	smpsAlterNote       $09
00088346 A003                       	dc.b	nG2, $03
00088348 E10C                       	smpsAlterNote       $0C
0008834A A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008834E E1FD                       	smpsAlterNote       $FD
00088350 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
00088355 E106                       	smpsAlterNote       $06
00088357 8001                       	dc.b	nRst, $01
00088359 E109                       	smpsAlterNote       $09
0008835B A006 8001                  	dc.b	nG2, $06, nRst, $01
0008835F E108                       	smpsAlterNote       $08
00088361 9C03                       	dc.b	nEb2, $03
00088363 E107                       	smpsAlterNote       $07
00088365 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008836B E10B                       	smpsAlterNote       $0B
0008836D A203 8001                  	dc.b	nA2, $03, nRst, $01
00088371 E107                       	smpsAlterNote       $07
00088373 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088377 E11A                       	smpsAlterNote       $1A
00088379 A301                       	dc.b	nBb2, $01
0008837B E1F9                       	smpsAlterNote       $F9
0008837D E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088380 E107                       	smpsAlterNote       $07
00088382 E701                       	dc.b	smpsNoAttack, $01
00088384 E1FB                       	smpsAlterNote       $FB
00088386 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088389 E106                       	smpsAlterNote       $06
0008838B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008838F E107                       	smpsAlterNote       $07
00088391 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00088399 E1EC                       	smpsAlterNote       $EC
0008839B A101                       	dc.b	nAb2, $01
0008839D E108                       	smpsAlterNote       $08
0008839F E701                       	dc.b	smpsNoAttack, $01
000883A1 E1E7                       	smpsAlterNote       $E7
000883A3 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000883A6 E1F5                       	smpsAlterNote       $F5
000883A8 E701                       	dc.b	smpsNoAttack, $01
000883AA E10B                       	smpsAlterNote       $0B
000883AC E702                       	dc.b	smpsNoAttack, $02
000883AE E107                       	smpsAlterNote       $07
000883B0 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
000883B6 E106                       	smpsAlterNote       $06
000883B8 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
000883BE E10C                       	smpsAlterNote       $0C
000883C0 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
000883C8 E109                       	smpsAlterNote       $09
000883CA 9E03                       	dc.b	nF2, $03
000883CC E10C                       	smpsAlterNote       $0C
000883CE 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000883D2 E1EA                       	smpsAlterNote       $EA
000883D4 A201                       	dc.b	nA2, $01
000883D6 E106                       	smpsAlterNote       $06
000883D8 E701                       	dc.b	smpsNoAttack, $01
000883DA E114                       	smpsAlterNote       $14
000883DC E701                       	dc.b	smpsNoAttack, $01
000883DE E1F0                       	smpsAlterNote       $F0
000883E0 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000883E3 E10C                       	smpsAlterNote       $0C
000883E5 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
000883F1 9703                       	dc.b	nBb1, $03
000883F3 E116                       	smpsAlterNote       $16
000883F5 9C01                       	dc.b	nEb2, $01
000883F7 E105                       	smpsAlterNote       $05
000883F9 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000883FC E113                       	smpsAlterNote       $13
000883FE E701                       	dc.b	smpsNoAttack, $01
00088400 E1FF                       	smpsAlterNote       $FF
00088402 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088405 E109                       	smpsAlterNote       $09
00088407 E703                       	dc.b	smpsNoAttack, $03
00088409 E10C                       	smpsAlterNote       $0C
0008840B 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00088417 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008841F E109                       	smpsAlterNote       $09
00088421 9E03                       	dc.b	nF2, $03
00088423 E10C                       	smpsAlterNote       $0C
00088425 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088429 E1EC                       	smpsAlterNote       $EC
0008842B A201                       	dc.b	nA2, $01
0008842D E10A                       	smpsAlterNote       $0A
0008842F E701                       	dc.b	smpsNoAttack, $01
00088431 E1E8                       	smpsAlterNote       $E8
00088433 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088436 E1F7                       	smpsAlterNote       $F7
00088438 E701                       	dc.b	smpsNoAttack, $01
0008843A E10C                       	smpsAlterNote       $0C
0008843C E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00088448 E1EA                       	smpsAlterNote       $EA
0008844A 9D01                       	dc.b	nE2, $01
0008844C E108                       	smpsAlterNote       $08
0008844E E701                       	dc.b	smpsNoAttack, $01
00088450 E1F6                       	smpsAlterNote       $F6
00088452 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088455 E105                       	smpsAlterNote       $05
00088457 E701                       	dc.b	smpsNoAttack, $01
00088459 E109                       	smpsAlterNote       $09
0008845B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008845F E10C                       	smpsAlterNote       $0C
00088461 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0008846D E108                       	smpsAlterNote       $08
0008846F 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00088475 E106                       	smpsAlterNote       $06
00088477 A403 8001                  	dc.b	nB2, $03, nRst, $01
0008847B E108                       	smpsAlterNote       $08
0008847D 9D03                       	dc.b	nE2, $03
0008847F E1EB                       	smpsAlterNote       $EB
00088481 A801                       	dc.b	nEb3, $01
00088483 E109                       	smpsAlterNote       $09
00088485 E701                       	dc.b	smpsNoAttack, $01
00088487 E1EB                       	smpsAlterNote       $EB
00088489 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0008848C E108                       	smpsAlterNote       $08
0008848E E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
0008849A E1E9                       	smpsAlterNote       $E9
0008849C A301                       	dc.b	nBb2, $01
0008849E E1F8                       	smpsAlterNote       $F8
000884A0 E701                       	dc.b	smpsNoAttack, $01
000884A2 E116                       	smpsAlterNote       $16
000884A4 E701                       	dc.b	smpsNoAttack, $01
000884A6 E1F7                       	smpsAlterNote       $F7
000884A8 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000884AB E107                       	smpsAlterNote       $07
000884AD E701                       	dc.b	smpsNoAttack, $01
000884AF E1EE                       	smpsAlterNote       $EE
000884B1 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000884B4 E106                       	smpsAlterNote       $06
000884B6 8001                       	dc.b	nRst, $01
000884B8 E108                       	smpsAlterNote       $08
000884BA 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
000884C0 E106                       	smpsAlterNote       $06
000884C2 A402 8001                  	dc.b	nB2, $02, nRst, $01
000884C6 E108                       	smpsAlterNote       $08
000884C8 9D03                       	dc.b	nE2, $03
000884CA E10B                       	smpsAlterNote       $0B
000884CC 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
000884D2 E108                       	smpsAlterNote       $08
000884D4 9D03 8001                  	dc.b	nE2, $03, nRst, $01
000884D8 E10B                       	smpsAlterNote       $0B
000884DA 9603                       	dc.b	nA1, $03
000884DC E10E                       	smpsAlterNote       $0E
000884DE A001                       	dc.b	nG2, $01
000884E0 E118                       	smpsAlterNote       $18
000884E2 E701                       	dc.b	smpsNoAttack, $01
000884E4 E1E9                       	smpsAlterNote       $E9
000884E6 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000884E9 E1EE                       	smpsAlterNote       $EE
000884EB E701                       	dc.b	smpsNoAttack, $01
000884ED E1F8                       	smpsAlterNote       $F8
000884EF E701                       	dc.b	smpsNoAttack, $01
000884F1 E102                       	smpsAlterNote       $02
000884F3 E701                       	dc.b	smpsNoAttack, $01
000884F5 E107                       	smpsAlterNote       $07
000884F7 8001                       	dc.b	nRst, $01
000884F9 E10B                       	smpsAlterNote       $0B
000884FB 9603                       	dc.b	nA1, $03
000884FD E10C                       	smpsAlterNote       $0C
000884FF 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00088505 E10B                       	smpsAlterNote       $0B
00088507 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00088513 8001 9603                  	dc.b	nRst, $01, nA1, $03
00088517 E10C                       	smpsAlterNote       $0C
00088519 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00088525 8001                       	dc.b	nRst, $01
00088527 E10B                       	smpsAlterNote       $0B
00088529 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00088531 E107                       	smpsAlterNote       $07
00088533 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00088537 E10B                       	smpsAlterNote       $0B
00088539 9603                       	dc.b	nA1, $03
0008853B E109                       	smpsAlterNote       $09
0008853D 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00088541 E108                       	smpsAlterNote       $08
00088543 9D06                       	dc.b	nE2, $06
00088545 E107                       	smpsAlterNote       $07
00088547 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008854B E106                       	smpsAlterNote       $06
0008854D 9903                       	dc.b	nC2, $03
0008854F E10C                       	smpsAlterNote       $0C
00088551 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088555 E10B                       	smpsAlterNote       $0B
00088557 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00088563 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008856D E10C                       	smpsAlterNote       $0C
0008856F 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
0008857B 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00088587 8001                       	dc.b	nRst, $01
00088589 E10B                       	smpsAlterNote       $0B
0008858B 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00088597 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
000885A3 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
000885AF 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000885B9 E10C                       	smpsAlterNote       $0C
000885BB 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
000885C7 E10B                       	smpsAlterNote       $0B
000885C9 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
000885D1 E107                       	smpsAlterNote       $07
000885D3 9B06 8001                  	dc.b	nD2, $06, nRst, $01
000885D7 E10B                       	smpsAlterNote       $0B
000885D9 9603                       	dc.b	nA1, $03
000885DB E109                       	smpsAlterNote       $09
000885DD 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000885E1 E108                       	smpsAlterNote       $08
000885E3 9D06 8001                  	dc.b	nE2, $06, nRst, $01
000885E7 E107                       	smpsAlterNote       $07
000885E9 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000885ED E106                       	smpsAlterNote       $06
000885EF 9903                       	dc.b	nC2, $03
000885F1 E10C                       	smpsAlterNote       $0C
000885F3 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000885F7 E10B                       	smpsAlterNote       $0B
000885F9 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00088605 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008860F E10C                       	smpsAlterNote       $0C
00088611 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
0008861D 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00088629 8001                       	dc.b	nRst, $01
0008862B E10B                       	smpsAlterNote       $0B
0008862D 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00088639 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00088643 E10C                       	smpsAlterNote       $0C
00088645 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00088651 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
0008865D E10B                       	smpsAlterNote       $0B
0008865F 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008866B 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00088675 E10C                       	smpsAlterNote       $0C
00088677 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00088683 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
0008868F E10B                       	smpsAlterNote       $0B
00088691 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
0008869D 8001                       	dc.b	nRst, $01
0008869F E1EC                       	smpsAlterNote       $EC
000886A1 A101                       	dc.b	nAb2, $01
000886A3 E1FA                       	smpsAlterNote       $FA
000886A5 E701                       	dc.b	smpsNoAttack, $01
000886A7 E116                       	smpsAlterNote       $16
000886A9 E701                       	dc.b	smpsNoAttack, $01
000886AB E1F5                       	smpsAlterNote       $F5
000886AD E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000886B0 E10B                       	smpsAlterNote       $0B
000886B2 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
000886BE 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
000886CA E107                       	smpsAlterNote       $07
000886CC 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000886D2 E10B                       	smpsAlterNote       $0B
000886D4 A203                       	dc.b	nA2, $03
000886D6 E107                       	smpsAlterNote       $07
000886D8 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000886DC E1F3                       	smpsAlterNote       $F3
000886DE A401                       	dc.b	nB2, $01
000886E0 E102                       	smpsAlterNote       $02
000886E2 E701                       	dc.b	smpsNoAttack, $01
000886E4 E109                       	smpsAlterNote       $09
000886E6 E701                       	dc.b	smpsNoAttack, $01
000886E8 E102                       	smpsAlterNote       $02
000886EA E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000886ED E106                       	smpsAlterNote       $06
000886EF E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000886F3 E107                       	smpsAlterNote       $07
000886F5 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000886F9 E108                       	smpsAlterNote       $08
000886FB 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00088701 E109                       	smpsAlterNote       $09
00088703 A003 8001                  	dc.b	nG2, $03, nRst, $01
00088707 E1F2                       	smpsAlterNote       $F2
00088709 A401                       	dc.b	nB2, $01
0008870B E1FF                       	smpsAlterNote       $FF
0008870D E701                       	dc.b	smpsNoAttack, $01
0008870F E111                       	smpsAlterNote       $11
00088711 E701                       	dc.b	smpsNoAttack, $01
00088713 E1FB                       	smpsAlterNote       $FB
00088715 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088718 E106                       	smpsAlterNote       $06
0008871A E702                       	dc.b	smpsNoAttack, $02
0008871C E109                       	smpsAlterNote       $09
0008871E A007                       	dc.b	nG2, $07
00088720 E108                       	smpsAlterNote       $08
00088722 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00088726 E107                       	smpsAlterNote       $07
00088728 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008872E E10B                       	smpsAlterNote       $0B
00088730 A202 8001                  	dc.b	nA2, $02, nRst, $01
00088734 E107                       	smpsAlterNote       $07
00088736 9B03                       	dc.b	nD2, $03
00088738 E11A                       	smpsAlterNote       $1A
0008873A A301                       	dc.b	nBb2, $01
0008873C E1F2                       	smpsAlterNote       $F2
0008873E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088741 E1FF                       	smpsAlterNote       $FF
00088743 E701                       	dc.b	smpsNoAttack, $01
00088745 E111                       	smpsAlterNote       $11
00088747 E701                       	dc.b	smpsNoAttack, $01
00088749 E106                       	smpsAlterNote       $06
0008874B E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008874E E107                       	smpsAlterNote       $07
00088750 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0008875C E117                       	smpsAlterNote       $17
0008875E A001                       	dc.b	nG2, $01
00088760 E1FA                       	smpsAlterNote       $FA
00088762 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00088765 E116                       	smpsAlterNote       $16
00088767 E701                       	dc.b	smpsNoAttack, $01
00088769 E1F5                       	smpsAlterNote       $F5
0008876B E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008876E E103                       	smpsAlterNote       $03
00088770 E701                       	dc.b	smpsNoAttack, $01
00088772 E10B                       	smpsAlterNote       $0B
00088774 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088778 E107                       	smpsAlterNote       $07
0008877A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088780 E109                       	smpsAlterNote       $09
00088782 9E03                       	dc.b	nF2, $03
00088784 E10B                       	smpsAlterNote       $0B
00088786 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008878A E107                       	smpsAlterNote       $07
0008878C 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00088792 E10B                       	smpsAlterNote       $0B
00088794 A203 8001                  	dc.b	nA2, $03, nRst, $01
00088798 E107                       	smpsAlterNote       $07
0008879A 9B03                       	dc.b	nD2, $03
0008879C E11A                       	smpsAlterNote       $1A
0008879E A301                       	dc.b	nBb2, $01
000887A0 E1F9                       	smpsAlterNote       $F9
000887A2 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000887A5 E1FF                       	smpsAlterNote       $FF
000887A7 E701                       	dc.b	smpsNoAttack, $01
000887A9 E111                       	smpsAlterNote       $11
000887AB E701                       	dc.b	smpsNoAttack, $01
000887AD E106                       	smpsAlterNote       $06
000887AF E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000887B2 E107                       	smpsAlterNote       $07
000887B4 9B03                       	dc.b	nD2, $03
000887B6 E108                       	smpsAlterNote       $08
000887B8 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000887BE E109                       	smpsAlterNote       $09
000887C0 A003                       	dc.b	nG2, $03
000887C2 E1F0                       	smpsAlterNote       $F0
000887C4 A501                       	dc.b	nC3, $01
000887C6 E106                       	smpsAlterNote       $06
000887C8 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
000887CC E109                       	smpsAlterNote       $09
000887CE A006 8001                  	dc.b	nG2, $06, nRst, $01
000887D2 E108                       	smpsAlterNote       $08
000887D4 9C03                       	dc.b	nEb2, $03
000887D6 E107                       	smpsAlterNote       $07
000887D8 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000887DE E10B                       	smpsAlterNote       $0B
000887E0 A203 8001                  	dc.b	nA2, $03, nRst, $01
000887E4 E107                       	smpsAlterNote       $07
000887E6 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000887EA E11A                       	smpsAlterNote       $1A
000887EC A301                       	dc.b	nBb2, $01
000887EE E1F9                       	smpsAlterNote       $F9
000887F0 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000887F3 E107                       	smpsAlterNote       $07
000887F5 E701                       	dc.b	smpsNoAttack, $01
000887F7 E1FB                       	smpsAlterNote       $FB
000887F9 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000887FC E106                       	smpsAlterNote       $06
000887FE E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088802 E107                       	smpsAlterNote       $07
00088804 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008880C E1EC                       	smpsAlterNote       $EC
0008880E A101                       	dc.b	nAb2, $01
00088810 E108                       	smpsAlterNote       $08
00088812 E701                       	dc.b	smpsNoAttack, $01
00088814 E1E7                       	smpsAlterNote       $E7
00088816 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088819 E1F5                       	smpsAlterNote       $F5
0008881B E701                       	dc.b	smpsNoAttack, $01
0008881D E10B                       	smpsAlterNote       $0B
0008881F E702                       	dc.b	smpsNoAttack, $02
00088821 E107                       	smpsAlterNote       $07
00088823 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00088829 E106                       	smpsAlterNote       $06
0008882B 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00088831 E10C                       	smpsAlterNote       $0C
00088833 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0008883B E109                       	smpsAlterNote       $09
0008883D 9E03                       	dc.b	nF2, $03
0008883F E10C                       	smpsAlterNote       $0C
00088841 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088845 E1EA                       	smpsAlterNote       $EA
00088847 A201                       	dc.b	nA2, $01
00088849 E106                       	smpsAlterNote       $06
0008884B E701                       	dc.b	smpsNoAttack, $01
0008884D E114                       	smpsAlterNote       $14
0008884F E701                       	dc.b	smpsNoAttack, $01
00088851 E1F0                       	smpsAlterNote       $F0
00088853 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088856 E10C                       	smpsAlterNote       $0C
00088858 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00088864 9703                       	dc.b	nBb1, $03
00088866 E116                       	smpsAlterNote       $16
00088868 9C01                       	dc.b	nEb2, $01
0008886A E105                       	smpsAlterNote       $05
0008886C E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008886F E113                       	smpsAlterNote       $13
00088871 E701                       	dc.b	smpsNoAttack, $01
00088873 E1FF                       	smpsAlterNote       $FF
00088875 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088878 E109                       	smpsAlterNote       $09
0008887A E703                       	dc.b	smpsNoAttack, $03
0008887C E10C                       	smpsAlterNote       $0C
0008887E 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0008888A 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00088892 E109                       	smpsAlterNote       $09
00088894 9E03                       	dc.b	nF2, $03
00088896 E10C                       	smpsAlterNote       $0C
00088898 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008889C E1EA                       	smpsAlterNote       $EA
0008889E A201                       	dc.b	nA2, $01
000888A0 E106                       	smpsAlterNote       $06
000888A2 E701                       	dc.b	smpsNoAttack, $01
000888A4 E1E2                       	smpsAlterNote       $E2
000888A6 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000888A9 E1F0                       	smpsAlterNote       $F0
000888AB E701                       	dc.b	smpsNoAttack, $01
000888AD E10C                       	smpsAlterNote       $0C
000888AF E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000888BB E116                       	smpsAlterNote       $16
000888BD 9C01                       	dc.b	nEb2, $01
000888BF E105                       	smpsAlterNote       $05
000888C1 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000888C4 E1F1                       	smpsAlterNote       $F1
000888C6 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000888C9 E1FF                       	smpsAlterNote       $FF
000888CB E701                       	dc.b	smpsNoAttack, $01
000888CD E109                       	smpsAlterNote       $09
000888CF E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000888D3 E10C                       	smpsAlterNote       $0C
000888D5 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
000888E1 E106                       	smpsAlterNote       $06
000888E3 9903                       	dc.b	nC2, $03
000888E5 E107                       	smpsAlterNote       $07
000888E7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000888EB E109                       	smpsAlterNote       $09
000888ED 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
000888F3 E107                       	smpsAlterNote       $07
000888F5 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000888F9 E108                       	smpsAlterNote       $08
000888FB 9D03                       	dc.b	nE2, $03
000888FD E10B                       	smpsAlterNote       $0B
000888FF 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00088905 E109                       	smpsAlterNote       $09
00088907 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
0008890D E10C                       	smpsAlterNote       $0C
0008890F 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00088915 E106                       	smpsAlterNote       $06
00088917 9903                       	dc.b	nC2, $03
00088919 E11A                       	smpsAlterNote       $1A
0008891B A301                       	dc.b	nBb2, $01
0008891D E1F9                       	smpsAlterNote       $F9
0008891F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088922 E1FF                       	smpsAlterNote       $FF
00088924 E701                       	dc.b	smpsNoAttack, $01
00088926 E111                       	smpsAlterNote       $11
00088928 E701                       	dc.b	smpsNoAttack, $01
0008892A E106                       	smpsAlterNote       $06
0008892C E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00088933 E109                       	smpsAlterNote       $09
00088935 A003                       	dc.b	nG2, $03
00088937 E106                       	smpsAlterNote       $06
00088939 9907                       	dc.b	nC2, $07
0008893B E107                       	smpsAlterNote       $07
0008893D 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00088945 E10B                       	smpsAlterNote       $0B
00088947 A203                       	dc.b	nA2, $03
00088949 E107                       	smpsAlterNote       $07
0008894B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008894F E1F2                       	smpsAlterNote       $F2
00088951 A401                       	dc.b	nB2, $01
00088953 E1F9                       	smpsAlterNote       $F9
00088955 E701                       	dc.b	smpsNoAttack, $01
00088957 E107                       	smpsAlterNote       $07
00088959 E701                       	dc.b	smpsNoAttack, $01
0008895B E1FB                       	smpsAlterNote       $FB
0008895D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088960 E106                       	smpsAlterNote       $06
00088962 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088966 E107                       	smpsAlterNote       $07
00088968 9B03                       	dc.b	nD2, $03
0008896A E108                       	smpsAlterNote       $08
0008896C 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00088972 E109                       	smpsAlterNote       $09
00088974 A003 8001                  	dc.b	nG2, $03, nRst, $01
00088978 E1F2                       	smpsAlterNote       $F2
0008897A A401                       	dc.b	nB2, $01
0008897C E1F9                       	smpsAlterNote       $F9
0008897E E701                       	dc.b	smpsNoAttack, $01
00088980 E107                       	smpsAlterNote       $07
00088982 E701                       	dc.b	smpsNoAttack, $01
00088984 E1FB                       	smpsAlterNote       $FB
00088986 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088989 E106                       	smpsAlterNote       $06
0008898B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008898F E108                       	smpsAlterNote       $08
00088991 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00088995 E10C                       	smpsAlterNote       $0C
00088997 A302 8001                  	dc.b	nBb2, $02, nRst, $01
0008899B E107                       	smpsAlterNote       $07
0008899D 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000889A3 E10B                       	smpsAlterNote       $0B
000889A5 A203                       	dc.b	nA2, $03
000889A7 E107                       	smpsAlterNote       $07
000889A9 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000889AD E1F2                       	smpsAlterNote       $F2
000889AF A401                       	dc.b	nB2, $01
000889B1 E1FF                       	smpsAlterNote       $FF
000889B3 E701                       	dc.b	smpsNoAttack, $01
000889B5 E107                       	smpsAlterNote       $07
000889B7 E701                       	dc.b	smpsNoAttack, $01
000889B9 E1FB                       	smpsAlterNote       $FB
000889BB E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000889BE E106                       	smpsAlterNote       $06
000889C0 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000889C4 E107                       	smpsAlterNote       $07
000889C6 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000889CA E108                       	smpsAlterNote       $08
000889CC 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
000889D2 E109                       	smpsAlterNote       $09
000889D4 A003 8001                  	dc.b	nG2, $03, nRst, $01
000889D8 E1F2                       	smpsAlterNote       $F2
000889DA A401                       	dc.b	nB2, $01
000889DC E1FF                       	smpsAlterNote       $FF
000889DE E701                       	dc.b	smpsNoAttack, $01
000889E0 E111                       	smpsAlterNote       $11
000889E2 E701                       	dc.b	smpsNoAttack, $01
000889E4 E1FB                       	smpsAlterNote       $FB
000889E6 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000889E9 E106                       	smpsAlterNote       $06
000889EB E702                       	dc.b	smpsNoAttack, $02
000889ED E108                       	smpsAlterNote       $08
000889EF 9C07                       	dc.b	nEb2, $07
000889F1 E10C                       	smpsAlterNote       $0C
000889F3 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000889F7 E107                       	smpsAlterNote       $07
000889F9 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000889FF E10B                       	smpsAlterNote       $0B
00088A01 A202 8001                  	dc.b	nA2, $02, nRst, $01
00088A05 E107                       	smpsAlterNote       $07
00088A07 9B03                       	dc.b	nD2, $03
00088A09 E11A                       	smpsAlterNote       $1A
00088A0B A301                       	dc.b	nBb2, $01
00088A0D E1F2                       	smpsAlterNote       $F2
00088A0F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088A12 E1FF                       	smpsAlterNote       $FF
00088A14 E701                       	dc.b	smpsNoAttack, $01
00088A16 E111                       	smpsAlterNote       $11
00088A18 E701                       	dc.b	smpsNoAttack, $01
00088A1A E106                       	smpsAlterNote       $06
00088A1C E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00088A1F E107                       	smpsAlterNote       $07
00088A21 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088A25 E108                       	smpsAlterNote       $08
00088A27 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
00088A2F E109                       	smpsAlterNote       $09
00088A31 A003                       	dc.b	nG2, $03
00088A33 E11A                       	smpsAlterNote       $1A
00088A35 A301                       	dc.b	nBb2, $01
00088A37 E1F2                       	smpsAlterNote       $F2
00088A39 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088A3C E1FF                       	smpsAlterNote       $FF
00088A3E E701                       	dc.b	smpsNoAttack, $01
00088A40 E111                       	smpsAlterNote       $11
00088A42 E701                       	dc.b	smpsNoAttack, $01
00088A44 E106                       	smpsAlterNote       $06
00088A46 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00088A49 E108                       	smpsAlterNote       $08
00088A4B 9C07                       	dc.b	nEb2, $07
00088A4D E10C                       	smpsAlterNote       $0C
00088A4F A303 8001                  	dc.b	nBb2, $03, nRst, $01
00088A53 E107                       	smpsAlterNote       $07
00088A55 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
00088A61 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
00088A6B E108                       	smpsAlterNote       $08
00088A6D 9C06                       	dc.b	nEb2, $06
00088A6F E10C                       	smpsAlterNote       $0C
00088A71 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088A75 E108                       	smpsAlterNote       $08
00088A77 9C03                       	dc.b	nEb2, $03
00088A79 E109                       	smpsAlterNote       $09
00088A7B A003 8001                  	dc.b	nG2, $03, nRst, $01
00088A7F E10C                       	smpsAlterNote       $0C
00088A81 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00088A89 E107                       	smpsAlterNote       $07
00088A8B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088A8F F6F4 F8                    	smpsJump            music84_Jump04
00088A92                            
00088A92                            ; FM2 Data
00088A92                            music84_FM2:
00088A92 E0C0                       	smpsPan             panCenter, $00
00088A96 E10B                       	smpsAlterNote       $0B
00088A98 C603 8007                  	dc.b	nA5, $03, nRst, $07
00088A9C E109                       	smpsAlterNote       $09
00088A9E C403 800B                  	dc.b	nG5, $03, nRst, $0B
00088AA2 E108                       	smpsAlterNote       $08
00088AA4 C103 8004                  	dc.b	nE5, $03, nRst, $04
00088AAA E080                       	smpsPan             panLeft, $00
00088AAC E10C                       	smpsAlterNote       $0C
00088AAE E6F9                       	smpsAlterVol        $F9
00088AB0 C703                       	dc.b	nBb5, $03
00088AB2 E10B                       	smpsAlterNote       $0B
00088AB4 C603 8001                  	dc.b	nA5, $03, nRst, $01
00088AB8 E109                       	smpsAlterNote       $09
00088ABA C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00088AC0 E108                       	smpsAlterNote       $08
00088AC2 C103 8001                  	dc.b	nE5, $03, nRst, $01
00088AC6 E106                       	smpsAlterNote       $06
00088AC8 BD03                       	dc.b	nC5, $03
00088ACA E10B                       	smpsAlterNote       $0B
00088ACC BA03 8001                  	dc.b	nA4, $03, nRst, $01
00088AD2 E0C0                       	smpsPan             panCenter, $00
00088AD4 E107                       	smpsAlterNote       $07
00088AD6 E606                       	smpsAlterVol        $06
00088AD8 BF03                       	dc.b	nD5, $03
00088ADA                            
00088ADA                            music84_Jump03:
00088ADA E108                       	smpsAlterNote       $08
00088ADC C103 8001                  	dc.b	nE5, $03, nRst, $01
00088AE0 E109                       	smpsAlterNote       $09
00088AE2 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00088AE8 E10B                       	smpsAlterNote       $0B
00088AEA C607                       	dc.b	nA5, $07
00088AEC E107                       	smpsAlterNote       $07
00088AEE BF03 8001                  	dc.b	nD5, $03, nRst, $01
00088AF2 E106                       	smpsAlterNote       $06
00088AF4 C90D                       	dc.b	nC6, $0D
00088AF6 E100                       	smpsAlterNote       $00
00088AF8 E701                       	dc.b	smpsNoAttack, $01
00088AFA E1FF                       	smpsAlterNote       $FF
00088AFC E701                       	dc.b	smpsNoAttack, $01
00088AFE E103                       	smpsAlterNote       $03
00088B00 E701                       	dc.b	smpsNoAttack, $01
00088B02 E109                       	smpsAlterNote       $09
00088B04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B08 E106                       	smpsAlterNote       $06
00088B0A E701                       	dc.b	smpsNoAttack, $01
00088B0C E100                       	smpsAlterNote       $00
00088B0E E701                       	dc.b	smpsNoAttack, $01
00088B10 E10C                       	smpsAlterNote       $0C
00088B12 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00088B16 E10B                       	smpsAlterNote       $0B
00088B18 C603                       	dc.b	nA5, $03
00088B1A E109                       	smpsAlterNote       $09
00088B1C C403 8001                  	dc.b	nG5, $03, nRst, $01
00088B20 E10B                       	smpsAlterNote       $0B
00088B22 C60D                       	dc.b	nA5, $0D
00088B24 E105                       	smpsAlterNote       $05
00088B26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B2A E10B                       	smpsAlterNote       $0B
00088B2C E701                       	dc.b	smpsNoAttack, $01
00088B2E E10E                       	smpsAlterNote       $0E
00088B30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B34 E108                       	smpsAlterNote       $08
00088B36 E701                       	dc.b	smpsNoAttack, $01
00088B38 E104                       	smpsAlterNote       $04
00088B3A E701                       	dc.b	smpsNoAttack, $01
00088B3C E105                       	smpsAlterNote       $05
00088B3E E701                       	dc.b	smpsNoAttack, $01
00088B40 E10B                       	smpsAlterNote       $0B
00088B42 E701                       	dc.b	smpsNoAttack, $01
00088B44 E10F                       	smpsAlterNote       $0F
00088B46 E701                       	dc.b	smpsNoAttack, $01
00088B48 E10B                       	smpsAlterNote       $0B
00088B4A E701                       	dc.b	smpsNoAttack, $01
00088B4C E108                       	smpsAlterNote       $08
00088B4E E701                       	dc.b	smpsNoAttack, $01
00088B50 E104                       	smpsAlterNote       $04
00088B52 E701                       	dc.b	smpsNoAttack, $01
00088B54 E108                       	smpsAlterNote       $08
00088B56 E701                       	dc.b	smpsNoAttack, $01
00088B58 E10E                       	smpsAlterNote       $0E
00088B5A E701                       	dc.b	smpsNoAttack, $01
00088B5C E10F                       	smpsAlterNote       $0F
00088B5E E701                       	dc.b	smpsNoAttack, $01
00088B60 E10B                       	smpsAlterNote       $0B
00088B62 E701                       	dc.b	smpsNoAttack, $01
00088B64 E105                       	smpsAlterNote       $05
00088B66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B6A E108                       	smpsAlterNote       $08
00088B6C E701                       	dc.b	smpsNoAttack, $01
00088B6E E10E                       	smpsAlterNote       $0E
00088B70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B74 E108                       	smpsAlterNote       $08
00088B76 E701                       	dc.b	smpsNoAttack, $01
00088B78 E105                       	smpsAlterNote       $05
00088B7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B7E E10B                       	smpsAlterNote       $0B
00088B80 E701                       	dc.b	smpsNoAttack, $01
00088B82 E10F                       	smpsAlterNote       $0F
00088B84 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00088B88 E107                       	smpsAlterNote       $07
00088B8A BF03 8001                  	dc.b	nD5, $03, nRst, $01
00088B8E E108                       	smpsAlterNote       $08
00088B90 C103                       	dc.b	nE5, $03
00088B92 E109                       	smpsAlterNote       $09
00088B94 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
00088B9C E10B                       	smpsAlterNote       $0B
00088B9E C606 8001                  	dc.b	nA5, $06, nRst, $01
00088BA2 E107                       	smpsAlterNote       $07
00088BA4 BF03                       	dc.b	nD5, $03
00088BA6 E106                       	smpsAlterNote       $06
00088BA8 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
00088BAC E107                       	smpsAlterNote       $07
00088BAE CB03                       	dc.b	nD6, $03
00088BB0 E10C                       	smpsAlterNote       $0C
00088BB2 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00088BB6 E10B                       	smpsAlterNote       $0B
00088BB8 C604 8001                  	dc.b	nA5, $04, nRst, $01
00088BBC E109                       	smpsAlterNote       $09
00088BBE C404                       	dc.b	nG5, $04
00088BC0 E10B                       	smpsAlterNote       $0B
00088BC2 C60D                       	dc.b	nA5, $0D
00088BC4 E108                       	smpsAlterNote       $08
00088BC6 E701                       	dc.b	smpsNoAttack, $01
00088BC8 E104                       	smpsAlterNote       $04
00088BCA E701                       	dc.b	smpsNoAttack, $01
00088BCC E108                       	smpsAlterNote       $08
00088BCE E701                       	dc.b	smpsNoAttack, $01
00088BD0 E10B                       	smpsAlterNote       $0B
00088BD2 E701                       	dc.b	smpsNoAttack, $01
00088BD4 E10F                       	smpsAlterNote       $0F
00088BD6 E701                       	dc.b	smpsNoAttack, $01
00088BD8 E10B                       	smpsAlterNote       $0B
00088BDA E701                       	dc.b	smpsNoAttack, $01
00088BDC E105                       	smpsAlterNote       $05
00088BDE E701                       	dc.b	smpsNoAttack, $01
00088BE0 E104                       	smpsAlterNote       $04
00088BE2 E701                       	dc.b	smpsNoAttack, $01
00088BE4 E108                       	smpsAlterNote       $08
00088BE6 E701                       	dc.b	smpsNoAttack, $01
00088BE8 E10E                       	smpsAlterNote       $0E
00088BEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088BEE E10B                       	smpsAlterNote       $0B
00088BF0 E701                       	dc.b	smpsNoAttack, $01
00088BF2 E105                       	smpsAlterNote       $05
00088BF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088BF8 E10B                       	smpsAlterNote       $0B
00088BFA E701                       	dc.b	smpsNoAttack, $01
00088BFC E10E                       	smpsAlterNote       $0E
00088BFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C02 E108                       	smpsAlterNote       $08
00088C04 E701                       	dc.b	smpsNoAttack, $01
00088C06 E104                       	smpsAlterNote       $04
00088C08 E701                       	dc.b	smpsNoAttack, $01
00088C0A E105                       	smpsAlterNote       $05
00088C0C E701                       	dc.b	smpsNoAttack, $01
00088C0E E10B                       	smpsAlterNote       $0B
00088C10 E701                       	dc.b	smpsNoAttack, $01
00088C12 E10F                       	smpsAlterNote       $0F
00088C14 E701                       	dc.b	smpsNoAttack, $01
00088C16 E10B                       	smpsAlterNote       $0B
00088C18 E701                       	dc.b	smpsNoAttack, $01
00088C1A E108                       	smpsAlterNote       $08
00088C1C E701                       	dc.b	smpsNoAttack, $01
00088C1E E105                       	smpsAlterNote       $05
00088C20 8001                       	dc.b	nRst, $01
00088C22 E109                       	smpsAlterNote       $09
00088C24 C401                       	dc.b	nG5, $01
00088C26 E10B                       	smpsAlterNote       $0B
00088C28 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
00088C31 E109                       	smpsAlterNote       $09
00088C33 C404 8001                  	dc.b	nG5, $04, nRst, $01
00088C37 E10B                       	smpsAlterNote       $0B
00088C39 C604 8001                  	dc.b	nA5, $04, nRst, $01
00088C3D E107                       	smpsAlterNote       $07
00088C3F BF0D                       	dc.b	nD5, $0D
00088C41 E101                       	smpsAlterNote       $01
00088C43 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C47 E104                       	smpsAlterNote       $04
00088C49 E701                       	dc.b	smpsNoAttack, $01
00088C4B E10A                       	smpsAlterNote       $0A
00088C4D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C51 E104                       	smpsAlterNote       $04
00088C53 E701                       	dc.b	smpsNoAttack, $01
00088C55 E101                       	smpsAlterNote       $01
00088C57 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C5B E107                       	smpsAlterNote       $07
00088C5D E701                       	dc.b	smpsNoAttack, $01
00088C5F E10B                       	smpsAlterNote       $0B
00088C61 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088C65 E108                       	smpsAlterNote       $08
00088C67 C101                       	dc.b	nE5, $01
00088C69 E109                       	smpsAlterNote       $09
00088C6B E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00088C70 E10B                       	smpsAlterNote       $0B
00088C72 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00088C7A E108                       	smpsAlterNote       $08
00088C7C CD06                       	dc.b	nE6, $06
00088C7E E109                       	smpsAlterNote       $09
00088C80 CE07                       	dc.b	nF6, $07
00088C82 E108                       	smpsAlterNote       $08
00088C84 CD03 8001                  	dc.b	nE6, $03, nRst, $01
00088C88 E106                       	smpsAlterNote       $06
00088C8A C903                       	dc.b	nC6, $03
00088C8C E109                       	smpsAlterNote       $09
00088C8E C403 8001                  	dc.b	nG5, $03, nRst, $01
00088C92 E10C                       	smpsAlterNote       $0C
00088C94 C70D                       	dc.b	nBb5, $0D
00088C96 E106                       	smpsAlterNote       $06
00088C98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C9C E109                       	smpsAlterNote       $09
00088C9E E701                       	dc.b	smpsNoAttack, $01
00088CA0 E10F                       	smpsAlterNote       $0F
00088CA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088CA6 E109                       	smpsAlterNote       $09
00088CA8 E701                       	dc.b	smpsNoAttack, $01
00088CAA E106                       	smpsAlterNote       $06
00088CAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088CB0 E10C                       	smpsAlterNote       $0C
00088CB2 E701                       	dc.b	smpsNoAttack, $01
00088CB4 E110                       	smpsAlterNote       $10
00088CB6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088CBA E10B                       	smpsAlterNote       $0B
00088CBC C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
00088CC0 E105                       	smpsAlterNote       $05
00088CC2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088CC6 E10B                       	smpsAlterNote       $0B
00088CC8 E701                       	dc.b	smpsNoAttack, $01
00088CCA E10E                       	smpsAlterNote       $0E
00088CCC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088CD0 E108                       	smpsAlterNote       $08
00088CD2 E701                       	dc.b	smpsNoAttack, $01
00088CD4 E104                       	smpsAlterNote       $04
00088CD6 E701                       	dc.b	smpsNoAttack, $01
00088CD8 E105                       	smpsAlterNote       $05
00088CDA E701                       	dc.b	smpsNoAttack, $01
00088CDC E10B                       	smpsAlterNote       $0B
00088CDE E701                       	dc.b	smpsNoAttack, $01
00088CE0 E10F                       	smpsAlterNote       $0F
00088CE2 E701                       	dc.b	smpsNoAttack, $01
00088CE4 E10B                       	smpsAlterNote       $0B
00088CE6 E701                       	dc.b	smpsNoAttack, $01
00088CE8 E108                       	smpsAlterNote       $08
00088CEA E701                       	dc.b	smpsNoAttack, $01
00088CEC E104                       	smpsAlterNote       $04
00088CEE E701                       	dc.b	smpsNoAttack, $01
00088CF0 E108                       	smpsAlterNote       $08
00088CF2 E701                       	dc.b	smpsNoAttack, $01
00088CF4 E10E                       	smpsAlterNote       $0E
00088CF6 E701                       	dc.b	smpsNoAttack, $01
00088CF8 E10F                       	smpsAlterNote       $0F
00088CFA E701                       	dc.b	smpsNoAttack, $01
00088CFC E10B                       	smpsAlterNote       $0B
00088CFE E701                       	dc.b	smpsNoAttack, $01
00088D00 E105                       	smpsAlterNote       $05
00088D02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D06 E108                       	smpsAlterNote       $08
00088D08 E701                       	dc.b	smpsNoAttack, $01
00088D0A E10E                       	smpsAlterNote       $0E
00088D0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D10 E108                       	smpsAlterNote       $08
00088D12 E701                       	dc.b	smpsNoAttack, $01
00088D14 E105                       	smpsAlterNote       $05
00088D16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D1A E10B                       	smpsAlterNote       $0B
00088D1C E701                       	dc.b	smpsNoAttack, $01
00088D1E E10F                       	smpsAlterNote       $0F
00088D20 E701                       	dc.b	smpsNoAttack, $01
00088D22 E10E                       	smpsAlterNote       $0E
00088D24 E701                       	dc.b	smpsNoAttack, $01
00088D26 E108                       	smpsAlterNote       $08
00088D28 E701                       	dc.b	smpsNoAttack, $01
00088D2A E104                       	smpsAlterNote       $04
00088D2C E701                       	dc.b	smpsNoAttack, $01
00088D2E E108                       	smpsAlterNote       $08
00088D30 E701                       	dc.b	smpsNoAttack, $01
00088D32 E10E                       	smpsAlterNote       $0E
00088D34 E701                       	dc.b	smpsNoAttack, $01
00088D36 E10F                       	smpsAlterNote       $0F
00088D38 E701                       	dc.b	smpsNoAttack, $01
00088D3A E10B                       	smpsAlterNote       $0B
00088D3C E701                       	dc.b	smpsNoAttack, $01
00088D3E E105                       	smpsAlterNote       $05
00088D40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D44 E108                       	smpsAlterNote       $08
00088D46 E701                       	dc.b	smpsNoAttack, $01
00088D48 E10E                       	smpsAlterNote       $0E
00088D4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D4E E108                       	smpsAlterNote       $08
00088D50 E701                       	dc.b	smpsNoAttack, $01
00088D52 E105                       	smpsAlterNote       $05
00088D54 E701                       	dc.b	smpsNoAttack, $01
00088D56 E10B                       	smpsAlterNote       $0B
00088D58 C60D                       	dc.b	nA5, $0D
00088D5A E108                       	smpsAlterNote       $08
00088D5C E701                       	dc.b	smpsNoAttack, $01
00088D5E E104                       	smpsAlterNote       $04
00088D60 E701                       	dc.b	smpsNoAttack, $01
00088D62 E105                       	smpsAlterNote       $05
00088D64 E701                       	dc.b	smpsNoAttack, $01
00088D66 E10B                       	smpsAlterNote       $0B
00088D68 E701                       	dc.b	smpsNoAttack, $01
00088D6A E10F                       	smpsAlterNote       $0F
00088D6C E701                       	dc.b	smpsNoAttack, $01
00088D6E E10B                       	smpsAlterNote       $0B
00088D70 E701                       	dc.b	smpsNoAttack, $01
00088D72 E108                       	smpsAlterNote       $08
00088D74 E701                       	dc.b	smpsNoAttack, $01
00088D76 E104                       	smpsAlterNote       $04
00088D78 E701                       	dc.b	smpsNoAttack, $01
00088D7A E108                       	smpsAlterNote       $08
00088D7C E701                       	dc.b	smpsNoAttack, $01
00088D7E E10E                       	smpsAlterNote       $0E
00088D80 E701                       	dc.b	smpsNoAttack, $01
00088D82 E10F                       	smpsAlterNote       $0F
00088D84 E701                       	dc.b	smpsNoAttack, $01
00088D88 E109                       	smpsAlterNote       $09
00088D8A E6FF                       	smpsAlterVol        $FF
00088D8C C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00088D96 E108                       	smpsAlterNote       $08
00088D98 C103 800E                  	dc.b	nE5, $03, nRst, $0E
00088D9E E107                       	smpsAlterNote       $07
00088DA0 E601                       	smpsAlterVol        $01
00088DA2 BF03                       	dc.b	nD5, $03
00088DA4 E108                       	smpsAlterNote       $08
00088DA6 C103 8001                  	dc.b	nE5, $03, nRst, $01
00088DAA E109                       	smpsAlterNote       $09
00088DAC C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00088DB2 E10B                       	smpsAlterNote       $0B
00088DB4 C606 8001                  	dc.b	nA5, $06, nRst, $01
00088DB8 E107                       	smpsAlterNote       $07
00088DBA BF02 8001                  	dc.b	nD5, $02, nRst, $01
00088DBE E106                       	smpsAlterNote       $06
00088DC0 C90D                       	dc.b	nC6, $0D
00088DC2 E103                       	smpsAlterNote       $03
00088DC4 E701                       	dc.b	smpsNoAttack, $01
00088DC6 E1FF                       	smpsAlterNote       $FF
00088DC8 E701                       	dc.b	smpsNoAttack, $01
00088DCA E103                       	smpsAlterNote       $03
00088DCC E701                       	dc.b	smpsNoAttack, $01
00088DCE E109                       	smpsAlterNote       $09
00088DD0 E701                       	dc.b	smpsNoAttack, $01
00088DD2 E10A                       	smpsAlterNote       $0A
00088DD4 E701                       	dc.b	smpsNoAttack, $01
00088DD6 E106                       	smpsAlterNote       $06
00088DD8 E701                       	dc.b	smpsNoAttack, $01
00088DDA E100                       	smpsAlterNote       $00
00088DDC E701                       	dc.b	smpsNoAttack, $01
00088DDE E10C                       	smpsAlterNote       $0C
00088DE0 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00088DE4 E10B                       	smpsAlterNote       $0B
00088DE6 C603                       	dc.b	nA5, $03
00088DE8 E109                       	smpsAlterNote       $09
00088DEA C403 8001                  	dc.b	nG5, $03, nRst, $01
00088DEE E10B                       	smpsAlterNote       $0B
00088DF0 C60D                       	dc.b	nA5, $0D
00088DF2 E105                       	smpsAlterNote       $05
00088DF4 E701                       	dc.b	smpsNoAttack, $01
00088DF6 E104                       	smpsAlterNote       $04
00088DF8 E701                       	dc.b	smpsNoAttack, $01
00088DFA E108                       	smpsAlterNote       $08
00088DFC E701                       	dc.b	smpsNoAttack, $01
00088DFE E10E                       	smpsAlterNote       $0E
00088E00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E04 E10B                       	smpsAlterNote       $0B
00088E06 E701                       	dc.b	smpsNoAttack, $01
00088E08 E105                       	smpsAlterNote       $05
00088E0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E0E E10B                       	smpsAlterNote       $0B
00088E10 E701                       	dc.b	smpsNoAttack, $01
00088E12 E10E                       	smpsAlterNote       $0E
00088E14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E18 E108                       	smpsAlterNote       $08
00088E1A E701                       	dc.b	smpsNoAttack, $01
00088E1C E104                       	smpsAlterNote       $04
00088E1E E701                       	dc.b	smpsNoAttack, $01
00088E20 E105                       	smpsAlterNote       $05
00088E22 E701                       	dc.b	smpsNoAttack, $01
00088E24 E10B                       	smpsAlterNote       $0B
00088E26 E701                       	dc.b	smpsNoAttack, $01
00088E28 E10F                       	smpsAlterNote       $0F
00088E2A E701                       	dc.b	smpsNoAttack, $01
00088E2C E10B                       	smpsAlterNote       $0B
00088E2E E701                       	dc.b	smpsNoAttack, $01
00088E30 E108                       	smpsAlterNote       $08
00088E32 E701                       	dc.b	smpsNoAttack, $01
00088E34 E104                       	smpsAlterNote       $04
00088E36 E701                       	dc.b	smpsNoAttack, $01
00088E38 E108                       	smpsAlterNote       $08
00088E3A E701                       	dc.b	smpsNoAttack, $01
00088E3C E10E                       	smpsAlterNote       $0E
00088E3E E701                       	dc.b	smpsNoAttack, $01
00088E40 E10F                       	smpsAlterNote       $0F
00088E42 E701                       	dc.b	smpsNoAttack, $01
00088E44 E10B                       	smpsAlterNote       $0B
00088E46 E701                       	dc.b	smpsNoAttack, $01
00088E48 E105                       	smpsAlterNote       $05
00088E4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E4E E108                       	smpsAlterNote       $08
00088E50 E701                       	dc.b	smpsNoAttack, $01
00088E52 E10E                       	smpsAlterNote       $0E
00088E54 E701                       	dc.b	smpsNoAttack, $01
00088E56 E10F                       	smpsAlterNote       $0F
00088E58 800F                       	dc.b	nRst, $0F
00088E5A E107                       	smpsAlterNote       $07
00088E5C BF02 8001                  	dc.b	nD5, $02, nRst, $01
00088E60 E108                       	smpsAlterNote       $08
00088E62 C103                       	dc.b	nE5, $03
00088E64 E109                       	smpsAlterNote       $09
00088E66 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00088E6C E10B                       	smpsAlterNote       $0B
00088E6E C606 8001                  	dc.b	nA5, $06, nRst, $01
00088E72 E107                       	smpsAlterNote       $07
00088E74 BF03                       	dc.b	nD5, $03
00088E76 E106                       	smpsAlterNote       $06
00088E78 C90E                       	dc.b	nC6, $0E
00088E7A E107                       	smpsAlterNote       $07
00088E7C CB03 8001                  	dc.b	nD6, $03, nRst, $01
00088E80 E10C                       	smpsAlterNote       $0C
00088E82 C704                       	dc.b	nBb5, $04
00088E84 E10B                       	smpsAlterNote       $0B
00088E86 C604 8001                  	dc.b	nA5, $04, nRst, $01
00088E8A E109                       	smpsAlterNote       $09
00088E8C C404                       	dc.b	nG5, $04
00088E8E E10B                       	smpsAlterNote       $0B
00088E90 C60D                       	dc.b	nA5, $0D
00088E92 E108                       	smpsAlterNote       $08
00088E94 E701                       	dc.b	smpsNoAttack, $01
00088E96 E105                       	smpsAlterNote       $05
00088E98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E9C E10B                       	smpsAlterNote       $0B
00088E9E E701                       	dc.b	smpsNoAttack, $01
00088EA0 E10F                       	smpsAlterNote       $0F
00088EA2 E701                       	dc.b	smpsNoAttack, $01
00088EA4 E10E                       	smpsAlterNote       $0E
00088EA6 E701                       	dc.b	smpsNoAttack, $01
00088EA8 E108                       	smpsAlterNote       $08
00088EAA E701                       	dc.b	smpsNoAttack, $01
00088EAC E104                       	smpsAlterNote       $04
00088EAE E701                       	dc.b	smpsNoAttack, $01
00088EB0 E108                       	smpsAlterNote       $08
00088EB2 E701                       	dc.b	smpsNoAttack, $01
00088EB4 E10B                       	smpsAlterNote       $0B
00088EB6 E701                       	dc.b	smpsNoAttack, $01
00088EB8 E10F                       	smpsAlterNote       $0F
00088EBA E701                       	dc.b	smpsNoAttack, $01
00088EBC E10B                       	smpsAlterNote       $0B
00088EBE E701                       	dc.b	smpsNoAttack, $01
00088EC0 E105                       	smpsAlterNote       $05
00088EC2 E701                       	dc.b	smpsNoAttack, $01
00088EC4 E104                       	smpsAlterNote       $04
00088EC6 E701                       	dc.b	smpsNoAttack, $01
00088EC8 E108                       	smpsAlterNote       $08
00088ECA E701                       	dc.b	smpsNoAttack, $01
00088ECC E10E                       	smpsAlterNote       $0E
00088ECE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088ED2 E10B                       	smpsAlterNote       $0B
00088ED4 E701                       	dc.b	smpsNoAttack, $01
00088ED6 E105                       	smpsAlterNote       $05
00088ED8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088EDC E10B                       	smpsAlterNote       $0B
00088EDE E701                       	dc.b	smpsNoAttack, $01
00088EE0 E10E                       	smpsAlterNote       $0E
00088EE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088EE6 E108                       	smpsAlterNote       $08
00088EE8 E701                       	dc.b	smpsNoAttack, $01
00088EEA E105                       	smpsAlterNote       $05
00088EEC 8001                       	dc.b	nRst, $01
00088EEE E109                       	smpsAlterNote       $09
00088EF0 C402                       	dc.b	nG5, $02
00088EF2 E10B                       	smpsAlterNote       $0B
00088EF4 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00088EFD E109                       	smpsAlterNote       $09
00088EFF C404                       	dc.b	nG5, $04
00088F01 E10B                       	smpsAlterNote       $0B
00088F03 C604 8001                  	dc.b	nA5, $04, nRst, $01
00088F07 E107                       	smpsAlterNote       $07
00088F09 BF0D                       	dc.b	nD5, $0D
00088F0B E101                       	smpsAlterNote       $01
00088F0D E701                       	dc.b	smpsNoAttack, $01
00088F0F E100                       	smpsAlterNote       $00
00088F11 E701                       	dc.b	smpsNoAttack, $01
00088F13 E104                       	smpsAlterNote       $04
00088F15 E701                       	dc.b	smpsNoAttack, $01
00088F17 E10A                       	smpsAlterNote       $0A
00088F19 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F1D E107                       	smpsAlterNote       $07
00088F1F E701                       	dc.b	smpsNoAttack, $01
00088F21 E101                       	smpsAlterNote       $01
00088F23 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F27 E107                       	smpsAlterNote       $07
00088F29 E701                       	dc.b	smpsNoAttack, $01
00088F2B E10A                       	smpsAlterNote       $0A
00088F2D E701                       	dc.b	smpsNoAttack, $01
00088F2F E10B                       	smpsAlterNote       $0B
00088F31 8001                       	dc.b	nRst, $01
00088F33 E108                       	smpsAlterNote       $08
00088F35 C101                       	dc.b	nE5, $01
00088F37 E109                       	smpsAlterNote       $09
00088F39 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00088F3E E10B                       	smpsAlterNote       $0B
00088F40 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00088F48 E108                       	smpsAlterNote       $08
00088F4A CD06 8001                  	dc.b	nE6, $06, nRst, $01
00088F4E E109                       	smpsAlterNote       $09
00088F50 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00088F54 E108                       	smpsAlterNote       $08
00088F56 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00088F5A E106                       	smpsAlterNote       $06
00088F5C C903                       	dc.b	nC6, $03
00088F5E E109                       	smpsAlterNote       $09
00088F60 C403 8001                  	dc.b	nG5, $03, nRst, $01
00088F64 E10C                       	smpsAlterNote       $0C
00088F66 C70D                       	dc.b	nBb5, $0D
00088F68 E109                       	smpsAlterNote       $09
00088F6A E701                       	dc.b	smpsNoAttack, $01
00088F6C E105                       	smpsAlterNote       $05
00088F6E E701                       	dc.b	smpsNoAttack, $01
00088F70 E109                       	smpsAlterNote       $09
00088F72 E701                       	dc.b	smpsNoAttack, $01
00088F74 E10F                       	smpsAlterNote       $0F
00088F76 E701                       	dc.b	smpsNoAttack, $01
00088F78 E110                       	smpsAlterNote       $10
00088F7A E701                       	dc.b	smpsNoAttack, $01
00088F7C E10C                       	smpsAlterNote       $0C
00088F7E E701                       	dc.b	smpsNoAttack, $01
00088F80 E106                       	smpsAlterNote       $06
00088F82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F86 E109                       	smpsAlterNote       $09
00088F88 E701                       	dc.b	smpsNoAttack, $01
00088F8A E10F                       	smpsAlterNote       $0F
00088F8C E701                       	dc.b	smpsNoAttack, $01
00088F8E E110                       	smpsAlterNote       $10
00088F90 8001                       	dc.b	nRst, $01
00088F92 E10B                       	smpsAlterNote       $0B
00088F94 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00088F9A E105                       	smpsAlterNote       $05
00088F9C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FA0 E108                       	smpsAlterNote       $08
00088FA2 E701                       	dc.b	smpsNoAttack, $01
00088FA4 E10E                       	smpsAlterNote       $0E
00088FA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FAA E108                       	smpsAlterNote       $08
00088FAC E701                       	dc.b	smpsNoAttack, $01
00088FAE E105                       	smpsAlterNote       $05
00088FB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FB4 E10B                       	smpsAlterNote       $0B
00088FB6 E701                       	dc.b	smpsNoAttack, $01
00088FB8 E10F                       	smpsAlterNote       $0F
00088FBA E701                       	dc.b	smpsNoAttack, $01
00088FBC E10E                       	smpsAlterNote       $0E
00088FBE E701                       	dc.b	smpsNoAttack, $01
00088FC0 E108                       	smpsAlterNote       $08
00088FC2 E701                       	dc.b	smpsNoAttack, $01
00088FC4 E104                       	smpsAlterNote       $04
00088FC6 E701                       	dc.b	smpsNoAttack, $01
00088FC8 E108                       	smpsAlterNote       $08
00088FCA E701                       	dc.b	smpsNoAttack, $01
00088FCC E10B                       	smpsAlterNote       $0B
00088FCE E701                       	dc.b	smpsNoAttack, $01
00088FD0 E10F                       	smpsAlterNote       $0F
00088FD2 E701                       	dc.b	smpsNoAttack, $01
00088FD4 E10B                       	smpsAlterNote       $0B
00088FD6 E701                       	dc.b	smpsNoAttack, $01
00088FD8 E105                       	smpsAlterNote       $05
00088FDA E701                       	dc.b	smpsNoAttack, $01
00088FDC E104                       	smpsAlterNote       $04
00088FDE E701                       	dc.b	smpsNoAttack, $01
00088FE0 E108                       	smpsAlterNote       $08
00088FE2 E701                       	dc.b	smpsNoAttack, $01
00088FE4 E10E                       	smpsAlterNote       $0E
00088FE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FEA E10B                       	smpsAlterNote       $0B
00088FEC E701                       	dc.b	smpsNoAttack, $01
00088FEE E105                       	smpsAlterNote       $05
00088FF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FF4 E10B                       	smpsAlterNote       $0B
00088FF6 E701                       	dc.b	smpsNoAttack, $01
00088FF8 E10E                       	smpsAlterNote       $0E
00088FFA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FFE E108                       	smpsAlterNote       $08
00089000 E701                       	dc.b	smpsNoAttack, $01
00089002 E104                       	smpsAlterNote       $04
00089004 E701                       	dc.b	smpsNoAttack, $01
00089006 E105                       	smpsAlterNote       $05
00089008 E701                       	dc.b	smpsNoAttack, $01
0008900A E10B                       	smpsAlterNote       $0B
0008900C E701                       	dc.b	smpsNoAttack, $01
0008900E E10F                       	smpsAlterNote       $0F
00089010 E701                       	dc.b	smpsNoAttack, $01
00089012 E10B                       	smpsAlterNote       $0B
00089014 E701                       	dc.b	smpsNoAttack, $01
00089016 E108                       	smpsAlterNote       $08
00089018 E701                       	dc.b	smpsNoAttack, $01
0008901A E104                       	smpsAlterNote       $04
0008901C E701                       	dc.b	smpsNoAttack, $01
0008901E E108                       	smpsAlterNote       $08
00089020 E701                       	dc.b	smpsNoAttack, $01
00089022 E10E                       	smpsAlterNote       $0E
00089024 E701                       	dc.b	smpsNoAttack, $01
00089026 E10F                       	smpsAlterNote       $0F
00089028 E701                       	dc.b	smpsNoAttack, $01
0008902A E10B                       	smpsAlterNote       $0B
0008902C E701                       	dc.b	smpsNoAttack, $01
0008902E E105                       	smpsAlterNote       $05
00089030 E701                       	dc.b	smpsNoAttack, $01
00089032 E10B                       	smpsAlterNote       $0B
00089034 C60E                       	dc.b	nA5, $0E
00089036 E105                       	smpsAlterNote       $05
00089038 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008903C E10B                       	smpsAlterNote       $0B
0008903E E701                       	dc.b	smpsNoAttack, $01
00089040 E10E                       	smpsAlterNote       $0E
00089042 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089046 E108                       	smpsAlterNote       $08
00089048 E701                       	dc.b	smpsNoAttack, $01
0008904A E104                       	smpsAlterNote       $04
0008904C E701                       	dc.b	smpsNoAttack, $01
0008904E E105                       	smpsAlterNote       $05
00089050 E701                       	dc.b	smpsNoAttack, $01
00089052 E10B                       	smpsAlterNote       $0B
00089054 E701                       	dc.b	smpsNoAttack, $01
00089056 E10F                       	smpsAlterNote       $0F
00089058 E701                       	dc.b	smpsNoAttack, $01
0008905A E10B                       	smpsAlterNote       $0B
0008905C E701                       	dc.b	smpsNoAttack, $01
0008905E E108                       	smpsAlterNote       $08
00089060 E701                       	dc.b	smpsNoAttack, $01
00089062 E104                       	smpsAlterNote       $04
00089064 E701                       	dc.b	smpsNoAttack, $01
00089066 E108                       	smpsAlterNote       $08
00089068 E701                       	dc.b	smpsNoAttack, $01
0008906A E10E                       	smpsAlterNote       $0E
0008906C E701                       	dc.b	smpsNoAttack, $01
0008906E E10F                       	smpsAlterNote       $0F
00089070 E701                       	dc.b	smpsNoAttack, $01
00089072 E10B                       	smpsAlterNote       $0B
00089074 E701                       	dc.b	smpsNoAttack, $01
00089076 E105                       	smpsAlterNote       $05
00089078 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008907C E108                       	smpsAlterNote       $08
0008907E E701                       	dc.b	smpsNoAttack, $01
00089080 E10E                       	smpsAlterNote       $0E
00089082 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089086 E108                       	smpsAlterNote       $08
00089088 E701                       	dc.b	smpsNoAttack, $01
0008908A E105                       	smpsAlterNote       $05
0008908C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089090 E10B                       	smpsAlterNote       $0B
00089092 E701                       	dc.b	smpsNoAttack, $01
00089094 E10F                       	smpsAlterNote       $0F
00089096 E701                       	dc.b	smpsNoAttack, $01
00089098 E10E                       	smpsAlterNote       $0E
0008909A E701                       	dc.b	smpsNoAttack, $01
0008909C E108                       	smpsAlterNote       $08
0008909E E701                       	dc.b	smpsNoAttack, $01
000890A0 E104                       	smpsAlterNote       $04
000890A2 E701                       	dc.b	smpsNoAttack, $01
000890A4 E108                       	smpsAlterNote       $08
000890A6 E701                       	dc.b	smpsNoAttack, $01
000890A8 E10E                       	smpsAlterNote       $0E
000890AA E701                       	dc.b	smpsNoAttack, $01
000890AC E10F                       	smpsAlterNote       $0F
000890AE E701                       	dc.b	smpsNoAttack, $01
000890B0 E10B                       	smpsAlterNote       $0B
000890B2 E701                       	dc.b	smpsNoAttack, $01
000890B4 E105                       	smpsAlterNote       $05
000890B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000890BA E108                       	smpsAlterNote       $08
000890BC E701                       	dc.b	smpsNoAttack, $01
000890BE E10E                       	smpsAlterNote       $0E
000890C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000890C4 E108                       	smpsAlterNote       $08
000890C6 E701                       	dc.b	smpsNoAttack, $01
000890C8 E105                       	smpsAlterNote       $05
000890CA E701                       	dc.b	smpsNoAttack, $01
000890CE E10B                       	smpsAlterNote       $0B
000890D0 E6FD                       	smpsAlterVol        $FD
000890D2 C604 8001                  	dc.b	nA5, $04, nRst, $01
000890D6 E109                       	smpsAlterNote       $09
000890D8 C404                       	dc.b	nG5, $04
000890DA E10B                       	smpsAlterNote       $0B
000890DC C604 8001                  	dc.b	nA5, $04, nRst, $01
000890E0 E107                       	smpsAlterNote       $07
000890E2 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000890E8 E10B                       	smpsAlterNote       $0B
000890EA C604                       	dc.b	nA5, $04
000890EC E109                       	smpsAlterNote       $09
000890EE C404 8001                  	dc.b	nG5, $04, nRst, $01
000890F2 E10B                       	smpsAlterNote       $0B
000890F4 C604                       	dc.b	nA5, $04
000890F6 E108                       	smpsAlterNote       $08
000890F8 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
00089100 E106                       	smpsAlterNote       $06
00089102 C904 8001                  	dc.b	nC6, $04, nRst, $01
00089106 E10C                       	smpsAlterNote       $0C
00089108 C704                       	dc.b	nBb5, $04
0008910A E10B                       	smpsAlterNote       $0B
0008910C C604 8001                  	dc.b	nA5, $04, nRst, $01
00089110 E109                       	smpsAlterNote       $09
00089112 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008911C E10B                       	smpsAlterNote       $0B
0008911E C60D                       	dc.b	nA5, $0D
00089120 E108                       	smpsAlterNote       $08
00089122 E701                       	dc.b	smpsNoAttack, $01
00089124 E104                       	smpsAlterNote       $04
00089126 E701                       	dc.b	smpsNoAttack, $01
00089128 E108                       	smpsAlterNote       $08
0008912A E701                       	dc.b	smpsNoAttack, $01
0008912C E10E                       	smpsAlterNote       $0E
0008912E E701                       	dc.b	smpsNoAttack, $01
00089130 E10F                       	smpsAlterNote       $0F
00089132 E701                       	dc.b	smpsNoAttack, $01
00089134 E10B                       	smpsAlterNote       $0B
00089136 E701                       	dc.b	smpsNoAttack, $01
00089138 E105                       	smpsAlterNote       $05
0008913A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008913E E108                       	smpsAlterNote       $08
00089140 E701                       	dc.b	smpsNoAttack, $01
00089142 E10E                       	smpsAlterNote       $0E
00089144 E701                       	dc.b	smpsNoAttack, $01
00089146 E10F                       	smpsAlterNote       $0F
00089148 8001                       	dc.b	nRst, $01
0008914A E109                       	smpsAlterNote       $09
0008914C C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00089152 E108                       	smpsAlterNote       $08
00089154 C10D                       	dc.b	nE5, $0D
00089156 E102                       	smpsAlterNote       $02
00089158 E701                       	dc.b	smpsNoAttack, $01
0008915A E101                       	smpsAlterNote       $01
0008915C E701                       	dc.b	smpsNoAttack, $01
0008915E E105                       	smpsAlterNote       $05
00089160 E701                       	dc.b	smpsNoAttack, $01
00089162 E10B                       	smpsAlterNote       $0B
00089164 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089168 E108                       	smpsAlterNote       $08
0008916A E701                       	dc.b	smpsNoAttack, $01
0008916C E102                       	smpsAlterNote       $02
0008916E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089172 E108                       	smpsAlterNote       $08
00089174 E701                       	dc.b	smpsNoAttack, $01
00089176 E10B                       	smpsAlterNote       $0B
00089178 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008917C E105                       	smpsAlterNote       $05
0008917E E701                       	dc.b	smpsNoAttack, $01
00089180 E101                       	smpsAlterNote       $01
00089182 E701                       	dc.b	smpsNoAttack, $01
00089184 E102                       	smpsAlterNote       $02
00089186 E701                       	dc.b	smpsNoAttack, $01
00089188 E108                       	smpsAlterNote       $08
0008918A E701                       	dc.b	smpsNoAttack, $01
0008918C E10C                       	smpsAlterNote       $0C
0008918E E701                       	dc.b	smpsNoAttack, $01
00089190 E108                       	smpsAlterNote       $08
00089192 E701                       	dc.b	smpsNoAttack, $01
00089194 E105                       	smpsAlterNote       $05
00089196 E701                       	dc.b	smpsNoAttack, $01
00089198 E101                       	smpsAlterNote       $01
0008919A E701                       	dc.b	smpsNoAttack, $01
0008919C E105                       	smpsAlterNote       $05
0008919E E701                       	dc.b	smpsNoAttack, $01
000891A0 E10B                       	smpsAlterNote       $0B
000891A2 E701                       	dc.b	smpsNoAttack, $01
000891A4 E10C                       	smpsAlterNote       $0C
000891A6 E701                       	dc.b	smpsNoAttack, $01
000891A8 E108                       	smpsAlterNote       $08
000891AA E701                       	dc.b	smpsNoAttack, $01
000891AC E102                       	smpsAlterNote       $02
000891AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891B2 E105                       	smpsAlterNote       $05
000891B4 E701                       	dc.b	smpsNoAttack, $01
000891B6 E10B                       	smpsAlterNote       $0B
000891B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891BC E105                       	smpsAlterNote       $05
000891BE E701                       	dc.b	smpsNoAttack, $01
000891C0 E102                       	smpsAlterNote       $02
000891C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891C6 E108                       	smpsAlterNote       $08
000891C8 E701                       	dc.b	smpsNoAttack, $01
000891CA E10C                       	smpsAlterNote       $0C
000891CC E701                       	dc.b	smpsNoAttack, $01
000891CE E10B                       	smpsAlterNote       $0B
000891D0 E701                       	dc.b	smpsNoAttack, $01
000891D2 E105                       	smpsAlterNote       $05
000891D4 E701                       	dc.b	smpsNoAttack, $01
000891D6 E101                       	smpsAlterNote       $01
000891D8 E701                       	dc.b	smpsNoAttack, $01
000891DA E105                       	smpsAlterNote       $05
000891DC E701                       	dc.b	smpsNoAttack, $01
000891DE E108                       	smpsAlterNote       $08
000891E0 E701                       	dc.b	smpsNoAttack, $01
000891E2 E10C                       	smpsAlterNote       $0C
000891E4 E701                       	dc.b	smpsNoAttack, $01
000891E6 E108                       	smpsAlterNote       $08
000891E8 E701                       	dc.b	smpsNoAttack, $01
000891EA E102                       	smpsAlterNote       $02
000891EC E701                       	dc.b	smpsNoAttack, $01
000891EE E101                       	smpsAlterNote       $01
000891F0 E701                       	dc.b	smpsNoAttack, $01
000891F2 E105                       	smpsAlterNote       $05
000891F4 E701                       	dc.b	smpsNoAttack, $01
000891F6 E10B                       	smpsAlterNote       $0B
000891F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891FC E108                       	smpsAlterNote       $08
000891FE E701                       	dc.b	smpsNoAttack, $01
00089200 E102                       	smpsAlterNote       $02
00089202 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089206 E108                       	smpsAlterNote       $08
00089208 E701                       	dc.b	smpsNoAttack, $01
0008920A E10B                       	smpsAlterNote       $0B
0008920C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089210 E105                       	smpsAlterNote       $05
00089212 E701                       	dc.b	smpsNoAttack, $01
00089214 E101                       	smpsAlterNote       $01
00089216 E701                       	dc.b	smpsNoAttack, $01
00089218 E102                       	smpsAlterNote       $02
0008921A E701                       	dc.b	smpsNoAttack, $01
0008921C E108                       	smpsAlterNote       $08
0008921E E701                       	dc.b	smpsNoAttack, $01
00089220 E10C                       	smpsAlterNote       $0C
00089222 E701                       	dc.b	smpsNoAttack, $01
00089224 E108                       	smpsAlterNote       $08
00089226 E701                       	dc.b	smpsNoAttack, $01
00089228 E105                       	smpsAlterNote       $05
0008922A E701                       	dc.b	smpsNoAttack, $01
0008922C E101                       	smpsAlterNote       $01
0008922E E701                       	dc.b	smpsNoAttack, $01
00089230 E105                       	smpsAlterNote       $05
00089232 E701                       	dc.b	smpsNoAttack, $01
00089234 E10B                       	smpsAlterNote       $0B
00089236 E701                       	dc.b	smpsNoAttack, $01
00089238 E10C                       	smpsAlterNote       $0C
0008923A E701                       	dc.b	smpsNoAttack, $01
0008923C E108                       	smpsAlterNote       $08
0008923E E701                       	dc.b	smpsNoAttack, $01
00089240 E102                       	smpsAlterNote       $02
00089242 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089246 E105                       	smpsAlterNote       $05
00089248 E701                       	dc.b	smpsNoAttack, $01
0008924A E10B                       	smpsAlterNote       $0B
0008924C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089250 E105                       	smpsAlterNote       $05
00089252 E701                       	dc.b	smpsNoAttack, $01
00089254 E101                       	smpsAlterNote       $01
00089256 E701                       	dc.b	smpsNoAttack, $01
00089258 E102                       	smpsAlterNote       $02
0008925A E701                       	dc.b	smpsNoAttack, $01
0008925C E108                       	smpsAlterNote       $08
0008925E E701                       	dc.b	smpsNoAttack, $01
00089260 E10C                       	smpsAlterNote       $0C
00089262 E701                       	dc.b	smpsNoAttack, $01
00089264 E108                       	smpsAlterNote       $08
00089266 E701                       	dc.b	smpsNoAttack, $01
00089268 E105                       	smpsAlterNote       $05
0008926A E701                       	dc.b	smpsNoAttack, $01
0008926C E101                       	smpsAlterNote       $01
0008926E E701                       	dc.b	smpsNoAttack, $01
00089270 E105                       	smpsAlterNote       $05
00089272 E701                       	dc.b	smpsNoAttack, $01
00089274 E10B                       	smpsAlterNote       $0B
00089276 E701                       	dc.b	smpsNoAttack, $01
00089278 E10C                       	smpsAlterNote       $0C
0008927A E701                       	dc.b	smpsNoAttack, $01
0008927C E108                       	smpsAlterNote       $08
0008927E E701                       	dc.b	smpsNoAttack, $01
00089280 E102                       	smpsAlterNote       $02
00089282 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089286 E105                       	smpsAlterNote       $05
00089288 E701                       	dc.b	smpsNoAttack, $01
0008928A E10B                       	smpsAlterNote       $0B
0008928C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089290 E105                       	smpsAlterNote       $05
00089292 E701                       	dc.b	smpsNoAttack, $01
00089294 E102                       	smpsAlterNote       $02
00089296 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008929A E108                       	smpsAlterNote       $08
0008929C E701                       	dc.b	smpsNoAttack, $01
0008929E E10C                       	smpsAlterNote       $0C
000892A0 E701                       	dc.b	smpsNoAttack, $01
000892A2 E10B                       	smpsAlterNote       $0B
000892A4 E701                       	dc.b	smpsNoAttack, $01
000892A6 E105                       	smpsAlterNote       $05
000892A8 E701                       	dc.b	smpsNoAttack, $01
000892AA E101                       	smpsAlterNote       $01
000892AC E701                       	dc.b	smpsNoAttack, $01
000892AE E105                       	smpsAlterNote       $05
000892B0 E701                       	dc.b	smpsNoAttack, $01
000892B2 E108                       	smpsAlterNote       $08
000892B4 E701                       	dc.b	smpsNoAttack, $01
000892B6 E10C                       	smpsAlterNote       $0C
000892B8 E701                       	dc.b	smpsNoAttack, $01
000892BC E10B                       	smpsAlterNote       $0B
000892BE C604 8001                  	dc.b	nA5, $04, nRst, $01
000892C2 E109                       	smpsAlterNote       $09
000892C4 C404                       	dc.b	nG5, $04
000892C6 E10B                       	smpsAlterNote       $0B
000892C8 C604 8001                  	dc.b	nA5, $04, nRst, $01
000892CC E107                       	smpsAlterNote       $07
000892CE BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000892D4 E10B                       	smpsAlterNote       $0B
000892D6 C604                       	dc.b	nA5, $04
000892D8 E109                       	smpsAlterNote       $09
000892DA C404 8001                  	dc.b	nG5, $04, nRst, $01
000892DE E10B                       	smpsAlterNote       $0B
000892E0 C604                       	dc.b	nA5, $04
000892E2 E108                       	smpsAlterNote       $08
000892E4 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
000892EA E106                       	smpsAlterNote       $06
000892EC C904 8001                  	dc.b	nC6, $04, nRst, $01
000892F0 E10C                       	smpsAlterNote       $0C
000892F2 C704                       	dc.b	nBb5, $04
000892F4 E10B                       	smpsAlterNote       $0B
000892F6 C604 8001                  	dc.b	nA5, $04, nRst, $01
000892FA E109                       	smpsAlterNote       $09
000892FC C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00089306 E10B                       	smpsAlterNote       $0B
00089308 C60D                       	dc.b	nA5, $0D
0008930A E108                       	smpsAlterNote       $08
0008930C E701                       	dc.b	smpsNoAttack, $01
0008930E E104                       	smpsAlterNote       $04
00089310 E701                       	dc.b	smpsNoAttack, $01
00089312 E108                       	smpsAlterNote       $08
00089314 E701                       	dc.b	smpsNoAttack, $01
00089316 E10B                       	smpsAlterNote       $0B
00089318 E701                       	dc.b	smpsNoAttack, $01
0008931A E10F                       	smpsAlterNote       $0F
0008931C E701                       	dc.b	smpsNoAttack, $01
0008931E E10B                       	smpsAlterNote       $0B
00089320 E701                       	dc.b	smpsNoAttack, $01
00089322 E105                       	smpsAlterNote       $05
00089324 E701                       	dc.b	smpsNoAttack, $01
00089326 E104                       	smpsAlterNote       $04
00089328 E701                       	dc.b	smpsNoAttack, $01
0008932A E108                       	smpsAlterNote       $08
0008932C E701                       	dc.b	smpsNoAttack, $01
0008932E E10E                       	smpsAlterNote       $0E
00089330 E701                       	dc.b	smpsNoAttack, $01
00089332 E10F                       	smpsAlterNote       $0F
00089334 8001                       	dc.b	nRst, $01
00089336 E109                       	smpsAlterNote       $09
00089338 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008933E E108                       	smpsAlterNote       $08
00089340 C10D                       	dc.b	nE5, $0D
00089342 E105                       	smpsAlterNote       $05
00089344 E701                       	dc.b	smpsNoAttack, $01
00089346 E101                       	smpsAlterNote       $01
00089348 E701                       	dc.b	smpsNoAttack, $01
0008934A E105                       	smpsAlterNote       $05
0008934C E701                       	dc.b	smpsNoAttack, $01
0008934E E10B                       	smpsAlterNote       $0B
00089350 E701                       	dc.b	smpsNoAttack, $01
00089352 E10C                       	smpsAlterNote       $0C
00089354 E701                       	dc.b	smpsNoAttack, $01
00089356 E108                       	smpsAlterNote       $08
00089358 E701                       	dc.b	smpsNoAttack, $01
0008935A E102                       	smpsAlterNote       $02
0008935C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089360 E105                       	smpsAlterNote       $05
00089362 E701                       	dc.b	smpsNoAttack, $01
00089364 E10B                       	smpsAlterNote       $0B
00089366 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008936A E105                       	smpsAlterNote       $05
0008936C E701                       	dc.b	smpsNoAttack, $01
0008936E E102                       	smpsAlterNote       $02
00089370 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089374 E108                       	smpsAlterNote       $08
00089376 E701                       	dc.b	smpsNoAttack, $01
00089378 E10C                       	smpsAlterNote       $0C
0008937A E701                       	dc.b	smpsNoAttack, $01
0008937C E10B                       	smpsAlterNote       $0B
0008937E E701                       	dc.b	smpsNoAttack, $01
00089380 E105                       	smpsAlterNote       $05
00089382 E701                       	dc.b	smpsNoAttack, $01
00089384 E101                       	smpsAlterNote       $01
00089386 E701                       	dc.b	smpsNoAttack, $01
00089388 E105                       	smpsAlterNote       $05
0008938A E701                       	dc.b	smpsNoAttack, $01
0008938C E108                       	smpsAlterNote       $08
0008938E E701                       	dc.b	smpsNoAttack, $01
00089390 E10C                       	smpsAlterNote       $0C
00089392 E701                       	dc.b	smpsNoAttack, $01
00089394 E108                       	smpsAlterNote       $08
00089396 E701                       	dc.b	smpsNoAttack, $01
00089398 E102                       	smpsAlterNote       $02
0008939A E701                       	dc.b	smpsNoAttack, $01
0008939C E101                       	smpsAlterNote       $01
0008939E E701                       	dc.b	smpsNoAttack, $01
000893A0 E105                       	smpsAlterNote       $05
000893A2 E701                       	dc.b	smpsNoAttack, $01
000893A4 E10B                       	smpsAlterNote       $0B
000893A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893AA E108                       	smpsAlterNote       $08
000893AC E701                       	dc.b	smpsNoAttack, $01
000893AE E102                       	smpsAlterNote       $02
000893B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893B4 E108                       	smpsAlterNote       $08
000893B6 E701                       	dc.b	smpsNoAttack, $01
000893B8 E10B                       	smpsAlterNote       $0B
000893BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893BE E105                       	smpsAlterNote       $05
000893C0 E701                       	dc.b	smpsNoAttack, $01
000893C2 E101                       	smpsAlterNote       $01
000893C4 E701                       	dc.b	smpsNoAttack, $01
000893C6 E102                       	smpsAlterNote       $02
000893C8 E701                       	dc.b	smpsNoAttack, $01
000893CA E108                       	smpsAlterNote       $08
000893CC E701                       	dc.b	smpsNoAttack, $01
000893CE E10C                       	smpsAlterNote       $0C
000893D0 E701                       	dc.b	smpsNoAttack, $01
000893D2 E108                       	smpsAlterNote       $08
000893D4 E701                       	dc.b	smpsNoAttack, $01
000893D6 E105                       	smpsAlterNote       $05
000893D8 E701                       	dc.b	smpsNoAttack, $01
000893DA E101                       	smpsAlterNote       $01
000893DC E701                       	dc.b	smpsNoAttack, $01
000893DE E105                       	smpsAlterNote       $05
000893E0 E701                       	dc.b	smpsNoAttack, $01
000893E2 E10B                       	smpsAlterNote       $0B
000893E4 E701                       	dc.b	smpsNoAttack, $01
000893E6 E10C                       	smpsAlterNote       $0C
000893E8 E701                       	dc.b	smpsNoAttack, $01
000893EA E108                       	smpsAlterNote       $08
000893EC E701                       	dc.b	smpsNoAttack, $01
000893EE E102                       	smpsAlterNote       $02
000893F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893F4 E108                       	smpsAlterNote       $08
000893F6 E701                       	dc.b	smpsNoAttack, $01
000893F8 E10B                       	smpsAlterNote       $0B
000893FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893FE E105                       	smpsAlterNote       $05
00089400 E701                       	dc.b	smpsNoAttack, $01
00089402 E101                       	smpsAlterNote       $01
00089404 E701                       	dc.b	smpsNoAttack, $01
00089406 E102                       	smpsAlterNote       $02
00089408 E701                       	dc.b	smpsNoAttack, $01
0008940A E108                       	smpsAlterNote       $08
0008940C E701                       	dc.b	smpsNoAttack, $01
0008940E E10C                       	smpsAlterNote       $0C
00089410 E701                       	dc.b	smpsNoAttack, $01
00089412 E108                       	smpsAlterNote       $08
00089414 E701                       	dc.b	smpsNoAttack, $01
00089416 E105                       	smpsAlterNote       $05
00089418 E701                       	dc.b	smpsNoAttack, $01
0008941A E101                       	smpsAlterNote       $01
0008941C E701                       	dc.b	smpsNoAttack, $01
0008941E E105                       	smpsAlterNote       $05
00089420 E701                       	dc.b	smpsNoAttack, $01
00089422 E10B                       	smpsAlterNote       $0B
00089424 E701                       	dc.b	smpsNoAttack, $01
00089426 E10C                       	smpsAlterNote       $0C
00089428 E701                       	dc.b	smpsNoAttack, $01
0008942A E108                       	smpsAlterNote       $08
0008942C E701                       	dc.b	smpsNoAttack, $01
0008942E E102                       	smpsAlterNote       $02
00089430 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089434 E105                       	smpsAlterNote       $05
00089436 E701                       	dc.b	smpsNoAttack, $01
00089438 E10B                       	smpsAlterNote       $0B
0008943A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008943E E105                       	smpsAlterNote       $05
00089440 E701                       	dc.b	smpsNoAttack, $01
00089442 E102                       	smpsAlterNote       $02
00089444 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089448 E108                       	smpsAlterNote       $08
0008944A E701                       	dc.b	smpsNoAttack, $01
0008944C E10C                       	smpsAlterNote       $0C
0008944E E701                       	dc.b	smpsNoAttack, $01
00089450 E10B                       	smpsAlterNote       $0B
00089452 E701                       	dc.b	smpsNoAttack, $01
00089454 E105                       	smpsAlterNote       $05
00089456 E701                       	dc.b	smpsNoAttack, $01
00089458 E101                       	smpsAlterNote       $01
0008945A E701                       	dc.b	smpsNoAttack, $01
0008945C E105                       	smpsAlterNote       $05
0008945E E701                       	dc.b	smpsNoAttack, $01
00089460 E108                       	smpsAlterNote       $08
00089462 E701                       	dc.b	smpsNoAttack, $01
00089464 E10C                       	smpsAlterNote       $0C
00089466 E701                       	dc.b	smpsNoAttack, $01
00089468 E108                       	smpsAlterNote       $08
0008946A E701                       	dc.b	smpsNoAttack, $01
0008946C E102                       	smpsAlterNote       $02
0008946E E701                       	dc.b	smpsNoAttack, $01
00089470 E101                       	smpsAlterNote       $01
00089472 E701                       	dc.b	smpsNoAttack, $01
00089474 E105                       	smpsAlterNote       $05
00089476 E701                       	dc.b	smpsNoAttack, $01
00089478 E10B                       	smpsAlterNote       $0B
0008947A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008947E E108                       	smpsAlterNote       $08
00089480 E701                       	dc.b	smpsNoAttack, $01
00089482 E102                       	smpsAlterNote       $02
00089484 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089488 E108                       	smpsAlterNote       $08
0008948A E701                       	dc.b	smpsNoAttack, $01
0008948C E10B                       	smpsAlterNote       $0B
0008948E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089492 E105                       	smpsAlterNote       $05
00089494 E701                       	dc.b	smpsNoAttack, $01
00089496 E102                       	smpsAlterNote       $02
00089498 8001                       	dc.b	nRst, $01
0008949A E107                       	smpsAlterNote       $07
0008949C BF01 8001                  	dc.b	nD5, $01, nRst, $01
000894A0 E108                       	smpsAlterNote       $08
000894A2 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
000894A6 E102                       	smpsAlterNote       $02
000894A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894AC E108                       	smpsAlterNote       $08
000894AE E701                       	dc.b	smpsNoAttack, $01
000894B0 E10B                       	smpsAlterNote       $0B
000894B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894B6 E105                       	smpsAlterNote       $05
000894B8 E701                       	dc.b	smpsNoAttack, $01
000894BA E101                       	smpsAlterNote       $01
000894BC E701                       	dc.b	smpsNoAttack, $01
000894BE E102                       	smpsAlterNote       $02
000894C0 E701                       	dc.b	smpsNoAttack, $01
000894C2 E108                       	smpsAlterNote       $08
000894C4 E701                       	dc.b	smpsNoAttack, $01
000894C6 E10C                       	smpsAlterNote       $0C
000894C8 E701                       	dc.b	smpsNoAttack, $01
000894CA E108                       	smpsAlterNote       $08
000894CC E701                       	dc.b	smpsNoAttack, $01
000894CE E105                       	smpsAlterNote       $05
000894D0 E701                       	dc.b	smpsNoAttack, $01
000894D2 E101                       	smpsAlterNote       $01
000894D4 E701                       	dc.b	smpsNoAttack, $01
000894D6 E105                       	smpsAlterNote       $05
000894D8 E701                       	dc.b	smpsNoAttack, $01
000894DA E10B                       	smpsAlterNote       $0B
000894DC E701                       	dc.b	smpsNoAttack, $01
000894DE E10C                       	smpsAlterNote       $0C
000894E0 E701                       	dc.b	smpsNoAttack, $01
000894E2 E108                       	smpsAlterNote       $08
000894E4 E701                       	dc.b	smpsNoAttack, $01
000894E6 E102                       	smpsAlterNote       $02
000894E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894EC E105                       	smpsAlterNote       $05
000894EE E701                       	dc.b	smpsNoAttack, $01
000894F0 E10B                       	smpsAlterNote       $0B
000894F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894F6 E105                       	smpsAlterNote       $05
000894F8 E701                       	dc.b	smpsNoAttack, $01
000894FA E102                       	smpsAlterNote       $02
000894FC E701                       	dc.b	smpsNoAttack, $01
000894FE E109                       	smpsAlterNote       $09
00089500 C40A C207                  	dc.b	nG5, $0A, nF5, $07
00089504 E108                       	smpsAlterNote       $08
00089506 C10D                       	dc.b	nE5, $0D
00089508 E105                       	smpsAlterNote       $05
0008950A E701                       	dc.b	smpsNoAttack, $01
0008950C E101                       	smpsAlterNote       $01
0008950E E701                       	dc.b	smpsNoAttack, $01
00089510 E102                       	smpsAlterNote       $02
00089512 E701                       	dc.b	smpsNoAttack, $01
00089514 E108                       	smpsAlterNote       $08
00089516 E701                       	dc.b	smpsNoAttack, $01
00089518 E10C                       	smpsAlterNote       $0C
0008951A E701                       	dc.b	smpsNoAttack, $01
0008951C E108                       	smpsAlterNote       $08
0008951E E701                       	dc.b	smpsNoAttack, $01
00089520 E105                       	smpsAlterNote       $05
00089522 E701                       	dc.b	smpsNoAttack, $01
00089524 E101                       	smpsAlterNote       $01
00089526 E701                       	dc.b	smpsNoAttack, $01
00089528 E105                       	smpsAlterNote       $05
0008952A E701                       	dc.b	smpsNoAttack, $01
0008952C E10B                       	smpsAlterNote       $0B
0008952E E701                       	dc.b	smpsNoAttack, $01
00089530 E10C                       	smpsAlterNote       $0C
00089532 E701                       	dc.b	smpsNoAttack, $01
00089534 E108                       	smpsAlterNote       $08
00089536 E701                       	dc.b	smpsNoAttack, $01
00089538 E102                       	smpsAlterNote       $02
0008953A E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00089542 E10B                       	smpsAlterNote       $0B
00089544 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00089548 E10C                       	smpsAlterNote       $0C
0008954A BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008954E E10B                       	smpsAlterNote       $0B
00089550 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
00089556 E107                       	smpsAlterNote       $07
00089558 BF03                       	dc.b	nD5, $03
0008955A E108                       	smpsAlterNote       $08
0008955C C103 8001                  	dc.b	nE5, $03, nRst, $01
00089560 E109                       	smpsAlterNote       $09
00089562 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00089568 E10B                       	smpsAlterNote       $0B
0008956A C606 8001                  	dc.b	nA5, $06, nRst, $01
0008956E E107                       	smpsAlterNote       $07
00089570 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00089574 E106                       	smpsAlterNote       $06
00089576 C90D                       	dc.b	nC6, $0D
00089578 E103                       	smpsAlterNote       $03
0008957A E701                       	dc.b	smpsNoAttack, $01
0008957C E1FF                       	smpsAlterNote       $FF
0008957E E701                       	dc.b	smpsNoAttack, $01
00089580 E103                       	smpsAlterNote       $03
00089582 E701                       	dc.b	smpsNoAttack, $01
00089584 E109                       	smpsAlterNote       $09
00089586 E701                       	dc.b	smpsNoAttack, $01
00089588 E10A                       	smpsAlterNote       $0A
0008958A E701                       	dc.b	smpsNoAttack, $01
0008958C E106                       	smpsAlterNote       $06
0008958E E701                       	dc.b	smpsNoAttack, $01
00089590 E100                       	smpsAlterNote       $00
00089592 E701                       	dc.b	smpsNoAttack, $01
00089594 E10C                       	smpsAlterNote       $0C
00089596 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008959A E10B                       	smpsAlterNote       $0B
0008959C C603                       	dc.b	nA5, $03
0008959E E109                       	smpsAlterNote       $09
000895A0 C403 8001                  	dc.b	nG5, $03, nRst, $01
000895A4 E10B                       	smpsAlterNote       $0B
000895A6 C60D                       	dc.b	nA5, $0D
000895A8 E105                       	smpsAlterNote       $05
000895AA E701                       	dc.b	smpsNoAttack, $01
000895AC E104                       	smpsAlterNote       $04
000895AE E701                       	dc.b	smpsNoAttack, $01
000895B0 E108                       	smpsAlterNote       $08
000895B2 E701                       	dc.b	smpsNoAttack, $01
000895B4 E10E                       	smpsAlterNote       $0E
000895B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895BA E10B                       	smpsAlterNote       $0B
000895BC E701                       	dc.b	smpsNoAttack, $01
000895BE E105                       	smpsAlterNote       $05
000895C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895C4 E10B                       	smpsAlterNote       $0B
000895C6 E701                       	dc.b	smpsNoAttack, $01
000895C8 E10E                       	smpsAlterNote       $0E
000895CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895CE E108                       	smpsAlterNote       $08
000895D0 E701                       	dc.b	smpsNoAttack, $01
000895D2 E104                       	smpsAlterNote       $04
000895D4 E701                       	dc.b	smpsNoAttack, $01
000895D6 E105                       	smpsAlterNote       $05
000895D8 E701                       	dc.b	smpsNoAttack, $01
000895DA E10B                       	smpsAlterNote       $0B
000895DC E701                       	dc.b	smpsNoAttack, $01
000895DE E10F                       	smpsAlterNote       $0F
000895E0 E701                       	dc.b	smpsNoAttack, $01
000895E2 E10B                       	smpsAlterNote       $0B
000895E4 E701                       	dc.b	smpsNoAttack, $01
000895E6 E108                       	smpsAlterNote       $08
000895E8 E701                       	dc.b	smpsNoAttack, $01
000895EA E104                       	smpsAlterNote       $04
000895EC E701                       	dc.b	smpsNoAttack, $01
000895EE E108                       	smpsAlterNote       $08
000895F0 E701                       	dc.b	smpsNoAttack, $01
000895F2 E10E                       	smpsAlterNote       $0E
000895F4 E701                       	dc.b	smpsNoAttack, $01
000895F6 E10F                       	smpsAlterNote       $0F
000895F8 E701                       	dc.b	smpsNoAttack, $01
000895FA E10B                       	smpsAlterNote       $0B
000895FC E701                       	dc.b	smpsNoAttack, $01
000895FE E105                       	smpsAlterNote       $05
00089600 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089604 E108                       	smpsAlterNote       $08
00089606 E701                       	dc.b	smpsNoAttack, $01
00089608 E10E                       	smpsAlterNote       $0E
0008960A E701                       	dc.b	smpsNoAttack, $01
0008960C E10F                       	smpsAlterNote       $0F
0008960E 800F                       	dc.b	nRst, $0F
00089610 E107                       	smpsAlterNote       $07
00089612 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00089616 E108                       	smpsAlterNote       $08
00089618 C103                       	dc.b	nE5, $03
0008961A E109                       	smpsAlterNote       $09
0008961C C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00089622 E10B                       	smpsAlterNote       $0B
00089624 C607                       	dc.b	nA5, $07
00089626 E107                       	smpsAlterNote       $07
00089628 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008962C E106                       	smpsAlterNote       $06
0008962E C90D                       	dc.b	nC6, $0D
00089630 E107                       	smpsAlterNote       $07
00089632 CB03 8001                  	dc.b	nD6, $03, nRst, $01
00089636 E10C                       	smpsAlterNote       $0C
00089638 C704                       	dc.b	nBb5, $04
0008963A E10B                       	smpsAlterNote       $0B
0008963C C604 8001                  	dc.b	nA5, $04, nRst, $01
00089640 E109                       	smpsAlterNote       $09
00089642 C404                       	dc.b	nG5, $04
00089644 E10B                       	smpsAlterNote       $0B
00089646 C60D                       	dc.b	nA5, $0D
00089648 E108                       	smpsAlterNote       $08
0008964A E701                       	dc.b	smpsNoAttack, $01
0008964C E105                       	smpsAlterNote       $05
0008964E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089652 E10B                       	smpsAlterNote       $0B
00089654 E701                       	dc.b	smpsNoAttack, $01
00089656 E10F                       	smpsAlterNote       $0F
00089658 E701                       	dc.b	smpsNoAttack, $01
0008965A E10E                       	smpsAlterNote       $0E
0008965C E701                       	dc.b	smpsNoAttack, $01
0008965E E108                       	smpsAlterNote       $08
00089660 E701                       	dc.b	smpsNoAttack, $01
00089662 E104                       	smpsAlterNote       $04
00089664 E701                       	dc.b	smpsNoAttack, $01
00089666 E108                       	smpsAlterNote       $08
00089668 E701                       	dc.b	smpsNoAttack, $01
0008966A E10B                       	smpsAlterNote       $0B
0008966C E701                       	dc.b	smpsNoAttack, $01
0008966E E10F                       	smpsAlterNote       $0F
00089670 E701                       	dc.b	smpsNoAttack, $01
00089672 E10B                       	smpsAlterNote       $0B
00089674 E701                       	dc.b	smpsNoAttack, $01
00089676 E105                       	smpsAlterNote       $05
00089678 E701                       	dc.b	smpsNoAttack, $01
0008967A E104                       	smpsAlterNote       $04
0008967C E701                       	dc.b	smpsNoAttack, $01
0008967E E108                       	smpsAlterNote       $08
00089680 E701                       	dc.b	smpsNoAttack, $01
00089682 E10E                       	smpsAlterNote       $0E
00089684 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089688 E10B                       	smpsAlterNote       $0B
0008968A E701                       	dc.b	smpsNoAttack, $01
0008968C E105                       	smpsAlterNote       $05
0008968E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089692 E10B                       	smpsAlterNote       $0B
00089694 E701                       	dc.b	smpsNoAttack, $01
00089696 E10E                       	smpsAlterNote       $0E
00089698 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008969C E108                       	smpsAlterNote       $08
0008969E E701                       	dc.b	smpsNoAttack, $01
000896A0 E105                       	smpsAlterNote       $05
000896A2 8001                       	dc.b	nRst, $01
000896A4 E109                       	smpsAlterNote       $09
000896A6 C401 8001                  	dc.b	nG5, $01, nRst, $01
000896AA E10B                       	smpsAlterNote       $0B
000896AC C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
000896B4 E109                       	smpsAlterNote       $09
000896B6 C404                       	dc.b	nG5, $04
000896B8 E10B                       	smpsAlterNote       $0B
000896BA C604 8001                  	dc.b	nA5, $04, nRst, $01
000896BE E107                       	smpsAlterNote       $07
000896C0 BF0D                       	dc.b	nD5, $0D
000896C2 E101                       	smpsAlterNote       $01
000896C4 E701                       	dc.b	smpsNoAttack, $01
000896C6 E100                       	smpsAlterNote       $00
000896C8 E701                       	dc.b	smpsNoAttack, $01
000896CA E104                       	smpsAlterNote       $04
000896CC E701                       	dc.b	smpsNoAttack, $01
000896CE E10A                       	smpsAlterNote       $0A
000896D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000896D4 E107                       	smpsAlterNote       $07
000896D6 E701                       	dc.b	smpsNoAttack, $01
000896D8 E101                       	smpsAlterNote       $01
000896DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000896DE E107                       	smpsAlterNote       $07
000896E0 E701                       	dc.b	smpsNoAttack, $01
000896E2 E10A                       	smpsAlterNote       $0A
000896E4 E701                       	dc.b	smpsNoAttack, $01
000896E6 E10B                       	smpsAlterNote       $0B
000896E8 8001                       	dc.b	nRst, $01
000896EA E108                       	smpsAlterNote       $08
000896EC 8001                       	dc.b	nRst, $01
000896EE E109                       	smpsAlterNote       $09
000896F0 8001 C401                  	dc.b	nRst, $01, nG5, $01
000896F4 E10B                       	smpsAlterNote       $0B
000896F6 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000896FE E108                       	smpsAlterNote       $08
00089700 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00089704 E109                       	smpsAlterNote       $09
00089706 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008970A E108                       	smpsAlterNote       $08
0008970C CD02 8001                  	dc.b	nE6, $02, nRst, $01
00089710 E106                       	smpsAlterNote       $06
00089712 C903                       	dc.b	nC6, $03
00089714 E109                       	smpsAlterNote       $09
00089716 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008971A E10C                       	smpsAlterNote       $0C
0008971C C70D                       	dc.b	nBb5, $0D
0008971E E109                       	smpsAlterNote       $09
00089720 E701                       	dc.b	smpsNoAttack, $01
00089722 E105                       	smpsAlterNote       $05
00089724 E701                       	dc.b	smpsNoAttack, $01
00089726 E109                       	smpsAlterNote       $09
00089728 E701                       	dc.b	smpsNoAttack, $01
0008972A E10F                       	smpsAlterNote       $0F
0008972C E701                       	dc.b	smpsNoAttack, $01
0008972E E110                       	smpsAlterNote       $10
00089730 E701                       	dc.b	smpsNoAttack, $01
00089732 E10C                       	smpsAlterNote       $0C
00089734 E701                       	dc.b	smpsNoAttack, $01
00089736 E106                       	smpsAlterNote       $06
00089738 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008973C E109                       	smpsAlterNote       $09
0008973E E701                       	dc.b	smpsNoAttack, $01
00089740 E10F                       	smpsAlterNote       $0F
00089742 E701                       	dc.b	smpsNoAttack, $01
00089744 E110                       	smpsAlterNote       $10
00089746 8001                       	dc.b	nRst, $01
00089748 E10B                       	smpsAlterNote       $0B
0008974A C606 8001                  	dc.b	nA5, $06, nRst, $01
0008974E E109                       	smpsAlterNote       $09
00089750 C40D                       	dc.b	nG5, $0D
00089752 E103                       	smpsAlterNote       $03
00089754 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089758 E106                       	smpsAlterNote       $06
0008975A E701                       	dc.b	smpsNoAttack, $01
0008975C E10C                       	smpsAlterNote       $0C
0008975E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089762 E106                       	smpsAlterNote       $06
00089764 E701                       	dc.b	smpsNoAttack, $01
00089766 E103                       	smpsAlterNote       $03
00089768 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008976C E109                       	smpsAlterNote       $09
0008976E E701                       	dc.b	smpsNoAttack, $01
00089770 E10D                       	smpsAlterNote       $0D
00089772 E701                       	dc.b	smpsNoAttack, $01
00089774 E10C                       	smpsAlterNote       $0C
00089776 E701                       	dc.b	smpsNoAttack, $01
00089778 E106                       	smpsAlterNote       $06
0008977A E701                       	dc.b	smpsNoAttack, $01
0008977C E102                       	smpsAlterNote       $02
0008977E E701                       	dc.b	smpsNoAttack, $01
00089780 E103                       	smpsAlterNote       $03
00089782 8001                       	dc.b	nRst, $01
00089784 E10B                       	smpsAlterNote       $0B
00089786 C60D                       	dc.b	nA5, $0D
00089788 E108                       	smpsAlterNote       $08
0008978A E701                       	dc.b	smpsNoAttack, $01
0008978C E104                       	smpsAlterNote       $04
0008978E E701                       	dc.b	smpsNoAttack, $01
00089790 E108                       	smpsAlterNote       $08
00089792 E701                       	dc.b	smpsNoAttack, $01
00089794 E10B                       	smpsAlterNote       $0B
00089796 E701                       	dc.b	smpsNoAttack, $01
00089798 E10F                       	smpsAlterNote       $0F
0008979A E701                       	dc.b	smpsNoAttack, $01
0008979C E10B                       	smpsAlterNote       $0B
0008979E E701                       	dc.b	smpsNoAttack, $01
000897A0 E105                       	smpsAlterNote       $05
000897A2 E701                       	dc.b	smpsNoAttack, $01
000897A4 E104                       	smpsAlterNote       $04
000897A6 E701                       	dc.b	smpsNoAttack, $01
000897A8 E108                       	smpsAlterNote       $08
000897AA E701                       	dc.b	smpsNoAttack, $01
000897AC E10E                       	smpsAlterNote       $0E
000897AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000897B2 E10B                       	smpsAlterNote       $0B
000897B4 E701                       	dc.b	smpsNoAttack, $01
000897B6 E105                       	smpsAlterNote       $05
000897B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000897BC E10C                       	smpsAlterNote       $0C
000897BE C70E                       	dc.b	nBb5, $0E
000897C0 E106                       	smpsAlterNote       $06
000897C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000897C6 E10C                       	smpsAlterNote       $0C
000897C8 E701                       	dc.b	smpsNoAttack, $01
000897CA E10F                       	smpsAlterNote       $0F
000897CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000897D0 E109                       	smpsAlterNote       $09
000897D2 E701                       	dc.b	smpsNoAttack, $01
000897D4 E105                       	smpsAlterNote       $05
000897D6 E701                       	dc.b	smpsNoAttack, $01
000897D8 E106                       	smpsAlterNote       $06
000897DA E701                       	dc.b	smpsNoAttack, $01
000897DC E10C                       	smpsAlterNote       $0C
000897DE E701                       	dc.b	smpsNoAttack, $01
000897E0 E110                       	smpsAlterNote       $10
000897E2 E701                       	dc.b	smpsNoAttack, $01
000897E4 E10C                       	smpsAlterNote       $0C
000897E6 E701                       	dc.b	smpsNoAttack, $01
000897E8 E109                       	smpsAlterNote       $09
000897EA E701                       	dc.b	smpsNoAttack, $01
000897EC E105                       	smpsAlterNote       $05
000897EE E701                       	dc.b	smpsNoAttack, $01
000897F0 E106                       	smpsAlterNote       $06
000897F2 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
000897F6 E107                       	smpsAlterNote       $07
000897F8 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
000897FD E108                       	smpsAlterNote       $08
000897FF CD0D                       	dc.b	nE6, $0D
00089801 E107                       	smpsAlterNote       $07
00089803 CB0D                       	dc.b	nD6, $0D
00089805 E104                       	smpsAlterNote       $04
00089807 E701                       	dc.b	smpsNoAttack, $01
00089809 E100                       	smpsAlterNote       $00
0008980B E701                       	dc.b	smpsNoAttack, $01
0008980D E101                       	smpsAlterNote       $01
0008980F E701                       	dc.b	smpsNoAttack, $01
00089811 E107                       	smpsAlterNote       $07
00089813 E701                       	dc.b	smpsNoAttack, $01
00089815 E10B                       	smpsAlterNote       $0B
00089817 E701                       	dc.b	smpsNoAttack, $01
00089819 E107                       	smpsAlterNote       $07
0008981B E701                       	dc.b	smpsNoAttack, $01
0008981D E104                       	smpsAlterNote       $04
0008981F E701                       	dc.b	smpsNoAttack, $01
00089821 E100                       	smpsAlterNote       $00
00089823 E701                       	dc.b	smpsNoAttack, $01
00089825 E104                       	smpsAlterNote       $04
00089827 E701                       	dc.b	smpsNoAttack, $01
00089829 E10A                       	smpsAlterNote       $0A
0008982B E701                       	dc.b	smpsNoAttack, $01
0008982D E10B                       	smpsAlterNote       $0B
0008982F E701                       	dc.b	smpsNoAttack, $01
00089831 E108                       	smpsAlterNote       $08
00089833 CC0D                       	dc.b	nEb6, $0D
00089835 E105                       	smpsAlterNote       $05
00089837 E701                       	dc.b	smpsNoAttack, $01
00089839 E101                       	smpsAlterNote       $01
0008983B E701                       	dc.b	smpsNoAttack, $01
0008983D E102                       	smpsAlterNote       $02
0008983F E701                       	dc.b	smpsNoAttack, $01
00089841 E108                       	smpsAlterNote       $08
00089843 E701                       	dc.b	smpsNoAttack, $01
00089845 E106                       	smpsAlterNote       $06
00089847 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00089853 8001                       	dc.b	nRst, $01
00089855 E107                       	smpsAlterNote       $07
00089857 CB0D                       	dc.b	nD6, $0D
00089859 E104                       	smpsAlterNote       $04
0008985B E701                       	dc.b	smpsNoAttack, $01
0008985D E100                       	smpsAlterNote       $00
0008985F E701                       	dc.b	smpsNoAttack, $01
00089861 E104                       	smpsAlterNote       $04
00089863 E701                       	dc.b	smpsNoAttack, $01
00089865 E107                       	smpsAlterNote       $07
00089867 E701                       	dc.b	smpsNoAttack, $01
00089869 E10B                       	smpsAlterNote       $0B
0008986B E701                       	dc.b	smpsNoAttack, $01
0008986D E107                       	smpsAlterNote       $07
0008986F E701                       	dc.b	smpsNoAttack, $01
00089871 E101                       	smpsAlterNote       $01
00089873 E701                       	dc.b	smpsNoAttack, $01
00089875 E100                       	smpsAlterNote       $00
00089877 E701                       	dc.b	smpsNoAttack, $01
00089879 E104                       	smpsAlterNote       $04
0008987B E701                       	dc.b	smpsNoAttack, $01
0008987D E10A                       	smpsAlterNote       $0A
0008987F E701                       	dc.b	smpsNoAttack, $01
00089881 E10B                       	smpsAlterNote       $0B
00089883 8001                       	dc.b	nRst, $01
00089885 E109                       	smpsAlterNote       $09
00089887 CE0A                       	dc.b	nF6, $0A
00089889 E108                       	smpsAlterNote       $08
0008988B CC07                       	dc.b	nEb6, $07
0008988D E106                       	smpsAlterNote       $06
0008988F C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
0008989B E107                       	smpsAlterNote       $07
0008989D CB0D                       	dc.b	nD6, $0D
0008989F E101                       	smpsAlterNote       $01
000898A1 E701                       	dc.b	smpsNoAttack, $01
000898A3 E100                       	smpsAlterNote       $00
000898A5 E701                       	dc.b	smpsNoAttack, $01
000898A7 E104                       	smpsAlterNote       $04
000898A9 E701                       	dc.b	smpsNoAttack, $01
000898AB E10A                       	smpsAlterNote       $0A
000898AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898B1 E107                       	smpsAlterNote       $07
000898B3 E701                       	dc.b	smpsNoAttack, $01
000898B5 E101                       	smpsAlterNote       $01
000898B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898BB E107                       	smpsAlterNote       $07
000898BD E701                       	dc.b	smpsNoAttack, $01
000898BF E10A                       	smpsAlterNote       $0A
000898C1 E701                       	dc.b	smpsNoAttack, $01
000898C3 E10B                       	smpsAlterNote       $0B
000898C5 8001                       	dc.b	nRst, $01
000898C7 E108                       	smpsAlterNote       $08
000898C9 CC0D                       	dc.b	nEb6, $0D
000898CB E102                       	smpsAlterNote       $02
000898CD E701                       	dc.b	smpsNoAttack, $01
000898CF E101                       	smpsAlterNote       $01
000898D1 E701                       	dc.b	smpsNoAttack, $01
000898D3 E105                       	smpsAlterNote       $05
000898D5 E701                       	dc.b	smpsNoAttack, $01
000898D7 E108                       	smpsAlterNote       $08
000898D9 8001                       	dc.b	nRst, $01
000898DB E106                       	smpsAlterNote       $06
000898DD C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
000898E9 8001                       	dc.b	nRst, $01
000898EB E107                       	smpsAlterNote       $07
000898ED CB0D                       	dc.b	nD6, $0D
000898EF E101                       	smpsAlterNote       $01
000898F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898F5 E104                       	smpsAlterNote       $04
000898F7 E701                       	dc.b	smpsNoAttack, $01
000898F9 E10A                       	smpsAlterNote       $0A
000898FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898FF E104                       	smpsAlterNote       $04
00089901 E701                       	dc.b	smpsNoAttack, $01
00089903 E101                       	smpsAlterNote       $01
00089905 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089909 E107                       	smpsAlterNote       $07
0008990B E701                       	dc.b	smpsNoAttack, $01
0008990D E10B                       	smpsAlterNote       $0B
0008990F E701                       	dc.b	smpsNoAttack, $01
00089911 E10A                       	smpsAlterNote       $0A
00089913 E701                       	dc.b	smpsNoAttack, $01
00089915 E104                       	smpsAlterNote       $04
00089917 E701                       	dc.b	smpsNoAttack, $01
00089919 E100                       	smpsAlterNote       $00
0008991B E701                       	dc.b	smpsNoAttack, $01
0008991D E101                       	smpsAlterNote       $01
0008991F 801C                       	dc.b	nRst, $1C
00089923 E107                       	smpsAlterNote       $07
00089925 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00089929 E603                       	smpsAlterVol        $03
0008992B F6F1 AD                    	smpsJump            music84_Jump03
0008992E                            
0008992E                            ; FM3 Data
0008992E                            music84_FM3:
0008992E E0C0                       	smpsPan             panCenter, $00
00089932 E109                       	smpsAlterNote       $09
00089934 C203 8007                  	dc.b	nF5, $03, nRst, $07
00089938 E108                       	smpsAlterNote       $08
0008993A C103 800B                  	dc.b	nE5, $03, nRst, $0B
0008993E E10B                       	smpsAlterNote       $0B
00089940 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00089946 E040                       	smpsPan             panRight, $00
00089948 E110                       	smpsAlterNote       $10
0008994A E6F9                       	smpsAlterVol        $F9
0008994C C702 8001                  	dc.b	nBb5, $02, nRst, $01
00089950 E10F                       	smpsAlterNote       $0F
00089952 C603                       	dc.b	nA5, $03
00089954 E10D                       	smpsAlterNote       $0D
00089956 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008995C E10C                       	smpsAlterNote       $0C
0008995E C103 8001                  	dc.b	nE5, $03, nRst, $01
00089962 E10A                       	smpsAlterNote       $0A
00089964 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00089968 E10F                       	smpsAlterNote       $0F
0008996A BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008996E E0C0                       	smpsPan             panCenter, $00
00089972 E109                       	smpsAlterNote       $09
00089974 E609                       	smpsAlterVol        $09
00089976 B603                       	dc.b	nF4, $03
00089978                            
00089978                            music84_Jump02:
00089978 E70A                       	dc.b	smpsNoAttack, $0A
0008997A E103                       	smpsAlterNote       $03
0008997C E701                       	dc.b	smpsNoAttack, $01
0008997E E102                       	smpsAlterNote       $02
00089980 E701                       	dc.b	smpsNoAttack, $01
00089982 E106                       	smpsAlterNote       $06
00089984 E701                       	dc.b	smpsNoAttack, $01
00089986 E10C                       	smpsAlterNote       $0C
00089988 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008998C E109                       	smpsAlterNote       $09
0008998E E701                       	dc.b	smpsNoAttack, $01
00089990 E103                       	smpsAlterNote       $03
00089992 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089996 E109                       	smpsAlterNote       $09
00089998 E701                       	dc.b	smpsNoAttack, $01
0008999A E10C                       	smpsAlterNote       $0C
0008999C E701                       	dc.b	smpsNoAttack, $01
0008999E E10D                       	smpsAlterNote       $0D
000899A0 8001                       	dc.b	nRst, $01
000899A2 E109                       	smpsAlterNote       $09
000899A4 B80D                       	dc.b	nG4, $0D
000899A6 E103                       	smpsAlterNote       $03
000899A8 E701                       	dc.b	smpsNoAttack, $01
000899AA E102                       	smpsAlterNote       $02
000899AC E701                       	dc.b	smpsNoAttack, $01
000899AE E106                       	smpsAlterNote       $06
000899B0 E701                       	dc.b	smpsNoAttack, $01
000899B2 E10C                       	smpsAlterNote       $0C
000899B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000899B8 E109                       	smpsAlterNote       $09
000899BA E701                       	dc.b	smpsNoAttack, $01
000899BC E103                       	smpsAlterNote       $03
000899BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000899C2 E109                       	smpsAlterNote       $09
000899C4 E701                       	dc.b	smpsNoAttack, $01
000899C6 E10C                       	smpsAlterNote       $0C
000899C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000899CC E106                       	smpsAlterNote       $06
000899CE E701                       	dc.b	smpsNoAttack, $01
000899D0 E102                       	smpsAlterNote       $02
000899D2 E701                       	dc.b	smpsNoAttack, $01
000899D4 E103                       	smpsAlterNote       $03
000899D6 E701                       	dc.b	smpsNoAttack, $01
000899D8 E109                       	smpsAlterNote       $09
000899DA E701                       	dc.b	smpsNoAttack, $01
000899DC E10D                       	smpsAlterNote       $0D
000899DE E701                       	dc.b	smpsNoAttack, $01
000899E0 E109                       	smpsAlterNote       $09
000899E2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000899E6 E10B                       	smpsAlterNote       $0B
000899E8 BA0D                       	dc.b	nA4, $0D
000899EA E105                       	smpsAlterNote       $05
000899EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000899F0 E108                       	smpsAlterNote       $08
000899F2 E701                       	dc.b	smpsNoAttack, $01
000899F4 E10E                       	smpsAlterNote       $0E
000899F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000899FA E108                       	smpsAlterNote       $08
000899FC E701                       	dc.b	smpsNoAttack, $01
000899FE E104                       	smpsAlterNote       $04
00089A00 E701                       	dc.b	smpsNoAttack, $01
00089A02 E105                       	smpsAlterNote       $05
00089A04 E701                       	dc.b	smpsNoAttack, $01
00089A06 E10B                       	smpsAlterNote       $0B
00089A08 E701                       	dc.b	smpsNoAttack, $01
00089A0A E10F                       	smpsAlterNote       $0F
00089A0C E701                       	dc.b	smpsNoAttack, $01
00089A0E E10B                       	smpsAlterNote       $0B
00089A10 E701                       	dc.b	smpsNoAttack, $01
00089A12 E108                       	smpsAlterNote       $08
00089A14 E701                       	dc.b	smpsNoAttack, $01
00089A16 E104                       	smpsAlterNote       $04
00089A18 E701                       	dc.b	smpsNoAttack, $01
00089A1A E108                       	smpsAlterNote       $08
00089A1C E701                       	dc.b	smpsNoAttack, $01
00089A1E E10E                       	smpsAlterNote       $0E
00089A20 E701                       	dc.b	smpsNoAttack, $01
00089A22 E10F                       	smpsAlterNote       $0F
00089A24 E701                       	dc.b	smpsNoAttack, $01
00089A26 E10B                       	smpsAlterNote       $0B
00089A28 E701                       	dc.b	smpsNoAttack, $01
00089A2A E105                       	smpsAlterNote       $05
00089A2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A30 E108                       	smpsAlterNote       $08
00089A32 E701                       	dc.b	smpsNoAttack, $01
00089A34 E10E                       	smpsAlterNote       $0E
00089A36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A3A E108                       	smpsAlterNote       $08
00089A3C E701                       	dc.b	smpsNoAttack, $01
00089A3E E105                       	smpsAlterNote       $05
00089A40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A44 E10B                       	smpsAlterNote       $0B
00089A46 E701                       	dc.b	smpsNoAttack, $01
00089A48 E10F                       	smpsAlterNote       $0F
00089A4A E701                       	dc.b	smpsNoAttack, $01
00089A4C E10E                       	smpsAlterNote       $0E
00089A4E E701                       	dc.b	smpsNoAttack, $01
00089A50 E108                       	smpsAlterNote       $08
00089A52 E701                       	dc.b	smpsNoAttack, $01
00089A54 E104                       	smpsAlterNote       $04
00089A56 E701                       	dc.b	smpsNoAttack, $01
00089A58 E105                       	smpsAlterNote       $05
00089A5A 8001                       	dc.b	nRst, $01
00089A5C E108                       	smpsAlterNote       $08
00089A5E B50A                       	dc.b	nE4, $0A
00089A60 E109                       	smpsAlterNote       $09
00089A62 B60D                       	dc.b	nF4, $0D
00089A64 E106                       	smpsAlterNote       $06
00089A66 E701                       	dc.b	smpsNoAttack, $01
00089A68 E103                       	smpsAlterNote       $03
00089A6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A6E E109                       	smpsAlterNote       $09
00089A70 E701                       	dc.b	smpsNoAttack, $01
00089A72 E10D                       	smpsAlterNote       $0D
00089A74 E701                       	dc.b	smpsNoAttack, $01
00089A76 E10C                       	smpsAlterNote       $0C
00089A78 E701                       	dc.b	smpsNoAttack, $01
00089A7A E106                       	smpsAlterNote       $06
00089A7C E701                       	dc.b	smpsNoAttack, $01
00089A7E E102                       	smpsAlterNote       $02
00089A80 E701                       	dc.b	smpsNoAttack, $01
00089A82 E106                       	smpsAlterNote       $06
00089A84 E701                       	dc.b	smpsNoAttack, $01
00089A86 E109                       	smpsAlterNote       $09
00089A88 E701                       	dc.b	smpsNoAttack, $01
00089A8A E10D                       	smpsAlterNote       $0D
00089A8C E701                       	dc.b	smpsNoAttack, $01
00089A8E E109                       	smpsAlterNote       $09
00089A90 B80D                       	dc.b	nG4, $0D
00089A92 E106                       	smpsAlterNote       $06
00089A94 E701                       	dc.b	smpsNoAttack, $01
00089A96 E103                       	smpsAlterNote       $03
00089A98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A9C E109                       	smpsAlterNote       $09
00089A9E E701                       	dc.b	smpsNoAttack, $01
00089AA0 E10D                       	smpsAlterNote       $0D
00089AA2 E701                       	dc.b	smpsNoAttack, $01
00089AA4 E10C                       	smpsAlterNote       $0C
00089AA6 E701                       	dc.b	smpsNoAttack, $01
00089AA8 E106                       	smpsAlterNote       $06
00089AAA E701                       	dc.b	smpsNoAttack, $01
00089AAC E102                       	smpsAlterNote       $02
00089AAE E701                       	dc.b	smpsNoAttack, $01
00089AB0 E106                       	smpsAlterNote       $06
00089AB2 E701                       	dc.b	smpsNoAttack, $01
00089AB4 E109                       	smpsAlterNote       $09
00089AB6 E701                       	dc.b	smpsNoAttack, $01
00089AB8 E10D                       	smpsAlterNote       $0D
00089ABA E701                       	dc.b	smpsNoAttack, $01
00089ABC E109                       	smpsAlterNote       $09
00089ABE E701                       	dc.b	smpsNoAttack, $01
00089AC0 E103                       	smpsAlterNote       $03
00089AC2 E701                       	dc.b	smpsNoAttack, $01
00089AC4 E102                       	smpsAlterNote       $02
00089AC6 E701                       	dc.b	smpsNoAttack, $01
00089AC8 E106                       	smpsAlterNote       $06
00089ACA E701                       	dc.b	smpsNoAttack, $01
00089ACC E10C                       	smpsAlterNote       $0C
00089ACE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AD2 E109                       	smpsAlterNote       $09
00089AD4 E701                       	dc.b	smpsNoAttack, $01
00089AD6 E10B                       	smpsAlterNote       $0B
00089AD8 BA0D                       	dc.b	nA4, $0D
00089ADA E108                       	smpsAlterNote       $08
00089ADC E701                       	dc.b	smpsNoAttack, $01
00089ADE E104                       	smpsAlterNote       $04
00089AE0 E701                       	dc.b	smpsNoAttack, $01
00089AE2 E108                       	smpsAlterNote       $08
00089AE4 E701                       	dc.b	smpsNoAttack, $01
00089AE6 E10B                       	smpsAlterNote       $0B
00089AE8 E701                       	dc.b	smpsNoAttack, $01
00089AEA E10F                       	smpsAlterNote       $0F
00089AEC E701                       	dc.b	smpsNoAttack, $01
00089AEE E10B                       	smpsAlterNote       $0B
00089AF0 E701                       	dc.b	smpsNoAttack, $01
00089AF2 E105                       	smpsAlterNote       $05
00089AF4 E701                       	dc.b	smpsNoAttack, $01
00089AF6 E104                       	smpsAlterNote       $04
00089AF8 E701                       	dc.b	smpsNoAttack, $01
00089AFA E108                       	smpsAlterNote       $08
00089AFC E701                       	dc.b	smpsNoAttack, $01
00089AFE E10E                       	smpsAlterNote       $0E
00089B00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B04 E10B                       	smpsAlterNote       $0B
00089B06 E701                       	dc.b	smpsNoAttack, $01
00089B08 E105                       	smpsAlterNote       $05
00089B0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B0E E10B                       	smpsAlterNote       $0B
00089B10 E701                       	dc.b	smpsNoAttack, $01
00089B12 E10E                       	smpsAlterNote       $0E
00089B14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B18 E108                       	smpsAlterNote       $08
00089B1A E701                       	dc.b	smpsNoAttack, $01
00089B1C E104                       	smpsAlterNote       $04
00089B1E E701                       	dc.b	smpsNoAttack, $01
00089B20 E105                       	smpsAlterNote       $05
00089B22 E701                       	dc.b	smpsNoAttack, $01
00089B24 E10B                       	smpsAlterNote       $0B
00089B26 E701                       	dc.b	smpsNoAttack, $01
00089B28 E10F                       	smpsAlterNote       $0F
00089B2A E701                       	dc.b	smpsNoAttack, $01
00089B2C E10B                       	smpsAlterNote       $0B
00089B2E E701                       	dc.b	smpsNoAttack, $01
00089B30 E108                       	smpsAlterNote       $08
00089B32 E701                       	dc.b	smpsNoAttack, $01
00089B34 E105                       	smpsAlterNote       $05
00089B36 8001                       	dc.b	nRst, $01
00089B38 E109                       	smpsAlterNote       $09
00089B3A B609 8001                  	dc.b	nF4, $09, nRst, $01
00089B3E E108                       	smpsAlterNote       $08
00089B40 B506 8001                  	dc.b	nE4, $06, nRst, $01
00089B44 E107                       	smpsAlterNote       $07
00089B46 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00089B4A E108                       	smpsAlterNote       $08
00089B4C B502 8001                  	dc.b	nE4, $02, nRst, $01
00089B50 E109                       	smpsAlterNote       $09
00089B52 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
00089B58 E10B                       	smpsAlterNote       $0B
00089B5A BA0D                       	dc.b	nA4, $0D
00089B5C E108                       	smpsAlterNote       $08
00089B5E E701                       	dc.b	smpsNoAttack, $01
00089B60 E104                       	smpsAlterNote       $04
00089B62 E701                       	dc.b	smpsNoAttack, $01
00089B64 E108                       	smpsAlterNote       $08
00089B66 E701                       	dc.b	smpsNoAttack, $01
00089B68 E10E                       	smpsAlterNote       $0E
00089B6A E701                       	dc.b	smpsNoAttack, $01
00089B6C E10F                       	smpsAlterNote       $0F
00089B6E E701                       	dc.b	smpsNoAttack, $01
00089B70 E10B                       	smpsAlterNote       $0B
00089B72 E701                       	dc.b	smpsNoAttack, $01
00089B74 E105                       	smpsAlterNote       $05
00089B76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B7A E108                       	smpsAlterNote       $08
00089B7C E701                       	dc.b	smpsNoAttack, $01
00089B7E E10E                       	smpsAlterNote       $0E
00089B80 E701                       	dc.b	smpsNoAttack, $01
00089B82 E10F                       	smpsAlterNote       $0F
00089B84 8001                       	dc.b	nRst, $01
00089B86 E109                       	smpsAlterNote       $09
00089B88 C20D                       	dc.b	nF5, $0D
00089B8A E103                       	smpsAlterNote       $03
00089B8C E701                       	dc.b	smpsNoAttack, $01
00089B8E E102                       	smpsAlterNote       $02
00089B90 E701                       	dc.b	smpsNoAttack, $01
00089B92 E106                       	smpsAlterNote       $06
00089B94 E701                       	dc.b	smpsNoAttack, $01
00089B96 E10C                       	smpsAlterNote       $0C
00089B98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B9C E109                       	smpsAlterNote       $09
00089B9E E701                       	dc.b	smpsNoAttack, $01
00089BA0 E103                       	smpsAlterNote       $03
00089BA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BA6 E109                       	smpsAlterNote       $09
00089BA8 E701                       	dc.b	smpsNoAttack, $01
00089BAA E10C                       	smpsAlterNote       $0C
00089BAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BB0 E106                       	smpsAlterNote       $06
00089BB2 E701                       	dc.b	smpsNoAttack, $01
00089BB4 E102                       	smpsAlterNote       $02
00089BB6 E701                       	dc.b	smpsNoAttack, $01
00089BB8 E103                       	smpsAlterNote       $03
00089BBA E701                       	dc.b	smpsNoAttack, $01
00089BBC E109                       	smpsAlterNote       $09
00089BBE E701                       	dc.b	smpsNoAttack, $01
00089BC0 E10D                       	smpsAlterNote       $0D
00089BC2 E701                       	dc.b	smpsNoAttack, $01
00089BC4 E109                       	smpsAlterNote       $09
00089BC6 E701                       	dc.b	smpsNoAttack, $01
00089BC8 E106                       	smpsAlterNote       $06
00089BCA E701                       	dc.b	smpsNoAttack, $01
00089BCC E102                       	smpsAlterNote       $02
00089BCE E701                       	dc.b	smpsNoAttack, $01
00089BD0 E106                       	smpsAlterNote       $06
00089BD2 E701                       	dc.b	smpsNoAttack, $01
00089BD4 E10C                       	smpsAlterNote       $0C
00089BD6 E701                       	dc.b	smpsNoAttack, $01
00089BD8 E10D                       	smpsAlterNote       $0D
00089BDA E701                       	dc.b	smpsNoAttack, $01
00089BDC E109                       	smpsAlterNote       $09
00089BDE E701                       	dc.b	smpsNoAttack, $01
00089BE0 E103                       	smpsAlterNote       $03
00089BE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BE6 E106                       	smpsAlterNote       $06
00089BE8 E701                       	dc.b	smpsNoAttack, $01
00089BEA E10C                       	smpsAlterNote       $0C
00089BEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BF0 E106                       	smpsAlterNote       $06
00089BF2 E701                       	dc.b	smpsNoAttack, $01
00089BF4 E103                       	smpsAlterNote       $03
00089BF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BFA E109                       	smpsAlterNote       $09
00089BFC E701                       	dc.b	smpsNoAttack, $01
00089BFE E10D                       	smpsAlterNote       $0D
00089C00 E701                       	dc.b	smpsNoAttack, $01
00089C02 E10C                       	smpsAlterNote       $0C
00089C04 E701                       	dc.b	smpsNoAttack, $01
00089C06 E106                       	smpsAlterNote       $06
00089C08 E701                       	dc.b	smpsNoAttack, $01
00089C0A E102                       	smpsAlterNote       $02
00089C0C E701                       	dc.b	smpsNoAttack, $01
00089C0E E106                       	smpsAlterNote       $06
00089C10 E701                       	dc.b	smpsNoAttack, $01
00089C12 E109                       	smpsAlterNote       $09
00089C14 E701                       	dc.b	smpsNoAttack, $01
00089C16 E10D                       	smpsAlterNote       $0D
00089C18 E701                       	dc.b	smpsNoAttack, $01
00089C1A E109                       	smpsAlterNote       $09
00089C1C E701                       	dc.b	smpsNoAttack, $01
00089C1E E103                       	smpsAlterNote       $03
00089C20 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089C24 E109                       	smpsAlterNote       $09
00089C26 C206                       	dc.b	nF5, $06
00089C28 E108                       	smpsAlterNote       $08
00089C2A C10E                       	dc.b	nE5, $0E
00089C2C E102                       	smpsAlterNote       $02
00089C2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C32 E108                       	smpsAlterNote       $08
00089C34 E701                       	dc.b	smpsNoAttack, $01
00089C36 E10B                       	smpsAlterNote       $0B
00089C38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C3C E105                       	smpsAlterNote       $05
00089C3E E701                       	dc.b	smpsNoAttack, $01
00089C40 E101                       	smpsAlterNote       $01
00089C42 E701                       	dc.b	smpsNoAttack, $01
00089C44 E102                       	smpsAlterNote       $02
00089C46 E701                       	dc.b	smpsNoAttack, $01
00089C48 E108                       	smpsAlterNote       $08
00089C4A E701                       	dc.b	smpsNoAttack, $01
00089C4C E10C                       	smpsAlterNote       $0C
00089C4E E701                       	dc.b	smpsNoAttack, $01
00089C50 E107                       	smpsAlterNote       $07
00089C52 BF0E                       	dc.b	nD5, $0E
00089C54 E101                       	smpsAlterNote       $01
00089C56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C5A E107                       	smpsAlterNote       $07
00089C5C E701                       	dc.b	smpsNoAttack, $01
00089C5E E10A                       	smpsAlterNote       $0A
00089C60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C64 E104                       	smpsAlterNote       $04
00089C66 E701                       	dc.b	smpsNoAttack, $01
00089C68 E100                       	smpsAlterNote       $00
00089C6A E701                       	dc.b	smpsNoAttack, $01
00089C6C E104                       	smpsAlterNote       $04
00089C6E E701                       	dc.b	smpsNoAttack, $01
00089C70 E107                       	smpsAlterNote       $07
00089C72 E701                       	dc.b	smpsNoAttack, $01
00089C74 E10B                       	smpsAlterNote       $0B
00089C76 E701                       	dc.b	smpsNoAttack, $01
00089C78 E107                       	smpsAlterNote       $07
00089C7A E701                       	dc.b	smpsNoAttack, $01
00089C7C E101                       	smpsAlterNote       $01
00089C7E E701                       	dc.b	smpsNoAttack, $01
00089C80 E100                       	smpsAlterNote       $00
00089C82 E701                       	dc.b	smpsNoAttack, $01
00089C84 E104                       	smpsAlterNote       $04
00089C86 E701                       	dc.b	smpsNoAttack, $01
00089C88 E10A                       	smpsAlterNote       $0A
00089C8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C8E E107                       	smpsAlterNote       $07
00089C90 E701                       	dc.b	smpsNoAttack, $01
00089C92 E101                       	smpsAlterNote       $01
00089C94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C98 E107                       	smpsAlterNote       $07
00089C9A E701                       	dc.b	smpsNoAttack, $01
00089C9C E10A                       	smpsAlterNote       $0A
00089C9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CA2 E104                       	smpsAlterNote       $04
00089CA4 E701                       	dc.b	smpsNoAttack, $01
00089CA6 E100                       	smpsAlterNote       $00
00089CA8 E701                       	dc.b	smpsNoAttack, $01
00089CAA E101                       	smpsAlterNote       $01
00089CAC E701                       	dc.b	smpsNoAttack, $01
00089CAE E107                       	smpsAlterNote       $07
00089CB0 E701                       	dc.b	smpsNoAttack, $01
00089CB2 E10B                       	smpsAlterNote       $0B
00089CB4 E701                       	dc.b	smpsNoAttack, $01
00089CB6 E107                       	smpsAlterNote       $07
00089CB8 E701                       	dc.b	smpsNoAttack, $01
00089CBA E104                       	smpsAlterNote       $04
00089CBC E701                       	dc.b	smpsNoAttack, $01
00089CBE E100                       	smpsAlterNote       $00
00089CC0 E701                       	dc.b	smpsNoAttack, $01
00089CC2 E104                       	smpsAlterNote       $04
00089CC4 E701                       	dc.b	smpsNoAttack, $01
00089CC6 E10A                       	smpsAlterNote       $0A
00089CC8 E701                       	dc.b	smpsNoAttack, $01
00089CCA E10B                       	smpsAlterNote       $0B
00089CCC E701                       	dc.b	smpsNoAttack, $01
00089CCE E107                       	smpsAlterNote       $07
00089CD0 E701                       	dc.b	smpsNoAttack, $01
00089CD2 E101                       	smpsAlterNote       $01
00089CD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CD8 E104                       	smpsAlterNote       $04
00089CDA E701                       	dc.b	smpsNoAttack, $01
00089CDC E10A                       	smpsAlterNote       $0A
00089CDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CE2 E104                       	smpsAlterNote       $04
00089CE4 E701                       	dc.b	smpsNoAttack, $01
00089CE6 E101                       	smpsAlterNote       $01
00089CE8 E701                       	dc.b	smpsNoAttack, $01
00089CEC E107                       	smpsAlterNote       $07
00089CEE E6FF                       	smpsAlterVol        $FF
00089CF0 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00089CFC 8004                       	dc.b	nRst, $04
00089D00 E109                       	smpsAlterNote       $09
00089D02 E602                       	smpsAlterVol        $02
00089D04 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
00089D0A E108                       	smpsAlterNote       $08
00089D0C B502 8001                  	dc.b	nE4, $02, nRst, $01
00089D10 E109                       	smpsAlterNote       $09
00089D12 B60D                       	dc.b	nF4, $0D
00089D14 E106                       	smpsAlterNote       $06
00089D16 E701                       	dc.b	smpsNoAttack, $01
00089D18 E102                       	smpsAlterNote       $02
00089D1A E701                       	dc.b	smpsNoAttack, $01
00089D1C E106                       	smpsAlterNote       $06
00089D1E E701                       	dc.b	smpsNoAttack, $01
00089D20 E109                       	smpsAlterNote       $09
00089D22 E701                       	dc.b	smpsNoAttack, $01
00089D24 E10D                       	smpsAlterNote       $0D
00089D26 E701                       	dc.b	smpsNoAttack, $01
00089D28 E109                       	smpsAlterNote       $09
00089D2A E701                       	dc.b	smpsNoAttack, $01
00089D2C E103                       	smpsAlterNote       $03
00089D2E E701                       	dc.b	smpsNoAttack, $01
00089D30 E102                       	smpsAlterNote       $02
00089D32 E701                       	dc.b	smpsNoAttack, $01
00089D34 E106                       	smpsAlterNote       $06
00089D36 E701                       	dc.b	smpsNoAttack, $01
00089D38 E10C                       	smpsAlterNote       $0C
00089D3A E701                       	dc.b	smpsNoAttack, $01
00089D3C E10D                       	smpsAlterNote       $0D
00089D3E 8001                       	dc.b	nRst, $01
00089D40 E109                       	smpsAlterNote       $09
00089D42 B80D                       	dc.b	nG4, $0D
00089D44 E106                       	smpsAlterNote       $06
00089D46 E701                       	dc.b	smpsNoAttack, $01
00089D48 E102                       	smpsAlterNote       $02
00089D4A E701                       	dc.b	smpsNoAttack, $01
00089D4C E106                       	smpsAlterNote       $06
00089D4E E701                       	dc.b	smpsNoAttack, $01
00089D50 E10C                       	smpsAlterNote       $0C
00089D52 E701                       	dc.b	smpsNoAttack, $01
00089D54 E10D                       	smpsAlterNote       $0D
00089D56 E701                       	dc.b	smpsNoAttack, $01
00089D58 E109                       	smpsAlterNote       $09
00089D5A E701                       	dc.b	smpsNoAttack, $01
00089D5C E103                       	smpsAlterNote       $03
00089D5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D62 E106                       	smpsAlterNote       $06
00089D64 E701                       	dc.b	smpsNoAttack, $01
00089D66 E10C                       	smpsAlterNote       $0C
00089D68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D6C E106                       	smpsAlterNote       $06
00089D6E E701                       	dc.b	smpsNoAttack, $01
00089D70 E103                       	smpsAlterNote       $03
00089D72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D76 E109                       	smpsAlterNote       $09
00089D78 E701                       	dc.b	smpsNoAttack, $01
00089D7A E10D                       	smpsAlterNote       $0D
00089D7C E701                       	dc.b	smpsNoAttack, $01
00089D7E E10C                       	smpsAlterNote       $0C
00089D80 E701                       	dc.b	smpsNoAttack, $01
00089D82 E109                       	smpsAlterNote       $09
00089D84 8001                       	dc.b	nRst, $01
00089D86 E10B                       	smpsAlterNote       $0B
00089D88 BA03                       	dc.b	nA4, $03
00089D8A E10C                       	smpsAlterNote       $0C
00089D8C BB03 8001                  	dc.b	nBb4, $03, nRst, $01
00089D90 E10B                       	smpsAlterNote       $0B
00089D92 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
00089D98 E10C                       	smpsAlterNote       $0C
00089D9A C703 8001                  	dc.b	nBb5, $03, nRst, $01
00089D9E E10B                       	smpsAlterNote       $0B
00089DA0 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00089DA6 E10C                       	smpsAlterNote       $0C
00089DA8 D303                       	dc.b	nBb6, $03
00089DAA E10B                       	smpsAlterNote       $0B
00089DAC D20D                       	dc.b	nA6, $0D
00089DAE E108                       	smpsAlterNote       $08
00089DB0 E701                       	dc.b	smpsNoAttack, $01
00089DB2 E104                       	smpsAlterNote       $04
00089DB4 E701                       	dc.b	smpsNoAttack, $01
00089DB6 E105                       	smpsAlterNote       $05
00089DB8 E701                       	dc.b	smpsNoAttack, $01
00089DBA E10B                       	smpsAlterNote       $0B
00089DBC E701                       	dc.b	smpsNoAttack, $01
00089DBE E10F                       	smpsAlterNote       $0F
00089DC0 E701                       	dc.b	smpsNoAttack, $01
00089DC2 E10B                       	smpsAlterNote       $0B
00089DC4 E701                       	dc.b	smpsNoAttack, $01
00089DC6 E108                       	smpsAlterNote       $08
00089DC8 E701                       	dc.b	smpsNoAttack, $01
00089DCA E104                       	smpsAlterNote       $04
00089DCC E701                       	dc.b	smpsNoAttack, $01
00089DCE E108                       	smpsAlterNote       $08
00089DD0 E701                       	dc.b	smpsNoAttack, $01
00089DD2 E10E                       	smpsAlterNote       $0E
00089DD4 E701                       	dc.b	smpsNoAttack, $01
00089DD6 E10F                       	smpsAlterNote       $0F
00089DD8 E701                       	dc.b	smpsNoAttack, $01
00089DDA E10B                       	smpsAlterNote       $0B
00089DDC E701                       	dc.b	smpsNoAttack, $01
00089DDE E105                       	smpsAlterNote       $05
00089DE0 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00089DE6 E109                       	smpsAlterNote       $09
00089DE8 CE07                       	dc.b	nF6, $07
00089DEA E108                       	smpsAlterNote       $08
00089DEC CD06 8001                  	dc.b	nE6, $06, nRst, $01
00089DF0 E109                       	smpsAlterNote       $09
00089DF2 CE03 8001                  	dc.b	nF6, $03, nRst, $01
00089DF6 E108                       	smpsAlterNote       $08
00089DF8 CC0D                       	dc.b	nEb6, $0D
00089DFA E102                       	smpsAlterNote       $02
00089DFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E00 E108                       	smpsAlterNote       $08
00089E02 E701                       	dc.b	smpsNoAttack, $01
00089E04 E10B                       	smpsAlterNote       $0B
00089E06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E0A E105                       	smpsAlterNote       $05
00089E0C E701                       	dc.b	smpsNoAttack, $01
00089E0E E101                       	smpsAlterNote       $01
00089E10 E701                       	dc.b	smpsNoAttack, $01
00089E12 E102                       	smpsAlterNote       $02
00089E14 E701                       	dc.b	smpsNoAttack, $01
00089E16 E108                       	smpsAlterNote       $08
00089E18 E701                       	dc.b	smpsNoAttack, $01
00089E1A E10C                       	smpsAlterNote       $0C
00089E1C E701                       	dc.b	smpsNoAttack, $01
00089E1E E108                       	smpsAlterNote       $08
00089E20 E701                       	dc.b	smpsNoAttack, $01
00089E22 E105                       	smpsAlterNote       $05
00089E24 E701                       	dc.b	smpsNoAttack, $01
00089E26 E101                       	smpsAlterNote       $01
00089E28 E701                       	dc.b	smpsNoAttack, $01
00089E2A E105                       	smpsAlterNote       $05
00089E2C E701                       	dc.b	smpsNoAttack, $01
00089E2E E10B                       	smpsAlterNote       $0B
00089E30 E701                       	dc.b	smpsNoAttack, $01
00089E32 E10C                       	smpsAlterNote       $0C
00089E34 E701                       	dc.b	smpsNoAttack, $01
00089E36 E108                       	smpsAlterNote       $08
00089E38 E701                       	dc.b	smpsNoAttack, $01
00089E3A E107                       	smpsAlterNote       $07
00089E3C CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
00089E46 E10B                       	smpsAlterNote       $0B
00089E48 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00089E52 E109                       	smpsAlterNote       $09
00089E54 C203                       	dc.b	nF5, $03
00089E56 E108                       	smpsAlterNote       $08
00089E58 C103 8001                  	dc.b	nE5, $03, nRst, $01
00089E5C E109                       	smpsAlterNote       $09
00089E5E C20D                       	dc.b	nF5, $0D
00089E60 E108                       	smpsAlterNote       $08
00089E62 C10E                       	dc.b	nE5, $0E
00089E64 E107                       	smpsAlterNote       $07
00089E66 BF0D                       	dc.b	nD5, $0D
00089E68 E104                       	smpsAlterNote       $04
00089E6A E701                       	dc.b	smpsNoAttack, $01
00089E6C E100                       	smpsAlterNote       $00
00089E6E E701                       	dc.b	smpsNoAttack, $01
00089E70 E104                       	smpsAlterNote       $04
00089E72 E701                       	dc.b	smpsNoAttack, $01
00089E74 E107                       	smpsAlterNote       $07
00089E76 E701                       	dc.b	smpsNoAttack, $01
00089E78 E10B                       	smpsAlterNote       $0B
00089E7A E701                       	dc.b	smpsNoAttack, $01
00089E7C E107                       	smpsAlterNote       $07
00089E7E E701                       	dc.b	smpsNoAttack, $01
00089E80 E101                       	smpsAlterNote       $01
00089E82 E701                       	dc.b	smpsNoAttack, $01
00089E84 E100                       	smpsAlterNote       $00
00089E86 E701                       	dc.b	smpsNoAttack, $01
00089E88 E104                       	smpsAlterNote       $04
00089E8A E701                       	dc.b	smpsNoAttack, $01
00089E8C E10A                       	smpsAlterNote       $0A
00089E8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E92 E107                       	smpsAlterNote       $07
00089E94 E701                       	dc.b	smpsNoAttack, $01
00089E96 E101                       	smpsAlterNote       $01
00089E98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E9C E107                       	smpsAlterNote       $07
00089E9E E701                       	dc.b	smpsNoAttack, $01
00089EA0 E10A                       	smpsAlterNote       $0A
00089EA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089EA6 E104                       	smpsAlterNote       $04
00089EA8 E701                       	dc.b	smpsNoAttack, $01
00089EAA E100                       	smpsAlterNote       $00
00089EAC E701                       	dc.b	smpsNoAttack, $01
00089EAE E101                       	smpsAlterNote       $01
00089EB0 E701                       	dc.b	smpsNoAttack, $01
00089EB2 E107                       	smpsAlterNote       $07
00089EB4 E701                       	dc.b	smpsNoAttack, $01
00089EB6 E10B                       	smpsAlterNote       $0B
00089EB8 E701                       	dc.b	smpsNoAttack, $01
00089EBA E107                       	smpsAlterNote       $07
00089EBC E701                       	dc.b	smpsNoAttack, $01
00089EBE E104                       	smpsAlterNote       $04
00089EC0 E701                       	dc.b	smpsNoAttack, $01
00089EC2 E100                       	smpsAlterNote       $00
00089EC4 E701                       	dc.b	smpsNoAttack, $01
00089EC6 E104                       	smpsAlterNote       $04
00089EC8 E701                       	dc.b	smpsNoAttack, $01
00089ECA E10A                       	smpsAlterNote       $0A
00089ECC E701                       	dc.b	smpsNoAttack, $01
00089ECE E10B                       	smpsAlterNote       $0B
00089ED0 E701                       	dc.b	smpsNoAttack, $01
00089ED2 E107                       	smpsAlterNote       $07
00089ED4 E701                       	dc.b	smpsNoAttack, $01
00089ED6 E101                       	smpsAlterNote       $01
00089ED8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089EDC E104                       	smpsAlterNote       $04
00089EDE E701                       	dc.b	smpsNoAttack, $01
00089EE0 E10A                       	smpsAlterNote       $0A
00089EE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089EE6 E104                       	smpsAlterNote       $04
00089EE8 E701                       	dc.b	smpsNoAttack, $01
00089EEA E101                       	smpsAlterNote       $01
00089EEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089EF0 E107                       	smpsAlterNote       $07
00089EF2 E701                       	dc.b	smpsNoAttack, $01
00089EF4 E10B                       	smpsAlterNote       $0B
00089EF6 E701                       	dc.b	smpsNoAttack, $01
00089EF8 E10A                       	smpsAlterNote       $0A
00089EFA E701                       	dc.b	smpsNoAttack, $01
00089EFC E104                       	smpsAlterNote       $04
00089EFE E701                       	dc.b	smpsNoAttack, $01
00089F00 E100                       	smpsAlterNote       $00
00089F02 E701                       	dc.b	smpsNoAttack, $01
00089F04 E104                       	smpsAlterNote       $04
00089F06 E701                       	dc.b	smpsNoAttack, $01
00089F08 E107                       	smpsAlterNote       $07
00089F0A E701                       	dc.b	smpsNoAttack, $01
00089F0C E10B                       	smpsAlterNote       $0B
00089F0E E701                       	dc.b	smpsNoAttack, $01
00089F10 E107                       	smpsAlterNote       $07
00089F12 E701                       	dc.b	smpsNoAttack, $01
00089F14 E101                       	smpsAlterNote       $01
00089F16 E701                       	dc.b	smpsNoAttack, $01
00089F18 E100                       	smpsAlterNote       $00
00089F1A E701                       	dc.b	smpsNoAttack, $01
00089F1C E104                       	smpsAlterNote       $04
00089F1E E701                       	dc.b	smpsNoAttack, $01
00089F20 E10A                       	smpsAlterNote       $0A
00089F22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F26 E107                       	smpsAlterNote       $07
00089F28 E701                       	dc.b	smpsNoAttack, $01
00089F2A E101                       	smpsAlterNote       $01
00089F2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F30 E107                       	smpsAlterNote       $07
00089F32 E701                       	dc.b	smpsNoAttack, $01
00089F34 E10A                       	smpsAlterNote       $0A
00089F36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F3A E104                       	smpsAlterNote       $04
00089F3C E701                       	dc.b	smpsNoAttack, $01
00089F3E E100                       	smpsAlterNote       $00
00089F40 E701                       	dc.b	smpsNoAttack, $01
00089F42 E101                       	smpsAlterNote       $01
00089F44 E701                       	dc.b	smpsNoAttack, $01
00089F46 E107                       	smpsAlterNote       $07
00089F48 E701                       	dc.b	smpsNoAttack, $01
00089F4A E10B                       	smpsAlterNote       $0B
00089F4C E701                       	dc.b	smpsNoAttack, $01
00089F4E E107                       	smpsAlterNote       $07
00089F50 E701                       	dc.b	smpsNoAttack, $01
00089F52 E104                       	smpsAlterNote       $04
00089F54 E701                       	dc.b	smpsNoAttack, $01
00089F56 E100                       	smpsAlterNote       $00
00089F58 E701                       	dc.b	smpsNoAttack, $01
00089F5A E101                       	smpsAlterNote       $01
00089F5C 8001                       	dc.b	nRst, $01
00089F5E E109                       	smpsAlterNote       $09
00089F60 C20D                       	dc.b	nF5, $0D
00089F62 E106                       	smpsAlterNote       $06
00089F64 E701                       	dc.b	smpsNoAttack, $01
00089F66 E102                       	smpsAlterNote       $02
00089F68 E701                       	dc.b	smpsNoAttack, $01
00089F6A E106                       	smpsAlterNote       $06
00089F6C E701                       	dc.b	smpsNoAttack, $01
00089F6E E10C                       	smpsAlterNote       $0C
00089F70 E701                       	dc.b	smpsNoAttack, $01
00089F72 E10D                       	smpsAlterNote       $0D
00089F74 E701                       	dc.b	smpsNoAttack, $01
00089F76 E109                       	smpsAlterNote       $09
00089F78 E701                       	dc.b	smpsNoAttack, $01
00089F7A E103                       	smpsAlterNote       $03
00089F7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F80 E106                       	smpsAlterNote       $06
00089F82 E701                       	dc.b	smpsNoAttack, $01
00089F84 E10C                       	smpsAlterNote       $0C
00089F86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F8A E106                       	smpsAlterNote       $06
00089F8C E701                       	dc.b	smpsNoAttack, $01
00089F8E E103                       	smpsAlterNote       $03
00089F90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F94 E109                       	smpsAlterNote       $09
00089F96 E701                       	dc.b	smpsNoAttack, $01
00089F98 E10D                       	smpsAlterNote       $0D
00089F9A E701                       	dc.b	smpsNoAttack, $01
00089F9C E10C                       	smpsAlterNote       $0C
00089F9E E701                       	dc.b	smpsNoAttack, $01
00089FA0 E109                       	smpsAlterNote       $09
00089FA2 8001                       	dc.b	nRst, $01
00089FA4 E108                       	smpsAlterNote       $08
00089FA6 C10D                       	dc.b	nE5, $0D
00089FA8 E109                       	smpsAlterNote       $09
00089FAA C20A 8001                  	dc.b	nF5, $0A, nRst, $01
00089FAE E108                       	smpsAlterNote       $08
00089FB0 C10D                       	dc.b	nE5, $0D
00089FB2 E102                       	smpsAlterNote       $02
00089FB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089FB8 E105                       	smpsAlterNote       $05
00089FBA E701                       	dc.b	smpsNoAttack, $01
00089FBC E108                       	smpsAlterNote       $08
00089FBE 8001                       	dc.b	nRst, $01
00089FC0 E107                       	smpsAlterNote       $07
00089FC2 BF0D                       	dc.b	nD5, $0D
00089FC4 E108                       	smpsAlterNote       $08
00089FC6 C107                       	dc.b	nE5, $07
00089FC8 E109                       	smpsAlterNote       $09
00089FCA C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
00089FD0 E10B                       	smpsAlterNote       $0B
00089FD2 C603                       	dc.b	nA5, $03
00089FD4 E10C                       	smpsAlterNote       $0C
00089FD6 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00089FDC E10B                       	smpsAlterNote       $0B
00089FDE C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
00089FE4 E109                       	smpsAlterNote       $09
00089FE6 D003                       	dc.b	nG6, $03
00089FE8 E108                       	smpsAlterNote       $08
00089FEA CD02 8001                  	dc.b	nE6, $02, nRst, $01
00089FEE E10B                       	smpsAlterNote       $0B
00089FF0 C601 8001                  	dc.b	nA5, $01, nRst, $01
00089FF4 E108                       	smpsAlterNote       $08
00089FF6 C102                       	dc.b	nE5, $02
00089FFA E10C                       	smpsAlterNote       $0C
00089FFC E6FB                       	smpsAlterVol        $FB
00089FFE A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
0008A00A 8001                       	dc.b	nRst, $01
0008A00C E10B                       	smpsAlterNote       $0B
0008A00E A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008A016 E107                       	smpsAlterNote       $07
0008A018 A706 8001                  	dc.b	nD3, $06, nRst, $01
0008A01C E10B                       	smpsAlterNote       $0B
0008A01E A203                       	dc.b	nA2, $03
0008A020 E109                       	smpsAlterNote       $09
0008A022 AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008A026 E108                       	smpsAlterNote       $08
0008A028 A906                       	dc.b	nE3, $06
0008A02A E107                       	smpsAlterNote       $07
0008A02C A703 8001                  	dc.b	nD3, $03, nRst, $01
0008A030 E106                       	smpsAlterNote       $06
0008A032 A503                       	dc.b	nC3, $03
0008A034 E10C                       	smpsAlterNote       $0C
0008A036 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008A03A E10B                       	smpsAlterNote       $0B
0008A03C A203 8004                  	dc.b	nA2, $03, nRst, $04
0008A040 E11B                       	smpsAlterNote       $1B
0008A042 C401                       	dc.b	nG5, $01
0008A044 E1F4                       	smpsAlterNote       $F4
0008A046 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008A049 E106                       	smpsAlterNote       $06
0008A04B E701                       	dc.b	smpsNoAttack, $01
0008A04D E10F                       	smpsAlterNote       $0F
0008A04F E701                       	dc.b	smpsNoAttack, $01
0008A051 E1E4                       	smpsAlterNote       $E4
0008A053 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008A056 E1F6                       	smpsAlterNote       $F6
0008A058 E701                       	dc.b	smpsNoAttack, $01
0008A05A E108                       	smpsAlterNote       $08
0008A05C E701                       	dc.b	smpsNoAttack, $01
0008A05E E10B                       	smpsAlterNote       $0B
0008A060 E706                       	dc.b	smpsNoAttack, $06
0008A062 E105                       	smpsAlterNote       $05
0008A064 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A068 E108                       	smpsAlterNote       $08
0008A06A E701                       	dc.b	smpsNoAttack, $01
0008A06C E10E                       	smpsAlterNote       $0E
0008A06E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A072 E108                       	smpsAlterNote       $08
0008A074 E701                       	dc.b	smpsNoAttack, $01
0008A076 E105                       	smpsAlterNote       $05
0008A078 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A07C E10B                       	smpsAlterNote       $0B
0008A07E E701                       	dc.b	smpsNoAttack, $01
0008A080 E10F                       	smpsAlterNote       $0F
0008A082 E701                       	dc.b	smpsNoAttack, $01
0008A084 E10E                       	smpsAlterNote       $0E
0008A086 E701                       	dc.b	smpsNoAttack, $01
0008A088 E108                       	smpsAlterNote       $08
0008A08A E701                       	dc.b	smpsNoAttack, $01
0008A08C E104                       	smpsAlterNote       $04
0008A08E E701                       	dc.b	smpsNoAttack, $01
0008A090 E108                       	smpsAlterNote       $08
0008A092 E701                       	dc.b	smpsNoAttack, $01
0008A094 E10B                       	smpsAlterNote       $0B
0008A096 E701                       	dc.b	smpsNoAttack, $01
0008A098 E10F                       	smpsAlterNote       $0F
0008A09A E701                       	dc.b	smpsNoAttack, $01
0008A09C E10B                       	smpsAlterNote       $0B
0008A09E E701                       	dc.b	smpsNoAttack, $01
0008A0A0 E105                       	smpsAlterNote       $05
0008A0A2 E701                       	dc.b	smpsNoAttack, $01
0008A0A4 E104                       	smpsAlterNote       $04
0008A0A6 E701                       	dc.b	smpsNoAttack, $01
0008A0A8 E108                       	smpsAlterNote       $08
0008A0AA E701                       	dc.b	smpsNoAttack, $01
0008A0AC E10E                       	smpsAlterNote       $0E
0008A0AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0B2 E10B                       	smpsAlterNote       $0B
0008A0B4 E701                       	dc.b	smpsNoAttack, $01
0008A0B6 E105                       	smpsAlterNote       $05
0008A0B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0BC E10B                       	smpsAlterNote       $0B
0008A0BE E701                       	dc.b	smpsNoAttack, $01
0008A0C0 E10E                       	smpsAlterNote       $0E
0008A0C2 E701                       	dc.b	smpsNoAttack, $01
0008A0C4 E10F                       	smpsAlterNote       $0F
0008A0C6 8001                       	dc.b	nRst, $01
0008A0C8 E109                       	smpsAlterNote       $09
0008A0CA C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008A0D0 E108                       	smpsAlterNote       $08
0008A0D2 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008A0D6 E109                       	smpsAlterNote       $09
0008A0D8 C202                       	dc.b	nF5, $02
0008A0DA E108                       	smpsAlterNote       $08
0008A0DC C102                       	dc.b	nE5, $02
0008A0DE E107                       	smpsAlterNote       $07
0008A0E0 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008A0E4 E108                       	smpsAlterNote       $08
0008A0E6 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008A0EA E107                       	smpsAlterNote       $07
0008A0EC BF02                       	dc.b	nD5, $02
0008A0EE E106                       	smpsAlterNote       $06
0008A0F0 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008A0F4 E107                       	smpsAlterNote       $07
0008A0F6 BF01 8001                  	dc.b	nD5, $01, nRst, $01
0008A0FA E106                       	smpsAlterNote       $06
0008A0FC BD02                       	dc.b	nC5, $02
0008A0FE E10C                       	smpsAlterNote       $0C
0008A100 BB02                       	dc.b	nBb4, $02
0008A102 E106                       	smpsAlterNote       $06
0008A104 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008A108 E10C                       	smpsAlterNote       $0C
0008A10A BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008A10E E10B                       	smpsAlterNote       $0B
0008A110 BA02                       	dc.b	nA4, $02
0008A112 E10C                       	smpsAlterNote       $0C
0008A114 BB02                       	dc.b	nBb4, $02
0008A116 E10B                       	smpsAlterNote       $0B
0008A118 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008A122 E108                       	smpsAlterNote       $08
0008A124 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
0008A12C E107                       	smpsAlterNote       $07
0008A12E BE02                       	dc.b	nCs5, $02
0008A130 E10B                       	smpsAlterNote       $0B
0008A132 BA02                       	dc.b	nA4, $02
0008A134 E109                       	smpsAlterNote       $09
0008A136 B802 8001                  	dc.b	nG4, $02, nRst, $01
0008A13A E108                       	smpsAlterNote       $08
0008A13C B501 8001                  	dc.b	nE4, $01, nRst, $01
0008A140 E10B                       	smpsAlterNote       $0B
0008A142 AE02                       	dc.b	nA3, $02
0008A144 E10C                       	smpsAlterNote       $0C
0008A146 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
0008A152 E10B                       	smpsAlterNote       $0B
0008A154 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008A15C E107                       	smpsAlterNote       $07
0008A15E A706 8001                  	dc.b	nD3, $06, nRst, $01
0008A162 E10B                       	smpsAlterNote       $0B
0008A164 A203                       	dc.b	nA2, $03
0008A166 E109                       	smpsAlterNote       $09
0008A168 AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008A16C E108                       	smpsAlterNote       $08
0008A16E A906 8001                  	dc.b	nE3, $06, nRst, $01
0008A172 E107                       	smpsAlterNote       $07
0008A174 A702 8001                  	dc.b	nD3, $02, nRst, $01
0008A178 E106                       	smpsAlterNote       $06
0008A17A A503                       	dc.b	nC3, $03
0008A17C E10C                       	smpsAlterNote       $0C
0008A17E A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008A184 E107                       	smpsAlterNote       $07
0008A186 B20D                       	dc.b	nCs4, $0D
0008A188 E104                       	smpsAlterNote       $04
0008A18A E701                       	dc.b	smpsNoAttack, $01
0008A18C E100                       	smpsAlterNote       $00
0008A18E E701                       	dc.b	smpsNoAttack, $01
0008A190 E104                       	smpsAlterNote       $04
0008A192 E701                       	dc.b	smpsNoAttack, $01
0008A194 E10A                       	smpsAlterNote       $0A
0008A196 E701                       	dc.b	smpsNoAttack, $01
0008A198 E10B                       	smpsAlterNote       $0B
0008A19A E701                       	dc.b	smpsNoAttack, $01
0008A19C E107                       	smpsAlterNote       $07
0008A19E E701                       	dc.b	smpsNoAttack, $01
0008A1A0 E101                       	smpsAlterNote       $01
0008A1A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1A6 E104                       	smpsAlterNote       $04
0008A1A8 E701                       	dc.b	smpsNoAttack, $01
0008A1AA E10A                       	smpsAlterNote       $0A
0008A1AC E701                       	dc.b	smpsNoAttack, $01
0008A1AE E10B                       	smpsAlterNote       $0B
0008A1B0 8001                       	dc.b	nRst, $01
0008A1B2 E107                       	smpsAlterNote       $07
0008A1B4 B30D                       	dc.b	nD4, $0D
0008A1B6 E104                       	smpsAlterNote       $04
0008A1B8 E701                       	dc.b	smpsNoAttack, $01
0008A1BA E100                       	smpsAlterNote       $00
0008A1BC E701                       	dc.b	smpsNoAttack, $01
0008A1BE E104                       	smpsAlterNote       $04
0008A1C0 E701                       	dc.b	smpsNoAttack, $01
0008A1C2 E10A                       	smpsAlterNote       $0A
0008A1C4 E701                       	dc.b	smpsNoAttack, $01
0008A1C6 E10B                       	smpsAlterNote       $0B
0008A1C8 E701                       	dc.b	smpsNoAttack, $01
0008A1CA E107                       	smpsAlterNote       $07
0008A1CC E701                       	dc.b	smpsNoAttack, $01
0008A1CE E101                       	smpsAlterNote       $01
0008A1D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1D4 E104                       	smpsAlterNote       $04
0008A1D6 E701                       	dc.b	smpsNoAttack, $01
0008A1D8 E10A                       	smpsAlterNote       $0A
0008A1DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1DE E104                       	smpsAlterNote       $04
0008A1E0 E701                       	dc.b	smpsNoAttack, $01
0008A1E2 E101                       	smpsAlterNote       $01
0008A1E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1E8 E107                       	smpsAlterNote       $07
0008A1EA E701                       	dc.b	smpsNoAttack, $01
0008A1EC E10B                       	smpsAlterNote       $0B
0008A1EE E701                       	dc.b	smpsNoAttack, $01
0008A1F0 E10A                       	smpsAlterNote       $0A
0008A1F2 E701                       	dc.b	smpsNoAttack, $01
0008A1F4 E107                       	smpsAlterNote       $07
0008A1F6 8001                       	dc.b	nRst, $01
0008A1F8 E108                       	smpsAlterNote       $08
0008A1FA B50D                       	dc.b	nE4, $0D
0008A1FC E102                       	smpsAlterNote       $02
0008A1FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A202 E105                       	smpsAlterNote       $05
0008A204 E701                       	dc.b	smpsNoAttack, $01
0008A206 E10B                       	smpsAlterNote       $0B
0008A208 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A20C E105                       	smpsAlterNote       $05
0008A20E E701                       	dc.b	smpsNoAttack, $01
0008A210 E102                       	smpsAlterNote       $02
0008A212 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A216 E108                       	smpsAlterNote       $08
0008A218 E701                       	dc.b	smpsNoAttack, $01
0008A21A E10C                       	smpsAlterNote       $0C
0008A21C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A220 E107                       	smpsAlterNote       $07
0008A222 B30D                       	dc.b	nD4, $0D
0008A224 E101                       	smpsAlterNote       $01
0008A226 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A22A E104                       	smpsAlterNote       $04
0008A22C E701                       	dc.b	smpsNoAttack, $01
0008A22E E10A                       	smpsAlterNote       $0A
0008A230 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A234 E104                       	smpsAlterNote       $04
0008A236 E701                       	dc.b	smpsNoAttack, $01
0008A238 E101                       	smpsAlterNote       $01
0008A23A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A23E E107                       	smpsAlterNote       $07
0008A240 E701                       	dc.b	smpsNoAttack, $01
0008A242 E10B                       	smpsAlterNote       $0B
0008A244 E701                       	dc.b	smpsNoAttack, $01
0008A246 E10A                       	smpsAlterNote       $0A
0008A248 E701                       	dc.b	smpsNoAttack, $01
0008A24A E104                       	smpsAlterNote       $04
0008A24C E701                       	dc.b	smpsNoAttack, $01
0008A24E E100                       	smpsAlterNote       $00
0008A250 E701                       	dc.b	smpsNoAttack, $01
0008A252 E104                       	smpsAlterNote       $04
0008A254 E701                       	dc.b	smpsNoAttack, $01
0008A256 E107                       	smpsAlterNote       $07
0008A258 E701                       	dc.b	smpsNoAttack, $01
0008A25A E10B                       	smpsAlterNote       $0B
0008A25C E701                       	dc.b	smpsNoAttack, $01
0008A25E E107                       	smpsAlterNote       $07
0008A260 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
0008A264 E101                       	smpsAlterNote       $01
0008A266 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A26A E107                       	smpsAlterNote       $07
0008A26C E701                       	dc.b	smpsNoAttack, $01
0008A26E E10A                       	smpsAlterNote       $0A
0008A270 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A274 E104                       	smpsAlterNote       $04
0008A276 E701                       	dc.b	smpsNoAttack, $01
0008A278 E100                       	smpsAlterNote       $00
0008A27A E701                       	dc.b	smpsNoAttack, $01
0008A27C E101                       	smpsAlterNote       $01
0008A27E E701                       	dc.b	smpsNoAttack, $01
0008A280 E107                       	smpsAlterNote       $07
0008A282 E701                       	dc.b	smpsNoAttack, $01
0008A284 E10B                       	smpsAlterNote       $0B
0008A286 E701                       	dc.b	smpsNoAttack, $01
0008A288 E107                       	smpsAlterNote       $07
0008A28A B30E                       	dc.b	nD4, $0E
0008A28C E101                       	smpsAlterNote       $01
0008A28E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A292 E107                       	smpsAlterNote       $07
0008A294 E701                       	dc.b	smpsNoAttack, $01
0008A296 E10A                       	smpsAlterNote       $0A
0008A298 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A29C E104                       	smpsAlterNote       $04
0008A29E E701                       	dc.b	smpsNoAttack, $01
0008A2A0 E100                       	smpsAlterNote       $00
0008A2A2 E701                       	dc.b	smpsNoAttack, $01
0008A2A4 E101                       	smpsAlterNote       $01
0008A2A6 E701                       	dc.b	smpsNoAttack, $01
0008A2A8 E107                       	smpsAlterNote       $07
0008A2AA E701                       	dc.b	smpsNoAttack, $01
0008A2AC E10B                       	smpsAlterNote       $0B
0008A2AE E701                       	dc.b	smpsNoAttack, $01
0008A2B0 E107                       	smpsAlterNote       $07
0008A2B2 E701                       	dc.b	smpsNoAttack, $01
0008A2B4 E104                       	smpsAlterNote       $04
0008A2B6 E701                       	dc.b	smpsNoAttack, $01
0008A2B8 E100                       	smpsAlterNote       $00
0008A2BA E701                       	dc.b	smpsNoAttack, $01
0008A2BC E104                       	smpsAlterNote       $04
0008A2BE E701                       	dc.b	smpsNoAttack, $01
0008A2C0 E10A                       	smpsAlterNote       $0A
0008A2C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A2C6 E107                       	smpsAlterNote       $07
0008A2C8 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008A2CC E104                       	smpsAlterNote       $04
0008A2CE E701                       	dc.b	smpsNoAttack, $01
0008A2D0 E100                       	smpsAlterNote       $00
0008A2D2 E701                       	dc.b	smpsNoAttack, $01
0008A2D4 E101                       	smpsAlterNote       $01
0008A2D6 E701                       	dc.b	smpsNoAttack, $01
0008A2D8 E107                       	smpsAlterNote       $07
0008A2DA E701                       	dc.b	smpsNoAttack, $01
0008A2DC E10B                       	smpsAlterNote       $0B
0008A2DE E701                       	dc.b	smpsNoAttack, $01
0008A2E0 E107                       	smpsAlterNote       $07
0008A2E2 E701                       	dc.b	smpsNoAttack, $01
0008A2E4 E104                       	smpsAlterNote       $04
0008A2E6 E701                       	dc.b	smpsNoAttack, $01
0008A2E8 E100                       	smpsAlterNote       $00
0008A2EA E701                       	dc.b	smpsNoAttack, $01
0008A2EC E104                       	smpsAlterNote       $04
0008A2EE E701                       	dc.b	smpsNoAttack, $01
0008A2F0 E10A                       	smpsAlterNote       $0A
0008A2F2 E701                       	dc.b	smpsNoAttack, $01
0008A2F4 E10B                       	smpsAlterNote       $0B
0008A2F6 E701                       	dc.b	smpsNoAttack, $01
0008A2FA E6FF                       	smpsAlterVol        $FF
0008A2FC A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
0008A308 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
0008A310 E109                       	smpsAlterNote       $09
0008A312 E601                       	smpsAlterVol        $01
0008A314 B60D                       	dc.b	nF4, $0D
0008A316 E106                       	smpsAlterNote       $06
0008A318 E701                       	dc.b	smpsNoAttack, $01
0008A31A E102                       	smpsAlterNote       $02
0008A31C E701                       	dc.b	smpsNoAttack, $01
0008A31E E106                       	smpsAlterNote       $06
0008A320 E701                       	dc.b	smpsNoAttack, $01
0008A322 E109                       	smpsAlterNote       $09
0008A324 E701                       	dc.b	smpsNoAttack, $01
0008A326 E10D                       	smpsAlterNote       $0D
0008A328 E701                       	dc.b	smpsNoAttack, $01
0008A32A E109                       	smpsAlterNote       $09
0008A32C E701                       	dc.b	smpsNoAttack, $01
0008A32E E103                       	smpsAlterNote       $03
0008A330 E701                       	dc.b	smpsNoAttack, $01
0008A332 E102                       	smpsAlterNote       $02
0008A334 E701                       	dc.b	smpsNoAttack, $01
0008A336 E106                       	smpsAlterNote       $06
0008A338 E701                       	dc.b	smpsNoAttack, $01
0008A33A E10C                       	smpsAlterNote       $0C
0008A33C E701                       	dc.b	smpsNoAttack, $01
0008A33E E10D                       	smpsAlterNote       $0D
0008A340 8001                       	dc.b	nRst, $01
0008A342 E109                       	smpsAlterNote       $09
0008A344 B80D                       	dc.b	nG4, $0D
0008A346 E106                       	smpsAlterNote       $06
0008A348 E701                       	dc.b	smpsNoAttack, $01
0008A34A E102                       	smpsAlterNote       $02
0008A34C E701                       	dc.b	smpsNoAttack, $01
0008A34E E106                       	smpsAlterNote       $06
0008A350 E701                       	dc.b	smpsNoAttack, $01
0008A352 E109                       	smpsAlterNote       $09
0008A354 E701                       	dc.b	smpsNoAttack, $01
0008A356 E10D                       	smpsAlterNote       $0D
0008A358 E701                       	dc.b	smpsNoAttack, $01
0008A35A E109                       	smpsAlterNote       $09
0008A35C E701                       	dc.b	smpsNoAttack, $01
0008A35E E103                       	smpsAlterNote       $03
0008A360 E701                       	dc.b	smpsNoAttack, $01
0008A362 E102                       	smpsAlterNote       $02
0008A364 E701                       	dc.b	smpsNoAttack, $01
0008A366 E106                       	smpsAlterNote       $06
0008A368 E701                       	dc.b	smpsNoAttack, $01
0008A36A E10C                       	smpsAlterNote       $0C
0008A36C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A370 E106                       	smpsAlterNote       $06
0008A372 E701                       	dc.b	smpsNoAttack, $01
0008A374 E103                       	smpsAlterNote       $03
0008A376 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A37A E109                       	smpsAlterNote       $09
0008A37C E701                       	dc.b	smpsNoAttack, $01
0008A37E E10D                       	smpsAlterNote       $0D
0008A380 E701                       	dc.b	smpsNoAttack, $01
0008A382 E10C                       	smpsAlterNote       $0C
0008A384 E701                       	dc.b	smpsNoAttack, $01
0008A386 E109                       	smpsAlterNote       $09
0008A388 8001                       	dc.b	nRst, $01
0008A38A E10B                       	smpsAlterNote       $0B
0008A38C BA0D                       	dc.b	nA4, $0D
0008A38E E105                       	smpsAlterNote       $05
0008A390 E701                       	dc.b	smpsNoAttack, $01
0008A392 E104                       	smpsAlterNote       $04
0008A394 E701                       	dc.b	smpsNoAttack, $01
0008A396 E108                       	smpsAlterNote       $08
0008A398 E701                       	dc.b	smpsNoAttack, $01
0008A39A E10E                       	smpsAlterNote       $0E
0008A39C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3A0 E10B                       	smpsAlterNote       $0B
0008A3A2 E701                       	dc.b	smpsNoAttack, $01
0008A3A4 E105                       	smpsAlterNote       $05
0008A3A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3AA E10B                       	smpsAlterNote       $0B
0008A3AC E701                       	dc.b	smpsNoAttack, $01
0008A3AE E10E                       	smpsAlterNote       $0E
0008A3B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3B4 E108                       	smpsAlterNote       $08
0008A3B6 E701                       	dc.b	smpsNoAttack, $01
0008A3B8 E104                       	smpsAlterNote       $04
0008A3BA E701                       	dc.b	smpsNoAttack, $01
0008A3BC E105                       	smpsAlterNote       $05
0008A3BE E701                       	dc.b	smpsNoAttack, $01
0008A3C0 E10B                       	smpsAlterNote       $0B
0008A3C2 E701                       	dc.b	smpsNoAttack, $01
0008A3C4 E10F                       	smpsAlterNote       $0F
0008A3C6 E701                       	dc.b	smpsNoAttack, $01
0008A3C8 E10B                       	smpsAlterNote       $0B
0008A3CA E701                       	dc.b	smpsNoAttack, $01
0008A3CC E108                       	smpsAlterNote       $08
0008A3CE E701                       	dc.b	smpsNoAttack, $01
0008A3D0 E104                       	smpsAlterNote       $04
0008A3D2 E701                       	dc.b	smpsNoAttack, $01
0008A3D4 E108                       	smpsAlterNote       $08
0008A3D6 E701                       	dc.b	smpsNoAttack, $01
0008A3D8 E10E                       	smpsAlterNote       $0E
0008A3DA E701                       	dc.b	smpsNoAttack, $01
0008A3DC E10F                       	smpsAlterNote       $0F
0008A3DE E701                       	dc.b	smpsNoAttack, $01
0008A3E0 E10B                       	smpsAlterNote       $0B
0008A3E2 E701                       	dc.b	smpsNoAttack, $01
0008A3E4 E105                       	smpsAlterNote       $05
0008A3E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3EA E108                       	smpsAlterNote       $08
0008A3EC E701                       	dc.b	smpsNoAttack, $01
0008A3EE E10E                       	smpsAlterNote       $0E
0008A3F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3F4 E108                       	smpsAlterNote       $08
0008A3F6 E701                       	dc.b	smpsNoAttack, $01
0008A3F8 E105                       	smpsAlterNote       $05
0008A3FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3FE E108                       	smpsAlterNote       $08
0008A400 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
0008A404 E109                       	smpsAlterNote       $09
0008A406 B60D                       	dc.b	nF4, $0D
0008A408 E103                       	smpsAlterNote       $03
0008A40A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A40E E106                       	smpsAlterNote       $06
0008A410 E701                       	dc.b	smpsNoAttack, $01
0008A412 E10C                       	smpsAlterNote       $0C
0008A414 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A418 E106                       	smpsAlterNote       $06
0008A41A E701                       	dc.b	smpsNoAttack, $01
0008A41C E103                       	smpsAlterNote       $03
0008A41E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A422 E109                       	smpsAlterNote       $09
0008A424 E701                       	dc.b	smpsNoAttack, $01
0008A426 E10D                       	smpsAlterNote       $0D
0008A428 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A42C E109                       	smpsAlterNote       $09
0008A42E B80D                       	dc.b	nG4, $0D
0008A430 E103                       	smpsAlterNote       $03
0008A432 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A436 E109                       	smpsAlterNote       $09
0008A438 E701                       	dc.b	smpsNoAttack, $01
0008A43A E10C                       	smpsAlterNote       $0C
0008A43C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A440 E106                       	smpsAlterNote       $06
0008A442 E701                       	dc.b	smpsNoAttack, $01
0008A444 E102                       	smpsAlterNote       $02
0008A446 E701                       	dc.b	smpsNoAttack, $01
0008A448 E103                       	smpsAlterNote       $03
0008A44A E701                       	dc.b	smpsNoAttack, $01
0008A44C E109                       	smpsAlterNote       $09
0008A44E E701                       	dc.b	smpsNoAttack, $01
0008A450 E10D                       	smpsAlterNote       $0D
0008A452 E701                       	dc.b	smpsNoAttack, $01
0008A454 E109                       	smpsAlterNote       $09
0008A456 E701                       	dc.b	smpsNoAttack, $01
0008A458 E106                       	smpsAlterNote       $06
0008A45A E701                       	dc.b	smpsNoAttack, $01
0008A45C E102                       	smpsAlterNote       $02
0008A45E E701                       	dc.b	smpsNoAttack, $01
0008A460 E106                       	smpsAlterNote       $06
0008A462 E701                       	dc.b	smpsNoAttack, $01
0008A464 E10C                       	smpsAlterNote       $0C
0008A466 E701                       	dc.b	smpsNoAttack, $01
0008A468 E10D                       	smpsAlterNote       $0D
0008A46A E701                       	dc.b	smpsNoAttack, $01
0008A46C E109                       	smpsAlterNote       $09
0008A46E E701                       	dc.b	smpsNoAttack, $01
0008A470 E10B                       	smpsAlterNote       $0B
0008A472 BA0D                       	dc.b	nA4, $0D
0008A474 E108                       	smpsAlterNote       $08
0008A476 E701                       	dc.b	smpsNoAttack, $01
0008A478 E105                       	smpsAlterNote       $05
0008A47A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A47E E10B                       	smpsAlterNote       $0B
0008A480 E701                       	dc.b	smpsNoAttack, $01
0008A482 E10F                       	smpsAlterNote       $0F
0008A484 E701                       	dc.b	smpsNoAttack, $01
0008A486 E10E                       	smpsAlterNote       $0E
0008A488 E701                       	dc.b	smpsNoAttack, $01
0008A48A E108                       	smpsAlterNote       $08
0008A48C E701                       	dc.b	smpsNoAttack, $01
0008A48E E104                       	smpsAlterNote       $04
0008A490 E701                       	dc.b	smpsNoAttack, $01
0008A492 E108                       	smpsAlterNote       $08
0008A494 E701                       	dc.b	smpsNoAttack, $01
0008A496 E10B                       	smpsAlterNote       $0B
0008A498 E701                       	dc.b	smpsNoAttack, $01
0008A49A E10F                       	smpsAlterNote       $0F
0008A49C E701                       	dc.b	smpsNoAttack, $01
0008A49E E10B                       	smpsAlterNote       $0B
0008A4A0 E701                       	dc.b	smpsNoAttack, $01
0008A4A2 E105                       	smpsAlterNote       $05
0008A4A4 E701                       	dc.b	smpsNoAttack, $01
0008A4A6 E104                       	smpsAlterNote       $04
0008A4A8 E701                       	dc.b	smpsNoAttack, $01
0008A4AA E108                       	smpsAlterNote       $08
0008A4AC E701                       	dc.b	smpsNoAttack, $01
0008A4AE E10E                       	smpsAlterNote       $0E
0008A4B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A4B4 E10B                       	smpsAlterNote       $0B
0008A4B6 E701                       	dc.b	smpsNoAttack, $01
0008A4B8 E105                       	smpsAlterNote       $05
0008A4BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A4BE E10B                       	smpsAlterNote       $0B
0008A4C0 E701                       	dc.b	smpsNoAttack, $01
0008A4C2 E10E                       	smpsAlterNote       $0E
0008A4C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A4C8 E108                       	smpsAlterNote       $08
0008A4CA E701                       	dc.b	smpsNoAttack, $01
0008A4CC E105                       	smpsAlterNote       $05
0008A4CE 8001                       	dc.b	nRst, $01
0008A4D0 E109                       	smpsAlterNote       $09
0008A4D2 B60A                       	dc.b	nF4, $0A
0008A4D4 E108                       	smpsAlterNote       $08
0008A4D6 B507                       	dc.b	nE4, $07
0008A4D8 E107                       	smpsAlterNote       $07
0008A4DA B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008A4DE E108                       	smpsAlterNote       $08
0008A4E0 B503                       	dc.b	nE4, $03
0008A4E2 E109                       	smpsAlterNote       $09
0008A4E4 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
0008A4EC E10B                       	smpsAlterNote       $0B
0008A4EE BA0D                       	dc.b	nA4, $0D
0008A4F0 E108                       	smpsAlterNote       $08
0008A4F2 E701                       	dc.b	smpsNoAttack, $01
0008A4F4 E104                       	smpsAlterNote       $04
0008A4F6 E701                       	dc.b	smpsNoAttack, $01
0008A4F8 E108                       	smpsAlterNote       $08
0008A4FA E701                       	dc.b	smpsNoAttack, $01
0008A4FC E10B                       	smpsAlterNote       $0B
0008A4FE E701                       	dc.b	smpsNoAttack, $01
0008A500 E10F                       	smpsAlterNote       $0F
0008A502 E701                       	dc.b	smpsNoAttack, $01
0008A504 E10B                       	smpsAlterNote       $0B
0008A506 E701                       	dc.b	smpsNoAttack, $01
0008A508 E105                       	smpsAlterNote       $05
0008A50A E701                       	dc.b	smpsNoAttack, $01
0008A50C E104                       	smpsAlterNote       $04
0008A50E E701                       	dc.b	smpsNoAttack, $01
0008A510 E108                       	smpsAlterNote       $08
0008A512 E701                       	dc.b	smpsNoAttack, $01
0008A514 E10E                       	smpsAlterNote       $0E
0008A516 E701                       	dc.b	smpsNoAttack, $01
0008A518 E10F                       	smpsAlterNote       $0F
0008A51A 8001                       	dc.b	nRst, $01
0008A51C E109                       	smpsAlterNote       $09
0008A51E C20D                       	dc.b	nF5, $0D
0008A520 E106                       	smpsAlterNote       $06
0008A522 E701                       	dc.b	smpsNoAttack, $01
0008A524 E102                       	smpsAlterNote       $02
0008A526 E701                       	dc.b	smpsNoAttack, $01
0008A528 E106                       	smpsAlterNote       $06
0008A52A E701                       	dc.b	smpsNoAttack, $01
0008A52C E109                       	smpsAlterNote       $09
0008A52E E701                       	dc.b	smpsNoAttack, $01
0008A530 E10D                       	smpsAlterNote       $0D
0008A532 E701                       	dc.b	smpsNoAttack, $01
0008A534 E109                       	smpsAlterNote       $09
0008A536 E701                       	dc.b	smpsNoAttack, $01
0008A538 E103                       	smpsAlterNote       $03
0008A53A E701                       	dc.b	smpsNoAttack, $01
0008A53C E102                       	smpsAlterNote       $02
0008A53E E701                       	dc.b	smpsNoAttack, $01
0008A540 E106                       	smpsAlterNote       $06
0008A542 E701                       	dc.b	smpsNoAttack, $01
0008A544 E10C                       	smpsAlterNote       $0C
0008A546 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A54A E109                       	smpsAlterNote       $09
0008A54C E701                       	dc.b	smpsNoAttack, $01
0008A54E E103                       	smpsAlterNote       $03
0008A550 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A554 E109                       	smpsAlterNote       $09
0008A556 E701                       	dc.b	smpsNoAttack, $01
0008A558 E10C                       	smpsAlterNote       $0C
0008A55A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A55E E106                       	smpsAlterNote       $06
0008A560 E701                       	dc.b	smpsNoAttack, $01
0008A562 E102                       	smpsAlterNote       $02
0008A564 E701                       	dc.b	smpsNoAttack, $01
0008A566 E103                       	smpsAlterNote       $03
0008A568 E701                       	dc.b	smpsNoAttack, $01
0008A56A E109                       	smpsAlterNote       $09
0008A56C E701                       	dc.b	smpsNoAttack, $01
0008A56E E10D                       	smpsAlterNote       $0D
0008A570 E701                       	dc.b	smpsNoAttack, $01
0008A572 E109                       	smpsAlterNote       $09
0008A574 E701                       	dc.b	smpsNoAttack, $01
0008A576 E106                       	smpsAlterNote       $06
0008A578 E701                       	dc.b	smpsNoAttack, $01
0008A57A E102                       	smpsAlterNote       $02
0008A57C E701                       	dc.b	smpsNoAttack, $01
0008A57E E106                       	smpsAlterNote       $06
0008A580 E701                       	dc.b	smpsNoAttack, $01
0008A582 E10C                       	smpsAlterNote       $0C
0008A584 E701                       	dc.b	smpsNoAttack, $01
0008A586 E10D                       	smpsAlterNote       $0D
0008A588 E701                       	dc.b	smpsNoAttack, $01
0008A58A E109                       	smpsAlterNote       $09
0008A58C E701                       	dc.b	smpsNoAttack, $01
0008A58E E103                       	smpsAlterNote       $03
0008A590 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A594 E106                       	smpsAlterNote       $06
0008A596 E701                       	dc.b	smpsNoAttack, $01
0008A598 E10C                       	smpsAlterNote       $0C
0008A59A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A59E E106                       	smpsAlterNote       $06
0008A5A0 E701                       	dc.b	smpsNoAttack, $01
0008A5A2 E103                       	smpsAlterNote       $03
0008A5A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5A8 E109                       	smpsAlterNote       $09
0008A5AA E701                       	dc.b	smpsNoAttack, $01
0008A5AC E10D                       	smpsAlterNote       $0D
0008A5AE E701                       	dc.b	smpsNoAttack, $01
0008A5B0 E10C                       	smpsAlterNote       $0C
0008A5B2 E701                       	dc.b	smpsNoAttack, $01
0008A5B4 E106                       	smpsAlterNote       $06
0008A5B6 E701                       	dc.b	smpsNoAttack, $01
0008A5B8 E103                       	smpsAlterNote       $03
0008A5BA 8001                       	dc.b	nRst, $01
0008A5BC E109                       	smpsAlterNote       $09
0008A5BE C206 8001                  	dc.b	nF5, $06, nRst, $01
0008A5C4 E10C                       	smpsAlterNote       $0C
0008A5C6 E601                       	smpsAlterVol        $01
0008A5C8 BB0D                       	dc.b	nBb4, $0D
0008A5CA E106                       	smpsAlterNote       $06
0008A5CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5D0 E109                       	smpsAlterNote       $09
0008A5D2 E701                       	dc.b	smpsNoAttack, $01
0008A5D4 E10F                       	smpsAlterNote       $0F
0008A5D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5DA E109                       	smpsAlterNote       $09
0008A5DC E701                       	dc.b	smpsNoAttack, $01
0008A5DE E106                       	smpsAlterNote       $06
0008A5E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5E4 E10C                       	smpsAlterNote       $0C
0008A5E6 E701                       	dc.b	smpsNoAttack, $01
0008A5E8 E110                       	smpsAlterNote       $10
0008A5EA E701                       	dc.b	smpsNoAttack, $01
0008A5EC E10F                       	smpsAlterNote       $0F
0008A5EE E701                       	dc.b	smpsNoAttack, $01
0008A5F0 E109                       	smpsAlterNote       $09
0008A5F2 E701                       	dc.b	smpsNoAttack, $01
0008A5F4 E105                       	smpsAlterNote       $05
0008A5F6 E701                       	dc.b	smpsNoAttack, $01
0008A5F8 E106                       	smpsAlterNote       $06
0008A5FA 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008A5FE E103                       	smpsAlterNote       $03
0008A600 E701                       	dc.b	smpsNoAttack, $01
0008A602 E1FF                       	smpsAlterNote       $FF
0008A604 E701                       	dc.b	smpsNoAttack, $01
0008A606 E103                       	smpsAlterNote       $03
0008A608 E701                       	dc.b	smpsNoAttack, $01
0008A60A E106                       	smpsAlterNote       $06
0008A60C E701                       	dc.b	smpsNoAttack, $01
0008A60E E10A                       	smpsAlterNote       $0A
0008A610 E701                       	dc.b	smpsNoAttack, $01
0008A612 E106                       	smpsAlterNote       $06
0008A614 E701                       	dc.b	smpsNoAttack, $01
0008A616 E100                       	smpsAlterNote       $00
0008A618 E701                       	dc.b	smpsNoAttack, $01
0008A61A E1FF                       	smpsAlterNote       $FF
0008A61C E701                       	dc.b	smpsNoAttack, $01
0008A61E E103                       	smpsAlterNote       $03
0008A620 E701                       	dc.b	smpsNoAttack, $01
0008A622 E109                       	smpsAlterNote       $09
0008A624 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A628 E106                       	smpsAlterNote       $06
0008A62A E701                       	dc.b	smpsNoAttack, $01
0008A62C E100                       	smpsAlterNote       $00
0008A62E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A632 E107                       	smpsAlterNote       $07
0008A634 BF0E                       	dc.b	nD5, $0E
0008A636 E101                       	smpsAlterNote       $01
0008A638 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A63C E107                       	smpsAlterNote       $07
0008A63E E701                       	dc.b	smpsNoAttack, $01
0008A640 E10A                       	smpsAlterNote       $0A
0008A642 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A646 E104                       	smpsAlterNote       $04
0008A648 E701                       	dc.b	smpsNoAttack, $01
0008A64A E100                       	smpsAlterNote       $00
0008A64C E701                       	dc.b	smpsNoAttack, $01
0008A64E E101                       	smpsAlterNote       $01
0008A650 E701                       	dc.b	smpsNoAttack, $01
0008A652 E107                       	smpsAlterNote       $07
0008A654 E701                       	dc.b	smpsNoAttack, $01
0008A656 E10B                       	smpsAlterNote       $0B
0008A658 E701                       	dc.b	smpsNoAttack, $01
0008A65A E107                       	smpsAlterNote       $07
0008A65C E701                       	dc.b	smpsNoAttack, $01
0008A65E E104                       	smpsAlterNote       $04
0008A660 E701                       	dc.b	smpsNoAttack, $01
0008A662 E100                       	smpsAlterNote       $00
0008A664 E701                       	dc.b	smpsNoAttack, $01
0008A666 E101                       	smpsAlterNote       $01
0008A668 8001                       	dc.b	nRst, $01
0008A66A E108                       	smpsAlterNote       $08
0008A66C C10C                       	dc.b	nE5, $0C
0008A66E E109                       	smpsAlterNote       $09
0008A670 C201 8001                  	dc.b	nF5, $01, nRst, $01
0008A674 E10A                       	smpsAlterNote       $0A
0008A676 8001                       	dc.b	nRst, $01
0008A678 E109                       	smpsAlterNote       $09
0008A67A C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008A67E E106                       	smpsAlterNote       $06
0008A680 E701                       	dc.b	smpsNoAttack, $01
0008A682 E102                       	smpsAlterNote       $02
0008A684 E701                       	dc.b	smpsNoAttack, $01
0008A686 E103                       	smpsAlterNote       $03
0008A688 E701                       	dc.b	smpsNoAttack, $01
0008A68A E109                       	smpsAlterNote       $09
0008A68C E701                       	dc.b	smpsNoAttack, $01
0008A68E E10D                       	smpsAlterNote       $0D
0008A690 E701                       	dc.b	smpsNoAttack, $01
0008A692 E109                       	smpsAlterNote       $09
0008A694 E701                       	dc.b	smpsNoAttack, $01
0008A696 E106                       	smpsAlterNote       $06
0008A698 E701                       	dc.b	smpsNoAttack, $01
0008A69A E102                       	smpsAlterNote       $02
0008A69C E701                       	dc.b	smpsNoAttack, $01
0008A69E E106                       	smpsAlterNote       $06
0008A6A0 E701                       	dc.b	smpsNoAttack, $01
0008A6A2 E10C                       	smpsAlterNote       $0C
0008A6A4 E701                       	dc.b	smpsNoAttack, $01
0008A6A6 E10D                       	smpsAlterNote       $0D
0008A6A8 E701                       	dc.b	smpsNoAttack, $01
0008A6AA E109                       	smpsAlterNote       $09
0008A6AC C40D                       	dc.b	nG5, $0D
0008A6AE E106                       	smpsAlterNote       $06
0008A6B0 E701                       	dc.b	smpsNoAttack, $01
0008A6B2 E102                       	smpsAlterNote       $02
0008A6B4 E701                       	dc.b	smpsNoAttack, $01
0008A6B6 E103                       	smpsAlterNote       $03
0008A6B8 E701                       	dc.b	smpsNoAttack, $01
0008A6BA E109                       	smpsAlterNote       $09
0008A6BC E701                       	dc.b	smpsNoAttack, $01
0008A6BE E108                       	smpsAlterNote       $08
0008A6C0 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
0008A6CC E109                       	smpsAlterNote       $09
0008A6CE C20D                       	dc.b	nF5, $0D
0008A6D0 E106                       	smpsAlterNote       $06
0008A6D2 E701                       	dc.b	smpsNoAttack, $01
0008A6D4 E102                       	smpsAlterNote       $02
0008A6D6 E701                       	dc.b	smpsNoAttack, $01
0008A6D8 E106                       	smpsAlterNote       $06
0008A6DA E701                       	dc.b	smpsNoAttack, $01
0008A6DC E109                       	smpsAlterNote       $09
0008A6DE E701                       	dc.b	smpsNoAttack, $01
0008A6E0 E10D                       	smpsAlterNote       $0D
0008A6E2 E701                       	dc.b	smpsNoAttack, $01
0008A6E4 E109                       	smpsAlterNote       $09
0008A6E6 E701                       	dc.b	smpsNoAttack, $01
0008A6E8 E103                       	smpsAlterNote       $03
0008A6EA E701                       	dc.b	smpsNoAttack, $01
0008A6EC E102                       	smpsAlterNote       $02
0008A6EE E701                       	dc.b	smpsNoAttack, $01
0008A6F0 E106                       	smpsAlterNote       $06
0008A6F2 E701                       	dc.b	smpsNoAttack, $01
0008A6F4 E10C                       	smpsAlterNote       $0C
0008A6F6 E701                       	dc.b	smpsNoAttack, $01
0008A6F8 E10D                       	smpsAlterNote       $0D
0008A6FA 8001                       	dc.b	nRst, $01
0008A6FC E112                       	smpsAlterNote       $12
0008A6FE C401                       	dc.b	nG5, $01
0008A700 E1EB                       	smpsAlterNote       $EB
0008A702 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008A705 E1FD                       	smpsAlterNote       $FD
0008A707 E701                       	dc.b	smpsNoAttack, $01
0008A709 E10F                       	smpsAlterNote       $0F
0008A70B E701                       	dc.b	smpsNoAttack, $01
0008A70D E118                       	smpsAlterNote       $18
0008A70F E701                       	dc.b	smpsNoAttack, $01
0008A711 E1ED                       	smpsAlterNote       $ED
0008A713 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008A716 E1FF                       	smpsAlterNote       $FF
0008A718 E701                       	dc.b	smpsNoAttack, $01
0008A71A E10B                       	smpsAlterNote       $0B
0008A71C E703                       	dc.b	smpsNoAttack, $03
0008A71E E109                       	smpsAlterNote       $09
0008A720 C407                       	dc.b	nG5, $07
0008A722 E108                       	smpsAlterNote       $08
0008A724 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
0008A730 E109                       	smpsAlterNote       $09
0008A732 C20D                       	dc.b	nF5, $0D
0008A734 E103                       	smpsAlterNote       $03
0008A736 E701                       	dc.b	smpsNoAttack, $01
0008A738 E102                       	smpsAlterNote       $02
0008A73A E701                       	dc.b	smpsNoAttack, $01
0008A73C E106                       	smpsAlterNote       $06
0008A73E E701                       	dc.b	smpsNoAttack, $01
0008A740 E10C                       	smpsAlterNote       $0C
0008A742 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A746 E109                       	smpsAlterNote       $09
0008A748 E701                       	dc.b	smpsNoAttack, $01
0008A74A E103                       	smpsAlterNote       $03
0008A74C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A750 E109                       	smpsAlterNote       $09
0008A752 E701                       	dc.b	smpsNoAttack, $01
0008A754 E10C                       	smpsAlterNote       $0C
0008A756 E701                       	dc.b	smpsNoAttack, $01
0008A758 E10D                       	smpsAlterNote       $0D
0008A75A 8001                       	dc.b	nRst, $01
0008A75C E10B                       	smpsAlterNote       $0B
0008A75E C609 8001                  	dc.b	nA5, $09, nRst, $01
0008A762 E109                       	smpsAlterNote       $09
0008A764 B806 8001                  	dc.b	nG4, $06, nRst, $01
0008A768 E108                       	smpsAlterNote       $08
0008A76A C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008A776 8001                       	dc.b	nRst, $01
0008A778 E109                       	smpsAlterNote       $09
0008A77A C20D                       	dc.b	nF5, $0D
0008A77C E103                       	smpsAlterNote       $03
0008A77E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A782 E106                       	smpsAlterNote       $06
0008A784 E701                       	dc.b	smpsNoAttack, $01
0008A786 E10C                       	smpsAlterNote       $0C
0008A788 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A78C E106                       	smpsAlterNote       $06
0008A78E E701                       	dc.b	smpsNoAttack, $01
0008A790 E103                       	smpsAlterNote       $03
0008A792 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A796 E109                       	smpsAlterNote       $09
0008A798 E701                       	dc.b	smpsNoAttack, $01
0008A79A E10D                       	smpsAlterNote       $0D
0008A79C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A7A2 E108                       	smpsAlterNote       $08
0008A7A4 E6FF                       	smpsAlterVol        $FF
0008A7A6 A806                       	dc.b	nEb3, $06
0008A7A8 E10C                       	smpsAlterNote       $0C
0008A7AA A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008A7AE E108                       	smpsAlterNote       $08
0008A7B0 A803                       	dc.b	nEb3, $03
0008A7B2 E109                       	smpsAlterNote       $09
0008A7B4 AC03 8001                  	dc.b	nG3, $03, nRst, $01
0008A7B8 E10C                       	smpsAlterNote       $0C
0008A7BA AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
0008A7C4 E109                       	smpsAlterNote       $09
0008A7C6 E602                       	smpsAlterVol        $02
0008A7C8 B604                       	dc.b	nF4, $04
0008A7CA E602                       	smpsAlterVol        $02
0008A7CC F6F1 AA                    	smpsJump            music84_Jump02
0008A7CF                            
0008A7CF                            ; FM4 Data
0008A7CF                            music84_FM4:
0008A7D1 E040                       	smpsPan             panRight, $00
0008A7D3 8003                       	dc.b	nRst, $03
0008A7D5 E10F                       	smpsAlterNote       $0F
0008A7D7 C603 8008                  	dc.b	nA5, $03, nRst, $08
0008A7DB E10D                       	smpsAlterNote       $0D
0008A7DD C403 800A                  	dc.b	nG5, $03, nRst, $0A
0008A7E1 E10C                       	smpsAlterNote       $0C
0008A7E3 C103 8004                  	dc.b	nE5, $03, nRst, $04
0008A7E9 E6FE                       	smpsAlterVol        $FE
0008A7EB E110                       	smpsAlterNote       $10
0008A7ED C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008A7F1 E10F                       	smpsAlterNote       $0F
0008A7F3 C602 8001                  	dc.b	nA5, $02, nRst, $01
0008A7F7 E10D                       	smpsAlterNote       $0D
0008A7F9 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
0008A802 E10C                       	smpsAlterNote       $0C
0008A804 C103                       	dc.b	nE5, $03
0008A806 E10A                       	smpsAlterNote       $0A
0008A808 BD03 8001                  	dc.b	nC5, $03, nRst, $01
0008A80E 03                         	dc.b	$03
0008A80F                            
0008A80F                            music84_Jump01:
0008A80F E10B                       	smpsAlterNote       $0B
0008A811 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008A815 E10C                       	smpsAlterNote       $0C
0008A817 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008A81B E10D                       	smpsAlterNote       $0D
0008A81D C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008A827 E10B                       	smpsAlterNote       $0B
0008A829 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008A82D E107                       	smpsAlterNote       $07
0008A82F E701                       	dc.b	smpsNoAttack, $01
0008A831 E103                       	smpsAlterNote       $03
0008A833 E701                       	dc.b	smpsNoAttack, $01
0008A835 E104                       	smpsAlterNote       $04
0008A837 E701                       	dc.b	smpsNoAttack, $01
0008A839 E10A                       	smpsAlterNote       $0A
0008A83B E701                       	dc.b	smpsNoAttack, $01
0008A83D E10E                       	smpsAlterNote       $0E
0008A83F E701                       	dc.b	smpsNoAttack, $01
0008A841 E10A                       	smpsAlterNote       $0A
0008A843 E701                       	dc.b	smpsNoAttack, $01
0008A845 E107                       	smpsAlterNote       $07
0008A847 E701                       	dc.b	smpsNoAttack, $01
0008A849 E104                       	smpsAlterNote       $04
0008A84B 8001                       	dc.b	nRst, $01
0008A84D E110                       	smpsAlterNote       $10
0008A84F C703                       	dc.b	nBb5, $03
0008A851 E10F                       	smpsAlterNote       $0F
0008A853 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008A857 E10D                       	smpsAlterNote       $0D
0008A859 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
0008A85F E10C                       	smpsAlterNote       $0C
0008A861 E701                       	dc.b	smpsNoAttack, $01
0008A863 E108                       	smpsAlterNote       $08
0008A865 E701                       	dc.b	smpsNoAttack, $01
0008A867 E10C                       	smpsAlterNote       $0C
0008A869 E701                       	dc.b	smpsNoAttack, $01
0008A86B E10F                       	smpsAlterNote       $0F
0008A86D E701                       	dc.b	smpsNoAttack, $01
0008A86F E113                       	smpsAlterNote       $13
0008A871 E701                       	dc.b	smpsNoAttack, $01
0008A873 E10F                       	smpsAlterNote       $0F
0008A875 E701                       	dc.b	smpsNoAttack, $01
0008A877 E109                       	smpsAlterNote       $09
0008A879 E701                       	dc.b	smpsNoAttack, $01
0008A87B E108                       	smpsAlterNote       $08
0008A87D E701                       	dc.b	smpsNoAttack, $01
0008A87F E10C                       	smpsAlterNote       $0C
0008A881 E701                       	dc.b	smpsNoAttack, $01
0008A883 E112                       	smpsAlterNote       $12
0008A885 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A889 E10C                       	smpsAlterNote       $0C
0008A88B E701                       	dc.b	smpsNoAttack, $01
0008A88D E109                       	smpsAlterNote       $09
0008A88F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A893 E10F                       	smpsAlterNote       $0F
0008A895 E701                       	dc.b	smpsNoAttack, $01
0008A897 E113                       	smpsAlterNote       $13
0008A899 E701                       	dc.b	smpsNoAttack, $01
0008A89B E112                       	smpsAlterNote       $12
0008A89D E701                       	dc.b	smpsNoAttack, $01
0008A89F E10C                       	smpsAlterNote       $0C
0008A8A1 E701                       	dc.b	smpsNoAttack, $01
0008A8A3 E108                       	smpsAlterNote       $08
0008A8A5 E701                       	dc.b	smpsNoAttack, $01
0008A8A7 E10C                       	smpsAlterNote       $0C
0008A8A9 E701                       	dc.b	smpsNoAttack, $01
0008A8AB E10F                       	smpsAlterNote       $0F
0008A8AD E701                       	dc.b	smpsNoAttack, $01
0008A8AF E113                       	smpsAlterNote       $13
0008A8B1 E701                       	dc.b	smpsNoAttack, $01
0008A8B3 E10F                       	smpsAlterNote       $0F
0008A8B5 E701                       	dc.b	smpsNoAttack, $01
0008A8B7 E109                       	smpsAlterNote       $09
0008A8B9 E701                       	dc.b	smpsNoAttack, $01
0008A8BB E108                       	smpsAlterNote       $08
0008A8BD E701                       	dc.b	smpsNoAttack, $01
0008A8BF E10C                       	smpsAlterNote       $0C
0008A8C1 E701                       	dc.b	smpsNoAttack, $01
0008A8C3 E112                       	smpsAlterNote       $12
0008A8C5 E701                       	dc.b	smpsNoAttack, $01
0008A8C7 E113                       	smpsAlterNote       $13
0008A8C9 800F                       	dc.b	nRst, $0F
0008A8CB E10B                       	smpsAlterNote       $0B
0008A8CD BF03                       	dc.b	nD5, $03
0008A8CF E10C                       	smpsAlterNote       $0C
0008A8D1 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008A8D5 E10D                       	smpsAlterNote       $0D
0008A8D7 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
0008A8DF E10B                       	smpsAlterNote       $0B
0008A8E1 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
0008A8EB E110                       	smpsAlterNote       $10
0008A8ED C704                       	dc.b	nBb5, $04
0008A8EF E10F                       	smpsAlterNote       $0F
0008A8F1 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008A8F5 E10D                       	smpsAlterNote       $0D
0008A8F7 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008A8FD E109                       	smpsAlterNote       $09
0008A8FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A903 E10F                       	smpsAlterNote       $0F
0008A905 E701                       	dc.b	smpsNoAttack, $01
0008A907 E112                       	smpsAlterNote       $12
0008A909 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A90D E10C                       	smpsAlterNote       $0C
0008A90F E701                       	dc.b	smpsNoAttack, $01
0008A911 E108                       	smpsAlterNote       $08
0008A913 E701                       	dc.b	smpsNoAttack, $01
0008A915 E109                       	smpsAlterNote       $09
0008A917 E701                       	dc.b	smpsNoAttack, $01
0008A919 E10F                       	smpsAlterNote       $0F
0008A91B E701                       	dc.b	smpsNoAttack, $01
0008A91D E113                       	smpsAlterNote       $13
0008A91F E701                       	dc.b	smpsNoAttack, $01
0008A921 E10F                       	smpsAlterNote       $0F
0008A923 E701                       	dc.b	smpsNoAttack, $01
0008A925 E10C                       	smpsAlterNote       $0C
0008A927 E701                       	dc.b	smpsNoAttack, $01
0008A929 E108                       	smpsAlterNote       $08
0008A92B E701                       	dc.b	smpsNoAttack, $01
0008A92D E10C                       	smpsAlterNote       $0C
0008A92F E701                       	dc.b	smpsNoAttack, $01
0008A931 E112                       	smpsAlterNote       $12
0008A933 E701                       	dc.b	smpsNoAttack, $01
0008A935 E113                       	smpsAlterNote       $13
0008A937 E701                       	dc.b	smpsNoAttack, $01
0008A939 E10F                       	smpsAlterNote       $0F
0008A93B E701                       	dc.b	smpsNoAttack, $01
0008A93D E109                       	smpsAlterNote       $09
0008A93F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A943 E10C                       	smpsAlterNote       $0C
0008A945 E701                       	dc.b	smpsNoAttack, $01
0008A947 E112                       	smpsAlterNote       $12
0008A949 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A94D E10C                       	smpsAlterNote       $0C
0008A94F E701                       	dc.b	smpsNoAttack, $01
0008A951 E109                       	smpsAlterNote       $09
0008A953 E701                       	dc.b	smpsNoAttack, $01
0008A955 E10D                       	smpsAlterNote       $0D
0008A957 C401 8001                  	dc.b	nG5, $01, nRst, $01
0008A95B E10F                       	smpsAlterNote       $0F
0008A95D C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
0008A967 E10D                       	smpsAlterNote       $0D
0008A969 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008A96F E10B                       	smpsAlterNote       $0B
0008A971 BF0D                       	dc.b	nD5, $0D
0008A973 E108                       	smpsAlterNote       $08
0008A975 E701                       	dc.b	smpsNoAttack, $01
0008A977 E104                       	smpsAlterNote       $04
0008A979 E701                       	dc.b	smpsNoAttack, $01
0008A97B E108                       	smpsAlterNote       $08
0008A97D E701                       	dc.b	smpsNoAttack, $01
0008A97F E10B                       	smpsAlterNote       $0B
0008A981 E701                       	dc.b	smpsNoAttack, $01
0008A983 E10F                       	smpsAlterNote       $0F
0008A985 E701                       	dc.b	smpsNoAttack, $01
0008A987 E10B                       	smpsAlterNote       $0B
0008A989 E701                       	dc.b	smpsNoAttack, $01
0008A98B E105                       	smpsAlterNote       $05
0008A98D E701                       	dc.b	smpsNoAttack, $01
0008A98F E104                       	smpsAlterNote       $04
0008A991 E701                       	dc.b	smpsNoAttack, $01
0008A993 E108                       	smpsAlterNote       $08
0008A995 E701                       	dc.b	smpsNoAttack, $01
0008A997 E10E                       	smpsAlterNote       $0E
0008A999 E701                       	dc.b	smpsNoAttack, $01
0008A99B E10F                       	smpsAlterNote       $0F
0008A99D 8001                       	dc.b	nRst, $01
0008A99F E10C                       	smpsAlterNote       $0C
0008A9A1 C101                       	dc.b	nE5, $01
0008A9A3 E10D                       	smpsAlterNote       $0D
0008A9A5 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
0008A9AB E10F                       	smpsAlterNote       $0F
0008A9AD C606 8001                  	dc.b	nA5, $06, nRst, $01
0008A9B1 E10C                       	smpsAlterNote       $0C
0008A9B3 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008A9B7 E10D                       	smpsAlterNote       $0D
0008A9B9 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008A9BD E10C                       	smpsAlterNote       $0C
0008A9BF CD03                       	dc.b	nE6, $03
0008A9C1 E10A                       	smpsAlterNote       $0A
0008A9C3 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008A9C7 E10D                       	smpsAlterNote       $0D
0008A9C9 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
0008A9D1 E109                       	smpsAlterNote       $09
0008A9D3 E701                       	dc.b	smpsNoAttack, $01
0008A9D5 E10D                       	smpsAlterNote       $0D
0008A9D7 E701                       	dc.b	smpsNoAttack, $01
0008A9D9 E110                       	smpsAlterNote       $10
0008A9DB E701                       	dc.b	smpsNoAttack, $01
0008A9DD E114                       	smpsAlterNote       $14
0008A9DF E701                       	dc.b	smpsNoAttack, $01
0008A9E1 E110                       	smpsAlterNote       $10
0008A9E3 E701                       	dc.b	smpsNoAttack, $01
0008A9E5 E10A                       	smpsAlterNote       $0A
0008A9E7 E701                       	dc.b	smpsNoAttack, $01
0008A9E9 E109                       	smpsAlterNote       $09
0008A9EB E701                       	dc.b	smpsNoAttack, $01
0008A9ED E10D                       	smpsAlterNote       $0D
0008A9EF E701                       	dc.b	smpsNoAttack, $01
0008A9F1 E113                       	smpsAlterNote       $13
0008A9F3 E701                       	dc.b	smpsNoAttack, $01
0008A9F5 E114                       	smpsAlterNote       $14
0008A9F7 8001                       	dc.b	nRst, $01
0008A9F9 E10F                       	smpsAlterNote       $0F
0008A9FB C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008AA01 E10C                       	smpsAlterNote       $0C
0008AA03 E701                       	dc.b	smpsNoAttack, $01
0008AA05 E108                       	smpsAlterNote       $08
0008AA07 E701                       	dc.b	smpsNoAttack, $01
0008AA09 E10C                       	smpsAlterNote       $0C
0008AA0B E701                       	dc.b	smpsNoAttack, $01
0008AA0D E112                       	smpsAlterNote       $12
0008AA0F E701                       	dc.b	smpsNoAttack, $01
0008AA11 E113                       	smpsAlterNote       $13
0008AA13 E701                       	dc.b	smpsNoAttack, $01
0008AA15 E10F                       	smpsAlterNote       $0F
0008AA17 E701                       	dc.b	smpsNoAttack, $01
0008AA19 E109                       	smpsAlterNote       $09
0008AA1B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA1F E10C                       	smpsAlterNote       $0C
0008AA21 E701                       	dc.b	smpsNoAttack, $01
0008AA23 E112                       	smpsAlterNote       $12
0008AA25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA29 E10C                       	smpsAlterNote       $0C
0008AA2B E701                       	dc.b	smpsNoAttack, $01
0008AA2D E109                       	smpsAlterNote       $09
0008AA2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA33 E10F                       	smpsAlterNote       $0F
0008AA35 E701                       	dc.b	smpsNoAttack, $01
0008AA37 E113                       	smpsAlterNote       $13
0008AA39 E701                       	dc.b	smpsNoAttack, $01
0008AA3B E112                       	smpsAlterNote       $12
0008AA3D E701                       	dc.b	smpsNoAttack, $01
0008AA3F E10C                       	smpsAlterNote       $0C
0008AA41 E701                       	dc.b	smpsNoAttack, $01
0008AA43 E108                       	smpsAlterNote       $08
0008AA45 E701                       	dc.b	smpsNoAttack, $01
0008AA47 E10C                       	smpsAlterNote       $0C
0008AA49 E701                       	dc.b	smpsNoAttack, $01
0008AA4B E10F                       	smpsAlterNote       $0F
0008AA4D E701                       	dc.b	smpsNoAttack, $01
0008AA4F E113                       	smpsAlterNote       $13
0008AA51 E701                       	dc.b	smpsNoAttack, $01
0008AA53 E10F                       	smpsAlterNote       $0F
0008AA55 E701                       	dc.b	smpsNoAttack, $01
0008AA57 E109                       	smpsAlterNote       $09
0008AA59 E701                       	dc.b	smpsNoAttack, $01
0008AA5B E108                       	smpsAlterNote       $08
0008AA5D E701                       	dc.b	smpsNoAttack, $01
0008AA5F E10C                       	smpsAlterNote       $0C
0008AA61 E701                       	dc.b	smpsNoAttack, $01
0008AA63 E112                       	smpsAlterNote       $12
0008AA65 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA69 E10F                       	smpsAlterNote       $0F
0008AA6B E701                       	dc.b	smpsNoAttack, $01
0008AA6D E109                       	smpsAlterNote       $09
0008AA6F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA73 E10F                       	smpsAlterNote       $0F
0008AA75 E701                       	dc.b	smpsNoAttack, $01
0008AA77 E113                       	smpsAlterNote       $13
0008AA79 E701                       	dc.b	smpsNoAttack, $01
0008AA7B E112                       	smpsAlterNote       $12
0008AA7D E701                       	dc.b	smpsNoAttack, $01
0008AA7F E10C                       	smpsAlterNote       $0C
0008AA81 E701                       	dc.b	smpsNoAttack, $01
0008AA83 E108                       	smpsAlterNote       $08
0008AA85 E701                       	dc.b	smpsNoAttack, $01
0008AA87 E10C                       	smpsAlterNote       $0C
0008AA89 E701                       	dc.b	smpsNoAttack, $01
0008AA8B E10F                       	smpsAlterNote       $0F
0008AA8D E701                       	dc.b	smpsNoAttack, $01
0008AA8F E113                       	smpsAlterNote       $13
0008AA91 E701                       	dc.b	smpsNoAttack, $01
0008AA93 E10F                       	smpsAlterNote       $0F
0008AA95 E701                       	dc.b	smpsNoAttack, $01
0008AA97 E109                       	smpsAlterNote       $09
0008AA99 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008AA9D E10F                       	smpsAlterNote       $0F
0008AA9F C60D                       	dc.b	nA5, $0D
0008AAA1 E109                       	smpsAlterNote       $09
0008AAA3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AAA7 E10C                       	smpsAlterNote       $0C
0008AAA9 E701                       	dc.b	smpsNoAttack, $01
0008AAAB E112                       	smpsAlterNote       $12
0008AAAD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AAB1 E10C                       	smpsAlterNote       $0C
0008AAB3 E701                       	dc.b	smpsNoAttack, $01
0008AAB5 E109                       	smpsAlterNote       $09
0008AAB7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AABB E10F                       	smpsAlterNote       $0F
0008AABD E701                       	dc.b	smpsNoAttack, $01
0008AABF E113                       	smpsAlterNote       $13
0008AAC1 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008AAC7 E10D                       	smpsAlterNote       $0D
0008AAC9 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
0008AAD1 E10C                       	smpsAlterNote       $0C
0008AAD3 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008AAD9 E6FF                       	smpsAlterVol        $FF
0008AADB E10B                       	smpsAlterNote       $0B
0008AADD BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008AAE1 E10C                       	smpsAlterNote       $0C
0008AAE3 C103                       	dc.b	nE5, $03
0008AAE5 E10D                       	smpsAlterNote       $0D
0008AAE7 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008AAF1 E10B                       	smpsAlterNote       $0B
0008AAF3 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008AAF7 E107                       	smpsAlterNote       $07
0008AAF9 E701                       	dc.b	smpsNoAttack, $01
0008AAFB E104                       	smpsAlterNote       $04
0008AAFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB01 E10A                       	smpsAlterNote       $0A
0008AB03 E701                       	dc.b	smpsNoAttack, $01
0008AB05 E10D                       	smpsAlterNote       $0D
0008AB07 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB0B E107                       	smpsAlterNote       $07
0008AB0D E701                       	dc.b	smpsNoAttack, $01
0008AB0F E104                       	smpsAlterNote       $04
0008AB11 8001                       	dc.b	nRst, $01
0008AB13 E110                       	smpsAlterNote       $10
0008AB15 C703                       	dc.b	nBb5, $03
0008AB17 E10F                       	smpsAlterNote       $0F
0008AB19 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008AB1D E10D                       	smpsAlterNote       $0D
0008AB1F C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008AB23 E10C                       	smpsAlterNote       $0C
0008AB25 E701                       	dc.b	smpsNoAttack, $01
0008AB27 E108                       	smpsAlterNote       $08
0008AB29 E701                       	dc.b	smpsNoAttack, $01
0008AB2B E109                       	smpsAlterNote       $09
0008AB2D E701                       	dc.b	smpsNoAttack, $01
0008AB2F E10F                       	smpsAlterNote       $0F
0008AB31 E701                       	dc.b	smpsNoAttack, $01
0008AB33 E113                       	smpsAlterNote       $13
0008AB35 E701                       	dc.b	smpsNoAttack, $01
0008AB37 E10F                       	smpsAlterNote       $0F
0008AB39 E701                       	dc.b	smpsNoAttack, $01
0008AB3B E10C                       	smpsAlterNote       $0C
0008AB3D E701                       	dc.b	smpsNoAttack, $01
0008AB3F E108                       	smpsAlterNote       $08
0008AB41 E701                       	dc.b	smpsNoAttack, $01
0008AB43 E10C                       	smpsAlterNote       $0C
0008AB45 E701                       	dc.b	smpsNoAttack, $01
0008AB47 E112                       	smpsAlterNote       $12
0008AB49 E701                       	dc.b	smpsNoAttack, $01
0008AB4B E113                       	smpsAlterNote       $13
0008AB4D E701                       	dc.b	smpsNoAttack, $01
0008AB4F E10F                       	smpsAlterNote       $0F
0008AB51 E701                       	dc.b	smpsNoAttack, $01
0008AB53 E109                       	smpsAlterNote       $09
0008AB55 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB59 E10C                       	smpsAlterNote       $0C
0008AB5B E701                       	dc.b	smpsNoAttack, $01
0008AB5D E112                       	smpsAlterNote       $12
0008AB5F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB63 E10C                       	smpsAlterNote       $0C
0008AB65 E701                       	dc.b	smpsNoAttack, $01
0008AB67 E109                       	smpsAlterNote       $09
0008AB69 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB6D E10F                       	smpsAlterNote       $0F
0008AB6F E701                       	dc.b	smpsNoAttack, $01
0008AB71 E113                       	smpsAlterNote       $13
0008AB73 E701                       	dc.b	smpsNoAttack, $01
0008AB75 E112                       	smpsAlterNote       $12
0008AB77 E701                       	dc.b	smpsNoAttack, $01
0008AB79 E10C                       	smpsAlterNote       $0C
0008AB7B E701                       	dc.b	smpsNoAttack, $01
0008AB7D E108                       	smpsAlterNote       $08
0008AB7F E701                       	dc.b	smpsNoAttack, $01
0008AB81 E10C                       	smpsAlterNote       $0C
0008AB83 E701                       	dc.b	smpsNoAttack, $01
0008AB85 E10F                       	smpsAlterNote       $0F
0008AB87 E701                       	dc.b	smpsNoAttack, $01
0008AB89 E113                       	smpsAlterNote       $13
0008AB8B E701                       	dc.b	smpsNoAttack, $01
0008AB8D E10F                       	smpsAlterNote       $0F
0008AB8F BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008AB93 E110                       	smpsAlterNote       $10
0008AB95 BB03                       	dc.b	nBb4, $03
0008AB97 E10F                       	smpsAlterNote       $0F
0008AB99 BA06 8001                  	dc.b	nA4, $06, nRst, $01
0008AB9D E10B                       	smpsAlterNote       $0B
0008AB9F BF03                       	dc.b	nD5, $03
0008ABA1 E10C                       	smpsAlterNote       $0C
0008ABA3 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008ABA7 E10D                       	smpsAlterNote       $0D
0008ABA9 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008ABB3 E10B                       	smpsAlterNote       $0B
0008ABB5 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008ABC1 E110                       	smpsAlterNote       $10
0008ABC3 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008ABC7 E10F                       	smpsAlterNote       $0F
0008ABC9 C604                       	dc.b	nA5, $04
0008ABCB E10D                       	smpsAlterNote       $0D
0008ABCD C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008ABD3 E109                       	smpsAlterNote       $09
0008ABD5 E701                       	dc.b	smpsNoAttack, $01
0008ABD7 E108                       	smpsAlterNote       $08
0008ABD9 E701                       	dc.b	smpsNoAttack, $01
0008ABDB E10C                       	smpsAlterNote       $0C
0008ABDD E701                       	dc.b	smpsNoAttack, $01
0008ABDF E112                       	smpsAlterNote       $12
0008ABE1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABE5 E10F                       	smpsAlterNote       $0F
0008ABE7 E701                       	dc.b	smpsNoAttack, $01
0008ABE9 E109                       	smpsAlterNote       $09
0008ABEB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABEF E10F                       	smpsAlterNote       $0F
0008ABF1 E701                       	dc.b	smpsNoAttack, $01
0008ABF3 E112                       	smpsAlterNote       $12
0008ABF5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABF9 E10C                       	smpsAlterNote       $0C
0008ABFB E701                       	dc.b	smpsNoAttack, $01
0008ABFD E108                       	smpsAlterNote       $08
0008ABFF E701                       	dc.b	smpsNoAttack, $01
0008AC01 E109                       	smpsAlterNote       $09
0008AC03 E701                       	dc.b	smpsNoAttack, $01
0008AC05 E10F                       	smpsAlterNote       $0F
0008AC07 E701                       	dc.b	smpsNoAttack, $01
0008AC09 E113                       	smpsAlterNote       $13
0008AC0B E701                       	dc.b	smpsNoAttack, $01
0008AC0D E10F                       	smpsAlterNote       $0F
0008AC0F E701                       	dc.b	smpsNoAttack, $01
0008AC11 E10C                       	smpsAlterNote       $0C
0008AC13 E701                       	dc.b	smpsNoAttack, $01
0008AC15 E108                       	smpsAlterNote       $08
0008AC17 E701                       	dc.b	smpsNoAttack, $01
0008AC19 E10C                       	smpsAlterNote       $0C
0008AC1B E701                       	dc.b	smpsNoAttack, $01
0008AC1D E112                       	smpsAlterNote       $12
0008AC1F E701                       	dc.b	smpsNoAttack, $01
0008AC21 E113                       	smpsAlterNote       $13
0008AC23 E701                       	dc.b	smpsNoAttack, $01
0008AC25 E10F                       	smpsAlterNote       $0F
0008AC27 E701                       	dc.b	smpsNoAttack, $01
0008AC29 E109                       	smpsAlterNote       $09
0008AC2B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC2F E10C                       	smpsAlterNote       $0C
0008AC31 E701                       	dc.b	smpsNoAttack, $01
0008AC33 E112                       	smpsAlterNote       $12
0008AC35 E701                       	dc.b	smpsNoAttack, $01
0008AC37 E113                       	smpsAlterNote       $13
0008AC39 8001                       	dc.b	nRst, $01
0008AC3B E10F                       	smpsAlterNote       $0F
0008AC3D C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
0008AC49 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
0008AC51 E10D                       	smpsAlterNote       $0D
0008AC53 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008AC59 E10B                       	smpsAlterNote       $0B
0008AC5B BF0D                       	dc.b	nD5, $0D
0008AC5D E108                       	smpsAlterNote       $08
0008AC5F E701                       	dc.b	smpsNoAttack, $01
0008AC61 E104                       	smpsAlterNote       $04
0008AC63 E701                       	dc.b	smpsNoAttack, $01
0008AC65 E105                       	smpsAlterNote       $05
0008AC67 E701                       	dc.b	smpsNoAttack, $01
0008AC69 E10B                       	smpsAlterNote       $0B
0008AC6B E701                       	dc.b	smpsNoAttack, $01
0008AC6D E10F                       	smpsAlterNote       $0F
0008AC6F E701                       	dc.b	smpsNoAttack, $01
0008AC71 E10B                       	smpsAlterNote       $0B
0008AC73 E701                       	dc.b	smpsNoAttack, $01
0008AC75 E108                       	smpsAlterNote       $08
0008AC77 E701                       	dc.b	smpsNoAttack, $01
0008AC79 E104                       	smpsAlterNote       $04
0008AC7B E701                       	dc.b	smpsNoAttack, $01
0008AC7D E108                       	smpsAlterNote       $08
0008AC7F E701                       	dc.b	smpsNoAttack, $01
0008AC81 E10E                       	smpsAlterNote       $0E
0008AC83 E701                       	dc.b	smpsNoAttack, $01
0008AC85 E10F                       	smpsAlterNote       $0F
0008AC87 E701                       	dc.b	smpsNoAttack, $01
0008AC89 E10C                       	smpsAlterNote       $0C
0008AC8B C101                       	dc.b	nE5, $01
0008AC8D E10D                       	smpsAlterNote       $0D
0008AC8F C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008AC97 E10F                       	smpsAlterNote       $0F
0008AC99 C607                       	dc.b	nA5, $07
0008AC9B E10C                       	smpsAlterNote       $0C
0008AC9D CD07                       	dc.b	nE6, $07
0008AC9F E10D                       	smpsAlterNote       $0D
0008ACA1 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008ACA5 E10C                       	smpsAlterNote       $0C
0008ACA7 CD03                       	dc.b	nE6, $03
0008ACA9 E10A                       	smpsAlterNote       $0A
0008ACAB C903 8001                  	dc.b	nC6, $03, nRst, $01
0008ACAF E10D                       	smpsAlterNote       $0D
0008ACB1 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008ACB7 E10A                       	smpsAlterNote       $0A
0008ACB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ACBD E110                       	smpsAlterNote       $10
0008ACBF E701                       	dc.b	smpsNoAttack, $01
0008ACC1 E114                       	smpsAlterNote       $14
0008ACC3 E701                       	dc.b	smpsNoAttack, $01
0008ACC5 E113                       	smpsAlterNote       $13
0008ACC7 E701                       	dc.b	smpsNoAttack, $01
0008ACC9 E10D                       	smpsAlterNote       $0D
0008ACCB E701                       	dc.b	smpsNoAttack, $01
0008ACCD E109                       	smpsAlterNote       $09
0008ACCF E701                       	dc.b	smpsNoAttack, $01
0008ACD1 E10D                       	smpsAlterNote       $0D
0008ACD3 E701                       	dc.b	smpsNoAttack, $01
0008ACD5 E110                       	smpsAlterNote       $10
0008ACD7 E701                       	dc.b	smpsNoAttack, $01
0008ACD9 E114                       	smpsAlterNote       $14
0008ACDB E701                       	dc.b	smpsNoAttack, $01
0008ACDD E10F                       	smpsAlterNote       $0F
0008ACDF C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
0008ACE3 E10C                       	smpsAlterNote       $0C
0008ACE5 E701                       	dc.b	smpsNoAttack, $01
0008ACE7 E108                       	smpsAlterNote       $08
0008ACE9 E701                       	dc.b	smpsNoAttack, $01
0008ACEB E10C                       	smpsAlterNote       $0C
0008ACED E701                       	dc.b	smpsNoAttack, $01
0008ACEF E10F                       	smpsAlterNote       $0F
0008ACF1 E701                       	dc.b	smpsNoAttack, $01
0008ACF3 E113                       	smpsAlterNote       $13
0008ACF5 E701                       	dc.b	smpsNoAttack, $01
0008ACF7 E10F                       	smpsAlterNote       $0F
0008ACF9 E701                       	dc.b	smpsNoAttack, $01
0008ACFB E109                       	smpsAlterNote       $09
0008ACFD E701                       	dc.b	smpsNoAttack, $01
0008ACFF E108                       	smpsAlterNote       $08
0008AD01 E701                       	dc.b	smpsNoAttack, $01
0008AD03 E10C                       	smpsAlterNote       $0C
0008AD05 E701                       	dc.b	smpsNoAttack, $01
0008AD07 E112                       	smpsAlterNote       $12
0008AD09 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD0D E10F                       	smpsAlterNote       $0F
0008AD0F E701                       	dc.b	smpsNoAttack, $01
0008AD11 E109                       	smpsAlterNote       $09
0008AD13 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD17 E10F                       	smpsAlterNote       $0F
0008AD19 E701                       	dc.b	smpsNoAttack, $01
0008AD1B E112                       	smpsAlterNote       $12
0008AD1D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD21 E10C                       	smpsAlterNote       $0C
0008AD23 E701                       	dc.b	smpsNoAttack, $01
0008AD25 E108                       	smpsAlterNote       $08
0008AD27 E701                       	dc.b	smpsNoAttack, $01
0008AD29 E109                       	smpsAlterNote       $09
0008AD2B E701                       	dc.b	smpsNoAttack, $01
0008AD2D E10F                       	smpsAlterNote       $0F
0008AD2F E701                       	dc.b	smpsNoAttack, $01
0008AD31 E113                       	smpsAlterNote       $13
0008AD33 E701                       	dc.b	smpsNoAttack, $01
0008AD35 E10F                       	smpsAlterNote       $0F
0008AD37 E701                       	dc.b	smpsNoAttack, $01
0008AD39 E10C                       	smpsAlterNote       $0C
0008AD3B E701                       	dc.b	smpsNoAttack, $01
0008AD3D E108                       	smpsAlterNote       $08
0008AD3F E701                       	dc.b	smpsNoAttack, $01
0008AD41 E10C                       	smpsAlterNote       $0C
0008AD43 E701                       	dc.b	smpsNoAttack, $01
0008AD45 E112                       	smpsAlterNote       $12
0008AD47 E701                       	dc.b	smpsNoAttack, $01
0008AD49 E113                       	smpsAlterNote       $13
0008AD4B E701                       	dc.b	smpsNoAttack, $01
0008AD4D E10F                       	smpsAlterNote       $0F
0008AD4F E701                       	dc.b	smpsNoAttack, $01
0008AD51 E109                       	smpsAlterNote       $09
0008AD53 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD57 E10C                       	smpsAlterNote       $0C
0008AD59 E701                       	dc.b	smpsNoAttack, $01
0008AD5B E112                       	smpsAlterNote       $12
0008AD5D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD61 E10C                       	smpsAlterNote       $0C
0008AD63 E701                       	dc.b	smpsNoAttack, $01
0008AD65 E109                       	smpsAlterNote       $09
0008AD67 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD6B E10F                       	smpsAlterNote       $0F
0008AD6D E701                       	dc.b	smpsNoAttack, $01
0008AD6F E113                       	smpsAlterNote       $13
0008AD71 E701                       	dc.b	smpsNoAttack, $01
0008AD73 E112                       	smpsAlterNote       $12
0008AD75 E701                       	dc.b	smpsNoAttack, $01
0008AD77 E10C                       	smpsAlterNote       $0C
0008AD79 E701                       	dc.b	smpsNoAttack, $01
0008AD7B E109                       	smpsAlterNote       $09
0008AD7D 8001                       	dc.b	nRst, $01
0008AD7F E10F                       	smpsAlterNote       $0F
0008AD81 C60D                       	dc.b	nA5, $0D
0008AD83 E10C                       	smpsAlterNote       $0C
0008AD85 E701                       	dc.b	smpsNoAttack, $01
0008AD87 E108                       	smpsAlterNote       $08
0008AD89 E701                       	dc.b	smpsNoAttack, $01
0008AD8B E10C                       	smpsAlterNote       $0C
0008AD8D E701                       	dc.b	smpsNoAttack, $01
0008AD8F E112                       	smpsAlterNote       $12
0008AD91 E701                       	dc.b	smpsNoAttack, $01
0008AD93 E113                       	smpsAlterNote       $13
0008AD95 E701                       	dc.b	smpsNoAttack, $01
0008AD97 E10F                       	smpsAlterNote       $0F
0008AD99 E701                       	dc.b	smpsNoAttack, $01
0008AD9B E109                       	smpsAlterNote       $09
0008AD9D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADA1 E10C                       	smpsAlterNote       $0C
0008ADA3 E701                       	dc.b	smpsNoAttack, $01
0008ADA5 E112                       	smpsAlterNote       $12
0008ADA7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADAB E10C                       	smpsAlterNote       $0C
0008ADAD E701                       	dc.b	smpsNoAttack, $01
0008ADAF E109                       	smpsAlterNote       $09
0008ADB1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADB5 E10F                       	smpsAlterNote       $0F
0008ADB7 E701                       	dc.b	smpsNoAttack, $01
0008ADB9 E113                       	smpsAlterNote       $13
0008ADBB E701                       	dc.b	smpsNoAttack, $01
0008ADBD E112                       	smpsAlterNote       $12
0008ADBF E701                       	dc.b	smpsNoAttack, $01
0008ADC1 E10C                       	smpsAlterNote       $0C
0008ADC3 E701                       	dc.b	smpsNoAttack, $01
0008ADC5 E108                       	smpsAlterNote       $08
0008ADC7 E701                       	dc.b	smpsNoAttack, $01
0008ADC9 E10C                       	smpsAlterNote       $0C
0008ADCB E701                       	dc.b	smpsNoAttack, $01
0008ADCD E10F                       	smpsAlterNote       $0F
0008ADCF E701                       	dc.b	smpsNoAttack, $01
0008ADD1 E113                       	smpsAlterNote       $13
0008ADD3 E701                       	dc.b	smpsNoAttack, $01
0008ADD5 E10F                       	smpsAlterNote       $0F
0008ADD7 E701                       	dc.b	smpsNoAttack, $01
0008ADD9 E109                       	smpsAlterNote       $09
0008ADDB E701                       	dc.b	smpsNoAttack, $01
0008ADDD E108                       	smpsAlterNote       $08
0008ADDF E701                       	dc.b	smpsNoAttack, $01
0008ADE1 E10C                       	smpsAlterNote       $0C
0008ADE3 E701                       	dc.b	smpsNoAttack, $01
0008ADE5 E112                       	smpsAlterNote       $12
0008ADE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADEB E10F                       	smpsAlterNote       $0F
0008ADED E701                       	dc.b	smpsNoAttack, $01
0008ADEF E109                       	smpsAlterNote       $09
0008ADF1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADF5 E10F                       	smpsAlterNote       $0F
0008ADF7 E701                       	dc.b	smpsNoAttack, $01
0008ADF9 E112                       	smpsAlterNote       $12
0008ADFB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADFF E10C                       	smpsAlterNote       $0C
0008AE01 E701                       	dc.b	smpsNoAttack, $01
0008AE03 E108                       	smpsAlterNote       $08
0008AE05 E701                       	dc.b	smpsNoAttack, $01
0008AE07 E10C                       	smpsAlterNote       $0C
0008AE09 E701                       	dc.b	smpsNoAttack, $01
0008AE0B E10F                       	smpsAlterNote       $0F
0008AE0D E701                       	dc.b	smpsNoAttack, $01
0008AE0F E113                       	smpsAlterNote       $13
0008AE11 E701                       	dc.b	smpsNoAttack, $01
0008AE13 E10F                       	smpsAlterNote       $0F
0008AE15 E701                       	dc.b	smpsNoAttack, $01
0008AE17 E109                       	smpsAlterNote       $09
0008AE19 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008AE1F E601                       	smpsAlterVol        $01
0008AE21 E10F                       	smpsAlterNote       $0F
0008AE23 C604                       	dc.b	nA5, $04
0008AE25 E10D                       	smpsAlterNote       $0D
0008AE27 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008AE2D E10B                       	smpsAlterNote       $0B
0008AE2F BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
0008AE37 E10F                       	smpsAlterNote       $0F
0008AE39 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008AE3D E10D                       	smpsAlterNote       $0D
0008AE3F C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008AE45 E10C                       	smpsAlterNote       $0C
0008AE47 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
0008AE4D E10A                       	smpsAlterNote       $0A
0008AE4F C904 8001                  	dc.b	nC6, $04, nRst, $01
0008AE53 E110                       	smpsAlterNote       $10
0008AE55 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008AE59 E10F                       	smpsAlterNote       $0F
0008AE5B C604                       	dc.b	nA5, $04
0008AE5D E10D                       	smpsAlterNote       $0D
0008AE5F C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008AE6B E109                       	smpsAlterNote       $09
0008AE6D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE71 E10F                       	smpsAlterNote       $0F
0008AE73 E701                       	dc.b	smpsNoAttack, $01
0008AE75 E112                       	smpsAlterNote       $12
0008AE77 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE7B E10C                       	smpsAlterNote       $0C
0008AE7D E701                       	dc.b	smpsNoAttack, $01
0008AE7F E108                       	smpsAlterNote       $08
0008AE81 E701                       	dc.b	smpsNoAttack, $01
0008AE83 E10C                       	smpsAlterNote       $0C
0008AE85 E701                       	dc.b	smpsNoAttack, $01
0008AE87 E10F                       	smpsAlterNote       $0F
0008AE89 E701                       	dc.b	smpsNoAttack, $01
0008AE8B E113                       	smpsAlterNote       $13
0008AE8D E701                       	dc.b	smpsNoAttack, $01
0008AE8F E10D                       	smpsAlterNote       $0D
0008AE91 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008AE97 E10C                       	smpsAlterNote       $0C
0008AE99 C10D                       	dc.b	nE5, $0D
0008AE9B E109                       	smpsAlterNote       $09
0008AE9D E701                       	dc.b	smpsNoAttack, $01
0008AE9F E105                       	smpsAlterNote       $05
0008AEA1 E701                       	dc.b	smpsNoAttack, $01
0008AEA3 E106                       	smpsAlterNote       $06
0008AEA5 E701                       	dc.b	smpsNoAttack, $01
0008AEA7 E10C                       	smpsAlterNote       $0C
0008AEA9 E701                       	dc.b	smpsNoAttack, $01
0008AEAB E110                       	smpsAlterNote       $10
0008AEAD E701                       	dc.b	smpsNoAttack, $01
0008AEAF E10C                       	smpsAlterNote       $0C
0008AEB1 E701                       	dc.b	smpsNoAttack, $01
0008AEB3 E109                       	smpsAlterNote       $09
0008AEB5 E701                       	dc.b	smpsNoAttack, $01
0008AEB7 E105                       	smpsAlterNote       $05
0008AEB9 E701                       	dc.b	smpsNoAttack, $01
0008AEBB E109                       	smpsAlterNote       $09
0008AEBD E701                       	dc.b	smpsNoAttack, $01
0008AEBF E10F                       	smpsAlterNote       $0F
0008AEC1 E701                       	dc.b	smpsNoAttack, $01
0008AEC3 E110                       	smpsAlterNote       $10
0008AEC5 E701                       	dc.b	smpsNoAttack, $01
0008AEC7 E10C                       	smpsAlterNote       $0C
0008AEC9 E701                       	dc.b	smpsNoAttack, $01
0008AECB E106                       	smpsAlterNote       $06
0008AECD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AED1 E109                       	smpsAlterNote       $09
0008AED3 E701                       	dc.b	smpsNoAttack, $01
0008AED5 E10F                       	smpsAlterNote       $0F
0008AED7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AEDB E109                       	smpsAlterNote       $09
0008AEDD E701                       	dc.b	smpsNoAttack, $01
0008AEDF E106                       	smpsAlterNote       $06
0008AEE1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AEE5 E10C                       	smpsAlterNote       $0C
0008AEE7 E701                       	dc.b	smpsNoAttack, $01
0008AEE9 E110                       	smpsAlterNote       $10
0008AEEB E701                       	dc.b	smpsNoAttack, $01
0008AEED E10F                       	smpsAlterNote       $0F
0008AEEF E701                       	dc.b	smpsNoAttack, $01
0008AEF1 E109                       	smpsAlterNote       $09
0008AEF3 E701                       	dc.b	smpsNoAttack, $01
0008AEF5 E105                       	smpsAlterNote       $05
0008AEF7 E701                       	dc.b	smpsNoAttack, $01
0008AEF9 E109                       	smpsAlterNote       $09
0008AEFB E701                       	dc.b	smpsNoAttack, $01
0008AEFD E10C                       	smpsAlterNote       $0C
0008AEFF E701                       	dc.b	smpsNoAttack, $01
0008AF01 E110                       	smpsAlterNote       $10
0008AF03 E701                       	dc.b	smpsNoAttack, $01
0008AF05 E10C                       	smpsAlterNote       $0C
0008AF07 E701                       	dc.b	smpsNoAttack, $01
0008AF09 E106                       	smpsAlterNote       $06
0008AF0B E701                       	dc.b	smpsNoAttack, $01
0008AF0D E105                       	smpsAlterNote       $05
0008AF0F E701                       	dc.b	smpsNoAttack, $01
0008AF11 E109                       	smpsAlterNote       $09
0008AF13 E701                       	dc.b	smpsNoAttack, $01
0008AF15 E10F                       	smpsAlterNote       $0F
0008AF17 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF1B E10C                       	smpsAlterNote       $0C
0008AF1D E701                       	dc.b	smpsNoAttack, $01
0008AF1F E106                       	smpsAlterNote       $06
0008AF21 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF25 E10C                       	smpsAlterNote       $0C
0008AF27 E701                       	dc.b	smpsNoAttack, $01
0008AF29 E10F                       	smpsAlterNote       $0F
0008AF2B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF2F E109                       	smpsAlterNote       $09
0008AF31 E701                       	dc.b	smpsNoAttack, $01
0008AF33 E105                       	smpsAlterNote       $05
0008AF35 E701                       	dc.b	smpsNoAttack, $01
0008AF37 E106                       	smpsAlterNote       $06
0008AF39 E701                       	dc.b	smpsNoAttack, $01
0008AF3B E10C                       	smpsAlterNote       $0C
0008AF3D E701                       	dc.b	smpsNoAttack, $01
0008AF3F E110                       	smpsAlterNote       $10
0008AF41 E701                       	dc.b	smpsNoAttack, $01
0008AF43 E10C                       	smpsAlterNote       $0C
0008AF45 E701                       	dc.b	smpsNoAttack, $01
0008AF47 E109                       	smpsAlterNote       $09
0008AF49 E701                       	dc.b	smpsNoAttack, $01
0008AF4B E105                       	smpsAlterNote       $05
0008AF4D E701                       	dc.b	smpsNoAttack, $01
0008AF4F E109                       	smpsAlterNote       $09
0008AF51 E701                       	dc.b	smpsNoAttack, $01
0008AF53 E10F                       	smpsAlterNote       $0F
0008AF55 E701                       	dc.b	smpsNoAttack, $01
0008AF57 E110                       	smpsAlterNote       $10
0008AF59 E701                       	dc.b	smpsNoAttack, $01
0008AF5B E10C                       	smpsAlterNote       $0C
0008AF5D E701                       	dc.b	smpsNoAttack, $01
0008AF5F E106                       	smpsAlterNote       $06
0008AF61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF65 E109                       	smpsAlterNote       $09
0008AF67 E701                       	dc.b	smpsNoAttack, $01
0008AF69 E10F                       	smpsAlterNote       $0F
0008AF6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF6F E109                       	smpsAlterNote       $09
0008AF71 E701                       	dc.b	smpsNoAttack, $01
0008AF73 E106                       	smpsAlterNote       $06
0008AF75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF79 E10C                       	smpsAlterNote       $0C
0008AF7B E701                       	dc.b	smpsNoAttack, $01
0008AF7D E110                       	smpsAlterNote       $10
0008AF7F E701                       	dc.b	smpsNoAttack, $01
0008AF81 E10F                       	smpsAlterNote       $0F
0008AF83 E701                       	dc.b	smpsNoAttack, $01
0008AF85 E109                       	smpsAlterNote       $09
0008AF87 E701                       	dc.b	smpsNoAttack, $01
0008AF89 E105                       	smpsAlterNote       $05
0008AF8B E701                       	dc.b	smpsNoAttack, $01
0008AF8D E109                       	smpsAlterNote       $09
0008AF8F E701                       	dc.b	smpsNoAttack, $01
0008AF91 E10C                       	smpsAlterNote       $0C
0008AF93 E701                       	dc.b	smpsNoAttack, $01
0008AF95 E110                       	smpsAlterNote       $10
0008AF97 E701                       	dc.b	smpsNoAttack, $01
0008AF99 E10C                       	smpsAlterNote       $0C
0008AF9B E701                       	dc.b	smpsNoAttack, $01
0008AF9D E106                       	smpsAlterNote       $06
0008AF9F E701                       	dc.b	smpsNoAttack, $01
0008AFA1 E105                       	smpsAlterNote       $05
0008AFA3 E701                       	dc.b	smpsNoAttack, $01
0008AFA5 E109                       	smpsAlterNote       $09
0008AFA7 E701                       	dc.b	smpsNoAttack, $01
0008AFA9 E10F                       	smpsAlterNote       $0F
0008AFAB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AFAF E109                       	smpsAlterNote       $09
0008AFB1 E701                       	dc.b	smpsNoAttack, $01
0008AFB3 E106                       	smpsAlterNote       $06
0008AFB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AFB9 E10C                       	smpsAlterNote       $0C
0008AFBB E701                       	dc.b	smpsNoAttack, $01
0008AFBD E110                       	smpsAlterNote       $10
0008AFBF E701                       	dc.b	smpsNoAttack, $01
0008AFC1 E10F                       	smpsAlterNote       $0F
0008AFC3 E701                       	dc.b	smpsNoAttack, $01
0008AFC5 E109                       	smpsAlterNote       $09
0008AFC7 E701                       	dc.b	smpsNoAttack, $01
0008AFC9 E105                       	smpsAlterNote       $05
0008AFCB E701                       	dc.b	smpsNoAttack, $01
0008AFCD E109                       	smpsAlterNote       $09
0008AFCF E701                       	dc.b	smpsNoAttack, $01
0008AFD1 E10C                       	smpsAlterNote       $0C
0008AFD3 E701                       	dc.b	smpsNoAttack, $01
0008AFD5 E110                       	smpsAlterNote       $10
0008AFD7 E701                       	dc.b	smpsNoAttack, $01
0008AFD9 E10C                       	smpsAlterNote       $0C
0008AFDB E701                       	dc.b	smpsNoAttack, $01
0008AFDD E106                       	smpsAlterNote       $06
0008AFDF E701                       	dc.b	smpsNoAttack, $01
0008AFE1 E105                       	smpsAlterNote       $05
0008AFE3 E701                       	dc.b	smpsNoAttack, $01
0008AFE5 E109                       	smpsAlterNote       $09
0008AFE7 E701                       	dc.b	smpsNoAttack, $01
0008AFE9 E10F                       	smpsAlterNote       $0F
0008AFEB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AFEF E10C                       	smpsAlterNote       $0C
0008AFF1 E701                       	dc.b	smpsNoAttack, $01
0008AFF3 E106                       	smpsAlterNote       $06
0008AFF5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AFF9 E10C                       	smpsAlterNote       $0C
0008AFFB E701                       	dc.b	smpsNoAttack, $01
0008AFFD E10F                       	smpsAlterNote       $0F
0008AFFF E701                       	dc.b	smpsNoAttack, $01
0008B001 E110                       	smpsAlterNote       $10
0008B003 8001                       	dc.b	nRst, $01
0008B005 E10F                       	smpsAlterNote       $0F
0008B007 C604                       	dc.b	nA5, $04
0008B009 E10D                       	smpsAlterNote       $0D
0008B00B C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008B011 E10B                       	smpsAlterNote       $0B
0008B013 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
0008B019 E10F                       	smpsAlterNote       $0F
0008B01B C604 8001                  	dc.b	nA5, $04, nRst, $01
0008B01F E10D                       	smpsAlterNote       $0D
0008B021 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008B027 E10C                       	smpsAlterNote       $0C
0008B029 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
0008B02F E10A                       	smpsAlterNote       $0A
0008B031 C904                       	dc.b	nC6, $04
0008B033 E110                       	smpsAlterNote       $10
0008B035 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008B039 E10F                       	smpsAlterNote       $0F
0008B03B C604                       	dc.b	nA5, $04
0008B03D E10D                       	smpsAlterNote       $0D
0008B03F C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008B04B E109                       	smpsAlterNote       $09
0008B04D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B051 E10F                       	smpsAlterNote       $0F
0008B053 E701                       	dc.b	smpsNoAttack, $01
0008B055 E112                       	smpsAlterNote       $12
0008B057 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B05B E10C                       	smpsAlterNote       $0C
0008B05D E701                       	dc.b	smpsNoAttack, $01
0008B05F E108                       	smpsAlterNote       $08
0008B061 E701                       	dc.b	smpsNoAttack, $01
0008B063 E109                       	smpsAlterNote       $09
0008B065 E701                       	dc.b	smpsNoAttack, $01
0008B067 E10F                       	smpsAlterNote       $0F
0008B069 E701                       	dc.b	smpsNoAttack, $01
0008B06B E113                       	smpsAlterNote       $13
0008B06D E701                       	dc.b	smpsNoAttack, $01
0008B06F E10D                       	smpsAlterNote       $0D
0008B071 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008B077 E10C                       	smpsAlterNote       $0C
0008B079 C10D                       	dc.b	nE5, $0D
0008B07B E109                       	smpsAlterNote       $09
0008B07D E701                       	dc.b	smpsNoAttack, $01
0008B07F E106                       	smpsAlterNote       $06
0008B081 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B085 E10C                       	smpsAlterNote       $0C
0008B087 E701                       	dc.b	smpsNoAttack, $01
0008B089 E110                       	smpsAlterNote       $10
0008B08B E701                       	dc.b	smpsNoAttack, $01
0008B08D E10F                       	smpsAlterNote       $0F
0008B08F E701                       	dc.b	smpsNoAttack, $01
0008B091 E109                       	smpsAlterNote       $09
0008B093 E701                       	dc.b	smpsNoAttack, $01
0008B095 E105                       	smpsAlterNote       $05
0008B097 E701                       	dc.b	smpsNoAttack, $01
0008B099 E109                       	smpsAlterNote       $09
0008B09B E701                       	dc.b	smpsNoAttack, $01
0008B09D E10C                       	smpsAlterNote       $0C
0008B09F E701                       	dc.b	smpsNoAttack, $01
0008B0A1 E110                       	smpsAlterNote       $10
0008B0A3 E701                       	dc.b	smpsNoAttack, $01
0008B0A5 E10C                       	smpsAlterNote       $0C
0008B0A7 E701                       	dc.b	smpsNoAttack, $01
0008B0A9 E106                       	smpsAlterNote       $06
0008B0AB E701                       	dc.b	smpsNoAttack, $01
0008B0AD E105                       	smpsAlterNote       $05
0008B0AF E701                       	dc.b	smpsNoAttack, $01
0008B0B1 E109                       	smpsAlterNote       $09
0008B0B3 E701                       	dc.b	smpsNoAttack, $01
0008B0B5 E10F                       	smpsAlterNote       $0F
0008B0B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B0BB E10C                       	smpsAlterNote       $0C
0008B0BD E701                       	dc.b	smpsNoAttack, $01
0008B0BF E106                       	smpsAlterNote       $06
0008B0C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B0C5 E10C                       	smpsAlterNote       $0C
0008B0C7 E701                       	dc.b	smpsNoAttack, $01
0008B0C9 E10F                       	smpsAlterNote       $0F
0008B0CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B0CF E109                       	smpsAlterNote       $09
0008B0D1 E701                       	dc.b	smpsNoAttack, $01
0008B0D3 E105                       	smpsAlterNote       $05
0008B0D5 E701                       	dc.b	smpsNoAttack, $01
0008B0D7 E106                       	smpsAlterNote       $06
0008B0D9 E701                       	dc.b	smpsNoAttack, $01
0008B0DB E10C                       	smpsAlterNote       $0C
0008B0DD E701                       	dc.b	smpsNoAttack, $01
0008B0DF E110                       	smpsAlterNote       $10
0008B0E1 E701                       	dc.b	smpsNoAttack, $01
0008B0E3 E10C                       	smpsAlterNote       $0C
0008B0E5 E701                       	dc.b	smpsNoAttack, $01
0008B0E7 E109                       	smpsAlterNote       $09
0008B0E9 E701                       	dc.b	smpsNoAttack, $01
0008B0EB E105                       	smpsAlterNote       $05
0008B0ED E701                       	dc.b	smpsNoAttack, $01
0008B0EF E109                       	smpsAlterNote       $09
0008B0F1 E701                       	dc.b	smpsNoAttack, $01
0008B0F3 E10F                       	smpsAlterNote       $0F
0008B0F5 E701                       	dc.b	smpsNoAttack, $01
0008B0F7 E110                       	smpsAlterNote       $10
0008B0F9 E701                       	dc.b	smpsNoAttack, $01
0008B0FB E10C                       	smpsAlterNote       $0C
0008B0FD E701                       	dc.b	smpsNoAttack, $01
0008B0FF E106                       	smpsAlterNote       $06
0008B101 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B105 E109                       	smpsAlterNote       $09
0008B107 E701                       	dc.b	smpsNoAttack, $01
0008B109 E10F                       	smpsAlterNote       $0F
0008B10B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B10F E109                       	smpsAlterNote       $09
0008B111 E701                       	dc.b	smpsNoAttack, $01
0008B113 E106                       	smpsAlterNote       $06
0008B115 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B119 E10C                       	smpsAlterNote       $0C
0008B11B E701                       	dc.b	smpsNoAttack, $01
0008B11D E110                       	smpsAlterNote       $10
0008B11F E701                       	dc.b	smpsNoAttack, $01
0008B121 E10F                       	smpsAlterNote       $0F
0008B123 E701                       	dc.b	smpsNoAttack, $01
0008B125 E109                       	smpsAlterNote       $09
0008B127 E701                       	dc.b	smpsNoAttack, $01
0008B129 E105                       	smpsAlterNote       $05
0008B12B E701                       	dc.b	smpsNoAttack, $01
0008B12D E109                       	smpsAlterNote       $09
0008B12F E701                       	dc.b	smpsNoAttack, $01
0008B131 E10F                       	smpsAlterNote       $0F
0008B133 E701                       	dc.b	smpsNoAttack, $01
0008B135 E110                       	smpsAlterNote       $10
0008B137 E701                       	dc.b	smpsNoAttack, $01
0008B139 E10C                       	smpsAlterNote       $0C
0008B13B E701                       	dc.b	smpsNoAttack, $01
0008B13D E106                       	smpsAlterNote       $06
0008B13F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B143 E109                       	smpsAlterNote       $09
0008B145 E701                       	dc.b	smpsNoAttack, $01
0008B147 E10F                       	smpsAlterNote       $0F
0008B149 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B14D E109                       	smpsAlterNote       $09
0008B14F E701                       	dc.b	smpsNoAttack, $01
0008B151 E106                       	smpsAlterNote       $06
0008B153 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B157 E10C                       	smpsAlterNote       $0C
0008B159 E701                       	dc.b	smpsNoAttack, $01
0008B15B E110                       	smpsAlterNote       $10
0008B15D E701                       	dc.b	smpsNoAttack, $01
0008B15F E10F                       	smpsAlterNote       $0F
0008B161 E701                       	dc.b	smpsNoAttack, $01
0008B163 E109                       	smpsAlterNote       $09
0008B165 E701                       	dc.b	smpsNoAttack, $01
0008B167 E105                       	smpsAlterNote       $05
0008B169 E701                       	dc.b	smpsNoAttack, $01
0008B16B E109                       	smpsAlterNote       $09
0008B16D E701                       	dc.b	smpsNoAttack, $01
0008B16F E10C                       	smpsAlterNote       $0C
0008B171 E701                       	dc.b	smpsNoAttack, $01
0008B173 E110                       	smpsAlterNote       $10
0008B175 E701                       	dc.b	smpsNoAttack, $01
0008B177 E10C                       	smpsAlterNote       $0C
0008B179 E701                       	dc.b	smpsNoAttack, $01
0008B17B E106                       	smpsAlterNote       $06
0008B17D E701                       	dc.b	smpsNoAttack, $01
0008B17F E105                       	smpsAlterNote       $05
0008B181 E701                       	dc.b	smpsNoAttack, $01
0008B183 E109                       	smpsAlterNote       $09
0008B185 E701                       	dc.b	smpsNoAttack, $01
0008B187 E10F                       	smpsAlterNote       $0F
0008B189 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B18D E10C                       	smpsAlterNote       $0C
0008B18F E701                       	dc.b	smpsNoAttack, $01
0008B191 E106                       	smpsAlterNote       $06
0008B193 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B197 E10C                       	smpsAlterNote       $0C
0008B199 E701                       	dc.b	smpsNoAttack, $01
0008B19B E10F                       	smpsAlterNote       $0F
0008B19D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B1A1 E109                       	smpsAlterNote       $09
0008B1A3 E701                       	dc.b	smpsNoAttack, $01
0008B1A5 E105                       	smpsAlterNote       $05
0008B1A7 E701                       	dc.b	smpsNoAttack, $01
0008B1A9 E106                       	smpsAlterNote       $06
0008B1AB E701                       	dc.b	smpsNoAttack, $01
0008B1AD E10C                       	smpsAlterNote       $0C
0008B1AF E701                       	dc.b	smpsNoAttack, $01
0008B1B1 E110                       	smpsAlterNote       $10
0008B1B3 E701                       	dc.b	smpsNoAttack, $01
0008B1B5 E10C                       	smpsAlterNote       $0C
0008B1B7 E701                       	dc.b	smpsNoAttack, $01
0008B1B9 E109                       	smpsAlterNote       $09
0008B1BB E701                       	dc.b	smpsNoAttack, $01
0008B1BD E105                       	smpsAlterNote       $05
0008B1BF E701                       	dc.b	smpsNoAttack, $01
0008B1C1 E109                       	smpsAlterNote       $09
0008B1C3 E701                       	dc.b	smpsNoAttack, $01
0008B1C5 E10F                       	smpsAlterNote       $0F
0008B1C7 E701                       	dc.b	smpsNoAttack, $01
0008B1C9 E110                       	smpsAlterNote       $10
0008B1CB E701                       	dc.b	smpsNoAttack, $01
0008B1CD E10C                       	smpsAlterNote       $0C
0008B1CF E701                       	dc.b	smpsNoAttack, $01
0008B1D1 E106                       	smpsAlterNote       $06
0008B1D3 E701                       	dc.b	smpsNoAttack, $01
0008B1D5 E10B                       	smpsAlterNote       $0B
0008B1D7 BF02                       	dc.b	nD5, $02
0008B1D9 E10C                       	smpsAlterNote       $0C
0008B1DB C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
0008B1E1 E109                       	smpsAlterNote       $09
0008B1E3 E701                       	dc.b	smpsNoAttack, $01
0008B1E5 E105                       	smpsAlterNote       $05
0008B1E7 E701                       	dc.b	smpsNoAttack, $01
0008B1E9 E109                       	smpsAlterNote       $09
0008B1EB E701                       	dc.b	smpsNoAttack, $01
0008B1ED E10F                       	smpsAlterNote       $0F
0008B1EF E701                       	dc.b	smpsNoAttack, $01
0008B1F1 E110                       	smpsAlterNote       $10
0008B1F3 E701                       	dc.b	smpsNoAttack, $01
0008B1F5 E10C                       	smpsAlterNote       $0C
0008B1F7 E701                       	dc.b	smpsNoAttack, $01
0008B1F9 E106                       	smpsAlterNote       $06
0008B1FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B1FF E109                       	smpsAlterNote       $09
0008B201 E701                       	dc.b	smpsNoAttack, $01
0008B203 E10F                       	smpsAlterNote       $0F
0008B205 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B209 E109                       	smpsAlterNote       $09
0008B20B E701                       	dc.b	smpsNoAttack, $01
0008B20D E106                       	smpsAlterNote       $06
0008B20F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B213 E10C                       	smpsAlterNote       $0C
0008B215 E701                       	dc.b	smpsNoAttack, $01
0008B217 E110                       	smpsAlterNote       $10
0008B219 E701                       	dc.b	smpsNoAttack, $01
0008B21B E10F                       	smpsAlterNote       $0F
0008B21D E701                       	dc.b	smpsNoAttack, $01
0008B21F E109                       	smpsAlterNote       $09
0008B221 E701                       	dc.b	smpsNoAttack, $01
0008B223 E105                       	smpsAlterNote       $05
0008B225 E701                       	dc.b	smpsNoAttack, $01
0008B227 E109                       	smpsAlterNote       $09
0008B229 E701                       	dc.b	smpsNoAttack, $01
0008B22B E10C                       	smpsAlterNote       $0C
0008B22D E701                       	dc.b	smpsNoAttack, $01
0008B22F E110                       	smpsAlterNote       $10
0008B231 E701                       	dc.b	smpsNoAttack, $01
0008B233 E10C                       	smpsAlterNote       $0C
0008B235 E701                       	dc.b	smpsNoAttack, $01
0008B237 E106                       	smpsAlterNote       $06
0008B239 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B23D E10D                       	smpsAlterNote       $0D
0008B23F C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
0008B247 E10C                       	smpsAlterNote       $0C
0008B249 C10D                       	dc.b	nE5, $0D
0008B24B E106                       	smpsAlterNote       $06
0008B24D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B251 E109                       	smpsAlterNote       $09
0008B253 E701                       	dc.b	smpsNoAttack, $01
0008B255 E10F                       	smpsAlterNote       $0F
0008B257 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B25B E109                       	smpsAlterNote       $09
0008B25D E701                       	dc.b	smpsNoAttack, $01
0008B25F E106                       	smpsAlterNote       $06
0008B261 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B265 E10C                       	smpsAlterNote       $0C
0008B267 E701                       	dc.b	smpsNoAttack, $01
0008B269 E110                       	smpsAlterNote       $10
0008B26B E701                       	dc.b	smpsNoAttack, $01
0008B26D E10F                       	smpsAlterNote       $0F
0008B26F E701                       	dc.b	smpsNoAttack, $01
0008B271 E109                       	smpsAlterNote       $09
0008B273 E701                       	dc.b	smpsNoAttack, $01
0008B275 E105                       	smpsAlterNote       $05
0008B277 E701                       	dc.b	smpsNoAttack, $01
0008B279 E106                       	smpsAlterNote       $06
0008B27B 800F                       	dc.b	nRst, $0F
0008B27F E6FF                       	smpsAlterVol        $FF
0008B281 E10F                       	smpsAlterNote       $0F
0008B283 BA01                       	dc.b	nA4, $01
0008B285 E110                       	smpsAlterNote       $10
0008B287 BB02                       	dc.b	nBb4, $02
0008B289 E10F                       	smpsAlterNote       $0F
0008B28B BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
0008B291 E10B                       	smpsAlterNote       $0B
0008B293 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008B297 E10C                       	smpsAlterNote       $0C
0008B299 C103                       	dc.b	nE5, $03
0008B29B E10D                       	smpsAlterNote       $0D
0008B29D C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008B2A7 E10B                       	smpsAlterNote       $0B
0008B2A9 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0008B2AD E104                       	smpsAlterNote       $04
0008B2AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2B3 E10A                       	smpsAlterNote       $0A
0008B2B5 E701                       	dc.b	smpsNoAttack, $01
0008B2B7 E10D                       	smpsAlterNote       $0D
0008B2B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2BD E107                       	smpsAlterNote       $07
0008B2BF E701                       	dc.b	smpsNoAttack, $01
0008B2C1 E104                       	smpsAlterNote       $04
0008B2C3 8001                       	dc.b	nRst, $01
0008B2C5 E110                       	smpsAlterNote       $10
0008B2C7 C703                       	dc.b	nBb5, $03
0008B2C9 E10F                       	smpsAlterNote       $0F
0008B2CB C603 8001                  	dc.b	nA5, $03, nRst, $01
0008B2CF E10D                       	smpsAlterNote       $0D
0008B2D1 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008B2D5 E10C                       	smpsAlterNote       $0C
0008B2D7 E701                       	dc.b	smpsNoAttack, $01
0008B2D9 E108                       	smpsAlterNote       $08
0008B2DB E701                       	dc.b	smpsNoAttack, $01
0008B2DD E109                       	smpsAlterNote       $09
0008B2DF E701                       	dc.b	smpsNoAttack, $01
0008B2E1 E10F                       	smpsAlterNote       $0F
0008B2E3 E701                       	dc.b	smpsNoAttack, $01
0008B2E5 E113                       	smpsAlterNote       $13
0008B2E7 E701                       	dc.b	smpsNoAttack, $01
0008B2E9 E10F                       	smpsAlterNote       $0F
0008B2EB E701                       	dc.b	smpsNoAttack, $01
0008B2ED E10C                       	smpsAlterNote       $0C
0008B2EF E701                       	dc.b	smpsNoAttack, $01
0008B2F1 E108                       	smpsAlterNote       $08
0008B2F3 E701                       	dc.b	smpsNoAttack, $01
0008B2F5 E10C                       	smpsAlterNote       $0C
0008B2F7 E701                       	dc.b	smpsNoAttack, $01
0008B2F9 E112                       	smpsAlterNote       $12
0008B2FB E701                       	dc.b	smpsNoAttack, $01
0008B2FD E113                       	smpsAlterNote       $13
0008B2FF E701                       	dc.b	smpsNoAttack, $01
0008B301 E10F                       	smpsAlterNote       $0F
0008B303 E701                       	dc.b	smpsNoAttack, $01
0008B305 E109                       	smpsAlterNote       $09
0008B307 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B30B E10C                       	smpsAlterNote       $0C
0008B30D E701                       	dc.b	smpsNoAttack, $01
0008B30F E112                       	smpsAlterNote       $12
0008B311 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B315 E10C                       	smpsAlterNote       $0C
0008B317 E701                       	dc.b	smpsNoAttack, $01
0008B319 E109                       	smpsAlterNote       $09
0008B31B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B31F E10F                       	smpsAlterNote       $0F
0008B321 E701                       	dc.b	smpsNoAttack, $01
0008B323 E113                       	smpsAlterNote       $13
0008B325 E701                       	dc.b	smpsNoAttack, $01
0008B327 E112                       	smpsAlterNote       $12
0008B329 E701                       	dc.b	smpsNoAttack, $01
0008B32B E10C                       	smpsAlterNote       $0C
0008B32D E701                       	dc.b	smpsNoAttack, $01
0008B32F E108                       	smpsAlterNote       $08
0008B331 E701                       	dc.b	smpsNoAttack, $01
0008B333 E10C                       	smpsAlterNote       $0C
0008B335 E701                       	dc.b	smpsNoAttack, $01
0008B337 E10F                       	smpsAlterNote       $0F
0008B339 E701                       	dc.b	smpsNoAttack, $01
0008B33B E113                       	smpsAlterNote       $13
0008B33D E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008B341 E10B                       	smpsAlterNote       $0B
0008B343 BF03                       	dc.b	nD5, $03
0008B345 E10C                       	smpsAlterNote       $0C
0008B347 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008B34B E10D                       	smpsAlterNote       $0D
0008B34D C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008B357 E10B                       	smpsAlterNote       $0B
0008B359 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008B365 E110                       	smpsAlterNote       $10
0008B367 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008B36B E10F                       	smpsAlterNote       $0F
0008B36D C604                       	dc.b	nA5, $04
0008B36F E10D                       	smpsAlterNote       $0D
0008B371 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008B377 E109                       	smpsAlterNote       $09
0008B379 E701                       	dc.b	smpsNoAttack, $01
0008B37B E108                       	smpsAlterNote       $08
0008B37D E701                       	dc.b	smpsNoAttack, $01
0008B37F E10C                       	smpsAlterNote       $0C
0008B381 E701                       	dc.b	smpsNoAttack, $01
0008B383 E112                       	smpsAlterNote       $12
0008B385 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B389 E10F                       	smpsAlterNote       $0F
0008B38B E701                       	dc.b	smpsNoAttack, $01
0008B38D E109                       	smpsAlterNote       $09
0008B38F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B393 E10F                       	smpsAlterNote       $0F
0008B395 E701                       	dc.b	smpsNoAttack, $01
0008B397 E112                       	smpsAlterNote       $12
0008B399 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B39D E10C                       	smpsAlterNote       $0C
0008B39F E701                       	dc.b	smpsNoAttack, $01
0008B3A1 E108                       	smpsAlterNote       $08
0008B3A3 E701                       	dc.b	smpsNoAttack, $01
0008B3A5 E109                       	smpsAlterNote       $09
0008B3A7 E701                       	dc.b	smpsNoAttack, $01
0008B3A9 E10F                       	smpsAlterNote       $0F
0008B3AB E701                       	dc.b	smpsNoAttack, $01
0008B3AD E113                       	smpsAlterNote       $13
0008B3AF E701                       	dc.b	smpsNoAttack, $01
0008B3B1 E10F                       	smpsAlterNote       $0F
0008B3B3 E701                       	dc.b	smpsNoAttack, $01
0008B3B5 E10C                       	smpsAlterNote       $0C
0008B3B7 E701                       	dc.b	smpsNoAttack, $01
0008B3B9 E108                       	smpsAlterNote       $08
0008B3BB E701                       	dc.b	smpsNoAttack, $01
0008B3BD E10C                       	smpsAlterNote       $0C
0008B3BF E701                       	dc.b	smpsNoAttack, $01
0008B3C1 E112                       	smpsAlterNote       $12
0008B3C3 E701                       	dc.b	smpsNoAttack, $01
0008B3C5 E113                       	smpsAlterNote       $13
0008B3C7 E701                       	dc.b	smpsNoAttack, $01
0008B3C9 E10F                       	smpsAlterNote       $0F
0008B3CB E701                       	dc.b	smpsNoAttack, $01
0008B3CD E109                       	smpsAlterNote       $09
0008B3CF E701                       	dc.b	smpsNoAttack, $01
0008B3D1 E10D                       	smpsAlterNote       $0D
0008B3D3 C402                       	dc.b	nG5, $02
0008B3D5 E10F                       	smpsAlterNote       $0F
0008B3D7 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
0008B3E1 E10D                       	smpsAlterNote       $0D
0008B3E3 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008B3E9 E10B                       	smpsAlterNote       $0B
0008B3EB BF0D                       	dc.b	nD5, $0D
0008B3ED E108                       	smpsAlterNote       $08
0008B3EF E701                       	dc.b	smpsNoAttack, $01
0008B3F1 E104                       	smpsAlterNote       $04
0008B3F3 E701                       	dc.b	smpsNoAttack, $01
0008B3F5 E105                       	smpsAlterNote       $05
0008B3F7 E701                       	dc.b	smpsNoAttack, $01
0008B3F9 E10B                       	smpsAlterNote       $0B
0008B3FB E701                       	dc.b	smpsNoAttack, $01
0008B3FD E10F                       	smpsAlterNote       $0F
0008B3FF E701                       	dc.b	smpsNoAttack, $01
0008B401 E10B                       	smpsAlterNote       $0B
0008B403 E701                       	dc.b	smpsNoAttack, $01
0008B405 E108                       	smpsAlterNote       $08
0008B407 E701                       	dc.b	smpsNoAttack, $01
0008B409 E104                       	smpsAlterNote       $04
0008B40B E701                       	dc.b	smpsNoAttack, $01
0008B40D E108                       	smpsAlterNote       $08
0008B40F E701                       	dc.b	smpsNoAttack, $01
0008B411 E10E                       	smpsAlterNote       $0E
0008B413 E701                       	dc.b	smpsNoAttack, $01
0008B415 E10F                       	smpsAlterNote       $0F
0008B417 E701                       	dc.b	smpsNoAttack, $01
0008B419 E10C                       	smpsAlterNote       $0C
0008B41B C101                       	dc.b	nE5, $01
0008B41D E10D                       	smpsAlterNote       $0D
0008B41F C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008B427 E10F                       	smpsAlterNote       $0F
0008B429 C607                       	dc.b	nA5, $07
0008B42B E10C                       	smpsAlterNote       $0C
0008B42D CD07                       	dc.b	nE6, $07
0008B42F E10D                       	smpsAlterNote       $0D
0008B431 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008B435 E10C                       	smpsAlterNote       $0C
0008B437 CD03                       	dc.b	nE6, $03
0008B439 E10A                       	smpsAlterNote       $0A
0008B43B C903 8001                  	dc.b	nC6, $03, nRst, $01
0008B43F E10D                       	smpsAlterNote       $0D
0008B441 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008B447 E10A                       	smpsAlterNote       $0A
0008B449 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B44D E110                       	smpsAlterNote       $10
0008B44F E701                       	dc.b	smpsNoAttack, $01
0008B451 E114                       	smpsAlterNote       $14
0008B453 E701                       	dc.b	smpsNoAttack, $01
0008B455 E113                       	smpsAlterNote       $13
0008B457 E701                       	dc.b	smpsNoAttack, $01
0008B459 E10D                       	smpsAlterNote       $0D
0008B45B E701                       	dc.b	smpsNoAttack, $01
0008B45D E109                       	smpsAlterNote       $09
0008B45F E701                       	dc.b	smpsNoAttack, $01
0008B461 E10D                       	smpsAlterNote       $0D
0008B463 E701                       	dc.b	smpsNoAttack, $01
0008B465 E110                       	smpsAlterNote       $10
0008B467 E701                       	dc.b	smpsNoAttack, $01
0008B469 E114                       	smpsAlterNote       $14
0008B46B E701                       	dc.b	smpsNoAttack, $01
0008B46D E10F                       	smpsAlterNote       $0F
0008B46F C607                       	dc.b	nA5, $07
0008B471 E10D                       	smpsAlterNote       $0D
0008B473 C40D                       	dc.b	nG5, $0D
0008B475 E10A                       	smpsAlterNote       $0A
0008B477 E701                       	dc.b	smpsNoAttack, $01
0008B479 E106                       	smpsAlterNote       $06
0008B47B E701                       	dc.b	smpsNoAttack, $01
0008B47D E10A                       	smpsAlterNote       $0A
0008B47F E701                       	dc.b	smpsNoAttack, $01
0008B481 E10D                       	smpsAlterNote       $0D
0008B483 E701                       	dc.b	smpsNoAttack, $01
0008B485 E111                       	smpsAlterNote       $11
0008B487 E701                       	dc.b	smpsNoAttack, $01
0008B489 E10D                       	smpsAlterNote       $0D
0008B48B E701                       	dc.b	smpsNoAttack, $01
0008B48D E107                       	smpsAlterNote       $07
0008B48F E701                       	dc.b	smpsNoAttack, $01
0008B491 E106                       	smpsAlterNote       $06
0008B493 E701                       	dc.b	smpsNoAttack, $01
0008B495 E10A                       	smpsAlterNote       $0A
0008B497 E701                       	dc.b	smpsNoAttack, $01
0008B499 E110                       	smpsAlterNote       $10
0008B49B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B49F E10D                       	smpsAlterNote       $0D
0008B4A1 E701                       	dc.b	smpsNoAttack, $01
0008B4A3 E107                       	smpsAlterNote       $07
0008B4A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B4A9 E10F                       	smpsAlterNote       $0F
0008B4AB C60E                       	dc.b	nA5, $0E
0008B4AD E109                       	smpsAlterNote       $09
0008B4AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B4B3 E10F                       	smpsAlterNote       $0F
0008B4B5 E701                       	dc.b	smpsNoAttack, $01
0008B4B7 E112                       	smpsAlterNote       $12
0008B4B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B4BD E10C                       	smpsAlterNote       $0C
0008B4BF E701                       	dc.b	smpsNoAttack, $01
0008B4C1 E108                       	smpsAlterNote       $08
0008B4C3 E701                       	dc.b	smpsNoAttack, $01
0008B4C5 E109                       	smpsAlterNote       $09
0008B4C7 E701                       	dc.b	smpsNoAttack, $01
0008B4C9 E10F                       	smpsAlterNote       $0F
0008B4CB E701                       	dc.b	smpsNoAttack, $01
0008B4CD E113                       	smpsAlterNote       $13
0008B4CF E701                       	dc.b	smpsNoAttack, $01
0008B4D1 E10F                       	smpsAlterNote       $0F
0008B4D3 E701                       	dc.b	smpsNoAttack, $01
0008B4D5 E10C                       	smpsAlterNote       $0C
0008B4D7 E701                       	dc.b	smpsNoAttack, $01
0008B4D9 E108                       	smpsAlterNote       $08
0008B4DB E701                       	dc.b	smpsNoAttack, $01
0008B4DD E109                       	smpsAlterNote       $09
0008B4DF 8001                       	dc.b	nRst, $01
0008B4E1 E110                       	smpsAlterNote       $10
0008B4E3 C70D                       	dc.b	nBb5, $0D
0008B4E5 E10D                       	smpsAlterNote       $0D
0008B4E7 E701                       	dc.b	smpsNoAttack, $01
0008B4E9 E109                       	smpsAlterNote       $09
0008B4EB E701                       	dc.b	smpsNoAttack, $01
0008B4ED E10D                       	smpsAlterNote       $0D
0008B4EF E701                       	dc.b	smpsNoAttack, $01
0008B4F1 E113                       	smpsAlterNote       $13
0008B4F3 E701                       	dc.b	smpsNoAttack, $01
0008B4F5 E114                       	smpsAlterNote       $14
0008B4F7 E701                       	dc.b	smpsNoAttack, $01
0008B4F9 E110                       	smpsAlterNote       $10
0008B4FB E701                       	dc.b	smpsNoAttack, $01
0008B4FD E10A                       	smpsAlterNote       $0A
0008B4FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B503 E10D                       	smpsAlterNote       $0D
0008B505 E701                       	dc.b	smpsNoAttack, $01
0008B507 E113                       	smpsAlterNote       $13
0008B509 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B50D E10D                       	smpsAlterNote       $0D
0008B50F E701                       	dc.b	smpsNoAttack, $01
0008B511 E10A                       	smpsAlterNote       $0A
0008B513 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
0008B51D E10B                       	smpsAlterNote       $0B
0008B51F 8001                       	dc.b	nRst, $01
0008B521 E10C                       	smpsAlterNote       $0C
0008B523 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
0008B527 E10B                       	smpsAlterNote       $0B
0008B529 CB0D                       	dc.b	nD6, $0D
0008B52B E105                       	smpsAlterNote       $05
0008B52D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B531 E108                       	smpsAlterNote       $08
0008B533 E701                       	dc.b	smpsNoAttack, $01
0008B535 E10E                       	smpsAlterNote       $0E
0008B537 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B53B E108                       	smpsAlterNote       $08
0008B53D E701                       	dc.b	smpsNoAttack, $01
0008B53F E105                       	smpsAlterNote       $05
0008B541 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B545 E10B                       	smpsAlterNote       $0B
0008B547 E701                       	dc.b	smpsNoAttack, $01
0008B549 E10F                       	smpsAlterNote       $0F
0008B54B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B54F E10C                       	smpsAlterNote       $0C
0008B551 CC0D                       	dc.b	nEb6, $0D
0008B553 E106                       	smpsAlterNote       $06
0008B555 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B559 E109                       	smpsAlterNote       $09
0008B55B E701                       	dc.b	smpsNoAttack, $01
0008B55D E10C                       	smpsAlterNote       $0C
0008B55F 8001                       	dc.b	nRst, $01
0008B561 E10A                       	smpsAlterNote       $0A
0008B563 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008B56F CB0E                       	dc.b	nD6, $0E
0008B571 E105                       	smpsAlterNote       $05
0008B573 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B577 E10B                       	smpsAlterNote       $0B
0008B579 E701                       	dc.b	smpsNoAttack, $01
0008B57B E10E                       	smpsAlterNote       $0E
0008B57D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B581 E108                       	smpsAlterNote       $08
0008B583 E701                       	dc.b	smpsNoAttack, $01
0008B585 E104                       	smpsAlterNote       $04
0008B587 E701                       	dc.b	smpsNoAttack, $01
0008B589 E105                       	smpsAlterNote       $05
0008B58B E701                       	dc.b	smpsNoAttack, $01
0008B58D E10B                       	smpsAlterNote       $0B
0008B58F E701                       	dc.b	smpsNoAttack, $01
0008B591 E10F                       	smpsAlterNote       $0F
0008B593 E701                       	dc.b	smpsNoAttack, $01
0008B595 E10D                       	smpsAlterNote       $0D
0008B597 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
0008B59B E10C                       	smpsAlterNote       $0C
0008B59D CC06 8001                  	dc.b	nEb6, $06, nRst, $01
0008B5A1 E10A                       	smpsAlterNote       $0A
0008B5A3 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
0008B5AF CB0D                       	dc.b	nD6, $0D
0008B5B1 E108                       	smpsAlterNote       $08
0008B5B3 E701                       	dc.b	smpsNoAttack, $01
0008B5B5 E104                       	smpsAlterNote       $04
0008B5B7 E701                       	dc.b	smpsNoAttack, $01
0008B5B9 E105                       	smpsAlterNote       $05
0008B5BB E701                       	dc.b	smpsNoAttack, $01
0008B5BD E10B                       	smpsAlterNote       $0B
0008B5BF E701                       	dc.b	smpsNoAttack, $01
0008B5C1 E10F                       	smpsAlterNote       $0F
0008B5C3 E701                       	dc.b	smpsNoAttack, $01
0008B5C5 E10B                       	smpsAlterNote       $0B
0008B5C7 E701                       	dc.b	smpsNoAttack, $01
0008B5C9 E108                       	smpsAlterNote       $08
0008B5CB E701                       	dc.b	smpsNoAttack, $01
0008B5CD E104                       	smpsAlterNote       $04
0008B5CF E701                       	dc.b	smpsNoAttack, $01
0008B5D1 E108                       	smpsAlterNote       $08
0008B5D3 E701                       	dc.b	smpsNoAttack, $01
0008B5D5 E10E                       	smpsAlterNote       $0E
0008B5D7 E701                       	dc.b	smpsNoAttack, $01
0008B5D9 E10F                       	smpsAlterNote       $0F
0008B5DB E701                       	dc.b	smpsNoAttack, $01
0008B5DD E10C                       	smpsAlterNote       $0C
0008B5DF CC0D                       	dc.b	nEb6, $0D
0008B5E1 E109                       	smpsAlterNote       $09
0008B5E3 E701                       	dc.b	smpsNoAttack, $01
0008B5E5 E105                       	smpsAlterNote       $05
0008B5E7 E701                       	dc.b	smpsNoAttack, $01
0008B5E9 E106                       	smpsAlterNote       $06
0008B5EB E701                       	dc.b	smpsNoAttack, $01
0008B5ED E10C                       	smpsAlterNote       $0C
0008B5EF E701                       	dc.b	smpsNoAttack, $01
0008B5F1 E10A                       	smpsAlterNote       $0A
0008B5F3 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
0008B5FF CB0D                       	dc.b	nD6, $0D
0008B601 E108                       	smpsAlterNote       $08
0008B603 E701                       	dc.b	smpsNoAttack, $01
0008B605 E104                       	smpsAlterNote       $04
0008B607 E701                       	dc.b	smpsNoAttack, $01
0008B609 E108                       	smpsAlterNote       $08
0008B60B E701                       	dc.b	smpsNoAttack, $01
0008B60D E10B                       	smpsAlterNote       $0B
0008B60F E701                       	dc.b	smpsNoAttack, $01
0008B611 E10F                       	smpsAlterNote       $0F
0008B613 E701                       	dc.b	smpsNoAttack, $01
0008B615 E10B                       	smpsAlterNote       $0B
0008B617 E701                       	dc.b	smpsNoAttack, $01
0008B619 E105                       	smpsAlterNote       $05
0008B61B E701                       	dc.b	smpsNoAttack, $01
0008B61D E104                       	smpsAlterNote       $04
0008B61F E701                       	dc.b	smpsNoAttack, $01
0008B621 E108                       	smpsAlterNote       $08
0008B623 E701                       	dc.b	smpsNoAttack, $01
0008B625 E10E                       	smpsAlterNote       $0E
0008B627 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B62B E10B                       	smpsAlterNote       $0B
0008B62D E701                       	dc.b	smpsNoAttack, $01
0008B62F E105                       	smpsAlterNote       $05
0008B631 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
0008B639 03                         	dc.b	$03
0008B63A E601                       	smpsAlterVol        $01
0008B63C F6F1 D1                    	smpsJump            music84_Jump01
0008B63F                            
0008B63F                            ; FM5 Data
0008B63F                            music84_FM5:
0008B641 E080                       	smpsPan             panLeft, $00
0008B643 8003                       	dc.b	nRst, $03
0008B645 E10D                       	smpsAlterNote       $0D
0008B647 C203 8008                  	dc.b	nF5, $03, nRst, $08
0008B64B E10C                       	smpsAlterNote       $0C
0008B64D C103 800A                  	dc.b	nE5, $03, nRst, $0A
0008B651 E10F                       	smpsAlterNote       $0F
0008B653 BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008B659 E6FE                       	smpsAlterVol        $FE
0008B65B C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
0008B661 E10D                       	smpsAlterNote       $0D
0008B663 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008B669 E10C                       	smpsAlterNote       $0C
0008B66B C102 8001                  	dc.b	nE5, $02, nRst, $01
0008B66F E10A                       	smpsAlterNote       $0A
0008B671 BD01 8001                  	dc.b	nC5, $01, nRst, $01
0008B677 03                         	dc.b	$03
0008B678                            
0008B678                            music84_Jump00:
0008B678 8004                       	dc.b	nRst, $04
0008B67A E602                       	smpsAlterVol        $02
0008B67C E10D                       	smpsAlterNote       $0D
0008B67E B60D                       	dc.b	nF4, $0D
0008B680 E107                       	smpsAlterNote       $07
0008B682 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B686 E10A                       	smpsAlterNote       $0A
0008B688 E701                       	dc.b	smpsNoAttack, $01
0008B68A E110                       	smpsAlterNote       $10
0008B68C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B690 E10A                       	smpsAlterNote       $0A
0008B692 E701                       	dc.b	smpsNoAttack, $01
0008B694 E107                       	smpsAlterNote       $07
0008B696 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B69A E10D                       	smpsAlterNote       $0D
0008B69C E701                       	dc.b	smpsNoAttack, $01
0008B69E E111                       	smpsAlterNote       $11
0008B6A0 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B6A4 E10D                       	smpsAlterNote       $0D
0008B6A6 B80D                       	dc.b	nG4, $0D
0008B6A8 E107                       	smpsAlterNote       $07
0008B6AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6AE E10A                       	smpsAlterNote       $0A
0008B6B0 E701                       	dc.b	smpsNoAttack, $01
0008B6B2 E110                       	smpsAlterNote       $10
0008B6B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6B8 E10A                       	smpsAlterNote       $0A
0008B6BA E701                       	dc.b	smpsNoAttack, $01
0008B6BC E107                       	smpsAlterNote       $07
0008B6BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6C2 E10D                       	smpsAlterNote       $0D
0008B6C4 E701                       	dc.b	smpsNoAttack, $01
0008B6C6 E111                       	smpsAlterNote       $11
0008B6C8 E701                       	dc.b	smpsNoAttack, $01
0008B6CA E110                       	smpsAlterNote       $10
0008B6CC E701                       	dc.b	smpsNoAttack, $01
0008B6CE E10A                       	smpsAlterNote       $0A
0008B6D0 E701                       	dc.b	smpsNoAttack, $01
0008B6D2 E106                       	smpsAlterNote       $06
0008B6D4 E701                       	dc.b	smpsNoAttack, $01
0008B6D6 E10A                       	smpsAlterNote       $0A
0008B6D8 E701                       	dc.b	smpsNoAttack, $01
0008B6DA E10D                       	smpsAlterNote       $0D
0008B6DC E701                       	dc.b	smpsNoAttack, $01
0008B6DE E111                       	smpsAlterNote       $11
0008B6E0 E701                       	dc.b	smpsNoAttack, $01
0008B6E2 E10D                       	smpsAlterNote       $0D
0008B6E4 E701                       	dc.b	smpsNoAttack, $01
0008B6E6 E10F                       	smpsAlterNote       $0F
0008B6E8 BA0E                       	dc.b	nA4, $0E
0008B6EA E109                       	smpsAlterNote       $09
0008B6EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6F0 E10F                       	smpsAlterNote       $0F
0008B6F2 E701                       	dc.b	smpsNoAttack, $01
0008B6F4 E112                       	smpsAlterNote       $12
0008B6F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6FA E10C                       	smpsAlterNote       $0C
0008B6FC E701                       	dc.b	smpsNoAttack, $01
0008B6FE E108                       	smpsAlterNote       $08
0008B700 E701                       	dc.b	smpsNoAttack, $01
0008B702 E109                       	smpsAlterNote       $09
0008B704 E701                       	dc.b	smpsNoAttack, $01
0008B706 E10F                       	smpsAlterNote       $0F
0008B708 E701                       	dc.b	smpsNoAttack, $01
0008B70A E113                       	smpsAlterNote       $13
0008B70C E701                       	dc.b	smpsNoAttack, $01
0008B70E E10F                       	smpsAlterNote       $0F
0008B710 E701                       	dc.b	smpsNoAttack, $01
0008B712 E109                       	smpsAlterNote       $09
0008B714 E701                       	dc.b	smpsNoAttack, $01
0008B716 E108                       	smpsAlterNote       $08
0008B718 E701                       	dc.b	smpsNoAttack, $01
0008B71A E10C                       	smpsAlterNote       $0C
0008B71C E701                       	dc.b	smpsNoAttack, $01
0008B71E E112                       	smpsAlterNote       $12
0008B720 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B724 E10F                       	smpsAlterNote       $0F
0008B726 E701                       	dc.b	smpsNoAttack, $01
0008B728 E109                       	smpsAlterNote       $09
0008B72A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B72E E10F                       	smpsAlterNote       $0F
0008B730 E701                       	dc.b	smpsNoAttack, $01
0008B732 E112                       	smpsAlterNote       $12
0008B734 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B738 E10C                       	smpsAlterNote       $0C
0008B73A E701                       	dc.b	smpsNoAttack, $01
0008B73C E108                       	smpsAlterNote       $08
0008B73E E701                       	dc.b	smpsNoAttack, $01
0008B740 E109                       	smpsAlterNote       $09
0008B742 E701                       	dc.b	smpsNoAttack, $01
0008B744 E10F                       	smpsAlterNote       $0F
0008B746 E701                       	dc.b	smpsNoAttack, $01
0008B748 E113                       	smpsAlterNote       $13
0008B74A E701                       	dc.b	smpsNoAttack, $01
0008B74C E10F                       	smpsAlterNote       $0F
0008B74E E701                       	dc.b	smpsNoAttack, $01
0008B750 E10C                       	smpsAlterNote       $0C
0008B752 E701                       	dc.b	smpsNoAttack, $01
0008B754 E108                       	smpsAlterNote       $08
0008B756 E701                       	dc.b	smpsNoAttack, $01
0008B758 E109                       	smpsAlterNote       $09
0008B75A 8001                       	dc.b	nRst, $01
0008B75C E10C                       	smpsAlterNote       $0C
0008B75E B50A                       	dc.b	nE4, $0A
0008B760 E10D                       	smpsAlterNote       $0D
0008B762 B60D                       	dc.b	nF4, $0D
0008B764 E10A                       	smpsAlterNote       $0A
0008B766 E701                       	dc.b	smpsNoAttack, $01
0008B768 E106                       	smpsAlterNote       $06
0008B76A E701                       	dc.b	smpsNoAttack, $01
0008B76C E107                       	smpsAlterNote       $07
0008B76E E701                       	dc.b	smpsNoAttack, $01
0008B770 E10D                       	smpsAlterNote       $0D
0008B772 E701                       	dc.b	smpsNoAttack, $01
0008B774 E111                       	smpsAlterNote       $11
0008B776 E701                       	dc.b	smpsNoAttack, $01
0008B778 E10D                       	smpsAlterNote       $0D
0008B77A E701                       	dc.b	smpsNoAttack, $01
0008B77C E10A                       	smpsAlterNote       $0A
0008B77E E701                       	dc.b	smpsNoAttack, $01
0008B780 E106                       	smpsAlterNote       $06
0008B782 E701                       	dc.b	smpsNoAttack, $01
0008B784 E10A                       	smpsAlterNote       $0A
0008B786 E701                       	dc.b	smpsNoAttack, $01
0008B788 E110                       	smpsAlterNote       $10
0008B78A E701                       	dc.b	smpsNoAttack, $01
0008B78C E111                       	smpsAlterNote       $11
0008B78E E701                       	dc.b	smpsNoAttack, $01
0008B790 E10D                       	smpsAlterNote       $0D
0008B792 B80D                       	dc.b	nG4, $0D
0008B794 E10A                       	smpsAlterNote       $0A
0008B796 E701                       	dc.b	smpsNoAttack, $01
0008B798 E106                       	smpsAlterNote       $06
0008B79A E701                       	dc.b	smpsNoAttack, $01
0008B79C E107                       	smpsAlterNote       $07
0008B79E E701                       	dc.b	smpsNoAttack, $01
0008B7A0 E10D                       	smpsAlterNote       $0D
0008B7A2 E701                       	dc.b	smpsNoAttack, $01
0008B7A4 E111                       	smpsAlterNote       $11
0008B7A6 E701                       	dc.b	smpsNoAttack, $01
0008B7A8 E10D                       	smpsAlterNote       $0D
0008B7AA E701                       	dc.b	smpsNoAttack, $01
0008B7AC E10A                       	smpsAlterNote       $0A
0008B7AE E701                       	dc.b	smpsNoAttack, $01
0008B7B0 E106                       	smpsAlterNote       $06
0008B7B2 E701                       	dc.b	smpsNoAttack, $01
0008B7B4 E10A                       	smpsAlterNote       $0A
0008B7B6 E701                       	dc.b	smpsNoAttack, $01
0008B7B8 E110                       	smpsAlterNote       $10
0008B7BA E701                       	dc.b	smpsNoAttack, $01
0008B7BC E111                       	smpsAlterNote       $11
0008B7BE E701                       	dc.b	smpsNoAttack, $01
0008B7C0 E10D                       	smpsAlterNote       $0D
0008B7C2 E701                       	dc.b	smpsNoAttack, $01
0008B7C4 E107                       	smpsAlterNote       $07
0008B7C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7CA E10A                       	smpsAlterNote       $0A
0008B7CC E701                       	dc.b	smpsNoAttack, $01
0008B7CE E110                       	smpsAlterNote       $10
0008B7D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7D4 E10D                       	smpsAlterNote       $0D
0008B7D6 8001                       	dc.b	nRst, $01
0008B7D8 E10F                       	smpsAlterNote       $0F
0008B7DA BA0D                       	dc.b	nA4, $0D
0008B7DC E10C                       	smpsAlterNote       $0C
0008B7DE E701                       	dc.b	smpsNoAttack, $01
0008B7E0 E108                       	smpsAlterNote       $08
0008B7E2 E701                       	dc.b	smpsNoAttack, $01
0008B7E4 E10C                       	smpsAlterNote       $0C
0008B7E6 E701                       	dc.b	smpsNoAttack, $01
0008B7E8 E112                       	smpsAlterNote       $12
0008B7EA E701                       	dc.b	smpsNoAttack, $01
0008B7EC E113                       	smpsAlterNote       $13
0008B7EE E701                       	dc.b	smpsNoAttack, $01
0008B7F0 E10F                       	smpsAlterNote       $0F
0008B7F2 E701                       	dc.b	smpsNoAttack, $01
0008B7F4 E109                       	smpsAlterNote       $09
0008B7F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7FA E10C                       	smpsAlterNote       $0C
0008B7FC E701                       	dc.b	smpsNoAttack, $01
0008B7FE E112                       	smpsAlterNote       $12
0008B800 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B804 E10C                       	smpsAlterNote       $0C
0008B806 E701                       	dc.b	smpsNoAttack, $01
0008B808 E109                       	smpsAlterNote       $09
0008B80A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B80E E10F                       	smpsAlterNote       $0F
0008B810 E701                       	dc.b	smpsNoAttack, $01
0008B812 E113                       	smpsAlterNote       $13
0008B814 E701                       	dc.b	smpsNoAttack, $01
0008B816 E112                       	smpsAlterNote       $12
0008B818 E701                       	dc.b	smpsNoAttack, $01
0008B81A E10C                       	smpsAlterNote       $0C
0008B81C E701                       	dc.b	smpsNoAttack, $01
0008B81E E108                       	smpsAlterNote       $08
0008B820 E701                       	dc.b	smpsNoAttack, $01
0008B822 E10C                       	smpsAlterNote       $0C
0008B824 E701                       	dc.b	smpsNoAttack, $01
0008B826 E10F                       	smpsAlterNote       $0F
0008B828 E701                       	dc.b	smpsNoAttack, $01
0008B82A E113                       	smpsAlterNote       $13
0008B82C E701                       	dc.b	smpsNoAttack, $01
0008B82E E10F                       	smpsAlterNote       $0F
0008B830 E701                       	dc.b	smpsNoAttack, $01
0008B832 E109                       	smpsAlterNote       $09
0008B834 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B838 E10D                       	smpsAlterNote       $0D
0008B83A B609 8001                  	dc.b	nF4, $09, nRst, $01
0008B83E E10C                       	smpsAlterNote       $0C
0008B840 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008B844 E10B                       	smpsAlterNote       $0B
0008B846 B30D                       	dc.b	nD4, $0D
0008B848 E10C                       	smpsAlterNote       $0C
0008B84A B503 8001                  	dc.b	nE4, $03, nRst, $01
0008B84E E10D                       	smpsAlterNote       $0D
0008B850 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
0008B858 E109                       	smpsAlterNote       $09
0008B85A E701                       	dc.b	smpsNoAttack, $01
0008B85C E108                       	smpsAlterNote       $08
0008B85E E701                       	dc.b	smpsNoAttack, $01
0008B860 E10C                       	smpsAlterNote       $0C
0008B862 E701                       	dc.b	smpsNoAttack, $01
0008B864 E112                       	smpsAlterNote       $12
0008B866 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B86A E10F                       	smpsAlterNote       $0F
0008B86C E701                       	dc.b	smpsNoAttack, $01
0008B86E E109                       	smpsAlterNote       $09
0008B870 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B874 E10F                       	smpsAlterNote       $0F
0008B876 E701                       	dc.b	smpsNoAttack, $01
0008B878 E112                       	smpsAlterNote       $12
0008B87A E701                       	dc.b	smpsNoAttack, $01
0008B87C E113                       	smpsAlterNote       $13
0008B87E 8001                       	dc.b	nRst, $01
0008B880 E10D                       	smpsAlterNote       $0D
0008B882 C20D                       	dc.b	nF5, $0D
0008B884 E107                       	smpsAlterNote       $07
0008B886 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B88A E10A                       	smpsAlterNote       $0A
0008B88C E701                       	dc.b	smpsNoAttack, $01
0008B88E E110                       	smpsAlterNote       $10
0008B890 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B894 E10A                       	smpsAlterNote       $0A
0008B896 E701                       	dc.b	smpsNoAttack, $01
0008B898 E107                       	smpsAlterNote       $07
0008B89A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B89E E10D                       	smpsAlterNote       $0D
0008B8A0 E701                       	dc.b	smpsNoAttack, $01
0008B8A2 E111                       	smpsAlterNote       $11
0008B8A4 E701                       	dc.b	smpsNoAttack, $01
0008B8A6 E110                       	smpsAlterNote       $10
0008B8A8 E701                       	dc.b	smpsNoAttack, $01
0008B8AA E10A                       	smpsAlterNote       $0A
0008B8AC E701                       	dc.b	smpsNoAttack, $01
0008B8AE E106                       	smpsAlterNote       $06
0008B8B0 E701                       	dc.b	smpsNoAttack, $01
0008B8B2 E10A                       	smpsAlterNote       $0A
0008B8B4 E701                       	dc.b	smpsNoAttack, $01
0008B8B6 E10D                       	smpsAlterNote       $0D
0008B8B8 E701                       	dc.b	smpsNoAttack, $01
0008B8BA E111                       	smpsAlterNote       $11
0008B8BC E701                       	dc.b	smpsNoAttack, $01
0008B8BE E10D                       	smpsAlterNote       $0D
0008B8C0 E701                       	dc.b	smpsNoAttack, $01
0008B8C2 E107                       	smpsAlterNote       $07
0008B8C4 E701                       	dc.b	smpsNoAttack, $01
0008B8C6 E106                       	smpsAlterNote       $06
0008B8C8 E701                       	dc.b	smpsNoAttack, $01
0008B8CA E10A                       	smpsAlterNote       $0A
0008B8CC E701                       	dc.b	smpsNoAttack, $01
0008B8CE E110                       	smpsAlterNote       $10
0008B8D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8D4 E10D                       	smpsAlterNote       $0D
0008B8D6 E701                       	dc.b	smpsNoAttack, $01
0008B8D8 E107                       	smpsAlterNote       $07
0008B8DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8DE E10D                       	smpsAlterNote       $0D
0008B8E0 E701                       	dc.b	smpsNoAttack, $01
0008B8E2 E110                       	smpsAlterNote       $10
0008B8E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8E8 E10A                       	smpsAlterNote       $0A
0008B8EA E701                       	dc.b	smpsNoAttack, $01
0008B8EC E106                       	smpsAlterNote       $06
0008B8EE E701                       	dc.b	smpsNoAttack, $01
0008B8F0 E107                       	smpsAlterNote       $07
0008B8F2 E701                       	dc.b	smpsNoAttack, $01
0008B8F4 E10D                       	smpsAlterNote       $0D
0008B8F6 E701                       	dc.b	smpsNoAttack, $01
0008B8F8 E111                       	smpsAlterNote       $11
0008B8FA E701                       	dc.b	smpsNoAttack, $01
0008B8FC E10D                       	smpsAlterNote       $0D
0008B8FE E701                       	dc.b	smpsNoAttack, $01
0008B900 E10A                       	smpsAlterNote       $0A
0008B902 E701                       	dc.b	smpsNoAttack, $01
0008B904 E106                       	smpsAlterNote       $06
0008B906 E701                       	dc.b	smpsNoAttack, $01
0008B908 E10A                       	smpsAlterNote       $0A
0008B90A E701                       	dc.b	smpsNoAttack, $01
0008B90C E110                       	smpsAlterNote       $10
0008B90E E701                       	dc.b	smpsNoAttack, $01
0008B910 E111                       	smpsAlterNote       $11
0008B912 E701                       	dc.b	smpsNoAttack, $01
0008B914 E10D                       	smpsAlterNote       $0D
0008B916 E701                       	dc.b	smpsNoAttack, $01
0008B918 E107                       	smpsAlterNote       $07
0008B91A E701                       	dc.b	smpsNoAttack, $01
0008B91C E10D                       	smpsAlterNote       $0D
0008B91E C207                       	dc.b	nF5, $07
0008B920 E10C                       	smpsAlterNote       $0C
0008B922 C10D                       	dc.b	nE5, $0D
0008B924 E109                       	smpsAlterNote       $09
0008B926 E701                       	dc.b	smpsNoAttack, $01
0008B928 E106                       	smpsAlterNote       $06
0008B92A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B92E E10C                       	smpsAlterNote       $0C
0008B930 E701                       	dc.b	smpsNoAttack, $01
0008B932 E110                       	smpsAlterNote       $10
0008B934 E701                       	dc.b	smpsNoAttack, $01
0008B936 E10F                       	smpsAlterNote       $0F
0008B938 E701                       	dc.b	smpsNoAttack, $01
0008B93A E109                       	smpsAlterNote       $09
0008B93C E701                       	dc.b	smpsNoAttack, $01
0008B93E E105                       	smpsAlterNote       $05
0008B940 E701                       	dc.b	smpsNoAttack, $01
0008B942 E109                       	smpsAlterNote       $09
0008B944 E701                       	dc.b	smpsNoAttack, $01
0008B946 E10C                       	smpsAlterNote       $0C
0008B948 E701                       	dc.b	smpsNoAttack, $01
0008B94A E110                       	smpsAlterNote       $10
0008B94C E701                       	dc.b	smpsNoAttack, $01
0008B94E E10B                       	smpsAlterNote       $0B
0008B950 BF0D                       	dc.b	nD5, $0D
0008B952 E108                       	smpsAlterNote       $08
0008B954 E701                       	dc.b	smpsNoAttack, $01
0008B956 E105                       	smpsAlterNote       $05
0008B958 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B95C E10B                       	smpsAlterNote       $0B
0008B95E E701                       	dc.b	smpsNoAttack, $01
0008B960 E10F                       	smpsAlterNote       $0F
0008B962 E701                       	dc.b	smpsNoAttack, $01
0008B964 E10E                       	smpsAlterNote       $0E
0008B966 E701                       	dc.b	smpsNoAttack, $01
0008B968 E108                       	smpsAlterNote       $08
0008B96A E701                       	dc.b	smpsNoAttack, $01
0008B96C E104                       	smpsAlterNote       $04
0008B96E E701                       	dc.b	smpsNoAttack, $01
0008B970 E108                       	smpsAlterNote       $08
0008B972 E701                       	dc.b	smpsNoAttack, $01
0008B974 E10E                       	smpsAlterNote       $0E
0008B976 E701                       	dc.b	smpsNoAttack, $01
0008B978 E10F                       	smpsAlterNote       $0F
0008B97A E701                       	dc.b	smpsNoAttack, $01
0008B97C E10B                       	smpsAlterNote       $0B
0008B97E E701                       	dc.b	smpsNoAttack, $01
0008B980 E105                       	smpsAlterNote       $05
0008B982 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B986 E108                       	smpsAlterNote       $08
0008B988 E701                       	dc.b	smpsNoAttack, $01
0008B98A E10E                       	smpsAlterNote       $0E
0008B98C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B990 E108                       	smpsAlterNote       $08
0008B992 E701                       	dc.b	smpsNoAttack, $01
0008B994 E105                       	smpsAlterNote       $05
0008B996 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B99A E10B                       	smpsAlterNote       $0B
0008B99C E701                       	dc.b	smpsNoAttack, $01
0008B99E E10F                       	smpsAlterNote       $0F
0008B9A0 E701                       	dc.b	smpsNoAttack, $01
0008B9A2 E10E                       	smpsAlterNote       $0E
0008B9A4 E701                       	dc.b	smpsNoAttack, $01
0008B9A6 E108                       	smpsAlterNote       $08
0008B9A8 E701                       	dc.b	smpsNoAttack, $01
0008B9AA E104                       	smpsAlterNote       $04
0008B9AC E701                       	dc.b	smpsNoAttack, $01
0008B9AE E108                       	smpsAlterNote       $08
0008B9B0 E701                       	dc.b	smpsNoAttack, $01
0008B9B2 E10B                       	smpsAlterNote       $0B
0008B9B4 E701                       	dc.b	smpsNoAttack, $01
0008B9B6 E10F                       	smpsAlterNote       $0F
0008B9B8 E701                       	dc.b	smpsNoAttack, $01
0008B9BA E10B                       	smpsAlterNote       $0B
0008B9BC E701                       	dc.b	smpsNoAttack, $01
0008B9BE E105                       	smpsAlterNote       $05
0008B9C0 E701                       	dc.b	smpsNoAttack, $01
0008B9C2 E104                       	smpsAlterNote       $04
0008B9C4 E701                       	dc.b	smpsNoAttack, $01
0008B9C6 E108                       	smpsAlterNote       $08
0008B9C8 E701                       	dc.b	smpsNoAttack, $01
0008B9CA E10E                       	smpsAlterNote       $0E
0008B9CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9D0 E10B                       	smpsAlterNote       $0B
0008B9D2 E701                       	dc.b	smpsNoAttack, $01
0008B9D4 E105                       	smpsAlterNote       $05
0008B9D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9DA E10B                       	smpsAlterNote       $0B
0008B9DC E701                       	dc.b	smpsNoAttack, $01
0008B9DE E10E                       	smpsAlterNote       $0E
0008B9E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9E4 E108                       	smpsAlterNote       $08
0008B9E6 E701                       	dc.b	smpsNoAttack, $01
0008B9E8 E105                       	smpsAlterNote       $05
0008B9EA 8001                       	dc.b	nRst, $01
0008B9EE E601                       	smpsAlterVol        $01
0008B9F0 E10B                       	smpsAlterNote       $0B
0008B9F2 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008B9FE 8004                       	dc.b	nRst, $04
0008BA02 E6FF                       	smpsAlterVol        $FF
0008BA04 E10D                       	smpsAlterNote       $0D
0008BA06 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
0008BA0E E10C                       	smpsAlterNote       $0C
0008BA10 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
0008BA15 E10D                       	smpsAlterNote       $0D
0008BA17 B60D                       	dc.b	nF4, $0D
0008BA19 E10A                       	smpsAlterNote       $0A
0008BA1B E701                       	dc.b	smpsNoAttack, $01
0008BA1D E106                       	smpsAlterNote       $06
0008BA1F E701                       	dc.b	smpsNoAttack, $01
0008BA21 E10A                       	smpsAlterNote       $0A
0008BA23 E701                       	dc.b	smpsNoAttack, $01
0008BA25 E110                       	smpsAlterNote       $10
0008BA27 E701                       	dc.b	smpsNoAttack, $01
0008BA29 E111                       	smpsAlterNote       $11
0008BA2B E701                       	dc.b	smpsNoAttack, $01
0008BA2D E10D                       	smpsAlterNote       $0D
0008BA2F E701                       	dc.b	smpsNoAttack, $01
0008BA31 E107                       	smpsAlterNote       $07
0008BA33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA37 E10A                       	smpsAlterNote       $0A
0008BA39 E701                       	dc.b	smpsNoAttack, $01
0008BA3B E110                       	smpsAlterNote       $10
0008BA3D E701                       	dc.b	smpsNoAttack, $01
0008BA3F E111                       	smpsAlterNote       $11
0008BA41 8001                       	dc.b	nRst, $01
0008BA43 E10D                       	smpsAlterNote       $0D
0008BA45 B80D                       	dc.b	nG4, $0D
0008BA47 E10A                       	smpsAlterNote       $0A
0008BA49 E701                       	dc.b	smpsNoAttack, $01
0008BA4B E106                       	smpsAlterNote       $06
0008BA4D E701                       	dc.b	smpsNoAttack, $01
0008BA4F E10A                       	smpsAlterNote       $0A
0008BA51 E701                       	dc.b	smpsNoAttack, $01
0008BA53 E110                       	smpsAlterNote       $10
0008BA55 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA59 E10D                       	smpsAlterNote       $0D
0008BA5B E701                       	dc.b	smpsNoAttack, $01
0008BA5D E107                       	smpsAlterNote       $07
0008BA5F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA63 E10D                       	smpsAlterNote       $0D
0008BA65 E701                       	dc.b	smpsNoAttack, $01
0008BA67 E110                       	smpsAlterNote       $10
0008BA69 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA6D E10A                       	smpsAlterNote       $0A
0008BA6F E701                       	dc.b	smpsNoAttack, $01
0008BA71 E106                       	smpsAlterNote       $06
0008BA73 E701                       	dc.b	smpsNoAttack, $01
0008BA75 E107                       	smpsAlterNote       $07
0008BA77 E701                       	dc.b	smpsNoAttack, $01
0008BA79 E10D                       	smpsAlterNote       $0D
0008BA7B E701                       	dc.b	smpsNoAttack, $01
0008BA7D E111                       	smpsAlterNote       $11
0008BA7F E701                       	dc.b	smpsNoAttack, $01
0008BA81 E10D                       	smpsAlterNote       $0D
0008BA83 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BA87 E10F                       	smpsAlterNote       $0F
0008BA89 BA02 8001                  	dc.b	nA4, $02, nRst, $01
0008BA8D E110                       	smpsAlterNote       $10
0008BA8F BB03                       	dc.b	nBb4, $03
0008BA91 E10F                       	smpsAlterNote       $0F
0008BA93 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
0008BA99 E110                       	smpsAlterNote       $10
0008BA9B C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008BA9F E10F                       	smpsAlterNote       $0F
0008BAA1 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008BAA7 E110                       	smpsAlterNote       $10
0008BAA9 D302 8001                  	dc.b	nBb6, $02, nRst, $01
0008BAAD E10F                       	smpsAlterNote       $0F
0008BAAF D20D                       	dc.b	nA6, $0D
0008BAB1 E10C                       	smpsAlterNote       $0C
0008BAB3 E701                       	dc.b	smpsNoAttack, $01
0008BAB5 E108                       	smpsAlterNote       $08
0008BAB7 E701                       	dc.b	smpsNoAttack, $01
0008BAB9 E10C                       	smpsAlterNote       $0C
0008BABB E701                       	dc.b	smpsNoAttack, $01
0008BABD E10F                       	smpsAlterNote       $0F
0008BABF E701                       	dc.b	smpsNoAttack, $01
0008BAC1 E113                       	smpsAlterNote       $13
0008BAC3 E701                       	dc.b	smpsNoAttack, $01
0008BAC5 E10F                       	smpsAlterNote       $0F
0008BAC7 E701                       	dc.b	smpsNoAttack, $01
0008BAC9 E109                       	smpsAlterNote       $09
0008BACB E701                       	dc.b	smpsNoAttack, $01
0008BACD E108                       	smpsAlterNote       $08
0008BACF E701                       	dc.b	smpsNoAttack, $01
0008BAD1 E10C                       	smpsAlterNote       $0C
0008BAD3 E701                       	dc.b	smpsNoAttack, $01
0008BAD5 E112                       	smpsAlterNote       $12
0008BAD7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BADB E10F                       	smpsAlterNote       $0F
0008BADD E701                       	dc.b	smpsNoAttack, $01
0008BADF E109                       	smpsAlterNote       $09
0008BAE1 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008BAE7 E10D                       	smpsAlterNote       $0D
0008BAE9 CE07                       	dc.b	nF6, $07
0008BAEB E10C                       	smpsAlterNote       $0C
0008BAED CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008BAF1 E10D                       	smpsAlterNote       $0D
0008BAF3 CE03                       	dc.b	nF6, $03
0008BAF5 E10C                       	smpsAlterNote       $0C
0008BAF7 CC0D                       	dc.b	nEb6, $0D
0008BAF9 E109                       	smpsAlterNote       $09
0008BAFB E701                       	dc.b	smpsNoAttack, $01
0008BAFD E106                       	smpsAlterNote       $06
0008BAFF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB03 E10C                       	smpsAlterNote       $0C
0008BB05 E701                       	dc.b	smpsNoAttack, $01
0008BB07 E110                       	smpsAlterNote       $10
0008BB09 E701                       	dc.b	smpsNoAttack, $01
0008BB0B E10F                       	smpsAlterNote       $0F
0008BB0D E701                       	dc.b	smpsNoAttack, $01
0008BB0F E109                       	smpsAlterNote       $09
0008BB11 E701                       	dc.b	smpsNoAttack, $01
0008BB13 E105                       	smpsAlterNote       $05
0008BB15 E701                       	dc.b	smpsNoAttack, $01
0008BB17 E109                       	smpsAlterNote       $09
0008BB19 E701                       	dc.b	smpsNoAttack, $01
0008BB1B E10C                       	smpsAlterNote       $0C
0008BB1D E701                       	dc.b	smpsNoAttack, $01
0008BB1F E110                       	smpsAlterNote       $10
0008BB21 E701                       	dc.b	smpsNoAttack, $01
0008BB23 E10C                       	smpsAlterNote       $0C
0008BB25 E701                       	dc.b	smpsNoAttack, $01
0008BB27 E106                       	smpsAlterNote       $06
0008BB29 E701                       	dc.b	smpsNoAttack, $01
0008BB2B E105                       	smpsAlterNote       $05
0008BB2D E701                       	dc.b	smpsNoAttack, $01
0008BB2F E109                       	smpsAlterNote       $09
0008BB31 E701                       	dc.b	smpsNoAttack, $01
0008BB33 E10F                       	smpsAlterNote       $0F
0008BB35 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB39 E10C                       	smpsAlterNote       $0C
0008BB3B E701                       	dc.b	smpsNoAttack, $01
0008BB3D E10B                       	smpsAlterNote       $0B
0008BB3F CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
0008BB49 E10F                       	smpsAlterNote       $0F
0008BB4B C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008BB55 E10D                       	smpsAlterNote       $0D
0008BB57 C203                       	dc.b	nF5, $03
0008BB59 E10C                       	smpsAlterNote       $0C
0008BB5B C103 8001                  	dc.b	nE5, $03, nRst, $01
0008BB5F E10D                       	smpsAlterNote       $0D
0008BB61 C20D                       	dc.b	nF5, $0D
0008BB63 E10C                       	smpsAlterNote       $0C
0008BB65 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
0008BB69 E10B                       	smpsAlterNote       $0B
0008BB6B BF0D                       	dc.b	nD5, $0D
0008BB6D E108                       	smpsAlterNote       $08
0008BB6F E701                       	dc.b	smpsNoAttack, $01
0008BB71 E104                       	smpsAlterNote       $04
0008BB73 E701                       	dc.b	smpsNoAttack, $01
0008BB75 E108                       	smpsAlterNote       $08
0008BB77 E701                       	dc.b	smpsNoAttack, $01
0008BB79 E10E                       	smpsAlterNote       $0E
0008BB7B E701                       	dc.b	smpsNoAttack, $01
0008BB7D E10F                       	smpsAlterNote       $0F
0008BB7F E701                       	dc.b	smpsNoAttack, $01
0008BB81 E10B                       	smpsAlterNote       $0B
0008BB83 E701                       	dc.b	smpsNoAttack, $01
0008BB85 E105                       	smpsAlterNote       $05
0008BB87 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB8B E108                       	smpsAlterNote       $08
0008BB8D E701                       	dc.b	smpsNoAttack, $01
0008BB8F E10E                       	smpsAlterNote       $0E
0008BB91 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB95 E108                       	smpsAlterNote       $08
0008BB97 E701                       	dc.b	smpsNoAttack, $01
0008BB99 E105                       	smpsAlterNote       $05
0008BB9B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB9F E10B                       	smpsAlterNote       $0B
0008BBA1 E701                       	dc.b	smpsNoAttack, $01
0008BBA3 E10F                       	smpsAlterNote       $0F
0008BBA5 E701                       	dc.b	smpsNoAttack, $01
0008BBA7 E10E                       	smpsAlterNote       $0E
0008BBA9 E701                       	dc.b	smpsNoAttack, $01
0008BBAB E108                       	smpsAlterNote       $08
0008BBAD E701                       	dc.b	smpsNoAttack, $01
0008BBAF E104                       	smpsAlterNote       $04
0008BBB1 E701                       	dc.b	smpsNoAttack, $01
0008BBB3 E108                       	smpsAlterNote       $08
0008BBB5 E701                       	dc.b	smpsNoAttack, $01
0008BBB7 E10B                       	smpsAlterNote       $0B
0008BBB9 E701                       	dc.b	smpsNoAttack, $01
0008BBBB E10F                       	smpsAlterNote       $0F
0008BBBD E701                       	dc.b	smpsNoAttack, $01
0008BBBF E10B                       	smpsAlterNote       $0B
0008BBC1 E701                       	dc.b	smpsNoAttack, $01
0008BBC3 E105                       	smpsAlterNote       $05
0008BBC5 E701                       	dc.b	smpsNoAttack, $01
0008BBC7 E104                       	smpsAlterNote       $04
0008BBC9 E701                       	dc.b	smpsNoAttack, $01
0008BBCB E108                       	smpsAlterNote       $08
0008BBCD E701                       	dc.b	smpsNoAttack, $01
0008BBCF E10E                       	smpsAlterNote       $0E
0008BBD1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBD5 E10B                       	smpsAlterNote       $0B
0008BBD7 E701                       	dc.b	smpsNoAttack, $01
0008BBD9 E105                       	smpsAlterNote       $05
0008BBDB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBDF E10B                       	smpsAlterNote       $0B
0008BBE1 E701                       	dc.b	smpsNoAttack, $01
0008BBE3 E10E                       	smpsAlterNote       $0E
0008BBE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBE9 E108                       	smpsAlterNote       $08
0008BBEB E701                       	dc.b	smpsNoAttack, $01
0008BBED E104                       	smpsAlterNote       $04
0008BBEF E701                       	dc.b	smpsNoAttack, $01
0008BBF1 E105                       	smpsAlterNote       $05
0008BBF3 E701                       	dc.b	smpsNoAttack, $01
0008BBF5 E10B                       	smpsAlterNote       $0B
0008BBF7 E701                       	dc.b	smpsNoAttack, $01
0008BBF9 E10F                       	smpsAlterNote       $0F
0008BBFB E701                       	dc.b	smpsNoAttack, $01
0008BBFD E10B                       	smpsAlterNote       $0B
0008BBFF E701                       	dc.b	smpsNoAttack, $01
0008BC01 E108                       	smpsAlterNote       $08
0008BC03 E701                       	dc.b	smpsNoAttack, $01
0008BC05 E104                       	smpsAlterNote       $04
0008BC07 E701                       	dc.b	smpsNoAttack, $01
0008BC09 E108                       	smpsAlterNote       $08
0008BC0B E701                       	dc.b	smpsNoAttack, $01
0008BC0D E10E                       	smpsAlterNote       $0E
0008BC0F E701                       	dc.b	smpsNoAttack, $01
0008BC11 E10F                       	smpsAlterNote       $0F
0008BC13 E701                       	dc.b	smpsNoAttack, $01
0008BC15 E10B                       	smpsAlterNote       $0B
0008BC17 E701                       	dc.b	smpsNoAttack, $01
0008BC19 E105                       	smpsAlterNote       $05
0008BC1B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC1F E108                       	smpsAlterNote       $08
0008BC21 E701                       	dc.b	smpsNoAttack, $01
0008BC23 E10E                       	smpsAlterNote       $0E
0008BC25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC29 E108                       	smpsAlterNote       $08
0008BC2B E701                       	dc.b	smpsNoAttack, $01
0008BC2D E105                       	smpsAlterNote       $05
0008BC2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC33 E10B                       	smpsAlterNote       $0B
0008BC35 E701                       	dc.b	smpsNoAttack, $01
0008BC37 E10F                       	smpsAlterNote       $0F
0008BC39 E701                       	dc.b	smpsNoAttack, $01
0008BC3B E10E                       	smpsAlterNote       $0E
0008BC3D E701                       	dc.b	smpsNoAttack, $01
0008BC3F E108                       	smpsAlterNote       $08
0008BC41 E701                       	dc.b	smpsNoAttack, $01
0008BC43 E104                       	smpsAlterNote       $04
0008BC45 E701                       	dc.b	smpsNoAttack, $01
0008BC47 E108                       	smpsAlterNote       $08
0008BC49 E701                       	dc.b	smpsNoAttack, $01
0008BC4B E10B                       	smpsAlterNote       $0B
0008BC4D E701                       	dc.b	smpsNoAttack, $01
0008BC4F E10F                       	smpsAlterNote       $0F
0008BC51 E701                       	dc.b	smpsNoAttack, $01
0008BC53 E10B                       	smpsAlterNote       $0B
0008BC55 E701                       	dc.b	smpsNoAttack, $01
0008BC57 E105                       	smpsAlterNote       $05
0008BC59 E701                       	dc.b	smpsNoAttack, $01
0008BC5B E104                       	smpsAlterNote       $04
0008BC5D E701                       	dc.b	smpsNoAttack, $01
0008BC5F E105                       	smpsAlterNote       $05
0008BC61 8001                       	dc.b	nRst, $01
0008BC63 E10D                       	smpsAlterNote       $0D
0008BC65 C20D                       	dc.b	nF5, $0D
0008BC67 E107                       	smpsAlterNote       $07
0008BC69 E701                       	dc.b	smpsNoAttack, $01
0008BC6B E106                       	smpsAlterNote       $06
0008BC6D E701                       	dc.b	smpsNoAttack, $01
0008BC6F E10A                       	smpsAlterNote       $0A
0008BC71 E701                       	dc.b	smpsNoAttack, $01
0008BC73 E110                       	smpsAlterNote       $10
0008BC75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC79 E10D                       	smpsAlterNote       $0D
0008BC7B E701                       	dc.b	smpsNoAttack, $01
0008BC7D E107                       	smpsAlterNote       $07
0008BC7F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC83 E10D                       	smpsAlterNote       $0D
0008BC85 E701                       	dc.b	smpsNoAttack, $01
0008BC87 E110                       	smpsAlterNote       $10
0008BC89 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC8D E10A                       	smpsAlterNote       $0A
0008BC8F E701                       	dc.b	smpsNoAttack, $01
0008BC91 E106                       	smpsAlterNote       $06
0008BC93 E701                       	dc.b	smpsNoAttack, $01
0008BC95 E107                       	smpsAlterNote       $07
0008BC97 E701                       	dc.b	smpsNoAttack, $01
0008BC99 E10D                       	smpsAlterNote       $0D
0008BC9B E701                       	dc.b	smpsNoAttack, $01
0008BC9D E111                       	smpsAlterNote       $11
0008BC9F E701                       	dc.b	smpsNoAttack, $01
0008BCA1 E10D                       	smpsAlterNote       $0D
0008BCA3 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BCA7 E10C                       	smpsAlterNote       $0C
0008BCA9 C10D                       	dc.b	nE5, $0D
0008BCAB E10D                       	smpsAlterNote       $0D
0008BCAD C20A                       	dc.b	nF5, $0A
0008BCAF E10C                       	smpsAlterNote       $0C
0008BCB1 C10E                       	dc.b	nE5, $0E
0008BCB3 E106                       	smpsAlterNote       $06
0008BCB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BCB9 E10C                       	smpsAlterNote       $0C
0008BCBB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BCBF E10B                       	smpsAlterNote       $0B
0008BCC1 BF0D                       	dc.b	nD5, $0D
0008BCC3 E10C                       	smpsAlterNote       $0C
0008BCC5 C107                       	dc.b	nE5, $07
0008BCC7 E10D                       	smpsAlterNote       $0D
0008BCC9 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
0008BCD3 E110                       	smpsAlterNote       $10
0008BCD5 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008BCDB E10F                       	smpsAlterNote       $0F
0008BCDD C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
0008BCE5 E10D                       	smpsAlterNote       $0D
0008BCE7 D003                       	dc.b	nG6, $03
0008BCEB E0C0                       	smpsPan             panCenter, $00
0008BCED E6FF                       	smpsAlterVol        $FF
0008BCEF AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0008BCFB 8001                       	dc.b	nRst, $01
0008BCFD E10C                       	smpsAlterNote       $0C
0008BCFF A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0008BD09 E604                       	smpsAlterVol        $04
0008BD0B E10B                       	smpsAlterNote       $0B
0008BD0D B306 8001                  	dc.b	nD4, $06, nRst, $01
0008BD11 E10F                       	smpsAlterNote       $0F
0008BD13 AE03                       	dc.b	nA3, $03
0008BD15 E10D                       	smpsAlterNote       $0D
0008BD17 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008BD1B E10C                       	smpsAlterNote       $0C
0008BD1D B506 8001                  	dc.b	nE4, $06, nRst, $01
0008BD21 E10B                       	smpsAlterNote       $0B
0008BD23 B302 8001                  	dc.b	nD4, $02, nRst, $01
0008BD27 E10A                       	smpsAlterNote       $0A
0008BD29 B103                       	dc.b	nC4, $03
0008BD2B E110                       	smpsAlterNote       $10
0008BD2D AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008BD31 E10F                       	smpsAlterNote       $0F
0008BD33 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
0008BD37 E080                       	smpsPan             panLeft, $00
0008BD39 01                         	dc.b	$01
0008BD3C E6FB                       	smpsAlterVol        $FB
0008BD3E E1E4                       	smpsAlterNote       $E4
0008BD40 C501                       	dc.b	nAb5, $01
0008BD42 E1F4                       	smpsAlterNote       $F4
0008BD44 E701                       	dc.b	smpsNoAttack, $01
0008BD46 E104                       	smpsAlterNote       $04
0008BD48 E701                       	dc.b	smpsNoAttack, $01
0008BD4A E114                       	smpsAlterNote       $14
0008BD4C E701                       	dc.b	smpsNoAttack, $01
0008BD4E E11C                       	smpsAlterNote       $1C
0008BD50 E701                       	dc.b	smpsNoAttack, $01
0008BD52 E1EF                       	smpsAlterNote       $EF
0008BD54 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008BD57 E1FF                       	smpsAlterNote       $FF
0008BD59 E701                       	dc.b	smpsNoAttack, $01
0008BD5B E10F                       	smpsAlterNote       $0F
0008BD5D C606                       	dc.b	nA5, $06
0008BD5F E109                       	smpsAlterNote       $09
0008BD61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD65 E10F                       	smpsAlterNote       $0F
0008BD67 E701                       	dc.b	smpsNoAttack, $01
0008BD69 E112                       	smpsAlterNote       $12
0008BD6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD6F E10C                       	smpsAlterNote       $0C
0008BD71 E701                       	dc.b	smpsNoAttack, $01
0008BD73 E108                       	smpsAlterNote       $08
0008BD75 E701                       	dc.b	smpsNoAttack, $01
0008BD77 E109                       	smpsAlterNote       $09
0008BD79 E701                       	dc.b	smpsNoAttack, $01
0008BD7B E10F                       	smpsAlterNote       $0F
0008BD7D E701                       	dc.b	smpsNoAttack, $01
0008BD7F E113                       	smpsAlterNote       $13
0008BD81 E701                       	dc.b	smpsNoAttack, $01
0008BD83 E10F                       	smpsAlterNote       $0F
0008BD85 E701                       	dc.b	smpsNoAttack, $01
0008BD87 E10C                       	smpsAlterNote       $0C
0008BD89 E701                       	dc.b	smpsNoAttack, $01
0008BD8B E108                       	smpsAlterNote       $08
0008BD8D E701                       	dc.b	smpsNoAttack, $01
0008BD8F E10C                       	smpsAlterNote       $0C
0008BD91 E701                       	dc.b	smpsNoAttack, $01
0008BD93 E112                       	smpsAlterNote       $12
0008BD95 E701                       	dc.b	smpsNoAttack, $01
0008BD97 E113                       	smpsAlterNote       $13
0008BD99 E701                       	dc.b	smpsNoAttack, $01
0008BD9B E10F                       	smpsAlterNote       $0F
0008BD9D E701                       	dc.b	smpsNoAttack, $01
0008BD9F E109                       	smpsAlterNote       $09
0008BDA1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BDA5 E10C                       	smpsAlterNote       $0C
0008BDA7 E701                       	dc.b	smpsNoAttack, $01
0008BDA9 E112                       	smpsAlterNote       $12
0008BDAB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BDAF E10C                       	smpsAlterNote       $0C
0008BDB1 E701                       	dc.b	smpsNoAttack, $01
0008BDB3 E109                       	smpsAlterNote       $09
0008BDB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BDB9 E10F                       	smpsAlterNote       $0F
0008BDBB E701                       	dc.b	smpsNoAttack, $01
0008BDBD E113                       	smpsAlterNote       $13
0008BDBF E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BDC3 E10D                       	smpsAlterNote       $0D
0008BDC5 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008BDCB E10C                       	smpsAlterNote       $0C
0008BDCD C102 8001                  	dc.b	nE5, $02, nRst, $01
0008BDD1 E10D                       	smpsAlterNote       $0D
0008BDD3 C201 8001                  	dc.b	nF5, $01, nRst, $01
0008BDD7 E10C                       	smpsAlterNote       $0C
0008BDD9 C102                       	dc.b	nE5, $02
0008BDDB E10B                       	smpsAlterNote       $0B
0008BDDD BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008BDE1 E10C                       	smpsAlterNote       $0C
0008BDE3 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008BDE7 E10B                       	smpsAlterNote       $0B
0008BDE9 BF02                       	dc.b	nD5, $02
0008BDEB E10A                       	smpsAlterNote       $0A
0008BDED BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
0008BDF7 E110                       	smpsAlterNote       $10
0008BDF9 BB02                       	dc.b	nBb4, $02
0008BDFB E10A                       	smpsAlterNote       $0A
0008BDFD BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008BE01 E110                       	smpsAlterNote       $10
0008BE03 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008BE07 E10F                       	smpsAlterNote       $0F
0008BE09 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008BE0D E110                       	smpsAlterNote       $10
0008BE0F BB02                       	dc.b	nBb4, $02
0008BE11 E10F                       	smpsAlterNote       $0F
0008BE13 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008BE1D E10C                       	smpsAlterNote       $0C
0008BE1F B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
0008BE27 E10B                       	smpsAlterNote       $0B
0008BE29 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
0008BE2D E10F                       	smpsAlterNote       $0F
0008BE2F BA02                       	dc.b	nA4, $02
0008BE33 E0C0                       	smpsPan             panCenter, $00
0008BE35 E601                       	smpsAlterVol        $01
0008BE37 E109                       	smpsAlterNote       $09
0008BE39 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
0008BE45 E108                       	smpsAlterNote       $08
0008BE47 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
0008BE4D E107                       	smpsAlterNote       $07
0008BE4F B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
0008BE55 E109                       	smpsAlterNote       $09
0008BE57 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008BE5B E108                       	smpsAlterNote       $08
0008BE5D B506 8001                  	dc.b	nE4, $06, nRst, $01
0008BE61 E107                       	smpsAlterNote       $07
0008BE63 B302 8001                  	dc.b	nD4, $02, nRst, $01
0008BE67 E106                       	smpsAlterNote       $06
0008BE69 B103                       	dc.b	nC4, $03
0008BE6B E10C                       	smpsAlterNote       $0C
0008BE6D AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008BE73 E080                       	smpsPan             panLeft, $00
0008BE75 07                         	dc.b	$07
0008BE76 E6FE                       	smpsAlterVol        $FE
0008BE78 E10B                       	smpsAlterNote       $0B
0008BE7A B20D                       	dc.b	nCs4, $0D
0008BE7C E105                       	smpsAlterNote       $05
0008BE7E E701                       	dc.b	smpsNoAttack, $01
0008BE80 E104                       	smpsAlterNote       $04
0008BE82 E701                       	dc.b	smpsNoAttack, $01
0008BE84 E108                       	smpsAlterNote       $08
0008BE86 E701                       	dc.b	smpsNoAttack, $01
0008BE88 E10E                       	smpsAlterNote       $0E
0008BE8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BE8E E10B                       	smpsAlterNote       $0B
0008BE90 E701                       	dc.b	smpsNoAttack, $01
0008BE92 E105                       	smpsAlterNote       $05
0008BE94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BE98 E10B                       	smpsAlterNote       $0B
0008BE9A E701                       	dc.b	smpsNoAttack, $01
0008BE9C E10E                       	smpsAlterNote       $0E
0008BE9E E701                       	dc.b	smpsNoAttack, $01
0008BEA0 E10F                       	smpsAlterNote       $0F
0008BEA2 8001                       	dc.b	nRst, $01
0008BEA4 E10B                       	smpsAlterNote       $0B
0008BEA6 B30D                       	dc.b	nD4, $0D
0008BEA8 E105                       	smpsAlterNote       $05
0008BEAA E701                       	dc.b	smpsNoAttack, $01
0008BEAC E104                       	smpsAlterNote       $04
0008BEAE E701                       	dc.b	smpsNoAttack, $01
0008BEB0 E108                       	smpsAlterNote       $08
0008BEB2 E701                       	dc.b	smpsNoAttack, $01
0008BEB4 E10E                       	smpsAlterNote       $0E
0008BEB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEBA E10B                       	smpsAlterNote       $0B
0008BEBC E701                       	dc.b	smpsNoAttack, $01
0008BEBE E105                       	smpsAlterNote       $05
0008BEC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEC4 E10B                       	smpsAlterNote       $0B
0008BEC6 E701                       	dc.b	smpsNoAttack, $01
0008BEC8 E10E                       	smpsAlterNote       $0E
0008BECA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BECE E108                       	smpsAlterNote       $08
0008BED0 E701                       	dc.b	smpsNoAttack, $01
0008BED2 E104                       	smpsAlterNote       $04
0008BED4 E701                       	dc.b	smpsNoAttack, $01
0008BED6 E105                       	smpsAlterNote       $05
0008BED8 E701                       	dc.b	smpsNoAttack, $01
0008BEDA E10B                       	smpsAlterNote       $0B
0008BEDC E701                       	dc.b	smpsNoAttack, $01
0008BEDE E10F                       	smpsAlterNote       $0F
0008BEE0 E701                       	dc.b	smpsNoAttack, $01
0008BEE2 E10B                       	smpsAlterNote       $0B
0008BEE4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BEE8 E10C                       	smpsAlterNote       $0C
0008BEEA B50D                       	dc.b	nE4, $0D
0008BEEC E106                       	smpsAlterNote       $06
0008BEEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEF2 E10C                       	smpsAlterNote       $0C
0008BEF4 E701                       	dc.b	smpsNoAttack, $01
0008BEF6 E10F                       	smpsAlterNote       $0F
0008BEF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEFC E109                       	smpsAlterNote       $09
0008BEFE E701                       	dc.b	smpsNoAttack, $01
0008BF00 E105                       	smpsAlterNote       $05
0008BF02 E701                       	dc.b	smpsNoAttack, $01
0008BF04 E106                       	smpsAlterNote       $06
0008BF06 E701                       	dc.b	smpsNoAttack, $01
0008BF08 E10C                       	smpsAlterNote       $0C
0008BF0A E701                       	dc.b	smpsNoAttack, $01
0008BF0C E110                       	smpsAlterNote       $10
0008BF0E E701                       	dc.b	smpsNoAttack, $01
0008BF10 E10B                       	smpsAlterNote       $0B
0008BF12 B30E                       	dc.b	nD4, $0E
0008BF14 E105                       	smpsAlterNote       $05
0008BF16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF1A E10B                       	smpsAlterNote       $0B
0008BF1C E701                       	dc.b	smpsNoAttack, $01
0008BF1E E10E                       	smpsAlterNote       $0E
0008BF20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF24 E108                       	smpsAlterNote       $08
0008BF26 E701                       	dc.b	smpsNoAttack, $01
0008BF28 E104                       	smpsAlterNote       $04
0008BF2A E701                       	dc.b	smpsNoAttack, $01
0008BF2C E105                       	smpsAlterNote       $05
0008BF2E E701                       	dc.b	smpsNoAttack, $01
0008BF30 E10B                       	smpsAlterNote       $0B
0008BF32 E701                       	dc.b	smpsNoAttack, $01
0008BF34 E10F                       	smpsAlterNote       $0F
0008BF36 E701                       	dc.b	smpsNoAttack, $01
0008BF38 E10B                       	smpsAlterNote       $0B
0008BF3A E701                       	dc.b	smpsNoAttack, $01
0008BF3C E108                       	smpsAlterNote       $08
0008BF3E E701                       	dc.b	smpsNoAttack, $01
0008BF40 E104                       	smpsAlterNote       $04
0008BF42 E701                       	dc.b	smpsNoAttack, $01
0008BF44 E108                       	smpsAlterNote       $08
0008BF46 E701                       	dc.b	smpsNoAttack, $01
0008BF48 E10E                       	smpsAlterNote       $0E
0008BF4A E701                       	dc.b	smpsNoAttack, $01
0008BF4C E10F                       	smpsAlterNote       $0F
0008BF4E E701                       	dc.b	smpsNoAttack, $01
0008BF50 E10B                       	smpsAlterNote       $0B
0008BF52 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008BF56 E108                       	smpsAlterNote       $08
0008BF58 E701                       	dc.b	smpsNoAttack, $01
0008BF5A E105                       	smpsAlterNote       $05
0008BF5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF60 E10B                       	smpsAlterNote       $0B
0008BF62 E701                       	dc.b	smpsNoAttack, $01
0008BF64 E10F                       	smpsAlterNote       $0F
0008BF66 E701                       	dc.b	smpsNoAttack, $01
0008BF68 E10E                       	smpsAlterNote       $0E
0008BF6A E701                       	dc.b	smpsNoAttack, $01
0008BF6C E108                       	smpsAlterNote       $08
0008BF6E E701                       	dc.b	smpsNoAttack, $01
0008BF70 E104                       	smpsAlterNote       $04
0008BF72 E701                       	dc.b	smpsNoAttack, $01
0008BF74 E108                       	smpsAlterNote       $08
0008BF76 E701                       	dc.b	smpsNoAttack, $01
0008BF78 E10B                       	smpsAlterNote       $0B
0008BF7A E701                       	dc.b	smpsNoAttack, $01
0008BF7C E10F                       	smpsAlterNote       $0F
0008BF7E E701                       	dc.b	smpsNoAttack, $01
0008BF80 E10B                       	smpsAlterNote       $0B
0008BF82 B30D                       	dc.b	nD4, $0D
0008BF84 E108                       	smpsAlterNote       $08
0008BF86 E701                       	dc.b	smpsNoAttack, $01
0008BF88 E105                       	smpsAlterNote       $05
0008BF8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF8E E10B                       	smpsAlterNote       $0B
0008BF90 E701                       	dc.b	smpsNoAttack, $01
0008BF92 E10F                       	smpsAlterNote       $0F
0008BF94 E701                       	dc.b	smpsNoAttack, $01
0008BF96 E10E                       	smpsAlterNote       $0E
0008BF98 E701                       	dc.b	smpsNoAttack, $01
0008BF9A E108                       	smpsAlterNote       $08
0008BF9C E701                       	dc.b	smpsNoAttack, $01
0008BF9E E104                       	smpsAlterNote       $04
0008BFA0 E701                       	dc.b	smpsNoAttack, $01
0008BFA2 E108                       	smpsAlterNote       $08
0008BFA4 E701                       	dc.b	smpsNoAttack, $01
0008BFA6 E10B                       	smpsAlterNote       $0B
0008BFA8 E701                       	dc.b	smpsNoAttack, $01
0008BFAA E10F                       	smpsAlterNote       $0F
0008BFAC E701                       	dc.b	smpsNoAttack, $01
0008BFAE E10B                       	smpsAlterNote       $0B
0008BFB0 E701                       	dc.b	smpsNoAttack, $01
0008BFB2 E105                       	smpsAlterNote       $05
0008BFB4 E701                       	dc.b	smpsNoAttack, $01
0008BFB6 E104                       	smpsAlterNote       $04
0008BFB8 E701                       	dc.b	smpsNoAttack, $01
0008BFBA E108                       	smpsAlterNote       $08
0008BFBC E701                       	dc.b	smpsNoAttack, $01
0008BFBE E10E                       	smpsAlterNote       $0E
0008BFC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BFC4 E10B                       	smpsAlterNote       $0B
0008BFC6 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0008BFCA E108                       	smpsAlterNote       $08
0008BFCC E701                       	dc.b	smpsNoAttack, $01
0008BFCE E104                       	smpsAlterNote       $04
0008BFD0 E701                       	dc.b	smpsNoAttack, $01
0008BFD2 E108                       	smpsAlterNote       $08
0008BFD4 E701                       	dc.b	smpsNoAttack, $01
0008BFD6 E10B                       	smpsAlterNote       $0B
0008BFD8 E701                       	dc.b	smpsNoAttack, $01
0008BFDC E0C0                       	smpsPan             panCenter, $00
0008BFDE E601                       	smpsAlterVol        $01
0008BFE0 E108                       	smpsAlterNote       $08
0008BFE2 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
0008BFEE 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
0008BFF6 E080                       	smpsPan             panLeft, $00
0008BFF8 07                         	dc.b	$07
0008BFF9 E6FF                       	smpsAlterVol        $FF
0008BFFB E10D                       	smpsAlterNote       $0D
0008BFFD B60D                       	dc.b	nF4, $0D
0008BFFF E10A                       	smpsAlterNote       $0A
0008C001 E701                       	dc.b	smpsNoAttack, $01
0008C003 E106                       	smpsAlterNote       $06
0008C005 E701                       	dc.b	smpsNoAttack, $01
0008C007 E10A                       	smpsAlterNote       $0A
0008C009 E701                       	dc.b	smpsNoAttack, $01
0008C00B E110                       	smpsAlterNote       $10
0008C00D E701                       	dc.b	smpsNoAttack, $01
0008C00F E111                       	smpsAlterNote       $11
0008C011 E701                       	dc.b	smpsNoAttack, $01
0008C013 E10D                       	smpsAlterNote       $0D
0008C015 E701                       	dc.b	smpsNoAttack, $01
0008C017 E107                       	smpsAlterNote       $07
0008C019 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C01D E10A                       	smpsAlterNote       $0A
0008C01F E701                       	dc.b	smpsNoAttack, $01
0008C021 E110                       	smpsAlterNote       $10
0008C023 E701                       	dc.b	smpsNoAttack, $01
0008C025 E111                       	smpsAlterNote       $11
0008C027 8001                       	dc.b	nRst, $01
0008C029 E10D                       	smpsAlterNote       $0D
0008C02B B80D                       	dc.b	nG4, $0D
0008C02D E10A                       	smpsAlterNote       $0A
0008C02F E701                       	dc.b	smpsNoAttack, $01
0008C031 E106                       	smpsAlterNote       $06
0008C033 E701                       	dc.b	smpsNoAttack, $01
0008C035 E10A                       	smpsAlterNote       $0A
0008C037 E701                       	dc.b	smpsNoAttack, $01
0008C039 E110                       	smpsAlterNote       $10
0008C03B E701                       	dc.b	smpsNoAttack, $01
0008C03D E111                       	smpsAlterNote       $11
0008C03F E701                       	dc.b	smpsNoAttack, $01
0008C041 E10D                       	smpsAlterNote       $0D
0008C043 E701                       	dc.b	smpsNoAttack, $01
0008C045 E107                       	smpsAlterNote       $07
0008C047 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C04B E10D                       	smpsAlterNote       $0D
0008C04D E701                       	dc.b	smpsNoAttack, $01
0008C04F E110                       	smpsAlterNote       $10
0008C051 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C055 E10A                       	smpsAlterNote       $0A
0008C057 E701                       	dc.b	smpsNoAttack, $01
0008C059 E106                       	smpsAlterNote       $06
0008C05B E701                       	dc.b	smpsNoAttack, $01
0008C05D E107                       	smpsAlterNote       $07
0008C05F E701                       	dc.b	smpsNoAttack, $01
0008C061 E10D                       	smpsAlterNote       $0D
0008C063 E701                       	dc.b	smpsNoAttack, $01
0008C065 E111                       	smpsAlterNote       $11
0008C067 E701                       	dc.b	smpsNoAttack, $01
0008C069 E10D                       	smpsAlterNote       $0D
0008C06B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C06F E10F                       	smpsAlterNote       $0F
0008C071 BA0D                       	dc.b	nA4, $0D
0008C073 E109                       	smpsAlterNote       $09
0008C075 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C079 E10C                       	smpsAlterNote       $0C
0008C07B E701                       	dc.b	smpsNoAttack, $01
0008C07D E112                       	smpsAlterNote       $12
0008C07F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C083 E10C                       	smpsAlterNote       $0C
0008C085 E701                       	dc.b	smpsNoAttack, $01
0008C087 E109                       	smpsAlterNote       $09
0008C089 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C08D E10F                       	smpsAlterNote       $0F
0008C08F E701                       	dc.b	smpsNoAttack, $01
0008C091 E113                       	smpsAlterNote       $13
0008C093 E701                       	dc.b	smpsNoAttack, $01
0008C095 E112                       	smpsAlterNote       $12
0008C097 E701                       	dc.b	smpsNoAttack, $01
0008C099 E10C                       	smpsAlterNote       $0C
0008C09B E701                       	dc.b	smpsNoAttack, $01
0008C09D E108                       	smpsAlterNote       $08
0008C09F E701                       	dc.b	smpsNoAttack, $01
0008C0A1 E10C                       	smpsAlterNote       $0C
0008C0A3 E701                       	dc.b	smpsNoAttack, $01
0008C0A5 E10F                       	smpsAlterNote       $0F
0008C0A7 E701                       	dc.b	smpsNoAttack, $01
0008C0A9 E113                       	smpsAlterNote       $13
0008C0AB E701                       	dc.b	smpsNoAttack, $01
0008C0AD E10F                       	smpsAlterNote       $0F
0008C0AF E701                       	dc.b	smpsNoAttack, $01
0008C0B1 E109                       	smpsAlterNote       $09
0008C0B3 E701                       	dc.b	smpsNoAttack, $01
0008C0B5 E108                       	smpsAlterNote       $08
0008C0B7 E701                       	dc.b	smpsNoAttack, $01
0008C0B9 E10C                       	smpsAlterNote       $0C
0008C0BB E701                       	dc.b	smpsNoAttack, $01
0008C0BD E112                       	smpsAlterNote       $12
0008C0BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0C3 E10F                       	smpsAlterNote       $0F
0008C0C5 E701                       	dc.b	smpsNoAttack, $01
0008C0C7 E109                       	smpsAlterNote       $09
0008C0C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0CD E10F                       	smpsAlterNote       $0F
0008C0CF E701                       	dc.b	smpsNoAttack, $01
0008C0D1 E112                       	smpsAlterNote       $12
0008C0D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0D7 E10C                       	smpsAlterNote       $0C
0008C0D9 E701                       	dc.b	smpsNoAttack, $01
0008C0DB E108                       	smpsAlterNote       $08
0008C0DD E701                       	dc.b	smpsNoAttack, $01
0008C0DF E109                       	smpsAlterNote       $09
0008C0E1 E701                       	dc.b	smpsNoAttack, $01
0008C0E3 E10C                       	smpsAlterNote       $0C
0008C0E5 B50A                       	dc.b	nE4, $0A
0008C0E7 E10D                       	smpsAlterNote       $0D
0008C0E9 B60E                       	dc.b	nF4, $0E
0008C0EB E107                       	smpsAlterNote       $07
0008C0ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0F1 E10D                       	smpsAlterNote       $0D
0008C0F3 E701                       	dc.b	smpsNoAttack, $01
0008C0F5 E110                       	smpsAlterNote       $10
0008C0F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0FB E10A                       	smpsAlterNote       $0A
0008C0FD E701                       	dc.b	smpsNoAttack, $01
0008C0FF E106                       	smpsAlterNote       $06
0008C101 E701                       	dc.b	smpsNoAttack, $01
0008C103 E107                       	smpsAlterNote       $07
0008C105 E701                       	dc.b	smpsNoAttack, $01
0008C107 E10D                       	smpsAlterNote       $0D
0008C109 E701                       	dc.b	smpsNoAttack, $01
0008C10B E111                       	smpsAlterNote       $11
0008C10D E701                       	dc.b	smpsNoAttack, $01
0008C10F E10D                       	smpsAlterNote       $0D
0008C111 B80D                       	dc.b	nG4, $0D
0008C113 E10A                       	smpsAlterNote       $0A
0008C115 E701                       	dc.b	smpsNoAttack, $01
0008C117 E107                       	smpsAlterNote       $07
0008C119 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C11D E10D                       	smpsAlterNote       $0D
0008C11F E701                       	dc.b	smpsNoAttack, $01
0008C121 E111                       	smpsAlterNote       $11
0008C123 E701                       	dc.b	smpsNoAttack, $01
0008C125 E110                       	smpsAlterNote       $10
0008C127 E701                       	dc.b	smpsNoAttack, $01
0008C129 E10A                       	smpsAlterNote       $0A
0008C12B E701                       	dc.b	smpsNoAttack, $01
0008C12D E106                       	smpsAlterNote       $06
0008C12F E701                       	dc.b	smpsNoAttack, $01
0008C131 E10A                       	smpsAlterNote       $0A
0008C133 E701                       	dc.b	smpsNoAttack, $01
0008C135 E10D                       	smpsAlterNote       $0D
0008C137 E701                       	dc.b	smpsNoAttack, $01
0008C139 E111                       	smpsAlterNote       $11
0008C13B E701                       	dc.b	smpsNoAttack, $01
0008C13D E10D                       	smpsAlterNote       $0D
0008C13F E701                       	dc.b	smpsNoAttack, $01
0008C141 E107                       	smpsAlterNote       $07
0008C143 E701                       	dc.b	smpsNoAttack, $01
0008C145 E106                       	smpsAlterNote       $06
0008C147 E701                       	dc.b	smpsNoAttack, $01
0008C149 E10A                       	smpsAlterNote       $0A
0008C14B E701                       	dc.b	smpsNoAttack, $01
0008C14D E110                       	smpsAlterNote       $10
0008C14F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C153 E10D                       	smpsAlterNote       $0D
0008C155 E701                       	dc.b	smpsNoAttack, $01
0008C157 E10F                       	smpsAlterNote       $0F
0008C159 BA0D                       	dc.b	nA4, $0D
0008C15B E10C                       	smpsAlterNote       $0C
0008C15D E701                       	dc.b	smpsNoAttack, $01
0008C15F E108                       	smpsAlterNote       $08
0008C161 E701                       	dc.b	smpsNoAttack, $01
0008C163 E109                       	smpsAlterNote       $09
0008C165 E701                       	dc.b	smpsNoAttack, $01
0008C167 E10F                       	smpsAlterNote       $0F
0008C169 E701                       	dc.b	smpsNoAttack, $01
0008C16B E113                       	smpsAlterNote       $13
0008C16D E701                       	dc.b	smpsNoAttack, $01
0008C16F E10F                       	smpsAlterNote       $0F
0008C171 E701                       	dc.b	smpsNoAttack, $01
0008C173 E10C                       	smpsAlterNote       $0C
0008C175 E701                       	dc.b	smpsNoAttack, $01
0008C177 E108                       	smpsAlterNote       $08
0008C179 E701                       	dc.b	smpsNoAttack, $01
0008C17B E10C                       	smpsAlterNote       $0C
0008C17D E701                       	dc.b	smpsNoAttack, $01
0008C17F E112                       	smpsAlterNote       $12
0008C181 E701                       	dc.b	smpsNoAttack, $01
0008C183 E113                       	smpsAlterNote       $13
0008C185 E701                       	dc.b	smpsNoAttack, $01
0008C187 E10F                       	smpsAlterNote       $0F
0008C189 E701                       	dc.b	smpsNoAttack, $01
0008C18B E109                       	smpsAlterNote       $09
0008C18D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C191 E10C                       	smpsAlterNote       $0C
0008C193 E701                       	dc.b	smpsNoAttack, $01
0008C195 E112                       	smpsAlterNote       $12
0008C197 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C19B E10C                       	smpsAlterNote       $0C
0008C19D E701                       	dc.b	smpsNoAttack, $01
0008C19F E109                       	smpsAlterNote       $09
0008C1A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C1A5 E10F                       	smpsAlterNote       $0F
0008C1A7 E701                       	dc.b	smpsNoAttack, $01
0008C1A9 E113                       	smpsAlterNote       $13
0008C1AB E701                       	dc.b	smpsNoAttack, $01
0008C1AD E112                       	smpsAlterNote       $12
0008C1AF E701                       	dc.b	smpsNoAttack, $01
0008C1B1 E10C                       	smpsAlterNote       $0C
0008C1B3 E701                       	dc.b	smpsNoAttack, $01
0008C1B5 E109                       	smpsAlterNote       $09
0008C1B7 8001                       	dc.b	nRst, $01
0008C1B9 E10D                       	smpsAlterNote       $0D
0008C1BB B60A                       	dc.b	nF4, $0A
0008C1BD E10C                       	smpsAlterNote       $0C
0008C1BF B506 8001                  	dc.b	nE4, $06, nRst, $01
0008C1C3 E10B                       	smpsAlterNote       $0B
0008C1C5 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008C1C9 E10C                       	smpsAlterNote       $0C
0008C1CB B503                       	dc.b	nE4, $03
0008C1CD E10D                       	smpsAlterNote       $0D
0008C1CF B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0008C1D9 E10C                       	smpsAlterNote       $0C
0008C1DB E701                       	dc.b	smpsNoAttack, $01
0008C1DD E108                       	smpsAlterNote       $08
0008C1DF E701                       	dc.b	smpsNoAttack, $01
0008C1E1 E10C                       	smpsAlterNote       $0C
0008C1E3 E701                       	dc.b	smpsNoAttack, $01
0008C1E5 E112                       	smpsAlterNote       $12
0008C1E7 E701                       	dc.b	smpsNoAttack, $01
0008C1E9 E113                       	smpsAlterNote       $13
0008C1EB E701                       	dc.b	smpsNoAttack, $01
0008C1ED E10F                       	smpsAlterNote       $0F
0008C1EF E701                       	dc.b	smpsNoAttack, $01
0008C1F1 E109                       	smpsAlterNote       $09
0008C1F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C1F7 E10C                       	smpsAlterNote       $0C
0008C1F9 E701                       	dc.b	smpsNoAttack, $01
0008C1FB E112                       	smpsAlterNote       $12
0008C1FD E701                       	dc.b	smpsNoAttack, $01
0008C1FF E113                       	smpsAlterNote       $13
0008C201 8001                       	dc.b	nRst, $01
0008C203 E10D                       	smpsAlterNote       $0D
0008C205 C20D                       	dc.b	nF5, $0D
0008C207 E10A                       	smpsAlterNote       $0A
0008C209 E701                       	dc.b	smpsNoAttack, $01
0008C20B E106                       	smpsAlterNote       $06
0008C20D E701                       	dc.b	smpsNoAttack, $01
0008C20F E10A                       	smpsAlterNote       $0A
0008C211 E701                       	dc.b	smpsNoAttack, $01
0008C213 E110                       	smpsAlterNote       $10
0008C215 E701                       	dc.b	smpsNoAttack, $01
0008C217 E111                       	smpsAlterNote       $11
0008C219 E701                       	dc.b	smpsNoAttack, $01
0008C21B E10D                       	smpsAlterNote       $0D
0008C21D E701                       	dc.b	smpsNoAttack, $01
0008C21F E107                       	smpsAlterNote       $07
0008C221 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C225 E10A                       	smpsAlterNote       $0A
0008C227 E701                       	dc.b	smpsNoAttack, $01
0008C229 E110                       	smpsAlterNote       $10
0008C22B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C22F E10A                       	smpsAlterNote       $0A
0008C231 E701                       	dc.b	smpsNoAttack, $01
0008C233 E107                       	smpsAlterNote       $07
0008C235 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C239 E10D                       	smpsAlterNote       $0D
0008C23B E701                       	dc.b	smpsNoAttack, $01
0008C23D E111                       	smpsAlterNote       $11
0008C23F E701                       	dc.b	smpsNoAttack, $01
0008C241 E110                       	smpsAlterNote       $10
0008C243 E701                       	dc.b	smpsNoAttack, $01
0008C245 E10A                       	smpsAlterNote       $0A
0008C247 E701                       	dc.b	smpsNoAttack, $01
0008C249 E106                       	smpsAlterNote       $06
0008C24B E701                       	dc.b	smpsNoAttack, $01
0008C24D E10A                       	smpsAlterNote       $0A
0008C24F E701                       	dc.b	smpsNoAttack, $01
0008C251 E10D                       	smpsAlterNote       $0D
0008C253 E701                       	dc.b	smpsNoAttack, $01
0008C255 E111                       	smpsAlterNote       $11
0008C257 E701                       	dc.b	smpsNoAttack, $01
0008C259 E10D                       	smpsAlterNote       $0D
0008C25B E701                       	dc.b	smpsNoAttack, $01
0008C25D E107                       	smpsAlterNote       $07
0008C25F E701                       	dc.b	smpsNoAttack, $01
0008C261 E106                       	smpsAlterNote       $06
0008C263 E701                       	dc.b	smpsNoAttack, $01
0008C265 E10A                       	smpsAlterNote       $0A
0008C267 E701                       	dc.b	smpsNoAttack, $01
0008C269 E110                       	smpsAlterNote       $10
0008C26B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C26F E10D                       	smpsAlterNote       $0D
0008C271 E701                       	dc.b	smpsNoAttack, $01
0008C273 E107                       	smpsAlterNote       $07
0008C275 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C279 E10D                       	smpsAlterNote       $0D
0008C27B E701                       	dc.b	smpsNoAttack, $01
0008C27D E110                       	smpsAlterNote       $10
0008C27F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C283 E10A                       	smpsAlterNote       $0A
0008C285 E701                       	dc.b	smpsNoAttack, $01
0008C287 E106                       	smpsAlterNote       $06
0008C289 E701                       	dc.b	smpsNoAttack, $01
0008C28B E107                       	smpsAlterNote       $07
0008C28D E701                       	dc.b	smpsNoAttack, $01
0008C28F E10D                       	smpsAlterNote       $0D
0008C291 E701                       	dc.b	smpsNoAttack, $01
0008C293 E111                       	smpsAlterNote       $11
0008C295 E701                       	dc.b	smpsNoAttack, $01
0008C297 E10D                       	smpsAlterNote       $0D
0008C299 E701                       	dc.b	smpsNoAttack, $01
0008C29B E10A                       	smpsAlterNote       $0A
0008C29D E701                       	dc.b	smpsNoAttack, $01
0008C29F E107                       	smpsAlterNote       $07
0008C2A1 8001                       	dc.b	nRst, $01
0008C2A3 E10D                       	smpsAlterNote       $0D
0008C2A5 C206 8001                  	dc.b	nF5, $06, nRst, $01
0008C2AB E601                       	smpsAlterVol        $01
0008C2AD E110                       	smpsAlterNote       $10
0008C2AF BB0D                       	dc.b	nBb4, $0D
0008C2B1 E10A                       	smpsAlterNote       $0A
0008C2B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C2B7 E110                       	smpsAlterNote       $10
0008C2B9 E701                       	dc.b	smpsNoAttack, $01
0008C2BB E113                       	smpsAlterNote       $13
0008C2BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C2C1 E10D                       	smpsAlterNote       $0D
0008C2C3 E701                       	dc.b	smpsNoAttack, $01
0008C2C5 E109                       	smpsAlterNote       $09
0008C2C7 E701                       	dc.b	smpsNoAttack, $01
0008C2C9 E10A                       	smpsAlterNote       $0A
0008C2CB E701                       	dc.b	smpsNoAttack, $01
0008C2CD E110                       	smpsAlterNote       $10
0008C2CF E701                       	dc.b	smpsNoAttack, $01
0008C2D1 E114                       	smpsAlterNote       $14
0008C2D3 E701                       	dc.b	smpsNoAttack, $01
0008C2D5 E110                       	smpsAlterNote       $10
0008C2D7 E701                       	dc.b	smpsNoAttack, $01
0008C2D9 E10D                       	smpsAlterNote       $0D
0008C2DB E701                       	dc.b	smpsNoAttack, $01
0008C2DD E109                       	smpsAlterNote       $09
0008C2DF E701                       	dc.b	smpsNoAttack, $01
0008C2E1 E10A                       	smpsAlterNote       $0A
0008C2E3 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008C2E7 E107                       	smpsAlterNote       $07
0008C2E9 E701                       	dc.b	smpsNoAttack, $01
0008C2EB E103                       	smpsAlterNote       $03
0008C2ED E701                       	dc.b	smpsNoAttack, $01
0008C2EF E107                       	smpsAlterNote       $07
0008C2F1 E701                       	dc.b	smpsNoAttack, $01
0008C2F3 E10D                       	smpsAlterNote       $0D
0008C2F5 E701                       	dc.b	smpsNoAttack, $01
0008C2F7 E10E                       	smpsAlterNote       $0E
0008C2F9 E701                       	dc.b	smpsNoAttack, $01
0008C2FB E10A                       	smpsAlterNote       $0A
0008C2FD E701                       	dc.b	smpsNoAttack, $01
0008C2FF E104                       	smpsAlterNote       $04
0008C301 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C305 E107                       	smpsAlterNote       $07
0008C307 E701                       	dc.b	smpsNoAttack, $01
0008C309 E10D                       	smpsAlterNote       $0D
0008C30B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C30F E107                       	smpsAlterNote       $07
0008C311 E701                       	dc.b	smpsNoAttack, $01
0008C313 E104                       	smpsAlterNote       $04
0008C315 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C319 E10B                       	smpsAlterNote       $0B
0008C31B BF0D                       	dc.b	nD5, $0D
0008C31D E108                       	smpsAlterNote       $08
0008C31F E701                       	dc.b	smpsNoAttack, $01
0008C321 E105                       	smpsAlterNote       $05
0008C323 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C327 E10B                       	smpsAlterNote       $0B
0008C329 E701                       	dc.b	smpsNoAttack, $01
0008C32B E10F                       	smpsAlterNote       $0F
0008C32D E701                       	dc.b	smpsNoAttack, $01
0008C32F E10E                       	smpsAlterNote       $0E
0008C331 E701                       	dc.b	smpsNoAttack, $01
0008C333 E108                       	smpsAlterNote       $08
0008C335 E701                       	dc.b	smpsNoAttack, $01
0008C337 E104                       	smpsAlterNote       $04
0008C339 E701                       	dc.b	smpsNoAttack, $01
0008C33B E108                       	smpsAlterNote       $08
0008C33D E701                       	dc.b	smpsNoAttack, $01
0008C33F E10B                       	smpsAlterNote       $0B
0008C341 E701                       	dc.b	smpsNoAttack, $01
0008C343 E10F                       	smpsAlterNote       $0F
0008C345 E701                       	dc.b	smpsNoAttack, $01
0008C347 E10B                       	smpsAlterNote       $0B
0008C349 E701                       	dc.b	smpsNoAttack, $01
0008C34B E105                       	smpsAlterNote       $05
0008C34D E701                       	dc.b	smpsNoAttack, $01
0008C34F E104                       	smpsAlterNote       $04
0008C351 E701                       	dc.b	smpsNoAttack, $01
0008C353 E105                       	smpsAlterNote       $05
0008C355 8001                       	dc.b	nRst, $01
0008C357 E10C                       	smpsAlterNote       $0C
0008C359 C10C                       	dc.b	nE5, $0C
0008C35B E10D                       	smpsAlterNote       $0D
0008C35D C201                       	dc.b	nF5, $01
0008C35F E10E                       	smpsAlterNote       $0E
0008C361 C301 8001                  	dc.b	nFs5, $01, nRst, $01
0008C365 E10D                       	smpsAlterNote       $0D
0008C367 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008C36B E10A                       	smpsAlterNote       $0A
0008C36D E701                       	dc.b	smpsNoAttack, $01
0008C36F E106                       	smpsAlterNote       $06
0008C371 E701                       	dc.b	smpsNoAttack, $01
0008C373 E10A                       	smpsAlterNote       $0A
0008C375 E701                       	dc.b	smpsNoAttack, $01
0008C377 E10D                       	smpsAlterNote       $0D
0008C379 E701                       	dc.b	smpsNoAttack, $01
0008C37B E111                       	smpsAlterNote       $11
0008C37D E701                       	dc.b	smpsNoAttack, $01
0008C37F E10D                       	smpsAlterNote       $0D
0008C381 E701                       	dc.b	smpsNoAttack, $01
0008C383 E107                       	smpsAlterNote       $07
0008C385 E701                       	dc.b	smpsNoAttack, $01
0008C387 E106                       	smpsAlterNote       $06
0008C389 E701                       	dc.b	smpsNoAttack, $01
0008C38B E10A                       	smpsAlterNote       $0A
0008C38D E701                       	dc.b	smpsNoAttack, $01
0008C38F E110                       	smpsAlterNote       $10
0008C391 E701                       	dc.b	smpsNoAttack, $01
0008C393 E111                       	smpsAlterNote       $11
0008C395 8001                       	dc.b	nRst, $01
0008C397 E10D                       	smpsAlterNote       $0D
0008C399 C40D                       	dc.b	nG5, $0D
0008C39B E10A                       	smpsAlterNote       $0A
0008C39D E701                       	dc.b	smpsNoAttack, $01
0008C39F E106                       	smpsAlterNote       $06
0008C3A1 E701                       	dc.b	smpsNoAttack, $01
0008C3A3 E10A                       	smpsAlterNote       $0A
0008C3A5 E701                       	dc.b	smpsNoAttack, $01
0008C3A7 E10D                       	smpsAlterNote       $0D
0008C3A9 E701                       	dc.b	smpsNoAttack, $01
0008C3AB E10C                       	smpsAlterNote       $0C
0008C3AD C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
0008C3B9 8001                       	dc.b	nRst, $01
0008C3BB E10D                       	smpsAlterNote       $0D
0008C3BD C20D                       	dc.b	nF5, $0D
0008C3BF E10A                       	smpsAlterNote       $0A
0008C3C1 E701                       	dc.b	smpsNoAttack, $01
0008C3C3 E106                       	smpsAlterNote       $06
0008C3C5 E701                       	dc.b	smpsNoAttack, $01
0008C3C7 E10A                       	smpsAlterNote       $0A
0008C3C9 E701                       	dc.b	smpsNoAttack, $01
0008C3CB E110                       	smpsAlterNote       $10
0008C3CD E701                       	dc.b	smpsNoAttack, $01
0008C3CF E111                       	smpsAlterNote       $11
0008C3D1 E701                       	dc.b	smpsNoAttack, $01
0008C3D3 E10D                       	smpsAlterNote       $0D
0008C3D5 E701                       	dc.b	smpsNoAttack, $01
0008C3D7 E107                       	smpsAlterNote       $07
0008C3D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C3DD E10A                       	smpsAlterNote       $0A
0008C3DF E701                       	dc.b	smpsNoAttack, $01
0008C3E1 E110                       	smpsAlterNote       $10
0008C3E3 E701                       	dc.b	smpsNoAttack, $01
0008C3E5 E111                       	smpsAlterNote       $11
0008C3E7 8001                       	dc.b	nRst, $01
0008C3E9 E10F                       	smpsAlterNote       $0F
0008C3EB C60A                       	dc.b	nA5, $0A
0008C3ED E10D                       	smpsAlterNote       $0D
0008C3EF C406 8001                  	dc.b	nG5, $06, nRst, $01
0008C3F3 E10C                       	smpsAlterNote       $0C
0008C3F5 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008C401 8001                       	dc.b	nRst, $01
0008C403 E10D                       	smpsAlterNote       $0D
0008C405 C20D                       	dc.b	nF5, $0D
0008C407 E107                       	smpsAlterNote       $07
0008C409 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C40D E10A                       	smpsAlterNote       $0A
0008C40F E701                       	dc.b	smpsNoAttack, $01
0008C411 E110                       	smpsAlterNote       $10
0008C413 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C417 E10A                       	smpsAlterNote       $0A
0008C419 E701                       	dc.b	smpsNoAttack, $01
0008C41B E107                       	smpsAlterNote       $07
0008C41D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C421 E10D                       	smpsAlterNote       $0D
0008C423 E701                       	dc.b	smpsNoAttack, $01
0008C425 E111                       	smpsAlterNote       $11
0008C427 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C42B E10D                       	smpsAlterNote       $0D
0008C42D C40D                       	dc.b	nG5, $0D
0008C42F E107                       	smpsAlterNote       $07
0008C431 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C435 E10A                       	smpsAlterNote       $0A
0008C437 E701                       	dc.b	smpsNoAttack, $01
0008C439 E10D                       	smpsAlterNote       $0D
0008C43B 8001                       	dc.b	nRst, $01
0008C43D E10C                       	smpsAlterNote       $0C
0008C43F C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008C44B E10D                       	smpsAlterNote       $0D
0008C44D C20E                       	dc.b	nF5, $0E
0008C44F E107                       	smpsAlterNote       $07
0008C451 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C455 E10D                       	smpsAlterNote       $0D
0008C457 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C45D E0C0                       	smpsPan             panCenter, $00
0008C45F E603                       	smpsAlterVol        $03
0008C461 E108                       	smpsAlterNote       $08
0008C463 B406                       	dc.b	nEb4, $06
0008C465 E10C                       	smpsAlterNote       $0C
0008C467 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008C46B E108                       	smpsAlterNote       $08
0008C46D B403                       	dc.b	nEb4, $03
0008C46F E109                       	smpsAlterNote       $09
0008C471 B803 8001                  	dc.b	nG4, $03, nRst, $01
0008C475 E10C                       	smpsAlterNote       $0C
0008C477 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
0008C47F 03                         	dc.b	$03
0008C480 E6FD                       	smpsAlterVol        $FD
0008C482 F6F1 F4                    	smpsJump            music84_Jump00
0008C485                            
0008C485                            ; PSG1 Data
0008C485                            music84_PSG1:
0008C485 E1FD                       	smpsAlterNote       $FD
0008C487 EC04                       	smpsPSGAlterVol     $04
0008C489 9203                       	dc.b	nF1, $03
0008C48B E1FE                       	smpsAlterNote       $FE
0008C48D 9603                       	dc.b	nA1, $03
0008C48F EC04                       	smpsPSGAlterVol     $04
0008C491 E701                       	dc.b	smpsNoAttack, $01
0008C493 E1FF                       	smpsAlterNote       $FF
0008C495 ECFC                       	smpsPSGAlterVol     $FC
0008C497 9B03                       	dc.b	nD2, $03
0008C499 E1FD                       	smpsAlterNote       $FD
0008C49B 9403                       	dc.b	nG1, $03
0008C49D EC04                       	smpsPSGAlterVol     $04
0008C49F E701                       	dc.b	smpsNoAttack, $01
0008C4A1 E1FE                       	smpsAlterNote       $FE
0008C4A3 ECFC                       	smpsPSGAlterVol     $FC
0008C4A5 9703                       	dc.b	nBb1, $03
0008C4A7 E1FF                       	smpsAlterNote       $FF
0008C4A9 9B03                       	dc.b	nD2, $03
0008C4AB EC04                       	smpsPSGAlterVol     $04
0008C4AD E701                       	dc.b	smpsNoAttack, $01
0008C4AF E1FE                       	smpsAlterNote       $FE
0008C4B1 ECFC                       	smpsPSGAlterVol     $FC
0008C4B3 A002                       	dc.b	nG2, $02
0008C4B5 EC04                       	smpsPSGAlterVol     $04
0008C4B7 E701                       	dc.b	smpsNoAttack, $01
0008C4B9 E1FF                       	smpsAlterNote       $FF
0008C4BB ECFC                       	smpsPSGAlterVol     $FC
0008C4BD A203                       	dc.b	nA2, $03
0008C4BF EC0B                       	smpsPSGAlterVol     $0B
0008C4C1 800A                       	dc.b	nRst, $0A
0008C4C3 E105                       	smpsAlterNote       $05
0008C4C5 01                         	dc.b	$01
0008C4C6 E1FC                       	smpsAlterNote       $FC
0008C4C8 01                         	dc.b	$01
0008C4C9 E105                       	smpsAlterNote       $05
0008C4CB 01                         	dc.b	$01
0008C4CC E1FD                       	smpsAlterNote       $FD
0008C4CE 01                         	dc.b	$01
0008C4CF E105                       	smpsAlterNote       $05
0008C4D1 01                         	dc.b	$01
0008C4D2 E1FD                       	smpsAlterNote       $FD
0008C4D4 01                         	dc.b	$01
0008C4D5 E1FA                       	smpsAlterNote       $FA
0008C4D7 01                         	dc.b	$01
0008C4D8 E1FC                       	smpsAlterNote       $FC
0008C4DA 01                         	dc.b	$01
0008C4DB E105                       	smpsAlterNote       $05
0008C4DD 01                         	dc.b	$01
0008C4DE E108                       	smpsAlterNote       $08
0008C4E0 0101                       	dc.b	$01, $01
0008C4E2 E105                       	smpsAlterNote       $05
0008C4E4 01                         	dc.b	$01
0008C4E5 E1FA                       	smpsAlterNote       $FA
0008C4E7 0101                       	dc.b	$01, $01
0008C4E9 E1FD                       	smpsAlterNote       $FD
0008C4EB 01                         	dc.b	$01
0008C4EC E105                       	smpsAlterNote       $05
0008C4EE 01                         	dc.b	$01
0008C4EF E108                       	smpsAlterNote       $08
0008C4F1 01                         	dc.b	$01
0008C4F2 E105                       	smpsAlterNote       $05
0008C4F4 01                         	dc.b	$01
0008C4F5 E1FC                       	smpsAlterNote       $FC
0008C4F7 01                         	dc.b	$01
0008C4F8 E105                       	smpsAlterNote       $05
0008C4FA 01                         	dc.b	$01
0008C4FB E1FD                       	smpsAlterNote       $FD
0008C4FD 01                         	dc.b	$01
0008C4FE                            
0008C4FE                            music84_Jump07:
0008C4FE E105                       	smpsAlterNote       $05
0008C500 8001                       	dc.b	nRst, $01
0008C502 E1FD                       	smpsAlterNote       $FD
0008C504 01                         	dc.b	$01
0008C505 E1FA                       	smpsAlterNote       $FA
0008C507 01                         	dc.b	$01
0008C508 E1FC                       	smpsAlterNote       $FC
0008C50A 01                         	dc.b	$01
0008C50B E1FD                       	smpsAlterNote       $FD
0008C50D ECF5                       	smpsPSGAlterVol     $F5
0008C50F 9206                       	dc.b	nF1, $06
0008C511 EC04                       	smpsPSGAlterVol     $04
0008C513 E701                       	dc.b	smpsNoAttack, $01
0008C515 EC07                       	smpsPSGAlterVol     $07
0008C517 8003                       	dc.b	nRst, $03
0008C519 ECF5                       	smpsPSGAlterVol     $F5
0008C51B 9206                       	dc.b	nF1, $06
0008C51D EC04                       	smpsPSGAlterVol     $04
0008C51F E701                       	dc.b	smpsNoAttack, $01
0008C521 EC07                       	smpsPSGAlterVol     $07
0008C523 8006                       	dc.b	nRst, $06
0008C525 E100                       	smpsAlterNote       $00
0008C527 01                         	dc.b	$01
0008C528 E104                       	smpsAlterNote       $04
0008C52A 01                         	dc.b	$01
0008C52B E100                       	smpsAlterNote       $00
0008C52D 01                         	dc.b	$01
0008C52E E1FB                       	smpsAlterNote       $FB
0008C530 01                         	dc.b	$01
0008C531 E1FD                       	smpsAlterNote       $FD
0008C533 ECF5                       	smpsPSGAlterVol     $F5
0008C535 9406                       	dc.b	nG1, $06
0008C537 EC04                       	smpsPSGAlterVol     $04
0008C539 E701                       	dc.b	smpsNoAttack, $01
0008C53B EC07                       	smpsPSGAlterVol     $07
0008C53D 8003                       	dc.b	nRst, $03
0008C53F ECF5                       	smpsPSGAlterVol     $F5
0008C541 9407                       	dc.b	nG1, $07
0008C543 EC0B                       	smpsPSGAlterVol     $0B
0008C545 8006                       	dc.b	nRst, $06
0008C547 E100                       	smpsAlterNote       $00
0008C549 01                         	dc.b	$01
0008C54A E103                       	smpsAlterNote       $03
0008C54C 0101                       	dc.b	$01, $01
0008C54E E1FD                       	smpsAlterNote       $FD
0008C550 01                         	dc.b	$01
0008C551 ECF5                       	smpsPSGAlterVol     $F5
0008C553 9207                       	dc.b	nF1, $07
0008C555 EC0B                       	smpsPSGAlterVol     $0B
0008C557 8004                       	dc.b	nRst, $04
0008C559 ECF5                       	smpsPSGAlterVol     $F5
0008C55B 9206                       	dc.b	nF1, $06
0008C55D EC04                       	smpsPSGAlterVol     $04
0008C55F E701                       	dc.b	smpsNoAttack, $01
0008C561 EC07                       	smpsPSGAlterVol     $07
0008C563 8006                       	dc.b	nRst, $06
0008C565 E103                       	smpsAlterNote       $03
0008C567 01                         	dc.b	$01
0008C568 E104                       	smpsAlterNote       $04
0008C56A 01                         	dc.b	$01
0008C56B E100                       	smpsAlterNote       $00
0008C56D 01                         	dc.b	$01
0008C56E E1FA                       	smpsAlterNote       $FA
0008C570 01                         	dc.b	$01
0008C571 E1FD                       	smpsAlterNote       $FD
0008C573 ECF5                       	smpsPSGAlterVol     $F5
0008C575 9206                       	dc.b	nF1, $06
0008C577 EC04                       	smpsPSGAlterVol     $04
0008C579 E701                       	dc.b	smpsNoAttack, $01
0008C57B EC07                       	smpsPSGAlterVol     $07
0008C57D 8003                       	dc.b	nRst, $03
0008C57F ECF5                       	smpsPSGAlterVol     $F5
0008C581 9106                       	dc.b	nE1, $06
0008C583 EC04                       	smpsPSGAlterVol     $04
0008C585 E701                       	dc.b	smpsNoAttack, $01
0008C587 EC07                       	smpsPSGAlterVol     $07
0008C589 8006                       	dc.b	nRst, $06
0008C58B E100                       	smpsAlterNote       $00
0008C58D 01                         	dc.b	$01
0008C58E E104                       	smpsAlterNote       $04
0008C590 01                         	dc.b	$01
0008C591 E100                       	smpsAlterNote       $00
0008C593 01                         	dc.b	$01
0008C594 E1FD                       	smpsAlterNote       $FD
0008C596 01                         	dc.b	$01
0008C597 ECF5                       	smpsPSGAlterVol     $F5
0008C599 9206                       	dc.b	nF1, $06
0008C59B EC04                       	smpsPSGAlterVol     $04
0008C59D E701                       	dc.b	smpsNoAttack, $01
0008C59F EC07                       	smpsPSGAlterVol     $07
0008C5A1 8003                       	dc.b	nRst, $03
0008C5A3 ECF5                       	smpsPSGAlterVol     $F5
0008C5A5 9207                       	dc.b	nF1, $07
0008C5A7 EC0B                       	smpsPSGAlterVol     $0B
0008C5A9 8007                       	dc.b	nRst, $07
0008C5AB E103                       	smpsAlterNote       $03
0008C5AD 0101                       	dc.b	$01, $01
0008C5AF E1FD                       	smpsAlterNote       $FD
0008C5B1 01                         	dc.b	$01
0008C5B2 E1FB                       	smpsAlterNote       $FB
0008C5B4 01                         	dc.b	$01
0008C5B5 E1FD                       	smpsAlterNote       $FD
0008C5B7 ECF5                       	smpsPSGAlterVol     $F5
0008C5B9 9406                       	dc.b	nG1, $06
0008C5BB EC0B                       	smpsPSGAlterVol     $0B
0008C5BD 8004                       	dc.b	nRst, $04
0008C5BF ECF5                       	smpsPSGAlterVol     $F5
0008C5C1 9406                       	dc.b	nG1, $06
0008C5C3 EC04                       	smpsPSGAlterVol     $04
0008C5C5 E701                       	dc.b	smpsNoAttack, $01
0008C5C7 EC07                       	smpsPSGAlterVol     $07
0008C5C9 8006                       	dc.b	nRst, $06
0008C5CB E100                       	smpsAlterNote       $00
0008C5CD 01                         	dc.b	$01
0008C5CE E104                       	smpsAlterNote       $04
0008C5D0 01                         	dc.b	$01
0008C5D1 E100                       	smpsAlterNote       $00
0008C5D3 01                         	dc.b	$01
0008C5D4 E1F9                       	smpsAlterNote       $F9
0008C5D6 01                         	dc.b	$01
0008C5D7 E1FD                       	smpsAlterNote       $FD
0008C5D9 ECF5                       	smpsPSGAlterVol     $F5
0008C5DB 9206                       	dc.b	nF1, $06
0008C5DD EC04                       	smpsPSGAlterVol     $04
0008C5DF E701                       	dc.b	smpsNoAttack, $01
0008C5E1 EC07                       	smpsPSGAlterVol     $07
0008C5E3 8003                       	dc.b	nRst, $03
0008C5E5 ECF5                       	smpsPSGAlterVol     $F5
0008C5E7 9207                       	dc.b	nF1, $07
0008C5E9 EC0B                       	smpsPSGAlterVol     $0B
0008C5EB 8006                       	dc.b	nRst, $06
0008C5ED E100                       	smpsAlterNote       $00
0008C5EF 01                         	dc.b	$01
0008C5F0 E104                       	smpsAlterNote       $04
0008C5F2 01                         	dc.b	$01
0008C5F3 E103                       	smpsAlterNote       $03
0008C5F5 01                         	dc.b	$01
0008C5F6 E1FD                       	smpsAlterNote       $FD
0008C5F8 01                         	dc.b	$01
0008C5F9 ECF5                       	smpsPSGAlterVol     $F5
0008C5FB 9207                       	dc.b	nF1, $07
0008C5FD EC0B                       	smpsPSGAlterVol     $0B
0008C5FF 8004                       	dc.b	nRst, $04
0008C601 ECF5                       	smpsPSGAlterVol     $F5
0008C603 9206                       	dc.b	nF1, $06
0008C605 EC0B                       	smpsPSGAlterVol     $0B
0008C607 8007                       	dc.b	nRst, $07
0008C609 E103                       	smpsAlterNote       $03
0008C60B 0101                       	dc.b	$01, $01
0008C60D E100                       	smpsAlterNote       $00
0008C60F 01                         	dc.b	$01
0008C610 E1FA                       	smpsAlterNote       $FA
0008C612 01                         	dc.b	$01
0008C613 E1FD                       	smpsAlterNote       $FD
0008C615 ECF5                       	smpsPSGAlterVol     $F5
0008C617 9206                       	dc.b	nF1, $06
0008C619 EC04                       	smpsPSGAlterVol     $04
0008C61B E701                       	dc.b	smpsNoAttack, $01
0008C61D EC07                       	smpsPSGAlterVol     $07
0008C61F 8003                       	dc.b	nRst, $03
0008C621 ECF5                       	smpsPSGAlterVol     $F5
0008C623 9206                       	dc.b	nF1, $06
0008C625 EC04                       	smpsPSGAlterVol     $04
0008C627 E701                       	dc.b	smpsNoAttack, $01
0008C629 EC07                       	smpsPSGAlterVol     $07
0008C62B 8006                       	dc.b	nRst, $06
0008C62D E100                       	smpsAlterNote       $00
0008C62F 01                         	dc.b	$01
0008C630 E104                       	smpsAlterNote       $04
0008C632 01                         	dc.b	$01
0008C633 E100                       	smpsAlterNote       $00
0008C635 01                         	dc.b	$01
0008C636 E1FD                       	smpsAlterNote       $FD
0008C638 01                         	dc.b	$01
0008C639 ECF5                       	smpsPSGAlterVol     $F5
0008C63B 9206                       	dc.b	nF1, $06
0008C63D EC04                       	smpsPSGAlterVol     $04
0008C63F E701                       	dc.b	smpsNoAttack, $01
0008C641 EC07                       	smpsPSGAlterVol     $07
0008C643 8003                       	dc.b	nRst, $03
0008C645 ECF5                       	smpsPSGAlterVol     $F5
0008C647 9207                       	dc.b	nF1, $07
0008C649 EC0B                       	smpsPSGAlterVol     $0B
0008C64B 8007                       	dc.b	nRst, $07
0008C64D E103                       	smpsAlterNote       $03
0008C64F 0101                       	dc.b	$01, $01
0008C651 E1FD                       	smpsAlterNote       $FD
0008C653 01                         	dc.b	$01
0008C654 E1FA                       	smpsAlterNote       $FA
0008C656 01                         	dc.b	$01
0008C657 E1FD                       	smpsAlterNote       $FD
0008C659 ECF5                       	smpsPSGAlterVol     $F5
0008C65B 9206                       	dc.b	nF1, $06
0008C65D EC0B                       	smpsPSGAlterVol     $0B
0008C65F 8004                       	dc.b	nRst, $04
0008C661 ECF5                       	smpsPSGAlterVol     $F5
0008C663 9206                       	dc.b	nF1, $06
0008C665 EC04                       	smpsPSGAlterVol     $04
0008C667 E701                       	dc.b	smpsNoAttack, $01
0008C669 EC07                       	smpsPSGAlterVol     $07
0008C66B 8006                       	dc.b	nRst, $06
0008C66D E103                       	smpsAlterNote       $03
0008C66F 01                         	dc.b	$01
0008C670 E104                       	smpsAlterNote       $04
0008C672 01                         	dc.b	$01
0008C673 E100                       	smpsAlterNote       $00
0008C675 01                         	dc.b	$01
0008C676 E1FA                       	smpsAlterNote       $FA
0008C678 01                         	dc.b	$01
0008C679 E1FD                       	smpsAlterNote       $FD
0008C67B ECF5                       	smpsPSGAlterVol     $F5
0008C67D 9206                       	dc.b	nF1, $06
0008C67F EC04                       	smpsPSGAlterVol     $04
0008C681 E701                       	dc.b	smpsNoAttack, $01
0008C683 EC07                       	smpsPSGAlterVol     $07
0008C685 8003                       	dc.b	nRst, $03
0008C687 ECF5                       	smpsPSGAlterVol     $F5
0008C689 9206                       	dc.b	nF1, $06
0008C68B EC04                       	smpsPSGAlterVol     $04
0008C68D E701                       	dc.b	smpsNoAttack, $01
0008C68F EC07                       	smpsPSGAlterVol     $07
0008C691 8006                       	dc.b	nRst, $06
0008C693 E100                       	smpsAlterNote       $00
0008C695 01                         	dc.b	$01
0008C696 E104                       	smpsAlterNote       $04
0008C698 01                         	dc.b	$01
0008C699 E103                       	smpsAlterNote       $03
0008C69B 01                         	dc.b	$01
0008C69C E1FD                       	smpsAlterNote       $FD
0008C69E 01                         	dc.b	$01
0008C69F ECF5                       	smpsPSGAlterVol     $F5
0008C6A1 9107                       	dc.b	nE1, $07
0008C6A3 EC0B                       	smpsPSGAlterVol     $0B
0008C6A5 8004                       	dc.b	nRst, $04
0008C6A7 ECF5                       	smpsPSGAlterVol     $F5
0008C6A9 9106                       	dc.b	nE1, $06
0008C6AB EC0B                       	smpsPSGAlterVol     $0B
0008C6AD 8007                       	dc.b	nRst, $07
0008C6AF E103                       	smpsAlterNote       $03
0008C6B1 0101                       	dc.b	$01, $01
0008C6B3 E100                       	smpsAlterNote       $00
0008C6B5 01                         	dc.b	$01
0008C6B6 E1FA                       	smpsAlterNote       $FA
0008C6B8 01                         	dc.b	$01
0008C6B9 E1FD                       	smpsAlterNote       $FD
0008C6BB ECF5                       	smpsPSGAlterVol     $F5
0008C6BD 9106                       	dc.b	nE1, $06
0008C6BF EC04                       	smpsPSGAlterVol     $04
0008C6C1 E701                       	dc.b	smpsNoAttack, $01
0008C6C3 EC07                       	smpsPSGAlterVol     $07
0008C6C5 8003                       	dc.b	nRst, $03
0008C6C7 ECF5                       	smpsPSGAlterVol     $F5
0008C6C9 9106                       	dc.b	nE1, $06
0008C6CB EC04                       	smpsPSGAlterVol     $04
0008C6CD E701                       	dc.b	smpsNoAttack, $01
0008C6CF EC07                       	smpsPSGAlterVol     $07
0008C6D1 8006                       	dc.b	nRst, $06
0008C6D3 E100                       	smpsAlterNote       $00
0008C6D5 01                         	dc.b	$01
0008C6D6 E104                       	smpsAlterNote       $04
0008C6D8 01                         	dc.b	$01
0008C6D9 E100                       	smpsAlterNote       $00
0008C6DB 01                         	dc.b	$01
0008C6DC E1FA                       	smpsAlterNote       $FA
0008C6DE 01                         	dc.b	$01
0008C6DF E1FD                       	smpsAlterNote       $FD
0008C6E1 ECF5                       	smpsPSGAlterVol     $F5
0008C6E3 9106                       	dc.b	nE1, $06
0008C6E5 EC04                       	smpsPSGAlterVol     $04
0008C6E7 E701                       	dc.b	smpsNoAttack, $01
0008C6E9 EC07                       	smpsPSGAlterVol     $07
0008C6EB 8003                       	dc.b	nRst, $03
0008C6ED ECF5                       	smpsPSGAlterVol     $F5
0008C6EF 9107 9106                  	dc.b	nE1, $07, nE1, $06
0008C6F3 EC04                       	smpsPSGAlterVol     $04
0008C6F5 E701                       	dc.b	smpsNoAttack, $01
0008C6F7 ECFC                       	smpsPSGAlterVol     $FC
0008C6F9 9103 9103                  	dc.b	nE1, $03, nE1, $03
0008C6FD EC04                       	smpsPSGAlterVol     $04
0008C6FF E701                       	dc.b	smpsNoAttack, $01
0008C701 ECFC                       	smpsPSGAlterVol     $FC
0008C703 9106                       	dc.b	nE1, $06
0008C705 EC04                       	smpsPSGAlterVol     $04
0008C707 E701                       	dc.b	smpsNoAttack, $01
0008C709 EC07                       	smpsPSGAlterVol     $07
0008C70B 8006                       	dc.b	nRst, $06
0008C70D E100                       	smpsAlterNote       $00
0008C70F 01                         	dc.b	$01
0008C710 E104                       	smpsAlterNote       $04
0008C712 01                         	dc.b	$01
0008C713 E100                       	smpsAlterNote       $00
0008C715 01                         	dc.b	$01
0008C716 E1FA                       	smpsAlterNote       $FA
0008C718 01                         	dc.b	$01
0008C719 E1F9                       	smpsAlterNote       $F9
0008C71B 01                         	dc.b	$01
0008C71C E1FD                       	smpsAlterNote       $FD
0008C71E 01                         	dc.b	$01
0008C71F E103                       	smpsAlterNote       $03
0008C721 01                         	dc.b	$01
0008C722 E104                       	smpsAlterNote       $04
0008C724 01                         	dc.b	$01
0008C725 E100                       	smpsAlterNote       $00
0008C727 01                         	dc.b	$01
0008C728 E1FA                       	smpsAlterNote       $FA
0008C72A 0101                       	dc.b	$01, $01
0008C72C E1FD                       	smpsAlterNote       $FD
0008C72E ECF5                       	smpsPSGAlterVol     $F5
0008C730 9206                       	dc.b	nF1, $06
0008C732 EC04                       	smpsPSGAlterVol     $04
0008C734 E701                       	dc.b	smpsNoAttack, $01
0008C736 EC07                       	smpsPSGAlterVol     $07
0008C738 8003                       	dc.b	nRst, $03
0008C73A ECF5                       	smpsPSGAlterVol     $F5
0008C73C 9206                       	dc.b	nF1, $06
0008C73E EC04                       	smpsPSGAlterVol     $04
0008C740 E701                       	dc.b	smpsNoAttack, $01
0008C742 EC07                       	smpsPSGAlterVol     $07
0008C744 8006                       	dc.b	nRst, $06
0008C746 E100                       	smpsAlterNote       $00
0008C748 01                         	dc.b	$01
0008C749 E104                       	smpsAlterNote       $04
0008C74B 01                         	dc.b	$01
0008C74C E103                       	smpsAlterNote       $03
0008C74E 01                         	dc.b	$01
0008C74F E1FD                       	smpsAlterNote       $FD
0008C751 01                         	dc.b	$01
0008C752 ECF5                       	smpsPSGAlterVol     $F5
0008C754 9407                       	dc.b	nG1, $07
0008C756 EC0B                       	smpsPSGAlterVol     $0B
0008C758 8004                       	dc.b	nRst, $04
0008C75A ECF5                       	smpsPSGAlterVol     $F5
0008C75C 9406                       	dc.b	nG1, $06
0008C75E EC0B                       	smpsPSGAlterVol     $0B
0008C760 8007                       	dc.b	nRst, $07
0008C762 E103                       	smpsAlterNote       $03
0008C764 0101                       	dc.b	$01, $01
0008C766 E1FD                       	smpsAlterNote       $FD
0008C768 01                         	dc.b	$01
0008C769 E1F9                       	smpsAlterNote       $F9
0008C76B 01                         	dc.b	$01
0008C76C E1FD                       	smpsAlterNote       $FD
0008C76E ECF5                       	smpsPSGAlterVol     $F5
0008C770 9206                       	dc.b	nF1, $06
0008C772 EC04                       	smpsPSGAlterVol     $04
0008C774 E701                       	dc.b	smpsNoAttack, $01
0008C776 EC07                       	smpsPSGAlterVol     $07
0008C778 8003                       	dc.b	nRst, $03
0008C77A ECF5                       	smpsPSGAlterVol     $F5
0008C77C 9206                       	dc.b	nF1, $06
0008C77E EC04                       	smpsPSGAlterVol     $04
0008C780 E701                       	dc.b	smpsNoAttack, $01
0008C782 EC07                       	smpsPSGAlterVol     $07
0008C784 8006                       	dc.b	nRst, $06
0008C786 E100                       	smpsAlterNote       $00
0008C788 01                         	dc.b	$01
0008C789 E104                       	smpsAlterNote       $04
0008C78B 01                         	dc.b	$01
0008C78C E100                       	smpsAlterNote       $00
0008C78E 01                         	dc.b	$01
0008C78F E1FA                       	smpsAlterNote       $FA
0008C791 01                         	dc.b	$01
0008C792 E1FD                       	smpsAlterNote       $FD
0008C794 ECF5                       	smpsPSGAlterVol     $F5
0008C796 9206                       	dc.b	nF1, $06
0008C798 EC04                       	smpsPSGAlterVol     $04
0008C79A E701                       	dc.b	smpsNoAttack, $01
0008C79C EC07                       	smpsPSGAlterVol     $07
0008C79E 8003                       	dc.b	nRst, $03
0008C7A0 ECF5                       	smpsPSGAlterVol     $F5
0008C7A2 9107                       	dc.b	nE1, $07
0008C7A4 EC0B                       	smpsPSGAlterVol     $0B
0008C7A6 8006                       	dc.b	nRst, $06
0008C7A8 E100                       	smpsAlterNote       $00
0008C7AA 01                         	dc.b	$01
0008C7AB E103                       	smpsAlterNote       $03
0008C7AD 0101                       	dc.b	$01, $01
0008C7AF E1FD                       	smpsAlterNote       $FD
0008C7B1 01                         	dc.b	$01
0008C7B2 ECF5                       	smpsPSGAlterVol     $F5
0008C7B4 9207                       	dc.b	nF1, $07
0008C7B6 EC0B                       	smpsPSGAlterVol     $0B
0008C7B8 8004                       	dc.b	nRst, $04
0008C7BA ECF5                       	smpsPSGAlterVol     $F5
0008C7BC 9206                       	dc.b	nF1, $06
0008C7BE EC04                       	smpsPSGAlterVol     $04
0008C7C0 E701                       	dc.b	smpsNoAttack, $01
0008C7C2 EC07                       	smpsPSGAlterVol     $07
0008C7C4 8006                       	dc.b	nRst, $06
0008C7C6 E103                       	smpsAlterNote       $03
0008C7C8 01                         	dc.b	$01
0008C7C9 E104                       	smpsAlterNote       $04
0008C7CB 01                         	dc.b	$01
0008C7CC E100                       	smpsAlterNote       $00
0008C7CE 01                         	dc.b	$01
0008C7CF E1FB                       	smpsAlterNote       $FB
0008C7D1 01                         	dc.b	$01
0008C7D2 E1FD                       	smpsAlterNote       $FD
0008C7D4 ECF5                       	smpsPSGAlterVol     $F5
0008C7D6 9406                       	dc.b	nG1, $06
0008C7D8 EC04                       	smpsPSGAlterVol     $04
0008C7DA E701                       	dc.b	smpsNoAttack, $01
0008C7DC EC07                       	smpsPSGAlterVol     $07
0008C7DE 8003                       	dc.b	nRst, $03
0008C7E0 ECF5                       	smpsPSGAlterVol     $F5
0008C7E2 9406                       	dc.b	nG1, $06
0008C7E4 EC04                       	smpsPSGAlterVol     $04
0008C7E6 E701                       	dc.b	smpsNoAttack, $01
0008C7E8 EC07                       	smpsPSGAlterVol     $07
0008C7EA 8006                       	dc.b	nRst, $06
0008C7EC E100                       	smpsAlterNote       $00
0008C7EE 01                         	dc.b	$01
0008C7EF E104                       	smpsAlterNote       $04
0008C7F1 01                         	dc.b	$01
0008C7F2 E100                       	smpsAlterNote       $00
0008C7F4 01                         	dc.b	$01
0008C7F5 E1FD                       	smpsAlterNote       $FD
0008C7F7 01                         	dc.b	$01
0008C7F8 ECF5                       	smpsPSGAlterVol     $F5
0008C7FA 9206                       	dc.b	nF1, $06
0008C7FC EC04                       	smpsPSGAlterVol     $04
0008C7FE E701                       	dc.b	smpsNoAttack, $01
0008C800 EC07                       	smpsPSGAlterVol     $07
0008C802 8003                       	dc.b	nRst, $03
0008C804 ECF5                       	smpsPSGAlterVol     $F5
0008C806 9207                       	dc.b	nF1, $07
0008C808 EC0B                       	smpsPSGAlterVol     $0B
0008C80A 8007                       	dc.b	nRst, $07
0008C80C E103                       	smpsAlterNote       $03
0008C80E 0101                       	dc.b	$01, $01
0008C810 E1FD                       	smpsAlterNote       $FD
0008C812 01                         	dc.b	$01
0008C813 E1FA                       	smpsAlterNote       $FA
0008C815 01                         	dc.b	$01
0008C816 E1FD                       	smpsAlterNote       $FD
0008C818 ECF5                       	smpsPSGAlterVol     $F5
0008C81A 9206                       	dc.b	nF1, $06
0008C81C EC0B                       	smpsPSGAlterVol     $0B
0008C81E 8004                       	dc.b	nRst, $04
0008C820 ECF5                       	smpsPSGAlterVol     $F5
0008C822 9206                       	dc.b	nF1, $06
0008C824 EC04                       	smpsPSGAlterVol     $04
0008C826 E701                       	dc.b	smpsNoAttack, $01
0008C828 EC07                       	smpsPSGAlterVol     $07
0008C82A 8006                       	dc.b	nRst, $06
0008C82C E100                       	smpsAlterNote       $00
0008C82E 01                         	dc.b	$01
0008C82F E104                       	smpsAlterNote       $04
0008C831 01                         	dc.b	$01
0008C832 E100                       	smpsAlterNote       $00
0008C834 01                         	dc.b	$01
0008C835 E1FA                       	smpsAlterNote       $FA
0008C837 01                         	dc.b	$01
0008C838 E1FD                       	smpsAlterNote       $FD
0008C83A ECF5                       	smpsPSGAlterVol     $F5
0008C83C 9206                       	dc.b	nF1, $06
0008C83E EC04                       	smpsPSGAlterVol     $04
0008C840 E704                       	dc.b	smpsNoAttack, $04
0008C842 ECFC                       	smpsPSGAlterVol     $FC
0008C844 9207                       	dc.b	nF1, $07
0008C846 EC0B                       	smpsPSGAlterVol     $0B
0008C848 8006                       	dc.b	nRst, $06
0008C84A E100                       	smpsAlterNote       $00
0008C84C 01                         	dc.b	$01
0008C84D E104                       	smpsAlterNote       $04
0008C84F 01                         	dc.b	$01
0008C850 E103                       	smpsAlterNote       $03
0008C852 01                         	dc.b	$01
0008C853 E1FD                       	smpsAlterNote       $FD
0008C855 01                         	dc.b	$01
0008C856 ECF5                       	smpsPSGAlterVol     $F5
0008C858 9207                       	dc.b	nF1, $07
0008C85A EC0B                       	smpsPSGAlterVol     $0B
0008C85C 8004                       	dc.b	nRst, $04
0008C85E ECF5                       	smpsPSGAlterVol     $F5
0008C860 9206                       	dc.b	nF1, $06
0008C862 EC0B                       	smpsPSGAlterVol     $0B
0008C864 8007                       	dc.b	nRst, $07
0008C866 E103                       	smpsAlterNote       $03
0008C868 0101                       	dc.b	$01, $01
0008C86A E100                       	smpsAlterNote       $00
0008C86C 01                         	dc.b	$01
0008C86D E1FA                       	smpsAlterNote       $FA
0008C86F 01                         	dc.b	$01
0008C870 E1FD                       	smpsAlterNote       $FD
0008C872 ECF5                       	smpsPSGAlterVol     $F5
0008C874 9206                       	dc.b	nF1, $06
0008C876 EC04                       	smpsPSGAlterVol     $04
0008C878 E704                       	dc.b	smpsNoAttack, $04
0008C87A ECFC                       	smpsPSGAlterVol     $FC
0008C87C 9206                       	dc.b	nF1, $06
0008C87E EC04                       	smpsPSGAlterVol     $04
0008C880 E701                       	dc.b	smpsNoAttack, $01
0008C882 EC07                       	smpsPSGAlterVol     $07
0008C884 8006                       	dc.b	nRst, $06
0008C886 E100                       	smpsAlterNote       $00
0008C888 01                         	dc.b	$01
0008C889 E104                       	smpsAlterNote       $04
0008C88B 01                         	dc.b	$01
0008C88C E100                       	smpsAlterNote       $00
0008C88E 01                         	dc.b	$01
0008C88F E1FD                       	smpsAlterNote       $FD
0008C891 01                         	dc.b	$01
0008C892 ECF5                       	smpsPSGAlterVol     $F5
0008C894 9206                       	dc.b	nF1, $06
0008C896 EC04                       	smpsPSGAlterVol     $04
0008C898 E701                       	dc.b	smpsNoAttack, $01
0008C89A EC07                       	smpsPSGAlterVol     $07
0008C89C 8003                       	dc.b	nRst, $03
0008C89E ECF5                       	smpsPSGAlterVol     $F5
0008C8A0 9207                       	dc.b	nF1, $07
0008C8A2 EC0B                       	smpsPSGAlterVol     $0B
0008C8A4 8007                       	dc.b	nRst, $07
0008C8A6 E103                       	smpsAlterNote       $03
0008C8A8 0101                       	dc.b	$01, $01
0008C8AA E1FD                       	smpsAlterNote       $FD
0008C8AC 01                         	dc.b	$01
0008C8AD E1FA                       	smpsAlterNote       $FA
0008C8AF 01                         	dc.b	$01
0008C8B0 E1FD                       	smpsAlterNote       $FD
0008C8B2 ECF5                       	smpsPSGAlterVol     $F5
0008C8B4 9106                       	dc.b	nE1, $06
0008C8B6 EC0B                       	smpsPSGAlterVol     $0B
0008C8B8 8004                       	dc.b	nRst, $04
0008C8BA ECF5                       	smpsPSGAlterVol     $F5
0008C8BC 9106                       	dc.b	nE1, $06
0008C8BE EC04                       	smpsPSGAlterVol     $04
0008C8C0 E701                       	dc.b	smpsNoAttack, $01
0008C8C2 EC07                       	smpsPSGAlterVol     $07
0008C8C4 8006                       	dc.b	nRst, $06
0008C8C6 E100                       	smpsAlterNote       $00
0008C8C8 01                         	dc.b	$01
0008C8C9 E104                       	smpsAlterNote       $04
0008C8CB 01                         	dc.b	$01
0008C8CC E100                       	smpsAlterNote       $00
0008C8CE 01                         	dc.b	$01
0008C8CF E1FA                       	smpsAlterNote       $FA
0008C8D1 01                         	dc.b	$01
0008C8D2 E1FD                       	smpsAlterNote       $FD
0008C8D4 ECF5                       	smpsPSGAlterVol     $F5
0008C8D6 9106                       	dc.b	nE1, $06
0008C8D8 EC04                       	smpsPSGAlterVol     $04
0008C8DA E701                       	dc.b	smpsNoAttack, $01
0008C8DC EC07                       	smpsPSGAlterVol     $07
0008C8DE 8003                       	dc.b	nRst, $03
0008C8E0 ECF5                       	smpsPSGAlterVol     $F5
0008C8E2 9106                       	dc.b	nE1, $06
0008C8E4 EC04                       	smpsPSGAlterVol     $04
0008C8E6 E701                       	dc.b	smpsNoAttack, $01
0008C8E8 EC07                       	smpsPSGAlterVol     $07
0008C8EA 8006                       	dc.b	nRst, $06
0008C8EC E100                       	smpsAlterNote       $00
0008C8EE 01                         	dc.b	$01
0008C8EF E104                       	smpsAlterNote       $04
0008C8F1 01                         	dc.b	$01
0008C8F2 E103                       	smpsAlterNote       $03
0008C8F4 01                         	dc.b	$01
0008C8F5 E1FD                       	smpsAlterNote       $FD
0008C8F7 01                         	dc.b	$01
0008C8F8 ECF5                       	smpsPSGAlterVol     $F5
0008C8FA 9107                       	dc.b	nE1, $07
0008C8FC EC0B                       	smpsPSGAlterVol     $0B
0008C8FE 8004                       	dc.b	nRst, $04
0008C900 ECF5                       	smpsPSGAlterVol     $F5
0008C902 9106                       	dc.b	nE1, $06
0008C904 EC0B                       	smpsPSGAlterVol     $0B
0008C906 8007                       	dc.b	nRst, $07
0008C908 E103                       	smpsAlterNote       $03
0008C90A 0101                       	dc.b	$01, $01
0008C90C E100                       	smpsAlterNote       $00
0008C90E 01                         	dc.b	$01
0008C90F E1FA                       	smpsAlterNote       $FA
0008C911 01                         	dc.b	$01
0008C912 E1FD                       	smpsAlterNote       $FD
0008C914 ECF5                       	smpsPSGAlterVol     $F5
0008C916 9106                       	dc.b	nE1, $06
0008C918 EC04                       	smpsPSGAlterVol     $04
0008C91A E701                       	dc.b	smpsNoAttack, $01
0008C91C EC07                       	smpsPSGAlterVol     $07
0008C91E 8003                       	dc.b	nRst, $03
0008C920 ECF5                       	smpsPSGAlterVol     $F5
0008C922 9106                       	dc.b	nE1, $06
0008C924 EC04                       	smpsPSGAlterVol     $04
0008C926 E701                       	dc.b	smpsNoAttack, $01
0008C928 EC07                       	smpsPSGAlterVol     $07
0008C92A 8003                       	dc.b	nRst, $03
0008C92C ECF5                       	smpsPSGAlterVol     $F5
0008C92E 9207                       	dc.b	nF1, $07
0008C930 EC0B                       	smpsPSGAlterVol     $0B
0008C932 8006                       	dc.b	nRst, $06
0008C934 E100                       	smpsAlterNote       $00
0008C936 01                         	dc.b	$01
0008C937 E104                       	smpsAlterNote       $04
0008C939 01                         	dc.b	$01
0008C93A E103                       	smpsAlterNote       $03
0008C93C 01                         	dc.b	$01
0008C93D E1FD                       	smpsAlterNote       $FD
0008C93F 01                         	dc.b	$01
0008C940 E1F9                       	smpsAlterNote       $F9
0008C942 01                         	dc.b	$01
0008C943 E1FD                       	smpsAlterNote       $FD
0008C945 01                         	dc.b	$01
0008C946 E100                       	smpsAlterNote       $00
0008C948 01                         	dc.b	$01
0008C949 E104                       	smpsAlterNote       $04
0008C94B 01                         	dc.b	$01
0008C94C E1FD                       	smpsAlterNote       $FD
0008C94E ECF5                       	smpsPSGAlterVol     $F5
0008C950 9203 9203                  	dc.b	nF1, $03, nF1, $03
0008C954 EC04                       	smpsPSGAlterVol     $04
0008C956 E701                       	dc.b	smpsNoAttack, $01
0008C958 EC07                       	smpsPSGAlterVol     $07
0008C95A 8009                       	dc.b	nRst, $09
0008C95C E100                       	smpsAlterNote       $00
0008C95E 01                         	dc.b	$01
0008C95F E104                       	smpsAlterNote       $04
0008C961 01                         	dc.b	$01
0008C962 E103                       	smpsAlterNote       $03
0008C964 01                         	dc.b	$01
0008C965 E1FD                       	smpsAlterNote       $FD
0008C967 01                         	dc.b	$01
0008C968 E1F9                       	smpsAlterNote       $F9
0008C96A 01                         	dc.b	$01
0008C96B E1FD                       	smpsAlterNote       $FD
0008C96D 01                         	dc.b	$01
0008C96E E100                       	smpsAlterNote       $00
0008C970 01                         	dc.b	$01
0008C971 E104                       	smpsAlterNote       $04
0008C973 01                         	dc.b	$01
0008C974 E100                       	smpsAlterNote       $00
0008C976 01                         	dc.b	$01
0008C977 E1FA                       	smpsAlterNote       $FA
0008C979 01                         	dc.b	$01
0008C97A E1F9                       	smpsAlterNote       $F9
0008C97C 01                         	dc.b	$01
0008C97D E1FD                       	smpsAlterNote       $FD
0008C97F 01                         	dc.b	$01
0008C980 E103                       	smpsAlterNote       $03
0008C982 0101                       	dc.b	$01, $01
0008C984 E100                       	smpsAlterNote       $00
0008C986 01                         	dc.b	$01
0008C987 E1FD                       	smpsAlterNote       $FD
0008C989 ECF5                       	smpsPSGAlterVol     $F5
0008C98B 9202                       	dc.b	nF1, $02
0008C98D EC04                       	smpsPSGAlterVol     $04
0008C98F E701                       	dc.b	smpsNoAttack, $01
0008C991 ECFC                       	smpsPSGAlterVol     $FC
0008C993 9106                       	dc.b	nE1, $06
0008C995 EC04                       	smpsPSGAlterVol     $04
0008C997 E701                       	dc.b	smpsNoAttack, $01
0008C999 EC07                       	smpsPSGAlterVol     $07
0008C99B 8006                       	dc.b	nRst, $06
0008C99D E100                       	smpsAlterNote       $00
0008C99F 01                         	dc.b	$01
0008C9A0 E104                       	smpsAlterNote       $04
0008C9A2 01                         	dc.b	$01
0008C9A3 E100                       	smpsAlterNote       $00
0008C9A5 01                         	dc.b	$01
0008C9A6 E1FD                       	smpsAlterNote       $FD
0008C9A8 01                         	dc.b	$01
0008C9A9 E1F9                       	smpsAlterNote       $F9
0008C9AB 01                         	dc.b	$01
0008C9AC E1FD                       	smpsAlterNote       $FD
0008C9AE 01                         	dc.b	$01
0008C9AF E103                       	smpsAlterNote       $03
0008C9B1 01                         	dc.b	$01
0008C9B2 E104                       	smpsAlterNote       $04
0008C9B4 01                         	dc.b	$01
0008C9B5 E1FD                       	smpsAlterNote       $FD
0008C9B7 ECF5                       	smpsPSGAlterVol     $F5
0008C9B9 9102                       	dc.b	nE1, $02
0008C9BB EC04                       	smpsPSGAlterVol     $04
0008C9BD E701                       	dc.b	smpsNoAttack, $01
0008C9BF ECFC                       	smpsPSGAlterVol     $FC
0008C9C1 920D                       	dc.b	nF1, $0D
0008C9C3 E100                       	smpsAlterNote       $00
0008C9C5 E701                       	dc.b	smpsNoAttack, $01
0008C9C7 E104                       	smpsAlterNote       $04
0008C9C9 E701                       	dc.b	smpsNoAttack, $01
0008C9CB E100                       	smpsAlterNote       $00
0008C9CD E701                       	dc.b	smpsNoAttack, $01
0008C9CF E1FD                       	smpsAlterNote       $FD
0008C9D1 E701                       	dc.b	smpsNoAttack, $01
0008C9D3 E1F9                       	smpsAlterNote       $F9
0008C9D5 E701                       	dc.b	smpsNoAttack, $01
0008C9D7 E1FD                       	smpsAlterNote       $FD
0008C9D9 E701                       	dc.b	smpsNoAttack, $01
0008C9DB E103                       	smpsAlterNote       $03
0008C9DD E701                       	dc.b	smpsNoAttack, $01
0008C9DF E104                       	smpsAlterNote       $04
0008C9E1 E701                       	dc.b	smpsNoAttack, $01
0008C9E3 E100                       	smpsAlterNote       $00
0008C9E5 E701                       	dc.b	smpsNoAttack, $01
0008C9E7 E1FA                       	smpsAlterNote       $FA
0008C9E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9ED E1FD                       	smpsAlterNote       $FD
0008C9EF E701                       	dc.b	smpsNoAttack, $01
0008C9F1 E103                       	smpsAlterNote       $03
0008C9F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9F7 E1FD                       	smpsAlterNote       $FD
0008C9F9 E701                       	dc.b	smpsNoAttack, $01
0008C9FB E1F9                       	smpsAlterNote       $F9
0008C9FD E701                       	dc.b	smpsNoAttack, $01
0008C9FF E1FA                       	smpsAlterNote       $FA
0008CA01 E701                       	dc.b	smpsNoAttack, $01
0008CA03 E100                       	smpsAlterNote       $00
0008CA05 EC04                       	smpsPSGAlterVol     $04
0008CA07 E701                       	dc.b	smpsNoAttack, $01
0008CA09 EC07                       	smpsPSGAlterVol     $07
0008CA0B E104                       	smpsAlterNote       $04
0008CA0D 8001                       	dc.b	nRst, $01
0008CA0F E100                       	smpsAlterNote       $00
0008CA11 01                         	dc.b	$01
0008CA12 E1FD                       	smpsAlterNote       $FD
0008CA14 01                         	dc.b	$01
0008CA15 E1F9                       	smpsAlterNote       $F9
0008CA17 01                         	dc.b	$01
0008CA18 E1FD                       	smpsAlterNote       $FD
0008CA1A 01                         	dc.b	$01
0008CA1B E103                       	smpsAlterNote       $03
0008CA1D 01                         	dc.b	$01
0008CA1E E104                       	smpsAlterNote       $04
0008CA20 01                         	dc.b	$01
0008CA21 E1FD                       	smpsAlterNote       $FD
0008CA23 ECF5                       	smpsPSGAlterVol     $F5
0008CA25 9106                       	dc.b	nE1, $06
0008CA27 EC04                       	smpsPSGAlterVol     $04
0008CA29 E701                       	dc.b	smpsNoAttack, $01
0008CA2B EC07                       	smpsPSGAlterVol     $07
0008CA2D 8003                       	dc.b	nRst, $03
0008CA2F ECF5                       	smpsPSGAlterVol     $F5
0008CA31 9106                       	dc.b	nE1, $06
0008CA33 EC04                       	smpsPSGAlterVol     $04
0008CA35 E701                       	dc.b	smpsNoAttack, $01
0008CA37 EC07                       	smpsPSGAlterVol     $07
0008CA39 8006                       	dc.b	nRst, $06
0008CA3B E100                       	smpsAlterNote       $00
0008CA3D 01                         	dc.b	$01
0008CA3E E104                       	smpsAlterNote       $04
0008CA40 01                         	dc.b	$01
0008CA41 E100                       	smpsAlterNote       $00
0008CA43 01                         	dc.b	$01
0008CA44 E1FA                       	smpsAlterNote       $FA
0008CA46 01                         	dc.b	$01
0008CA47 E1FD                       	smpsAlterNote       $FD
0008CA49 ECF5                       	smpsPSGAlterVol     $F5
0008CA4B 9206                       	dc.b	nF1, $06
0008CA4D EC04                       	smpsPSGAlterVol     $04
0008CA4F E701                       	dc.b	smpsNoAttack, $01
0008CA51 EC07                       	smpsPSGAlterVol     $07
0008CA53 8003                       	dc.b	nRst, $03
0008CA55 ECF5                       	smpsPSGAlterVol     $F5
0008CA57 9207                       	dc.b	nF1, $07
0008CA59 EC0B                       	smpsPSGAlterVol     $0B
0008CA5B 8006                       	dc.b	nRst, $06
0008CA5D E100                       	smpsAlterNote       $00
0008CA5F 01                         	dc.b	$01
0008CA60 E103                       	smpsAlterNote       $03
0008CA62 0101                       	dc.b	$01, $01
0008CA64 E1FD                       	smpsAlterNote       $FD
0008CA66 01                         	dc.b	$01
0008CA67 ECF5                       	smpsPSGAlterVol     $F5
0008CA69 9107                       	dc.b	nE1, $07
0008CA6B EC0B                       	smpsPSGAlterVol     $0B
0008CA6D 8004                       	dc.b	nRst, $04
0008CA6F ECF5                       	smpsPSGAlterVol     $F5
0008CA71 9106                       	dc.b	nE1, $06
0008CA73 EC04                       	smpsPSGAlterVol     $04
0008CA75 E701                       	dc.b	smpsNoAttack, $01
0008CA77 EC07                       	smpsPSGAlterVol     $07
0008CA79 8006                       	dc.b	nRst, $06
0008CA7B E103                       	smpsAlterNote       $03
0008CA7D 01                         	dc.b	$01
0008CA7E E104                       	smpsAlterNote       $04
0008CA80 01                         	dc.b	$01
0008CA81 E100                       	smpsAlterNote       $00
0008CA83 01                         	dc.b	$01
0008CA84 E1FA                       	smpsAlterNote       $FA
0008CA86 01                         	dc.b	$01
0008CA87 E1FD                       	smpsAlterNote       $FD
0008CA89 ECF5                       	smpsPSGAlterVol     $F5
0008CA8B 9106                       	dc.b	nE1, $06
0008CA8D EC04                       	smpsPSGAlterVol     $04
0008CA8F E701                       	dc.b	smpsNoAttack, $01
0008CA91 EC07                       	smpsPSGAlterVol     $07
0008CA93 8003                       	dc.b	nRst, $03
0008CA95 ECF5                       	smpsPSGAlterVol     $F5
0008CA97 9106                       	dc.b	nE1, $06
0008CA99 EC04                       	smpsPSGAlterVol     $04
0008CA9B E701                       	dc.b	smpsNoAttack, $01
0008CA9D EC07                       	smpsPSGAlterVol     $07
0008CA9F 8003                       	dc.b	nRst, $03
0008CAA1 ECF5                       	smpsPSGAlterVol     $F5
0008CAA3 9207                       	dc.b	nF1, $07
0008CAA5 EC0B                       	smpsPSGAlterVol     $0B
0008CAA7 8006                       	dc.b	nRst, $06
0008CAA9 E100                       	smpsAlterNote       $00
0008CAAB 01                         	dc.b	$01
0008CAAC E103                       	smpsAlterNote       $03
0008CAAE 0101                       	dc.b	$01, $01
0008CAB0 E1FD                       	smpsAlterNote       $FD
0008CAB2 01                         	dc.b	$01
0008CAB3 E1F9                       	smpsAlterNote       $F9
0008CAB5 01                         	dc.b	$01
0008CAB6 E1FA                       	smpsAlterNote       $FA
0008CAB8 01                         	dc.b	$01
0008CAB9 E100                       	smpsAlterNote       $00
0008CABB 01                         	dc.b	$01
0008CABC E104                       	smpsAlterNote       $04
0008CABE 01                         	dc.b	$01
0008CABF E1FD                       	smpsAlterNote       $FD
0008CAC1 ECF5                       	smpsPSGAlterVol     $F5
0008CAC3 9203 9203                  	dc.b	nF1, $03, nF1, $03
0008CAC7 EC04                       	smpsPSGAlterVol     $04
0008CAC9 E701                       	dc.b	smpsNoAttack, $01
0008CACB EC07                       	smpsPSGAlterVol     $07
0008CACD 8009                       	dc.b	nRst, $09
0008CACF E100                       	smpsAlterNote       $00
0008CAD1 01                         	dc.b	$01
0008CAD2 E103                       	smpsAlterNote       $03
0008CAD4 0101                       	dc.b	$01, $01
0008CAD6 E1FD                       	smpsAlterNote       $FD
0008CAD8 01                         	dc.b	$01
0008CAD9 E1F9                       	smpsAlterNote       $F9
0008CADB 01                         	dc.b	$01
0008CADC E1FA                       	smpsAlterNote       $FA
0008CADE 01                         	dc.b	$01
0008CADF E100                       	smpsAlterNote       $00
0008CAE1 01                         	dc.b	$01
0008CAE2 E104                       	smpsAlterNote       $04
0008CAE4 01                         	dc.b	$01
0008CAE5 E100                       	smpsAlterNote       $00
0008CAE7 01                         	dc.b	$01
0008CAE8 E1FD                       	smpsAlterNote       $FD
0008CAEA 01                         	dc.b	$01
0008CAEB E1F9                       	smpsAlterNote       $F9
0008CAED 01                         	dc.b	$01
0008CAEE E1FD                       	smpsAlterNote       $FD
0008CAF0 01                         	dc.b	$01
0008CAF1 E103                       	smpsAlterNote       $03
0008CAF3 01                         	dc.b	$01
0008CAF4 E104                       	smpsAlterNote       $04
0008CAF6 01                         	dc.b	$01
0008CAF7 E100                       	smpsAlterNote       $00
0008CAF9 01                         	dc.b	$01
0008CAFA E1FD                       	smpsAlterNote       $FD
0008CAFC ECF5                       	smpsPSGAlterVol     $F5
0008CAFE 9203 9106                  	dc.b	nF1, $03, nE1, $06
0008CB02 EC04                       	smpsPSGAlterVol     $04
0008CB04 E701                       	dc.b	smpsNoAttack, $01
0008CB06 EC07                       	smpsPSGAlterVol     $07
0008CB08 8006                       	dc.b	nRst, $06
0008CB0A E100                       	smpsAlterNote       $00
0008CB0C 01                         	dc.b	$01
0008CB0D E104                       	smpsAlterNote       $04
0008CB0F 01                         	dc.b	$01
0008CB10 E103                       	smpsAlterNote       $03
0008CB12 01                         	dc.b	$01
0008CB13 E1FD                       	smpsAlterNote       $FD
0008CB15 01                         	dc.b	$01
0008CB16 E1F9                       	smpsAlterNote       $F9
0008CB18 01                         	dc.b	$01
0008CB19 E1FD                       	smpsAlterNote       $FD
0008CB1B 01                         	dc.b	$01
0008CB1C E100                       	smpsAlterNote       $00
0008CB1E 01                         	dc.b	$01
0008CB1F E104                       	smpsAlterNote       $04
0008CB21 01                         	dc.b	$01
0008CB22 E1FD                       	smpsAlterNote       $FD
0008CB24 ECF5                       	smpsPSGAlterVol     $F5
0008CB26 9103 920D                  	dc.b	nE1, $03, nF1, $0D
0008CB2A E100                       	smpsAlterNote       $00
0008CB2C E701                       	dc.b	smpsNoAttack, $01
0008CB2E E104                       	smpsAlterNote       $04
0008CB30 E701                       	dc.b	smpsNoAttack, $01
0008CB32 E100                       	smpsAlterNote       $00
0008CB34 E701                       	dc.b	smpsNoAttack, $01
0008CB36 E1FD                       	smpsAlterNote       $FD
0008CB38 E701                       	dc.b	smpsNoAttack, $01
0008CB3A E1F9                       	smpsAlterNote       $F9
0008CB3C E701                       	dc.b	smpsNoAttack, $01
0008CB3E E1FD                       	smpsAlterNote       $FD
0008CB40 E701                       	dc.b	smpsNoAttack, $01
0008CB42 E103                       	smpsAlterNote       $03
0008CB44 E701                       	dc.b	smpsNoAttack, $01
0008CB46 E104                       	smpsAlterNote       $04
0008CB48 E701                       	dc.b	smpsNoAttack, $01
0008CB4A E100                       	smpsAlterNote       $00
0008CB4C E701                       	dc.b	smpsNoAttack, $01
0008CB4E E1FA                       	smpsAlterNote       $FA
0008CB50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB54 E1FD                       	smpsAlterNote       $FD
0008CB56 E701                       	dc.b	smpsNoAttack, $01
0008CB58 E103                       	smpsAlterNote       $03
0008CB5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB5E E100                       	smpsAlterNote       $00
0008CB60 E701                       	dc.b	smpsNoAttack, $01
0008CB62 E1FA                       	smpsAlterNote       $FA
0008CB64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB68 E100                       	smpsAlterNote       $00
0008CB6A EC04                       	smpsPSGAlterVol     $04
0008CB6C E701                       	dc.b	smpsNoAttack, $01
0008CB6E EC07                       	smpsPSGAlterVol     $07
0008CB70 E104                       	smpsAlterNote       $04
0008CB72 8001                       	dc.b	nRst, $01
0008CB74 E103                       	smpsAlterNote       $03
0008CB76 01                         	dc.b	$01
0008CB77 E1FD                       	smpsAlterNote       $FD
0008CB79 01                         	dc.b	$01
0008CB7A E1F9                       	smpsAlterNote       $F9
0008CB7C 01                         	dc.b	$01
0008CB7D E1FD                       	smpsAlterNote       $FD
0008CB7F 01                         	dc.b	$01
0008CB80 E100                       	smpsAlterNote       $00
0008CB82 01                         	dc.b	$01
0008CB83 E104                       	smpsAlterNote       $04
0008CB85 01                         	dc.b	$01
0008CB86 E1FD                       	smpsAlterNote       $FD
0008CB88 ECF5                       	smpsPSGAlterVol     $F5
0008CB8A 9106                       	dc.b	nE1, $06
0008CB8C EC04                       	smpsPSGAlterVol     $04
0008CB8E E701                       	dc.b	smpsNoAttack, $01
0008CB90 EC07                       	smpsPSGAlterVol     $07
0008CB92 8003                       	dc.b	nRst, $03
0008CB94 ECF5                       	smpsPSGAlterVol     $F5
0008CB96 9106                       	dc.b	nE1, $06
0008CB98 EC04                       	smpsPSGAlterVol     $04
0008CB9A E701                       	dc.b	smpsNoAttack, $01
0008CB9C EC07                       	smpsPSGAlterVol     $07
0008CB9E 8006                       	dc.b	nRst, $06
0008CBA0 E100                       	smpsAlterNote       $00
0008CBA2 01                         	dc.b	$01
0008CBA3 E104                       	smpsAlterNote       $04
0008CBA5 01                         	dc.b	$01
0008CBA6 E100                       	smpsAlterNote       $00
0008CBA8 01                         	dc.b	$01
0008CBA9 E1FD                       	smpsAlterNote       $FD
0008CBAB 01                         	dc.b	$01
0008CBAC ECF5                       	smpsPSGAlterVol     $F5
0008CBAE 9206                       	dc.b	nF1, $06
0008CBB0 EC04                       	smpsPSGAlterVol     $04
0008CBB2 E701                       	dc.b	smpsNoAttack, $01
0008CBB4 EC07                       	smpsPSGAlterVol     $07
0008CBB6 8003                       	dc.b	nRst, $03
0008CBB8 ECF5                       	smpsPSGAlterVol     $F5
0008CBBA 9207                       	dc.b	nF1, $07
0008CBBC EC0B                       	smpsPSGAlterVol     $0B
0008CBBE 8007                       	dc.b	nRst, $07
0008CBC0 E103                       	smpsAlterNote       $03
0008CBC2 0101                       	dc.b	$01, $01
0008CBC4 E1FD                       	smpsAlterNote       $FD
0008CBC6 01                         	dc.b	$01
0008CBC7 E1FA                       	smpsAlterNote       $FA
0008CBC9 01                         	dc.b	$01
0008CBCA E1FD                       	smpsAlterNote       $FD
0008CBCC ECF5                       	smpsPSGAlterVol     $F5
0008CBCE 9106                       	dc.b	nE1, $06
0008CBD0 EC0B                       	smpsPSGAlterVol     $0B
0008CBD2 8004                       	dc.b	nRst, $04
0008CBD4 ECF5                       	smpsPSGAlterVol     $F5
0008CBD6 9106                       	dc.b	nE1, $06
0008CBD8 EC04                       	smpsPSGAlterVol     $04
0008CBDA E701                       	dc.b	smpsNoAttack, $01
0008CBDC EC07                       	smpsPSGAlterVol     $07
0008CBDE 8006                       	dc.b	nRst, $06
0008CBE0 E100                       	smpsAlterNote       $00
0008CBE2 01                         	dc.b	$01
0008CBE3 E104                       	smpsAlterNote       $04
0008CBE5 01                         	dc.b	$01
0008CBE6 E100                       	smpsAlterNote       $00
0008CBE8 01                         	dc.b	$01
0008CBE9 E1FA                       	smpsAlterNote       $FA
0008CBEB 01                         	dc.b	$01
0008CBEC E1FD                       	smpsAlterNote       $FD
0008CBEE ECF5                       	smpsPSGAlterVol     $F5
0008CBF0 9206                       	dc.b	nF1, $06
0008CBF2 EC04                       	smpsPSGAlterVol     $04
0008CBF4 E701                       	dc.b	smpsNoAttack, $01
0008CBF6 EC07                       	smpsPSGAlterVol     $07
0008CBF8 8003                       	dc.b	nRst, $03
0008CBFA ECF5                       	smpsPSGAlterVol     $F5
0008CBFC 9206                       	dc.b	nF1, $06
0008CBFE EC04                       	smpsPSGAlterVol     $04
0008CC00 E701                       	dc.b	smpsNoAttack, $01
0008CC02 EC07                       	smpsPSGAlterVol     $07
0008CC04 8006                       	dc.b	nRst, $06
0008CC06 E100                       	smpsAlterNote       $00
0008CC08 01                         	dc.b	$01
0008CC09 E104                       	smpsAlterNote       $04
0008CC0B 01                         	dc.b	$01
0008CC0C E103                       	smpsAlterNote       $03
0008CC0E 01                         	dc.b	$01
0008CC0F E1FD                       	smpsAlterNote       $FD
0008CC11 01                         	dc.b	$01
0008CC12 ECF5                       	smpsPSGAlterVol     $F5
0008CC14 9107                       	dc.b	nE1, $07
0008CC16 EC0B                       	smpsPSGAlterVol     $0B
0008CC18 8004                       	dc.b	nRst, $04
0008CC1A ECF5                       	smpsPSGAlterVol     $F5
0008CC1C 9106                       	dc.b	nE1, $06
0008CC1E EC0B                       	smpsPSGAlterVol     $0B
0008CC20 8007                       	dc.b	nRst, $07
0008CC22 E103                       	smpsAlterNote       $03
0008CC24 0101                       	dc.b	$01, $01
0008CC26 E100                       	smpsAlterNote       $00
0008CC28 01                         	dc.b	$01
0008CC29 E1FA                       	smpsAlterNote       $FA
0008CC2B 01                         	dc.b	$01
0008CC2C E1FD                       	smpsAlterNote       $FD
0008CC2E ECF5                       	smpsPSGAlterVol     $F5
0008CC30 9206                       	dc.b	nF1, $06
0008CC32 EC04                       	smpsPSGAlterVol     $04
0008CC34 E701                       	dc.b	smpsNoAttack, $01
0008CC36 EC07                       	smpsPSGAlterVol     $07
0008CC38 8003                       	dc.b	nRst, $03
0008CC3A ECF5                       	smpsPSGAlterVol     $F5
0008CC3C 9206                       	dc.b	nF1, $06
0008CC3E EC04                       	smpsPSGAlterVol     $04
0008CC40 E701                       	dc.b	smpsNoAttack, $01
0008CC42 EC07                       	smpsPSGAlterVol     $07
0008CC44 8006                       	dc.b	nRst, $06
0008CC46 E100                       	smpsAlterNote       $00
0008CC48 01                         	dc.b	$01
0008CC49 E104                       	smpsAlterNote       $04
0008CC4B 01                         	dc.b	$01
0008CC4C E100                       	smpsAlterNote       $00
0008CC4E 01                         	dc.b	$01
0008CC4F E1FD                       	smpsAlterNote       $FD
0008CC51 01                         	dc.b	$01
0008CC52 ECF5                       	smpsPSGAlterVol     $F5
0008CC54 9106                       	dc.b	nE1, $06
0008CC56 EC04                       	smpsPSGAlterVol     $04
0008CC58 E701                       	dc.b	smpsNoAttack, $01
0008CC5A EC07                       	smpsPSGAlterVol     $07
0008CC5C 8003                       	dc.b	nRst, $03
0008CC5E ECF5                       	smpsPSGAlterVol     $F5
0008CC60 9107 9106                  	dc.b	nE1, $07, nE1, $06
0008CC64 EC04                       	smpsPSGAlterVol     $04
0008CC66 E701                       	dc.b	smpsNoAttack, $01
0008CC68 ECFC                       	smpsPSGAlterVol     $FC
0008CC6A 9103                       	dc.b	nE1, $03
0008CC6C EC04                       	smpsPSGAlterVol     $04
0008CC6E E701                       	dc.b	smpsNoAttack, $01
0008CC70 ECFC                       	smpsPSGAlterVol     $FC
0008CC72 9102                       	dc.b	nE1, $02
0008CC74 EC04                       	smpsPSGAlterVol     $04
0008CC76 E701                       	dc.b	smpsNoAttack, $01
0008CC78 ECFC                       	smpsPSGAlterVol     $FC
0008CC7A 9103                       	dc.b	nE1, $03
0008CC7C EC0B                       	smpsPSGAlterVol     $0B
0008CC7E 800A                       	dc.b	nRst, $0A
0008CC80 E100                       	smpsAlterNote       $00
0008CC82 01                         	dc.b	$01
0008CC83 E104                       	smpsAlterNote       $04
0008CC85 01                         	dc.b	$01
0008CC86 E100                       	smpsAlterNote       $00
0008CC88 01                         	dc.b	$01
0008CC89 E1FA                       	smpsAlterNote       $FA
0008CC8B 01                         	dc.b	$01
0008CC8C E1F9                       	smpsAlterNote       $F9
0008CC8E 01                         	dc.b	$01
0008CC8F E1FD                       	smpsAlterNote       $FD
0008CC91 01                         	dc.b	$01
0008CC92 E103                       	smpsAlterNote       $03
0008CC94 0101                       	dc.b	$01, $01
0008CC96 E100                       	smpsAlterNote       $00
0008CC98 01                         	dc.b	$01
0008CC99 E1FA                       	smpsAlterNote       $FA
0008CC9B 0101                       	dc.b	$01, $01
0008CC9D E1FD                       	smpsAlterNote       $FD
0008CC9F ECF5                       	smpsPSGAlterVol     $F5
0008CCA1 9206                       	dc.b	nF1, $06
0008CCA3 EC04                       	smpsPSGAlterVol     $04
0008CCA5 E704                       	dc.b	smpsNoAttack, $04
0008CCA7 ECFC                       	smpsPSGAlterVol     $FC
0008CCA9 9206                       	dc.b	nF1, $06
0008CCAB EC04                       	smpsPSGAlterVol     $04
0008CCAD E701                       	dc.b	smpsNoAttack, $01
0008CCAF EC07                       	smpsPSGAlterVol     $07
0008CCB1 8006                       	dc.b	nRst, $06
0008CCB3 E100                       	smpsAlterNote       $00
0008CCB5 01                         	dc.b	$01
0008CCB6 E104                       	smpsAlterNote       $04
0008CCB8 01                         	dc.b	$01
0008CCB9 E103                       	smpsAlterNote       $03
0008CCBB 01                         	dc.b	$01
0008CCBC E1FD                       	smpsAlterNote       $FD
0008CCBE 01                         	dc.b	$01
0008CCBF ECF5                       	smpsPSGAlterVol     $F5
0008CCC1 9407                       	dc.b	nG1, $07
0008CCC3 EC0B                       	smpsPSGAlterVol     $0B
0008CCC5 8004                       	dc.b	nRst, $04
0008CCC7 ECF5                       	smpsPSGAlterVol     $F5
0008CCC9 9406                       	dc.b	nG1, $06
0008CCCB EC0B                       	smpsPSGAlterVol     $0B
0008CCCD 8007                       	dc.b	nRst, $07
0008CCCF E103                       	smpsAlterNote       $03
0008CCD1 0101                       	dc.b	$01, $01
0008CCD3 E1FD                       	smpsAlterNote       $FD
0008CCD5 01                         	dc.b	$01
0008CCD6 E1F9                       	smpsAlterNote       $F9
0008CCD8 01                         	dc.b	$01
0008CCD9 E1FD                       	smpsAlterNote       $FD
0008CCDB ECF5                       	smpsPSGAlterVol     $F5
0008CCDD 9206                       	dc.b	nF1, $06
0008CCDF EC04                       	smpsPSGAlterVol     $04
0008CCE1 E701                       	dc.b	smpsNoAttack, $01
0008CCE3 EC07                       	smpsPSGAlterVol     $07
0008CCE5 8003                       	dc.b	nRst, $03
0008CCE7 ECF5                       	smpsPSGAlterVol     $F5
0008CCE9 9206                       	dc.b	nF1, $06
0008CCEB EC04                       	smpsPSGAlterVol     $04
0008CCED E701                       	dc.b	smpsNoAttack, $01
0008CCEF EC07                       	smpsPSGAlterVol     $07
0008CCF1 8006                       	dc.b	nRst, $06
0008CCF3 E100                       	smpsAlterNote       $00
0008CCF5 01                         	dc.b	$01
0008CCF6 E104                       	smpsAlterNote       $04
0008CCF8 01                         	dc.b	$01
0008CCF9 E100                       	smpsAlterNote       $00
0008CCFB 01                         	dc.b	$01
0008CCFC E1FA                       	smpsAlterNote       $FA
0008CCFE 01                         	dc.b	$01
0008CCFF E1FD                       	smpsAlterNote       $FD
0008CD01 ECF5                       	smpsPSGAlterVol     $F5
0008CD03 9206                       	dc.b	nF1, $06
0008CD05 EC04                       	smpsPSGAlterVol     $04
0008CD07 E701                       	dc.b	smpsNoAttack, $01
0008CD09 EC07                       	smpsPSGAlterVol     $07
0008CD0B 8003                       	dc.b	nRst, $03
0008CD0D ECF5                       	smpsPSGAlterVol     $F5
0008CD0F 9107                       	dc.b	nE1, $07
0008CD11 EC0B                       	smpsPSGAlterVol     $0B
0008CD13 8006                       	dc.b	nRst, $06
0008CD15 E100                       	smpsAlterNote       $00
0008CD17 01                         	dc.b	$01
0008CD18 E103                       	smpsAlterNote       $03
0008CD1A 0101                       	dc.b	$01, $01
0008CD1C E1FD                       	smpsAlterNote       $FD
0008CD1E 01                         	dc.b	$01
0008CD1F ECF5                       	smpsPSGAlterVol     $F5
0008CD21 9207                       	dc.b	nF1, $07
0008CD23 EC0B                       	smpsPSGAlterVol     $0B
0008CD25 8004                       	dc.b	nRst, $04
0008CD27 ECF5                       	smpsPSGAlterVol     $F5
0008CD29 9206                       	dc.b	nF1, $06
0008CD2B EC04                       	smpsPSGAlterVol     $04
0008CD2D E701                       	dc.b	smpsNoAttack, $01
0008CD2F EC07                       	smpsPSGAlterVol     $07
0008CD31 8006                       	dc.b	nRst, $06
0008CD33 E103                       	smpsAlterNote       $03
0008CD35 01                         	dc.b	$01
0008CD36 E104                       	smpsAlterNote       $04
0008CD38 01                         	dc.b	$01
0008CD39 E100                       	smpsAlterNote       $00
0008CD3B 01                         	dc.b	$01
0008CD3C E1FB                       	smpsAlterNote       $FB
0008CD3E 01                         	dc.b	$01
0008CD3F E1FD                       	smpsAlterNote       $FD
0008CD41 ECF5                       	smpsPSGAlterVol     $F5
0008CD43 9406                       	dc.b	nG1, $06
0008CD45 EC04                       	smpsPSGAlterVol     $04
0008CD47 E701                       	dc.b	smpsNoAttack, $01
0008CD49 EC07                       	smpsPSGAlterVol     $07
0008CD4B 8003                       	dc.b	nRst, $03
0008CD4D ECF5                       	smpsPSGAlterVol     $F5
0008CD4F 9406                       	dc.b	nG1, $06
0008CD51 EC04                       	smpsPSGAlterVol     $04
0008CD53 E701                       	dc.b	smpsNoAttack, $01
0008CD55 EC07                       	smpsPSGAlterVol     $07
0008CD57 8006                       	dc.b	nRst, $06
0008CD59 E100                       	smpsAlterNote       $00
0008CD5B 01                         	dc.b	$01
0008CD5C E104                       	smpsAlterNote       $04
0008CD5E 01                         	dc.b	$01
0008CD5F E100                       	smpsAlterNote       $00
0008CD61 01                         	dc.b	$01
0008CD62 E1FD                       	smpsAlterNote       $FD
0008CD64 01                         	dc.b	$01
0008CD65 ECF5                       	smpsPSGAlterVol     $F5
0008CD67 9206                       	dc.b	nF1, $06
0008CD69 EC04                       	smpsPSGAlterVol     $04
0008CD6B E701                       	dc.b	smpsNoAttack, $01
0008CD6D EC07                       	smpsPSGAlterVol     $07
0008CD6F 8003                       	dc.b	nRst, $03
0008CD71 ECF5                       	smpsPSGAlterVol     $F5
0008CD73 9207                       	dc.b	nF1, $07
0008CD75 EC0B                       	smpsPSGAlterVol     $0B
0008CD77 8007                       	dc.b	nRst, $07
0008CD79 E103                       	smpsAlterNote       $03
0008CD7B 0101                       	dc.b	$01, $01
0008CD7D E1FD                       	smpsAlterNote       $FD
0008CD7F 01                         	dc.b	$01
0008CD80 E1FA                       	smpsAlterNote       $FA
0008CD82 01                         	dc.b	$01
0008CD83 E1FD                       	smpsAlterNote       $FD
0008CD85 ECF5                       	smpsPSGAlterVol     $F5
0008CD87 9206                       	dc.b	nF1, $06
0008CD89 EC0B                       	smpsPSGAlterVol     $0B
0008CD8B 8004                       	dc.b	nRst, $04
0008CD8D ECF5                       	smpsPSGAlterVol     $F5
0008CD8F 9206                       	dc.b	nF1, $06
0008CD91 EC04                       	smpsPSGAlterVol     $04
0008CD93 E701                       	dc.b	smpsNoAttack, $01
0008CD95 EC07                       	smpsPSGAlterVol     $07
0008CD97 8006                       	dc.b	nRst, $06
0008CD99 E100                       	smpsAlterNote       $00
0008CD9B 01                         	dc.b	$01
0008CD9C E104                       	smpsAlterNote       $04
0008CD9E 01                         	dc.b	$01
0008CD9F E100                       	smpsAlterNote       $00
0008CDA1 01                         	dc.b	$01
0008CDA2 E1FA                       	smpsAlterNote       $FA
0008CDA4 01                         	dc.b	$01
0008CDA5 E1FD                       	smpsAlterNote       $FD
0008CDA7 ECF5                       	smpsPSGAlterVol     $F5
0008CDA9 9206                       	dc.b	nF1, $06
0008CDAB EC04                       	smpsPSGAlterVol     $04
0008CDAD E701                       	dc.b	smpsNoAttack, $01
0008CDAF EC07                       	smpsPSGAlterVol     $07
0008CDB1 8003                       	dc.b	nRst, $03
0008CDB3 ECF5                       	smpsPSGAlterVol     $F5
0008CDB5 9207                       	dc.b	nF1, $07
0008CDB7 EC0B                       	smpsPSGAlterVol     $0B
0008CDB9 8006                       	dc.b	nRst, $06
0008CDBB E100                       	smpsAlterNote       $00
0008CDBD 01                         	dc.b	$01
0008CDBE E103                       	smpsAlterNote       $03
0008CDC0 0101                       	dc.b	$01, $01
0008CDC2 E1FD                       	smpsAlterNote       $FD
0008CDC4 01                         	dc.b	$01
0008CDC5 ECF5                       	smpsPSGAlterVol     $F5
0008CDC7 9207                       	dc.b	nF1, $07
0008CDC9 EC0B                       	smpsPSGAlterVol     $0B
0008CDCB 8004                       	dc.b	nRst, $04
0008CDCD ECF5                       	smpsPSGAlterVol     $F5
0008CDCF 9206                       	dc.b	nF1, $06
0008CDD1 EC0B                       	smpsPSGAlterVol     $0B
0008CDD3 8007                       	dc.b	nRst, $07
0008CDD5 E103                       	smpsAlterNote       $03
0008CDD7 0101                       	dc.b	$01, $01
0008CDD9 E100                       	smpsAlterNote       $00
0008CDDB 01                         	dc.b	$01
0008CDDC E1FA                       	smpsAlterNote       $FA
0008CDDE 01                         	dc.b	$01
0008CDDF E1FD                       	smpsAlterNote       $FD
0008CDE1 ECF5                       	smpsPSGAlterVol     $F5
0008CDE3 9206                       	dc.b	nF1, $06
0008CDE5 EC04                       	smpsPSGAlterVol     $04
0008CDE7 E701                       	dc.b	smpsNoAttack, $01
0008CDE9 EC07                       	smpsPSGAlterVol     $07
0008CDEB 8003                       	dc.b	nRst, $03
0008CDED ECF5                       	smpsPSGAlterVol     $F5
0008CDEF 9206                       	dc.b	nF1, $06
0008CDF1 EC04                       	smpsPSGAlterVol     $04
0008CDF3 E701                       	dc.b	smpsNoAttack, $01
0008CDF5 EC07                       	smpsPSGAlterVol     $07
0008CDF7 8006                       	dc.b	nRst, $06
0008CDF9 E100                       	smpsAlterNote       $00
0008CDFB 01                         	dc.b	$01
0008CDFC E104                       	smpsAlterNote       $04
0008CDFE 01                         	dc.b	$01
0008CDFF E100                       	smpsAlterNote       $00
0008CE01 01                         	dc.b	$01
0008CE02 E1FD                       	smpsAlterNote       $FD
0008CE04 01                         	dc.b	$01
0008CE05 ECF5                       	smpsPSGAlterVol     $F5
0008CE07 9206                       	dc.b	nF1, $06
0008CE09 EC04                       	smpsPSGAlterVol     $04
0008CE0B E701                       	dc.b	smpsNoAttack, $01
0008CE0D EC07                       	smpsPSGAlterVol     $07
0008CE0F 8003                       	dc.b	nRst, $03
0008CE11 ECF5                       	smpsPSGAlterVol     $F5
0008CE13 9207                       	dc.b	nF1, $07
0008CE15 EC0B                       	smpsPSGAlterVol     $0B
0008CE17 8007                       	dc.b	nRst, $07
0008CE19 E104                       	smpsAlterNote       $04
0008CE1B 0101                       	dc.b	$01, $01
0008CE1D E1FB                       	smpsAlterNote       $FB
0008CE1F 01                         	dc.b	$01
0008CE20 E1F6                       	smpsAlterNote       $F6
0008CE22 0101                       	dc.b	$01, $01
0008CE24 E1FF                       	smpsAlterNote       $FF
0008CE26 01                         	dc.b	$01
0008CE27 E105                       	smpsAlterNote       $05
0008CE29 01                         	dc.b	$01
0008CE2A E104                       	smpsAlterNote       $04
0008CE2C 01                         	dc.b	$01
0008CE2D E1FB                       	smpsAlterNote       $FB
0008CE2F 01                         	dc.b	$01
0008CE30 E1F5                       	smpsAlterNote       $F5
0008CE32 01                         	dc.b	$01
0008CE33 E1FC                       	smpsAlterNote       $FC
0008CE35 ECF5                       	smpsPSGAlterVol     $F5
0008CE37 8B0E                       	dc.b	nBb0, $0E
0008CE39 E102                       	smpsAlterNote       $02
0008CE3B EC0B                       	smpsPSGAlterVol     $0B
0008CE3D 8001                       	dc.b	nRst, $01
0008CE3F E101                       	smpsAlterNote       $01
0008CE41 01                         	dc.b	$01
0008CE42 E1FC                       	smpsAlterNote       $FC
0008CE44 01                         	dc.b	$01
0008CE45 E1F9                       	smpsAlterNote       $F9
0008CE47 0101                       	dc.b	$01, $01
0008CE49 E1FF                       	smpsAlterNote       $FF
0008CE4B 01                         	dc.b	$01
0008CE4C E102                       	smpsAlterNote       $02
0008CE4E 01                         	dc.b	$01
0008CE4F E1FF                       	smpsAlterNote       $FF
0008CE51 01                         	dc.b	$01
0008CE52 E1FC                       	smpsAlterNote       $FC
0008CE54 01                         	dc.b	$01
0008CE55 E1F8                       	smpsAlterNote       $F8
0008CE57 01                         	dc.b	$01
0008CE58 E1FC                       	smpsAlterNote       $FC
0008CE5A 01                         	dc.b	$01
0008CE5B E101                       	smpsAlterNote       $01
0008CE5D 01                         	dc.b	$01
0008CE5E E102                       	smpsAlterNote       $02
0008CE60 01                         	dc.b	$01
0008CE61 E1FF                       	smpsAlterNote       $FF
0008CE63 01                         	dc.b	$01
0008CE64 E1FB                       	smpsAlterNote       $FB
0008CE66 ECF5                       	smpsPSGAlterVol     $F5
0008CE68 8D0D                       	dc.b	nC1, $0D
0008CE6A E101                       	smpsAlterNote       $01
0008CE6C EC0B                       	smpsPSGAlterVol     $0B
0008CE6E 8001                       	dc.b	nRst, $01
0008CE70 E102                       	smpsAlterNote       $02
0008CE72 01                         	dc.b	$01
0008CE73 E1FF                       	smpsAlterNote       $FF
0008CE75 01                         	dc.b	$01
0008CE76 E1F9                       	smpsAlterNote       $F9
0008CE78 0101                       	dc.b	$01, $01
0008CE7A E1FC                       	smpsAlterNote       $FC
0008CE7C 01                         	dc.b	$01
0008CE7D E101                       	smpsAlterNote       $01
0008CE7F 0101                       	dc.b	$01, $01
0008CE81 E1FC                       	smpsAlterNote       $FC
0008CE83 01                         	dc.b	$01
0008CE84 E1F9                       	smpsAlterNote       $F9
0008CE86 0101                       	dc.b	$01, $01
0008CE88 E1FF                       	smpsAlterNote       $FF
0008CE8A 01                         	dc.b	$01
0008CE8B E102                       	smpsAlterNote       $02
0008CE8D 01                         	dc.b	$01
0008CE8E E101                       	smpsAlterNote       $01
0008CE90 01                         	dc.b	$01
0008CE91 E1FC                       	smpsAlterNote       $FC
0008CE93 ECF5                       	smpsPSGAlterVol     $F5
0008CE95 8F0D                       	dc.b	nD1, $0D
0008CE97 E1FF                       	smpsAlterNote       $FF
0008CE99 EC04                       	smpsPSGAlterVol     $04
0008CE9B E701                       	dc.b	smpsNoAttack, $01
0008CE9D EC07                       	smpsPSGAlterVol     $07
0008CE9F E103                       	smpsAlterNote       $03
0008CEA1 8001                       	dc.b	nRst, $01
0008CEA3 E102                       	smpsAlterNote       $02
0008CEA5 01                         	dc.b	$01
0008CEA6 E1FD                       	smpsAlterNote       $FD
0008CEA8 01                         	dc.b	$01
0008CEA9 E1F9                       	smpsAlterNote       $F9
0008CEAB 01                         	dc.b	$01
0008CEAC E1FD                       	smpsAlterNote       $FD
0008CEAE 01                         	dc.b	$01
0008CEAF E100                       	smpsAlterNote       $00
0008CEB1 01                         	dc.b	$01
0008CEB2 E103                       	smpsAlterNote       $03
0008CEB4 01                         	dc.b	$01
0008CEB5 E100                       	smpsAlterNote       $00
0008CEB7 01                         	dc.b	$01
0008CEB8 E1FA                       	smpsAlterNote       $FA
0008CEBA 01                         	dc.b	$01
0008CEBB E1F9                       	smpsAlterNote       $F9
0008CEBD 01                         	dc.b	$01
0008CEBE E1FD                       	smpsAlterNote       $FD
0008CEC0 01                         	dc.b	$01
0008CEC1 E102                       	smpsAlterNote       $02
0008CEC3 0101                       	dc.b	$01, $01
0008CEC5 E100                       	smpsAlterNote       $00
0008CEC7 01                         	dc.b	$01
0008CEC8 E1FD                       	smpsAlterNote       $FD
0008CECA ECF5                       	smpsPSGAlterVol     $F5
0008CECC 910D                       	dc.b	nE1, $0D
0008CECE E103                       	smpsAlterNote       $03
0008CED0 EC0B                       	smpsPSGAlterVol     $0B
0008CED2 8001 01                    	dc.b	nRst, $01, $01
0008CED5 E100                       	smpsAlterNote       $00
0008CED7 01                         	dc.b	$01
0008CED8 E1FA                       	smpsAlterNote       $FA
0008CEDA 0101                       	dc.b	$01, $01
0008CEDC E100                       	smpsAlterNote       $00
0008CEDE 01                         	dc.b	$01
0008CEDF E103                       	smpsAlterNote       $03
0008CEE1 01                         	dc.b	$01
0008CEE2 E1FD                       	smpsAlterNote       $FD
0008CEE4 ECF5                       	smpsPSGAlterVol     $F5
0008CEE6 9206                       	dc.b	nF1, $06
0008CEE8 EC04                       	smpsPSGAlterVol     $04
0008CEEA E701                       	dc.b	smpsNoAttack, $01
0008CEEC EC07                       	smpsPSGAlterVol     $07
0008CEEE 8003                       	dc.b	nRst, $03
0008CEF0 ECF5                       	smpsPSGAlterVol     $F5
0008CEF2 9207                       	dc.b	nF1, $07
0008CEF4 EC0B                       	smpsPSGAlterVol     $0B
0008CEF6 8006                       	dc.b	nRst, $06
0008CEF8 E100                       	smpsAlterNote       $00
0008CEFA 01                         	dc.b	$01
0008CEFB E103                       	smpsAlterNote       $03
0008CEFD 0101                       	dc.b	$01, $01
0008CEFF E1FD                       	smpsAlterNote       $FD
0008CF01 01                         	dc.b	$01
0008CF02 ECF5                       	smpsPSGAlterVol     $F5
0008CF04 9407                       	dc.b	nG1, $07
0008CF06 EC0B                       	smpsPSGAlterVol     $0B
0008CF08 8004                       	dc.b	nRst, $04
0008CF0A ECF5                       	smpsPSGAlterVol     $F5
0008CF0C 9406                       	dc.b	nG1, $06
0008CF0E EC04                       	smpsPSGAlterVol     $04
0008CF10 E701                       	dc.b	smpsNoAttack, $01
0008CF12 EC07                       	smpsPSGAlterVol     $07
0008CF14 8006                       	dc.b	nRst, $06
0008CF16 E103                       	smpsAlterNote       $03
0008CF18 01                         	dc.b	$01
0008CF19 E104                       	smpsAlterNote       $04
0008CF1B 01                         	dc.b	$01
0008CF1C E100                       	smpsAlterNote       $00
0008CF1E 01                         	dc.b	$01
0008CF1F E1F9                       	smpsAlterNote       $F9
0008CF21 01                         	dc.b	$01
0008CF22 E1FD                       	smpsAlterNote       $FD
0008CF24 ECF5                       	smpsPSGAlterVol     $F5
0008CF26 9206                       	dc.b	nF1, $06
0008CF28 EC04                       	smpsPSGAlterVol     $04
0008CF2A E701                       	dc.b	smpsNoAttack, $01
0008CF2C EC07                       	smpsPSGAlterVol     $07
0008CF2E 8003                       	dc.b	nRst, $03
0008CF30 ECF5                       	smpsPSGAlterVol     $F5
0008CF32 9206                       	dc.b	nF1, $06
0008CF34 EC04                       	smpsPSGAlterVol     $04
0008CF36 E701                       	dc.b	smpsNoAttack, $01
0008CF38 EC07                       	smpsPSGAlterVol     $07
0008CF3A 8006                       	dc.b	nRst, $06
0008CF3C E100                       	smpsAlterNote       $00
0008CF3E 01                         	dc.b	$01
0008CF3F E104                       	smpsAlterNote       $04
0008CF41 01                         	dc.b	$01
0008CF42 E103                       	smpsAlterNote       $03
0008CF44 01                         	dc.b	$01
0008CF45 E1FD                       	smpsAlterNote       $FD
0008CF47 01                         	dc.b	$01
0008CF48 ECF5                       	smpsPSGAlterVol     $F5
0008CF4A 9407                       	dc.b	nG1, $07
0008CF4C EC0B                       	smpsPSGAlterVol     $0B
0008CF4E 8004                       	dc.b	nRst, $04
0008CF50 ECF5                       	smpsPSGAlterVol     $F5
0008CF52 9406                       	dc.b	nG1, $06
0008CF54 EC0B                       	smpsPSGAlterVol     $0B
0008CF56 8007                       	dc.b	nRst, $07
0008CF58 E103                       	smpsAlterNote       $03
0008CF5A 0101                       	dc.b	$01, $01
0008CF5C E100                       	smpsAlterNote       $00
0008CF5E 01                         	dc.b	$01
0008CF5F E1F9                       	smpsAlterNote       $F9
0008CF61 01                         	dc.b	$01
0008CF62 E1FD                       	smpsAlterNote       $FD
0008CF64 ECF5                       	smpsPSGAlterVol     $F5
0008CF66 9206                       	dc.b	nF1, $06
0008CF68 EC04                       	smpsPSGAlterVol     $04
0008CF6A E701                       	dc.b	smpsNoAttack, $01
0008CF6C EC07                       	smpsPSGAlterVol     $07
0008CF6E 8003                       	dc.b	nRst, $03
0008CF70 ECF5                       	smpsPSGAlterVol     $F5
0008CF72 9206                       	dc.b	nF1, $06
0008CF74 EC04                       	smpsPSGAlterVol     $04
0008CF76 E701                       	dc.b	smpsNoAttack, $01
0008CF78 EC07                       	smpsPSGAlterVol     $07
0008CF7A 8006                       	dc.b	nRst, $06
0008CF7C E100                       	smpsAlterNote       $00
0008CF7E 01                         	dc.b	$01
0008CF7F E104                       	smpsAlterNote       $04
0008CF81 01                         	dc.b	$01
0008CF82 E100                       	smpsAlterNote       $00
0008CF84 01                         	dc.b	$01
0008CF85 E1FB                       	smpsAlterNote       $FB
0008CF87 01                         	dc.b	$01
0008CF88 E1FD                       	smpsAlterNote       $FD
0008CF8A ECF5                       	smpsPSGAlterVol     $F5
0008CF8C 9406                       	dc.b	nG1, $06
0008CF8E EC04                       	smpsPSGAlterVol     $04
0008CF90 E701                       	dc.b	smpsNoAttack, $01
0008CF92 EC07                       	smpsPSGAlterVol     $07
0008CF94 8003                       	dc.b	nRst, $03
0008CF96 ECF5                       	smpsPSGAlterVol     $F5
0008CF98 9407                       	dc.b	nG1, $07
0008CF9A EC0B                       	smpsPSGAlterVol     $0B
0008CF9C 8006                       	dc.b	nRst, $06
0008CF9E E100                       	smpsAlterNote       $00
0008CFA0 01                         	dc.b	$01
0008CFA1 E103                       	smpsAlterNote       $03
0008CFA3 0101                       	dc.b	$01, $01
0008CFA5 E1FD                       	smpsAlterNote       $FD
0008CFA7 01                         	dc.b	$01
0008CFA8 ECF5                       	smpsPSGAlterVol     $F5
0008CFAA 9207                       	dc.b	nF1, $07
0008CFAC EC0B                       	smpsPSGAlterVol     $0B
0008CFAE 8004                       	dc.b	nRst, $04
0008CFB0 ECF5                       	smpsPSGAlterVol     $F5
0008CFB2 9206                       	dc.b	nF1, $06
0008CFB4 EC04                       	smpsPSGAlterVol     $04
0008CFB6 E701                       	dc.b	smpsNoAttack, $01
0008CFB8 ECFC                       	smpsPSGAlterVol     $FC
0008CFBA E1FC                       	smpsAlterNote       $FC
0008CFBC 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
0008CFC0 EC04                       	smpsPSGAlterVol     $04
0008CFC2 E701                       	dc.b	smpsNoAttack, $01
0008CFC4 ECFC                       	smpsPSGAlterVol     $FC
0008CFC6 9003                       	dc.b	nEb1, $03
0008CFC8 E1FD                       	smpsAlterNote       $FD
0008CFCA 9403                       	dc.b	nG1, $03
0008CFCC EC04                       	smpsPSGAlterVol     $04
0008CFCE E701                       	dc.b	smpsNoAttack, $01
0008CFD0 E1FE                       	smpsAlterNote       $FE
0008CFD2 ECFC                       	smpsPSGAlterVol     $FC
0008CFD4 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008CFD8 EC04                       	smpsPSGAlterVol     $04
0008CFDA E701                       	dc.b	smpsNoAttack, $01
0008CFDC EC07                       	smpsPSGAlterVol     $07
0008CFDE 8009                       	dc.b	nRst, $09
0008CFE0 E100                       	smpsAlterNote       $00
0008CFE2 01                         	dc.b	$01
0008CFE3 F6F5 19                    	smpsJump            music84_Jump07
0008CFE6                            
0008CFE6                            ; PSG2 Data
0008CFE6                            music84_PSG2:
0008CFE6 E1FC                       	smpsAlterNote       $FC
0008CFE8 EC04                       	smpsPSGAlterVol     $04
0008CFEA 8F03                       	dc.b	nD1, $03
0008CFEC E1FD                       	smpsAlterNote       $FD
0008CFEE 9203                       	dc.b	nF1, $03
0008CFF0 EC04                       	smpsPSGAlterVol     $04
0008CFF2 E701                       	dc.b	smpsNoAttack, $01
0008CFF4 E1FE                       	smpsAlterNote       $FE
0008CFF6 ECFC                       	smpsPSGAlterVol     $FC
0008CFF8 9603                       	dc.b	nA1, $03
0008CFFA E1FD                       	smpsAlterNote       $FD
0008CFFC 9103                       	dc.b	nE1, $03
0008CFFE EC04                       	smpsPSGAlterVol     $04
0008D000 E701                       	dc.b	smpsNoAttack, $01
0008D002 ECFC                       	smpsPSGAlterVol     $FC
0008D004 9403                       	dc.b	nG1, $03
0008D006 E1FE                       	smpsAlterNote       $FE
0008D008 9703                       	dc.b	nBb1, $03
0008D00A EC04                       	smpsPSGAlterVol     $04
0008D00C E701                       	dc.b	smpsNoAttack, $01
0008D00E E1FF                       	smpsAlterNote       $FF
0008D010 ECFC                       	smpsPSGAlterVol     $FC
0008D012 9B02                       	dc.b	nD2, $02
0008D014 EC04                       	smpsPSGAlterVol     $04
0008D016 E701                       	dc.b	smpsNoAttack, $01
0008D018 ECFC                       	smpsPSGAlterVol     $FC
0008D01A E1FE                       	smpsAlterNote       $FE
0008D01C 9A03                       	dc.b	nCs2, $03
0008D01E EC0B                       	smpsPSGAlterVol     $0B
0008D020 800A                       	dc.b	nRst, $0A
0008D022 E102                       	smpsAlterNote       $02
0008D024 01                         	dc.b	$01
0008D025 E10A                       	smpsAlterNote       $0A
0008D027 01                         	dc.b	$01
0008D028 E102                       	smpsAlterNote       $02
0008D02A 01                         	dc.b	$01
0008D02B E1FC                       	smpsAlterNote       $FC
0008D02D 01                         	dc.b	$01
0008D02E E10A                       	smpsAlterNote       $0A
0008D030 01                         	dc.b	$01
0008D031 E1FC                       	smpsAlterNote       $FC
0008D033 01                         	dc.b	$01
0008D034 E108                       	smpsAlterNote       $08
0008D036 01                         	dc.b	$01
0008D037 E10A                       	smpsAlterNote       $0A
0008D039 01                         	dc.b	$01
0008D03A E102                       	smpsAlterNote       $02
0008D03C 01                         	dc.b	$01
0008D03D E1F7                       	smpsAlterNote       $F7
0008D03F 0101                       	dc.b	$01, $01
0008D041 E102                       	smpsAlterNote       $02
0008D043 01                         	dc.b	$01
0008D044 E108                       	smpsAlterNote       $08
0008D046 0101                       	dc.b	$01, $01
0008D048 E1FC                       	smpsAlterNote       $FC
0008D04A 01                         	dc.b	$01
0008D04B E10A                       	smpsAlterNote       $0A
0008D04D 01                         	dc.b	$01
0008D04E E1F7                       	smpsAlterNote       $F7
0008D050 01                         	dc.b	$01
0008D051 E102                       	smpsAlterNote       $02
0008D053 01                         	dc.b	$01
0008D054 E10A                       	smpsAlterNote       $0A
0008D056 01                         	dc.b	$01
0008D057 E102                       	smpsAlterNote       $02
0008D059 01                         	dc.b	$01
0008D05A E1FC                       	smpsAlterNote       $FC
0008D05C 01                         	dc.b	$01
0008D05D                            
0008D05D                            music84_Jump06:
0008D05D E10A                       	smpsAlterNote       $0A
0008D05F 8001                       	dc.b	nRst, $01
0008D061 E1FC                       	smpsAlterNote       $FC
0008D063 01                         	dc.b	$01
0008D064 E108                       	smpsAlterNote       $08
0008D066 01                         	dc.b	$01
0008D067 E10A                       	smpsAlterNote       $0A
0008D069 01                         	dc.b	$01
0008D06A E1FC                       	smpsAlterNote       $FC
0008D06C ECF5                       	smpsPSGAlterVol     $F5
0008D06E 8F06                       	dc.b	nD1, $06
0008D070 EC04                       	smpsPSGAlterVol     $04
0008D072 E701                       	dc.b	smpsNoAttack, $01
0008D074 EC07                       	smpsPSGAlterVol     $07
0008D076 8003                       	dc.b	nRst, $03
0008D078 ECF5                       	smpsPSGAlterVol     $F5
0008D07A 8F06                       	dc.b	nD1, $06
0008D07C EC04                       	smpsPSGAlterVol     $04
0008D07E E701                       	dc.b	smpsNoAttack, $01
0008D080 EC07                       	smpsPSGAlterVol     $07
0008D082 8006                       	dc.b	nRst, $06
0008D084 E1FF                       	smpsAlterNote       $FF
0008D086 01                         	dc.b	$01
0008D087 E102                       	smpsAlterNote       $02
0008D089 01                         	dc.b	$01
0008D08A E1FF                       	smpsAlterNote       $FF
0008D08C 01                         	dc.b	$01
0008D08D E1F9                       	smpsAlterNote       $F9
0008D08F 01                         	dc.b	$01
0008D090 E1FC                       	smpsAlterNote       $FC
0008D092 ECF5                       	smpsPSGAlterVol     $F5
0008D094 9006                       	dc.b	nEb1, $06
0008D096 EC04                       	smpsPSGAlterVol     $04
0008D098 E701                       	dc.b	smpsNoAttack, $01
0008D09A EC07                       	smpsPSGAlterVol     $07
0008D09C 8003                       	dc.b	nRst, $03
0008D09E ECF5                       	smpsPSGAlterVol     $F5
0008D0A0 9007                       	dc.b	nEb1, $07
0008D0A2 EC0B                       	smpsPSGAlterVol     $0B
0008D0A4 8006                       	dc.b	nRst, $06
0008D0A6 E1FF                       	smpsAlterNote       $FF
0008D0A8 01                         	dc.b	$01
0008D0A9 E103                       	smpsAlterNote       $03
0008D0AB 0101                       	dc.b	$01, $01
0008D0AD E1FC                       	smpsAlterNote       $FC
0008D0AF 01                         	dc.b	$01
0008D0B0 ECF5                       	smpsPSGAlterVol     $F5
0008D0B2 8F07                       	dc.b	nD1, $07
0008D0B4 EC0B                       	smpsPSGAlterVol     $0B
0008D0B6 8004                       	dc.b	nRst, $04
0008D0B8 ECF5                       	smpsPSGAlterVol     $F5
0008D0BA 8F06                       	dc.b	nD1, $06
0008D0BC EC04                       	smpsPSGAlterVol     $04
0008D0BE E701                       	dc.b	smpsNoAttack, $01
0008D0C0 EC07                       	smpsPSGAlterVol     $07
0008D0C2 8006                       	dc.b	nRst, $06
0008D0C4 E102                       	smpsAlterNote       $02
0008D0C6 01                         	dc.b	$01
0008D0C7 E103                       	smpsAlterNote       $03
0008D0C9 01                         	dc.b	$01
0008D0CA E1FF                       	smpsAlterNote       $FF
0008D0CC 01                         	dc.b	$01
0008D0CD E1F9                       	smpsAlterNote       $F9
0008D0CF 01                         	dc.b	$01
0008D0D0 E1FC                       	smpsAlterNote       $FC
0008D0D2 ECF5                       	smpsPSGAlterVol     $F5
0008D0D4 8F06                       	dc.b	nD1, $06
0008D0D6 EC04                       	smpsPSGAlterVol     $04
0008D0D8 E701                       	dc.b	smpsNoAttack, $01
0008D0DA EC07                       	smpsPSGAlterVol     $07
0008D0DC 8003                       	dc.b	nRst, $03
0008D0DE ECF5                       	smpsPSGAlterVol     $F5
0008D0E0 8F06                       	dc.b	nD1, $06
0008D0E2 EC04                       	smpsPSGAlterVol     $04
0008D0E4 E701                       	dc.b	smpsNoAttack, $01
0008D0E6 EC07                       	smpsPSGAlterVol     $07
0008D0E8 8006                       	dc.b	nRst, $06
0008D0EA E1FF                       	smpsAlterNote       $FF
0008D0EC 01                         	dc.b	$01
0008D0ED E103                       	smpsAlterNote       $03
0008D0EF 01                         	dc.b	$01
0008D0F0 E1FF                       	smpsAlterNote       $FF
0008D0F2 01                         	dc.b	$01
0008D0F3 E1FC                       	smpsAlterNote       $FC
0008D0F5 01                         	dc.b	$01
0008D0F6 ECF5                       	smpsPSGAlterVol     $F5
0008D0F8 8F06                       	dc.b	nD1, $06
0008D0FA EC04                       	smpsPSGAlterVol     $04
0008D0FC E701                       	dc.b	smpsNoAttack, $01
0008D0FE EC07                       	smpsPSGAlterVol     $07
0008D100 8003                       	dc.b	nRst, $03
0008D102 ECF5                       	smpsPSGAlterVol     $F5
0008D104 8F07                       	dc.b	nD1, $07
0008D106 EC0B                       	smpsPSGAlterVol     $0B
0008D108 8007                       	dc.b	nRst, $07
0008D10A E101                       	smpsAlterNote       $01
0008D10C 0101                       	dc.b	$01, $01
0008D10E E1FC                       	smpsAlterNote       $FC
0008D110 01                         	dc.b	$01
0008D111 E1F9                       	smpsAlterNote       $F9
0008D113 01                         	dc.b	$01
0008D114 E1FC                       	smpsAlterNote       $FC
0008D116 ECF5                       	smpsPSGAlterVol     $F5
0008D118 9006                       	dc.b	nEb1, $06
0008D11A EC0B                       	smpsPSGAlterVol     $0B
0008D11C 8004                       	dc.b	nRst, $04
0008D11E ECF5                       	smpsPSGAlterVol     $F5
0008D120 9006                       	dc.b	nEb1, $06
0008D122 EC04                       	smpsPSGAlterVol     $04
0008D124 E701                       	dc.b	smpsNoAttack, $01
0008D126 EC07                       	smpsPSGAlterVol     $07
0008D128 8006                       	dc.b	nRst, $06
0008D12A E100                       	smpsAlterNote       $00
0008D12C 01                         	dc.b	$01
0008D12D E102                       	smpsAlterNote       $02
0008D12F 01                         	dc.b	$01
0008D130 E100                       	smpsAlterNote       $00
0008D132 01                         	dc.b	$01
0008D133 E1FD                       	smpsAlterNote       $FD
0008D135 01                         	dc.b	$01
0008D136 E1FF                       	smpsAlterNote       $FF
0008D138 ECF5                       	smpsPSGAlterVol     $F5
0008D13A 9B06                       	dc.b	nD2, $06
0008D13C EC04                       	smpsPSGAlterVol     $04
0008D13E E701                       	dc.b	smpsNoAttack, $01
0008D140 EC07                       	smpsPSGAlterVol     $07
0008D142 8003                       	dc.b	nRst, $03
0008D144 ECF5                       	smpsPSGAlterVol     $F5
0008D146 9B07                       	dc.b	nD2, $07
0008D148 EC0B                       	smpsPSGAlterVol     $0B
0008D14A 8006                       	dc.b	nRst, $06
0008D14C E102                       	smpsAlterNote       $02
0008D14E 01                         	dc.b	$01
0008D14F E106                       	smpsAlterNote       $06
0008D151 01                         	dc.b	$01
0008D152 E105                       	smpsAlterNote       $05
0008D154 01                         	dc.b	$01
0008D155 E1FF                       	smpsAlterNote       $FF
0008D157 01                         	dc.b	$01
0008D158 ECF5                       	smpsPSGAlterVol     $F5
0008D15A 9B07                       	dc.b	nD2, $07
0008D15C EC0B                       	smpsPSGAlterVol     $0B
0008D15E 8004                       	dc.b	nRst, $04
0008D160 ECF5                       	smpsPSGAlterVol     $F5
0008D162 9B06                       	dc.b	nD2, $06
0008D164 EC0B                       	smpsPSGAlterVol     $0B
0008D166 8007                       	dc.b	nRst, $07
0008D168 E105                       	smpsAlterNote       $05
0008D16A 0101                       	dc.b	$01, $01
0008D16C E102                       	smpsAlterNote       $02
0008D16E 01                         	dc.b	$01
0008D16F E1FC                       	smpsAlterNote       $FC
0008D171 01                         	dc.b	$01
0008D172 E1FF                       	smpsAlterNote       $FF
0008D174 ECF5                       	smpsPSGAlterVol     $F5
0008D176 9B06                       	dc.b	nD2, $06
0008D178 EC04                       	smpsPSGAlterVol     $04
0008D17A E701                       	dc.b	smpsNoAttack, $01
0008D17C EC07                       	smpsPSGAlterVol     $07
0008D17E 8003                       	dc.b	nRst, $03
0008D180 ECF5                       	smpsPSGAlterVol     $F5
0008D182 9B06                       	dc.b	nD2, $06
0008D184 EC04                       	smpsPSGAlterVol     $04
0008D186 E701                       	dc.b	smpsNoAttack, $01
0008D188 EC07                       	smpsPSGAlterVol     $07
0008D18A 8006                       	dc.b	nRst, $06
0008D18C E102                       	smpsAlterNote       $02
0008D18E 01                         	dc.b	$01
0008D18F E106                       	smpsAlterNote       $06
0008D191 01                         	dc.b	$01
0008D192 E102                       	smpsAlterNote       $02
0008D194 01                         	dc.b	$01
0008D195 E1FF                       	smpsAlterNote       $FF
0008D197 01                         	dc.b	$01
0008D198 ECF5                       	smpsPSGAlterVol     $F5
0008D19A 9B06                       	dc.b	nD2, $06
0008D19C EC04                       	smpsPSGAlterVol     $04
0008D19E E701                       	dc.b	smpsNoAttack, $01
0008D1A0 EC07                       	smpsPSGAlterVol     $07
0008D1A2 8003                       	dc.b	nRst, $03
0008D1A4 ECF5                       	smpsPSGAlterVol     $F5
0008D1A6 9B07                       	dc.b	nD2, $07
0008D1A8 EC0B                       	smpsPSGAlterVol     $0B
0008D1AA 8007                       	dc.b	nRst, $07
0008D1AC E105                       	smpsAlterNote       $05
0008D1AE 0101                       	dc.b	$01, $01
0008D1B0 E1FF                       	smpsAlterNote       $FF
0008D1B2 01                         	dc.b	$01
0008D1B3 E1FC                       	smpsAlterNote       $FC
0008D1B5 01                         	dc.b	$01
0008D1B6 E1FF                       	smpsAlterNote       $FF
0008D1B8 ECF5                       	smpsPSGAlterVol     $F5
0008D1BA 9B06                       	dc.b	nD2, $06
0008D1BC EC0B                       	smpsPSGAlterVol     $0B
0008D1BE 8004                       	dc.b	nRst, $04
0008D1C0 ECF5                       	smpsPSGAlterVol     $F5
0008D1C2 9B06                       	dc.b	nD2, $06
0008D1C4 EC04                       	smpsPSGAlterVol     $04
0008D1C6 E701                       	dc.b	smpsNoAttack, $01
0008D1C8 EC07                       	smpsPSGAlterVol     $07
0008D1CA 8006                       	dc.b	nRst, $06
0008D1CC E105                       	smpsAlterNote       $05
0008D1CE 01                         	dc.b	$01
0008D1CF E106                       	smpsAlterNote       $06
0008D1D1 01                         	dc.b	$01
0008D1D2 E102                       	smpsAlterNote       $02
0008D1D4 01                         	dc.b	$01
0008D1D5 E1FC                       	smpsAlterNote       $FC
0008D1D7 01                         	dc.b	$01
0008D1D8 E1FF                       	smpsAlterNote       $FF
0008D1DA ECF5                       	smpsPSGAlterVol     $F5
0008D1DC 9B06                       	dc.b	nD2, $06
0008D1DE EC04                       	smpsPSGAlterVol     $04
0008D1E0 E701                       	dc.b	smpsNoAttack, $01
0008D1E2 EC07                       	smpsPSGAlterVol     $07
0008D1E4 8003                       	dc.b	nRst, $03
0008D1E6 ECF5                       	smpsPSGAlterVol     $F5
0008D1E8 9B06                       	dc.b	nD2, $06
0008D1EA EC04                       	smpsPSGAlterVol     $04
0008D1EC E701                       	dc.b	smpsNoAttack, $01
0008D1EE EC07                       	smpsPSGAlterVol     $07
0008D1F0 8006                       	dc.b	nRst, $06
0008D1F2 E102                       	smpsAlterNote       $02
0008D1F4 01                         	dc.b	$01
0008D1F5 E106                       	smpsAlterNote       $06
0008D1F7 01                         	dc.b	$01
0008D1F8 E105                       	smpsAlterNote       $05
0008D1FA 01                         	dc.b	$01
0008D1FB E1FF                       	smpsAlterNote       $FF
0008D1FD 01                         	dc.b	$01
0008D1FE ECF5                       	smpsPSGAlterVol     $F5
0008D200 9B07                       	dc.b	nD2, $07
0008D202 EC0B                       	smpsPSGAlterVol     $0B
0008D204 8004                       	dc.b	nRst, $04
0008D206 ECF5                       	smpsPSGAlterVol     $F5
0008D208 9B06                       	dc.b	nD2, $06
0008D20A EC0B                       	smpsPSGAlterVol     $0B
0008D20C 8007                       	dc.b	nRst, $07
0008D20E E105                       	smpsAlterNote       $05
0008D210 0101                       	dc.b	$01, $01
0008D212 E102                       	smpsAlterNote       $02
0008D214 01                         	dc.b	$01
0008D215 E1FC                       	smpsAlterNote       $FC
0008D217 01                         	dc.b	$01
0008D218 E1FF                       	smpsAlterNote       $FF
0008D21A ECF5                       	smpsPSGAlterVol     $F5
0008D21C 9B06                       	dc.b	nD2, $06
0008D21E EC04                       	smpsPSGAlterVol     $04
0008D220 E701                       	dc.b	smpsNoAttack, $01
0008D222 EC07                       	smpsPSGAlterVol     $07
0008D224 8003                       	dc.b	nRst, $03
0008D226 ECF5                       	smpsPSGAlterVol     $F5
0008D228 9B06                       	dc.b	nD2, $06
0008D22A EC04                       	smpsPSGAlterVol     $04
0008D22C E701                       	dc.b	smpsNoAttack, $01
0008D22E EC07                       	smpsPSGAlterVol     $07
0008D230 8006                       	dc.b	nRst, $06
0008D232 E102                       	smpsAlterNote       $02
0008D234 01                         	dc.b	$01
0008D235 E106                       	smpsAlterNote       $06
0008D237 01                         	dc.b	$01
0008D238 E102                       	smpsAlterNote       $02
0008D23A 01                         	dc.b	$01
0008D23B E1FF                       	smpsAlterNote       $FF
0008D23D 01                         	dc.b	$01
0008D23E ECF5                       	smpsPSGAlterVol     $F5
0008D240 9B06                       	dc.b	nD2, $06
0008D242 EC04                       	smpsPSGAlterVol     $04
0008D244 E701                       	dc.b	smpsNoAttack, $01
0008D246 EC07                       	smpsPSGAlterVol     $07
0008D248 8003                       	dc.b	nRst, $03
0008D24A ECF5                       	smpsPSGAlterVol     $F5
0008D24C 9B07                       	dc.b	nD2, $07
0008D24E E1FE                       	smpsAlterNote       $FE
0008D250 9706                       	dc.b	nBb1, $06
0008D252 EC04                       	smpsPSGAlterVol     $04
0008D254 E701                       	dc.b	smpsNoAttack, $01
0008D256 ECFC                       	smpsPSGAlterVol     $FC
0008D258 9703                       	dc.b	nBb1, $03
0008D25A EC04                       	smpsPSGAlterVol     $04
0008D25C E701                       	dc.b	smpsNoAttack, $01
0008D25E ECFC                       	smpsPSGAlterVol     $FC
0008D260 9702                       	dc.b	nBb1, $02
0008D262 EC04                       	smpsPSGAlterVol     $04
0008D264 E701                       	dc.b	smpsNoAttack, $01
0008D266 ECFC                       	smpsPSGAlterVol     $FC
0008D268 9606                       	dc.b	nA1, $06
0008D26A EC04                       	smpsPSGAlterVol     $04
0008D26C E701                       	dc.b	smpsNoAttack, $01
0008D26E EC07                       	smpsPSGAlterVol     $07
0008D270 8006                       	dc.b	nRst, $06
0008D272 E101                       	smpsAlterNote       $01
0008D274 01                         	dc.b	$01
0008D275 E107                       	smpsAlterNote       $07
0008D277 01                         	dc.b	$01
0008D278 E101                       	smpsAlterNote       $01
0008D27A 01                         	dc.b	$01
0008D27B E1F8                       	smpsAlterNote       $F8
0008D27D 01                         	dc.b	$01
0008D27E E1F7                       	smpsAlterNote       $F7
0008D280 01                         	dc.b	$01
0008D281 E1FC                       	smpsAlterNote       $FC
0008D283 01                         	dc.b	$01
0008D284 E106                       	smpsAlterNote       $06
0008D286 01                         	dc.b	$01
0008D287 E107                       	smpsAlterNote       $07
0008D289 01                         	dc.b	$01
0008D28A E101                       	smpsAlterNote       $01
0008D28C 01                         	dc.b	$01
0008D28D E1F8                       	smpsAlterNote       $F8
0008D28F 0101                       	dc.b	$01, $01
0008D291 E1FC                       	smpsAlterNote       $FC
0008D293 ECF5                       	smpsPSGAlterVol     $F5
0008D295 8F06                       	dc.b	nD1, $06
0008D297 EC04                       	smpsPSGAlterVol     $04
0008D299 E701                       	dc.b	smpsNoAttack, $01
0008D29B EC07                       	smpsPSGAlterVol     $07
0008D29D 8003                       	dc.b	nRst, $03
0008D29F ECF5                       	smpsPSGAlterVol     $F5
0008D2A1 8F06                       	dc.b	nD1, $06
0008D2A3 EC04                       	smpsPSGAlterVol     $04
0008D2A5 E701                       	dc.b	smpsNoAttack, $01
0008D2A7 EC07                       	smpsPSGAlterVol     $07
0008D2A9 8006                       	dc.b	nRst, $06
0008D2AB E1FF                       	smpsAlterNote       $FF
0008D2AD 01                         	dc.b	$01
0008D2AE E102                       	smpsAlterNote       $02
0008D2B0 01                         	dc.b	$01
0008D2B1 E101                       	smpsAlterNote       $01
0008D2B3 01                         	dc.b	$01
0008D2B4 E1FC                       	smpsAlterNote       $FC
0008D2B6 01                         	dc.b	$01
0008D2B7 ECF5                       	smpsPSGAlterVol     $F5
0008D2B9 9007                       	dc.b	nEb1, $07
0008D2BB EC0B                       	smpsPSGAlterVol     $0B
0008D2BD 8004                       	dc.b	nRst, $04
0008D2BF ECF5                       	smpsPSGAlterVol     $F5
0008D2C1 9006                       	dc.b	nEb1, $06
0008D2C3 EC0B                       	smpsPSGAlterVol     $0B
0008D2C5 8007                       	dc.b	nRst, $07
0008D2C7 E103                       	smpsAlterNote       $03
0008D2C9 0101                       	dc.b	$01, $01
0008D2CB E1FC                       	smpsAlterNote       $FC
0008D2CD 01                         	dc.b	$01
0008D2CE E1F9                       	smpsAlterNote       $F9
0008D2D0 01                         	dc.b	$01
0008D2D1 E1FC                       	smpsAlterNote       $FC
0008D2D3 ECF5                       	smpsPSGAlterVol     $F5
0008D2D5 8F06                       	dc.b	nD1, $06
0008D2D7 EC04                       	smpsPSGAlterVol     $04
0008D2D9 E701                       	dc.b	smpsNoAttack, $01
0008D2DB EC07                       	smpsPSGAlterVol     $07
0008D2DD 8003                       	dc.b	nRst, $03
0008D2DF ECF5                       	smpsPSGAlterVol     $F5
0008D2E1 8F06                       	dc.b	nD1, $06
0008D2E3 EC04                       	smpsPSGAlterVol     $04
0008D2E5 E701                       	dc.b	smpsNoAttack, $01
0008D2E7 EC07                       	smpsPSGAlterVol     $07
0008D2E9 8006                       	dc.b	nRst, $06
0008D2EB E1FF                       	smpsAlterNote       $FF
0008D2ED 01                         	dc.b	$01
0008D2EE E103                       	smpsAlterNote       $03
0008D2F0 01                         	dc.b	$01
0008D2F1 E1FF                       	smpsAlterNote       $FF
0008D2F3 01                         	dc.b	$01
0008D2F4 E1F9                       	smpsAlterNote       $F9
0008D2F6 01                         	dc.b	$01
0008D2F7 E1FC                       	smpsAlterNote       $FC
0008D2F9 ECF5                       	smpsPSGAlterVol     $F5
0008D2FB 8F06                       	dc.b	nD1, $06
0008D2FD EC04                       	smpsPSGAlterVol     $04
0008D2FF E701                       	dc.b	smpsNoAttack, $01
0008D301 EC07                       	smpsPSGAlterVol     $07
0008D303 8003                       	dc.b	nRst, $03
0008D305 ECF5                       	smpsPSGAlterVol     $F5
0008D307 8F07                       	dc.b	nD1, $07
0008D309 EC0B                       	smpsPSGAlterVol     $0B
0008D30B 8006                       	dc.b	nRst, $06
0008D30D E1FF                       	smpsAlterNote       $FF
0008D30F 01                         	dc.b	$01
0008D310 E102                       	smpsAlterNote       $02
0008D312 0101                       	dc.b	$01, $01
0008D314 E1FC                       	smpsAlterNote       $FC
0008D316 01                         	dc.b	$01
0008D317 ECF5                       	smpsPSGAlterVol     $F5
0008D319 8F07                       	dc.b	nD1, $07
0008D31B EC0B                       	smpsPSGAlterVol     $0B
0008D31D 8004                       	dc.b	nRst, $04
0008D31F ECF5                       	smpsPSGAlterVol     $F5
0008D321 8F06                       	dc.b	nD1, $06
0008D323 EC04                       	smpsPSGAlterVol     $04
0008D325 E701                       	dc.b	smpsNoAttack, $01
0008D327 EC07                       	smpsPSGAlterVol     $07
0008D329 8006                       	dc.b	nRst, $06
0008D32B E101                       	smpsAlterNote       $01
0008D32D 01                         	dc.b	$01
0008D32E E102                       	smpsAlterNote       $02
0008D330 01                         	dc.b	$01
0008D331 E1FF                       	smpsAlterNote       $FF
0008D333 01                         	dc.b	$01
0008D334 E1F9                       	smpsAlterNote       $F9
0008D336 01                         	dc.b	$01
0008D337 E1FC                       	smpsAlterNote       $FC
0008D339 ECF5                       	smpsPSGAlterVol     $F5
0008D33B 9006                       	dc.b	nEb1, $06
0008D33D EC04                       	smpsPSGAlterVol     $04
0008D33F E701                       	dc.b	smpsNoAttack, $01
0008D341 EC07                       	smpsPSGAlterVol     $07
0008D343 8003                       	dc.b	nRst, $03
0008D345 ECF5                       	smpsPSGAlterVol     $F5
0008D347 9006                       	dc.b	nEb1, $06
0008D349 EC04                       	smpsPSGAlterVol     $04
0008D34B E701                       	dc.b	smpsNoAttack, $01
0008D34D EC07                       	smpsPSGAlterVol     $07
0008D34F 8006                       	dc.b	nRst, $06
0008D351 E100                       	smpsAlterNote       $00
0008D353 01                         	dc.b	$01
0008D354 E102                       	smpsAlterNote       $02
0008D356 01                         	dc.b	$01
0008D357 E100                       	smpsAlterNote       $00
0008D359 01                         	dc.b	$01
0008D35A E1FF                       	smpsAlterNote       $FF
0008D35C 01                         	dc.b	$01
0008D35D ECF5                       	smpsPSGAlterVol     $F5
0008D35F 9B06                       	dc.b	nD2, $06
0008D361 EC04                       	smpsPSGAlterVol     $04
0008D363 E701                       	dc.b	smpsNoAttack, $01
0008D365 EC07                       	smpsPSGAlterVol     $07
0008D367 8003                       	dc.b	nRst, $03
0008D369 ECF5                       	smpsPSGAlterVol     $F5
0008D36B 9B07                       	dc.b	nD2, $07
0008D36D EC0B                       	smpsPSGAlterVol     $0B
0008D36F 8007                       	dc.b	nRst, $07
0008D371 E105                       	smpsAlterNote       $05
0008D373 0101                       	dc.b	$01, $01
0008D375 E1FF                       	smpsAlterNote       $FF
0008D377 01                         	dc.b	$01
0008D378 E1FC                       	smpsAlterNote       $FC
0008D37A 01                         	dc.b	$01
0008D37B E1FF                       	smpsAlterNote       $FF
0008D37D ECF5                       	smpsPSGAlterVol     $F5
0008D37F 9B06                       	dc.b	nD2, $06
0008D381 EC0B                       	smpsPSGAlterVol     $0B
0008D383 8004                       	dc.b	nRst, $04
0008D385 ECF5                       	smpsPSGAlterVol     $F5
0008D387 9B06                       	dc.b	nD2, $06
0008D389 EC04                       	smpsPSGAlterVol     $04
0008D38B E701                       	dc.b	smpsNoAttack, $01
0008D38D EC07                       	smpsPSGAlterVol     $07
0008D38F 8006                       	dc.b	nRst, $06
0008D391 E102                       	smpsAlterNote       $02
0008D393 01                         	dc.b	$01
0008D394 E106                       	smpsAlterNote       $06
0008D396 01                         	dc.b	$01
0008D397 E102                       	smpsAlterNote       $02
0008D399 01                         	dc.b	$01
0008D39A E1FC                       	smpsAlterNote       $FC
0008D39C 01                         	dc.b	$01
0008D39D E1FF                       	smpsAlterNote       $FF
0008D39F ECF5                       	smpsPSGAlterVol     $F5
0008D3A1 9B06                       	dc.b	nD2, $06
0008D3A3 EC04                       	smpsPSGAlterVol     $04
0008D3A5 E701                       	dc.b	smpsNoAttack, $01
0008D3A7 EC07                       	smpsPSGAlterVol     $07
0008D3A9 8003                       	dc.b	nRst, $03
0008D3AB ECF5                       	smpsPSGAlterVol     $F5
0008D3AD 9B07                       	dc.b	nD2, $07
0008D3AF EC0B                       	smpsPSGAlterVol     $0B
0008D3B1 8006                       	dc.b	nRst, $06
0008D3B3 E102                       	smpsAlterNote       $02
0008D3B5 01                         	dc.b	$01
0008D3B6 E105                       	smpsAlterNote       $05
0008D3B8 0101                       	dc.b	$01, $01
0008D3BA E1FF                       	smpsAlterNote       $FF
0008D3BC 01                         	dc.b	$01
0008D3BD ECF5                       	smpsPSGAlterVol     $F5
0008D3BF 9B07                       	dc.b	nD2, $07
0008D3C1 EC0B                       	smpsPSGAlterVol     $0B
0008D3C3 8004                       	dc.b	nRst, $04
0008D3C5 ECF5                       	smpsPSGAlterVol     $F5
0008D3C7 9B06                       	dc.b	nD2, $06
0008D3C9 EC0B                       	smpsPSGAlterVol     $0B
0008D3CB 8007                       	dc.b	nRst, $07
0008D3CD E105                       	smpsAlterNote       $05
0008D3CF 0101                       	dc.b	$01, $01
0008D3D1 E102                       	smpsAlterNote       $02
0008D3D3 01                         	dc.b	$01
0008D3D4 E1FC                       	smpsAlterNote       $FC
0008D3D6 01                         	dc.b	$01
0008D3D7 E1FF                       	smpsAlterNote       $FF
0008D3D9 ECF5                       	smpsPSGAlterVol     $F5
0008D3DB 9B06                       	dc.b	nD2, $06
0008D3DD EC04                       	smpsPSGAlterVol     $04
0008D3DF E701                       	dc.b	smpsNoAttack, $01
0008D3E1 EC07                       	smpsPSGAlterVol     $07
0008D3E3 8003                       	dc.b	nRst, $03
0008D3E5 ECF5                       	smpsPSGAlterVol     $F5
0008D3E7 9B06                       	dc.b	nD2, $06
0008D3E9 EC04                       	smpsPSGAlterVol     $04
0008D3EB E701                       	dc.b	smpsNoAttack, $01
0008D3ED EC07                       	smpsPSGAlterVol     $07
0008D3EF 8006                       	dc.b	nRst, $06
0008D3F1 E102                       	smpsAlterNote       $02
0008D3F3 01                         	dc.b	$01
0008D3F4 E106                       	smpsAlterNote       $06
0008D3F6 01                         	dc.b	$01
0008D3F7 E102                       	smpsAlterNote       $02
0008D3F9 01                         	dc.b	$01
0008D3FA E1FF                       	smpsAlterNote       $FF
0008D3FC 01                         	dc.b	$01
0008D3FD ECF5                       	smpsPSGAlterVol     $F5
0008D3FF 9B06                       	dc.b	nD2, $06
0008D401 EC04                       	smpsPSGAlterVol     $04
0008D403 E701                       	dc.b	smpsNoAttack, $01
0008D405 EC07                       	smpsPSGAlterVol     $07
0008D407 8003                       	dc.b	nRst, $03
0008D409 ECF5                       	smpsPSGAlterVol     $F5
0008D40B 9B07                       	dc.b	nD2, $07
0008D40D EC0B                       	smpsPSGAlterVol     $0B
0008D40F 8007                       	dc.b	nRst, $07
0008D411 E105                       	smpsAlterNote       $05
0008D413 0101                       	dc.b	$01, $01
0008D415 E1FF                       	smpsAlterNote       $FF
0008D417 01                         	dc.b	$01
0008D418 E1FC                       	smpsAlterNote       $FC
0008D41A 01                         	dc.b	$01
0008D41B E1FF                       	smpsAlterNote       $FF
0008D41D ECF5                       	smpsPSGAlterVol     $F5
0008D41F 9B06                       	dc.b	nD2, $06
0008D421 EC0B                       	smpsPSGAlterVol     $0B
0008D423 8004                       	dc.b	nRst, $04
0008D425 ECF5                       	smpsPSGAlterVol     $F5
0008D427 9B06                       	dc.b	nD2, $06
0008D429 EC04                       	smpsPSGAlterVol     $04
0008D42B E701                       	dc.b	smpsNoAttack, $01
0008D42D EC07                       	smpsPSGAlterVol     $07
0008D42F 8006                       	dc.b	nRst, $06
0008D431 E102                       	smpsAlterNote       $02
0008D433 01                         	dc.b	$01
0008D434 E106                       	smpsAlterNote       $06
0008D436 01                         	dc.b	$01
0008D437 E102                       	smpsAlterNote       $02
0008D439 01                         	dc.b	$01
0008D43A E1FC                       	smpsAlterNote       $FC
0008D43C 01                         	dc.b	$01
0008D43D E1FF                       	smpsAlterNote       $FF
0008D43F ECF5                       	smpsPSGAlterVol     $F5
0008D441 9B06                       	dc.b	nD2, $06
0008D443 EC04                       	smpsPSGAlterVol     $04
0008D445 E701                       	dc.b	smpsNoAttack, $01
0008D447 EC07                       	smpsPSGAlterVol     $07
0008D449 8003                       	dc.b	nRst, $03
0008D44B ECF5                       	smpsPSGAlterVol     $F5
0008D44D 9B06                       	dc.b	nD2, $06
0008D44F EC04                       	smpsPSGAlterVol     $04
0008D451 E701                       	dc.b	smpsNoAttack, $01
0008D453 EC07                       	smpsPSGAlterVol     $07
0008D455 8006                       	dc.b	nRst, $06
0008D457 E102                       	smpsAlterNote       $02
0008D459 01                         	dc.b	$01
0008D45A E106                       	smpsAlterNote       $06
0008D45C 01                         	dc.b	$01
0008D45D E105                       	smpsAlterNote       $05
0008D45F 01                         	dc.b	$01
0008D460 E1FF                       	smpsAlterNote       $FF
0008D462 01                         	dc.b	$01
0008D463 ECF5                       	smpsPSGAlterVol     $F5
0008D465 9B07                       	dc.b	nD2, $07
0008D467 EC0B                       	smpsPSGAlterVol     $0B
0008D469 8004                       	dc.b	nRst, $04
0008D46B ECF5                       	smpsPSGAlterVol     $F5
0008D46D 9B06                       	dc.b	nD2, $06
0008D46F EC0B                       	smpsPSGAlterVol     $0B
0008D471 8007                       	dc.b	nRst, $07
0008D473 E105                       	smpsAlterNote       $05
0008D475 0101                       	dc.b	$01, $01
0008D477 E101                       	smpsAlterNote       $01
0008D479 01                         	dc.b	$01
0008D47A E1FB                       	smpsAlterNote       $FB
0008D47C 01                         	dc.b	$01
0008D47D E1FE                       	smpsAlterNote       $FE
0008D47F ECF5                       	smpsPSGAlterVol     $F5
0008D481 9A06                       	dc.b	nCs2, $06
0008D483 EC04                       	smpsPSGAlterVol     $04
0008D485 E701                       	dc.b	smpsNoAttack, $01
0008D487 EC07                       	smpsPSGAlterVol     $07
0008D489 8003                       	dc.b	nRst, $03
0008D48B ECF5                       	smpsPSGAlterVol     $F5
0008D48D 9A06                       	dc.b	nCs2, $06
0008D48F EC04                       	smpsPSGAlterVol     $04
0008D491 E701                       	dc.b	smpsNoAttack, $01
0008D493 EC07                       	smpsPSGAlterVol     $07
0008D495 8003                       	dc.b	nRst, $03
0008D497 E1FC                       	smpsAlterNote       $FC
0008D499 ECF5                       	smpsPSGAlterVol     $F5
0008D49B 8F07                       	dc.b	nD1, $07
0008D49D EC0B                       	smpsPSGAlterVol     $0B
0008D49F 8006                       	dc.b	nRst, $06
0008D4A1 E1FF                       	smpsAlterNote       $FF
0008D4A3 01                         	dc.b	$01
0008D4A4 E103                       	smpsAlterNote       $03
0008D4A6 01                         	dc.b	$01
0008D4A7 E102                       	smpsAlterNote       $02
0008D4A9 01                         	dc.b	$01
0008D4AA E1FC                       	smpsAlterNote       $FC
0008D4AC 01                         	dc.b	$01
0008D4AD E1F8                       	smpsAlterNote       $F8
0008D4AF 01                         	dc.b	$01
0008D4B0 E1FC                       	smpsAlterNote       $FC
0008D4B2 01                         	dc.b	$01
0008D4B3 E1FF                       	smpsAlterNote       $FF
0008D4B5 01                         	dc.b	$01
0008D4B6 E103                       	smpsAlterNote       $03
0008D4B8 01                         	dc.b	$01
0008D4B9 E1FC                       	smpsAlterNote       $FC
0008D4BB ECF5                       	smpsPSGAlterVol     $F5
0008D4BD 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0008D4C1 EC04                       	smpsPSGAlterVol     $04
0008D4C3 E701                       	dc.b	smpsNoAttack, $01
0008D4C5 EC07                       	smpsPSGAlterVol     $07
0008D4C7 8009                       	dc.b	nRst, $09
0008D4C9 E1FF                       	smpsAlterNote       $FF
0008D4CB 01                         	dc.b	$01
0008D4CC E103                       	smpsAlterNote       $03
0008D4CE 01                         	dc.b	$01
0008D4CF E102                       	smpsAlterNote       $02
0008D4D1 01                         	dc.b	$01
0008D4D2 E1FC                       	smpsAlterNote       $FC
0008D4D4 01                         	dc.b	$01
0008D4D5 E1F8                       	smpsAlterNote       $F8
0008D4D7 01                         	dc.b	$01
0008D4D8 E1FC                       	smpsAlterNote       $FC
0008D4DA 01                         	dc.b	$01
0008D4DB E1FF                       	smpsAlterNote       $FF
0008D4DD 01                         	dc.b	$01
0008D4DE E103                       	smpsAlterNote       $03
0008D4E0 01                         	dc.b	$01
0008D4E1 E1FF                       	smpsAlterNote       $FF
0008D4E3 01                         	dc.b	$01
0008D4E4 E1F9                       	smpsAlterNote       $F9
0008D4E6 01                         	dc.b	$01
0008D4E7 E1F8                       	smpsAlterNote       $F8
0008D4E9 01                         	dc.b	$01
0008D4EA E1FC                       	smpsAlterNote       $FC
0008D4EC 01                         	dc.b	$01
0008D4ED E102                       	smpsAlterNote       $02
0008D4EF 0101                       	dc.b	$01, $01
0008D4F1 E1FF                       	smpsAlterNote       $FF
0008D4F3 01                         	dc.b	$01
0008D4F4 E1FC                       	smpsAlterNote       $FC
0008D4F6 ECF5                       	smpsPSGAlterVol     $F5
0008D4F8 8F02                       	dc.b	nD1, $02
0008D4FA EC04                       	smpsPSGAlterVol     $04
0008D4FC E701                       	dc.b	smpsNoAttack, $01
0008D4FE ECFC                       	smpsPSGAlterVol     $FC
0008D500 E1FB                       	smpsAlterNote       $FB
0008D502 8D06                       	dc.b	nC1, $06
0008D504 EC04                       	smpsPSGAlterVol     $04
0008D506 E701                       	dc.b	smpsNoAttack, $01
0008D508 EC07                       	smpsPSGAlterVol     $07
0008D50A 8006                       	dc.b	nRst, $06
0008D50C E1FE                       	smpsAlterNote       $FE
0008D50E 01                         	dc.b	$01
0008D50F E102                       	smpsAlterNote       $02
0008D511 01                         	dc.b	$01
0008D512 E1FE                       	smpsAlterNote       $FE
0008D514 01                         	dc.b	$01
0008D515 E1FB                       	smpsAlterNote       $FB
0008D517 01                         	dc.b	$01
0008D518 E1F7                       	smpsAlterNote       $F7
0008D51A 01                         	dc.b	$01
0008D51B E1FB                       	smpsAlterNote       $FB
0008D51D 01                         	dc.b	$01
0008D51E E101                       	smpsAlterNote       $01
0008D520 01                         	dc.b	$01
0008D521 E102                       	smpsAlterNote       $02
0008D523 01                         	dc.b	$01
0008D524 E1FB                       	smpsAlterNote       $FB
0008D526 ECF5                       	smpsPSGAlterVol     $F5
0008D528 8D02                       	dc.b	nC1, $02
0008D52A EC04                       	smpsPSGAlterVol     $04
0008D52C E701                       	dc.b	smpsNoAttack, $01
0008D52E E1FC                       	smpsAlterNote       $FC
0008D530 ECFC                       	smpsPSGAlterVol     $FC
0008D532 8F0D                       	dc.b	nD1, $0D
0008D534 E1FF                       	smpsAlterNote       $FF
0008D536 E701                       	dc.b	smpsNoAttack, $01
0008D538 E103                       	smpsAlterNote       $03
0008D53A E701                       	dc.b	smpsNoAttack, $01
0008D53C E1FF                       	smpsAlterNote       $FF
0008D53E E701                       	dc.b	smpsNoAttack, $01
0008D540 E1FC                       	smpsAlterNote       $FC
0008D542 E701                       	dc.b	smpsNoAttack, $01
0008D544 E1F8                       	smpsAlterNote       $F8
0008D546 E701                       	dc.b	smpsNoAttack, $01
0008D548 E1FC                       	smpsAlterNote       $FC
0008D54A E701                       	dc.b	smpsNoAttack, $01
0008D54C E102                       	smpsAlterNote       $02
0008D54E E701                       	dc.b	smpsNoAttack, $01
0008D550 E103                       	smpsAlterNote       $03
0008D552 E701                       	dc.b	smpsNoAttack, $01
0008D554 E1FF                       	smpsAlterNote       $FF
0008D556 E701                       	dc.b	smpsNoAttack, $01
0008D558 E1F9                       	smpsAlterNote       $F9
0008D55A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D55E E1FC                       	smpsAlterNote       $FC
0008D560 E701                       	dc.b	smpsNoAttack, $01
0008D562 E102                       	smpsAlterNote       $02
0008D564 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D568 E1FC                       	smpsAlterNote       $FC
0008D56A E701                       	dc.b	smpsNoAttack, $01
0008D56C E1F9                       	smpsAlterNote       $F9
0008D56E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D572 E1FF                       	smpsAlterNote       $FF
0008D574 EC04                       	smpsPSGAlterVol     $04
0008D576 E701                       	dc.b	smpsNoAttack, $01
0008D578 EC07                       	smpsPSGAlterVol     $07
0008D57A E103                       	smpsAlterNote       $03
0008D57C 8001                       	dc.b	nRst, $01
0008D57E E102                       	smpsAlterNote       $02
0008D580 01                         	dc.b	$01
0008D581 E1FB                       	smpsAlterNote       $FB
0008D583 01                         	dc.b	$01
0008D584 E1F7                       	smpsAlterNote       $F7
0008D586 01                         	dc.b	$01
0008D587 E1FB                       	smpsAlterNote       $FB
0008D589 01                         	dc.b	$01
0008D58A E102                       	smpsAlterNote       $02
0008D58C 01                         	dc.b	$01
0008D58D E103                       	smpsAlterNote       $03
0008D58F 01                         	dc.b	$01
0008D590 E1FB                       	smpsAlterNote       $FB
0008D592 ECF5                       	smpsPSGAlterVol     $F5
0008D594 8E06                       	dc.b	nCs1, $06
0008D596 EC04                       	smpsPSGAlterVol     $04
0008D598 E701                       	dc.b	smpsNoAttack, $01
0008D59A EC07                       	smpsPSGAlterVol     $07
0008D59C 8003                       	dc.b	nRst, $03
0008D59E ECF5                       	smpsPSGAlterVol     $F5
0008D5A0 8E06                       	dc.b	nCs1, $06
0008D5A2 EC04                       	smpsPSGAlterVol     $04
0008D5A4 E701                       	dc.b	smpsNoAttack, $01
0008D5A6 EC07                       	smpsPSGAlterVol     $07
0008D5A8 8006                       	dc.b	nRst, $06
0008D5AA E1FE                       	smpsAlterNote       $FE
0008D5AC 01                         	dc.b	$01
0008D5AD E102                       	smpsAlterNote       $02
0008D5AF 01                         	dc.b	$01
0008D5B0 E1FE                       	smpsAlterNote       $FE
0008D5B2 01                         	dc.b	$01
0008D5B3 E1F9                       	smpsAlterNote       $F9
0008D5B5 01                         	dc.b	$01
0008D5B6 E1FC                       	smpsAlterNote       $FC
0008D5B8 ECF5                       	smpsPSGAlterVol     $F5
0008D5BA 8F06                       	dc.b	nD1, $06
0008D5BC EC04                       	smpsPSGAlterVol     $04
0008D5BE E701                       	dc.b	smpsNoAttack, $01
0008D5C0 EC07                       	smpsPSGAlterVol     $07
0008D5C2 8003                       	dc.b	nRst, $03
0008D5C4 ECF5                       	smpsPSGAlterVol     $F5
0008D5C6 8F07                       	dc.b	nD1, $07
0008D5C8 EC0B                       	smpsPSGAlterVol     $0B
0008D5CA 8006                       	dc.b	nRst, $06
0008D5CC E1FF                       	smpsAlterNote       $FF
0008D5CE 01                         	dc.b	$01
0008D5CF E102                       	smpsAlterNote       $02
0008D5D1 0101                       	dc.b	$01, $01
0008D5D3 E1FB                       	smpsAlterNote       $FB
0008D5D5 01                         	dc.b	$01
0008D5D6 ECF5                       	smpsPSGAlterVol     $F5
0008D5D8 8E07                       	dc.b	nCs1, $07
0008D5DA EC0B                       	smpsPSGAlterVol     $0B
0008D5DC 8004                       	dc.b	nRst, $04
0008D5DE ECF5                       	smpsPSGAlterVol     $F5
0008D5E0 8E06                       	dc.b	nCs1, $06
0008D5E2 EC04                       	smpsPSGAlterVol     $04
0008D5E4 E701                       	dc.b	smpsNoAttack, $01
0008D5E6 EC07                       	smpsPSGAlterVol     $07
0008D5E8 8006                       	dc.b	nRst, $06
0008D5EA E101                       	smpsAlterNote       $01
0008D5EC 01                         	dc.b	$01
0008D5ED E102                       	smpsAlterNote       $02
0008D5EF 01                         	dc.b	$01
0008D5F0 E1FE                       	smpsAlterNote       $FE
0008D5F2 01                         	dc.b	$01
0008D5F3 E1F8                       	smpsAlterNote       $F8
0008D5F5 01                         	dc.b	$01
0008D5F6 E1FB                       	smpsAlterNote       $FB
0008D5F8 ECF5                       	smpsPSGAlterVol     $F5
0008D5FA 8E06                       	dc.b	nCs1, $06
0008D5FC EC04                       	smpsPSGAlterVol     $04
0008D5FE E701                       	dc.b	smpsNoAttack, $01
0008D600 EC07                       	smpsPSGAlterVol     $07
0008D602 8003                       	dc.b	nRst, $03
0008D604 ECF5                       	smpsPSGAlterVol     $F5
0008D606 8E06                       	dc.b	nCs1, $06
0008D608 EC04                       	smpsPSGAlterVol     $04
0008D60A E701                       	dc.b	smpsNoAttack, $01
0008D60C EC07                       	smpsPSGAlterVol     $07
0008D60E 8004                       	dc.b	nRst, $04
0008D610 E1FC                       	smpsAlterNote       $FC
0008D612 ECF5                       	smpsPSGAlterVol     $F5
0008D614 8F06                       	dc.b	nD1, $06
0008D616 EC0B                       	smpsPSGAlterVol     $0B
0008D618 8006                       	dc.b	nRst, $06
0008D61A E1FF                       	smpsAlterNote       $FF
0008D61C 01                         	dc.b	$01
0008D61D E102                       	smpsAlterNote       $02
0008D61F 0101                       	dc.b	$01, $01
0008D621 E1FC                       	smpsAlterNote       $FC
0008D623 01                         	dc.b	$01
0008D624 E1F8                       	smpsAlterNote       $F8
0008D626 01                         	dc.b	$01
0008D627 E1F9                       	smpsAlterNote       $F9
0008D629 01                         	dc.b	$01
0008D62A E1FF                       	smpsAlterNote       $FF
0008D62C 01                         	dc.b	$01
0008D62D E103                       	smpsAlterNote       $03
0008D62F 01                         	dc.b	$01
0008D630 E1FC                       	smpsAlterNote       $FC
0008D632 ECF5                       	smpsPSGAlterVol     $F5
0008D634 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0008D638 EC04                       	smpsPSGAlterVol     $04
0008D63A E701                       	dc.b	smpsNoAttack, $01
0008D63C EC07                       	smpsPSGAlterVol     $07
0008D63E 8009                       	dc.b	nRst, $09
0008D640 E1FF                       	smpsAlterNote       $FF
0008D642 01                         	dc.b	$01
0008D643 E102                       	smpsAlterNote       $02
0008D645 0101                       	dc.b	$01, $01
0008D647 E1FC                       	smpsAlterNote       $FC
0008D649 01                         	dc.b	$01
0008D64A E1F8                       	smpsAlterNote       $F8
0008D64C 01                         	dc.b	$01
0008D64D E1F9                       	smpsAlterNote       $F9
0008D64F 01                         	dc.b	$01
0008D650 E1FF                       	smpsAlterNote       $FF
0008D652 01                         	dc.b	$01
0008D653 E103                       	smpsAlterNote       $03
0008D655 01                         	dc.b	$01
0008D656 E1FF                       	smpsAlterNote       $FF
0008D658 01                         	dc.b	$01
0008D659 E1FC                       	smpsAlterNote       $FC
0008D65B 01                         	dc.b	$01
0008D65C E1F8                       	smpsAlterNote       $F8
0008D65E 01                         	dc.b	$01
0008D65F E1FC                       	smpsAlterNote       $FC
0008D661 01                         	dc.b	$01
0008D662 E102                       	smpsAlterNote       $02
0008D664 01                         	dc.b	$01
0008D665 E103                       	smpsAlterNote       $03
0008D667 01                         	dc.b	$01
0008D668 E1FF                       	smpsAlterNote       $FF
0008D66A 01                         	dc.b	$01
0008D66B E1FC                       	smpsAlterNote       $FC
0008D66D ECF5                       	smpsPSGAlterVol     $F5
0008D66F 8F03                       	dc.b	nD1, $03
0008D671 E1FB                       	smpsAlterNote       $FB
0008D673 8D06                       	dc.b	nC1, $06
0008D675 EC04                       	smpsPSGAlterVol     $04
0008D677 E701                       	dc.b	smpsNoAttack, $01
0008D679 EC07                       	smpsPSGAlterVol     $07
0008D67B 8006                       	dc.b	nRst, $06
0008D67D E1FE                       	smpsAlterNote       $FE
0008D67F 01                         	dc.b	$01
0008D680 E102                       	smpsAlterNote       $02
0008D682 01                         	dc.b	$01
0008D683 E101                       	smpsAlterNote       $01
0008D685 01                         	dc.b	$01
0008D686 E1FB                       	smpsAlterNote       $FB
0008D688 01                         	dc.b	$01
0008D689 E1F7                       	smpsAlterNote       $F7
0008D68B 01                         	dc.b	$01
0008D68C E1FB                       	smpsAlterNote       $FB
0008D68E 01                         	dc.b	$01
0008D68F E1FE                       	smpsAlterNote       $FE
0008D691 01                         	dc.b	$01
0008D692 E102                       	smpsAlterNote       $02
0008D694 01                         	dc.b	$01
0008D695 E1FB                       	smpsAlterNote       $FB
0008D697 ECF5                       	smpsPSGAlterVol     $F5
0008D699 8D03                       	dc.b	nC1, $03
0008D69B E1FC                       	smpsAlterNote       $FC
0008D69D 8F0D                       	dc.b	nD1, $0D
0008D69F E1FF                       	smpsAlterNote       $FF
0008D6A1 E701                       	dc.b	smpsNoAttack, $01
0008D6A3 E103                       	smpsAlterNote       $03
0008D6A5 E701                       	dc.b	smpsNoAttack, $01
0008D6A7 E1FF                       	smpsAlterNote       $FF
0008D6A9 E701                       	dc.b	smpsNoAttack, $01
0008D6AB E1FC                       	smpsAlterNote       $FC
0008D6AD E701                       	dc.b	smpsNoAttack, $01
0008D6AF E1F8                       	smpsAlterNote       $F8
0008D6B1 E701                       	dc.b	smpsNoAttack, $01
0008D6B3 E1FC                       	smpsAlterNote       $FC
0008D6B5 E701                       	dc.b	smpsNoAttack, $01
0008D6B7 E102                       	smpsAlterNote       $02
0008D6B9 E701                       	dc.b	smpsNoAttack, $01
0008D6BB E103                       	smpsAlterNote       $03
0008D6BD E701                       	dc.b	smpsNoAttack, $01
0008D6BF E1FF                       	smpsAlterNote       $FF
0008D6C1 E701                       	dc.b	smpsNoAttack, $01
0008D6C3 E1F9                       	smpsAlterNote       $F9
0008D6C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D6C9 E1FC                       	smpsAlterNote       $FC
0008D6CB E701                       	dc.b	smpsNoAttack, $01
0008D6CD E102                       	smpsAlterNote       $02
0008D6CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D6D3 E1FF                       	smpsAlterNote       $FF
0008D6D5 E701                       	dc.b	smpsNoAttack, $01
0008D6D7 E1F9                       	smpsAlterNote       $F9
0008D6D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D6DD E1FF                       	smpsAlterNote       $FF
0008D6DF EC04                       	smpsPSGAlterVol     $04
0008D6E1 E701                       	dc.b	smpsNoAttack, $01
0008D6E3 EC07                       	smpsPSGAlterVol     $07
0008D6E5 E103                       	smpsAlterNote       $03
0008D6E7 8001                       	dc.b	nRst, $01
0008D6E9 E102                       	smpsAlterNote       $02
0008D6EB 01                         	dc.b	$01
0008D6EC E1FB                       	smpsAlterNote       $FB
0008D6EE 01                         	dc.b	$01
0008D6EF E1F7                       	smpsAlterNote       $F7
0008D6F1 01                         	dc.b	$01
0008D6F2 E1FB                       	smpsAlterNote       $FB
0008D6F4 01                         	dc.b	$01
0008D6F5 E1FF                       	smpsAlterNote       $FF
0008D6F7 01                         	dc.b	$01
0008D6F8 E103                       	smpsAlterNote       $03
0008D6FA 01                         	dc.b	$01
0008D6FB E1FB                       	smpsAlterNote       $FB
0008D6FD ECF5                       	smpsPSGAlterVol     $F5
0008D6FF 8E06                       	dc.b	nCs1, $06
0008D701 EC04                       	smpsPSGAlterVol     $04
0008D703 E701                       	dc.b	smpsNoAttack, $01
0008D705 EC07                       	smpsPSGAlterVol     $07
0008D707 8003                       	dc.b	nRst, $03
0008D709 ECF5                       	smpsPSGAlterVol     $F5
0008D70B 8E06                       	dc.b	nCs1, $06
0008D70D EC04                       	smpsPSGAlterVol     $04
0008D70F E701                       	dc.b	smpsNoAttack, $01
0008D711 EC07                       	smpsPSGAlterVol     $07
0008D713 8006                       	dc.b	nRst, $06
0008D715 E1FE                       	smpsAlterNote       $FE
0008D717 01                         	dc.b	$01
0008D718 E102                       	smpsAlterNote       $02
0008D71A 01                         	dc.b	$01
0008D71B E1FE                       	smpsAlterNote       $FE
0008D71D 01                         	dc.b	$01
0008D71E E1FC                       	smpsAlterNote       $FC
0008D720 01                         	dc.b	$01
0008D721 ECF5                       	smpsPSGAlterVol     $F5
0008D723 8F06                       	dc.b	nD1, $06
0008D725 EC04                       	smpsPSGAlterVol     $04
0008D727 E701                       	dc.b	smpsNoAttack, $01
0008D729 EC07                       	smpsPSGAlterVol     $07
0008D72B 8003                       	dc.b	nRst, $03
0008D72D ECF5                       	smpsPSGAlterVol     $F5
0008D72F 8F07                       	dc.b	nD1, $07
0008D731 EC0B                       	smpsPSGAlterVol     $0B
0008D733 8007                       	dc.b	nRst, $07
0008D735 E102                       	smpsAlterNote       $02
0008D737 0101                       	dc.b	$01, $01
0008D739 E1FB                       	smpsAlterNote       $FB
0008D73B 01                         	dc.b	$01
0008D73C E1F8                       	smpsAlterNote       $F8
0008D73E 01                         	dc.b	$01
0008D73F E1FB                       	smpsAlterNote       $FB
0008D741 ECF5                       	smpsPSGAlterVol     $F5
0008D743 8E06                       	dc.b	nCs1, $06
0008D745 EC0B                       	smpsPSGAlterVol     $0B
0008D747 8004                       	dc.b	nRst, $04
0008D749 ECF5                       	smpsPSGAlterVol     $F5
0008D74B 8E06                       	dc.b	nCs1, $06
0008D74D EC04                       	smpsPSGAlterVol     $04
0008D74F E701                       	dc.b	smpsNoAttack, $01
0008D751 EC07                       	smpsPSGAlterVol     $07
0008D753 8006                       	dc.b	nRst, $06
0008D755 E1FE                       	smpsAlterNote       $FE
0008D757 01                         	dc.b	$01
0008D758 E102                       	smpsAlterNote       $02
0008D75A 01                         	dc.b	$01
0008D75B E1FE                       	smpsAlterNote       $FE
0008D75D 01                         	dc.b	$01
0008D75E E1F9                       	smpsAlterNote       $F9
0008D760 01                         	dc.b	$01
0008D761 E1FC                       	smpsAlterNote       $FC
0008D763 ECF5                       	smpsPSGAlterVol     $F5
0008D765 8F06                       	dc.b	nD1, $06
0008D767 EC04                       	smpsPSGAlterVol     $04
0008D769 E701                       	dc.b	smpsNoAttack, $01
0008D76B EC07                       	smpsPSGAlterVol     $07
0008D76D 8003                       	dc.b	nRst, $03
0008D76F ECF5                       	smpsPSGAlterVol     $F5
0008D771 8F06                       	dc.b	nD1, $06
0008D773 EC04                       	smpsPSGAlterVol     $04
0008D775 E701                       	dc.b	smpsNoAttack, $01
0008D777 EC07                       	smpsPSGAlterVol     $07
0008D779 8006                       	dc.b	nRst, $06
0008D77B E1FF                       	smpsAlterNote       $FF
0008D77D 01                         	dc.b	$01
0008D77E E103                       	smpsAlterNote       $03
0008D780 01                         	dc.b	$01
0008D781 E102                       	smpsAlterNote       $02
0008D783 01                         	dc.b	$01
0008D784 E1FB                       	smpsAlterNote       $FB
0008D786 01                         	dc.b	$01
0008D787 ECF5                       	smpsPSGAlterVol     $F5
0008D789 8E07                       	dc.b	nCs1, $07
0008D78B EC0B                       	smpsPSGAlterVol     $0B
0008D78D 8004                       	dc.b	nRst, $04
0008D78F ECF5                       	smpsPSGAlterVol     $F5
0008D791 8E06                       	dc.b	nCs1, $06
0008D793 EC0B                       	smpsPSGAlterVol     $0B
0008D795 8007                       	dc.b	nRst, $07
0008D797 E101                       	smpsAlterNote       $01
0008D799 0101                       	dc.b	$01, $01
0008D79B E1FE                       	smpsAlterNote       $FE
0008D79D 01                         	dc.b	$01
0008D79E E1F9                       	smpsAlterNote       $F9
0008D7A0 01                         	dc.b	$01
0008D7A1 E1FC                       	smpsAlterNote       $FC
0008D7A3 ECF5                       	smpsPSGAlterVol     $F5
0008D7A5 8F06                       	dc.b	nD1, $06
0008D7A7 EC04                       	smpsPSGAlterVol     $04
0008D7A9 E701                       	dc.b	smpsNoAttack, $01
0008D7AB EC07                       	smpsPSGAlterVol     $07
0008D7AD 8003                       	dc.b	nRst, $03
0008D7AF ECF5                       	smpsPSGAlterVol     $F5
0008D7B1 8F06                       	dc.b	nD1, $06
0008D7B3 EC04                       	smpsPSGAlterVol     $04
0008D7B5 E701                       	dc.b	smpsNoAttack, $01
0008D7B7 EC07                       	smpsPSGAlterVol     $07
0008D7B9 8006                       	dc.b	nRst, $06
0008D7BB E1FF                       	smpsAlterNote       $FF
0008D7BD 01                         	dc.b	$01
0008D7BE E103                       	smpsAlterNote       $03
0008D7C0 01                         	dc.b	$01
0008D7C1 E1FF                       	smpsAlterNote       $FF
0008D7C3 01                         	dc.b	$01
0008D7C4 E1FB                       	smpsAlterNote       $FB
0008D7C6 01                         	dc.b	$01
0008D7C7 ECF5                       	smpsPSGAlterVol     $F5
0008D7C9 8E06                       	dc.b	nCs1, $06
0008D7CB EC04                       	smpsPSGAlterVol     $04
0008D7CD E701                       	dc.b	smpsNoAttack, $01
0008D7CF EC07                       	smpsPSGAlterVol     $07
0008D7D1 8003                       	dc.b	nRst, $03
0008D7D3 ECF5                       	smpsPSGAlterVol     $F5
0008D7D5 8E07                       	dc.b	nCs1, $07
0008D7D7 E1FF                       	smpsAlterNote       $FF
0008D7D9 9B06                       	dc.b	nD2, $06
0008D7DB EC04                       	smpsPSGAlterVol     $04
0008D7DD E701                       	dc.b	smpsNoAttack, $01
0008D7DF ECFC                       	smpsPSGAlterVol     $FC
0008D7E1 9B03                       	dc.b	nD2, $03
0008D7E3 EC04                       	smpsPSGAlterVol     $04
0008D7E5 E701                       	dc.b	smpsNoAttack, $01
0008D7E7 ECFC                       	smpsPSGAlterVol     $FC
0008D7E9 9B02                       	dc.b	nD2, $02
0008D7EB EC04                       	smpsPSGAlterVol     $04
0008D7ED E701                       	dc.b	smpsNoAttack, $01
0008D7EF ECFC                       	smpsPSGAlterVol     $FC
0008D7F1 E1FE                       	smpsAlterNote       $FE
0008D7F3 9A03                       	dc.b	nCs2, $03
0008D7F5 EC0B                       	smpsPSGAlterVol     $0B
0008D7F7 800A                       	dc.b	nRst, $0A
0008D7F9 E102                       	smpsAlterNote       $02
0008D7FB 01                         	dc.b	$01
0008D7FC E10A                       	smpsAlterNote       $0A
0008D7FE 01                         	dc.b	$01
0008D7FF E102                       	smpsAlterNote       $02
0008D801 01                         	dc.b	$01
0008D802 E1F7                       	smpsAlterNote       $F7
0008D804 01                         	dc.b	$01
0008D805 E10A                       	smpsAlterNote       $0A
0008D807 01                         	dc.b	$01
0008D808 E1FC                       	smpsAlterNote       $FC
0008D80A 01                         	dc.b	$01
0008D80B E108                       	smpsAlterNote       $08
0008D80D 0101                       	dc.b	$01, $01
0008D80F E102                       	smpsAlterNote       $02
0008D811 01                         	dc.b	$01
0008D812 E1F7                       	smpsAlterNote       $F7
0008D814 0101                       	dc.b	$01, $01
0008D816 E1FC                       	smpsAlterNote       $FC
0008D818 ECF5                       	smpsPSGAlterVol     $F5
0008D81A 8F06                       	dc.b	nD1, $06
0008D81C EC04                       	smpsPSGAlterVol     $04
0008D81E E701                       	dc.b	smpsNoAttack, $01
0008D820 EC07                       	smpsPSGAlterVol     $07
0008D822 8003                       	dc.b	nRst, $03
0008D824 ECF5                       	smpsPSGAlterVol     $F5
0008D826 8F06                       	dc.b	nD1, $06
0008D828 EC04                       	smpsPSGAlterVol     $04
0008D82A E701                       	dc.b	smpsNoAttack, $01
0008D82C EC07                       	smpsPSGAlterVol     $07
0008D82E 8006                       	dc.b	nRst, $06
0008D830 E1FF                       	smpsAlterNote       $FF
0008D832 01                         	dc.b	$01
0008D833 E102                       	smpsAlterNote       $02
0008D835 01                         	dc.b	$01
0008D836 E101                       	smpsAlterNote       $01
0008D838 01                         	dc.b	$01
0008D839 E1FC                       	smpsAlterNote       $FC
0008D83B 01                         	dc.b	$01
0008D83C ECF5                       	smpsPSGAlterVol     $F5
0008D83E 9007                       	dc.b	nEb1, $07
0008D840 EC0B                       	smpsPSGAlterVol     $0B
0008D842 8004                       	dc.b	nRst, $04
0008D844 ECF5                       	smpsPSGAlterVol     $F5
0008D846 9006                       	dc.b	nEb1, $06
0008D848 EC0B                       	smpsPSGAlterVol     $0B
0008D84A 8007                       	dc.b	nRst, $07
0008D84C E103                       	smpsAlterNote       $03
0008D84E 0101                       	dc.b	$01, $01
0008D850 E1FF                       	smpsAlterNote       $FF
0008D852 01                         	dc.b	$01
0008D853 E1F9                       	smpsAlterNote       $F9
0008D855 01                         	dc.b	$01
0008D856 E1FC                       	smpsAlterNote       $FC
0008D858 ECF5                       	smpsPSGAlterVol     $F5
0008D85A 8F06                       	dc.b	nD1, $06
0008D85C EC04                       	smpsPSGAlterVol     $04
0008D85E E701                       	dc.b	smpsNoAttack, $01
0008D860 EC07                       	smpsPSGAlterVol     $07
0008D862 8003                       	dc.b	nRst, $03
0008D864 ECF5                       	smpsPSGAlterVol     $F5
0008D866 8F06                       	dc.b	nD1, $06
0008D868 EC04                       	smpsPSGAlterVol     $04
0008D86A E701                       	dc.b	smpsNoAttack, $01
0008D86C EC07                       	smpsPSGAlterVol     $07
0008D86E 8006                       	dc.b	nRst, $06
0008D870 E1FF                       	smpsAlterNote       $FF
0008D872 01                         	dc.b	$01
0008D873 E103                       	smpsAlterNote       $03
0008D875 01                         	dc.b	$01
0008D876 E1FF                       	smpsAlterNote       $FF
0008D878 01                         	dc.b	$01
0008D879 E1F9                       	smpsAlterNote       $F9
0008D87B 01                         	dc.b	$01
0008D87C E1FC                       	smpsAlterNote       $FC
0008D87E ECF5                       	smpsPSGAlterVol     $F5
0008D880 8F06                       	dc.b	nD1, $06
0008D882 EC04                       	smpsPSGAlterVol     $04
0008D884 E701                       	dc.b	smpsNoAttack, $01
0008D886 EC07                       	smpsPSGAlterVol     $07
0008D888 8003                       	dc.b	nRst, $03
0008D88A ECF5                       	smpsPSGAlterVol     $F5
0008D88C 8F07                       	dc.b	nD1, $07
0008D88E EC0B                       	smpsPSGAlterVol     $0B
0008D890 8006                       	dc.b	nRst, $06
0008D892 E1FF                       	smpsAlterNote       $FF
0008D894 01                         	dc.b	$01
0008D895 E102                       	smpsAlterNote       $02
0008D897 0101                       	dc.b	$01, $01
0008D899 E1FC                       	smpsAlterNote       $FC
0008D89B 01                         	dc.b	$01
0008D89C ECF5                       	smpsPSGAlterVol     $F5
0008D89E 8F07                       	dc.b	nD1, $07
0008D8A0 EC0B                       	smpsPSGAlterVol     $0B
0008D8A2 8004                       	dc.b	nRst, $04
0008D8A4 ECF5                       	smpsPSGAlterVol     $F5
0008D8A6 8F06                       	dc.b	nD1, $06
0008D8A8 EC04                       	smpsPSGAlterVol     $04
0008D8AA E701                       	dc.b	smpsNoAttack, $01
0008D8AC EC07                       	smpsPSGAlterVol     $07
0008D8AE 8006                       	dc.b	nRst, $06
0008D8B0 E101                       	smpsAlterNote       $01
0008D8B2 01                         	dc.b	$01
0008D8B3 E102                       	smpsAlterNote       $02
0008D8B5 01                         	dc.b	$01
0008D8B6 E1FF                       	smpsAlterNote       $FF
0008D8B8 01                         	dc.b	$01
0008D8B9 E1F9                       	smpsAlterNote       $F9
0008D8BB 01                         	dc.b	$01
0008D8BC E1FC                       	smpsAlterNote       $FC
0008D8BE ECF5                       	smpsPSGAlterVol     $F5
0008D8C0 9006                       	dc.b	nEb1, $06
0008D8C2 EC04                       	smpsPSGAlterVol     $04
0008D8C4 E701                       	dc.b	smpsNoAttack, $01
0008D8C6 EC07                       	smpsPSGAlterVol     $07
0008D8C8 8003                       	dc.b	nRst, $03
0008D8CA ECF5                       	smpsPSGAlterVol     $F5
0008D8CC 9006                       	dc.b	nEb1, $06
0008D8CE EC04                       	smpsPSGAlterVol     $04
0008D8D0 E701                       	dc.b	smpsNoAttack, $01
0008D8D2 EC07                       	smpsPSGAlterVol     $07
0008D8D4 8006                       	dc.b	nRst, $06
0008D8D6 E100                       	smpsAlterNote       $00
0008D8D8 01                         	dc.b	$01
0008D8D9 E102                       	smpsAlterNote       $02
0008D8DB 01                         	dc.b	$01
0008D8DC E100                       	smpsAlterNote       $00
0008D8DE 01                         	dc.b	$01
0008D8DF E1FF                       	smpsAlterNote       $FF
0008D8E1 01                         	dc.b	$01
0008D8E2 ECF5                       	smpsPSGAlterVol     $F5
0008D8E4 9B06                       	dc.b	nD2, $06
0008D8E6 EC04                       	smpsPSGAlterVol     $04
0008D8E8 E701                       	dc.b	smpsNoAttack, $01
0008D8EA EC07                       	smpsPSGAlterVol     $07
0008D8EC 8003                       	dc.b	nRst, $03
0008D8EE ECF5                       	smpsPSGAlterVol     $F5
0008D8F0 9B07                       	dc.b	nD2, $07
0008D8F2 EC0B                       	smpsPSGAlterVol     $0B
0008D8F4 8007                       	dc.b	nRst, $07
0008D8F6 E105                       	smpsAlterNote       $05
0008D8F8 0101                       	dc.b	$01, $01
0008D8FA E1FF                       	smpsAlterNote       $FF
0008D8FC 01                         	dc.b	$01
0008D8FD E1FC                       	smpsAlterNote       $FC
0008D8FF 01                         	dc.b	$01
0008D900 E1FF                       	smpsAlterNote       $FF
0008D902 ECF5                       	smpsPSGAlterVol     $F5
0008D904 9B06                       	dc.b	nD2, $06
0008D906 EC0B                       	smpsPSGAlterVol     $0B
0008D908 8004                       	dc.b	nRst, $04
0008D90A ECF5                       	smpsPSGAlterVol     $F5
0008D90C 9B06                       	dc.b	nD2, $06
0008D90E EC04                       	smpsPSGAlterVol     $04
0008D910 E701                       	dc.b	smpsNoAttack, $01
0008D912 EC07                       	smpsPSGAlterVol     $07
0008D914 8006                       	dc.b	nRst, $06
0008D916 E102                       	smpsAlterNote       $02
0008D918 01                         	dc.b	$01
0008D919 E106                       	smpsAlterNote       $06
0008D91B 01                         	dc.b	$01
0008D91C E102                       	smpsAlterNote       $02
0008D91E 01                         	dc.b	$01
0008D91F E1FC                       	smpsAlterNote       $FC
0008D921 01                         	dc.b	$01
0008D922 E1FF                       	smpsAlterNote       $FF
0008D924 ECF5                       	smpsPSGAlterVol     $F5
0008D926 9B06                       	dc.b	nD2, $06
0008D928 EC04                       	smpsPSGAlterVol     $04
0008D92A E701                       	dc.b	smpsNoAttack, $01
0008D92C EC07                       	smpsPSGAlterVol     $07
0008D92E 8003                       	dc.b	nRst, $03
0008D930 ECF5                       	smpsPSGAlterVol     $F5
0008D932 9B07                       	dc.b	nD2, $07
0008D934 EC0B                       	smpsPSGAlterVol     $0B
0008D936 8006                       	dc.b	nRst, $06
0008D938 E102                       	smpsAlterNote       $02
0008D93A 01                         	dc.b	$01
0008D93B E105                       	smpsAlterNote       $05
0008D93D 0101                       	dc.b	$01, $01
0008D93F E1FF                       	smpsAlterNote       $FF
0008D941 01                         	dc.b	$01
0008D942 ECF5                       	smpsPSGAlterVol     $F5
0008D944 9B07                       	dc.b	nD2, $07
0008D946 EC0B                       	smpsPSGAlterVol     $0B
0008D948 8004                       	dc.b	nRst, $04
0008D94A ECF5                       	smpsPSGAlterVol     $F5
0008D94C 9B06                       	dc.b	nD2, $06
0008D94E EC04                       	smpsPSGAlterVol     $04
0008D950 E701                       	dc.b	smpsNoAttack, $01
0008D952 EC07                       	smpsPSGAlterVol     $07
0008D954 8006                       	dc.b	nRst, $06
0008D956 E105                       	smpsAlterNote       $05
0008D958 0101                       	dc.b	$01, $01
0008D95A E102                       	smpsAlterNote       $02
0008D95C 01                         	dc.b	$01
0008D95D E1FC                       	smpsAlterNote       $FC
0008D95F 01                         	dc.b	$01
0008D960 E1FF                       	smpsAlterNote       $FF
0008D962 ECF5                       	smpsPSGAlterVol     $F5
0008D964 9B06                       	dc.b	nD2, $06
0008D966 EC04                       	smpsPSGAlterVol     $04
0008D968 E701                       	dc.b	smpsNoAttack, $01
0008D96A EC07                       	smpsPSGAlterVol     $07
0008D96C 8003                       	dc.b	nRst, $03
0008D96E ECF5                       	smpsPSGAlterVol     $F5
0008D970 9B06                       	dc.b	nD2, $06
0008D972 EC04                       	smpsPSGAlterVol     $04
0008D974 E701                       	dc.b	smpsNoAttack, $01
0008D976 EC07                       	smpsPSGAlterVol     $07
0008D978 8006                       	dc.b	nRst, $06
0008D97A E102                       	smpsAlterNote       $02
0008D97C 01                         	dc.b	$01
0008D97D E106                       	smpsAlterNote       $06
0008D97F 01                         	dc.b	$01
0008D980 E102                       	smpsAlterNote       $02
0008D982 01                         	dc.b	$01
0008D983 E1FF                       	smpsAlterNote       $FF
0008D985 01                         	dc.b	$01
0008D986 ECF5                       	smpsPSGAlterVol     $F5
0008D988 9B06                       	dc.b	nD2, $06
0008D98A EC04                       	smpsPSGAlterVol     $04
0008D98C E701                       	dc.b	smpsNoAttack, $01
0008D98E EC07                       	smpsPSGAlterVol     $07
0008D990 8003                       	dc.b	nRst, $03
0008D992 ECF5                       	smpsPSGAlterVol     $F5
0008D994 9B07                       	dc.b	nD2, $07
0008D996 EC0B                       	smpsPSGAlterVol     $0B
0008D998 8007                       	dc.b	nRst, $07
0008D99A E107                       	smpsAlterNote       $07
0008D99C 0101                       	dc.b	$01, $01
0008D99E E1FE                       	smpsAlterNote       $FE
0008D9A0 01                         	dc.b	$01
0008D9A1 E1FA                       	smpsAlterNote       $FA
0008D9A3 0101                       	dc.b	$01, $01
0008D9A5 E103                       	smpsAlterNote       $03
0008D9A7 01                         	dc.b	$01
0008D9A8 E109                       	smpsAlterNote       $09
0008D9AA 01                         	dc.b	$01
0008D9AB E107                       	smpsAlterNote       $07
0008D9AD 01                         	dc.b	$01
0008D9AE E1FE                       	smpsAlterNote       $FE
0008D9B0 01                         	dc.b	$01
0008D9B1 E108                       	smpsAlterNote       $08
0008D9B3 01                         	dc.b	$01
0008D9B4 E1FD                       	smpsAlterNote       $FD
0008D9B6 ECF5                       	smpsPSGAlterVol     $F5
0008D9B8 940E                       	dc.b	nG1, $0E
0008D9BA E103                       	smpsAlterNote       $03
0008D9BC EC0B                       	smpsPSGAlterVol     $0B
0008D9BE 8001 01                    	dc.b	nRst, $01, $01
0008D9C1 E1FD                       	smpsAlterNote       $FD
0008D9C3 01                         	dc.b	$01
0008D9C4 E1FB                       	smpsAlterNote       $FB
0008D9C6 0101                       	dc.b	$01, $01
0008D9C8 E100                       	smpsAlterNote       $00
0008D9CA 01                         	dc.b	$01
0008D9CB E103                       	smpsAlterNote       $03
0008D9CD 01                         	dc.b	$01
0008D9CE E100                       	smpsAlterNote       $00
0008D9D0 01                         	dc.b	$01
0008D9D1 E1FD                       	smpsAlterNote       $FD
0008D9D3 01                         	dc.b	$01
0008D9D4 E1FA                       	smpsAlterNote       $FA
0008D9D6 01                         	dc.b	$01
0008D9D7 E1FD                       	smpsAlterNote       $FD
0008D9D9 01                         	dc.b	$01
0008D9DA E103                       	smpsAlterNote       $03
0008D9DC 0101                       	dc.b	$01, $01
0008D9DE E100                       	smpsAlterNote       $00
0008D9E0 01                         	dc.b	$01
0008D9E1 E1FE                       	smpsAlterNote       $FE
0008D9E3 ECF5                       	smpsPSGAlterVol     $F5
0008D9E5 960D                       	dc.b	nA1, $0D
0008D9E7 E104                       	smpsAlterNote       $04
0008D9E9 EC0B                       	smpsPSGAlterVol     $0B
0008D9EB 8001 01                    	dc.b	nRst, $01, $01
0008D9EE E101                       	smpsAlterNote       $01
0008D9F0 01                         	dc.b	$01
0008D9F1 E1FB                       	smpsAlterNote       $FB
0008D9F3 0101                       	dc.b	$01, $01
0008D9F5 E1FE                       	smpsAlterNote       $FE
0008D9F7 01                         	dc.b	$01
0008D9F8 E104                       	smpsAlterNote       $04
0008D9FA 0101                       	dc.b	$01, $01
0008D9FC E1FE                       	smpsAlterNote       $FE
0008D9FE 01                         	dc.b	$01
0008D9FF E1FB                       	smpsAlterNote       $FB
0008DA01 0101                       	dc.b	$01, $01
0008DA03 E101                       	smpsAlterNote       $01
0008DA05 01                         	dc.b	$01
0008DA06 E104                       	smpsAlterNote       $04
0008DA08 0101                       	dc.b	$01, $01
0008DA0A E1FE                       	smpsAlterNote       $FE
0008DA0C ECF5                       	smpsPSGAlterVol     $F5
0008DA0E 970D                       	dc.b	nBb1, $0D
0008DA10 E101                       	smpsAlterNote       $01
0008DA12 EC04                       	smpsPSGAlterVol     $04
0008DA14 E701                       	dc.b	smpsNoAttack, $01
0008DA16 EC07                       	smpsPSGAlterVol     $07
0008DA18 E104                       	smpsAlterNote       $04
0008DA1A 8001                       	dc.b	nRst, $01
0008DA1C E103                       	smpsAlterNote       $03
0008DA1E 01                         	dc.b	$01
0008DA1F E1FE                       	smpsAlterNote       $FE
0008DA21 01                         	dc.b	$01
0008DA22 E1FA                       	smpsAlterNote       $FA
0008DA24 01                         	dc.b	$01
0008DA25 E1FE                       	smpsAlterNote       $FE
0008DA27 01                         	dc.b	$01
0008DA28 E101                       	smpsAlterNote       $01
0008DA2A 01                         	dc.b	$01
0008DA2B E104                       	smpsAlterNote       $04
0008DA2D 01                         	dc.b	$01
0008DA2E E101                       	smpsAlterNote       $01
0008DA30 01                         	dc.b	$01
0008DA31 E1FB                       	smpsAlterNote       $FB
0008DA33 01                         	dc.b	$01
0008DA34 E1FA                       	smpsAlterNote       $FA
0008DA36 01                         	dc.b	$01
0008DA37 E1FE                       	smpsAlterNote       $FE
0008DA39 01                         	dc.b	$01
0008DA3A E103                       	smpsAlterNote       $03
0008DA3C 0101                       	dc.b	$01, $01
0008DA3E E101                       	smpsAlterNote       $01
0008DA40 01                         	dc.b	$01
0008DA41 E1FE                       	smpsAlterNote       $FE
0008DA43 ECF5                       	smpsPSGAlterVol     $F5
0008DA45 990D                       	dc.b	nC2, $0D
0008DA47 E104                       	smpsAlterNote       $04
0008DA49 EC0B                       	smpsPSGAlterVol     $0B
0008DA4B 8001 01                    	dc.b	nRst, $01, $01
0008DA4E E102                       	smpsAlterNote       $02
0008DA50 01                         	dc.b	$01
0008DA51 E1FC                       	smpsAlterNote       $FC
0008DA53 0101                       	dc.b	$01, $01
0008DA55 E102                       	smpsAlterNote       $02
0008DA57 01                         	dc.b	$01
0008DA58 E104                       	smpsAlterNote       $04
0008DA5A 01                         	dc.b	$01
0008DA5B E1FF                       	smpsAlterNote       $FF
0008DA5D ECF5                       	smpsPSGAlterVol     $F5
0008DA5F 9B06                       	dc.b	nD2, $06
0008DA61 EC04                       	smpsPSGAlterVol     $04
0008DA63 E701                       	dc.b	smpsNoAttack, $01
0008DA65 EC07                       	smpsPSGAlterVol     $07
0008DA67 8003                       	dc.b	nRst, $03
0008DA69 ECF5                       	smpsPSGAlterVol     $F5
0008DA6B 9B07                       	dc.b	nD2, $07
0008DA6D EC0B                       	smpsPSGAlterVol     $0B
0008DA6F 8006                       	dc.b	nRst, $06
0008DA71 E101                       	smpsAlterNote       $01
0008DA73 01                         	dc.b	$01
0008DA74 E104                       	smpsAlterNote       $04
0008DA76 0101                       	dc.b	$01, $01
0008DA78 E1FE                       	smpsAlterNote       $FE
0008DA7A 01                         	dc.b	$01
0008DA7B E1FC                       	smpsAlterNote       $FC
0008DA7D 01                         	dc.b	$01
0008DA7E E1FE                       	smpsAlterNote       $FE
0008DA80 ECF5                       	smpsPSGAlterVol     $F5
0008DA82 9C06                       	dc.b	nEb2, $06
0008DA84 EC0B                       	smpsPSGAlterVol     $0B
0008DA86 8004                       	dc.b	nRst, $04
0008DA88 ECF5                       	smpsPSGAlterVol     $F5
0008DA8A 9C06                       	dc.b	nEb2, $06
0008DA8C EC04                       	smpsPSGAlterVol     $04
0008DA8E E701                       	dc.b	smpsNoAttack, $01
0008DA90 EC07                       	smpsPSGAlterVol     $07
0008DA92 8006                       	dc.b	nRst, $06
0008DA94 E105                       	smpsAlterNote       $05
0008DA96 01                         	dc.b	$01
0008DA97 E106                       	smpsAlterNote       $06
0008DA99 01                         	dc.b	$01
0008DA9A E102                       	smpsAlterNote       $02
0008DA9C 01                         	dc.b	$01
0008DA9D E1FB                       	smpsAlterNote       $FB
0008DA9F 01                         	dc.b	$01
0008DAA0 E1FF                       	smpsAlterNote       $FF
0008DAA2 ECF5                       	smpsPSGAlterVol     $F5
0008DAA4 9B06                       	dc.b	nD2, $06
0008DAA6 EC04                       	smpsPSGAlterVol     $04
0008DAA8 E701                       	dc.b	smpsNoAttack, $01
0008DAAA EC07                       	smpsPSGAlterVol     $07
0008DAAC 8003                       	dc.b	nRst, $03
0008DAAE ECF5                       	smpsPSGAlterVol     $F5
0008DAB0 9B06                       	dc.b	nD2, $06
0008DAB2 EC04                       	smpsPSGAlterVol     $04
0008DAB4 E701                       	dc.b	smpsNoAttack, $01
0008DAB6 EC07                       	smpsPSGAlterVol     $07
0008DAB8 8006                       	dc.b	nRst, $06
0008DABA E101                       	smpsAlterNote       $01
0008DABC 01                         	dc.b	$01
0008DABD E105                       	smpsAlterNote       $05
0008DABF 01                         	dc.b	$01
0008DAC0 E104                       	smpsAlterNote       $04
0008DAC2 01                         	dc.b	$01
0008DAC3 E1FE                       	smpsAlterNote       $FE
0008DAC5 01                         	dc.b	$01
0008DAC6 ECF5                       	smpsPSGAlterVol     $F5
0008DAC8 9C07                       	dc.b	nEb2, $07
0008DACA EC0B                       	smpsPSGAlterVol     $0B
0008DACC 8004                       	dc.b	nRst, $04
0008DACE ECF5                       	smpsPSGAlterVol     $F5
0008DAD0 9C06                       	dc.b	nEb2, $06
0008DAD2 EC0B                       	smpsPSGAlterVol     $0B
0008DAD4 8007                       	dc.b	nRst, $07
0008DAD6 E105                       	smpsAlterNote       $05
0008DAD8 0101                       	dc.b	$01, $01
0008DADA E102                       	smpsAlterNote       $02
0008DADC 01                         	dc.b	$01
0008DADD E1FB                       	smpsAlterNote       $FB
0008DADF 01                         	dc.b	$01
0008DAE0 E1FF                       	smpsAlterNote       $FF
0008DAE2 ECF5                       	smpsPSGAlterVol     $F5
0008DAE4 9B06                       	dc.b	nD2, $06
0008DAE6 EC04                       	smpsPSGAlterVol     $04
0008DAE8 E701                       	dc.b	smpsNoAttack, $01
0008DAEA EC07                       	smpsPSGAlterVol     $07
0008DAEC 8003                       	dc.b	nRst, $03
0008DAEE ECF5                       	smpsPSGAlterVol     $F5
0008DAF0 9B06                       	dc.b	nD2, $06
0008DAF2 EC04                       	smpsPSGAlterVol     $04
0008DAF4 E701                       	dc.b	smpsNoAttack, $01
0008DAF6 EC07                       	smpsPSGAlterVol     $07
0008DAF8 8006                       	dc.b	nRst, $06
0008DAFA E101                       	smpsAlterNote       $01
0008DAFC 01                         	dc.b	$01
0008DAFD E105                       	smpsAlterNote       $05
0008DAFF 01                         	dc.b	$01
0008DB00 E101                       	smpsAlterNote       $01
0008DB02 01                         	dc.b	$01
0008DB03 E1FC                       	smpsAlterNote       $FC
0008DB05 01                         	dc.b	$01
0008DB06 E1FE                       	smpsAlterNote       $FE
0008DB08 ECF5                       	smpsPSGAlterVol     $F5
0008DB0A 9C06                       	dc.b	nEb2, $06
0008DB0C EC04                       	smpsPSGAlterVol     $04
0008DB0E E701                       	dc.b	smpsNoAttack, $01
0008DB10 EC07                       	smpsPSGAlterVol     $07
0008DB12 8003                       	dc.b	nRst, $03
0008DB14 ECF5                       	smpsPSGAlterVol     $F5
0008DB16 9C07                       	dc.b	nEb2, $07
0008DB18 EC0B                       	smpsPSGAlterVol     $0B
0008DB1A 8006                       	dc.b	nRst, $06
0008DB1C E102                       	smpsAlterNote       $02
0008DB1E 01                         	dc.b	$01
0008DB1F E105                       	smpsAlterNote       $05
0008DB21 0101                       	dc.b	$01, $01
0008DB23 E1FF                       	smpsAlterNote       $FF
0008DB25 01                         	dc.b	$01
0008DB26 ECF5                       	smpsPSGAlterVol     $F5
0008DB28 9B07                       	dc.b	nD2, $07
0008DB2A EC0B                       	smpsPSGAlterVol     $0B
0008DB2C 8004                       	dc.b	nRst, $04
0008DB2E ECF5                       	smpsPSGAlterVol     $F5
0008DB30 9B06                       	dc.b	nD2, $06
0008DB32 EC04                       	smpsPSGAlterVol     $04
0008DB34 E701                       	dc.b	smpsNoAttack, $01
0008DB36 EC07                       	smpsPSGAlterVol     $07
0008DB38 8002                       	dc.b	nRst, $02
0008DB3A E1FC                       	smpsAlterNote       $FC
0008DB3C ECF5                       	smpsPSGAlterVol     $F5
0008DB3E 9006                       	dc.b	nEb1, $06
0008DB40 EC04                       	smpsPSGAlterVol     $04
0008DB42 E701                       	dc.b	smpsNoAttack, $01
0008DB44 ECFC                       	smpsPSGAlterVol     $FC
0008DB46 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
0008DB4A EC04                       	smpsPSGAlterVol     $04
0008DB4C E701                       	dc.b	smpsNoAttack, $01
0008DB4E E1FD                       	smpsAlterNote       $FD
0008DB50 ECFC                       	smpsPSGAlterVol     $FC
0008DB52 9402                       	dc.b	nG1, $02
0008DB54 EC04                       	smpsPSGAlterVol     $04
0008DB56 E701                       	dc.b	smpsNoAttack, $01
0008DB58 E1FE                       	smpsAlterNote       $FE
0008DB5A ECFC                       	smpsPSGAlterVol     $FC
0008DB5C 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008DB60 EC04                       	smpsPSGAlterVol     $04
0008DB62 E701                       	dc.b	smpsNoAttack, $01
0008DB64 EC07                       	smpsPSGAlterVol     $07
0008DB66 8008                       	dc.b	nRst, $08
0008DB68 F6F4 F3                    	smpsJump            music84_Jump06
0008DB6B                            
0008DB6B                            ; PSG3 Data
0008DB6B                            music84_PSG3:
0008DB6B F500                       	smpsPSGvoice        $00
0008DB6D E1FF                       	smpsAlterNote       $FF
0008DB6F EC0F                       	smpsPSGAlterVol     $0F
0008DB71 803A                       	dc.b	nRst, $3A
0008DB73                            
0008DB73                            music84_Jump05:
0008DB73 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
0008DB7F 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
0008DB89 F6FF E8                    	smpsJump            music84_Jump05
0008DB8C                            
0008DB8C                            ; DAC Data
0008DB8C                            music84_DAC:
0008DB8C E0C0                       	smpsPan             panCenter, $00
0008DB8E 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
0008DB9A 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
0008DBA6 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
0008DBB2 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008DBBE 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008DBCA 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
0008DBD6 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008DBE2 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
0008DBEE 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008DBFA 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
0008DC06 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008DC12 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
0008DC1E 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008DC2A 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008DC36 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
0008DC42 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
0008DC4E 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
0008DC5A 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
0008DC66 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
0008DC72 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008DC7E 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008DC8A 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008DC96 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
0008DCA2 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008DCAE 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
0008DCBA 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
0008DCC6 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
0008DCD2 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008DCDE 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008DCEA 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008DCF6 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008DD02 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008DD0E 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
0008DD1A 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
0008DD26 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
0008DD32 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008DD3E 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
0008DD4A 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
0008DD56 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008DD62 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
0008DD6E 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
0008DD7A 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
0008DD86 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008DD92 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008DD9E 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008DDAA 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008DDB6 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008DDC2 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
0008DDCE 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
0008DDDA 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
0008DDE6 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
0008DDF2 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
0008DDFE 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
0008DE0A 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
0008DE16 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008DE22 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
0008DE2E 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
0008DE3A 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008DE46 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008DE52 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008DE5E 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
0008DE6A 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
0008DE76 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
0008DE82 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
0008DE8E 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
0008DE9A 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
0008DEA6 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
0008DEB2 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
0008DEBE 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0008DECA 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008DED6 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
0008DEE2 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008DEEE 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
0008DEFA 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
0008DF06 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
0008DF12 E0C0                       	smpsPan             panCenter, $00
0008DF14 F2                         	smpsStop
0008DF15                            
0008DF15                            music84_Voices:
0008DF15                            ;	Voice $00
0008DF15                            ;	$3D
0008DF15                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
0008DF15                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
0008DF15                            	smpsVcAlgorithm     $05
0008DF15                            	smpsVcFeedback      $07
0008DF15                            	smpsVcUnusedBits    $00
0008DF15                            	smpsVcDetune        $05, $04, $03, $04
0008DF15                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008DF15                            	smpsVcRateScale     $00, $00, $00, $00
0008DF15                            	smpsVcAttackRate    $11, $11, $11, $11
0008DF15                            	smpsVcAmpMod        $00, $00, $00, $00
0008DF15                            	smpsVcDecayRate1    $00, $00, $00, $0A
0008DF15                            	smpsVcDecayRate2    $00, $00, $00, $0B
0008DF15                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008DF15                            	smpsVcReleaseRate   $08, $08, $08, $07
0008DF15 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
0008DF2E                            
0008DF2E                            ;	Voice $01
0008DF2E                            ;	$04
0008DF2E                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
0008DF2E                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
0008DF2E                            	smpsVcAlgorithm     $04
0008DF2E                            	smpsVcFeedback      $00
0008DF2E                            	smpsVcUnusedBits    $00
0008DF2E                            	smpsVcDetune        $04, $03, $04, $05
0008DF2E                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
0008DF2E                            	smpsVcRateScale     $00, $01, $00, $01
0008DF2E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0008DF2E                            	smpsVcAmpMod        $00, $00, $00, $00
0008DF2E                            	smpsVcDecayRate1    $0E, $00, $0E, $00
0008DF2E                            	smpsVcDecayRate2    $05, $00, $05, $00
0008DF2E                            	smpsVcDecayLevel    $08, $0E, $08, $0E
0008DF2E                            	smpsVcReleaseRate   $06, $06, $06, $06
0008DF2E 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
0008DF47                            
0008DF47                            ;	Voice $02
0008DF47                            ;	$30
0008DF47                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
0008DF47                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
0008DF47                            	smpsVcAlgorithm     $00
0008DF47                            	smpsVcFeedback      $06
0008DF47                            	smpsVcUnusedBits    $00
0008DF47                            	smpsVcDetune        $04, $02, $00, $06
0008DF47                            	smpsVcCoarseFreq    $01, $01, $03, $0C
0008DF47                            	smpsVcRateScale     $00, $00, $00, $00
0008DF47                            	smpsVcAttackRate    $1F, $1F, $1F, $14
0008DF47                            	smpsVcAmpMod        $00, $00, $00, $00
0008DF47                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
0008DF47                            	smpsVcDecayRate2    $01, $01, $01, $01
0008DF47                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
0008DF47                            	smpsVcReleaseRate   $09, $0B, $08, $0F
0008DF47 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
0008DF60                            
0008DF60                            ;	Voice $03
0008DF60                            ;	$3A
0008DF60                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
0008DF60                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
0008DF60                            	smpsVcAlgorithm     $02
0008DF60                            	smpsVcFeedback      $07
0008DF60                            	smpsVcUnusedBits    $00
0008DF60                            	smpsVcDetune        $04, $06, $02, $00
0008DF60                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008DF60                            	smpsVcRateScale     $00, $00, $00, $00
0008DF60                            	smpsVcAttackRate    $18, $19, $14, $14
0008DF60                            	smpsVcAmpMod        $00, $00, $00, $00
0008DF60                            	smpsVcDecayRate1    $09, $0D, $09, $09
0008DF60                            	smpsVcDecayRate2    $00, $00, $00, $00
0008DF60                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
0008DF60                            	smpsVcReleaseRate   $08, $0F, $0F, $07
0008DF60 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
0008DF79                            
0008DF79                            ;	Voice $04
0008DF79                            ;	$3C
0008DF79                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
0008DF79                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
0008DF79                            	smpsVcAlgorithm     $04
0008DF79                            	smpsVcFeedback      $07
0008DF79                            	smpsVcUnusedBits    $00
0008DF79                            	smpsVcDetune        $07, $00, $00, $03
0008DF79                            	smpsVcCoarseFreq    $00, $00, $02, $0A
0008DF79                            	smpsVcRateScale     $00, $00, $00, $00
0008DF79                            	smpsVcAttackRate    $10, $1F, $10, $1F
0008DF79                            	smpsVcAmpMod        $00, $00, $00, $00
0008DF79                            	smpsVcDecayRate1    $00, $00, $00, $00
0008DF79                            	smpsVcDecayRate2    $00, $00, $00, $00
0008DF79                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008DF79                            	smpsVcReleaseRate   $0A, $02, $0A, $02
0008DF79 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
0008DF92                            
0008DF92                            ;	Voice $05
0008DF92                            ;	$38
0008DF92                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
0008DF92                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
0008DF92                            	smpsVcAlgorithm     $00
0008DF92                            	smpsVcFeedback      $07
0008DF92                            	smpsVcUnusedBits    $00
0008DF92                            	smpsVcDetune        $04, $06, $02, $00
0008DF92                            	smpsVcCoarseFreq    $01, $01, $01, $00
0008DF92                            	smpsVcRateScale     $00, $00, $00, $00
0008DF92                            	smpsVcAttackRate    $1F, $1F, $1F, $10
0008DF92                            	smpsVcAmpMod        $00, $00, $00, $00
0008DF92                            	smpsVcDecayRate1    $00, $03, $00, $17
0008DF92                            	smpsVcDecayRate2    $00, $08, $08, $0B
0008DF92                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
0008DF92                            	smpsVcReleaseRate   $08, $05, $05, $05
0008DF92 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0008DFAB                            
0008DFAB                            
0008DFAC 00                         		even
0008DFAC                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
000921BC                            		even
000921BC                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
00095D14 00                         		even
00095D14                            Music87:	include	sound\music87.asm; Invincibility
00095D14                            triple_Header:
00095D14 =00000001                  smpsHeaderStartSong = 1
00095D14 0000                       	smpsHeaderVoice     triple_Voices
00095D16 0501                       	smpsHeaderChan      $05, $01
00095D18 0200                       	smpsHeaderTempo     $02, $00
00095D1A                            
00095D1E 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
00095D22 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
00095D26 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
00095D2A 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
00095D2E 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
00095D34                            
00095D34                            ; DAC Data
00095D34                            triple_DAC:
00095D34 E0C0                       	smpsPan             panCenter, $00
00095D36 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
00095D3C                            
00095D3C                            triple_Loop01:
00095D3C 8282 82                    	dc.b	dSnare, dSnare, dSnare
00095D3F                            
00095D3F                            triple_Loop00:
00095D3F 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
00095D4B 06                         	dc.b	$06
00095D4C F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
00095D51 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
00095D5D 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
00095D64 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
00095D69 0303 1B                    	dc.b	$03, $03, $1B
00095D6C E0C0                       	smpsPan             panCenter, $00
00095D6E F6FF C4                    	smpsJump triple_DAC
00095D71                            
00095D71                            ; FM1 Data
00095D71                            triple_FM1:
00095D71 E0C0                       	smpsPan             panCenter, $00
00095D75 8018                       	dc.b	nRst, $18
00095D77                            
00095D77                            triple_Loop0B:
00095D77 AC06 B8                    	dc.b	nG3, $06, nG4
00095D7A F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
00095D7F                            
00095D7F                            triple_Loop0C:
00095D7F A7B3                       	dc.b	nD3, nD4
00095D81 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
00095D86                            
00095D86                            triple_Loop0D:
00095D86 A9B5                       	dc.b	nE3, nE4
00095D88 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
00095D8D A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
00095D95 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
00095D9A A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
00095DA6 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
00095DB2 AD                         	dc.b	nAb3
00095DB3 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
00095DB8 8018                       	dc.b	nRst, $18
00095DBA E0C0                       	smpsPan             panCenter, $00
00095DBE F6FF B1                    	smpsJump triple_FM1
00095DC1                            
00095DC1                            ; FM2 Data
00095DC1                            triple_FM2:
00095DC1 E0C0                       	smpsPan             panCenter, $00
00095DC5 8018                       	dc.b	nRst, $18
00095DC7                            
00095DC7                            triple_Loop07:
00095DC7 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00095DD3 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00095DDF F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
00095DE4 8003                       	dc.b	nRst, $03
00095DE6                            
00095DE6                            triple_Loop08:
00095DE6 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00095DEC F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
00095DF1 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00095DF7                            
00095DF7                            triple_Loop09:
00095DF7 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00095E03 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00095E0F F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
00095E14 8003                       	dc.b	nRst, $03
00095E16                            
00095E16                            triple_Loop0A:
00095E16 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00095E1C F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
00095E21 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00095E27 E0C0                       	smpsPan             panCenter, $00
00095E2B F6FF 94                    	smpsJump triple_FM2
00095E2E                            
00095E2E                            ; FM3 Data
00095E2E                            triple_FM3:
00095E2E E0C0                       	smpsPan             panCenter, $00
00095E32 8018                       	dc.b	nRst, $18
00095E34                            
00095E34                            triple_Loop06:
00095E34 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
00095E3B F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
00095E40 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
00095E4C BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
00095E58 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
00095E5B F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
00095E60 8018                       	dc.b	nRst, $18
00095E62 E0C0                       	smpsPan             panCenter, $00
00095E66 F6FF C6                    	smpsJump triple_FM3
00095E69                            
00095E69                            ; FM4 Data
00095E69                            triple_FM4:
00095E69 E103                       	smpsAlterNote       $03
00095E6D E0C0                       	smpsPan             panCenter, $00
00095E6F 8018                       	dc.b	nRst, $18
00095E71                            
00095E71                            triple_Loop02:
00095E71 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00095E7D C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00095E89 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
00095E8E 8003                       	dc.b	nRst, $03
00095E90                            
00095E90                            triple_Loop03:
00095E90 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00095E96 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
00095E9B B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00095EA1                            
00095EA1                            triple_Loop04:
00095EA1 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00095EAD C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00095EB9 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
00095EBE 8003                       	dc.b	nRst, $03
00095EC0                            
00095EC0                            triple_Loop05:
00095EC0 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00095EC6 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
00095ECB B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00095ED1 E0C0                       	smpsPan             panCenter, $00
00095ED3 F6FF 94                    	smpsJump triple_FM4
00095ED6                            
00095ED6                            ; PSG1 Data
00095ED6                            triple_PSG1:
00095ED6 8018                       	dc.b	nRst, $18
00095ED8                            
00095ED8                            triple_Loop0E:
00095ED8 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00095EE4 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00095EF0 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00095EFC 9402 8004                  	dc.b	nG1, $02, nRst, $04
00095F00 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
00095F05 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00095F11 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00095F1D 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00095F29 9402 8007                  	dc.b	nG1, $02, nRst, $07
00095F2D                            
00095F2D                            triple_Loop0F:
00095F2D 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00095F33 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
00095F38 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
00095F3E                            
00095F3E                            triple_Loop10:
00095F3E A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00095F4A 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00095F56 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00095F62 9402 8004                  	dc.b	nG1, $02, nRst, $04
00095F66 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
00095F6B A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00095F77 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00095F83 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00095F8F 9402 8007                  	dc.b	nG1, $02, nRst, $07
00095F93                            
00095F93                            triple_Loop11:
00095F93 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00095F99 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
00095F9E 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
00095FA4 F500                       	smpsPSGvoice        $00
00095FA6 F6FF 2E                    	smpsJump triple_PSG1
00095FA9                            
00095FA9                            triple_Voices:
00095FA9                            ;	Voice $00
00095FA9                            ;	$3A
00095FA9                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
00095FA9                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
00095FA9                            	smpsVcAlgorithm     $02
00095FA9                            	smpsVcFeedback      $07
00095FA9                            	smpsVcUnusedBits    $00
00095FA9                            	smpsVcDetune        $00, $00, $00, $00
00095FA9                            	smpsVcCoarseFreq    $01, $01, $07, $01
00095FA9                            	smpsVcRateScale     $01, $02, $02, $02
00095FA9                            	smpsVcAttackRate    $13, $0D, $0E, $0E
00095FA9                            	smpsVcAmpMod        $00, $00, $00, $00
00095FA9                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
00095FA9                            	smpsVcDecayRate2    $00, $00, $00, $00
00095FA9                            	smpsVcDecayLevel    $00, $01, $0F, $01
00095FA9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00095FA9 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
00095FC2                            
00095FC2                            ;	Voice $01
00095FC2                            ;	$20
00095FC2                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
00095FC2                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
00095FC2                            	smpsVcAlgorithm     $00
00095FC2                            	smpsVcFeedback      $04
00095FC2                            	smpsVcUnusedBits    $00
00095FC2                            	smpsVcDetune        $00, $00, $03, $07
00095FC2                            	smpsVcCoarseFreq    $00, $00, $01, $0A
00095FC2                            	smpsVcRateScale     $03, $03, $03, $02
00095FC2                            	smpsVcAttackRate    $1F, $1C, $18, $1F
00095FC2                            	smpsVcAmpMod        $00, $00, $00, $00
00095FC2                            	smpsVcDecayRate1    $04, $04, $0A, $10
00095FC2                            	smpsVcDecayRate2    $08, $08, $08, $0F
00095FC2                            	smpsVcDecayLevel    $0B, $0B, $05, $05
00095FC2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00095FC2 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00095FC2 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00095FDC 00                         		even
00095FDC                            Music88:	incbin	sound\music88.bin; Extra Life
000960CA                            		even
000960CA                            Music89:	incbin	sound\music89.bin; Special Stage
00099F92 00                         		even
00099F92                            Music8A:	incbin	sound\music8A.bin; Title Screen
0009A15C                            		even
0009A15C                            Music8B:	incbin	sound\music8B.bin; Ending Theme
0009A3F6                            		even
0009A3F6                            Music8C:	incbin	sound\music8C.bin; VS Boss
0009D28A 00                         		even
0009D28A                            Music8D:	incbin	sound\music8D.bin; Final Zone
0009D4A6                            		even
0009D4A6                            Music8E:	incbin	sound\fle.bin ;		Act Clear
0009D914 00                         		even
0009D914                            Music8F:	incbin	sound\music8F.bin ; Game Over
0009DF54 00                         		even
0009DF54                            Music90:	incbin	sound\music90.bin ; Continue
0009E2EE 00                         		even
0009E2EE                            Music91:	incbin	sound\music91.bin ; Credits
0009F5BC                            		even
0009F5BC                            Music92:	incbin	sound\music92.bin ; Drowning
0009F8FE 00                         		even
0009F8FE                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
0009F9CE                            		even
0009F9CE                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
0009FA08 00                         		even
0009FA08                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
0009FA42 00                         		even
0009FA42                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
0009FA7C 00                         		even
0009FA7C                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
0009FAB6 00                         		even
0009FAB6                            Music98:	incbin	sound\music98.bin ; Marble Act 2
0009FAF0 00                         		even
0009FAF0                            Music99:	incbin	sound\music99.bin ; Marble Act 3
0009FB2A 00                         		even
0009FB2A                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
0009FB64 00                         		even
0009FB64                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
0009FB9E 00                         		even
0009FB9E                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
0009FBD8 00                         		even
0009FBD8                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
0009FC12 00                         		even
0009FC12                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000A0102                            		even
000A0102                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000A0102                            GentleBreeze_Header:
000A0102 =00000001                  smpsHeaderStartSong = 1
000A0102 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000A0104 0603                       	smpsHeaderChan      $06, $03
000A0106 0100                       	smpsHeaderTempo     $01, $00
000A0108                            
000A010C 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000A0110 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000A0114 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000A0118 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000A011C 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000A0120 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000A0126 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000A012C 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000A0132                            
000A0132                            ; PSG3 Data
000A0132                            GentleBreeze_PSG3:
000A0132 F2                         	smpsStop
000A0133                            
000A0133                            ; FM1 Data
000A0133                            GentleBreeze_FM1:
000A0135 E0C0                       	smpsPan             panCenter, $00
000A0137 E1FF                       	smpsAlterNote       $FF
000A0139 C410                       	dc.b	nG5, $10
000A013B E60F                       	smpsAlterVol        $0F
000A013D C4                         	dc.b	nG5
000A013E E6F1                       	smpsAlterVol        $F1
000A0140 E100                       	smpsAlterNote       $00
000A0142 C2                         	dc.b	nF5
000A0143 E60F                       	smpsAlterVol        $0F
000A0145 08                         	dc.b	$08
000A0146 E6F1                       	smpsAlterVol        $F1
000A0148 C010                       	dc.b	nEb5, $10
000A014A E60F                       	smpsAlterVol        $0F
000A014C C0                         	dc.b	nEb5
000A014D E6F1                       	smpsAlterVol        $F1
000A014F BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A0155 E60F                       	smpsAlterVol        $0F
000A0157 C9                         	dc.b	nC6
000A0158 E6F1                       	smpsAlterVol        $F1
000A015A C5                         	dc.b	nAb5
000A015B E60F                       	smpsAlterVol        $0F
000A015D 08                         	dc.b	$08
000A015E E6F1                       	smpsAlterVol        $F1
000A0160 C010                       	dc.b	nEb5, $10
000A0162 E60F                       	smpsAlterVol        $0F
000A0164 C0                         	dc.b	nEb5
000A0165 E6F1                       	smpsAlterVol        $F1
000A0167 C208                       	dc.b	nF5, $08
000A0169 E1FF                       	smpsAlterNote       $FF
000A016B C410                       	dc.b	nG5, $10
000A016D E100                       	smpsAlterNote       $00
000A016F C5C7                       	dc.b	nAb5, nBb5
000A0171 E60F                       	smpsAlterVol        $0F
000A0173 C7                         	dc.b	nBb5
000A0174 E6F1                       	smpsAlterVol        $F1
000A0176 C5                         	dc.b	nAb5
000A0177 E60F                       	smpsAlterVol        $0F
000A0179 08                         	dc.b	$08
000A017A E6F1                       	smpsAlterVol        $F1
000A017C E1FF                       	smpsAlterNote       $FF
000A017E C410                       	dc.b	nG5, $10
000A0180 E60F                       	smpsAlterVol        $0F
000A0182 C4                         	dc.b	nG5
000A0183 E6F1                       	smpsAlterVol        $F1
000A0185 C4                         	dc.b	nG5
000A0186 E100                       	smpsAlterNote       $00
000A0188 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A018D E60F                       	smpsAlterVol        $0F
000A018F C2                         	dc.b	nF5
000A0190 E6F1                       	smpsAlterVol        $F1
000A0192 E1FF                       	smpsAlterNote       $FF
000A0194 C4                         	dc.b	nG5
000A0195 E60F                       	smpsAlterVol        $0F
000A0197 08                         	dc.b	$08
000A0198 E6F1                       	smpsAlterVol        $F1
000A019A 10                         	dc.b	$10
000A019B E60F                       	smpsAlterVol        $0F
000A019D 38                         	dc.b	$38
000A019E E6F1                       	smpsAlterVol        $F1
000A01A0 10                         	dc.b	$10
000A01A1 E60F                       	smpsAlterVol        $0F
000A01A3 C4                         	dc.b	nG5
000A01A4 E6F1                       	smpsAlterVol        $F1
000A01A6 E100                       	smpsAlterNote       $00
000A01A8 C2                         	dc.b	nF5
000A01A9 E60F                       	smpsAlterVol        $0F
000A01AB 08                         	dc.b	$08
000A01AC E6F1                       	smpsAlterVol        $F1
000A01AE C010                       	dc.b	nEb5, $10
000A01B0 E60F                       	smpsAlterVol        $0F
000A01B2 C0                         	dc.b	nEb5
000A01B3 E6F1                       	smpsAlterVol        $F1
000A01B5 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A01BB E60F                       	smpsAlterVol        $0F
000A01BD C9                         	dc.b	nC6
000A01BE E6F1                       	smpsAlterVol        $F1
000A01C0 C5                         	dc.b	nAb5
000A01C1 E60F                       	smpsAlterVol        $0F
000A01C3 08                         	dc.b	$08
000A01C4 E6F1                       	smpsAlterVol        $F1
000A01C6 C010                       	dc.b	nEb5, $10
000A01C8 E60F                       	smpsAlterVol        $0F
000A01CA C0                         	dc.b	nEb5
000A01CB E6F1                       	smpsAlterVol        $F1
000A01CD C208                       	dc.b	nF5, $08
000A01CF E1FF                       	smpsAlterNote       $FF
000A01D1 C410                       	dc.b	nG5, $10
000A01D3 E100                       	smpsAlterNote       $00
000A01D5 C5C7                       	dc.b	nAb5, nBb5
000A01D7 E60F                       	smpsAlterVol        $0F
000A01D9 C7                         	dc.b	nBb5
000A01DA E6F1                       	smpsAlterVol        $F1
000A01DC C5                         	dc.b	nAb5
000A01DD E60F                       	smpsAlterVol        $0F
000A01DF 08                         	dc.b	$08
000A01E0 E6F1                       	smpsAlterVol        $F1
000A01E2 E1FF                       	smpsAlterNote       $FF
000A01E4 C410                       	dc.b	nG5, $10
000A01E6 E60F                       	smpsAlterVol        $0F
000A01E8 C4                         	dc.b	nG5
000A01E9 E6F1                       	smpsAlterVol        $F1
000A01EB C4                         	dc.b	nG5
000A01EC E100                       	smpsAlterNote       $00
000A01EE C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A01F3 E60F                       	smpsAlterVol        $0F
000A01F5 28                         	dc.b	$28
000A01F6 E6F1                       	smpsAlterVol        $F1
000A01F8 C008 10                    	dc.b	nEb5, $08, $10
000A01FB E60F                       	smpsAlterVol        $0F
000A01FD 21                         	dc.b	$21
000A01FE                            
000A01FE                            GentleBreeze_Loop12:
000A01FE E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000A0201 F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000A0206 E717                       	dc.b	smpsNoAttack, $17
000A0208 E6F1                       	smpsAlterVol        $F1
000A020A E1FF                       	smpsAlterNote       $FF
000A020C C410                       	dc.b	nG5, $10
000A020E E60F                       	smpsAlterVol        $0F
000A0210 C4                         	dc.b	nG5
000A0211 E6F1                       	smpsAlterVol        $F1
000A0213 E100                       	smpsAlterNote       $00
000A0215 C2                         	dc.b	nF5
000A0216 E60F                       	smpsAlterVol        $0F
000A0218 08                         	dc.b	$08
000A0219 E6F1                       	smpsAlterVol        $F1
000A021B C010                       	dc.b	nEb5, $10
000A021D E60F                       	smpsAlterVol        $0F
000A021F C0                         	dc.b	nEb5
000A0220 E6F1                       	smpsAlterVol        $F1
000A0222 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A0228 E60F                       	smpsAlterVol        $0F
000A022A C9                         	dc.b	nC6
000A022B E6F1                       	smpsAlterVol        $F1
000A022D C5                         	dc.b	nAb5
000A022E E60F                       	smpsAlterVol        $0F
000A0230 08                         	dc.b	$08
000A0231 E6F1                       	smpsAlterVol        $F1
000A0233 C010                       	dc.b	nEb5, $10
000A0235 E60F                       	smpsAlterVol        $0F
000A0237 C0                         	dc.b	nEb5
000A0238 E6F1                       	smpsAlterVol        $F1
000A023A C208                       	dc.b	nF5, $08
000A023C E1FF                       	smpsAlterNote       $FF
000A023E C410                       	dc.b	nG5, $10
000A0240 E100                       	smpsAlterNote       $00
000A0242 C5C7                       	dc.b	nAb5, nBb5
000A0244 E60F                       	smpsAlterVol        $0F
000A0246 C7                         	dc.b	nBb5
000A0247 E6F1                       	smpsAlterVol        $F1
000A0249 C5                         	dc.b	nAb5
000A024A E60F                       	smpsAlterVol        $0F
000A024C 08                         	dc.b	$08
000A024D E6F1                       	smpsAlterVol        $F1
000A024F E1FF                       	smpsAlterNote       $FF
000A0251 C410                       	dc.b	nG5, $10
000A0253 E60F                       	smpsAlterVol        $0F
000A0255 C4                         	dc.b	nG5
000A0256 E6F1                       	smpsAlterVol        $F1
000A0258 C4                         	dc.b	nG5
000A0259 E100                       	smpsAlterNote       $00
000A025B C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A0260 E60F                       	smpsAlterVol        $0F
000A0262 C2                         	dc.b	nF5
000A0263 E6F1                       	smpsAlterVol        $F1
000A0265 E1FF                       	smpsAlterNote       $FF
000A0267 C4                         	dc.b	nG5
000A0268 E60F                       	smpsAlterVol        $0F
000A026A 08                         	dc.b	$08
000A026B E6F1                       	smpsAlterVol        $F1
000A026D 10                         	dc.b	$10
000A026E E60F                       	smpsAlterVol        $0F
000A0270 38                         	dc.b	$38
000A0271 E6F1                       	smpsAlterVol        $F1
000A0273 10                         	dc.b	$10
000A0274 E60F                       	smpsAlterVol        $0F
000A0276 C4                         	dc.b	nG5
000A0277 E6F1                       	smpsAlterVol        $F1
000A0279 E100                       	smpsAlterNote       $00
000A027B C2                         	dc.b	nF5
000A027C E60F                       	smpsAlterVol        $0F
000A027E 08                         	dc.b	$08
000A027F E6F1                       	smpsAlterVol        $F1
000A0281 C010                       	dc.b	nEb5, $10
000A0283 E60F                       	smpsAlterVol        $0F
000A0285 C0                         	dc.b	nEb5
000A0286 E6F1                       	smpsAlterVol        $F1
000A0288 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A028E E60F                       	smpsAlterVol        $0F
000A0290 C9                         	dc.b	nC6
000A0291 E6F1                       	smpsAlterVol        $F1
000A0293 C5                         	dc.b	nAb5
000A0294 E60F                       	smpsAlterVol        $0F
000A0296 08                         	dc.b	$08
000A0297 E6F1                       	smpsAlterVol        $F1
000A0299 C010                       	dc.b	nEb5, $10
000A029B E60F                       	smpsAlterVol        $0F
000A029D C0                         	dc.b	nEb5
000A029E E6F1                       	smpsAlterVol        $F1
000A02A0 C208                       	dc.b	nF5, $08
000A02A2 E1FF                       	smpsAlterNote       $FF
000A02A4 C410                       	dc.b	nG5, $10
000A02A6 E100                       	smpsAlterNote       $00
000A02A8 C5C7                       	dc.b	nAb5, nBb5
000A02AA E60F                       	smpsAlterVol        $0F
000A02AC C7                         	dc.b	nBb5
000A02AD E6F1                       	smpsAlterVol        $F1
000A02AF C5                         	dc.b	nAb5
000A02B0 E60F                       	smpsAlterVol        $0F
000A02B2 08                         	dc.b	$08
000A02B3 E6F1                       	smpsAlterVol        $F1
000A02B5 E1FF                       	smpsAlterNote       $FF
000A02B7 C410                       	dc.b	nG5, $10
000A02B9 E60F                       	smpsAlterVol        $0F
000A02BB C4                         	dc.b	nG5
000A02BC E6F1                       	smpsAlterVol        $F1
000A02BE C4                         	dc.b	nG5
000A02BF E100                       	smpsAlterNote       $00
000A02C1 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A02C6 E60F                       	smpsAlterVol        $0F
000A02C8 28                         	dc.b	$28
000A02C9 E6F1                       	smpsAlterVol        $F1
000A02CB C008 10                    	dc.b	nEb5, $08, $10
000A02CE E60F                       	smpsAlterVol        $0F
000A02D0 21                         	dc.b	$21
000A02D1 E0C0                       	smpsPan             panCenter, $00
000A02D3 F6FF 29                    	smpsJump            GentleBreeze_Loop12
000A02D6                            
000A02D6                            ; FM2 Data
000A02D6                            GentleBreeze_FM2:
000A02D8 E60C                       	smpsAlterVol        $0C
000A02DA E0C0                       	smpsPan             panCenter, $00
000A02DC 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A02E8 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A02F4 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A0300 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A030C 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A0318 A039                       	dc.b	nG2, $39
000A031A                            
000A031A                            GentleBreeze_Jump04:
000A031A E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000A031D                            
000A031D                            GentleBreeze_Loop11:
000A031D A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000A0329 A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000A0335 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000A0341 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000A034D A3                         	dc.b	nBb2
000A034E F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000A0353 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A035F A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A036B 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A0377 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A0383 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A038F A039                       	dc.b	nG2, $39
000A0391 E0C0                       	smpsPan             panCenter, $00
000A0393 F6FF 85                    	smpsJump            GentleBreeze_Jump04
000A0396                            
000A0396                            ; FM3 Data
000A0396                            GentleBreeze_FM3:
000A0398 E0C0                       	smpsPan             panCenter, $00
000A039A 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000A03A2 E616                       	smpsAlterVol        $16
000A03A4 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A03A9                            
000A03A9                            GentleBreeze_Loop0F:
000A03A9 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A03AD E1FF                       	smpsAlterNote       $FF
000A03AF C4                         	dc.b	nG5
000A03B0 E100                       	smpsAlterNote       $00
000A03B2 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A03B7 E608                       	smpsAlterVol        $08
000A03B9 C080 08                    	dc.b	nEb5, nRst, $08
000A03BC E6F8                       	smpsAlterVol        $F8
000A03BE C7                         	dc.b	nBb5
000A03BF E1FF                       	smpsAlterNote       $FF
000A03C1 C4                         	dc.b	nG5
000A03C2 E100                       	smpsAlterNote       $00
000A03C4 C0BB                       	dc.b	nEb5, nBb4
000A03C6 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000A03CB C0BD C9                    	dc.b	nEb5, nC5, nC6
000A03CE E1FF                       	smpsAlterNote       $FF
000A03D0 C4                         	dc.b	nG5
000A03D1 E100                       	smpsAlterNote       $00
000A03D3 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A03D8 E608                       	smpsAlterVol        $08
000A03DA C080 08                    	dc.b	nEb5, nRst, $08
000A03DD E6F8                       	smpsAlterVol        $F8
000A03DF E1FF                       	smpsAlterNote       $FF
000A03E1 C4                         	dc.b	nG5
000A03E2 E100                       	smpsAlterNote       $00
000A03E4 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A03EB E1FF                       	smpsAlterNote       $FF
000A03ED C4                         	dc.b	nG5
000A03EE E100                       	smpsAlterNote       $00
000A03F0 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A03F5 E1FF                       	smpsAlterNote       $FF
000A03F7 C4                         	dc.b	nG5
000A03F8 E100                       	smpsAlterNote       $00
000A03FA C7                         	dc.b	nBb5
000A03FB E1FF                       	smpsAlterNote       $FF
000A03FD C4                         	dc.b	nG5
000A03FE E100                       	smpsAlterNote       $00
000A0400 C2C0 01                    	dc.b	nF5, nEb5, $01
000A0403                            
000A0403                            GentleBreeze_Jump03:
000A0403 E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000A040A E6FA                       	smpsAlterVol        $FA
000A040C F4                         	smpsModOff
000A040D E1FF                       	smpsAlterNote       $FF
000A040F B850                       	dc.b	nG4, $50
000A0411 E100                       	smpsAlterNote       $00
000A0413 B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000A041F E1FF                       	smpsAlterNote       $FF
000A0421 B810                       	dc.b	nG4, $10
000A0423 E100                       	smpsAlterNote       $00
000A0425 BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000A042A E1FF                       	smpsAlterNote       $FF
000A042C B8                         	dc.b	nG4
000A042D E100                       	smpsAlterNote       $00
000A042F B610                       	dc.b	nF4, $10
000A0431 E1FF                       	smpsAlterNote       $FF
000A0433 B850                       	dc.b	nG4, $50
000A0435 E100                       	smpsAlterNote       $00
000A0437 B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000A043F E1FF                       	smpsAlterNote       $FF
000A0441 AC08                       	dc.b	nG3, $08
000A0443 E100                       	smpsAlterNote       $00
000A0445 AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000A044A E1FF                       	smpsAlterNote       $FF
000A044C B850                       	dc.b	nG4, $50
000A044E E100                       	smpsAlterNote       $00
000A0450 BB08                       	dc.b	nBb4, $08
000A0452 E1FF                       	smpsAlterNote       $FF
000A0454 B8                         	dc.b	nG4
000A0455 E100                       	smpsAlterNote       $00
000A0457 BDBB B6                    	dc.b	nC5, nBb4, nF4
000A045A E1FF                       	smpsAlterNote       $FF
000A045C B810 08                    	dc.b	nG4, $10, $08
000A045F E100                       	smpsAlterNote       $00
000A0461 B6                         	dc.b	nF4
000A0462 E1FF                       	smpsAlterNote       $FF
000A0464 B880                       	dc.b	nG4, nRst
000A0466 E100                       	smpsAlterNote       $00
000A0468 BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000A046B E1FF                       	smpsAlterNote       $FF
000A046D B810                       	dc.b	nG4, $10
000A046F E100                       	smpsAlterNote       $00
000A0471 B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000A0478 E1FF                       	smpsAlterNote       $FF
000A047A B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000A0488 E606                       	smpsAlterVol        $06
000A048A F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A048F E100                       	smpsAlterNote       $00
000A0491                            
000A0491                            GentleBreeze_Loop10:
000A0491 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A0495 E1FF                       	smpsAlterNote       $FF
000A0497 C4                         	dc.b	nG5
000A0498 E100                       	smpsAlterNote       $00
000A049A C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A049F E608                       	smpsAlterVol        $08
000A04A1 C080 08                    	dc.b	nEb5, nRst, $08
000A04A4 E6F8                       	smpsAlterVol        $F8
000A04A6 C7                         	dc.b	nBb5
000A04A7 E1FF                       	smpsAlterNote       $FF
000A04A9 C4                         	dc.b	nG5
000A04AA E100                       	smpsAlterNote       $00
000A04AC C0BB                       	dc.b	nEb5, nBb4
000A04AE F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000A04B3 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A04B6 E1FF                       	smpsAlterNote       $FF
000A04B8 C4                         	dc.b	nG5
000A04B9 E100                       	smpsAlterNote       $00
000A04BB C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A04C0 E608                       	smpsAlterVol        $08
000A04C2 C080 08                    	dc.b	nEb5, nRst, $08
000A04C5 E6F8                       	smpsAlterVol        $F8
000A04C7 E1FF                       	smpsAlterNote       $FF
000A04C9 C4                         	dc.b	nG5
000A04CA E100                       	smpsAlterNote       $00
000A04CC C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A04D3 E1FF                       	smpsAlterNote       $FF
000A04D5 C4                         	dc.b	nG5
000A04D6 E100                       	smpsAlterNote       $00
000A04D8 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A04DD E1FF                       	smpsAlterNote       $FF
000A04DF C4                         	dc.b	nG5
000A04E0 E100                       	smpsAlterNote       $00
000A04E2 C7                         	dc.b	nBb5
000A04E3 E1FF                       	smpsAlterNote       $FF
000A04E5 C4                         	dc.b	nG5
000A04E6 E100                       	smpsAlterNote       $00
000A04E8 C2C0 01                    	dc.b	nF5, nEb5, $01
000A04EB E0C0                       	smpsPan             panCenter, $00
000A04ED F1                         	smpsModOn
000A04EE F6FF 13                    	smpsJump            GentleBreeze_Jump03
000A04F1                            
000A04F1                            ; FM4 Data
000A04F1                            GentleBreeze_FM4:
000A04F3 E0C0                       	smpsPan             panCenter, $00
000A04F5 80                         	dc.b	nRst
000A04F6                            
000A04F6                            GentleBreeze_Loop0D:
000A04F6 7F                         	dc.b	$7F
000A04F7 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000A04FC 77                         	dc.b	$77
000A04FF E609                       	smpsAlterVol        $09
000A0501 C001                       	dc.b	nEb5, $01
000A0503                            
000A0503                            GentleBreeze_Jump02:
000A0503 E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000A0508 E607                       	smpsAlterVol        $07
000A050A E1FF                       	smpsAlterNote       $FF
000A050C C450                       	dc.b	nG5, $50
000A050E E100                       	smpsAlterNote       $00
000A0510 C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000A051C E1FF                       	smpsAlterNote       $FF
000A051E C410                       	dc.b	nG5, $10
000A0520 E100                       	smpsAlterNote       $00
000A0522 C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000A0527 E1FF                       	smpsAlterNote       $FF
000A0529 C4                         	dc.b	nG5
000A052A E100                       	smpsAlterNote       $00
000A052C C210                       	dc.b	nF5, $10
000A052E E1FF                       	smpsAlterNote       $FF
000A0530 C450                       	dc.b	nG5, $50
000A0532 E100                       	smpsAlterNote       $00
000A0534 C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000A053C E1FF                       	smpsAlterNote       $FF
000A053E B808                       	dc.b	nG4, $08
000A0540 E100                       	smpsAlterNote       $00
000A0542 BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000A0547 E1FF                       	smpsAlterNote       $FF
000A0549 C450                       	dc.b	nG5, $50
000A054B E100                       	smpsAlterNote       $00
000A054D C708                       	dc.b	nBb5, $08
000A054F E1FF                       	smpsAlterNote       $FF
000A0551 C4                         	dc.b	nG5
000A0552 E100                       	smpsAlterNote       $00
000A0554 C9C7 C2                    	dc.b	nC6, nBb5, nF5
000A0557 E1FF                       	smpsAlterNote       $FF
000A0559 C410 08                    	dc.b	nG5, $10, $08
000A055C E100                       	smpsAlterNote       $00
000A055E C2                         	dc.b	nF5
000A055F E1FF                       	smpsAlterNote       $FF
000A0561 C480                       	dc.b	nG5, nRst
000A0563 E100                       	smpsAlterNote       $00
000A0565 C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000A0568 E1FF                       	smpsAlterNote       $FF
000A056A C410                       	dc.b	nG5, $10
000A056C E100                       	smpsAlterNote       $00
000A056E BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000A0575 E1FF                       	smpsAlterNote       $FF
000A0577 C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000A057F                            
000A057F                            GentleBreeze_Loop0E:
000A057F 7F                         	dc.b	$7F
000A0580 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000A0585 77                         	dc.b	$77
000A0586 E100                       	smpsAlterNote       $00
000A0588 C001                       	dc.b	nEb5, $01
000A058A E6F9                       	smpsAlterVol        $F9
000A058C E0C0                       	smpsPan             panCenter, $00
000A058E E100                       	smpsAlterNote       $00
000A0590 F6FF 71                    	smpsJump            GentleBreeze_Jump02
000A0593                            
000A0593                            ; FM5 Data
000A0593                            GentleBreeze_FM5:
000A0595 E0C0                       	smpsPan             panCenter, $00
000A0597 A5                         	dc.b	nC3
000A0598                            
000A0598                            GentleBreeze_Loop06:
000A0598 10                         	dc.b	$10
000A0599 E607                       	smpsAlterVol        $07
000A059B A5                         	dc.b	nC3
000A059C E6F9                       	smpsAlterVol        $F9
000A059E 08                         	dc.b	$08
000A059F E607                       	smpsAlterVol        $07
000A05A1 A5                         	dc.b	nC3
000A05A2 E608                       	smpsAlterVol        $08
000A05A4 A5                         	dc.b	nC3
000A05A5 E6F1                       	smpsAlterVol        $F1
000A05A7 18                         	dc.b	$18
000A05A8 E607                       	smpsAlterVol        $07
000A05AA 10                         	dc.b	$10
000A05AB E608                       	smpsAlterVol        $08
000A05AD A5                         	dc.b	nC3
000A05AE E6F1                       	smpsAlterVol        $F1
000A05B0 A5                         	dc.b	nC3
000A05B1 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000A05B6 A5                         	dc.b	nC3
000A05B7                            
000A05B7                            GentleBreeze_Loop07:
000A05B7 E607                       	smpsAlterVol        $07
000A05B9 A5                         	dc.b	nC3
000A05BA E6F9                       	smpsAlterVol        $F9
000A05BC 08                         	dc.b	$08
000A05BD E607                       	smpsAlterVol        $07
000A05BF A5                         	dc.b	nC3
000A05C0 E608                       	smpsAlterVol        $08
000A05C2 A5                         	dc.b	nC3
000A05C3 E6F1                       	smpsAlterVol        $F1
000A05C5 10                         	dc.b	$10
000A05C6 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000A05CB                            
000A05CB                            GentleBreeze_Loop08:
000A05CB A5                         	dc.b	nC3
000A05CC E607                       	smpsAlterVol        $07
000A05CE A5                         	dc.b	nC3
000A05CF E6F9                       	smpsAlterVol        $F9
000A05D1 08                         	dc.b	$08
000A05D2 E607                       	smpsAlterVol        $07
000A05D4 A5                         	dc.b	nC3
000A05D5 E608                       	smpsAlterVol        $08
000A05D7 A5                         	dc.b	nC3
000A05D8 E6F1                       	smpsAlterVol        $F1
000A05DA 18                         	dc.b	$18
000A05DB E607                       	smpsAlterVol        $07
000A05DD 10                         	dc.b	$10
000A05DE E608                       	smpsAlterVol        $08
000A05E0 A5                         	dc.b	nC3
000A05E1 E6F1                       	smpsAlterVol        $F1
000A05E3 A5                         	dc.b	nC3
000A05E4 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000A05E9 A5                         	dc.b	nC3
000A05EA E607                       	smpsAlterVol        $07
000A05EC A5                         	dc.b	nC3
000A05ED E6F9                       	smpsAlterVol        $F9
000A05EF 08                         	dc.b	$08
000A05F0 E607                       	smpsAlterVol        $07
000A05F2 A5                         	dc.b	nC3
000A05F3 E608                       	smpsAlterVol        $08
000A05F5 A5                         	dc.b	nC3
000A05F6 E6F1                       	smpsAlterVol        $F1
000A05F8 10                         	dc.b	$10
000A05F9 E607                       	smpsAlterVol        $07
000A05FB A5                         	dc.b	nC3
000A05FC E6F9                       	smpsAlterVol        $F9
000A05FE 08                         	dc.b	$08
000A05FF E607                       	smpsAlterVol        $07
000A0601 A5                         	dc.b	nC3
000A0602 E608                       	smpsAlterVol        $08
000A0604 A5                         	dc.b	nC3
000A0605 E6F1                       	smpsAlterVol        $F1
000A0607 01                         	dc.b	$01
000A0608                            
000A0608                            GentleBreeze_Jump01:
000A0608 E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000A060B E607                       	smpsAlterVol        $07
000A060D                            
000A060D                            GentleBreeze_Loop09:
000A060D 10                         	dc.b	$10
000A060E E608                       	smpsAlterVol        $08
000A0610 A5                         	dc.b	nC3
000A0611 E6F1                       	smpsAlterVol        $F1
000A0613 08                         	dc.b	$08
000A0614 E60F                       	smpsAlterVol        $0F
000A0616 18                         	dc.b	$18
000A0617 E6F8                       	smpsAlterVol        $F8
000A0619 F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000A061E 10                         	dc.b	$10
000A061F E608                       	smpsAlterVol        $08
000A0621 A5                         	dc.b	nC3
000A0622 E6F1                       	smpsAlterVol        $F1
000A0624 08                         	dc.b	$08
000A0625 E60F                       	smpsAlterVol        $0F
000A0627 18                         	dc.b	$18
000A0628 E6F1                       	smpsAlterVol        $F1
000A062A                            
000A062A                            GentleBreeze_Loop0A:
000A062A 10                         	dc.b	$10
000A062B E607                       	smpsAlterVol        $07
000A062D A5                         	dc.b	nC3
000A062E E6F9                       	smpsAlterVol        $F9
000A0630 08                         	dc.b	$08
000A0631 E607                       	smpsAlterVol        $07
000A0633 A5                         	dc.b	nC3
000A0634 E608                       	smpsAlterVol        $08
000A0636 A5                         	dc.b	nC3
000A0637 E6F1                       	smpsAlterVol        $F1
000A0639 18                         	dc.b	$18
000A063A E607                       	smpsAlterVol        $07
000A063C 10                         	dc.b	$10
000A063D E608                       	smpsAlterVol        $08
000A063F A5                         	dc.b	nC3
000A0640 E6F1                       	smpsAlterVol        $F1
000A0642 A5                         	dc.b	nC3
000A0643 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000A0648 A5                         	dc.b	nC3
000A0649                            
000A0649                            GentleBreeze_Loop0B:
000A0649 E607                       	smpsAlterVol        $07
000A064B A5                         	dc.b	nC3
000A064C E6F9                       	smpsAlterVol        $F9
000A064E 08                         	dc.b	$08
000A064F E607                       	smpsAlterVol        $07
000A0651 A5                         	dc.b	nC3
000A0652 E608                       	smpsAlterVol        $08
000A0654 A5                         	dc.b	nC3
000A0655 E6F1                       	smpsAlterVol        $F1
000A0657 10                         	dc.b	$10
000A0658 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000A065D                            
000A065D                            GentleBreeze_Loop0C:
000A065D A5                         	dc.b	nC3
000A065E E607                       	smpsAlterVol        $07
000A0660 A5                         	dc.b	nC3
000A0661 E6F9                       	smpsAlterVol        $F9
000A0663 08                         	dc.b	$08
000A0664 E607                       	smpsAlterVol        $07
000A0666 A5                         	dc.b	nC3
000A0667 E608                       	smpsAlterVol        $08
000A0669 A5                         	dc.b	nC3
000A066A E6F1                       	smpsAlterVol        $F1
000A066C 18                         	dc.b	$18
000A066D E607                       	smpsAlterVol        $07
000A066F 10                         	dc.b	$10
000A0670 E608                       	smpsAlterVol        $08
000A0672 A5                         	dc.b	nC3
000A0673 E6F1                       	smpsAlterVol        $F1
000A0675 A5                         	dc.b	nC3
000A0676 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000A067B A5                         	dc.b	nC3
000A067C E607                       	smpsAlterVol        $07
000A067E A5                         	dc.b	nC3
000A067F E6F9                       	smpsAlterVol        $F9
000A0681 08                         	dc.b	$08
000A0682 E607                       	smpsAlterVol        $07
000A0684 A5                         	dc.b	nC3
000A0685 E608                       	smpsAlterVol        $08
000A0687 A5                         	dc.b	nC3
000A0688 E6F1                       	smpsAlterVol        $F1
000A068A 10                         	dc.b	$10
000A068B E607                       	smpsAlterVol        $07
000A068D A5                         	dc.b	nC3
000A068E E6F9                       	smpsAlterVol        $F9
000A0690 08                         	dc.b	$08
000A0691 E607                       	smpsAlterVol        $07
000A0693 A5                         	dc.b	nC3
000A0694 E608                       	smpsAlterVol        $08
000A0696 A5                         	dc.b	nC3
000A0697 E6F1                       	smpsAlterVol        $F1
000A0699 01                         	dc.b	$01
000A069A E0C0                       	smpsPan             panCenter, $00
000A069C F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000A069F                            
000A069F                            ; DAC Data
000A069F                            GentleBreeze_DAC:
000A069F 81                         	dc.b	dKick
000A06A0                            
000A06A0                            GentleBreeze_Loop00:
000A06A0 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A06A6 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000A06AB 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A06B6                            
000A06B6                            GentleBreeze_Loop01:
000A06B6 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A06BC F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000A06C1 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A06CB                            
000A06CB                            GentleBreeze_Jump00:
000A06CB 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000A06CF                            
000A06CF                            GentleBreeze_Loop02:
000A06CF 81                         	dc.b	dKick
000A06D0                            
000A06D0                            GentleBreeze_Loop03:
000A06D0 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000A06DC 088A                       	dc.b	$08, dLowTimpani
000A06DE F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000A06E3 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000A06EF 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000A06F4 F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000A06F9                            
000A06F9                            GentleBreeze_Loop04:
000A06F9 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A06FF F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000A0704 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A070F                            
000A070F                            GentleBreeze_Loop05:
000A070F 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A0715 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000A071A 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A0724 F6FF A5                    	smpsJump            GentleBreeze_Jump00
000A0727                            
000A0727                            ; PSG 1 Data
000A0727                            GentleBreeze_PSG1:
000A0727 80                         	dc.b	nRst
000A0728                            
000A0728                            GentleBreeze_LoopPSG02:
000A0728 7F                         	dc.b	$7F
000A0729 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000A072E 08                         	dc.b	$08
000A072F EC04                       	smpsPSGAlterVol     $04
000A0731                            
000A0731                            GentleBreeze_JumpPSG01:
000A0731 A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000A073D A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000A0745                            
000A0745                            GentleBreeze_LoopPSG03:
000A0745 7F                         	dc.b	$7F
000A0746 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000A074B 08A3 01                    	dc.b	$08, nBb2, $01
000A074E F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000A0751                            
000A0751                            ; PSG2 Data
000A0751                            GentleBreeze_PSG2:
000A0751 80                         	dc.b	nRst
000A0752                            
000A0752                            GentleBreeze_LoopPSG00:
000A0752 7F                         	dc.b	$7F
000A0753 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000A0758 08                         	dc.b	$08
000A0759 EC04                       	smpsPSGAlterVol     $04
000A075B                            
000A075B                            GentleBreeze_JumpPSG00:
000A075B A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000A0767 A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000A076F                            
000A076F                            GentleBreeze_LoopPSG01:
000A076F 7F                         	dc.b	$7F
000A0770 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000A0775 08A8 01                    	dc.b	$08, nEb3, $01
000A0778 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000A077B                            
000A077B                            GentleBreeze_Voices:
000A077B                            ;	Voice $00
000A077B                            ;	$0C
000A077B                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000A077B                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000A077B                            	smpsVcAlgorithm     $04
000A077B                            	smpsVcFeedback      $01
000A077B                            	smpsVcUnusedBits    $00
000A077B                            	smpsVcDetune        $07, $02, $07, $02
000A077B                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000A077B                            	smpsVcRateScale     $00, $00, $00, $00
000A077B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A077B                            	smpsVcAmpMod        $00, $00, $00, $00
000A077B                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000A077B                            	smpsVcDecayRate2    $01, $00, $00, $00
000A077B                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000A077B                            	smpsVcReleaseRate   $09, $01, $04, $03
000A077B 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000A0794                            
000A0794                            ;	Voice $01
000A0794                            ;	$38
000A0794                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000A0794                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000A0794                            	smpsVcAlgorithm     $00
000A0794                            	smpsVcFeedback      $07
000A0794                            	smpsVcUnusedBits    $00
000A0794                            	smpsVcDetune        $03, $07, $01, $05
000A0794                            	smpsVcCoarseFreq    $00, $00, $07, $04
000A0794                            	smpsVcRateScale     $00, $02, $00, $02
000A0794                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A0794                            	smpsVcAmpMod        $00, $00, $00, $00
000A0794                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000A0794                            	smpsVcDecayRate2    $00, $00, $10, $00
000A0794                            	smpsVcDecayLevel    $00, $00, $00, $00
000A0794                            	smpsVcReleaseRate   $08, $05, $05, $05
000A0794 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000A07AD                            
000A07AD                            ;	Voice $02
000A07AD                            ;	$00
000A07AD                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A07AD                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A07AD                            	smpsVcAlgorithm     $00
000A07AD                            	smpsVcFeedback      $00
000A07AD                            	smpsVcUnusedBits    $00
000A07AD                            	smpsVcDetune        $00, $00, $00, $00
000A07AD                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A07AD                            	smpsVcRateScale     $00, $00, $00, $00
000A07AD                            	smpsVcAttackRate    $00, $00, $00, $00
000A07AD                            	smpsVcAmpMod        $00, $00, $00, $00
000A07AD                            	smpsVcDecayRate1    $00, $00, $00, $00
000A07AD                            	smpsVcDecayRate2    $00, $00, $00, $00
000A07AD                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A07AD                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A07AD 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A07C6                            
000A07C6                            ;	Voice $03
000A07C6                            ;	$36
000A07C6                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000A07C6                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000A07C6                            	smpsVcAlgorithm     $06
000A07C6                            	smpsVcFeedback      $06
000A07C6                            	smpsVcUnusedBits    $00
000A07C6                            	smpsVcDetune        $00, $00, $00, $00
000A07C6                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000A07C6                            	smpsVcRateScale     $00, $00, $00, $00
000A07C6                            	smpsVcAttackRate    $1F, $00, $18, $16
000A07C6                            	smpsVcAmpMod        $00, $00, $00, $00
000A07C6                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000A07C6                            	smpsVcDecayRate2    $00, $00, $12, $00
000A07C6                            	smpsVcDecayLevel    $04, $04, $02, $00
000A07C6                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000A07C6 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000A07DF                            
000A07DF                            ;	Voice $04
000A07DF                            ;	$07
000A07DF                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000A07DF                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000A07DF                            	smpsVcAlgorithm     $07
000A07DF                            	smpsVcFeedback      $00
000A07DF                            	smpsVcUnusedBits    $00
000A07DF                            	smpsVcDetune        $07, $06, $05, $00
000A07DF                            	smpsVcCoarseFreq    $05, $04, $03, $05
000A07DF                            	smpsVcRateScale     $00, $01, $01, $01
000A07DF                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000A07DF                            	smpsVcAmpMod        $00, $00, $00, $00
000A07DF                            	smpsVcDecayRate1    $17, $17, $17, $17
000A07DF                            	smpsVcDecayRate2    $00, $00, $00, $00
000A07DF                            	smpsVcDecayLevel    $02, $02, $02, $02
000A07DF                            	smpsVcReleaseRate   $06, $06, $06, $06
000A07DF 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000A07F8                            
000A07F8                            ;	Voice $05
000A07F8                            ;	$3C
000A07F8                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000A07F8                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000A07F8                            	smpsVcAlgorithm     $04
000A07F8                            	smpsVcFeedback      $07
000A07F8                            	smpsVcUnusedBits    $00
000A07F8                            	smpsVcDetune        $06, $06, $02, $02
000A07F8                            	smpsVcCoarseFreq    $01, $03, $01, $01
000A07F8                            	smpsVcRateScale     $00, $00, $00, $00
000A07F8                            	smpsVcAttackRate    $0E, $14, $10, $13
000A07F8                            	smpsVcAmpMod        $00, $00, $00, $00
000A07F8                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000A07F8                            	smpsVcDecayRate2    $04, $04, $04, $04
000A07F8                            	smpsVcDecayLevel    $02, $01, $01, $01
000A07F8                            	smpsVcReleaseRate   $07, $07, $07, $07
000A07F8 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000A0811                            
000A0811                            
000A0812 00                         		even
000A0812                            ; ---------------------------------------------------------------------------
000A0812                            ; Sound	effect pointers
000A0812                            ; ---------------------------------------------------------------------------
000A0812 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000A081E 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000A082A 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000A0836 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000A0842 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000A084E 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000A085A 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000A0866 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000A0872 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000A087E 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000A088A 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000A0896 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000A08A2 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000A08AE 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000A08BA 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000A08C6 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000A08D2 0000 0000                  SoundD0Index:	dc.l SoundD0
000A08D6                            SoundA0:	incbin	sound\soundA0.bin
000A08EC                            		even
000A08EC                            SoundA1:	incbin	sound\soundA1.bin
000A0916                            		even
000A0916                            SoundA2:	incbin	sound\soundA2.bin
000A0936                            		even
000A0936                            SoundA3:	incbin	sound\soundA3.bin
000A0968                            		even
000A0968                            SoundA4:	incbin	sound\soundA4.bin
000A099E                            		even
000A099E                            SoundA5:	include	sound\fart.asm
000A099E                            Fart_Header:
000A099E =00000001                  smpsHeaderStartSong = 1
000A099E 0000                       	smpsHeaderVoice     Fart_Voices
000A09A0 01                         	smpsHeaderTempoSFX  $01
000A09A1 04                         	smpsHeaderChanSFX   $04
000A09A2                            
000A09BA                            
000A09BA                            Fart_FM3:
000A09BC E607                       	smpsAlterVol        $07
000A09BE E0C0                       	smpsPan             panCenter, $00
000A09C0 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A09C5 A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000A09C8 E1FE                       	smpsAlterNote       $FE
000A09CA A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000A09CD E100                       	smpsAlterNote       $00
000A09CF A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000A09D4 F2                         	smpsStop
000A09D5                            
000A09D5                            ; FM4 Data
000A09D5                            Fart_FM4:
000A09D7 E0C0                       	smpsPan             panCenter, $00
000A09D9 8006                       	dc.b	nRst, $06
000A09DD E616                       	smpsAlterVol        $16
000A09DF E080                       	smpsPan             panLeft, $00
000A09E1 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A09E6 A212                       	dc.b	nA2, $12
000A09E8 E60A                       	smpsAlterVol        $0A
000A09EA E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A09ED E603                       	smpsAlterVol        $03
000A09EF E7A2                       	dc.b	smpsNoAttack, nA2
000A09F1 E603                       	smpsAlterVol        $03
000A09F3 E7A2                       	dc.b	smpsNoAttack, nA2
000A09F5 E604                       	smpsAlterVol        $04
000A09F7 E7A2                       	dc.b	smpsNoAttack, nA2
000A09F9 E606                       	smpsAlterVol        $06
000A09FB E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000A09FE E610                       	smpsAlterVol        $10
000A0A00 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A0A03 E610                       	smpsAlterVol        $10
000A0A05 E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000A0A0A F2                         	smpsStop
000A0A0B                            
000A0A0B                            ; FM5 Data
000A0A0B                            Fart_FM5:
000A0A0D E0C0                       	smpsPan             panCenter, $00
000A0A0F 8009                       	dc.b	nRst, $09
000A0A13 E616                       	smpsAlterVol        $16
000A0A15 E040                       	smpsPan             panRight, $00
000A0A17 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A0A1C A215                       	dc.b	nA2, $15
000A0A1E E60A                       	smpsAlterVol        $0A
000A0A20 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A0A23 E603                       	smpsAlterVol        $03
000A0A25 E7A2                       	dc.b	smpsNoAttack, nA2
000A0A27 E603                       	smpsAlterVol        $03
000A0A29 E7A2                       	dc.b	smpsNoAttack, nA2
000A0A2B E604                       	smpsAlterVol        $04
000A0A2D E7A2                       	dc.b	smpsNoAttack, nA2
000A0A2F E606                       	smpsAlterVol        $06
000A0A31 E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000A0A34 E610                       	smpsAlterVol        $10
000A0A36 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A0A39 E610                       	smpsAlterVol        $10
000A0A3B E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000A0A40 F2                         	smpsStop
000A0A41                            
000A0A41                            ; PSG3 Data
000A0A41                            Fart_PSG3:
000A0A41 F2                         	smpsStop
000A0A42                            
000A0A42                            ; FM Voices
000A0A42                            Fart_Voices:
000A0A42                            ;	Voice $00
000A0A42                            ;	$39
000A0A42                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000A0A42                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000A0A42                            	smpsVcAlgorithm     $01
000A0A42                            	smpsVcFeedback      $07
000A0A42                            	smpsVcUnusedBits    $00
000A0A42                            	smpsVcDetune        $00, $07, $03, $07
000A0A42                            	smpsVcCoarseFreq    $01, $01, $02, $00
000A0A42                            	smpsVcRateScale     $00, $03, $03, $03
000A0A42                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A0A42                            	smpsVcAmpMod        $00, $00, $00, $00
000A0A42                            	smpsVcDecayRate1    $00, $00, $00, $04
000A0A42                            	smpsVcDecayRate2    $00, $00, $16, $1F
000A0A42                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000A0A42                            	smpsVcReleaseRate   $0A, $09, $00, $00
000A0A42 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000A0A5B                            
000A0A5B                            ;	Voice $01
000A0A5B                            ;	$00
000A0A5B                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A0A5B                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A0A5B                            	smpsVcAlgorithm     $00
000A0A5B                            	smpsVcFeedback      $00
000A0A5B                            	smpsVcUnusedBits    $00
000A0A5B                            	smpsVcDetune        $00, $00, $00, $00
000A0A5B                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A0A5B                            	smpsVcRateScale     $00, $00, $00, $00
000A0A5B                            	smpsVcAttackRate    $00, $00, $00, $00
000A0A5B                            	smpsVcAmpMod        $00, $00, $00, $00
000A0A5B                            	smpsVcDecayRate1    $00, $00, $00, $00
000A0A5B                            	smpsVcDecayRate2    $00, $00, $00, $00
000A0A5B                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A0A5B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A0A5B 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A0A5B 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A0A74                            		even
000A0A74                            SoundA6:	incbin	sound\soundA6.bin
000A0AA4                            		even
000A0AA4                            SoundA7:	incbin	sound\soundA7.bin
000A0AD4                            		even
000A0AD4                            SoundA8:	incbin	sound\soundA8.bin
000A0B08                            		even
000A0B08                            SoundA9:	incbin	sound\soundA9.bin
000A0B1A                            		even
000A0B1A                            SoundAA:	incbin	sound\soundAA.bin
000A0B5C                            		even
000A0B5C                            SoundAB:	incbin	sound\soundAB.bin
000A0B7C                            		even
000A0B7C                            SoundAC:	incbin	sound\soundAC.bin
000A0BB0                            		even
000A0BB0                            SoundAD:	incbin	sound\soundAD.bin
000A0BE6                            		even
000A0BE6                            SoundAE:	incbin	sound\soundAE.bin
000A0C30                            		even
000A0C30                            SoundAF:	incbin	sound\soundAF.bin
000A0C5E                            		even
000A0C5E                            SoundB0:	incbin	sound\soundB0.bin
000A0C90                            		even
000A0C90                            SoundB1:	incbin	sound\soundB1.bin
000A0CBC                            		even
000A0CBC                            SoundB2:	incbin	sound\soundB2.bin
000A0D0C                            		even
000A0D0C                            SoundB3:	incbin	sound\soundB3.bin
000A0D56                            		even
000A0D56                            SoundB4:	include	sound\soundB4.asm
000A0D56                            SndB4_Bumper_Header:
000A0D56 =00000001                  smpsHeaderStartSong = 1
000A0D56 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000A0D58 01                         	smpsHeaderTempoSFX  $01
000A0D59 03                         	smpsHeaderChanSFX   $03
000A0D5A                            
000A0D6C                            
000A0D6C                            ; FM5 Data
000A0D6C                            SndB4_Bumper_FM5:
000A0D6E F600 00                    	smpsJump            SndB4_Bumper_Jump00
000A0D71                            
000A0D71                            ; FM4 Data
000A0D71                            SndB4_Bumper_FM4:
000A0D71 F2                         	smpsStop
000A0D72                            
000A0D72                            SndB4_Bumper_Jump00:
000A0D72 A020                       	dc.b	nG2, $20
000A0D74 F2                         	smpsStop
000A0D75                            
000A0D75                            ; FM3 Data
000A0D75                            SndB4_Bumper_FM3:
000A0D75 F2                         	smpsStop
000A0D76                            
000A0D76                            SndB4_Bumper_Voices:
000A0D76                            ;	Voice $00
000A0D76                            ;	$32
000A0D76                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000A0D76                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000A0D76                            	smpsVcAlgorithm     $02
000A0D76                            	smpsVcFeedback      $06
000A0D76                            	smpsVcUnusedBits    $00
000A0D76                            	smpsVcDetune        $07, $07, $02, $00
000A0D76                            	smpsVcCoarseFreq    $00, $00, $00, $04
000A0D76                            	smpsVcRateScale     $00, $00, $00, $00
000A0D76                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A0D76                            	smpsVcAmpMod        $00, $00, $00, $00
000A0D76                            	smpsVcDecayRate1    $08, $00, $00, $09
000A0D76                            	smpsVcDecayRate2    $0B, $00, $00, $09
000A0D76                            	smpsVcDecayLevel    $00, $00, $00, $00
000A0D76                            	smpsVcReleaseRate   $0F, $00, $00, $00
000A0D76 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A0D76 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A0D90 00                         		even
000A0D90                            SoundB5:	incbin	sound\soundB5.bin
000A0DAE 00                         		even
000A0DAE                            SoundB6:	incbin	sound\soundB6.bin
000A0DCC                            		even
000A0DCC                            SoundB7:	incbin	sound\soundB7.bin
000A0E08                            		even
000A0E08                            SoundB8:	incbin	sound\soundB8.bin
000A0E26                            		even
000A0E26                            SoundB9:	incbin	sound\soundB9.bin
000A0E8A                            		even
000A0E8A                            SoundBA:	incbin	sound\soundBA.bin
000A0EB2                            		even
000A0EB2                            SoundBB:	incbin	sound\soundBB.bin
000A0EDE                            		even
000A0EDE                            SoundBC:	incbin	sound\soundBC.bin
000A0F20                            		even
000A0F20                            SoundBD:	incbin	sound\soundBD.bin
000A0F74                            		even
000A0F74                            SoundBE:	incbin	sound\soundBE.bin
000A0FAE                            		even
000A0FAE                            SoundBF:	incbin	sound\soundBF.bin
000A1020                            		even
000A1020                            SoundC0:	incbin	sound\soundC0.bin
000A104E                            		even
000A104E                            SoundC1:	incbin	sound\soundC1.bin
000A10A8                            		even
000A10A8                            SoundC2:	incbin	sound\soundC2.bin
000A10D2                            		even
000A10D2                            SoundC3:	incbin	sound\soundC3.bin
000A114C                            		even
000A114C                            SoundC4:	incbin	sound\soundC4.bin
000A124A                            		even
000A124A                            SoundC5:	incbin	sound\soundC5.bin
000A12B2                            		even
000A12B2                            SoundC6:	incbin	sound\soundC6.bin
000A12F4                            		even
000A12F4                            SoundC7:	incbin	sound\soundC7.bin
000A1322                            		even
000A1322                            SoundC8:	incbin	sound\soundC8.bin
000A1334                            		even
000A1334                            SoundC9:	incbin	sound\soundC9.bin
000A1362                            		even
000A1362                            SoundCA:	incbin	sound\soundCA.bin
000A1390                            		even
000A1390                            SoundCB:	incbin	sound\soundCB.bin
000A13DC                            		even
000A13DC                            SoundCC:	incbin	sound\C9.ssf
000A140A                            		even
000A140A                            SoundCD:	incbin	sound\soundCD.bin
000A1436                            		even
000A1436                            SoundCE:	incbin	sound\soundCE.bin
000A1454 00                         		even
000A1454                            SoundCF:	incbin	sound\soundCF.bin
000A148C                            		even
000A148C                            SoundD0:	incbin	sound\soundD0.bin
000A14C6                            		even
000A14C6                            SegaPCM:	incbin	sound\segapcm.bin
000BB61C                            SegaPCM_end:	even
000BB61C                            
000BB61C                            IdiotPCM:	incbin	sound\youare.bin
000C56EE 00                         IdiotPCM_end:	even
000C56EE                            
000C56EE                            Minecraft:	include	minecraft\code\main.asm
000C56EE                            ; Minecraft: Very Legacy Console Edition
000C56EE                            ; Main file
000C56EE                            
000C56EE                            	include	minecraft\code\variables.asm
000C56EE                            ; Minecraft: Very Legacy Console Edition
000C56EE                            ; Variable Definitions
000C56EE                            
000C56EE =00000040                  MAP_HEIGHT	equ	64
000C56EE =00000100                  MAP_WIDTH	equ	256
000C56EE                            
000C56EE                            		rsset	$FF0000
000C56EE =00FF0000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000C56EE =00FF4000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000C56EE                            
000C56EE                            		rsset	$FFFF8000
000C56EE =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000C56EE                            
000C56EE =FFFF8E80                  camXPosFG	rs.w	1			; camera foreground layout x position
000C56EE =FFFF8E82                  camYposFG	rs.w	1			; camera foreground layout y position
000C56EE =FFFF8E84                  camXPosBG	rs.w	1			; camera background layout x position
000C56EE =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000C56EE =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000C56EE                            
000C56EE                            MC_Init:
000C56EE 007C 0700                  		ori	#$700,sr		; disables CPU interrupts
000C56F2 4DF9 00C0 0004             		lea	($C00004).l,a6	;	; load the address of the VDP control port into a6
000C56F8                            
000C56F8 3CBC 8134                  		move.w	#$8134,(a6)		; disable display
000C56FC 6100 0000                  		bsr.w	MC_ClearScreen		; clear VRAM, CRAM, and VSRAM
000C5700 6100 0000                  		bsr.w	MC_LoadPalette		; load in the palette
000C5704 3CBC 8174                  		move.w	#$8174,(a6)		; enable display
000C5708                            
000C5708                            
000C5708                            
000C5708 6000 FFFE                  		bra.w	*			; spin infinitely
000C570C                            
000C570C                            ; ===========================================================================
000C570C                            ; ---------------------------------------------------------------------------
000C570C                            ; Clear The Screen
000C570C                            ; ---------------------------------------------------------------------------
000C570C                            MC_ClearScreen:
000C570C 3CBC 8F01                  		move.w	#$8F01,(a6)		; set auto-incremement size to byte
000C5710                            
000C5710 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)		; clear the VRAM
000C5716 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C571A 2CBC 4000 0080             		move.l	#$40000080,(a6)		; ^
000C5720 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C5726                            
000C5726 44D6                       .waitVRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C5728 69FC                       		bvs.s	.waitVRAMClr		; if so, loop until DMA is complete
000C572A                            
000C572A 2CBC 9400 937F             		move.l	#$9400937F,(a6)		; clear the CRAM
000C5730 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C5734 2CBC C000 0080             		move.l	#$C0000080,(a6)		; ^
000C573A 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C5740                            
000C5740 44D6                       .waitCRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C5742 69FC                       		bvs.s	.waitCRAMClr		; if so, loop until DMA is complete
000C5744                            
000C5744 2CBC 9400 935F             		move.l	#$9400935F,(a6)		; clear the VSRAM
000C574A 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C574E 2CBC 4000 0090             		move.l	#$40000090,(a6)		; ^
000C5754 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C575A                            
000C575A 44D6                       .waitVSRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C575C 69FC                       		bvs.s	.waitVSRAMClr		; if so, loop until DMA is complete
000C575E                            
000C575E 3CBC 8F02                  		move.w	#$8F02,(a6)		; set auto-incremement size to word
000C5762 4E75                       		rts				; return
000C5764                            ; ---------------------------------------------------------------------------
000C5764                            
000C5764                            ; ===========================================================================
000C5764                            ; ---------------------------------------------------------------------------
000C5764                            ; Load The Palette
000C5764                            ; ---------------------------------------------------------------------------
000C5764                            MC_LoadPalette:
000C5764 44D6                       		move.w	(a6),ccr		; is v-blank active?
000C5766 6AFC                       		bpl.s	MC_LoadPalette		; if not, wait for it to start
000C5768                            
000C5768                            .updatePalette:
000C5768 2CBC 9400 9340             		move.l	#$94009340,(a6)		; set the DMA transfer size (64 colors)
000C576E                            		
000C576E 4BFA 0000                  		lea	MC_Palette(pc),a5	; load the base address of the palette data (pc relative)
000C5772 200D                       		move.l	a5,d0			; move the address to a data register so we can modify it
000C5774 E288                       		lsr.l	#1,d0			; divide by two
000C5776                            
000C5776 323C 9500                  		move.w	#$9500,d1		; set the low byte of the transfer source address
000C577A 1200                       		move.b	d0,d1			; ^
000C577C 3C81                       		move.w	d1,(a6)			; ^
000C577E                            
000C577E E088                       		lsr.l	#8,d0			; set the middle byte of the transfer source address
000C5780 323C 9600                  		move.w	#$9600,d1		; ^
000C5784 1200                       		move.b	d0,d1			; ^
000C5786 3C81                       		move.w	d1,(a6)			; ^
000C5788                            
000C5788 E088                       		lsr.l	#8,d0			; set the high byte of the transfer source address
000C578A 323C 9700                  		move.w	#$9700,d1		; ^
000C578E 1200                       		move.b	d0,d1			; ^
000C5790 3C81                       		move.w	d1,(a6)			; ^
000C5792                            
000C5792 2CBC C000 0080             		move.l	#$C0000080,(a6)		; set the destination palette index and begin the transfer
000C5798                            
000C5798                            .waitForScan:
000C5798                            	;	move.w	(a6),ccr		; is v-blank still active?
000C5798                            	;	bmi.s	.waitForScan		; if so, wait for active scan before returning
000C5798 4E75                       		rts				; return
000C579A                            ; ---------------------------------------------------------------------------
000C579A                            
000C579A                            MC_Palette:
000C579A 0E86 08AE 068E 046C 0246+  	dc.w	$E86, $8AE, $68E, $46C, $246, $024, $CC0, $AA0, $C46, $824, $EEE, $444, $222, $000, $000, $000
000C57BA 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4EE, $6AE, $48C, $26A, $048, $026, $4E6, $2C4, $080
000C57DA 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C57FA 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C57FA 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C581A                            ; end of 'ROM'
000C581A                            EndOfRom:
000C581A                            
000C581A                            
