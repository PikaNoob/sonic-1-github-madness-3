00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2943 4144 4520 4341+  Date:		dc.b '(C)CADE CADE C  ' ; Release date
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 001C                  		andi.w	#$1C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4E75                       		rts	
000003B8                            ; ===========================================================================
000003B8                            
000003B8                            CheckSumError:
000003B8 6100 0000                  		bsr.w	VDPSetupGame
000003BC 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003C6 7E3F                       		moveq	#$3F,d7
000003C8                            
000003C8                            CheckSum_Red:
000003C8 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D0 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D4                            
000003D4                            CheckSum_Loop:
000003D4 60FE                       		bra.s	CheckSum_Loop
000003D6                            ; ===========================================================================
000003D6                            
000003D6                            BusError:
000003D6 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003DC 6000                       		bra.s	loc_43A
000003DE                            ; ===========================================================================
000003DE                            
000003DE                            AddressError:
000003DE 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E4 6000                       		bra.s	loc_43A
000003E6                            ; ===========================================================================
000003E6                            
000003E6                            IllegalInstr:
000003E6 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003EC 54AF 0002                  		addq.l	#2,2(sp)
000003F0 6000                       		bra.s	loc_462
000003F2                            ; ===========================================================================
000003F2                            
000003F2                            ZeroDivide:
000003F2 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003F8 6000                       		bra.s	loc_462
000003FA                            ; ===========================================================================
000003FA                            
000003FA                            ChkInstr:
000003FA 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000400 6000                       		bra.s	loc_462
00000402                            ; ===========================================================================
00000402                            
00000402                            TrapvInstr:
00000402 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
00000408 6000                       		bra.s	loc_462
0000040A                            ; ===========================================================================
0000040A                            
0000040A                            PrivilegeViol:
0000040A 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000410 6000                       		bra.s	loc_462
00000412                            ; ===========================================================================
00000412                            
00000412                            Trace:
00000412 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
00000418 6000                       		bra.s	loc_462
0000041A                            ; ===========================================================================
0000041A                            
0000041A                            Line1010Emu:
0000041A 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000420 54AF 0002                  		addq.l	#2,2(sp)
00000424 6000                       		bra.s	loc_462
00000426                            ; ===========================================================================
00000426                            
00000426                            Line1111Emu:
00000426 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000042C 54AF 0002                  		addq.l	#2,2(sp)
00000430 6000                       		bra.s	loc_462
00000432                            ; ===========================================================================
00000432                            
00000432                            ErrorExcept:
00000432 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000438 6000                       		bra.s	loc_462
0000043A                            ; ===========================================================================
0000043A                            
0000043A                            loc_43A:
0000043A 46FC 2700                  		move	#$2700,sr
0000043E 544F                       		addq.w	#2,sp
00000440 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000444 544F                       		addq.w	#2,sp
00000446 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000044C 6100 0000                  		bsr.w	ShowErrorMsg
00000450 202F 0002                  		move.l	2(sp),d0
00000454 6100 0000                  		bsr.w	sub_5BA
00000458 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000045C 6100 0000                  		bsr.w	sub_5BA
00000460 6000                       		bra.s	loc_478
00000462                            ; ===========================================================================
00000462                            
00000462                            loc_462:
00000462 46FC 2700                  		move	#$2700,sr
00000466 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000046C 6100 0000                  		bsr.w	ShowErrorMsg
00000470 202F 0002                  		move.l	2(sp),d0
00000474 6100 0000                  		bsr.w	sub_5BA
00000478                            
00000478                            loc_478:
00000478 6100 0000                  		bsr.w	ErrorWaitForC
0000047C 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000482 46FC 2300                  		move	#$2300,sr
00000486 4E73                       		rte	
00000488                            
00000488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000488                            
00000488                            
00000488                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000488 4DF9 00C0 0000             		lea	($C00000).l,a6
0000048E 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000498 41F9 0000 0000             		lea	(Art_Text).l,a0
0000049E 323C 027F                  		move.w	#$27F,d1
000004A2                            
000004A2                            Error_LoadGfx:
000004A2 3C98                       		move.w	(a0)+,(a6)
000004A4 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004A8 7000                       		moveq	#0,d0		; clear	d0
000004AA 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004AE 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B2 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004B6 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C0 7212                       		moveq	#$12,d1		; number of characters
000004C2                            
000004C2                            Error_LoopChars:
000004C2 7000                       		moveq	#0,d0
000004C4 1018                       		move.b	(a0)+,d0
000004C6 0640 0790                  		addi.w	#$790,d0
000004CA 3C80                       		move.w	d0,(a6)
000004CC 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D0 4E75                       		rts	
000004D2                            ; End of function ShowErrorMsg
000004D2                            
000004D2                            ; ===========================================================================
000004D2 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004D6 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DA 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004DE 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E2 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004E6 0000                       		dc.w asc_5A6-ErrorText
000004E8 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FB 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000050E 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000521 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000534 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000547 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055A 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000056D 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000580 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000593 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005A6 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BA 00                         		even
000005BA                            
000005BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BA                            
000005BA                            
000005BA                            sub_5BA:				; XREF: loc_43A; loc_462
000005BA 3CBC 07CA                  		move.w	#$7CA,(a6)
000005BE 7407                       		moveq	#7,d2
000005C0                            
000005C0                            loc_5C0:
000005C0 E998                       		rol.l	#4,d0
000005C2 6100                       		bsr.s	sub_5CA
000005C4 51CA FFFA                  		dbf	d2,loc_5C0
000005C8 4E75                       		rts	
000005CA                            ; End of function sub_5BA
000005CA                            
000005CA                            
000005CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CA                            
000005CA                            
000005CA                            sub_5CA:				; XREF: sub_5BA
000005CA 3200                       		move.w	d0,d1
000005CC 0241 000F                  		andi.w	#$F,d1
000005D0 0C41 000A                  		cmpi.w	#$A,d1
000005D4 6500                       		bcs.s	loc_5D8
000005D6 5E41                       		addq.w	#7,d1
000005D8                            
000005D8                            loc_5D8:
000005D8 0641 07C0                  		addi.w	#$7C0,d1
000005DC 3C81                       		move.w	d1,(a6)
000005DE 4E75                       		rts	
000005E0                            ; End of function sub_5CA
000005E0                            
000005E0                            
000005E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E0                            
000005E0                            
000005E0                            ErrorWaitForC:				; XREF: loc_478
000005E0 6100 0000                  		bsr.w	ReadJoypads
000005E4 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EA 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005EE 4E75                       		rts	
000005F0                            ; End of function ErrorWaitForC
000005F0                            
000005F0                            ; ===========================================================================
000005F0                            
000005F0                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D30                            Art_Text_end:		even
00000D30                            
00000D30                            ; ===========================================================================
00000D30                            ;VBlank
00000D30                            loc_B10:				; XREF: Vectors
00000D30 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D34 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D38 6700                       		beq.s	loc_B88
00000D3A 3039 00C0 0004             		move.w	($C00004).l,d0
00000D40 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D4A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D52 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D58 6700                       		beq.s	loc_B42
00000D5A 303C 0700                  		move.w	#$700,d0
00000D5E                            
00000D5E                            loc_B3E:
00000D5E 51C8 FFFE                  		dbf	d0,loc_B3E
00000D62                            
00000D62                            loc_B42:
00000D62 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D66 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D6C 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D72 0240 003E                  		andi.w	#$3E,d0
00000D76 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D7A 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D7E                            
00000D7E                            loc_B5E:				; XREF: loc_B88
00000D7E 4EB9 0000 0000             		jsr	sub_71B4C
00000D84                            
00000D84                            loc_B64:				; XREF: loc_D50
00000D84 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D88 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D8C 4E73                       		rte	
00000D8E                            ; ===========================================================================
00000D8E 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D92 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D96 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D9A 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000D9E 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DA2 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DA6 0000                       		dc.w loc_E72-off_B6E
00000DA8                            ; ===========================================================================
00000DA8                            
00000DA8                            loc_B88:				; XREF: loc_B10; off_B6E
00000DA8 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DAE 6700                       		beq.s	loc_B9A
00000DB0 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DB6 6600 FFC6                  		bne.w	loc_B5E
00000DBA                            
00000DBA                            loc_B9A:
00000DBA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DC0 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DC4 3039 00C0 0004             		move.w	($C00004).l,d0
00000DCA 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DD0 6700                       		beq.s	loc_BBA
00000DD2 303C 0700                  		move.w	#$700,d0
00000DD6                            
00000DD6                            loc_BB6:
00000DD6 51C8 FFFE                  		dbf	d0,loc_BB6
00000DDA                            
00000DDA                            loc_BBA:
00000DDA 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DE0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DE8                            
00000DE8                            loc_BC8:
00000DE8 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DF0 66F6                       		bne.s	loc_BC8
00000DF2 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DF6 6600                       		bne.s	loc_BFE
00000DF8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DFE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E04 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E0A 3ABC 977F                  		move.w	#$977F,(a5)
00000E0E 3ABC C000                  		move.w	#$C000,(a5)
00000E12 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E18 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E1C 6000                       		bra.s	loc_C22
00000E1E                            ; ===========================================================================
00000E1E                            
00000E1E                            loc_BFE:				; XREF: loc_BC8
00000E1E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E24 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E2A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E30 3ABC 977F                  		move.w	#$977F,(a5)
00000E34 3ABC C000                  		move.w	#$C000,(a5)
00000E38 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E3E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E42                            
00000E42                            loc_C22:				; XREF: loc_BC8
00000E42 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E46 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E4E 6000 FF2E                  		bra.w	loc_B5E
00000E52                            ; ===========================================================================
00000E52                            
00000E52                            loc_C32:				; XREF: off_B6E
00000E52 6100 0000                  		bsr.w	sub_106E
00000E56                            
00000E56                            loc_C36:				; XREF: off_B6E
00000E56 4A78 F614                  		tst.w	($FFFFF614).w
00000E5A 6700 0000                  		beq.w	locret_C42
00000E5E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E62                            
00000E62                            locret_C42:
00000E62 4E75                       		rts	
00000E64                            ; ===========================================================================
00000E64                            
00000E64                            loc_C44:				; XREF: off_B6E
00000E64 6100 0000                  		bsr.w	sub_106E
00000E68 6100 0000                  		bsr.w	sub_6886
00000E6C 6100 0000                  		bsr.w	sub_1642
00000E70 4A78 F614                  		tst.w	($FFFFF614).w
00000E74 6700 0000                  		beq.w	locret_C5C
00000E78 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E7C                            
00000E7C                            locret_C5C:
00000E7C 4E75                       		rts	
00000E7E                            ; ===========================================================================
00000E7E                            
00000E7E                            loc_C5E:				; XREF: off_B6E
00000E7E 6100 0000                  		bsr.w	sub_106E
00000E82 4E75                       		rts	
00000E84                            ; ===========================================================================
00000E84                            
00000E84                            loc_C64:				; XREF: off_B6E
00000E84 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E8A 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E8E                            
00000E8E                            loc_C6E:				; XREF: off_B6E
00000E8E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E96                            
00000E96                            loc_C76:
00000E96 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E9E 66F6                       		bne.s	loc_C76		; if not, branch
00000EA0 6100 0000                  		bsr.w	ReadJoypads
00000EA4 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EA8 6600                       		bne.s	loc_CB0
00000EAA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EB0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EB6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EBC 3ABC 977F                  		move.w	#$977F,(a5)
00000EC0 3ABC C000                  		move.w	#$C000,(a5)
00000EC4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ECA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ECE 6000                       		bra.s	loc_CD4
00000ED0                            ; ===========================================================================
00000ED0                            
00000ED0                            loc_CB0:				; XREF: loc_C76
00000ED0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ED6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EDC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EE2 3ABC 977F                  		move.w	#$977F,(a5)
00000EE6 3ABC C000                  		move.w	#$C000,(a5)
00000EEA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EF0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF4                            
00000EF4                            loc_CD4:				; XREF: loc_C76
00000EF4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EF8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EFE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F04 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F0A 3ABC 977F                  		move.w	#$977F,(a5)
00000F0E 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F12 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F18 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F1C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F22 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F28 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F2E 3ABC 977F                  		move.w	#$977F,(a5)
00000F32 3ABC 7800                  		move.w	#$7800,(a5)
00000F36 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F3C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F40 4A38 F767                  		tst.b	($FFFFF767).w
00000F44 6700                       		beq.s	loc_D50
00000F46 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F4C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F52 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F58 3ABC 977F                  		move.w	#$977F,(a5)
00000F5C 3ABC 7000                  		move.w	#$7000,(a5)
00000F60 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F66 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F6A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F70                            
00000F70                            loc_D50:
00000F70 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F78 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F7E 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F84 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F8A 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F90 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F96 6400                       		bcc.s	Demo_Time
00000F98 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000F9E 588F                       		addq.l	#4,sp
00000FA0 6000 FDE2                  		bra.w	loc_B64
00000FA4                            
00000FA4                            ; ---------------------------------------------------------------------------
00000FA4                            ; Subroutine to	run a demo for an amount of time
00000FA4                            ; ---------------------------------------------------------------------------
00000FA4                            
00000FA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FA4                            
00000FA4                            
00000FA4                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FA4 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FA8 4EB9 0000 0000             		jsr	AniArt_Load
00000FAE 4EB9 0000 0000             		jsr	HudUpdate
00000FB4 6100 0000                  		bsr.w	sub_165E
00000FB8 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FBC 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FC0 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FC4                            
00000FC4                            Demo_TimeEnd:
00000FC4 4E75                       		rts	
00000FC6                            ; End of function Demo_Time
00000FC6                            
00000FC6                            ; ===========================================================================
00000FC6                            
00000FC6                            loc_DA6:				; XREF: off_B6E
00000FC6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FCE                            
00000FCE                            loc_DAE:
00000FCE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FD6 66F6                       		bne.s	loc_DAE		; if not, branch
00000FD8 6100 0000                  		bsr.w	ReadJoypads
00000FDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FE8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FEE 3ABC 977F                  		move.w	#$977F,(a5)
00000FF2 3ABC C000                  		move.w	#$C000,(a5)
00000FF6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001000 4BF9 00C0 0004             		lea	($C00004).l,a5
00001006 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000100C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001012 3ABC 977F                  		move.w	#$977F,(a5)
00001016 3ABC 7800                  		move.w	#$7800,(a5)
0000101A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001020 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001024 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001030 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001036 3ABC 977F                  		move.w	#$977F,(a5)
0000103A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000103E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001044 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001048 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001050 6100 0000                  		bsr.w	PalCycle_SS
00001054 4A38 F767                  		tst.b	($FFFFF767).w
00001058 6700                       		beq.s	loc_E64
0000105A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001060 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001066 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000106C 3ABC 977F                  		move.w	#$977F,(a5)
00001070 3ABC 7000                  		move.w	#$7000,(a5)
00001074 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000107A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000107E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001084                            
00001084                            loc_E64:
00001084 4A78 F614                  		tst.w	($FFFFF614).w
00001088 6700 0000                  		beq.w	locret_E70
0000108C 5378 F614                  		subq.w	#1,($FFFFF614).w
00001090                            
00001090                            locret_E70:
00001090 4E75                       		rts	
00001092                            ; ===========================================================================
00001092                            
00001092                            loc_E72:				; XREF: off_B6E
00001092 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000109A                            
0000109A                            loc_E7A:
0000109A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010A2 66F6                       		bne.s	loc_E7A		; if not, branch
000010A4 6100 0000                  		bsr.w	ReadJoypads
000010A8 4A38 F64E                  		tst.b	($FFFFF64E).w
000010AC 6600                       		bne.s	loc_EB4
000010AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010C0 3ABC 977F                  		move.w	#$977F,(a5)
000010C4 3ABC C000                  		move.w	#$C000,(a5)
000010C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D2 6000                       		bra.s	loc_ED8
000010D4                            ; ===========================================================================
000010D4                            
000010D4                            loc_EB4:				; XREF: loc_E7A
000010D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010E0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010E6 3ABC 977F                  		move.w	#$977F,(a5)
000010EA 3ABC C000                  		move.w	#$C000,(a5)
000010EE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010F8                            
000010F8                            loc_ED8:				; XREF: loc_E7A
000010F8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000010FC 4BF9 00C0 0004             		lea	($C00004).l,a5
00001102 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001108 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000110E                            
0000110E                            loc_EEE:
0000110E 3ABC 977F                  		move.w	#$977F,(a5)
00001112 3ABC 7C00                  		move.w	#$7C00,(a5)
00001116 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000111C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001120 4BF9 00C0 0004             		lea	($C00004).l,a5
00001126 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000112C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001132 3ABC 977F                  		move.w	#$977F,(a5)
00001136 3ABC 7800                  		move.w	#$7800,(a5)
0000113A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001140 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001144 4A38 F767                  		tst.b	($FFFFF767).w
00001148 6700                       		beq.s	loc_F54
0000114A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001150 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001156 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000115C 3ABC 977F                  		move.w	#$977F,(a5)
00001160 3ABC 7000                  		move.w	#$7000,(a5)
00001164 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000116A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000116E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001174                            
00001174                            loc_F54:
00001174 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000117C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001182 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00001188 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
0000118E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001194 6100 0000                  		bsr.w	LoadTilesAsYouMove
00001198 4EB9 0000 0000             		jsr	AniArt_Load
0000119E 4EB9 0000 0000             		jsr	HudUpdate
000011A4 6100 0000                  		bsr.w	sub_1642
000011A8 4E75                       		rts	
000011AA                            ; ===========================================================================
000011AA                            
000011AA                            loc_F8A:				; XREF: off_B6E
000011AA 6100 0000                  		bsr.w	sub_106E
000011AE 5238 F628                  		addq.b	#1,($FFFFF628).w
000011B2 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011B8 4E75                       		rts	
000011BA                            ; ===========================================================================
000011BA                            
000011BA                            loc_F9A:				; XREF: off_B6E
000011BA 6100 0000                  		bsr.w	sub_106E
000011BE 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011C2 6000 0000                  		bra.w	sub_1642
000011C6                            ; ===========================================================================
000011C6                            
000011C6                            loc_FA6:				; XREF: off_B6E
000011C6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011CE                            
000011CE                            loc_FAE:
000011CE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011D6 66F6                       		bne.s	loc_FAE		; if not, branch
000011D8 6100 0000                  		bsr.w	ReadJoypads
000011DC 4BF9 00C0 0004             		lea	($C00004).l,a5
000011E2 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011E8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011EE 3ABC 977F                  		move.w	#$977F,(a5)
000011F2 3ABC C000                  		move.w	#$C000,(a5)
000011F6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000011FC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001200 4BF9 00C0 0004             		lea	($C00004).l,a5
00001206 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000120C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001212 3ABC 977F                  		move.w	#$977F,(a5)
00001216 3ABC 7800                  		move.w	#$7800,(a5)
0000121A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001220 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001224 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001230 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001236 3ABC 977F                  		move.w	#$977F,(a5)
0000123A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000123E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001244 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001248 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001250 4A38 F767                  		tst.b	($FFFFF767).w
00001254 6700                       		beq.s	loc_1060
00001256 4BF9 00C0 0004             		lea	($C00004).l,a5
0000125C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001262 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001268 3ABC 977F                  		move.w	#$977F,(a5)
0000126C 3ABC 7000                  		move.w	#$7000,(a5)
00001270 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001276 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000127A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001280                            
00001280                            loc_1060:
00001280 4A78 F614                  		tst.w	($FFFFF614).w
00001284 6700 0000                  		beq.w	locret_106C
00001288 5378 F614                  		subq.w	#1,($FFFFF614).w
0000128C                            
0000128C                            locret_106C:
0000128C 4E75                       		rts	
0000128E                            
0000128E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000128E                            
0000128E                            
0000128E                            sub_106E:				; XREF: loc_C32; et al
0000128E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001296                            
00001296                            loc_1076:
00001296 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
0000129E 66F6                       		bne.s	loc_1076	; if not, branch
000012A0 6100 0000                  		bsr.w	ReadJoypads
000012A4 4A38 F64E                  		tst.b	($FFFFF64E).w
000012A8 6600                       		bne.s	loc_10B0
000012AA 4BF9 00C0 0004             		lea	($C00004).l,a5
000012B0 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012B6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012BC 3ABC 977F                  		move.w	#$977F,(a5)
000012C0 3ABC C000                  		move.w	#$C000,(a5)
000012C4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012CA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012CE 6000                       		bra.s	loc_10D4
000012D0                            ; ===========================================================================
000012D0                            
000012D0                            loc_10B0:				; XREF: sub_106E
000012D0 4BF9 00C0 0004             		lea	($C00004).l,a5
000012D6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012DC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012E2 3ABC 977F                  		move.w	#$977F,(a5)
000012E6 3ABC C000                  		move.w	#$C000,(a5)
000012EA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012F0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012F4                            
000012F4                            loc_10D4:				; XREF: sub_106E
000012F4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012FA 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001300 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001306 3ABC 977F                  		move.w	#$977F,(a5)
0000130A 3ABC 7800                  		move.w	#$7800,(a5)
0000130E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001314 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001318 4BF9 00C0 0004             		lea	($C00004).l,a5
0000131E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001324 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000132A 3ABC 977F                  		move.w	#$977F,(a5)
0000132E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001332 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001338 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000133C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001344 4E75                       		rts	
00001346                            ; End of function sub_106E
00001346                            
00001346                            ; ---------------------------------------------------------------------------
00001346                            ; Subroutine to	move pallets from the RAM to CRAM
00001346                            ; ---------------------------------------------------------------------------
00001346                            
00001346                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001346                            
00001346                            
00001346                            PalToCRAM:
00001346 46FC 2700                  		move	#$2700,sr
0000134A 4A78 F644                  		tst.w	($FFFFF644).w
0000134E 6700                       		beq.s	locret_119C
00001350 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001356 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000135A 43F9 00C0 0000             		lea	($C00000).l,a1
00001360 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001364 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000136C 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000136E 2298                       		move.l	(a0)+,(a1)
00001370 2298                       		move.l	(a0)+,(a1)
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 2298                       		move.l	(a0)+,(a1)
00001380 2298                       		move.l	(a0)+,(a1)
00001382 2298                       		move.l	(a0)+,(a1)
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013B2 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013B6 4A38 F64F                  		tst.b	($FFFFF64F).w
000013BA 6600                       		bne.s	loc_119E
000013BC                            
000013BC                            locret_119C:
000013BC 4E73                       		rte	
000013BE                            ; ===========================================================================
000013BE                            
000013BE                            loc_119E:				; XREF: PalToCRAM
000013BE 4238 F64F                  		clr.b	($FFFFF64F).w
000013C2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013C6 6100 FBDC                  		bsr.w	Demo_Time
000013CA 4EB9 0000 0000             		jsr	sub_71B4C
000013D0 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013D4 4E73                       		rte	
000013D6                            ; End of function PalToCRAM
000013D6                            
000013D6                            ; ---------------------------------------------------------------------------
000013D6                            ; Subroutine to	initialise joypads
000013D6                            ; ---------------------------------------------------------------------------
000013D6                            
000013D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013D6                            
000013D6                            
000013D6                            JoypadInit:				; XREF: GameClrRAM
000013D6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013DE                            
000013DE                            Joypad_WaitZ80:
000013DE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013E6 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013E8 7040                       		moveq	#$40,d0
000013EA 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013F0 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013F6 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000013FC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001404 4E75                       		rts	
00001406                            ; End of function JoypadInit
00001406                            
00001406                            ; ---------------------------------------------------------------------------
00001406                            ; Subroutine to	read joypad input, and send it to the RAM
00001406                            ; ---------------------------------------------------------------------------
00001406                            
00001406                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001406                            
00001406                            
00001406                            ReadJoypads:
00001406 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
0000140A 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001410 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001412 5449                       		addq.w	#2,a1		; do the second	joypad
00001414                            
00001414                            Joypad_Read:
00001414 12BC 0000                  		move.b	#0,(a1)
00001418 4E71                       		nop	
0000141A 4E71                       		nop	
0000141C 1011                       		move.b	(a1),d0
0000141E E508                       		lsl.b	#2,d0
00001420 0200 00C0                  		andi.b	#$C0,d0
00001424 12BC 0040                  		move.b	#$40,(a1)
00001428 4E71                       		nop	
0000142A 4E71                       		nop	
0000142C 1211                       		move.b	(a1),d1
0000142E 0201 003F                  		andi.b	#$3F,d1
00001432 8001                       		or.b	d1,d0
00001434 4600                       		not.b	d0
00001436 1210                       		move.b	(a0),d1
00001438 B101                       		eor.b	d0,d1
0000143A 10C0                       		move.b	d0,(a0)+
0000143C C200                       		and.b	d0,d1
0000143E 10C1                       		move.b	d1,(a0)+
00001440 4E75                       		rts	
00001442                            ; End of function ReadJoypads
00001442                            
00001442                            
00001442                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001442                            
00001442                            
00001442                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001442 41F9 00C0 0004             		lea	($C00004).l,a0
00001448 43F9 00C0 0000             		lea	($C00000).l,a1
0000144E 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001454 7E12                       		moveq	#$12,d7
00001456                            
00001456                            VDP_Loop:
00001456 309A                       		move.w	(a2)+,(a0)
00001458 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000145C                            
0000145C 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001462 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001466 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000146C 7000                       		moveq	#0,d0
0000146E 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001478 3E3C 003F                  		move.w	#$3F,d7
0000147C                            
0000147C                            VDP_ClrCRAM:
0000147C 3280                       		move.w	d0,(a1)
0000147E 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001482                            
00001482 42B8 F616                  		clr.l	($FFFFF616).w
00001486 42B8 F61A                  		clr.l	($FFFFF61A).w
0000148A 2F01                       		move.l	d1,-(sp)
0000148C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001492 3ABC 8F01                  		move.w	#$8F01,(a5)
00001496 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000149C 3ABC 9780                  		move.w	#$9780,(a5)
000014A0 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014A6 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014AE                            
000014AE                            loc_128E:
000014AE 3215                       		move.w	(a5),d1
000014B0 0801 0001                  		btst	#1,d1
000014B4 66F8                       		bne.s	loc_128E
000014B6                            
000014B6 3ABC 8F02                  		move.w	#$8F02,(a5)
000014BA 221F                       		move.l	(sp)+,d1
000014BC 4E75                       		rts	
000014BE                            ; End of function VDPSetupGame
000014BE                            
000014BE                            ; ===========================================================================
000014BE 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014C6 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014CE 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014D6 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014DE 9001 9100 9200             		dc.w $9001, $9100, $9200
000014E4                            
000014E4                            ; ---------------------------------------------------------------------------
000014E4                            ; Subroutine to	clear the screen
000014E4                            ; ---------------------------------------------------------------------------
000014E4                            
000014E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E4                            
000014E4                            
000014E4                            ClearScreen:
000014E4 4BF9 00C0 0004             		lea	($C00004).l,a5
000014EA 3ABC 8F01                  		move.w	#$8F01,(a5)
000014EE 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014F4 3ABC 9780                  		move.w	#$9780,(a5)
000014F8 2ABC 4000 0083             		move.l	#$40000083,(a5)
000014FE 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001506                            
00001506                            loc_12E6:
00001506 3215                       		move.w	(a5),d1
00001508 0801 0001                  		btst	#1,d1
0000150C 66F8                       		bne.s	loc_12E6
0000150E                            
0000150E 3ABC 8F02                  		move.w	#$8F02,(a5)
00001512 4BF9 00C0 0004             		lea	($C00004).l,a5
00001518 3ABC 8F01                  		move.w	#$8F01,(a5)
0000151C 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001522 3ABC 9780                  		move.w	#$9780,(a5)
00001526 2ABC 6000 0083             		move.l	#$60000083,(a5)
0000152C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001534                            
00001534                            loc_1314:
00001534 3215                       		move.w	(a5),d1
00001536 0801 0001                  		btst	#1,d1
0000153A 66F8                       		bne.s	loc_1314
0000153C                            
0000153C 3ABC 8F02                  		move.w	#$8F02,(a5)
00001540 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001548 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001550 43F8 F800                  		lea	($FFFFF800).w,a1
00001554 7000                       		moveq	#0,d0
00001556 323C 00A0                  		move.w	#$A0,d1
0000155A                            
0000155A                            loc_133A:
0000155A 22C0                       		move.l	d0,(a1)+
0000155C 51C9 FFFC                  		dbf	d1,loc_133A
00001560                            
00001560 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001564 7000                       		moveq	#0,d0
00001566 323C 0100                  		move.w	#$100,d1
0000156A                            
0000156A                            loc_134A:
0000156A 22C0                       		move.l	d0,(a1)+
0000156C 51C9 FFFC                  		dbf	d1,loc_134A
00001570 4E75                       		rts	
00001572                            ; End of function ClearScreen
00001572                            
00001572                            ; ---------------------------------------------------------------------------
00001572                            ; Subroutine to	load the sound driver
00001572                            ; ---------------------------------------------------------------------------
00001572                            
00001572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001572                            
00001572                            
00001572                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001572 4E71                       		nop	
00001574 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000157C 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001584 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000158A 43F9 00A0 0000             		lea	($A00000).l,a1
00001590 6100 0000                  		bsr.w	KosDec		; decompress
00001594 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
0000159C 4E71                       		nop	
0000159E 4E71                       		nop	
000015A0 4E71                       		nop	
000015A2 4E71                       		nop	
000015A4 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015AC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015B4 4E75                       		rts	
000015B6                            ; End of function SoundDriverLoad
000015B6                            
000015B6                            ; ---------------------------------------------------------------------------
000015B6                            ; Subroutine to	play a sound or	music track
000015B6                            ; ---------------------------------------------------------------------------
000015B6                            
000015B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015B6                            
000015B6                            
000015B6                            PlaySound:
000015B6 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015BA 4E75                       		rts	
000015BC                            ; End of function PlaySound
000015BC                            
000015BC                            ; ---------------------------------------------------------------------------
000015BC                            ; Subroutine to	play a special sound/music (E0-E4)
000015BC                            ;
000015BC                            ; E0 - Fade out
000015BC                            ; E1 - Sega
000015BC                            ; E2 - Speed up
000015BC                            ; E3 - Normal speed
000015BC                            ; E4 - Stop
000015BC                            ; ---------------------------------------------------------------------------
000015BC                            
000015BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015BC                            
000015BC                            
000015BC                            PlaySound_Special:
000015BC 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015C0 4E75                       		rts	
000015C2                            ; End of function PlaySound_Special
000015C2                            
000015C2                            ; ===========================================================================
000015C2                            ; ---------------------------------------------------------------------------
000015C2                            ; Unused sound/music subroutine
000015C2                            ; ---------------------------------------------------------------------------
000015C2                            
000015C2                            PlaySound_Unk:
000015C2 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015C6 4E75                       		rts	
000015C8                            
000015C8                            ; ---------------------------------------------------------------------------
000015C8                            ; Subroutine to	pause the game
000015C8                            ; ---------------------------------------------------------------------------
000015C8                            
000015C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015C8                            
000015C8                            
000015C8                            PauseGame:				; XREF: Level_MainLoop; et al
000015C8 4E71                       		nop	
000015CA 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015CE 6700                       		beq.s	Unpause		; if not, branch
000015D0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015D4 6600                       		bne.s	loc_13BE	; if yes, branch
000015D6 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015DC 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015DE                            
000015DE                            loc_13BE:
000015DE 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015E4 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015EA                            
000015EA                            loc_13CA:
000015EA 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015F0 6100 0000                  		bsr.w	DelayProgram
000015F4 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015F8 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015FA 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001600 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001602 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001608 4E71                       		nop	
0000160A 6000                       		bra.s	loc_1404
0000160C                            ; ===========================================================================
0000160C                            
0000160C                            Pause_ChkBC:				; XREF: PauseGame
0000160C 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001612 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001614 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000161A 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000161C                            
0000161C                            Pause_ChkStart:				; XREF: PauseGame
0000161C 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001622 67C6                       		beq.s	loc_13CA	; if not, branch
00001624                            
00001624                            loc_1404:				; XREF: PauseGame
00001624 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000162A                            
0000162A                            Unpause:				; XREF: PauseGame
0000162A 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001630                            
00001630                            Pause_DoNothing:			; XREF: PauseGame
00001630 4E75                       		rts	
00001632                            ; ===========================================================================
00001632                            
00001632                            Pause_SlowMo:				; XREF: PauseGame
00001632 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001638 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000163E 4E75                       		rts	
00001640                            ; End of function PauseGame
00001640                            
00001640                            ; ---------------------------------------------------------------------------
00001640                            ; Subroutine to	display	patterns via the VDP
00001640                            ; ---------------------------------------------------------------------------
00001640                            
00001640                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001640                            
00001640                            
00001640                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001640 4DF9 00C0 0000             		lea	($C00000).l,a6
00001646 283C 0080 0000             		move.l	#$800000,d4
0000164C                            
0000164C                            loc_142C:
0000164C 2D40 0004                  		move.l	d0,4(a6)
00001650 3601                       		move.w	d1,d3
00001652                            
00001652                            loc_1432:
00001652 3C99                       		move.w	(a1)+,(a6)
00001654 51CB FFFC                  		dbf	d3,loc_1432
00001658 D084                       		add.l	d4,d0
0000165A 51CA FFF0                  		dbf	d2,loc_142C
0000165E 4E75                       		rts	
00001660                            ; End of function ShowVDPGraphics
00001660                            
00001660                            ; ---------------------------------------------------------------------------
00001660                            ; Nemesis decompression	algorithm
00001660                            ; ---------------------------------------------------------------------------
00001660                            
00001660                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001660                            
00001660                            
00001660                            NemDec:
00001660 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001664 47F9 0000 0000             		lea	(loc_1502).l,a3
0000166A 49F9 00C0 0000             		lea	($C00000).l,a4
00001670 6000                       		bra.s	loc_145C
00001672                            ; ===========================================================================
00001672 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001676 47F9 0000 0000             		lea	(loc_1518).l,a3
0000167C                            
0000167C                            loc_145C:				; XREF: NemDec
0000167C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001680 3418                       		move.w	(a0)+,d2
00001682 E34A                       		lsl.w	#1,d2
00001684 6400                       		bcc.s	loc_146A
00001686 D6FC 000A                  		adda.w	#$A,a3
0000168A                            
0000168A                            loc_146A:
0000168A E54A                       		lsl.w	#2,d2
0000168C 3A42                       		movea.w	d2,a5
0000168E 7608                       		moveq	#8,d3
00001690 7400                       		moveq	#0,d2
00001692 7800                       		moveq	#0,d4
00001694 6100 0000                  		bsr.w	NemDec4
00001698 1A18                       		move.b	(a0)+,d5
0000169A E145                       		asl.w	#8,d5
0000169C 1A18                       		move.b	(a0)+,d5
0000169E 3C3C 0010                  		move.w	#$10,d6
000016A2 6100                       		bsr.s	NemDec2
000016A4 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016A8 4E75                       		rts	
000016AA                            ; End of function NemDec
000016AA                            
000016AA                            
000016AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AA                            
000016AA                            
000016AA                            NemDec2:				; XREF: NemDec
000016AA 3E06                       		move.w	d6,d7
000016AC 5147                       		subq.w	#8,d7
000016AE 3205                       		move.w	d5,d1
000016B0 EE69                       		lsr.w	d7,d1
000016B2 0C01 00FC                  		cmpi.b	#-4,d1
000016B6 6400                       		bcc.s	loc_14D6
000016B8 0241 00FF                  		andi.w	#$FF,d1
000016BC D241                       		add.w	d1,d1
000016BE 1031 1000                  		move.b	(a1,d1.w),d0
000016C2 4880                       		ext.w	d0
000016C4 9C40                       		sub.w	d0,d6
000016C6 0C46 0009                  		cmpi.w	#9,d6
000016CA 6400                       		bcc.s	loc_14B2
000016CC 5046                       		addq.w	#8,d6
000016CE E145                       		asl.w	#8,d5
000016D0 1A18                       		move.b	(a0)+,d5
000016D2                            
000016D2                            loc_14B2:
000016D2 1231 1001                  		move.b	1(a1,d1.w),d1
000016D6 3001                       		move.w	d1,d0
000016D8 0241 000F                  		andi.w	#$F,d1
000016DC 0240 00F0                  		andi.w	#$F0,d0
000016E0                            
000016E0                            loc_14C0:				; XREF: NemDec3
000016E0 E848                       		lsr.w	#4,d0
000016E2                            
000016E2                            loc_14C2:				; XREF: NemDec3
000016E2 E98C                       		lsl.l	#4,d4
000016E4 8801                       		or.b	d1,d4
000016E6 5343                       		subq.w	#1,d3
000016E8 6600                       		bne.s	loc_14D0
000016EA 4ED3                       		jmp	(a3)
000016EC                            ; End of function NemDec2
000016EC                            
000016EC                            
000016EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EC                            
000016EC                            
000016EC                            NemDec3:				; XREF: loc_1502
000016EC 7800                       		moveq	#0,d4
000016EE 7608                       		moveq	#8,d3
000016F0                            
000016F0                            loc_14D0:				; XREF: NemDec2
000016F0 51C8 FFF0                  		dbf	d0,loc_14C2
000016F4 60B4                       		bra.s	NemDec2
000016F6                            ; ===========================================================================
000016F6                            
000016F6                            loc_14D6:				; XREF: NemDec2
000016F6 5D46                       		subq.w	#6,d6
000016F8 0C46 0009                  		cmpi.w	#9,d6
000016FC 6400                       		bcc.s	loc_14E4
000016FE 5046                       		addq.w	#8,d6
00001700 E145                       		asl.w	#8,d5
00001702 1A18                       		move.b	(a0)+,d5
00001704                            
00001704                            loc_14E4:				; XREF: NemDec3
00001704 5F46                       		subq.w	#7,d6
00001706 3205                       		move.w	d5,d1
00001708 EC69                       		lsr.w	d6,d1
0000170A 3001                       		move.w	d1,d0
0000170C 0241 000F                  		andi.w	#$F,d1
00001710 0240 0070                  		andi.w	#$70,d0
00001714 0C46 0009                  		cmpi.w	#9,d6
00001718 64C6                       		bcc.s	loc_14C0
0000171A 5046                       		addq.w	#8,d6
0000171C E145                       		asl.w	#8,d5
0000171E 1A18                       		move.b	(a0)+,d5
00001720 60BE                       		bra.s	loc_14C0
00001722                            ; End of function NemDec3
00001722                            
00001722                            ; ===========================================================================
00001722                            
00001722                            loc_1502:				; XREF: NemDec
00001722 2884                       		move.l	d4,(a4)
00001724 534D                       		subq.w	#1,a5
00001726 380D                       		move.w	a5,d4
00001728 66C2                       		bne.s	NemDec3
0000172A 4E75                       		rts	
0000172C                            ; ===========================================================================
0000172C B982                       		eor.l	d4,d2
0000172E 2882                       		move.l	d2,(a4)
00001730 534D                       		subq.w	#1,a5
00001732 380D                       		move.w	a5,d4
00001734 66B6                       		bne.s	NemDec3
00001736 4E75                       		rts	
00001738                            ; ===========================================================================
00001738                            
00001738                            loc_1518:				; XREF: NemDec
00001738 28C4                       		move.l	d4,(a4)+
0000173A 534D                       		subq.w	#1,a5
0000173C 380D                       		move.w	a5,d4
0000173E 66AC                       		bne.s	NemDec3
00001740 4E75                       		rts	
00001742                            ; ===========================================================================
00001742 B982                       		eor.l	d4,d2
00001744 28C2                       		move.l	d2,(a4)+
00001746 534D                       		subq.w	#1,a5
00001748 380D                       		move.w	a5,d4
0000174A 66A0                       		bne.s	NemDec3
0000174C 4E75                       		rts	
0000174E                            
0000174E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000174E                            
0000174E                            
0000174E                            NemDec4:				; XREF: NemDec
0000174E 1018                       		move.b	(a0)+,d0
00001750                            
00001750                            loc_1530:
00001750 0C00 00FF                  		cmpi.b	#-1,d0
00001754 6600                       		bne.s	loc_1538
00001756 4E75                       		rts	
00001758                            ; ===========================================================================
00001758                            
00001758                            loc_1538:				; XREF: NemDec4
00001758 3E00                       		move.w	d0,d7
0000175A                            
0000175A                            loc_153A:
0000175A 1018                       		move.b	(a0)+,d0
0000175C 0C00 0080                  		cmpi.b	#$80,d0
00001760 64EE                       		bcc.s	loc_1530
00001762 1200                       		move.b	d0,d1
00001764 0247 000F                  		andi.w	#$F,d7
00001768 0241 0070                  		andi.w	#$70,d1
0000176C 8E41                       		or.w	d1,d7
0000176E 0240 000F                  		andi.w	#$F,d0
00001772 1200                       		move.b	d0,d1
00001774 E149                       		lsl.w	#8,d1
00001776 8E41                       		or.w	d1,d7
00001778 7208                       		moveq	#8,d1
0000177A 9240                       		sub.w	d0,d1
0000177C 6600                       		bne.s	loc_1568
0000177E 1018                       		move.b	(a0)+,d0
00001780 D040                       		add.w	d0,d0
00001782 3387 0000                  		move.w	d7,(a1,d0.w)
00001786 60D2                       		bra.s	loc_153A
00001788                            ; ===========================================================================
00001788                            
00001788                            loc_1568:				; XREF: NemDec4
00001788 1018                       		move.b	(a0)+,d0
0000178A E368                       		lsl.w	d1,d0
0000178C D040                       		add.w	d0,d0
0000178E 7A01                       		moveq	#1,d5
00001790 E36D                       		lsl.w	d1,d5
00001792 5345                       		subq.w	#1,d5
00001794                            
00001794                            loc_1574:
00001794 3387 0000                  		move.w	d7,(a1,d0.w)
00001798 5440                       		addq.w	#2,d0
0000179A 51CD FFF8                  		dbf	d5,loc_1574
0000179E 60BA                       		bra.s	loc_153A
000017A0                            ; End of function NemDec4
000017A0                            
000017A0                            ; ---------------------------------------------------------------------------
000017A0                            ; Subroutine to	load pattern load cues
000017A0                            ; ---------------------------------------------------------------------------
000017A0                            
000017A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A0                            
000017A0                            
000017A0                            LoadPLC:
000017A0 48E7 0060                  		movem.l	a1-a2,-(sp)
000017A4 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017AA D040                       		add.w	d0,d0
000017AC 3031 0000                  		move.w	(a1,d0.w),d0
000017B0 43F1 0000                  		lea	(a1,d0.w),a1
000017B4 45F8 F680                  		lea	($FFFFF680).w,a2
000017B8                            
000017B8                            loc_1598:
000017B8 4A92                       		tst.l	(a2)
000017BA 6700                       		beq.s	loc_15A0
000017BC 5C4A                       		addq.w	#6,a2
000017BE 60F8                       		bra.s	loc_1598
000017C0                            ; ===========================================================================
000017C0                            
000017C0                            loc_15A0:				; XREF: LoadPLC
000017C0 3019                       		move.w	(a1)+,d0
000017C2 6B00                       		bmi.s	loc_15AC
000017C4                            
000017C4                            loc_15A4:
000017C4 24D9                       		move.l	(a1)+,(a2)+
000017C6 34D9                       		move.w	(a1)+,(a2)+
000017C8 51C8 FFFA                  		dbf	d0,loc_15A4
000017CC                            
000017CC                            loc_15AC:
000017CC 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017D0 4E75                       		rts	
000017D2                            ; End of function LoadPLC
000017D2                            
000017D2                            
000017D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017D2                            
000017D2                            
000017D2                            LoadPLC2:
000017D2 48E7 0060                  		movem.l	a1-a2,-(sp)
000017D6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017DC D040                       		add.w	d0,d0
000017DE 3031 0000                  		move.w	(a1,d0.w),d0
000017E2 43F1 0000                  		lea	(a1,d0.w),a1
000017E6 6100                       		bsr.s	ClearPLC
000017E8 45F8 F680                  		lea	($FFFFF680).w,a2
000017EC 3019                       		move.w	(a1)+,d0
000017EE 6B00                       		bmi.s	loc_15D8
000017F0                            
000017F0                            loc_15D0:
000017F0 24D9                       		move.l	(a1)+,(a2)+
000017F2 34D9                       		move.w	(a1)+,(a2)+
000017F4 51C8 FFFA                  		dbf	d0,loc_15D0
000017F8                            
000017F8                            loc_15D8:
000017F8 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017FC 4E75                       		rts	
000017FE                            ; End of function LoadPLC2
000017FE                            
000017FE                            ; ---------------------------------------------------------------------------
000017FE                            ; Subroutine to	clear the pattern load cues
000017FE                            ; ---------------------------------------------------------------------------
000017FE                            
000017FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017FE                            
000017FE                            
000017FE                            ClearPLC:				; XREF: LoadPLC2
000017FE 45F8 F680                  		lea	($FFFFF680).w,a2
00001802 701F                       		moveq	#$1F,d0
00001804                            
00001804                            ClearPLC_Loop:
00001804 429A                       		clr.l	(a2)+
00001806 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000180A 4E75                       		rts	
0000180C                            ; End of function ClearPLC
0000180C                            
0000180C                            ; ---------------------------------------------------------------------------
0000180C                            ; Subroutine to	use graphics listed in a pattern load cue
0000180C                            ; ---------------------------------------------------------------------------
0000180C                            
0000180C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000180C                            
0000180C                            
0000180C                            RunPLC_RAM:				; XREF: Pal_FadeTo
0000180C 4AB8 F680                  		tst.l	($FFFFF680).w
00001810 6700                       		beq.s	locret_1640
00001812 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001816 6600                       		bne.s	locret_1640
00001818 2078 F680                  		movea.l	($FFFFF680).w,a0
0000181C 47F9 0000 1722             		lea	(loc_1502).l,a3
00001822 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001826 3418                       		move.w	(a0)+,d2
00001828 6A00                       		bpl.s	loc_160E
0000182A D6FC 000A                  		adda.w	#$A,a3
0000182E                            
0000182E                            loc_160E:
0000182E 0242 7FFF                  		andi.w	#$7FFF,d2
00001832 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001836 6100 FF16                  		bsr.w	NemDec4
0000183A 1A18                       		move.b	(a0)+,d5
0000183C E145                       		asl.w	#8,d5
0000183E 1A18                       		move.b	(a0)+,d5
00001840 7C10                       		moveq	#$10,d6
00001842 7000                       		moveq	#0,d0
00001844 21C8 F680                  		move.l	a0,($FFFFF680).w
00001848 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000184C 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001850 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001854 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001858 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000185C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001860                            
00001860                            locret_1640:
00001860 4E75                       		rts	
00001862                            ; End of function RunPLC_RAM
00001862                            
00001862                            
00001862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001862                            
00001862                            
00001862                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001862 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001866 6700 0000                  		beq.w	locret_16DA
0000186A 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001870 7000                       		moveq	#0,d0
00001872 3038 F684                  		move.w	($FFFFF684).w,d0
00001876 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000187C 6000                       		bra.s	loc_1676
0000187E                            ; End of function sub_1642
0000187E                            
0000187E                            
0000187E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000187E                            
0000187E                            
0000187E                            sub_165E:				; XREF: Demo_Time
0000187E 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001882 6700                       		beq.s	locret_16DA
00001884 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000188A 7000                       		moveq	#0,d0
0000188C 3038 F684                  		move.w	($FFFFF684).w,d0
00001890 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001896                            
00001896                            loc_1676:				; XREF: sub_1642
00001896 49F9 00C0 0004             		lea	($C00004).l,a4
0000189C E588                       		lsl.l	#2,d0
0000189E E448                       		lsr.w	#2,d0
000018A0 0040 4000                  		ori.w	#$4000,d0
000018A4 4840                       		swap	d0
000018A6 2880                       		move.l	d0,(a4)
000018A8 594C                       		subq.w	#4,a4
000018AA 2078 F680                  		movea.l	($FFFFF680).w,a0
000018AE 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018B2 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018B6 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018BA 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018BE 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018C2 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018C6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018CA                            
000018CA                            loc_16AA:				; XREF: sub_165E
000018CA 3A7C 0008                  		movea.w	#8,a5
000018CE 6100 FE1C                  		bsr.w	NemDec3
000018D2 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018D6 6700                       		beq.s	loc_16DC
000018D8 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018DC 66EC                       		bne.s	loc_16AA
000018DE 21C8 F680                  		move.l	a0,($FFFFF680).w
000018E2 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018E6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018EA 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018EE 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018F2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018F6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018FA                            
000018FA                            locret_16DA:				; XREF: sub_1642
000018FA 4E75                       		rts	
000018FC                            ; ===========================================================================
000018FC                            
000018FC                            loc_16DC:				; XREF: sub_165E
000018FC 41F8 F680                  		lea	($FFFFF680).w,a0
00001900 7015                       		moveq	#$15,d0
00001902                            
00001902                            loc_16E2:				; XREF: sub_165E
00001902 20E8 0006                  		move.l	6(a0),(a0)+
00001906 51C8 FFFA                  		dbf	d0,loc_16E2
0000190A 4E75                       		rts	
0000190C                            ; End of function sub_165E
0000190C                            
0000190C                            ; ---------------------------------------------------------------------------
0000190C                            ; Subroutine to	execute	the pattern load cue
0000190C                            ; ---------------------------------------------------------------------------
0000190C                            
0000190C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000190C                            
0000190C                            
0000190C                            RunPLC_ROM:
0000190C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001912 D040                       		add.w	d0,d0
00001914 3031 0000                  		move.w	(a1,d0.w),d0
00001918 43F1 0000                  		lea	(a1,d0.w),a1
0000191C 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
0000191E                            
0000191E                            RunPLC_Loop:
0000191E 2059                       		movea.l	(a1)+,a0	; get art pointer
00001920 7000                       		moveq	#0,d0
00001922 3019                       		move.w	(a1)+,d0	; get VRAM address
00001924 E588                       		lsl.l	#2,d0		; divide address by $20
00001926 E448                       		lsr.w	#2,d0
00001928 0040 4000                  		ori.w	#$4000,d0
0000192C 4840                       		swap	d0
0000192E 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001934 6100 FD2A                  		bsr.w	NemDec		; decompress
00001938 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000193C 4E75                       		rts	
0000193E                            ; End of function RunPLC_ROM
0000193E                            
0000193E                            ; ---------------------------------------------------------------------------
0000193E                            ; Enigma decompression algorithm
0000193E                            ; ---------------------------------------------------------------------------
0000193E                            
0000193E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000193E                            
0000193E                            
0000193E                            EniDec:
0000193E 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001942 3640                       		movea.w	d0,a3
00001944 1018                       		move.b	(a0)+,d0
00001946 4880                       		ext.w	d0
00001948 3A40                       		movea.w	d0,a5
0000194A 1818                       		move.b	(a0)+,d4
0000194C E70C                       		lsl.b	#3,d4
0000194E 3458                       		movea.w	(a0)+,a2
00001950 D4CB                       		adda.w	a3,a2
00001952 3858                       		movea.w	(a0)+,a4
00001954 D8CB                       		adda.w	a3,a4
00001956 1A18                       		move.b	(a0)+,d5
00001958 E145                       		asl.w	#8,d5
0000195A 1A18                       		move.b	(a0)+,d5
0000195C 7C10                       		moveq	#$10,d6
0000195E                            
0000195E                            loc_173E:				; XREF: loc_1768
0000195E 7007                       		moveq	#7,d0
00001960 3E06                       		move.w	d6,d7
00001962 9E40                       		sub.w	d0,d7
00001964 3205                       		move.w	d5,d1
00001966 EE69                       		lsr.w	d7,d1
00001968 0241 007F                  		andi.w	#$7F,d1
0000196C 3401                       		move.w	d1,d2
0000196E 0C41 0040                  		cmpi.w	#$40,d1
00001972 6400                       		bcc.s	loc_1758
00001974 7006                       		moveq	#6,d0
00001976 E24A                       		lsr.w	#1,d2
00001978                            
00001978                            loc_1758:
00001978 6100 0000                  		bsr.w	sub_188C
0000197C 0242 000F                  		andi.w	#$F,d2
00001980 E849                       		lsr.w	#4,d1
00001982 D241                       		add.w	d1,d1
00001984 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001988                            ; End of function EniDec
00001988                            
00001988                            ; ===========================================================================
00001988                            
00001988                            loc_1768:				; XREF: loc_17B4
00001988 32CA                       		move.w	a2,(a1)+
0000198A 524A                       		addq.w	#1,a2
0000198C 51CA FFFA                  		dbf	d2,loc_1768
00001990 60CC                       		bra.s	loc_173E
00001992                            ; ===========================================================================
00001992                            
00001992                            loc_1772:				; XREF: loc_17B4
00001992 32CC                       		move.w	a4,(a1)+
00001994 51CA FFFC                  		dbf	d2,loc_1772
00001998 60C4                       		bra.s	loc_173E
0000199A                            ; ===========================================================================
0000199A                            
0000199A                            loc_177A:				; XREF: loc_17B4
0000199A 6100 0000                  		bsr.w	loc_17DC
0000199E                            
0000199E                            loc_177E:
0000199E 32C1                       		move.w	d1,(a1)+
000019A0 51CA FFFC                  		dbf	d2,loc_177E
000019A4 60B8                       		bra.s	loc_173E
000019A6                            ; ===========================================================================
000019A6                            
000019A6                            loc_1786:				; XREF: loc_17B4
000019A6 6100 0000                  		bsr.w	loc_17DC
000019AA                            
000019AA                            loc_178A:
000019AA 32C1                       		move.w	d1,(a1)+
000019AC 5241                       		addq.w	#1,d1
000019AE 51CA FFFA                  		dbf	d2,loc_178A
000019B2 60AA                       		bra.s	loc_173E
000019B4                            ; ===========================================================================
000019B4                            
000019B4                            loc_1794:				; XREF: loc_17B4
000019B4 6100 0000                  		bsr.w	loc_17DC
000019B8                            
000019B8                            loc_1798:
000019B8 32C1                       		move.w	d1,(a1)+
000019BA 5341                       		subq.w	#1,d1
000019BC 51CA FFFA                  		dbf	d2,loc_1798
000019C0 609C                       		bra.s	loc_173E
000019C2                            ; ===========================================================================
000019C2                            
000019C2                            loc_17A2:				; XREF: loc_17B4
000019C2 0C42 000F                  		cmpi.w	#$F,d2
000019C6 6700                       		beq.s	loc_17C4
000019C8                            
000019C8                            loc_17A8:
000019C8 6100 0000                  		bsr.w	loc_17DC
000019CC 32C1                       		move.w	d1,(a1)+
000019CE 51CA FFF8                  		dbf	d2,loc_17A8
000019D2 608A                       		bra.s	loc_173E
000019D4                            ; ===========================================================================
000019D4                            
000019D4                            loc_17B4:				; XREF: EniDec
000019D4 60B2                       		bra.s	loc_1768
000019D6                            ; ===========================================================================
000019D6 60B0                       		bra.s	loc_1768
000019D8                            ; ===========================================================================
000019D8 60B8                       		bra.s	loc_1772
000019DA                            ; ===========================================================================
000019DA 60B6                       		bra.s	loc_1772
000019DC                            ; ===========================================================================
000019DC 60BC                       		bra.s	loc_177A
000019DE                            ; ===========================================================================
000019DE 60C6                       		bra.s	loc_1786
000019E0                            ; ===========================================================================
000019E0 60D2                       		bra.s	loc_1794
000019E2                            ; ===========================================================================
000019E2 60DE                       		bra.s	loc_17A2
000019E4                            ; ===========================================================================
000019E4                            
000019E4                            loc_17C4:				; XREF: loc_17A2
000019E4 5348                       		subq.w	#1,a0
000019E6 0C46 0010                  		cmpi.w	#$10,d6
000019EA 6600                       		bne.s	loc_17CE
000019EC 5348                       		subq.w	#1,a0
000019EE                            
000019EE                            loc_17CE:
000019EE 3008                       		move.w	a0,d0
000019F0 E248                       		lsr.w	#1,d0
000019F2 6400                       		bcc.s	loc_17D6
000019F4 5248                       		addq.w	#1,a0
000019F6                            
000019F6                            loc_17D6:
000019F6 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019FA 4E75                       		rts	
000019FC                            ; ===========================================================================
000019FC                            
000019FC                            loc_17DC:				; XREF: loc_17A2
000019FC 360B                       		move.w	a3,d3
000019FE 1204                       		move.b	d4,d1
00001A00 D201                       		add.b	d1,d1
00001A02 6400                       		bcc.s	loc_17EE
00001A04 5346                       		subq.w	#1,d6
00001A06 0D05                       		btst	d6,d5
00001A08 6700                       		beq.s	loc_17EE
00001A0A 0043 8000                  		ori.w	#-$8000,d3
00001A0E                            
00001A0E                            loc_17EE:
00001A0E D201                       		add.b	d1,d1
00001A10 6400                       		bcc.s	loc_17FC
00001A12 5346                       		subq.w	#1,d6
00001A14 0D05                       		btst	d6,d5
00001A16 6700                       		beq.s	loc_17FC
00001A18 0643 4000                  		addi.w	#$4000,d3
00001A1C                            
00001A1C                            loc_17FC:
00001A1C D201                       		add.b	d1,d1
00001A1E 6400                       		bcc.s	loc_180A
00001A20 5346                       		subq.w	#1,d6
00001A22 0D05                       		btst	d6,d5
00001A24 6700                       		beq.s	loc_180A
00001A26 0643 2000                  		addi.w	#$2000,d3
00001A2A                            
00001A2A                            loc_180A:
00001A2A D201                       		add.b	d1,d1
00001A2C 6400                       		bcc.s	loc_1818
00001A2E 5346                       		subq.w	#1,d6
00001A30 0D05                       		btst	d6,d5
00001A32 6700                       		beq.s	loc_1818
00001A34 0043 1000                  		ori.w	#$1000,d3
00001A38                            
00001A38                            loc_1818:
00001A38 D201                       		add.b	d1,d1
00001A3A 6400                       		bcc.s	loc_1826
00001A3C 5346                       		subq.w	#1,d6
00001A3E 0D05                       		btst	d6,d5
00001A40 6700                       		beq.s	loc_1826
00001A42 0043 0800                  		ori.w	#$800,d3
00001A46                            
00001A46                            loc_1826:
00001A46 3205                       		move.w	d5,d1
00001A48 3E06                       		move.w	d6,d7
00001A4A 9E4D                       		sub.w	a5,d7
00001A4C 6400                       		bcc.s	loc_1856
00001A4E 3C07                       		move.w	d7,d6
00001A50 0646 0010                  		addi.w	#$10,d6
00001A54 4447                       		neg.w	d7
00001A56 EF69                       		lsl.w	d7,d1
00001A58 1A10                       		move.b	(a0),d5
00001A5A EF3D                       		rol.b	d7,d5
00001A5C DE47                       		add.w	d7,d7
00001A5E CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A62 D245                       		add.w	d5,d1
00001A64                            
00001A64                            loc_1844:				; XREF: loc_1868
00001A64 300D                       		move.w	a5,d0
00001A66 D040                       		add.w	d0,d0
00001A68 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A6C D243                       		add.w	d3,d1
00001A6E 1A18                       		move.b	(a0)+,d5
00001A70 E14D                       		lsl.w	#8,d5
00001A72 1A18                       		move.b	(a0)+,d5
00001A74 4E75                       		rts	
00001A76                            ; ===========================================================================
00001A76                            
00001A76                            loc_1856:				; XREF: loc_1826
00001A76 6700                       		beq.s	loc_1868
00001A78 EE69                       		lsr.w	d7,d1
00001A7A 300D                       		move.w	a5,d0
00001A7C D040                       		add.w	d0,d0
00001A7E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A82 D243                       		add.w	d3,d1
00001A84 300D                       		move.w	a5,d0
00001A86 6000                       		bra.s	sub_188C
00001A88                            ; ===========================================================================
00001A88                            
00001A88                            loc_1868:				; XREF: loc_1856
00001A88 7C10                       		moveq	#$10,d6
00001A8A                            
00001A8A                            loc_186A:
00001A8A 60D8                       		bra.s	loc_1844
00001A8C                            ; ===========================================================================
00001A8C 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AA2 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AAC                            
00001AAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AAC                            
00001AAC                            
00001AAC                            sub_188C:				; XREF: EniDec
00001AAC 9C40                       		sub.w	d0,d6
00001AAE 0C46 0009                  		cmpi.w	#9,d6
00001AB2 6400                       		bcc.s	locret_189A
00001AB4 5046                       		addq.w	#8,d6
00001AB6 E145                       		asl.w	#8,d5
00001AB8 1A18                       		move.b	(a0)+,d5
00001ABA                            
00001ABA                            locret_189A:
00001ABA 4E75                       		rts	
00001ABC                            ; End of function sub_188C
00001ABC                            
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            ; Kosinski decompression algorithm
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            
00001ABC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ABC                            
00001ABC                            
00001ABC                            KosDec:
00001ABC                            
00001ABC =FFFFFFFE                  var_2		= -2
00001ABC =FFFFFFFF                  var_1		= -1
00001ABC                            
00001ABC 558F                       		subq.l	#2,sp
00001ABE 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AC2 1E98                       		move.b	(a0)+,(sp)
00001AC4 3A17                       		move.w	(sp),d5
00001AC6 780F                       		moveq	#$F,d4
00001AC8                            
00001AC8                            loc_18A8:
00001AC8 E24D                       		lsr.w	#1,d5
00001ACA 40C6                       		move	sr,d6
00001ACC 51CC 0000                  		dbf	d4,loc_18BA
00001AD0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD4 1E98                       		move.b	(a0)+,(sp)
00001AD6 3A17                       		move.w	(sp),d5
00001AD8 780F                       		moveq	#$F,d4
00001ADA                            
00001ADA                            loc_18BA:
00001ADA 44C6                       		move	d6,ccr
00001ADC 6400                       		bcc.s	loc_18C2
00001ADE 12D8                       		move.b	(a0)+,(a1)+
00001AE0 60E6                       		bra.s	loc_18A8
00001AE2                            ; ===========================================================================
00001AE2                            
00001AE2                            loc_18C2:				; XREF: KosDec
00001AE2 7600                       		moveq	#0,d3
00001AE4 E24D                       		lsr.w	#1,d5
00001AE6 40C6                       		move	sr,d6
00001AE8 51CC 0000                  		dbf	d4,loc_18D6
00001AEC 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF0 1E98                       		move.b	(a0)+,(sp)
00001AF2 3A17                       		move.w	(sp),d5
00001AF4 780F                       		moveq	#$F,d4
00001AF6                            
00001AF6                            loc_18D6:
00001AF6 44C6                       		move	d6,ccr
00001AF8 6500                       		bcs.s	loc_1906
00001AFA E24D                       		lsr.w	#1,d5
00001AFC 51CC 0000                  		dbf	d4,loc_18EA
00001B00 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B04 1E98                       		move.b	(a0)+,(sp)
00001B06 3A17                       		move.w	(sp),d5
00001B08 780F                       		moveq	#$F,d4
00001B0A                            
00001B0A                            loc_18EA:
00001B0A E353                       		roxl.w	#1,d3
00001B0C E24D                       		lsr.w	#1,d5
00001B0E 51CC 0000                  		dbf	d4,loc_18FC
00001B12 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B16 1E98                       		move.b	(a0)+,(sp)
00001B18 3A17                       		move.w	(sp),d5
00001B1A 780F                       		moveq	#$F,d4
00001B1C                            
00001B1C                            loc_18FC:
00001B1C E353                       		roxl.w	#1,d3
00001B1E 5243                       		addq.w	#1,d3
00001B20 74FF                       		moveq	#-1,d2
00001B22 1418                       		move.b	(a0)+,d2
00001B24 6000                       		bra.s	loc_191C
00001B26                            ; ===========================================================================
00001B26                            
00001B26                            loc_1906:				; XREF: loc_18C2
00001B26 1018                       		move.b	(a0)+,d0
00001B28 1218                       		move.b	(a0)+,d1
00001B2A 74FF                       		moveq	#-1,d2
00001B2C 1401                       		move.b	d1,d2
00001B2E EB4A                       		lsl.w	#5,d2
00001B30 1400                       		move.b	d0,d2
00001B32 0241 0007                  		andi.w	#7,d1
00001B36 6700                       		beq.s	loc_1928
00001B38 1601                       		move.b	d1,d3
00001B3A 5243                       		addq.w	#1,d3
00001B3C                            
00001B3C                            loc_191C:
00001B3C 1031 2000                  		move.b	(a1,d2.w),d0
00001B40 12C0                       		move.b	d0,(a1)+
00001B42 51CB FFF8                  		dbf	d3,loc_191C
00001B46 6080                       		bra.s	loc_18A8
00001B48                            ; ===========================================================================
00001B48                            
00001B48                            loc_1928:				; XREF: loc_1906
00001B48 1218                       		move.b	(a0)+,d1
00001B4A 6700                       		beq.s	loc_1938
00001B4C 0C01 0001                  		cmpi.b	#1,d1
00001B50 6700 FF76                  		beq.w	loc_18A8
00001B54 1601                       		move.b	d1,d3
00001B56 60E4                       		bra.s	loc_191C
00001B58                            ; ===========================================================================
00001B58                            
00001B58                            loc_1938:				; XREF: loc_1928
00001B58 548F                       		addq.l	#2,sp
00001B5A 4E75                       		rts	
00001B5C                            ; End of function KosDec
00001B5C                            
00001B5C                            ; ---------------------------------------------------------------------------
00001B5C                            ; Pallet cycling routine loading subroutine
00001B5C                            ; ---------------------------------------------------------------------------
00001B5C                            
00001B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B5C                            
00001B5C                            
00001B5C                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B5C 7400                       		moveq	#0,d2
00001B5E 7000                       		moveq	#0,d0
00001B60 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B64 D040                       		add.w	d0,d0		; multiply by 2
00001B66 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B6A 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B6E                            ; End of function PalCycle_Load
00001B6E                            
00001B6E                            ; ===========================================================================
00001B6E                            ; ---------------------------------------------------------------------------
00001B6E                            ; Pallet cycling routines
00001B6E                            ; ---------------------------------------------------------------------------
00001B6E 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B70 0000                       		dc.w PalCycle_LZ-PalCycle
00001B72 0000                       		dc.w PalCycle_MZ-PalCycle
00001B74 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B76 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B78 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B7A 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B7C                            
00001B7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B7C                            
00001B7C                            
00001B7C                            PalCycle_Title:				; XREF: TitleScreen
00001B7C 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B82 6000                       		bra.s	loc_196A
00001B84                            ; ===========================================================================
00001B84                            
00001B84                            PalCycle_GHZ:				; XREF: PalCycle
00001B84 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B8A                            
00001B8A                            loc_196A:				; XREF: PalCycle_Title
00001B8A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B8E 6A00                       		bpl.s	locret_1990
00001B90 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B96 3038 F632                  		move.w	($FFFFF632).w,d0
00001B9A 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B9E 0240 0003                  		andi.w	#3,d0
00001BA2 E748                       		lsl.w	#3,d0
00001BA4 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BA8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BAC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BB0                            
00001BB0                            locret_1990:
00001BB0 4E75                       		rts	
00001BB2                            ; End of function PalCycle_Title
00001BB2                            
00001BB2                            
00001BB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB2                            
00001BB2                            
00001BB2                            PalCycle_LZ:				; XREF: PalCycle
00001BB2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BB6 6A00                       		bpl.s	loc_19D8
00001BB8 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BBE 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BC6 0240 0003                  		andi.w	#3,d0
00001BCA E748                       		lsl.w	#3,d0
00001BCC 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BD2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BD8 6600                       		bne.s	loc_19C0
00001BDA 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BE0                            
00001BE0                            loc_19C0:
00001BE0 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BE8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BEC 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BF0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BF4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BF8                            
00001BF8                            loc_19D8:
00001BF8 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001BFC 0240 0007                  		andi.w	#7,d0
00001C00 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C04 6700                       		beq.s	locret_1A3A
00001C06 7201                       		moveq	#1,d1
00001C08 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C0C 6700                       		beq.s	loc_19F0
00001C0E 4441                       		neg.w	d1
00001C10                            
00001C10                            loc_19F0:
00001C10 3038 F650                  		move.w	($FFFFF650).w,d0
00001C14 0240 0003                  		andi.w	#3,d0
00001C18 D041                       		add.w	d1,d0
00001C1A 0C40 0003                  		cmpi.w	#3,d0
00001C1E 6500                       		bcs.s	loc_1A0A
00001C20 3200                       		move.w	d0,d1
00001C22 7000                       		moveq	#0,d0
00001C24 4A41                       		tst.w	d1
00001C26 6A00                       		bpl.s	loc_1A0A
00001C28 7002                       		moveq	#2,d0
00001C2A                            
00001C2A                            loc_1A0A:
00001C2A 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C2E D040                       		add.w	d0,d0
00001C30 3200                       		move.w	d0,d1
00001C32 D040                       		add.w	d0,d0
00001C34 D041                       		add.w	d1,d0
00001C36 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C3C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C40 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C44 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C48 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C4E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C52 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C56 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C5A                            
00001C5A                            locret_1A3A:
00001C5A 4E75                       		rts	
00001C5C                            ; End of function PalCycle_LZ
00001C5C                            
00001C5C                            ; ===========================================================================
00001C5C 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C64                            ; ===========================================================================
00001C64                            
00001C64                            PalCycle_MZ:				; XREF: PalCycle
00001C64 4E75                       		rts	
00001C66                            
00001C66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C66                            
00001C66                            
00001C66                            PalCycle_SLZ:				; XREF: PalCycle
00001C66 4E75                       		rts	
00001C68                            ; End of function PalCycle_SLZ
00001C68                            
00001C68                            
00001C68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C68                            
00001C68                            
00001C68                            PalCycle_SYZ:				; XREF: PalCycle
00001C68 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C6C 6A00                       		bpl.s	locret_1AC6
00001C6E 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C74 3038 F632                  		move.w	($FFFFF632).w,d0
00001C78 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C7C 0240 0003                  		andi.w	#3,d0
00001C80 E548                       		lsl.w	#2,d0
00001C82 3200                       		move.w	d0,d1
00001C84 D040                       		add.w	d0,d0
00001C86 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C8C 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C90 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C94 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C98 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001C9E 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CA2 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CA6 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CAC                            
00001CAC                            locret_1AC6:
00001CAC 4E75                       		rts	
00001CAE                            ; End of function PalCycle_SYZ
00001CAE                            
00001CAE                            
00001CAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CAE                            
00001CAE                            
00001CAE                            PalCycle_SBZ:				; XREF: PalCycle
00001CAE 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CB4 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CB8 6700                       		beq.s	loc_1ADA
00001CBA 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CC0                            
00001CC0                            loc_1ADA:
00001CC0 43F8 F650                  		lea	($FFFFF650).w,a1
00001CC4 321A                       		move.w	(a2)+,d1
00001CC6                            
00001CC6                            loc_1AE0:
00001CC6 5311                       		subq.b	#1,(a1)
00001CC8 6B00                       		bmi.s	loc_1AEA
00001CCA 5489                       		addq.l	#2,a1
00001CCC 5C8A                       		addq.l	#6,a2
00001CCE 6000                       		bra.s	loc_1B06
00001CD0                            ; ===========================================================================
00001CD0                            
00001CD0                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CD0 12DA                       		move.b	(a2)+,(a1)+
00001CD2 1011                       		move.b	(a1),d0
00001CD4 5200                       		addq.b	#1,d0
00001CD6 B01A                       		cmp.b	(a2)+,d0
00001CD8 6500                       		bcs.s	loc_1AF6
00001CDA 7000                       		moveq	#0,d0
00001CDC                            
00001CDC                            loc_1AF6:
00001CDC 12C0                       		move.b	d0,(a1)+
00001CDE 0240 000F                  		andi.w	#$F,d0
00001CE2 D040                       		add.w	d0,d0
00001CE4 305A                       		movea.w	(a2)+,a0
00001CE6 365A                       		movea.w	(a2)+,a3
00001CE8 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001CEC                            
00001CEC                            loc_1B06:				; XREF: PalCycle_SBZ
00001CEC 51C9 FFD8                  		dbf	d1,loc_1AE0
00001CF0 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CF4 6A00                       		bpl.s	locret_1B64
00001CF6 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001CFC 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D02 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D06 6700                       		beq.s	loc_1B2E
00001D08 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D0E 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D14                            
00001D14                            loc_1B2E:
00001D14 72FF                       		moveq	#-1,d1
00001D16 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D1A 6700                       		beq.s	loc_1B38
00001D1C 4441                       		neg.w	d1
00001D1E                            
00001D1E                            loc_1B38:
00001D1E 3038 F632                  		move.w	($FFFFF632).w,d0
00001D22 0240 0003                  		andi.w	#3,d0
00001D26 D041                       		add.w	d1,d0
00001D28 0C40 0003                  		cmpi.w	#3,d0
00001D2C 6500                       		bcs.s	loc_1B52
00001D2E 3200                       		move.w	d0,d1
00001D30 7000                       		moveq	#0,d0
00001D32 4A41                       		tst.w	d1
00001D34 6A00                       		bpl.s	loc_1B52
00001D36 7002                       		moveq	#2,d0
00001D38                            
00001D38                            loc_1B52:
00001D38 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D3C D040                       		add.w	d0,d0
00001D3E 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D42 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D46 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D4A                            
00001D4A                            locret_1B64:
00001D4A 4E75                       		rts	
00001D4C                            ; End of function PalCycle_SBZ
00001D4C                            
00001D4C                            ; ===========================================================================
00001D4C                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D6C                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001D8C                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DAC                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DBE                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DD0                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E38                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E5C                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001E7C                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001E8C                            
00001E8C                            Pal_SBZCycList:
00001E8C                            	include "_inc\SBZ pallet script 1.asm"
00001E8C                            ; ---------------------------------------------------------------------------
00001E8C                            ; Scrap Brain Zone 1 pallet cycling script
00001E8C                            ; ---------------------------------------------------------------------------
00001E8C 0008                       	dc.w 8			; number of entries - 1
00001E8E 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001E90 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001E92 FB50                       	dc.w $FB50		; RAM address
00001E94 0D08                       	dc.b $D, 8
00001E96 0000                       	dc.w Pal_SBZCyc2
00001E98 FB52                       	dc.w $FB52
00001E9A 0E08                       	dc.b $E, 8
00001E9C 0000                       	dc.w Pal_SBZCyc3
00001E9E FB6E                       	dc.w $FB6E
00001EA0 0B08                       	dc.b $B, 8
00001EA2 0000                       	dc.w Pal_SBZCyc5
00001EA4 FB70                       	dc.w $FB70
00001EA6 0708                       	dc.b 7,	8
00001EA8 0000                       	dc.w Pal_SBZCyc6
00001EAA FB72                       	dc.w $FB72
00001EAC 1C10                       	dc.b $1C, $10
00001EAE 0000                       	dc.w Pal_SBZCyc7
00001EB0 FB7E                       	dc.w $FB7E
00001EB2 0303                       	dc.b 3,	3
00001EB4 0000                       	dc.w Pal_SBZCyc8
00001EB6 FB78                       	dc.w $FB78
00001EB8 0303                       	dc.b 3,	3
00001EBA 0000                       	dc.w Pal_SBZCyc8+2
00001EBC FB7A                       	dc.w $FB7A
00001EBE 0303                       	dc.b 3,	3
00001EC0 0000                       	dc.w Pal_SBZCyc8+4
00001EC2 FB7C                       	dc.w $FB7C
00001EC4                            	even
00001EC4                            	even
00001EC4                            
00001EC4                            Pal_SBZCycList2:
00001EC4                            	include "_inc\SBZ pallet script 2.asm"
00001EC4                            ; ---------------------------------------------------------------------------
00001EC4                            ; Scrap Brain Zone 2 pallet cycling script
00001EC4                            ; ---------------------------------------------------------------------------
00001EC4 0006                       	dc.w 6
00001EC6 0708                       	dc.b 7,	8
00001EC8 0000                       	dc.w Pal_SBZCyc1
00001ECA FB50                       	dc.w $FB50
00001ECC 0D08                       	dc.b $D, 8
00001ECE 0000                       	dc.w Pal_SBZCyc2
00001ED0 FB52                       	dc.w $FB52
00001ED2 0908                       	dc.b 9,	8
00001ED4 0000                       	dc.w Pal_SBZCyc9
00001ED6 FB70                       	dc.w $FB70
00001ED8 0708                       	dc.b 7,	8
00001EDA 0000                       	dc.w Pal_SBZCyc6
00001EDC FB72                       	dc.w $FB72
00001EDE 0303                       	dc.b 3,	3
00001EE0 0000                       	dc.w Pal_SBZCyc8
00001EE2 FB78                       	dc.w $FB78
00001EE4 0303                       	dc.b 3,	3
00001EE6 0000                       	dc.w Pal_SBZCyc8+2
00001EE8 FB7A                       	dc.w $FB7A
00001EEA 0303                       	dc.b 3,	3
00001EEC 0000                       	dc.w Pal_SBZCyc8+4
00001EEE FB7C                       	dc.w $FB7C
00001EF0                            	even
00001EF0                            	even
00001EF0                            
00001EF0                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F00                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F10                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F20                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F2C                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F3C                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F4C                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F6C                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001F76                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001F86                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001F92                            ; ---------------------------------------------------------------------------
00001F92                            ; Subroutine to	fade out and fade in
00001F92                            ; ---------------------------------------------------------------------------
00001F92                            
00001F92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F92                            
00001F92                            
00001F92                            Pal_FadeTo:
00001F92 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F98                            
00001F98                            Pal_FadeTo2:
00001F98 7000                       		moveq	#0,d0
00001F9A 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F9E 1038 F626                  		move.b	($FFFFF626).w,d0
00001FA2 D0C0                       		adda.w	d0,a0
00001FA4 7200                       		moveq	#0,d1
00001FA6 1038 F627                  		move.b	($FFFFF627).w,d0
00001FAA                            
00001FAA                            Pal_ToBlack:
00001FAA 30C1                       		move.w	d1,(a0)+
00001FAC 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FB0                            
00001FB0 383C 0015                  		move.w	#$15,d4
00001FB4                            
00001FB4                            loc_1DCE:
00001FB4 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FBA 6100 0000                  		bsr.w	DelayProgram
00001FBE 6100                       		bsr.s	Pal_FadeIn
00001FC0 6100 F84A                  		bsr.w	RunPLC_RAM
00001FC4 51CC FFEE                  		dbf	d4,loc_1DCE
00001FC8 4E75                       		rts	
00001FCA                            ; End of function Pal_FadeTo
00001FCA                            
00001FCA                            ; ---------------------------------------------------------------------------
00001FCA                            ; Pallet fade-in subroutine
00001FCA                            ; ---------------------------------------------------------------------------
00001FCA                            
00001FCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCA                            
00001FCA                            
00001FCA                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FCA 7000                       		moveq	#0,d0
00001FCC 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FD0 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001FD4 1038 F626                  		move.b	($FFFFF626).w,d0
00001FD8 D0C0                       		adda.w	d0,a0
00001FDA D2C0                       		adda.w	d0,a1
00001FDC 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE0                            
00001FE0                            loc_1DFA:
00001FE0 6100                       		bsr.s	Pal_AddColor
00001FE2 51C8 FFFC                  		dbf	d0,loc_1DFA
00001FE6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001FEC 6600                       		bne.s	locret_1E24
00001FEE 7000                       		moveq	#0,d0
00001FF0 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FF4 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001FF8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FFC D0C0                       		adda.w	d0,a0
00001FFE D2C0                       		adda.w	d0,a1
00002000 1038 F627                  		move.b	($FFFFF627).w,d0
00002004                            
00002004                            loc_1E1E:
00002004 6100                       		bsr.s	Pal_AddColor
00002006 51C8 FFFC                  		dbf	d0,loc_1E1E
0000200A                            
0000200A                            locret_1E24:
0000200A 4E75                       		rts	
0000200C                            ; End of function Pal_FadeIn
0000200C                            
0000200C                            
0000200C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000200C                            
0000200C                            
0000200C                            Pal_AddColor:				; XREF: Pal_FadeIn
0000200C 3419                       		move.w	(a1)+,d2
0000200E 3610                       		move.w	(a0),d3
00002010 B642                       		cmp.w	d2,d3
00002012 6700                       		beq.s	loc_1E4E
00002014 3203                       		move.w	d3,d1
00002016 0641 0200                  		addi.w	#$200,d1	; increase blue	value
0000201A B242                       		cmp.w	d2,d1		; has blue reached threshold level?
0000201C 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
0000201E 30C1                       		move.w	d1,(a0)+	; update pallet
00002020 4E75                       		rts	
00002022                            ; ===========================================================================
00002022                            
00002022                            Pal_AddGreen:				; XREF: Pal_AddColor
00002022 3203                       		move.w	d3,d1
00002024 0641 0020                  		addi.w	#$20,d1		; increase green value
00002028 B242                       		cmp.w	d2,d1
0000202A 6200                       		bhi.s	Pal_AddRed
0000202C 30C1                       		move.w	d1,(a0)+	; update pallet
0000202E 4E75                       		rts	
00002030                            ; ===========================================================================
00002030                            
00002030                            Pal_AddRed:				; XREF: Pal_AddGreen
00002030 5458                       		addq.w	#2,(a0)+	; increase red value
00002032 4E75                       		rts	
00002034                            ; ===========================================================================
00002034                            
00002034                            loc_1E4E:				; XREF: Pal_AddColor
00002034 5448                       		addq.w	#2,a0
00002036 4E75                       		rts	
00002038                            ; End of function Pal_AddColor
00002038                            
00002038                            
00002038                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002038                            
00002038                            
00002038                            Pal_FadeFrom:
00002038 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000203E 383C 0015                  		move.w	#$15,d4
00002042                            
00002042                            loc_1E5C:
00002042 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002048 6100 0000                  		bsr.w	DelayProgram
0000204C 6100                       		bsr.s	Pal_FadeOut
0000204E 6100 F7BC                  		bsr.w	RunPLC_RAM
00002052 51CC FFEE                  		dbf	d4,loc_1E5C
00002056 4E75                       		rts	
00002058                            ; End of function Pal_FadeFrom
00002058                            
00002058                            ; ---------------------------------------------------------------------------
00002058                            ; Pallet fade-out subroutine
00002058                            ; ---------------------------------------------------------------------------
00002058                            
00002058                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002058                            
00002058                            
00002058                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00002058 7000                       		moveq	#0,d0
0000205A 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000205E 1038 F626                  		move.b	($FFFFF626).w,d0
00002062 D0C0                       		adda.w	d0,a0
00002064 1038 F627                  		move.b	($FFFFF627).w,d0
00002068                            
00002068                            loc_1E82:
00002068 6100                       		bsr.s	Pal_DecColor
0000206A 51C8 FFFC                  		dbf	d0,loc_1E82
0000206E                            
0000206E 7000                       		moveq	#0,d0
00002070 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002074 1038 F626                  		move.b	($FFFFF626).w,d0
00002078 D0C0                       		adda.w	d0,a0
0000207A 1038 F627                  		move.b	($FFFFF627).w,d0
0000207E                            
0000207E                            loc_1E98:
0000207E 6100                       		bsr.s	Pal_DecColor
00002080 51C8 FFFC                  		dbf	d0,loc_1E98
00002084 4E75                       		rts	
00002086                            ; End of function Pal_FadeOut
00002086                            
00002086                            
00002086                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002086                            
00002086                            
00002086                            Pal_DecColor:				; XREF: Pal_FadeOut
00002086 3410                       		move.w	(a0),d2
00002088 6700                       		beq.s	loc_1ECC
0000208A 3202                       		move.w	d2,d1
0000208C 0241 000E                  		andi.w	#$E,d1
00002090 6700                       		beq.s	Pal_DecGreen
00002092 5558                       		subq.w	#2,(a0)+	; decrease red value
00002094 4E75                       		rts	
00002096                            ; ===========================================================================
00002096                            
00002096                            Pal_DecGreen:				; XREF: Pal_DecColor
00002096 3202                       		move.w	d2,d1
00002098 0241 00E0                  		andi.w	#$E0,d1
0000209C 6700                       		beq.s	Pal_DecBlue
0000209E 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020A2 4E75                       		rts	
000020A4                            ; ===========================================================================
000020A4                            
000020A4                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020A4 3202                       		move.w	d2,d1
000020A6 0241 0E00                  		andi.w	#$E00,d1
000020AA 6700                       		beq.s	loc_1ECC
000020AC 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020B0 4E75                       		rts	
000020B2                            ; ===========================================================================
000020B2                            
000020B2                            loc_1ECC:				; XREF: Pal_DecColor
000020B2 5448                       		addq.w	#2,a0
000020B4 4E75                       		rts	
000020B6                            ; End of function Pal_DecColor
000020B6                            
000020B6                            ; ---------------------------------------------------------------------------
000020B6                            ; Subroutine to	fill the pallet	with white (special stage)
000020B6                            ; ---------------------------------------------------------------------------
000020B6                            
000020B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020B6                            
000020B6                            
000020B6                            Pal_MakeWhite:				; XREF: SpecialStage
000020B6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020BC 7000                       		moveq	#0,d0
000020BE 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020C2 1038 F626                  		move.b	($FFFFF626).w,d0
000020C6 D0C0                       		adda.w	d0,a0
000020C8 323C 0EEE                  		move.w	#$EEE,d1
000020CC 1038 F627                  		move.b	($FFFFF627).w,d0
000020D0                            
000020D0                            PalWhite_Loop:
000020D0 30C1                       		move.w	d1,(a0)+
000020D2 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000020D6 383C 0015                  		move.w	#$15,d4
000020DA                            
000020DA                            loc_1EF4:
000020DA 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020E0 6100 0000                  		bsr.w	DelayProgram
000020E4 6100                       		bsr.s	Pal_WhiteToBlack
000020E6 6100 F724                  		bsr.w	RunPLC_RAM
000020EA 51CC FFEE                  		dbf	d4,loc_1EF4
000020EE 4E75                       		rts	
000020F0                            ; End of function Pal_MakeWhite
000020F0                            
000020F0                            
000020F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020F0                            
000020F0                            
000020F0                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000020F0 7000                       		moveq	#0,d0
000020F2 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020F6 43F8 FB80                  		lea	($FFFFFB80).w,a1
000020FA 1038 F626                  		move.b	($FFFFF626).w,d0
000020FE D0C0                       		adda.w	d0,a0
00002100 D2C0                       		adda.w	d0,a1
00002102 1038 F627                  		move.b	($FFFFF627).w,d0
00002106                            
00002106                            loc_1F20:
00002106 6100                       		bsr.s	Pal_DecColor2
00002108 51C8 FFFC                  		dbf	d0,loc_1F20
0000210C                            
0000210C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002112 6600                       		bne.s	locret_1F4A
00002114 7000                       		moveq	#0,d0
00002116 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000211A 43F8 FA00                  		lea	($FFFFFA00).w,a1
0000211E 1038 F626                  		move.b	($FFFFF626).w,d0
00002122 D0C0                       		adda.w	d0,a0
00002124 D2C0                       		adda.w	d0,a1
00002126 1038 F627                  		move.b	($FFFFF627).w,d0
0000212A                            
0000212A                            loc_1F44:
0000212A 6100                       		bsr.s	Pal_DecColor2
0000212C 51C8 FFFC                  		dbf	d0,loc_1F44
00002130                            
00002130                            locret_1F4A:
00002130 4E75                       		rts	
00002132                            ; End of function Pal_WhiteToBlack
00002132                            
00002132                            
00002132                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002132                            
00002132                            
00002132                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00002132 3419                       		move.w	(a1)+,d2
00002134 3610                       		move.w	(a0),d3
00002136 B642                       		cmp.w	d2,d3
00002138 6700                       		beq.s	loc_1F78
0000213A 3203                       		move.w	d3,d1
0000213C 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002140 6500                       		bcs.s	loc_1F64
00002142 B242                       		cmp.w	d2,d1
00002144 6500                       		bcs.s	loc_1F64
00002146 30C1                       		move.w	d1,(a0)+
00002148 4E75                       		rts	
0000214A                            ; ===========================================================================
0000214A                            
0000214A                            loc_1F64:				; XREF: Pal_DecColor2
0000214A 3203                       		move.w	d3,d1
0000214C 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002150 6500                       		bcs.s	loc_1F74
00002152 B242                       		cmp.w	d2,d1
00002154 6500                       		bcs.s	loc_1F74
00002156 30C1                       		move.w	d1,(a0)+
00002158 4E75                       		rts	
0000215A                            ; ===========================================================================
0000215A                            
0000215A                            loc_1F74:				; XREF: loc_1F64
0000215A 5558                       		subq.w	#2,(a0)+	; decrease red value
0000215C 4E75                       		rts	
0000215E                            ; ===========================================================================
0000215E                            
0000215E                            loc_1F78:				; XREF: Pal_DecColor2
0000215E 5448                       		addq.w	#2,a0
00002160 4E75                       		rts	
00002162                            ; End of function Pal_DecColor2
00002162                            
00002162                            ; ---------------------------------------------------------------------------
00002162                            ; Subroutine to	make a white flash when	you enter a special stage
00002162                            ; ---------------------------------------------------------------------------
00002162                            
00002162                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002162                            
00002162                            
00002162                            Pal_MakeFlash:				; XREF: SpecialStage
00002162 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002168 383C 0015                  		move.w	#$15,d4
0000216C                            
0000216C                            loc_1F86:
0000216C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002172 6100 0000                  		bsr.w	DelayProgram
00002176 6100                       		bsr.s	Pal_ToWhite
00002178 6100 F692                  		bsr.w	RunPLC_RAM
0000217C 51CC FFEE                  		dbf	d4,loc_1F86
00002180 4E75                       		rts	
00002182                            ; End of function Pal_MakeFlash
00002182                            
00002182                            
00002182                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002182                            
00002182                            
00002182                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00002182 7000                       		moveq	#0,d0
00002184 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002188 1038 F626                  		move.b	($FFFFF626).w,d0
0000218C D0C0                       		adda.w	d0,a0
0000218E 1038 F627                  		move.b	($FFFFF627).w,d0
00002192                            
00002192                            loc_1FAC:
00002192 6100                       		bsr.s	Pal_AddColor2
00002194 51C8 FFFC                  		dbf	d0,loc_1FAC
00002198 7000                       		moveq	#0,d0
0000219A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000219E 1038 F626                  		move.b	($FFFFF626).w,d0
000021A2 D0C0                       		adda.w	d0,a0
000021A4 1038 F627                  		move.b	($FFFFF627).w,d0
000021A8                            
000021A8                            loc_1FC2:
000021A8 6100                       		bsr.s	Pal_AddColor2
000021AA 51C8 FFFC                  		dbf	d0,loc_1FC2
000021AE 4E75                       		rts	
000021B0                            ; End of function Pal_ToWhite
000021B0                            
000021B0                            
000021B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021B0                            
000021B0                            
000021B0                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021B0 3410                       		move.w	(a0),d2
000021B2 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021B6 6700                       		beq.s	loc_2006
000021B8 3202                       		move.w	d2,d1
000021BA 0241 000E                  		andi.w	#$E,d1
000021BE 0C41 000E                  		cmpi.w	#$E,d1
000021C2 6700                       		beq.s	loc_1FE2
000021C4 5458                       		addq.w	#2,(a0)+	; increase red value
000021C6 4E75                       		rts	
000021C8                            ; ===========================================================================
000021C8                            
000021C8                            loc_1FE2:				; XREF: Pal_AddColor2
000021C8 3202                       		move.w	d2,d1
000021CA 0241 00E0                  		andi.w	#$E0,d1
000021CE 0C41 00E0                  		cmpi.w	#$E0,d1
000021D2 6700                       		beq.s	loc_1FF4
000021D4 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000021D8 4E75                       		rts	
000021DA                            ; ===========================================================================
000021DA                            
000021DA                            loc_1FF4:				; XREF: loc_1FE2
000021DA 3202                       		move.w	d2,d1
000021DC 0241 0E00                  		andi.w	#$E00,d1
000021E0 0C41 0E00                  		cmpi.w	#$E00,d1
000021E4 6700                       		beq.s	loc_2006
000021E6 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000021EA 4E75                       		rts	
000021EC                            ; ===========================================================================
000021EC                            
000021EC                            loc_2006:				; XREF: Pal_AddColor2
000021EC 5448                       		addq.w	#2,a0
000021EE 4E75                       		rts	
000021F0                            ; End of function Pal_AddColor2
000021F0                            
000021F0                            ; ---------------------------------------------------------------------------
000021F0                            ; Pallet cycling routine - Sega	logo
000021F0                            ; ---------------------------------------------------------------------------
000021F0                            
000021F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021F0                            
000021F0                            
000021F0                            PalCycle_Sega:				; XREF: SegaScreen
000021F0 4A38 F635                  		tst.b	($FFFFF635).w
000021F4 6600                       		bne.s	loc_206A
000021F6 43F8 FB20                  		lea	($FFFFFB20).w,a1
000021FA 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002200 7205                       		moveq	#5,d1
00002202 3038 F632                  		move.w	($FFFFF632).w,d0
00002206                            
00002206                            loc_2020:
00002206 6A00                       		bpl.s	loc_202A
00002208 5448                       		addq.w	#2,a0
0000220A 5341                       		subq.w	#1,d1
0000220C 5440                       		addq.w	#2,d0
0000220E 60F6                       		bra.s	loc_2020
00002210                            ; ===========================================================================
00002210                            
00002210                            loc_202A:				; XREF: PalCycle_Sega
00002210 3400                       		move.w	d0,d2
00002212 0242 001E                  		andi.w	#$1E,d2
00002216 6600                       		bne.s	loc_2034
00002218 5440                       		addq.w	#2,d0
0000221A                            
0000221A                            loc_2034:
0000221A 0C40 0060                  		cmpi.w	#$60,d0
0000221E 6400                       		bcc.s	loc_203E
00002220 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002224                            
00002224                            loc_203E:
00002224 5440                       		addq.w	#2,d0
00002226 51C9 FFE8                  		dbf	d1,loc_202A
0000222A 3038 F632                  		move.w	($FFFFF632).w,d0
0000222E 5440                       		addq.w	#2,d0
00002230 3400                       		move.w	d0,d2
00002232 0242 001E                  		andi.w	#$1E,d2
00002236 6600                       		bne.s	loc_2054
00002238 5440                       		addq.w	#2,d0
0000223A                            
0000223A                            loc_2054:
0000223A 0C40 0064                  		cmpi.w	#$64,d0
0000223E 6D00                       		blt.s	loc_2062
00002240 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002246 70F4                       		moveq	#-$C,d0
00002248                            
00002248                            loc_2062:
00002248 31C0 F632                  		move.w	d0,($FFFFF632).w
0000224C 7001                       		moveq	#1,d0
0000224E 4E75                       		rts	
00002250                            ; ===========================================================================
00002250                            
00002250                            loc_206A:				; XREF: loc_202A
00002250 5338 F634                  		subq.b	#1,($FFFFF634).w
00002254 6A00                       		bpl.s	loc_20BC
00002256 11FC 0004 F634             		move.b	#4,($FFFFF634).w
0000225C 3038 F632                  		move.w	($FFFFF632).w,d0
00002260 0640 000C                  		addi.w	#$C,d0
00002264 0C40 0030                  		cmpi.w	#$30,d0
00002268 6500                       		bcs.s	loc_2088
0000226A 7000                       		moveq	#0,d0
0000226C 4E75                       		rts	
0000226E                            ; ===========================================================================
0000226E                            
0000226E                            loc_2088:				; XREF: loc_206A
0000226E 31C0 F632                  		move.w	d0,($FFFFF632).w
00002272 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002278 41F0 0000                  		lea	(a0,d0.w),a0
0000227C 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002280 22D8                       		move.l	(a0)+,(a1)+
00002282 22D8                       		move.l	(a0)+,(a1)+
00002284 3298                       		move.w	(a0)+,(a1)
00002286 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000228A 7000                       		moveq	#0,d0
0000228C 722C                       		moveq	#$2C,d1
0000228E                            
0000228E                            loc_20A8:
0000228E 3400                       		move.w	d0,d2
00002290 0242 001E                  		andi.w	#$1E,d2
00002294 6600                       		bne.s	loc_20B2
00002296 5440                       		addq.w	#2,d0
00002298                            
00002298                            loc_20B2:
00002298 3390 0000                  		move.w	(a0),(a1,d0.w)
0000229C 5440                       		addq.w	#2,d0
0000229E 51C9 FFEE                  		dbf	d1,loc_20A8
000022A2                            
000022A2                            loc_20BC:
000022A2 7001                       		moveq	#1,d0
000022A4 4E75                       		rts	
000022A6                            ; End of function PalCycle_Sega
000022A6                            
000022A6                            ; ===========================================================================
000022A6                            
000022A6                            Pal_Sega1:	incbin	pallet\sega1.bin
000022B2                            Pal_Sega2:	incbin	pallet\sega2.bin
000022E2                            
000022E2                            ; ---------------------------------------------------------------------------
000022E2                            ; Subroutines to load pallets
000022E2                            ; ---------------------------------------------------------------------------
000022E2                            
000022E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022E2                            
000022E2                            
000022E2                            PalLoad1:
000022E2 43F9 0000 0000             		lea	(PalPointers).l,a1
000022E8 E748                       		lsl.w	#3,d0
000022EA D2C0                       		adda.w	d0,a1
000022EC 2459                       		movea.l	(a1)+,a2
000022EE 3659                       		movea.w	(a1)+,a3
000022F0 D6FC 0080                  		adda.w	#$80,a3
000022F4 3E19                       		move.w	(a1)+,d7
000022F6                            
000022F6                            loc_2110:
000022F6 26DA                       		move.l	(a2)+,(a3)+
000022F8 51CF FFFC                  		dbf	d7,loc_2110
000022FC 4E75                       		rts	
000022FE                            ; End of function PalLoad1
000022FE                            
000022FE                            
000022FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022FE                            
000022FE                            
000022FE                            PalLoad2:
000022FE 43F9 0000 0000             		lea	(PalPointers).l,a1
00002304 E748                       		lsl.w	#3,d0
00002306 D2C0                       		adda.w	d0,a1
00002308 2459                       		movea.l	(a1)+,a2
0000230A 3659                       		movea.w	(a1)+,a3
0000230C 3E19                       		move.w	(a1)+,d7
0000230E                            
0000230E                            loc_2128:
0000230E 26DA                       		move.l	(a2)+,(a3)+
00002310 51CF FFFC                  		dbf	d7,loc_2128
00002314 4E75                       		rts	
00002316                            ; End of function PalLoad2
00002316                            
00002316                            ; ---------------------------------------------------------------------------
00002316                            ; Underwater pallet loading subroutine
00002316                            ; ---------------------------------------------------------------------------
00002316                            
00002316                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002316                            
00002316                            
00002316                            PalLoad3_Water:
00002316 43F9 0000 0000             		lea	(PalPointers).l,a1
0000231C E748                       		lsl.w	#3,d0
0000231E D2C0                       		adda.w	d0,a1
00002320 2459                       		movea.l	(a1)+,a2
00002322 3659                       		movea.w	(a1)+,a3
00002324 96FC 0080                  		suba.w	#$80,a3
00002328 3E19                       		move.w	(a1)+,d7
0000232A                            
0000232A                            loc_2144:
0000232A 26DA                       		move.l	(a2)+,(a3)+
0000232C 51CF FFFC                  		dbf	d7,loc_2144
00002330 4E75                       		rts	
00002332                            ; End of function PalLoad3_Water
00002332                            
00002332                            
00002332                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002332                            
00002332                            
00002332                            PalLoad4_Water:
00002332 43F9 0000 0000             		lea	(PalPointers).l,a1
00002338 E748                       		lsl.w	#3,d0
0000233A D2C0                       		adda.w	d0,a1
0000233C 2459                       		movea.l	(a1)+,a2
0000233E 3659                       		movea.w	(a1)+,a3
00002340 96FC 0100                  		suba.w	#$100,a3
00002344 3E19                       		move.w	(a1)+,d7
00002346                            
00002346                            loc_2160:
00002346 26DA                       		move.l	(a2)+,(a3)+
00002348 51CF FFFC                  		dbf	d7,loc_2160
0000234C 4E75                       		rts	
0000234E                            ; End of function PalLoad4_Water
0000234E                            
0000234E                            ; ===========================================================================
0000234E                            ; ---------------------------------------------------------------------------
0000234E                            ; Pallet pointers
0000234E                            ; ---------------------------------------------------------------------------
0000234E                            PalPointers:
0000234E                            	include "_inc\Pallet pointers.asm"
0000234E                            ; ---------------------------------------------------------------------------
0000234E                            ; Pallet pointers
0000234E                            ; ---------------------------------------------------------------------------
0000234E 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002352 FB00                       	dc.w $FB00		; RAM address
00002354 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002356 0000 0000                  	dc.l Pal_Title
0000235A FB00                       	dc.w $FB00
0000235C 001F                       	dc.w $1F
0000235E 0000 0000                  	dc.l Pal_LevelSel
00002362 FB00                       	dc.w $FB00
00002364 001F                       	dc.w $1F
00002366 0000 0000                  	dc.l Pal_Sonic
0000236A FB00                       	dc.w $FB00
0000236C 0007                       	dc.w 7
0000236E 0000 0000                  	dc.l Pal_GHZ
00002372 FB20                       	dc.w $FB20
00002374 0017                       	dc.w $17
00002376 0000 0000                  	dc.l Pal_LZ
0000237A FB20                       	dc.w $FB20
0000237C 0017                       	dc.w $17
0000237E 0000 0000                  	dc.l Pal_MZ
00002382 FB20                       	dc.w $FB20
00002384 0017                       	dc.w $17
00002386 0000 0000                  	dc.l Pal_SLZ
0000238A FB20                       	dc.w $FB20
0000238C 0017                       	dc.w $17
0000238E 0000 0000                  	dc.l Pal_SYZ
00002392 FB20                       	dc.w $FB20
00002394 0017                       	dc.w $17
00002396 0000 0000                  	dc.l Pal_SBZ1
0000239A FB20                       	dc.w $FB20
0000239C 0017                       	dc.w $17
0000239E 0000 0000                  	dc.l Pal_Special
000023A2 FB00                       	dc.w $FB00
000023A4 001F                       	dc.w $1F
000023A6 0000 0000                  	dc.l Pal_LZWater
000023AA FB00                       	dc.w $FB00
000023AC 001F                       	dc.w $1F
000023AE 0000 0000                  	dc.l Pal_SBZ3
000023B2 FB20                       	dc.w $FB20
000023B4 0017                       	dc.w $17
000023B6 0000 0000                  	dc.l Pal_SBZ3Water
000023BA FB00                       	dc.w $FB00
000023BC 001F                       	dc.w $1F
000023BE 0000 0000                  	dc.l Pal_SBZ2
000023C2 FB20                       	dc.w $FB20
000023C4 0017                       	dc.w $17
000023C6 0000 0000                  	dc.l Pal_LZSonWater
000023CA FB00                       	dc.w $FB00
000023CC 0007                       	dc.w 7
000023CE 0000 0000                  	dc.l Pal_SBZ3SonWat
000023D2 FB00                       	dc.w $FB00
000023D4 0007                       	dc.w 7
000023D6 0000 0000                  	dc.l Pal_SpeResult
000023DA FB00                       	dc.w $FB00
000023DC 001F                       	dc.w $1F
000023DE 0000 0000                  	dc.l Pal_SpeContinue
000023E2 FB00                       	dc.w $FB00
000023E4 000F                       	dc.w $F
000023E6 0000 0000                  	dc.l Pal_Ending
000023EA FB00                       	dc.w $FB00
000023EC 001F                       	dc.w $1F
000023EE 0000 0000                  	dc.l Pal_Idiot
000023F2 FB20                       	dc.w $FB20
000023F4 0007                       	dc.w 7
000023F4 0007                       	dc.w 7
000023F6                            
000023F6                            ; ---------------------------------------------------------------------------
000023F6                            ; Pallet data
000023F6                            ; ---------------------------------------------------------------------------
000023F6                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002476                            Pal_Title:	incbin	pallet\title.bin
000024F6                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002576                            Pal_Sonic:	incbin	pallet\sonic.bin
00002596                            Pal_GHZ:	incbin	pallet\ghz.bin
000025F6                            Pal_LZ:		incbin	pallet\lz.bin
00002656                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000026D6                            Pal_MZ:		incbin	pallet\mz.bin
00002736                            Pal_SLZ:	incbin	pallet\slz.bin
00002796                            Pal_SYZ:	incbin	pallet\syz.bin
000027F6                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002856                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028B6                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002936                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
00002996                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A16                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A36                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A56                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002AD6                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B16                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002B96                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002BB6                            
00002BB6                            ; ---------------------------------------------------------------------------
00002BB6                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002BB6                            ; ---------------------------------------------------------------------------
00002BB6                            
00002BB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BB6                            
00002BB6                            
00002BB6                            DelayProgram:				; XREF: PauseGame
00002BB6 46FC 2300                  		move	#$2300,sr
00002BBA                            
00002BBA                            loc_29AC:
00002BBA 4A38 F62A                  		tst.b	($FFFFF62A).w
00002BBE 66FA                       		bne.s	loc_29AC
00002BC0 4E75                       		rts	
00002BC2                            ; End of function DelayProgram
00002BC2                            
00002BC2                            ; ---------------------------------------------------------------------------
00002BC2                            ; Subroutine to	generate a pseudo-random number	in d0
00002BC2                            ; ---------------------------------------------------------------------------
00002BC2                            
00002BC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BC2                            
00002BC2                            
00002BC2                            RandomNumber:
00002BC2 2238 F636                  		move.l	($FFFFF636).w,d1
00002BC6 6600                       		bne.s	loc_29C0
00002BC8 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002BCE                            
00002BCE                            loc_29C0:
00002BCE 2001                       		move.l	d1,d0
00002BD0 E581                       		asl.l	#2,d1
00002BD2 D280                       		add.l	d0,d1
00002BD4 E781                       		asl.l	#3,d1
00002BD6 D280                       		add.l	d0,d1
00002BD8 3001                       		move.w	d1,d0
00002BDA 4841                       		swap	d1
00002BDC D041                       		add.w	d1,d0
00002BDE 3200                       		move.w	d0,d1
00002BE0 4841                       		swap	d1
00002BE2 21C1 F636                  		move.l	d1,($FFFFF636).w
00002BE6 4E75                       		rts	
00002BE8                            ; End of function RandomNumber
00002BE8                            
00002BE8                            
00002BE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BE8                            
00002BE8                            
00002BE8                            CalcSine:				; XREF: SS_BGAnimate; et al
00002BE8 0240 00FF                  		andi.w	#$FF,d0
00002BEC D040                       		add.w	d0,d0
00002BEE 0640 0080                  		addi.w	#$80,d0
00002BF2 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002BF6 0440 0080                  		subi.w	#$80,d0
00002BFA 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002BFE 4E75                       		rts	
00002C00                            ; End of function CalcSine
00002C00                            
00002C00                            ; ===========================================================================
00002C00                            
00002C00                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002E80                            
00002E80                            ; ===========================================================================
00002E80 48E7 6000                  		movem.l	d1-d2,-(sp)
00002E84 3200                       		move.w	d0,d1
00002E86 4841                       		swap	d1
00002E88 7000                       		moveq	#0,d0
00002E8A 3200                       		move.w	d0,d1
00002E8C 7407                       		moveq	#7,d2
00002E8E                            
00002E8E                            loc_2C80:
00002E8E E599                       		rol.l	#2,d1
00002E90 D040                       		add.w	d0,d0
00002E92 5240                       		addq.w	#1,d0
00002E94 9240                       		sub.w	d0,d1
00002E96 6400                       		bcc.s	loc_2C9A
00002E98 D240                       		add.w	d0,d1
00002E9A 5340                       		subq.w	#1,d0
00002E9C 51CA FFF0                  		dbf	d2,loc_2C80
00002EA0 E248                       		lsr.w	#1,d0
00002EA2 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002EA6 4E75                       		rts	
00002EA8                            ; ===========================================================================
00002EA8                            
00002EA8                            loc_2C9A:
00002EA8 5240                       		addq.w	#1,d0
00002EAA 51CA FFE2                  		dbf	d2,loc_2C80
00002EAE E248                       		lsr.w	#1,d0
00002EB0 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002EB4 4E75                       		rts	
00002EB6                            
00002EB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002EB6                            
00002EB6                            
00002EB6                            CalcAngle:
00002EB6 48E7 1800                  		movem.l	d3-d4,-(sp)
00002EBA 7600                       		moveq	#0,d3
00002EBC 7800                       		moveq	#0,d4
00002EBE 3601                       		move.w	d1,d3
00002EC0 3802                       		move.w	d2,d4
00002EC2 8843                       		or.w	d3,d4
00002EC4 6700                       		beq.s	loc_2D04
00002EC6 3802                       		move.w	d2,d4
00002EC8 4A43                       		tst.w	d3
00002ECA 6A00 0000                  		bpl.w	loc_2CC2
00002ECE 4443                       		neg.w	d3
00002ED0                            
00002ED0                            loc_2CC2:
00002ED0 4A44                       		tst.w	d4
00002ED2 6A00 0000                  		bpl.w	loc_2CCA
00002ED6 4444                       		neg.w	d4
00002ED8                            
00002ED8                            loc_2CCA:
00002ED8 B843                       		cmp.w	d3,d4
00002EDA 6400 0000                  		bcc.w	loc_2CDC
00002EDE E18C                       		lsl.l	#8,d4
00002EE0 88C3                       		divu.w	d3,d4
00002EE2 7000                       		moveq	#0,d0
00002EE4 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002EE8 6000                       		bra.s	loc_2CE6
00002EEA                            ; ===========================================================================
00002EEA                            
00002EEA                            loc_2CDC:				; XREF: CalcAngle
00002EEA E18B                       		lsl.l	#8,d3
00002EEC 86C4                       		divu.w	d4,d3
00002EEE 7040                       		moveq	#$40,d0
00002EF0 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002EF4                            
00002EF4                            loc_2CE6:
00002EF4 4A41                       		tst.w	d1
00002EF6 6A00 0000                  		bpl.w	loc_2CF2
00002EFA 4440                       		neg.w	d0
00002EFC 0640 0080                  		addi.w	#$80,d0
00002F00                            
00002F00                            loc_2CF2:
00002F00 4A42                       		tst.w	d2
00002F02 6A00 0000                  		bpl.w	loc_2CFE
00002F06 4440                       		neg.w	d0
00002F08 0640 0100                  		addi.w	#$100,d0
00002F0C                            
00002F0C                            loc_2CFE:
00002F0C 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F10 4E75                       		rts	
00002F12                            ; ===========================================================================
00002F12                            
00002F12                            loc_2D04:				; XREF: CalcAngle
00002F12 303C 0040                  		move.w	#$40,d0
00002F16 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F1A 4E75                       		rts	
00002F1C                            ; End of function CalcAngle
00002F1C                            
00002F1C                            ; ===========================================================================
00002F1C                            
00002F1C                            Angle_Data:	incbin	misc\angles.bin
0000301E                            
0000301E                            ; ===========================================================================
0000301E                            
0000301E                            ; ---------------------------------------------------------------------------
0000301E                            ; Sega screen
0000301E                            ; ---------------------------------------------------------------------------
0000301E                            
0000301E                            SegaScreen:				; XREF: GameModeArray
0000301E 103C 00E4                  		move.b	#$E4,d0
00003022 6100 E598                  		bsr.w	PlaySound_Special ; stop music
00003026 6100 E7D6                  		bsr.w	ClearPLC
0000302A 6100 F00C                  		bsr.w	Pal_FadeFrom
0000302E 4DF9 00C0 0004             		lea	($C00004).l,a6
00003034 3CBC 8004                  		move.w	#$8004,(a6)
00003038 3CBC 8230                  		move.w	#$8230,(a6)
0000303C 3CBC 8407                  		move.w	#$8407,(a6)
00003040 3CBC 8700                  		move.w	#$8700,(a6)
00003044 3CBC 8B00                  		move.w	#$8B00,(a6)
00003048 4238 F64E                  		clr.b	($FFFFF64E).w
0000304C 46FC 2700                  		move	#$2700,sr
00003050 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003054 0200 00BF                  		andi.b	#$BF,d0
00003058 33C0 00C0 0004             		move.w	d0,($C00004).l
0000305E 6100 E484                  		bsr.w	ClearScreen
00003062 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000306C 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003072 6100 E5EC                  		bsr.w	NemDec
00003076 43F9 00FF 0000             		lea	($FF0000).l,a1
0000307C 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003082 303C 0000                  		move.w	#0,d0
00003086 6100 E8B6                  		bsr.w	EniDec
0000308A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003090 203C 6510 0003             		move.l	#$65100003,d0
00003096 7217                       		moveq	#$17,d1
00003098 7407                       		moveq	#7,d2
0000309A 6100 E5A4                  		bsr.w	ShowVDPGraphics
0000309E 43F9 00FF 0180             		lea	($FF0180).l,a1
000030A4 203C 4000 0003             		move.l	#$40000003,d0
000030AA 7227                       		moveq	#$27,d1
000030AC 741B                       		moveq	#$1B,d2
000030AE 6100 E590                  		bsr.w	ShowVDPGraphics
000030B2 7000                       		moveq	#0,d0
000030B4 6100 F248                  		bsr.w	PalLoad2	; load Sega logo pallet
000030B8 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000030BE 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000030C4 31FC 0000 F662             		move.w	#0,($FFFFF662).w
000030CA 31FC 0000 F660             		move.w	#0,($FFFFF660).w
000030D0 3038 F60C                  		move.w	($FFFFF60C).w,d0
000030D4 0000 0040                  		ori.b	#$40,d0
000030D8 33C0 00C0 0004             		move.w	d0,($C00004).l
000030DE                            
000030DE                            Sega_WaitPallet:
000030DE 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000030E4 6100 FAD0                  		bsr.w	DelayProgram
000030E8 6100 F106                  		bsr.w	PalCycle_Sega
000030EC 66F0                       		bne.s	Sega_WaitPallet
000030EE                            
000030EE 103C 00E1                  		move.b	#$E1,d0
000030F2 6100 E4C8                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
000030F6 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
000030FC 6100 FAB8                  		bsr.w	DelayProgram
00003100 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003106                            
00003106                            Sega_WaitEnd:
00003106 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000310C 6100 FAA8                  		bsr.w	DelayProgram
00003110 4A78 F614                  		tst.w	($FFFFF614).w
00003114 6700                       		beq.s	Sega_GotoTitle
00003116 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000311C 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
0000311E                            
0000311E                            Sega_GotoTitle:
0000311E 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00003124 4E75                       		rts	
00003126                            ; ===========================================================================
00003126                            
00003126                            ; ---------------------------------------------------------------------------
00003126                            ; Title	screen
00003126                            ; ---------------------------------------------------------------------------
00003126                            
00003126                            TitleScreen:				; XREF: GameModeArray
00003126 103C 00E4                  		move.b	#$E4,d0
0000312A 6100 E490                  		bsr.w	PlaySound_Special ; stop music
0000312E 6100 E6CE                  		bsr.w	ClearPLC
00003132 6100 EF04                  		bsr.w	Pal_FadeFrom
00003136 46FC 2700                  		move	#$2700,sr
0000313A 6100 E436                  		bsr.w	SoundDriverLoad
0000313E 4DF9 00C0 0004             		lea	($C00004).l,a6
00003144 3CBC 8004                  		move.w	#$8004,(a6)
00003148 3CBC 8230                  		move.w	#$8230,(a6)
0000314C 3CBC 8407                  		move.w	#$8407,(a6)
00003150 3CBC 9001                  		move.w	#$9001,(a6)
00003154 3CBC 9200                  		move.w	#$9200,(a6)
00003158 3CBC 8B03                  		move.w	#$8B03,(a6)
0000315C 3CBC 8720                  		move.w	#$8720,(a6)
00003160 4238 F64E                  		clr.b	($FFFFF64E).w
00003164 6100 E37E                  		bsr.w	ClearScreen
00003168 43F8 D000                  		lea	($FFFFD000).w,a1
0000316C 7000                       		moveq	#0,d0
0000316E 323C 07FF                  		move.w	#$7FF,d1
00003172                            
00003172                            Title_ClrObjRam:
00003172 22C0                       		move.l	d0,(a1)+
00003174 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00003178                            
00003178 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003182 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003188 6100 E4D6                  		bsr.w	NemDec
0000318C 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003196 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
0000319C 6100 E4C2                  		bsr.w	NemDec
000031A0 43F9 00FF 0000             		lea	($FF0000).l,a1
000031A6 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
000031AC 303C 0000                  		move.w	#0,d0
000031B0 6100 E78C                  		bsr.w	EniDec
000031B4 43F9 00FF 0000             		lea	($FF0000).l,a1
000031BA 203C 4000 0003             		move.l	#$40000003,d0
000031C0 7227                       		moveq	#$27,d1
000031C2 741B                       		moveq	#$1B,d2
000031C4 6100 E47A                  		bsr.w	ShowVDPGraphics
000031C8 43F8 FB80                  		lea	($FFFFFB80).w,a1
000031CC 7000                       		moveq	#0,d0
000031CE 323C 001F                  		move.w	#$1F,d1
000031D2                            
000031D2                            Title_ClrPallet:
000031D2 22C0                       		move.l	d0,(a1)+
000031D4 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
000031D8                            
000031D8 7003                       		moveq	#3,d0		; load Sonic's pallet
000031DA 6100 F106                  		bsr.w	PalLoad1
000031DE 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
000031E4 4EB9 0000 0000             		jsr	ObjectsLoad
000031EA 4EB9 0000 0000             		jsr	BuildSprites
000031F0 6100 EDA0                  		bsr.w	Pal_FadeTo
000031F4 46FC 2700                  		move	#$2700,sr
000031F8 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00003202 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003208 6100 E456                  		bsr.w	NemDec
0000320C 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003216 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
0000321C 6100 E442                  		bsr.w	NemDec
00003220 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
0000322A 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003230 6100 E42E                  		bsr.w	NemDec
00003234 4DF9 00C0 0000             		lea	($C00000).l,a6
0000323A 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003242 4BF9 0000 05F0             		lea	(Art_Text).l,a5
00003248 323C 0BB3                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
0000324C                            
0000324C                            Title_LoadText:
0000324C 2C9D                       		move.l	(a5)+,(a6)
0000324E 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003252                            
00003252 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003258 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
0000325E 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003264 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
0000326A 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003270 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003276 6100 0000                  		bsr.w	LevelSizeLoad
0000327A 6100 0000                  		bsr.w	DeformBgLayer
0000327E 43F8 B000                  		lea	($FFFFB000).w,a1
00003282 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003288 303C 0000                  		move.w	#0,d0
0000328C 6100 E6B0                  		bsr.w	EniDec
00003290 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003296 43F9 00FF 0000             		lea	($FF0000).l,a1
0000329C 6100 E81E                  		bsr.w	KosDec
000032A0 6100 0000                  		bsr.w	LevelLayoutLoad
000032A4 6100 ED92                  		bsr.w	Pal_FadeFrom
000032A8 46FC 2700                  		move	#$2700,sr
000032AC 6100 E236                  		bsr.w	ClearScreen
000032B0 4BF9 00C0 0004             		lea	($C00004).l,a5
000032B6 4DF9 00C0 0000             		lea	($C00000).l,a6
000032BC 47F8 F708                  		lea	($FFFFF708).w,a3
000032C0 49F8 A440                  		lea	($FFFFA440).w,a4
000032C4 343C 6000                  		move.w	#$6000,d2
000032C8 6100 0000                  		bsr.w	LoadTilesFromStart2
000032CC 43F9 00FF 0000             		lea	($FF0000).l,a1
000032D2 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000032D8 303C 0000                  		move.w	#0,d0
000032DC 6100 E660                  		bsr.w	EniDec
000032E0 43F9 00FF 0000             		lea	($FF0000).l,a1
000032E6 203C 4206 0003             		move.l	#$42060003,d0
000032EC 7221                       		moveq	#$21,d1
000032EE 7415                       		moveq	#$15,d2
000032F0 6100 E34E                  		bsr.w	ShowVDPGraphics
000032F4 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000032FE 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
00003304 6100 E35A                  		bsr.w	NemDec
00003308 7001                       		moveq	#1,d0		; load title screen pallet
0000330A 6100 EFD6                  		bsr.w	PalLoad1
0000330E 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003312 6100 E2A8                  		bsr.w	PlaySound_Special
00003316 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
0000331C 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003322 43F8 D080                  		lea	($FFFFD080).w,a1
00003326 7000                       		moveq	#0,d0
00003328 323C 0007                  		move.w	#7,d1
0000332C                            
0000332C                            Title_ClrObjRam2:
0000332C 22C0                       		move.l	d0,(a1)+
0000332E 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003332                            
00003332 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003338 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
0000333E 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003344 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0000334A 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003350 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003356 4EB9 0000 0000             		jsr	ObjectsLoad
0000335C 6100 0000                  		bsr.w	DeformBgLayer
00003360 4EB9 0000 0000             		jsr	BuildSprites
00003366 7000                       		moveq	#0,d0
00003368 6100 E468                  		bsr.w	LoadPLC2
0000336C 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003372 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003378 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000337C 0000 0040                  		ori.b	#$40,d0
00003380 33C0 00C0 0004             		move.w	d0,($C00004).l
00003386 6100 EC0A                  		bsr.w	Pal_FadeTo
0000338A                            
0000338A                            loc_317C:
0000338A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003390 6100 F824                  		bsr.w	DelayProgram
00003394 4EB9 0000 0000             		jsr	ObjectsLoad
0000339A 6100 0000                  		bsr.w	DeformBgLayer
0000339E 4EB9 0000 0000             		jsr	BuildSprites
000033A4 6100 E7D6                  		bsr.w	PalCycle_Title
000033A8 6100 E462                  		bsr.w	RunPLC_RAM
000033AC 3038 D008                  		move.w	($FFFFD008).w,d0
000033B0 5440                       		addq.w	#2,d0
000033B2 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
000033B6 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
000033BA 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000033BC 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000033C2 4E75                       		rts	
000033C4                            ; ===========================================================================
000033C4                            
000033C4                            Title_ChkRegion:
000033C4 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
000033C8 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
000033CA 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
000033D0 6000                       		bra.s	Title_EnterCheat
000033D2                            ; ===========================================================================
000033D2                            
000033D2                            Title_RegionJ:				; XREF: Title_ChkRegion
000033D2 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
000033D8                            
000033D8                            Title_EnterCheat:			; XREF: Title_ChkRegion
000033D8 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000033DC D0C0                       		adda.w	d0,a0
000033DE 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
000033E2 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
000033E6 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000033E8 6600                       		bne.s	loc_3210	; if not, branch
000033EA 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
000033EE 4A00                       		tst.b	d0
000033F0 6600                       		bne.s	Title_CountC
000033F2 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000033F6 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000033FA E249                       		lsr.w	#1,d1
000033FC 0241 0003                  		andi.w	#3,d1
00003400 6700                       		beq.s	Title_PlayRing
00003402 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003406 6A00                       		bpl.s	Title_PlayRing
00003408 7201                       		moveq	#1,d1
0000340A 1181 1001                  		move.b	d1,1(a0,d1.w)
0000340E                            
0000340E                            Title_PlayRing:
0000340E 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003414 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003418 6100 E1A2                  		bsr.w	PlaySound_Special
0000341C 6000                       		bra.s	Title_CountC
0000341E                            ; ===========================================================================
0000341E                            
0000341E                            loc_3210:				; XREF: Title_EnterCheat
0000341E 4A00                       		tst.b	d0
00003420 6700                       		beq.s	Title_CountC
00003422 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003428 6700                       		beq.s	Title_CountC
0000342A 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003430                            
00003430                            Title_CountC:
00003430 1038 F605                  		move.b	($FFFFF605).w,d0
00003434 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003438 6700                       		beq.s	loc_3230	; if not, branch
0000343A 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
0000343E                            
0000343E                            loc_3230:
0000343E 4A78 F614                  		tst.w	($FFFFF614).w
00003442 6700 0000                  		beq.w	Demo
00003446 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
0000344C 6700 FF3C                  		beq.w	loc_317C	; if not, branch
00003450                            
00003450                            Title_ChkLevSel:
00003450 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003454 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003458 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
0000345E 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003462 7002                       		moveq	#2,d0
00003464 6100 EE98                  		bsr.w	PalLoad2	; load level select pallet
00003468 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000346C 7000                       		moveq	#0,d0
0000346E 323C 00DF                  		move.w	#$DF,d1
00003472                            
00003472                            Title_ClrScroll:
00003472 22C0                       		move.l	d0,(a1)+
00003474 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003478                            
00003478 21C0 F616                  		move.l	d0,($FFFFF616).w
0000347C 46FC 2700                  		move	#$2700,sr
00003480 4DF9 00C0 0000             		lea	($C00000).l,a6
00003486 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003490 323C 03FF                  		move.w	#$3FF,d1
00003494                            
00003494                            Title_ClrVram:
00003494 2C80                       		move.l	d0,(a6)
00003496 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000349A                            
0000349A 6100 0000                  		bsr.w	LevSelTextLoad
0000349E                            		
0000349E                            		; sound test fix
0000349E 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000034A2 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
000034A8 363C E65F                  		move.w	#$E680-$21,d3
000034AC 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
000034B0 31C6 FF82                  		move.w	d6,($FFFFFF82).w
000034B4 6000 0000                  		bra.w	LevelSelect
000034B8                            ; ---------------------------------------------------------------------------
000034B8                            ; Level	Select
000034B8                            ; ---------------------------------------------------------------------------
000034B8                            YouAreAnIdiot:
000034B8 6100 E02A                  		bsr.w	ClearScreen
000034BC                            		
000034BC 4DF9 00C0 0004             		lea	($C00004).l,a6
000034C2 3CBC 8700                  		move.w	#$8700,(a6) ; first colour is bg now
000034C6                            		
000034C6 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000034D0 41F9 0000 0000             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
000034D6 6100 E188                  		bsr.w	NemDec
000034DA 43F9 00FF 0000             		lea	($FF0000).l,a1
000034E0 41F9 0000 0000             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
000034E6 303C 0000                  		move.w	#0,d0
000034EA 6100 E452                  		bsr.w	EniDec
000034EE 43F9 00FF 0000             		lea	($FF0000).l,a1
000034F4 203C 4304 0003             		move.l	#$43040003,d0
000034FA 7223                       		moveq	#35,d1
000034FC 740D                       		moveq	#13,d2
000034FE 6100 E140                  		bsr.w	ShowVDPGraphics
00003502 7014                       		moveq	#20,d0
00003504 6100 EDF8                  		bsr.w	PalLoad2	; load Sega logo pallet
00003508                            		
00003508 303C 00E5                  		move.w	#$E5,d0		; YOU ARE AN IDIOT BOOM
0000350C 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
00003510                            	@wait:
00003510 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003516 6100 F69E                  		bsr.w	DelayProgram
0000351A 60F4                       		bra.s	@wait
0000351C                            LevelSelect:
0000351C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003522 6100 F692                  		bsr.w	DelayProgram
00003526 6100 0000                  		bsr.w	LevSelControls
0000352A 6100 E2E0                  		bsr.w	RunPLC_RAM
0000352E 4AB8 F680                  		tst.l	($FFFFF680).w
00003532 66E8                       		bne.s	LevelSelect
00003534 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
0000353A 67E0                       		beq.s	LevelSelect	; if not, branch
0000353C 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003540 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
00003544 6700 FF72                  		beq.w	YouAreAnIdiot	; if not, dont blow this place up
00003548                            		
00003548 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
0000354C 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
0000354E                            		
0000354E 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003552 0640 0080                  		addi.w	#$80,d0
00003556 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
0000355A                            		
0000355A 4EB9 0000 0000             		jsr		ShowNow_Playing
00003560 60BA                       		bra.s	LevelSelect
00003562                            ; ===========================================================================
00003562                            
00003562                            LevSel_Ending:				; XREF: LevelSelect
00003562 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003568 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
0000356E 4E75                       		rts	
00003570                            ; ===========================================================================
00003570                            
00003570                            LevSel_Credits:				; XREF: LevelSelect
00003570 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003576 103C 0091                  		move.b	#$91,d0
0000357A 6100 E040                  		bsr.w	PlaySound_Special ; play credits music
0000357E 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003584 4E75                       		rts	
00003586                            ; ===========================================================================
00003586                            
00003586                            LevSel_Level_SS:			; XREF: LevelSelect
00003586 D040                       		add.w	d0,d0
00003588 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
0000358C 6B00 FF8E                  		bmi.w	LevelSelect
00003590 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003594 6600                       		bne.s	LevSel_Level	; if not, branch
00003596 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000359C 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
000035A0 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000035A6 7000                       		moveq	#0,d0
000035A8 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000035AC 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000035B0 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000035B4 4E75                       		rts	
000035B6                            ; ===========================================================================
000035B6                            
000035B6                            LevSel_Level:				; XREF: LevSel_Level_SS
000035B6 0240 3FFF                  		andi.w	#$3FFF,d0
000035BA 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
000035BE                            
000035BE                            PlayLevel:				; XREF: ROM:00003246j ...
000035BE 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000035C4 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000035CA 7000                       		moveq	#0,d0
000035CC 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000035D0 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000035D4 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000035D8 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
000035DC 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
000035E0 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
000035E4 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
000035E8 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
000035EC 103C 00E0                  		move.b	#$E0,d0
000035F0 6100 DFCA                  		bsr.w	PlaySound_Special ; fade out music
000035F4 4E75                       		rts	
000035F6                            ; ===========================================================================
000035F6                            ; ---------------------------------------------------------------------------
000035F6                            ; Level	select - level pointers
000035F6                            ; ---------------------------------------------------------------------------
000035F6                            LSelectPointers:
000035F6                            		incbin	misc\ls_point.bin
00003620                            		even
00003620                            ; ---------------------------------------------------------------------------
00003620                            ; Level	select codes
00003620                            ; ---------------------------------------------------------------------------
00003620                            LevelSelectCode_J:
00003620                            		incbin	misc\ls_jcode.bin
00003626                            		even
00003626                            
00003626                            LevelSelectCode_US:
00003626                            		incbin	misc\ls_ucode.bin
0000362C                            		even
0000362C                            ; ===========================================================================
0000362C                            
0000362C                            ; ---------------------------------------------------------------------------
0000362C                            ; Demo mode
0000362C                            ; ---------------------------------------------------------------------------
0000362C                            
0000362C                            Demo:					; XREF: TitleScreen
0000362C 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003632                            
00003632                            loc_33B6:				; XREF: loc_33E4
00003632 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003638 6100 F57C                  		bsr.w	DelayProgram
0000363C 6100 0000                  		bsr.w	DeformBgLayer
00003640 6100 E51A                  		bsr.w	PalCycle_Load
00003644 6100 E1C6                  		bsr.w	RunPLC_RAM
00003648 3038 D008                  		move.w	($FFFFD008).w,d0
0000364C 5440                       		addq.w	#2,d0
0000364E 31C0 D008                  		move.w	d0,($FFFFD008).w
00003652 0C40 1C00                  		cmpi.w	#$1C00,d0
00003656 6500                       		bcs.s	loc_33E4
00003658 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
0000365E 4E75                       		rts	
00003660                            ; ===========================================================================
00003660                            
00003660                            loc_33E4:				; XREF: Demo
00003660 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003666 6600 FDE8                  		bne.w	Title_ChkLevSel	; if yes, branch
0000366A 4A78 F614                  		tst.w	($FFFFF614).w
0000366E 6600 FFC2                  		bne.w	loc_33B6
00003672 103C 00E0                  		move.b	#$E0,d0
00003676 6100 DF44                  		bsr.w	PlaySound_Special ; fade out music
0000367A 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
0000367E 0240 0007                  		andi.w	#7,d0
00003682 D040                       		add.w	d0,d0
00003684 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003688 31C0 FE10                  		move.w	d0,($FFFFFE10).w
0000368C 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003690 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003696 6500                       		bcs.s	loc_3422	; if yes, branch
00003698 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
0000369E                            
0000369E                            loc_3422:
0000369E 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
000036A4 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
000036AA 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000036AE 6600                       		bne.s	Demo_Level	; if not, branch
000036B0 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000036B6 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
000036BA 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
000036BE                            
000036BE                            Demo_Level:
000036BE 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000036C4 7000                       		moveq	#0,d0
000036C6 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000036CA 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000036CE 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000036D2 4E75                       		rts	
000036D4                            ; ===========================================================================
000036D4                            ; ---------------------------------------------------------------------------
000036D4                            ; Levels used in demos
000036D4                            ; ---------------------------------------------------------------------------
000036D4                            Demo_Levels:	incbin	misc\dm_ord1.bin
000036DC                            		even
000036DC                            
000036DC                            ; ---------------------------------------------------------------------------
000036DC                            ; Subroutine to	change what you're selecting in the level select
000036DC                            ; ---------------------------------------------------------------------------
000036DC                            
000036DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000036DC                            
000036DC                            
000036DC                            LevSelControls:				; XREF: LevelSelect
000036DC 1238 F605                  		move.b	($FFFFF605).w,d1
000036E0 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
000036E4 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000036E6 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
000036EA 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
000036EC                            
000036EC                            LevSel_UpDown:
000036EC 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
000036F2 1238 F604                  		move.b	($FFFFF604).w,d1
000036F6 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
000036FA 6700                       		beq.s	LevSel_SndTest	; if not, branch
000036FC 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003700 0801 0000                  		btst	#0,d1		; is up	pressed?
00003704 6700                       		beq.s	LevSel_Down	; if not, branch
00003706 5346                       		subq.w	#1,d6		; move up 1 selection
00003708 6400                       		bcc.s	LevSel_Down
0000370A 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
0000370C                            
0000370C                            LevSel_Down:
0000370C 0801 0001                  		btst	#1,d1		; is down pressed?
00003710 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003712 5246                       		addq.w	#1,d6		; move down 1 selection
00003714 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003718 6500                       		bcs.s	LevSel_Refresh
0000371A 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
0000371C 6000                       		bra.s	LevSel_Refresh
0000371E                            		
0000371E                            LevSel_GoLR:
0000371E 0801 0002                  		btst	#2,d1		; is left pressed?
00003722 6700                       		beq.s	LevSel_GoRight	; if not, branch
00003724 0446 0000                  		sub.w	#lsrow2size,d6
00003728 64E2                       		bcc.s	LevSel_Down
0000372A 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
0000372E 6000                       		bra.s	LevSel_Refresh
00003730                            LevSel_GoRight:
00003730 0646 0000                  		add.w	#lsrow1size,d6
00003734 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003738 6500                       		bcs.s	LevSel_Refresh
0000373A 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
0000373E                            ; ===========================================================================
0000373E                            LevSel_Refresh:
0000373E 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003742 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003746 363C C65F                  		move.w	#$C680-$21,d3
0000374A 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
0000374E 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003752 4E75                       		rts	
00003754                            		
00003754                            LevSel_SndTest:				; XREF: LevSelControls
00003754 1238 F605                  		move.b	($FFFFF605).w,d1
00003758 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
0000375C 6700                       		beq.s	LevSel_NoMove	; if not, branch
0000375E 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is	item $14 selected?
00003764 66B8                       		bne.s	LevSel_GoLR	; if not, branch
00003766                            		
00003766 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000376A 0801 0002                  		btst	#2,d1		; is left pressed?
0000376E 6700                       		beq.s	LevSel_Right	; if not, branch
00003770 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
00003772 6400                       		bcc.s	LevSel_Right
00003774 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
00003776                            
00003776                            LevSel_Right:
00003776 0801 0003                  		btst	#3,d1		; is right pressed?
0000377A 6700                       		beq.s	LevSel_Refresh2	; if not, branch
0000377C 5240                       		addq.w	#1,d0		; add 1	to sound test
0000377E 0C40 0050                  		cmpi.w	#$50,d0
00003782 6500                       		bcs.s	LevSel_Refresh2
00003784 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00003786                            
00003786                            LevSel_Refresh2:
00003786 363C C65F                  		move.w	#$C680-$21,d3
0000378A 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
0000378E 6000 0000                  		bra.w	LevSelSndTest	; refresh text
00003792                            
00003792                            LevSel_NoMove:
00003792 4E75                       		rts	
00003794                            ; End of function LevSelControls
00003794                            
00003794                            ; ---------------------------------------------------------------------------
00003794                            ; Subroutine to load level select text
00003794                            ; ---------------------------------------------------------------------------
00003794                            
00003794                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003794 =60860003                  lsscrpos = $60860003
00003794 =00240000                  lsoff = $240000
00003794 =64C00003                  lsstpos = lsscrpos+$43A0000
00003794                            
00003794                            LevSelTextLoad_loop:
00003794 2D44 0004                  		move.l	d4,4(a6)
00003798 6100 0000                  		bsr.w	LevSel_ChgLine
0000379C 0684 0080 0000             		addi.l	#$800000,d4
000037A2 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000037A6 4E75                       		rts
000037A8                            LevSelTextLoad:				; XREF: TitleScreen
000037A8 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000037AE 4DF9 00C0 0000             		lea	($C00000).l,a6
000037B4 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000037B8 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
000037BE                            		
000037BE 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
000037C2 61D0                       		bsr.s	LevSelTextLoad_loop
000037C4                            		
000037C4                            		
000037C4 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
000037CA 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
000037CE 61C4                       		bsr.s	LevSelTextLoad_loop
000037D0 363C C65F                  		move.w	#$C680-$21,d3
000037D4                            		
000037D4                            LevSelHighlightCode:
000037D4 4DF9 00C0 0000             		lea	($C00000).l,a6
000037DA 7000                       		moveq	#0,d0
000037DC 3038 FF82                  		move.w	($FFFFFF82).w,d0
000037E0 3200                       		move.w	d0,d1
000037E2 283C 6086 0003             		move.l	#lsscrpos,d4
000037E8                            		
000037E8 0C40 0000                  		cmpi.w	#lsrow1size,d0
000037EC 6D00                       		blt.s	@notsecond
000037EE                            		
000037EE 0440 0000                  		sub.w	#lsrow1size,d0
000037F2 0684 0024 0000             		addi.l	#lsoff,d4
000037F8                            	@notsecond:
000037F8 EF48                       		lsl.w	#7,d0
000037FA 4840                       		swap	d0
000037FC D880                       		add.l	d0,d4
000037FE 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003804 E749                       		lsl.w	#3,d1
00003806 D241                       		add.w	d1,d1
00003808 D2C1                       		adda.w	d1,a1
0000380A 2D44 0004                  		move.l	d4,4(a6)
0000380E 6100 0000                  		bsr.w	LevSel_ChgLine
00003812 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003818 6700                       		beq.s	LevSelSndTest
0000381A 4E75                       		rts
0000381C                            
0000381C                            LevSelSndTest:
0000381C 0643 0030                  		add.w	#$30,d3
00003820 23FC 64C0 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
0000382A 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000382E 0640 0080                  		addi.w	#$80,d0
00003832 1400                       		move.b	d0,d2
00003834 E808                       		lsr.b	#4,d0
00003836 6100 0000                  		bsr.w	LevSel_ChgSnd
0000383A 1002                       		move.b	d2,d0
0000383C 6100 0000                  		bsr.w	LevSel_ChgSnd
00003840 4E75                       		rts	
00003842                            ; End of function LevSelTextLoad
00003842                            
00003842                            
00003842                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003842                            
00003842                            
00003842                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003842 0240 000F                  		andi.w	#$F,d0
00003846 0C00 000A                  		cmpi.b	#$A,d0
0000384A 6500                       		bcs.s	loc_3580
0000384C 5E00                       		addi.b	#7,d0
0000384E                            
0000384E                            loc_3580:
0000384E D043                       		add.w	d3,d0
00003850 3C80                       		move.w	d0,(a6)
00003852 4E75                       		rts	
00003854                            ; End of function LevSel_ChgSnd
00003854                            
00003854                            
00003854                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003854                            
00003854                            
00003854                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003854 740F                       		moveq	#$10-1,d2		; number of characters per line
00003856                            
00003856                            @loop:
00003856 7000                       		moveq	#0,d0
00003858 1019                       		move.b	(a1)+,d0
0000385A 0C00 0020                  		cmpi.b	#$20,d0
0000385E 6E00                       		bgt.s	@draw
00003860 3CBC 0000                  		move.w	#0,(a6)
00003864 51CA FFF0                  		dbf	d2,@loop
00003868 4E75                       		rts	
0000386A                            ; ===========================================================================
0000386A                            
0000386A                            @draw:				; XREF: LevSel_ChgLine
0000386A D043                       		add.w	d3,d0
0000386C 3C80                       		move.w	d0,(a6)
0000386E 51CA FFE6                  		dbf	d2,@loop
00003872 4E75                       		rts	
00003874                            ; End of function LevSel_ChgLine
00003874                            		
00003874                            CStringSlop_draw:
00003874 D043                       		add.w	d3,d0
00003876 3C80                       		move.w	d0,(a6)
00003878                            CStringSlop:				; XREF: LevSelTextLoad
00003878 7000                       		moveq	#0,d0
0000387A 1019                       		move.b	(a1)+,d0
0000387C 0C00 0020                  		cmpi.b	#$20,d0
00003880 6EF2                       		bgt.s	CStringSlop_draw
00003882 4A00                       		tst.b	d0
00003884 6700                       		beq.s	@end
00003886 3CBC 0000                  		move.w	#0,(a6)
0000388A 60EC                       		bra.s	CStringSlop
0000388C                            	@end:
0000388C 4E75                       		rts
0000388E                            ; End of function LevSel_ChgLine
0000388E                            
0000388E                            ; ===========================================================================
0000388E                            ; ---------------------------------------------------------------------------
0000388E                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
0000388E                            ; ---------------------------------------------------------------------------
0000388E                            LevelMenuText:	
0000388E 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
0000389E 2020 2020 2020 2020 2020+          dc.b    "               2"
000038AE 2020 2020 2020 2020 2020+          dc.b    "               3"
000038BE 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
000038CE 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
000038DE 2020 2020 2020 2020 2020+          dc.b    "               3"
000038EE 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
000038FE 2020 2020 2020 2020 2020+          dc.b    "               2"
0000390E 2020 2020 2020 2020 2020+          dc.b    "               3"
0000391E 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
0000392E 2020 2020 2020 2020 2020+          dc.b    "               2"
0000393E 2020 2020 2020 2020 2020+          dc.b    "               3"
0000394E                            LMTSecondRow:
0000394E 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
0000395E 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
0000396E 2020 2020 2020 2020 2020+          dc.b    "               3"
0000397E 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
0000398E 2020 2020 2020 2020 2020+          dc.b    "               2"
0000399E 2020 2020 2020 2020 2020+          dc.b    "               3"
000039AE 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
000039BE 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
000039CE 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST      "
000039DE 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
000039EE 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
000039FE                            LMTSelectableEnd:
000039FE 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003A0E                            LMTEnd:
00003A0E                            
00003A0E                            
00003A0E =0000000C                  lsrow1size = (LMTSecondRow-LevelMenuText)/16
00003A0E =0000000C                  lsrow2size = (LMTEnd-LMTSecondRow)/16
00003A0E =00000016                  lsselectable = ((LMTSelectableEnd-LevelMenuText)/16)-1
00003A0E                            ; just to not break these
00003A0E =00000014                  lssndtest = lsrow2size+8
00003A0E =00000015                  lswifi = lsrow2size+9
00003A0E                            
00003A0E =6C820003                  nppos = $6C820003
00003A0E                            Now_Playing:
00003A0E 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003A1E                            		even
00003A1E                            NP_Track:
00003A1E 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003A26                            		even
00003A26                            NP_SFX:
00003A26 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003A2E                            		even
00003A2E                            
00003A2E                            ShowNow_Playing:
00003A2E 1C00                       		move.b	d0,d6
00003A30 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003A34 43FA FFD8                  		lea	Now_Playing(pc),a1
00003A38 4DF9 00C0 0000             		lea		($C00000).l,a6
00003A3E 2D7C 6C82 0003 0004        		move.l	#nppos,4(a6)
00003A46 6100 FE30                  		bsr.w	CStringSlop
00003A4A                            		
00003A4A 43FA FFD2                  		lea	NP_Track(pc),a1
00003A4E 0C06 00A0                  		cmpi.b	#$A0,d6
00003A52 6D00                       		blt.s	@track
00003A54                            		
00003A54 43FA FFD0                  		lea	NP_SFX(pc),a1
00003A58                            	@track:
00003A58 6100 FE1E                  		bsr.w	CStringSlop
00003A5C                            		
00003A5C 0643 0030                  		add.w	#$30,d3
00003A60 1006                       		move.b	d6,d0
00003A62 1400                       		move.b	d0,d2
00003A64 E808                       		lsr.b	#4,d0
00003A66 6100 FDDA                  		bsr.w	LevSel_ChgSnd
00003A6A 1002                       		move.b	d2,d0
00003A6C 6100 FDD4                  		bsr.w	LevSel_ChgSnd
00003A70 4E75                       		rts	
00003A72                            ; ---------------------------------------------------------------------------
00003A72                            ; Music	playlist
00003A72                            ; ---------------------------------------------------------------------------
00003A72                            MusicList1:	incbin	misc\muslist1.bin
00003A7A                            		even
00003A7A                            MusicList2:	incbin	misc\muslist2.bin
00003A80                            		even
00003A80                            MusicList3:	incbin	misc\muslist3.bin
00003A86                            		even
00003A86                            MusicList4:	incbin	misc\muslist4.bin
00003A8C                            		even
00003A8C                            ; ===========================================================================
00003A8C                            
00003A8C                            ; ---------------------------------------------------------------------------
00003A8C                            ; Level
00003A8C                            ; ---------------------------------------------------------------------------
00003A8C                            
00003A8C                            Level:					; XREF: GameModeArray
00003A8C 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003A92 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003A96 6B00                       		bmi.s	loc_37B6
00003A98 103C 00E0                  		move.b	#$E0,d0
00003A9C 6100 DB1E                  		bsr.w	PlaySound_Special ; fade out music
00003AA0                            
00003AA0                            loc_37B6:
00003AA0 6100 DD5C                  		bsr.w	ClearPLC
00003AA4 6100 E592                  		bsr.w	Pal_FadeFrom
00003AA8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003AAC 6B00                       		bmi.s	Level_ClrRam
00003AAE 46FC 2700                  		move	#$2700,sr
00003AB2 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003ABC 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003AC2 6100 DB9C                  		bsr.w	NemDec
00003AC6 46FC 2300                  		move	#$2300,sr
00003ACA 7000                       		moveq	#0,d0
00003ACC 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003AD0 E948                       		lsl.w	#4,d0
00003AD2 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003AD8 45F2 0000                  		lea	(a2,d0.w),a2
00003ADC 7000                       		moveq	#0,d0
00003ADE 1012                       		move.b	(a2),d0
00003AE0 6700                       		beq.s	loc_37FC
00003AE2 6100 DCBC                  		bsr.w	LoadPLC		; load level patterns
00003AE6                            
00003AE6                            loc_37FC:
00003AE6 7001                       		moveq	#1,d0
00003AE8 6100 DCB6                  		bsr.w	LoadPLC		; load standard	patterns
00003AEC                            
00003AEC                            Level_ClrRam:
00003AEC 43F8 D000                  		lea	($FFFFD000).w,a1
00003AF0 7000                       		moveq	#0,d0
00003AF2 323C 07FF                  		move.w	#$7FF,d1
00003AF6                            
00003AF6                            Level_ClrObjRam:
00003AF6 22C0                       		move.l	d0,(a1)+
00003AF8 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003AFC                            
00003AFC 43F8 F628                  		lea	($FFFFF628).w,a1
00003B00 7000                       		moveq	#0,d0
00003B02 323C 0015                  		move.w	#$15,d1
00003B06                            
00003B06                            Level_ClrVars:
00003B06 22C0                       		move.l	d0,(a1)+
00003B08 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003B0C                            
00003B0C 43F8 F700                  		lea	($FFFFF700).w,a1
00003B10 7000                       		moveq	#0,d0
00003B12 323C 003F                  		move.w	#$3F,d1
00003B16                            
00003B16                            Level_ClrVars2:
00003B16 22C0                       		move.l	d0,(a1)+
00003B18 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003B1C                            
00003B1C 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003B20 7000                       		moveq	#0,d0
00003B22 323C 0047                  		move.w	#$47,d1
00003B26                            
00003B26                            Level_ClrVars3:
00003B26 22C0                       		move.l	d0,(a1)+
00003B28 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003B2C                            
00003B2C 46FC 2700                  		move	#$2700,sr
00003B30 6100 D9B2                  		bsr.w	ClearScreen
00003B34 4DF9 00C0 0004             		lea	($C00004).l,a6
00003B3A 3CBC 8B03                  		move.w	#$8B03,(a6)
00003B3E 3CBC 8230                  		move.w	#$8230,(a6)
00003B42 3CBC 8407                  		move.w	#$8407,(a6)
00003B46 3CBC 857C                  		move.w	#$857C,(a6)
00003B4A 3CBC 9001                  		move.w	#$9001,(a6)
00003B4E 3CBC 8004                  		move.w	#$8004,(a6)
00003B52 3CBC 8720                  		move.w	#$8720,(a6)
00003B56 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003B5C 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003B60 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003B66 6600                       		bne.s	Level_LoadPal	; if not, branch
00003B68 3CBC 8014                  		move.w	#$8014,(a6)
00003B6C 7000                       		moveq	#0,d0
00003B6E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003B72 D040                       		add.w	d0,d0
00003B74 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003B7A 3031 0000                  		move.w	(a1,d0.w),d0
00003B7E 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003B82 31C0 F648                  		move.w	d0,($FFFFF648).w
00003B86 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003B8A 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003B8E 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003B92 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003B98                            
00003B98                            Level_LoadPal:
00003B98 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003B9E 46FC 2300                  		move	#$2300,sr
00003BA2 7003                       		moveq	#3,d0
00003BA4 6100 E758                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003BA8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003BAE 6600                       		bne.s	Level_GetBgm	; if not, branch
00003BB0 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
00003BB2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003BB8 6600                       		bne.s	Level_WaterPal	; if not, branch
00003BBA 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
00003BBC                            
00003BBC                            Level_WaterPal:
00003BBC 6100 E758                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003BC0 4A38 FE30                  		tst.b	($FFFFFE30).w
00003BC4 6700                       		beq.s	Level_GetBgm
00003BC6 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003BCC                            
00003BCC                            ; NineKode begins here - How to play different songs on different acts
00003BCC                             
00003BCC                            Level_GetBgm:
00003BCC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003BD0 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003BD4 7000                       		moveq	#0,d0
00003BD6 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003BDA                             
00003BDA 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003BE0 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003BE2 43F9 0000 3A72             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003BE8 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003BEA                             
00003BEA                            Level_GetBgm2:
00003BEA 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003BF0 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003BF2 43F9 0000 3A7A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003BF8 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003BFA                             
00003BFA                            Level_GetBgm3:
00003BFA 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003C00 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003C02 43F9 0000 3A80             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003C08 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003C0A                             
00003C0A                            Level_GetBgm4:
00003C0A 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003C10 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003C12 43F9 0000 3A86             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003C18                             
00003C18                            Level_PlayBgm:
00003C18 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003C1C 6100 D998                  		bsr.w	PlaySound	; play music
00003C20 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003C26                             
00003C26                            ; NineKode ends here
00003C26                            
00003C26                            Level_TtlCard:
00003C26 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003C2C 6100 EF88                  		bsr.w	DelayProgram
00003C30 4EB9 0000 0000             		jsr	ObjectsLoad
00003C36 4EB9 0000 0000             		jsr	BuildSprites
00003C3C 6100 DBCE                  		bsr.w	RunPLC_RAM
00003C40 3038 D108                  		move.w	($FFFFD108).w,d0
00003C44 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003C48 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003C4A 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003C4E 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003C50 4EB9 0000 0000             		jsr	Hud_Base
00003C56                            
00003C56                            loc_3946:
00003C56 7003                       		moveq	#3,d0
00003C58 6100 E688                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003C5C 6100 0000                  		bsr.w	LevelSizeLoad
00003C60 6100 0000                  		bsr.w	DeformBgLayer
00003C64 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003C6A 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003C6E 6100 0000                  		bsr.w	LoadTilesFromStart
00003C72 4EB9 0000 0000             		jsr	FloorLog_Unk
00003C78 6100 0000                  		bsr.w	ColIndexLoad
00003C7C 6100 0000                  		bsr.w	LZWaterEffects
00003C80 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003C86 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C8A 6B00                       		bmi.s	Level_ChkDebug
00003C8C 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003C92                            
00003C92                            Level_ChkDebug:
00003C92 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003C96 6700                       		beq.s	Level_ChkWater	; if not, branch
00003C98 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003C9E 6700                       		beq.s	Level_ChkWater	; if not, branch
00003CA0 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003CA6                            
00003CA6                            Level_ChkWater:
00003CA6 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003CAC 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003CB2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003CB8 6600                       		bne.s	Level_LoadObj	; if not, branch
00003CBA 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003CC0 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003CC6 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003CCC 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003CD2                            
00003CD2                            Level_LoadObj:
00003CD2 4EB9 0000 0000             		jsr	ObjPosLoad
00003CD8 4EB9 0000 0000             		jsr	ObjectsLoad
00003CDE 4EB9 0000 0000             		jsr	BuildSprites
00003CE4 7000                       		moveq	#0,d0
00003CE6 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003CEA 6600                       		bne.s	loc_39E8	; if yes, branch
00003CEC 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003CF0 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003CF4 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003CF8                            
00003CF8                            loc_39E8:
00003CF8 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003CFC 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003D00 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003D04 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003D08                            		; move.b	d0,($FFFFFE2F).w
00003D08 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003D0E 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003D12 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003D16 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003D1A 6100 0000                  		bsr.w	OscillateNumInit
00003D1E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003D24 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003D2A 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003D30 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003D36 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003D3C 7000                       		moveq	#0,d0
00003D3E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003D42 E548                       		lsl.w	#2,d0
00003D44 2271 0000                  		movea.l	(a1,d0.w),a1
00003D48 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003D4C 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003D4E 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003D54 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003D58 5340                       		subq.w	#1,d0
00003D5A E548                       		lsl.w	#2,d0
00003D5C 2271 0000                  		movea.l	(a1,d0.w),a1
00003D60                            
00003D60                            Level_Demo:
00003D60 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003D66 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003D6A 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003D70 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003D74 6A00                       		bpl.s	Level_ChkWaterPal
00003D76 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003D7C 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003D82 6600                       		bne.s	Level_ChkWaterPal
00003D84 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003D8A                            
00003D8A                            Level_ChkWaterPal:
00003D8A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003D90 6600                       		bne.s	Level_Delay	; if not, branch
00003D92 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003D94 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003D9A 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003D9C 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003D9E                            
00003D9E                            Level_WaterPal2:
00003D9E 6100 E592                  		bsr.w	PalLoad4_Water
00003DA2                            
00003DA2                            Level_Delay:
00003DA2 323C 0003                  		move.w	#3,d1
00003DA6                            
00003DA6                            Level_DelayLoop:
00003DA6 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003DAC 6100 EE08                  		bsr.w	DelayProgram
00003DB0 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003DB4                            
00003DB4 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003DBA 6100 E1DC                  		bsr.w	Pal_FadeTo2
00003DBE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DC2 6B00                       		bmi.s	Level_ClrCardArt
00003DC4 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003DC8 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003DCC 5838 D124                  		addq.b	#4,($FFFFD124).w
00003DD0 5838 D164                  		addq.b	#4,($FFFFD164).w
00003DD4 6000                       		bra.s	Level_StartGame
00003DD6                            ; ===========================================================================
00003DD6                            
00003DD6                            Level_ClrCardArt:
00003DD6 7002                       		moveq	#2,d0
00003DD8 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load explosion patterns
00003DDE 7000                       		moveq	#0,d0
00003DE0 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003DE4 0640 0015                  		addi.w	#$15,d0
00003DE8 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003DEE                            
00003DEE                            Level_StartGame:
00003DEE 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003DF4                            
00003DF4                            ; ---------------------------------------------------------------------------
00003DF4                            ; Main level loop (when	all title card and loading sequences are finished)
00003DF4                            ; ---------------------------------------------------------------------------
00003DF4                            
00003DF4                            Level_MainLoop:
00003DF4 6100 D7D2                  		bsr.w	PauseGame
00003DF8 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003DFE 6100 EDB6                  		bsr.w	DelayProgram
00003E02 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003E06 6100 0000                  		bsr.w	MoveSonicInDemo
00003E0A 6100 0000                  		bsr.w	LZWaterEffects
00003E0E 4EB9 0000 0000             		jsr	ObjectsLoad
00003E14 4A78 FE08                  		tst.w	($FFFFFE08).w
00003E18 6600                       		bne.s	loc_3B10
00003E1A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003E20 6400                       		bcc.s	loc_3B14
00003E22                            
00003E22                            loc_3B10:
00003E22 6100 0000                  		bsr.w	DeformBgLayer
00003E26                            
00003E26                            loc_3B14:
00003E26 4EB9 0000 0000             		jsr	BuildSprites
00003E2C 4EB9 0000 0000             		jsr	ObjPosLoad
00003E32 6100 DD28                  		bsr.w	PalCycle_Load
00003E36 6100 D9D4                  		bsr.w	RunPLC_RAM
00003E3A 6100 0000                  		bsr.w	OscillateNumDo
00003E3E 6100 0000                  		bsr.w	ChangeRingFrame
00003E42 6100 0000                  		bsr.w	SignpostArtLoad
00003E46 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003E4C 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003E4E 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003E52 6600 FC38                  		bne.w	Level		; if yes, branch
00003E56 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003E5C 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003E60 4E75                       		rts	
00003E62                            ; ===========================================================================
00003E62                            
00003E62                            Level_ChkDemo:				; XREF: Level_MainLoop
00003E62 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003E66 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003E68 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003E6C 6700                       		beq.s	Level_EndDemo	; if not, branch
00003E6E 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003E74 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003E78 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003E7E 4E75                       		rts	
00003E80                            ; ===========================================================================
00003E80                            
00003E80                            Level_EndDemo:				; XREF: Level_ChkDemo
00003E80 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003E86 6600                       		bne.s	loc_3B88	; if not, branch
00003E88 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003E8E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003E92 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003E94 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003E9A                            
00003E9A                            loc_3B88:
00003E9A 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003EA0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003EA6 4278 F794                  		clr.w	($FFFFF794).w
00003EAA                            
00003EAA                            loc_3B98:
00003EAA 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003EB0 6100 ED04                  		bsr.w	DelayProgram
00003EB4 6100 0000                  		bsr.w	MoveSonicInDemo
00003EB8 4EB9 0000 0000             		jsr	ObjectsLoad
00003EBE 4EB9 0000 0000             		jsr	BuildSprites
00003EC4 4EB9 0000 0000             		jsr	ObjPosLoad
00003ECA 5378 F794                  		subq.w	#1,($FFFFF794).w
00003ECE 6A00                       		bpl.s	loc_3BC8
00003ED0 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003ED6 6100 E180                  		bsr.w	Pal_FadeOut
00003EDA                            
00003EDA                            loc_3BC8:
00003EDA 4A78 F614                  		tst.w	($FFFFF614).w
00003EDE 66CA                       		bne.s	loc_3B98
00003EE0 4E75                       		rts	
00003EE2                            ; ===========================================================================
00003EE2                            ; ---------------------------------------------------------------------------
00003EE2                            ; Subroutine to	do special water effects in Labyrinth Zone
00003EE2                            ; ---------------------------------------------------------------------------
00003EE2                            
00003EE2                            LZWaterEffects:				; XREF: Level
00003EE2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003EE8 6600                       		bne.s	locret_3C28	; if not, branch
00003EEA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003EF0 6400                       		bcc.s	LZMoveWater
00003EF2 6100 0000                  		bsr.w	LZWindTunnels
00003EF6 6100 0000                  		bsr.w	LZWaterSlides
00003EFA 6100 0000                  		bsr.w	LZDynamicWater
00003EFE                            
00003EFE                            LZMoveWater:
00003EFE 4238 F64E                  		clr.b	($FFFFF64E).w
00003F02 7000                       		moveq	#0,d0
00003F04 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003F08 E248                       		lsr.w	#1,d0
00003F0A D078 F648                  		add.w	($FFFFF648).w,d0
00003F0E 31C0 F646                  		move.w	d0,($FFFFF646).w
00003F12 3038 F646                  		move.w	($FFFFF646).w,d0
00003F16 9078 F704                  		sub.w	($FFFFF704).w,d0
00003F1A 6400                       		bcc.s	loc_3C1A
00003F1C 4A40                       		tst.w	d0
00003F1E 6A00                       		bpl.s	loc_3C1A
00003F20 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003F26 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003F2C                            
00003F2C                            loc_3C1A:
00003F2C 0C40 00DF                  		cmpi.w	#$DF,d0
00003F30 6500                       		bcs.s	loc_3C24
00003F32 303C 00DF                  		move.w	#$DF,d0
00003F36                            
00003F36                            loc_3C24:
00003F36 11C0 F625                  		move.b	d0,($FFFFF625).w
00003F3A                            
00003F3A                            locret_3C28:
00003F3A 4E75                       		rts	
00003F3C                            ; ===========================================================================
00003F3C                            ; ---------------------------------------------------------------------------
00003F3C                            ; Labyrinth default water heights
00003F3C                            ; ---------------------------------------------------------------------------
00003F3C                            WaterHeight:	incbin	misc\lz_heigh.bin
00003F44                            		even
00003F44                            ; ===========================================================================
00003F44                            
00003F44                            ; ---------------------------------------------------------------------------
00003F44                            ; Labyrinth dynamic water routines
00003F44                            ; ---------------------------------------------------------------------------
00003F44                            
00003F44                            LZDynamicWater:				; XREF: LZWaterEffects
00003F44 7000                       		moveq	#0,d0
00003F46 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003F4A D040                       		add.w	d0,d0
00003F4C 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003F50 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003F54 7200                       		moveq	#0,d1
00003F56 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003F5A 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003F5E 9078 F648                  		sub.w	($FFFFF648).w,d0
00003F62 6700                       		beq.s	locret_3C5A
00003F64 6400                       		bcc.s	loc_3C56
00003F66 4441                       		neg.w	d1
00003F68                            
00003F68                            loc_3C56:
00003F68 D378 F648                  		add.w	d1,($FFFFF648).w
00003F6C                            
00003F6C                            locret_3C5A:
00003F6C 4E75                       		rts	
00003F6E                            ; ===========================================================================
00003F6E 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003F70 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003F72 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003F74 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003F76                            ; ===========================================================================
00003F76                            
00003F76                            DynWater_LZ1:				; XREF: DynWater_Index
00003F76 3038 F700                  		move.w	($FFFFF700).w,d0
00003F7A 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003F7E 6600                       		bne.s	loc_3CD0
00003F80 323C 00B8                  		move.w	#$B8,d1
00003F84 0C40 0600                  		cmpi.w	#$600,d0
00003F88 6500                       		bcs.s	loc_3CB4
00003F8A 323C 0108                  		move.w	#$108,d1
00003F8E 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003F94 6500                       		bcs.s	loc_3CBA
00003F96 0C40 0C00                  		cmpi.w	#$C00,d0
00003F9A 6500                       		bcs.s	loc_3CB4
00003F9C 323C 0318                  		move.w	#$318,d1
00003FA0 0C40 1080                  		cmpi.w	#$1080,d0
00003FA4 6500                       		bcs.s	loc_3CB4
00003FA6 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003FAC 323C 05C8                  		move.w	#$5C8,d1
00003FB0 0C40 1380                  		cmpi.w	#$1380,d0
00003FB4 6500                       		bcs.s	loc_3CB4
00003FB6 323C 03A8                  		move.w	#$3A8,d1
00003FBA B278 F648                  		cmp.w	($FFFFF648).w,d1
00003FBE 6600                       		bne.s	loc_3CB4
00003FC0 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003FC6                            
00003FC6                            loc_3CB4:
00003FC6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003FCA 4E75                       		rts	
00003FCC                            ; ===========================================================================
00003FCC                            
00003FCC                            loc_3CBA:				; XREF: DynWater_LZ1
00003FCC 0C40 0C80                  		cmpi.w	#$C80,d0
00003FD0 65F4                       		bcs.s	loc_3CB4
00003FD2 323C 00E8                  		move.w	#$E8,d1
00003FD6 0C40 1500                  		cmpi.w	#$1500,d0
00003FDA 65EA                       		bcs.s	loc_3CB4
00003FDC 323C 0108                  		move.w	#$108,d1
00003FE0 60E4                       		bra.s	loc_3CB4
00003FE2                            ; ===========================================================================
00003FE2                            
00003FE2                            loc_3CD0:				; XREF: DynWater_LZ1
00003FE2 5302                       		subq.b	#1,d2
00003FE4 6600                       		bne.s	locret_3CF4
00003FE6 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00003FEC 6400                       		bcc.s	locret_3CF4
00003FEE 323C 03A8                  		move.w	#$3A8,d1
00003FF2 0C40 1300                  		cmpi.w	#$1300,d0
00003FF6 6500                       		bcs.s	loc_3CF0
00003FF8 323C 0108                  		move.w	#$108,d1
00003FFC 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004002                            
00004002                            loc_3CF0:
00004002 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004006                            
00004006                            locret_3CF4:
00004006 4E75                       		rts	
00004008                            ; ===========================================================================
00004008                            
00004008                            DynWater_LZ2:				; XREF: DynWater_Index
00004008 3038 F700                  		move.w	($FFFFF700).w,d0
0000400C 323C 0328                  		move.w	#$328,d1
00004010 0C40 0500                  		cmpi.w	#$500,d0
00004014 6500                       		bcs.s	loc_3D12
00004016 323C 03C8                  		move.w	#$3C8,d1
0000401A 0C40 0B00                  		cmpi.w	#$B00,d0
0000401E 6500                       		bcs.s	loc_3D12
00004020 323C 0428                  		move.w	#$428,d1
00004024                            
00004024                            loc_3D12:
00004024 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004028 4E75                       		rts	
0000402A                            ; ===========================================================================
0000402A                            
0000402A                            DynWater_LZ3:				; XREF: DynWater_Index
0000402A 3038 F700                  		move.w	($FFFFF700).w,d0
0000402E 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004032 6600                       		bne.s	loc_3D5E
00004034 323C 0900                  		move.w	#$900,d1
00004038 0C40 0600                  		cmpi.w	#$600,d0
0000403C 6500                       		bcs.s	loc_3D54
0000403E 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
00004044 6500                       		bcs.s	loc_3D54
00004046 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
0000404C 6400                       		bcc.s	loc_3D54
0000404E 323C 04C8                  		move.w	#$4C8,d1
00004052 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00004058 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
0000405E 303C 00B7                  		move.w	#$B7,d0
00004062 6100 D558                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00004066                            
00004066                            loc_3D54:
00004066 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000406A 31C1 F648                  		move.w	d1,($FFFFF648).w
0000406E 4E75                       		rts	
00004070                            ; ===========================================================================
00004070                            
00004070                            loc_3D5E:				; XREF: DynWater_LZ3
00004070 5302                       		subq.b	#1,d2
00004072 6600                       		bne.s	loc_3DA8
00004074 323C 04C8                  		move.w	#$4C8,d1
00004078 0C40 0770                  		cmpi.w	#$770,d0
0000407C 6500                       		bcs.s	loc_3DA2
0000407E 323C 0308                  		move.w	#$308,d1
00004082 0C40 1400                  		cmpi.w	#$1400,d0
00004086 6500                       		bcs.s	loc_3DA2
00004088 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
0000408E 6700                       		beq.s	loc_3D8E
00004090 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00004096 6400                       		bcc.s	loc_3D8E
00004098 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
0000409E 6400                       		bcc.s	loc_3DA2
000040A0                            
000040A0                            loc_3D8E:
000040A0 323C 0508                  		move.w	#$508,d1
000040A4 31C1 F648                  		move.w	d1,($FFFFF648).w
000040A8 0C40 1770                  		cmpi.w	#$1770,d0
000040AC 6500                       		bcs.s	loc_3DA2
000040AE 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000040B4                            
000040B4                            loc_3DA2:
000040B4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040B8 4E75                       		rts	
000040BA                            ; ===========================================================================
000040BA                            
000040BA                            loc_3DA8:
000040BA 5302                       		subq.b	#1,d2
000040BC 6600                       		bne.s	loc_3DD2
000040BE 323C 0508                  		move.w	#$508,d1
000040C2 0C40 1860                  		cmpi.w	#$1860,d0
000040C6 6500                       		bcs.s	loc_3DCC
000040C8 323C 0188                  		move.w	#$188,d1
000040CC 0C40 1AF0                  		cmpi.w	#$1AF0,d0
000040D0 6400                       		bcc.s	loc_3DC6
000040D2 B278 F648                  		cmp.w	($FFFFF648).w,d1
000040D6 6600                       		bne.s	loc_3DCC
000040D8                            
000040D8                            loc_3DC6:
000040D8 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
000040DE                            
000040DE                            loc_3DCC:
000040DE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040E2 4E75                       		rts	
000040E4                            ; ===========================================================================
000040E4                            
000040E4                            loc_3DD2:
000040E4 5302                       		subq.b	#1,d2
000040E6 6600                       		bne.s	loc_3E0E
000040E8 323C 0188                  		move.w	#$188,d1
000040EC 0C40 1AF0                  		cmpi.w	#$1AF0,d0
000040F0 6500                       		bcs.s	loc_3E04
000040F2 323C 0900                  		move.w	#$900,d1
000040F6 0C40 1BC0                  		cmpi.w	#$1BC0,d0
000040FA 6500                       		bcs.s	loc_3E04
000040FC 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004102 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004108 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
0000410E 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00004114 4E75                       		rts	
00004116                            ; ===========================================================================
00004116                            
00004116                            loc_3E04:
00004116 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000411A 31C1 F648                  		move.w	d1,($FFFFF648).w
0000411E 4E75                       		rts	
00004120                            ; ===========================================================================
00004120                            
00004120                            loc_3E0E:
00004120 0C40 1E00                  		cmpi.w	#$1E00,d0
00004124 6500                       		bcs.s	locret_3E1A
00004126 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
0000412C                            
0000412C                            locret_3E1A:
0000412C 4E75                       		rts	
0000412E                            ; ===========================================================================
0000412E                            
0000412E                            DynWater_SBZ3:				; XREF: DynWater_Index
0000412E 323C 0228                  		move.w	#$228,d1
00004132 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004138 6500                       		bcs.s	loc_3E2C
0000413A 323C 04C8                  		move.w	#$4C8,d1
0000413E                            
0000413E                            loc_3E2C:
0000413E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004142 4E75                       		rts
00004144                            
00004144                            ; ---------------------------------------------------------------------------
00004144                            ; Labyrinth Zone "wind tunnels"	subroutine
00004144                            ; ---------------------------------------------------------------------------
00004144                            
00004144                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004144                            
00004144                            
00004144                            LZWindTunnels:				; XREF: LZWaterEffects
00004144 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004148 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
0000414C 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00004152 7000                       		moveq	#0,d0
00004154 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004158 E748                       		lsl.w	#3,d0
0000415A D4C0                       		adda.w	d0,a2
0000415C 7200                       		moveq	#0,d1
0000415E 4A38 FE11                  		tst.b	($FFFFFE11).w
00004162 6600                       		bne.s	loc_3E56
00004164 7201                       		moveq	#1,d1
00004166 514A                       		subq.w	#8,a2
00004168                            
00004168                            loc_3E56:
00004168 43F8 D000                  		lea	($FFFFD000).w,a1
0000416C                            
0000416C                            LZWind_Loop:
0000416C 3029 0008                  		move.w	8(a1),d0
00004170 B052                       		cmp.w	(a2),d0
00004172 6500 0000                  		bcs.w	loc_3EF4
00004176 B06A 0004                  		cmp.w	4(a2),d0
0000417A 6400 0000                  		bcc.w	loc_3EF4
0000417E 3429 000C                  		move.w	$C(a1),d2
00004182 B46A 0002                  		cmp.w	2(a2),d2
00004186 6500                       		bcs.s	loc_3EF4
00004188 B46A 0006                  		cmp.w	6(a2),d2
0000418C 6400                       		bcc.s	loc_3EF4
0000418E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004192 0200 003F                  		andi.b	#$3F,d0
00004196 6600                       		bne.s	loc_3E90
00004198 303C 00D0                  		move.w	#$D0,d0
0000419C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rushing water sound
000041A2                            
000041A2                            loc_3E90:
000041A2 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000041A6 6600 0000                  		bne.w	locret_3F0A
000041AA 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000041B0 6400                       		bcc.s	loc_3F06
000041B2 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000041B8 0440 0080                  		subi.w	#$80,d0
000041BC B052                       		cmp.w	(a2),d0
000041BE 6400                       		bcc.s	LZWind_Move
000041C0 7002                       		moveq	#2,d0
000041C2 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
000041C8 6600                       		bne.s	loc_3EBA
000041CA 4440                       		neg.w	d0
000041CC                            
000041CC                            loc_3EBA:
000041CC D169 000C                  		add.w	d0,$C(a1)
000041D0                            
000041D0                            LZWind_Move:
000041D0 5869 0008                  		addq.w	#4,8(a1)
000041D4 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
000041DA 337C 0000 0012             		move.w	#0,$12(a1)
000041E0 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
000041E6 08E9 0001 0022             		bset	#1,$22(a1)
000041EC 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
000041F2 6700                       		beq.s	LZWind_MoveDown	; if not, branch
000041F4 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000041F8                            
000041F8                            LZWind_MoveDown:
000041F8 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000041FE 6700                       		beq.s	locret_3EF2	; if not, branch
00004200 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004204                            
00004204                            locret_3EF2:
00004204 4E75                       		rts	
00004206                            ; ===========================================================================
00004206                            
00004206                            loc_3EF4:				; XREF: LZWindTunnels
00004206 504A                       		addq.w	#8,a2
00004208 51C9 FF62                  		dbf	d1,LZWind_Loop
0000420C 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004210 6700                       		beq.s	locret_3F0A
00004212 137C 0000 001C             		move.b	#0,$1C(a1)
00004218                            
00004218                            loc_3F06:
00004218 4238 F7C7                  		clr.b	($FFFFF7C7).w
0000421C                            
0000421C                            locret_3F0A:
0000421C 4E75                       		rts	
0000421E                            ; End of function LZWindTunnels
0000421E                            
0000421E                            ; ===========================================================================
0000421E 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004226 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004238 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004246                            					; XREF: LZWindTunnels
00004246                            		even
00004246                            
00004246                            ; ---------------------------------------------------------------------------
00004246                            ; Labyrinth Zone water slide subroutine
00004246                            ; ---------------------------------------------------------------------------
00004246                            
00004246                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004246                            
00004246                            
00004246                            LZWaterSlides:				; XREF: LZWaterEffects
00004246 43F8 D000                  		lea	($FFFFD000).w,a1
0000424A 0829 0001 0022             		btst	#1,$22(a1)
00004250 6600                       		bne.s	loc_3F6A
00004252 3029 000C                  		move.w	$C(a1),d0
00004256 E248                       		lsr.w	#1,d0
00004258 0240 0380                  		andi.w	#$380,d0
0000425C 1229 0008                  		move.b	8(a1),d1
00004260 0241 007F                  		andi.w	#$7F,d1
00004264 D041                       		add.w	d1,d0
00004266 45F8 A400                  		lea	($FFFFA400).w,a2
0000426A 1032 0000                  		move.b	(a2,d0.w),d0
0000426E 45FA 0000                  		lea	byte_3FCF(pc),a2
00004272 7206                       		moveq	#6,d1
00004274                            
00004274                            loc_3F62:
00004274 B022                       		cmp.b	-(a2),d0
00004276 57C9 FFFC                  		dbeq	d1,loc_3F62
0000427A 6700                       		beq.s	LZSlide_Move
0000427C                            
0000427C                            loc_3F6A:
0000427C 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00004280 6700                       		beq.s	locret_3F7A
00004282 337C 0005 003E             		move.w	#5,$3E(a1)
00004288 4238 F7CA                  		clr.b	($FFFFF7CA).w
0000428C                            
0000428C                            locret_3F7A:
0000428C 4E75                       		rts	
0000428E                            ; ===========================================================================
0000428E                            
0000428E                            LZSlide_Move:				; XREF: LZWaterSlides
0000428E 0C41 0003                  		cmpi.w	#3,d1
00004292 6400                       		bcc.s	loc_3F84
00004294 4E71                       		nop	
00004296                            
00004296                            loc_3F84:
00004296 08A9 0000 0022             		bclr	#0,$22(a1)
0000429C 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000042A0 1340 0014                  		move.b	d0,$14(a1)
000042A4 6A00                       		bpl.s	loc_3F9A
000042A6 08E9 0000 0022             		bset	#0,$22(a1)
000042AC                            
000042AC                            loc_3F9A:
000042AC 4229 0015                  		clr.b	$15(a1)
000042B0 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000042B6 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000042BC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000042C0 0200 001F                  		andi.b	#$1F,d0
000042C4 6600                       		bne.s	locret_3FBE
000042C6 303C 00D0                  		move.w	#$D0,d0
000042CA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play water sound
000042D0                            
000042D0                            locret_3FBE:
000042D0 4E75                       		rts	
000042D2                            ; End of function LZWaterSlides
000042D2                            
000042D2                            ; ===========================================================================
000042D2 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
000042E1 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
000042E2                            		even
000042E2                            
000042E2                            ; ---------------------------------------------------------------------------
000042E2                            ; Subroutine to	move Sonic in demo mode
000042E2                            ; ---------------------------------------------------------------------------
000042E2                            
000042E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000042E2                            
000042E2                            
000042E2                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
000042E2 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000042E6 6600                       		bne.s	MoveDemo_On	; if yes, branch
000042E8 4E75                       		rts	
000042EA                            ; ===========================================================================
000042EA                            
000042EA                            ; This is an unused subroutine for recording a demo
000042EA                            
000042EA                            MoveDemo_Record:
000042EA 43F9 0008 0000             		lea	($80000).l,a1
000042F0 3038 F790                  		move.w	($FFFFF790).w,d0
000042F4 D2C0                       		adda.w	d0,a1
000042F6 1038 F604                  		move.b	($FFFFF604).w,d0
000042FA B011                       		cmp.b	(a1),d0
000042FC 6600                       		bne.s	loc_3FFA
000042FE 5229 0001                  		addq.b	#1,1(a1)
00004302 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004308 6700                       		beq.s	loc_3FFA
0000430A 4E75                       		rts	
0000430C                            ; ===========================================================================
0000430C                            
0000430C                            loc_3FFA:				; XREF: MoveDemo_Record
0000430C 1340 0002                  		move.b	d0,2(a1)
00004310 137C 0000 0003             		move.b	#0,3(a1)
00004316 5478 F790                  		addq.w	#2,($FFFFF790).w
0000431A 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004320 4E75                       		rts	
00004322                            ; ===========================================================================
00004322                            
00004322                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004322 4A38 F604                  		tst.b	($FFFFF604).w
00004326 6A00                       		bpl.s	loc_4022
00004328 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000432C 6B00                       		bmi.s	loc_4022
0000432E 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004334                            
00004334                            loc_4022:
00004334 43F9 0000 0000             		lea	(Demo_Index).l,a1
0000433A 7000                       		moveq	#0,d0
0000433C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004340 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004346 6600                       		bne.s	loc_4038
00004348 7006                       		moveq	#6,d0
0000434A                            
0000434A                            loc_4038:
0000434A E548                       		lsl.w	#2,d0
0000434C 2271 0000                  		movea.l	(a1,d0.w),a1
00004350 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004354 6A00                       		bpl.s	loc_4056
00004356 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
0000435C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004360 5340                       		subq.w	#1,d0
00004362 E548                       		lsl.w	#2,d0
00004364 2271 0000                  		movea.l	(a1,d0.w),a1
00004368                            
00004368                            loc_4056:
00004368 3038 F790                  		move.w	($FFFFF790).w,d0
0000436C D2C0                       		adda.w	d0,a1
0000436E 1011                       		move.b	(a1),d0
00004370 41F8 F604                  		lea	($FFFFF604).w,a0
00004374 1200                       		move.b	d0,d1
00004376 1410                       		move.b	(a0),d2
00004378 B500                       		eor.b	d2,d0
0000437A 10C1                       		move.b	d1,(a0)+
0000437C C001                       		and.b	d1,d0
0000437E 10C0                       		move.b	d0,(a0)+
00004380 5338 F792                  		subq.b	#1,($FFFFF792).w
00004384 6400                       		bcc.s	locret_407E
00004386 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
0000438C 5478 F790                  		addq.w	#2,($FFFFF790).w
00004390                            
00004390                            locret_407E:
00004390 4E75                       		rts	
00004392                            ; End of function MoveSonicInDemo
00004392                            
00004392                            ; ===========================================================================
00004392                            ; ---------------------------------------------------------------------------
00004392                            ; Demo sequence	pointers
00004392                            ; ---------------------------------------------------------------------------
00004392                            Demo_Index:
00004392                            	include "_inc\Demo pointers for intro.asm"
00004392                            ; ---------------------------------------------------------------------------
00004392                            ; Demo sequence	pointers
00004392                            ; ---------------------------------------------------------------------------
00004392 0000 0000                  	dc.l Demo_GHZ
00004396 0000 0000                  	dc.l Demo_GHZ
0000439A 0000 0000                  	dc.l Demo_MZ
0000439E 0000 0000                  	dc.l Demo_MZ
000043A2 0000 0000                  	dc.l Demo_SYZ
000043A6 0000 0000                  	dc.l Demo_SYZ
000043AA 0000 0000                  	dc.l Demo_SS
000043AE 0000 0000                  	dc.l Demo_SS
000043AE 0000 0000                  	dc.l Demo_SS
000043B2                            
000043B2                            Demo_EndIndex:
000043B2                            	include "_inc\Demo pointers for ending.asm"
000043B2                            ; ---------------------------------------------------------------------------
000043B2                            ; Demo (ending) sequence pointers
000043B2                            ; ---------------------------------------------------------------------------
000043B2 0000 0000                  	dc.l Demo_EndGHZ1
000043B6 0000 0000                  	dc.l Demo_EndMZ
000043BA 0000 0000                  	dc.l Demo_EndSYZ
000043BE 0000 0000                  	dc.l Demo_EndLZ
000043C2 0000 0000                  	dc.l Demo_EndSLZ
000043C6 0000 0000                  	dc.l Demo_EndSBZ1
000043CA 0000 0000                  	dc.l Demo_EndSBZ2
000043CE 0000 0000                  	dc.l Demo_EndGHZ2
000043CE 0000 0000                  	dc.l Demo_EndGHZ2
000043D2                            
000043D2 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000043E2 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000043F2 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004402                            		even
00004402                            
00004402                            ; ---------------------------------------------------------------------------
00004402                            ; Collision index loading subroutine
00004402                            ; ---------------------------------------------------------------------------
00004402                            
00004402                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004402                            
00004402                            
00004402                            ColIndexLoad:				; XREF: Level
00004402 7000                       		moveq	#0,d0
00004404 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004408 E548                       		lsl.w	#2,d0
0000440A 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004410 4E75                       		rts	
00004412                            ; End of function ColIndexLoad
00004412                            
00004412                            ; ===========================================================================
00004412                            ; ---------------------------------------------------------------------------
00004412                            ; Collision index pointers
00004412                            ; ---------------------------------------------------------------------------
00004412                            ColPointers:
00004412                            	include "_inc\Collision index pointers.asm"
00004412                            ; ---------------------------------------------------------------------------
00004412                            ; Collision index pointers
00004412                            ; ---------------------------------------------------------------------------
00004412 0000 0000                  	dc.l Col_GHZ
00004416 0000 0000                  	dc.l Col_LZ
0000441A 0000 0000                  	dc.l Col_MZ
0000441E 0000 0000                  	dc.l Col_SLZ
00004422 0000 0000                  	dc.l Col_SYZ
00004426 0000 0000                  	dc.l Col_SBZ
00004426 0000 0000                  	dc.l Col_SBZ
0000442A                            
0000442A                            ; ---------------------------------------------------------------------------
0000442A                            ; Oscillating number subroutine
0000442A                            ; ---------------------------------------------------------------------------
0000442A                            
0000442A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000442A                            
0000442A                            
0000442A                            OscillateNumInit:			; XREF: Level
0000442A 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000442E 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004434 7220                       		moveq	#$20,d1
00004436                            
00004436                            Osc_Loop:
00004436 32DA                       		move.w	(a2)+,(a1)+
00004438 51C9 FFFC                  		dbf	d1,Osc_Loop
0000443C 4E75                       		rts	
0000443E                            ; End of function OscillateNumInit
0000443E                            
0000443E                            ; ===========================================================================
0000443E 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004442 0000 0080                  		dc.w 0,	$80
00004446 0000 0080                  		dc.w 0,	$80
0000444A 0000 0080                  		dc.w 0,	$80
0000444E 0000 0080                  		dc.w 0,	$80
00004452 0000 0080                  		dc.w 0,	$80
00004456 0000 0080                  		dc.w 0,	$80
0000445A 0000 0080                  		dc.w 0,	$80
0000445E 0000 0080                  		dc.w 0,	$80
00004462 0000 50F0                  		dc.w 0,	$50F0
00004466 011E 2080                  		dc.w $11E, $2080
0000446A 00B4 3080                  		dc.w $B4, $3080
0000446E 010E 5080                  		dc.w $10E, $5080
00004472 01C2 7080                  		dc.w $1C2, $7080
00004476 0276 0080                  		dc.w $276, $80
0000447A 0000 0080                  		dc.w 0,	$80
0000447E 0000                       		dc.w 0
00004480                            		even
00004480                            
00004480                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004480                            
00004480                            
00004480                            OscillateNumDo:				; XREF: Level
00004480 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004486 6400                       		bcc.s	locret_41C4
00004488 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000448C 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004492 3619                       		move.w	(a1)+,d3
00004494 720F                       		moveq	#$F,d1
00004496                            
00004496                            loc_4184:
00004496 341A                       		move.w	(a2)+,d2
00004498 381A                       		move.w	(a2)+,d4
0000449A 0303                       		btst	d1,d3
0000449C 6600                       		bne.s	loc_41A4
0000449E 3029 0002                  		move.w	2(a1),d0
000044A2 D042                       		add.w	d2,d0
000044A4 3340 0002                  		move.w	d0,2(a1)
000044A8 D151                       		add.w	d0,0(a1)
000044AA B811                       		cmp.b	0(a1),d4
000044AC 6200                       		bhi.s	loc_41BA
000044AE 03C3                       		bset	d1,d3
000044B0 6000                       		bra.s	loc_41BA
000044B2                            ; ===========================================================================
000044B2                            
000044B2                            loc_41A4:				; XREF: OscillateNumDo
000044B2 3029 0002                  		move.w	2(a1),d0
000044B6 9042                       		sub.w	d2,d0
000044B8 3340 0002                  		move.w	d0,2(a1)
000044BC D151                       		add.w	d0,0(a1)
000044BE B811                       		cmp.b	0(a1),d4
000044C0 6300                       		bls.s	loc_41BA
000044C2 0383                       		bclr	d1,d3
000044C4                            
000044C4                            loc_41BA:
000044C4 5849                       		addq.w	#4,a1
000044C6 51C9 FFCE                  		dbf	d1,loc_4184
000044CA 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
000044CE                            
000044CE                            locret_41C4:
000044CE 4E75                       		rts	
000044D0                            ; End of function OscillateNumDo
000044D0                            
000044D0                            ; ===========================================================================
000044D0 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
000044D4 0002 0018                  		dc.w 2,	$18
000044D8 0002 0020                  		dc.w 2,	$20
000044DC 0002 0030                  		dc.w 2,	$30
000044E0 0004 0020                  		dc.w 4,	$20
000044E4 0008 0008                  		dc.w 8,	8
000044E8 0008 0040                  		dc.w 8,	$40
000044EC 0004 0040                  		dc.w 4,	$40
000044F0 0002 0050                  		dc.w 2,	$50
000044F4 0002 0050                  		dc.w 2,	$50
000044F8 0002 0020                  		dc.w 2,	$20
000044FC 0003 0030                  		dc.w 3,	$30
00004500 0005 0050                  		dc.w 5,	$50
00004504 0007 0070                  		dc.w 7,	$70
00004508 0002 0010                  		dc.w 2,	$10
0000450C 0002 0010                  		dc.w 2,	$10
00004510                            		even
00004510                            
00004510                            ; ---------------------------------------------------------------------------
00004510                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004510                            ; ---------------------------------------------------------------------------
00004510                            
00004510                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004510                            
00004510                            
00004510                            ChangeRingFrame:			; XREF: Level
00004510 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004514 6A00                       		bpl.s	loc_421C
00004516 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
0000451C 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004520 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004526                            
00004526                            loc_421C:
00004526 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0000452A 6A00                       		bpl.s	loc_4232
0000452C 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004532 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004536 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0000453C                            
0000453C                            loc_4232:
0000453C 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004540 6A00                       		bpl.s	loc_4250
00004542 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004548 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0000454C 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004552 6500                       		bcs.s	loc_4250
00004554 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
0000455A                            
0000455A                            loc_4250:
0000455A 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000455E 6700                       		beq.s	locret_4272
00004560 7000                       		moveq	#0,d0
00004562 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004566 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
0000456A 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
0000456E EF58                       		rol.w	#7,d0
00004570 0240 0003                  		andi.w	#3,d0
00004574 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004578 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0000457C                            
0000457C                            locret_4272:
0000457C 4E75                       		rts	
0000457E                            ; End of function ChangeRingFrame
0000457E                            
0000457E                            ; ---------------------------------------------------------------------------
0000457E                            ; End-of-act signpost pattern loading subroutine
0000457E                            ; ---------------------------------------------------------------------------
0000457E                            
0000457E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000457E                            
0000457E                            
0000457E                            SignpostArtLoad:			; XREF: Level
0000457E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004582 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004586 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
0000458C 6700                       		beq.s	Signpost_Exit	; if yes, branch
0000458E 3038 F700                  		move.w	($FFFFF700).w,d0
00004592 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004596 0441 0100                  		subi.w	#$100,d1
0000459A B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
0000459C 6D00                       		blt.s	Signpost_Exit	; if not, branch
0000459E 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000045A2 6700                       		beq.s	Signpost_Exit
000045A4 B278 F728                  		cmp.w	($FFFFF728).w,d1
000045A8 6700                       		beq.s	Signpost_Exit
000045AA 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000045AE 7012                       		moveq	#$12,d0
000045B0 6000 D220                  		bra.w	LoadPLC2	; load signpost	patterns
000045B4                            ; ===========================================================================
000045B4                            
000045B4                            Signpost_Exit:
000045B4 4E75                       		rts	
000045B6                            ; End of function SignpostArtLoad
000045B6                            
000045B6                            ; ===========================================================================
000045B6                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004636                            Demo_MZ:	incbin	demodata\i_mz.bin
00004766                            Demo_SYZ:	incbin	demodata\i_syz.bin
000047E6                            Demo_SS:	incbin	demodata\i_ss.bin
000048E6                            ; ===========================================================================
000048E6                            
000048E6                            ; ---------------------------------------------------------------------------
000048E6                            ; Special Stage
000048E6                            ; ---------------------------------------------------------------------------
000048E6                            
000048E6                            SpecialStage:				; XREF: GameModeArray
000048E6 303C 00CA                  		move.w	#$CA,d0
000048EA 6100 CCD0                  		bsr.w	PlaySound_Special ; play special stage entry sound
000048EE 6100 D872                  		bsr.w	Pal_MakeFlash
000048F2 46FC 2700                  		move	#$2700,sr
000048F6 4DF9 00C0 0004             		lea	($C00004).l,a6
000048FC 3CBC 8B03                  		move.w	#$8B03,(a6)
00004900 3CBC 8004                  		move.w	#$8004,(a6)
00004904 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
0000490A 3CBC 9011                  		move.w	#$9011,(a6)
0000490E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004912 0200 00BF                  		andi.b	#$BF,d0
00004916 33C0 00C0 0004             		move.w	d0,($C00004).l
0000491C 6100 CBC6                  		bsr.w	ClearScreen
00004920 46FC 2300                  		move	#$2300,sr
00004924 4BF9 00C0 0004             		lea	($C00004).l,a5
0000492A 3ABC 8F01                  		move.w	#$8F01,(a5)
0000492E 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004934 3ABC 9780                  		move.w	#$9780,(a5)
00004938 2ABC 5000 0081             		move.l	#$50000081,(a5)
0000493E 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004946                            
00004946                            loc_463C:
00004946 3215                       		move.w	(a5),d1
00004948 0801 0001                  		btst	#1,d1
0000494C 66F8                       		bne.s	loc_463C
0000494E 3ABC 8F02                  		move.w	#$8F02,(a5)
00004952 6100 0000                  		bsr.w	SS_BGLoad
00004956 7014                       		moveq	#$14,d0
00004958 6100 CFB2                  		bsr.w	RunPLC_ROM	; load special stage patterns
0000495C 43F8 D000                  		lea	($FFFFD000).w,a1
00004960 7000                       		moveq	#0,d0
00004962 323C 07FF                  		move.w	#$7FF,d1
00004966                            
00004966                            SS_ClrObjRam:
00004966 22C0                       		move.l	d0,(a1)+
00004968 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
0000496C                            
0000496C 43F8 F700                  		lea	($FFFFF700).w,a1
00004970 7000                       		moveq	#0,d0
00004972 323C 003F                  		move.w	#$3F,d1
00004976                            
00004976                            SS_ClrRam:
00004976 22C0                       		move.l	d0,(a1)+
00004978 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
0000497C                            
0000497C 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004980 7000                       		moveq	#0,d0
00004982 323C 0027                  		move.w	#$27,d1
00004986                            
00004986                            SS_ClrRam2:
00004986 22C0                       		move.l	d0,(a1)+
00004988 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
0000498C                            
0000498C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004990 7000                       		moveq	#0,d0
00004992 323C 007F                  		move.w	#$7F,d1
00004996                            
00004996                            SS_ClrNemRam:
00004996 22C0                       		move.l	d0,(a1)+
00004998 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
0000499C                            
0000499C 4238 F64E                  		clr.b	($FFFFF64E).w
000049A0 4278 FE02                  		clr.w	($FFFFFE02).w
000049A4 700A                       		moveq	#$A,d0
000049A6 6100 D93A                  		bsr.w	PalLoad1	; load special stage pallet
000049AA 4EB9 0000 0000             		jsr	SS_Load
000049B0 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000049B8 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000049C0 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
000049C6 6100 0000                  		bsr.w	PalCycle_SS
000049CA 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
000049CE 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
000049D4 303C 0089                  		move.w	#$89,d0
000049D8 6100 CBDC                  		bsr.w	PlaySound	; play special stage BG	music
000049DC 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000049E2 43F9 0000 4392             		lea	(Demo_Index).l,a1
000049E8 7006                       		moveq	#6,d0
000049EA E548                       		lsl.w	#2,d0
000049EC 2271 0000                  		movea.l	(a1,d0.w),a1
000049F0 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
000049F6 5338 F792                  		subq.b	#1,($FFFFF792).w
000049FA 4278 FE20                  		clr.w	($FFFFFE20).w
000049FE 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004A02 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004A08 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004A0E 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004A12 6700                       		beq.s	SS_NoDebug	; if not, branch
00004A14 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004A1A 6700                       		beq.s	SS_NoDebug	; if not, branch
00004A1C 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004A22                            
00004A22                            SS_NoDebug:
00004A22 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004A26 0000 0040                  		ori.b	#$40,d0
00004A2A 33C0 00C0 0004             		move.w	d0,($C00004).l
00004A30 6100 D684                  		bsr.w	Pal_MakeWhite
00004A34                            
00004A34                            ; ---------------------------------------------------------------------------
00004A34                            ; Main Special Stage loop
00004A34                            ; ---------------------------------------------------------------------------
00004A34                            
00004A34                            SS_MainLoop:
00004A34 6100 CB92                  		bsr.w	PauseGame
00004A38 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004A3E 6100 E176                  		bsr.w	DelayProgram
00004A42 6100 F89E                  		bsr.w	MoveSonicInDemo
00004A46 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004A4C 4EB9 0000 0000             		jsr	ObjectsLoad
00004A52 4EB9 0000 0000             		jsr	BuildSprites
00004A58 4EB9 0000 0000             		jsr	SS_ShowLayout
00004A5E 6100 0000                  		bsr.w	SS_BGAnimate
00004A62 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004A66 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004A68 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004A6C 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004A70                            
00004A70                            SS_ChkEnd:
00004A70 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004A76 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004A7A                            
00004A7A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004A7E 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004A82 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004A88 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004A8E 6500                       		bcs.s	SS_End		; if not, branch
00004A90 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004A94                            
00004A94                            SS_End:
00004A94 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004A9A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004AA0 4278 F794                  		clr.w	($FFFFF794).w
00004AA4                            
00004AA4                            SS_EndLoop:
00004AA4 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004AAA 6100 E10A                  		bsr.w	DelayProgram
00004AAE 6100 F832                  		bsr.w	MoveSonicInDemo
00004AB2 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004AB8 4EB9 0000 0000             		jsr	ObjectsLoad
00004ABE 4EB9 0000 0000             		jsr	BuildSprites
00004AC4 4EB9 0000 0000             		jsr	SS_ShowLayout
00004ACA 6100 0000                  		bsr.w	SS_BGAnimate
00004ACE 5378 F794                  		subq.w	#1,($FFFFF794).w
00004AD2 6A00                       		bpl.s	loc_47D4
00004AD4 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004ADA 6100 D6A6                  		bsr.w	Pal_ToWhite
00004ADE                            
00004ADE                            loc_47D4:
00004ADE 4A78 F614                  		tst.w	($FFFFF614).w
00004AE2 66C0                       		bne.s	SS_EndLoop
00004AE4                            
00004AE4 46FC 2700                  		move	#$2700,sr
00004AE8 4DF9 00C0 0004             		lea	($C00004).l,a6
00004AEE 3CBC 8230                  		move.w	#$8230,(a6)
00004AF2 3CBC 8407                  		move.w	#$8407,(a6)
00004AF6 3CBC 9001                  		move.w	#$9001,(a6)
00004AFA 6100 C9E8                  		bsr.w	ClearScreen
00004AFE 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004B08 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004B0E 6100 CB50                  		bsr.w	NemDec
00004B12 4EB9 0000 0000             		jsr	Hud_Base
00004B18 46FC 2300                  		move	#$2300,sr
00004B1C 7011                       		moveq	#$11,d0
00004B1E 6100 D7DE                  		bsr.w	PalLoad2	; load results screen pallet
00004B22 7000                       		moveq	#0,d0
00004B24 6100 CCAC                  		bsr.w	LoadPLC2
00004B28 701B                       		moveq	#$1B,d0
00004B2A 6100 CC74                  		bsr.w	LoadPLC		; load results screen patterns
00004B2E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004B34 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004B3A 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004B3E C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004B42 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004B46 303C 008E                  		move.w	#$8E,d0
00004B4A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004B50 43F8 D000                  		lea	($FFFFD000).w,a1
00004B54 7000                       		moveq	#0,d0
00004B56 323C 07FF                  		move.w	#$7FF,d1
00004B5A                            
00004B5A                            SS_EndClrObjRam:
00004B5A 22C0                       		move.l	d0,(a1)+
00004B5C 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004B60                            
00004B60 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004B66                            
00004B66                            SS_NormalExit:
00004B66 6100 CA60                  		bsr.w	PauseGame
00004B6A 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004B70 6100 E044                  		bsr.w	DelayProgram
00004B74 4EB9 0000 0000             		jsr	ObjectsLoad
00004B7A 4EB9 0000 0000             		jsr	BuildSprites
00004B80 6100 CC8A                  		bsr.w	RunPLC_RAM
00004B84 4A78 FE02                  		tst.w	($FFFFFE02).w
00004B88 67DC                       		beq.s	SS_NormalExit
00004B8A 4AB8 F680                  		tst.l	($FFFFF680).w
00004B8E 66D6                       		bne.s	SS_NormalExit
00004B90 303C 00CA                  		move.w	#$CA,d0
00004B94 6100 CA26                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004B98 6100 D5C8                  		bsr.w	Pal_MakeFlash
00004B9C 4E75                       		rts	
00004B9E                            ; ===========================================================================
00004B9E                            
00004B9E                            SS_ToSegaScreen:
00004B9E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004BA4 4E75                       		rts
00004BA6                            
00004BA6                            ; ---------------------------------------------------------------------------
00004BA6                            ; Special stage	background loading subroutine
00004BA6                            ; ---------------------------------------------------------------------------
00004BA6                            
00004BA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BA6                            
00004BA6                            
00004BA6                            SS_BGLoad:				; XREF: SpecialStage
00004BA6 43F9 00FF 0000             		lea	($FF0000).l,a1
00004BAC 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004BB2 303C 4051                  		move.w	#$4051,d0
00004BB6 6100 CD86                  		bsr.w	EniDec
00004BBA 263C 5000 0001             		move.l	#$50000001,d3
00004BC0 45F9 00FF 0080             		lea	($FF0080).l,a2
00004BC6 7E06                       		moveq	#6,d7
00004BC8                            
00004BC8                            loc_48BE:
00004BC8 2003                       		move.l	d3,d0
00004BCA 7C03                       		moveq	#3,d6
00004BCC 7800                       		moveq	#0,d4
00004BCE 0C47 0003                  		cmpi.w	#3,d7
00004BD2 6400                       		bcc.s	loc_48CC
00004BD4 7801                       		moveq	#1,d4
00004BD6                            
00004BD6                            loc_48CC:
00004BD6 7A07                       		moveq	#7,d5
00004BD8                            
00004BD8                            loc_48CE:
00004BD8 224A                       		movea.l	a2,a1
00004BDA 0A04 0001                  		eori.b	#1,d4
00004BDE 6600                       		bne.s	loc_48E2
00004BE0 0C47 0006                  		cmpi.w	#6,d7
00004BE4 6600                       		bne.s	loc_48F2
00004BE6 43F9 00FF 0000             		lea	($FF0000).l,a1
00004BEC                            
00004BEC                            loc_48E2:
00004BEC 48E7 F800                  		movem.l	d0-d4,-(sp)
00004BF0 7207                       		moveq	#7,d1
00004BF2 7407                       		moveq	#7,d2
00004BF4 6100 CA4A                  		bsr.w	ShowVDPGraphics
00004BF8 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004BFC                            
00004BFC                            loc_48F2:
00004BFC 0680 0010 0000             		addi.l	#$100000,d0
00004C02 51CD FFD4                  		dbf	d5,loc_48CE
00004C06 0680 0380 0000             		addi.l	#$3800000,d0
00004C0C 0A04 0001                  		eori.b	#1,d4
00004C10 51CE FFC4                  		dbf	d6,loc_48CC
00004C14 0683 1000 0000             		addi.l	#$10000000,d3
00004C1A 6A00                       		bpl.s	loc_491C
00004C1C 4843                       		swap	d3
00004C1E 0683 0000 C000             		addi.l	#$C000,d3
00004C24 4843                       		swap	d3
00004C26                            
00004C26                            loc_491C:
00004C26 D4FC 0080                  		adda.w	#$80,a2
00004C2A 51CF FF9C                  		dbf	d7,loc_48BE
00004C2E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C34 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004C3A 303C 4000                  		move.w	#$4000,d0
00004C3E 6100 CCFE                  		bsr.w	EniDec
00004C42 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C48 203C 4000 0003             		move.l	#$40000003,d0
00004C4E 723F                       		moveq	#$3F,d1
00004C50 741F                       		moveq	#$1F,d2
00004C52 6100 C9EC                  		bsr.w	ShowVDPGraphics
00004C56 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C5C 203C 5000 0003             		move.l	#$50000003,d0
00004C62 723F                       		moveq	#$3F,d1
00004C64 743F                       		moveq	#$3F,d2
00004C66 6100 C9D8                  		bsr.w	ShowVDPGraphics
00004C6A 4E75                       		rts	
00004C6C                            ; End of function SS_BGLoad
00004C6C                            
00004C6C                            ; ---------------------------------------------------------------------------
00004C6C                            ; Pallet cycling routine - special stage
00004C6C                            ; ---------------------------------------------------------------------------
00004C6C                            
00004C6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004C6C                            
00004C6C                            
00004C6C                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004C6C 4A78 F63A                  		tst.w	($FFFFF63A).w
00004C70 6600                       		bne.s	locret_49E6
00004C72 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004C76 6A00                       		bpl.s	locret_49E6
00004C78 4DF9 00C0 0004             		lea	($C00004).l,a6
00004C7E 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004C82 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004C86 0240 001F                  		andi.w	#$1F,d0
00004C8A E548                       		lsl.w	#2,d0
00004C8C 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004C92 D0C0                       		adda.w	d0,a0
00004C94 1018                       		move.b	(a0)+,d0
00004C96 6A00                       		bpl.s	loc_4992
00004C98 303C 01FF                  		move.w	#$1FF,d0
00004C9C                            
00004C9C                            loc_4992:
00004C9C 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004CA0 7000                       		moveq	#0,d0
00004CA2 1018                       		move.b	(a0)+,d0
00004CA4 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004CA8 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004CAE 43F1 0000                  		lea	(a1,d0.w),a1
00004CB2 303C 8200                  		move.w	#-$7E00,d0
00004CB6 1019                       		move.b	(a1)+,d0
00004CB8 3C80                       		move.w	d0,(a6)
00004CBA 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004CBE 303C 8400                  		move.w	#-$7C00,d0
00004CC2 1018                       		move.b	(a0)+,d0
00004CC4 3C80                       		move.w	d0,(a6)
00004CC6 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004CD0 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004CD8 7000                       		moveq	#0,d0
00004CDA 1018                       		move.b	(a0)+,d0
00004CDC 6B00                       		bmi.s	loc_49E8
00004CDE 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004CE4 D2C0                       		adda.w	d0,a1
00004CE6 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004CEA 24D9                       		move.l	(a1)+,(a2)+
00004CEC 24D9                       		move.l	(a1)+,(a2)+
00004CEE 24D9                       		move.l	(a1)+,(a2)+
00004CF0                            
00004CF0                            locret_49E6:
00004CF0 4E75                       		rts	
00004CF2                            ; ===========================================================================
00004CF2                            
00004CF2                            loc_49E8:				; XREF: PalCycle_SS
00004CF2 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004CF6 0C40 008A                  		cmpi.w	#$8A,d0
00004CFA 6500                       		bcs.s	loc_49F4
00004CFC 5241                       		addq.w	#1,d1
00004CFE                            
00004CFE                            loc_49F4:
00004CFE C2FC 002A                  		mulu.w	#$2A,d1
00004D02 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004D08 D2C1                       		adda.w	d1,a1
00004D0A 0240 007F                  		andi.w	#$7F,d0
00004D0E 0880 0000                  		bclr	#0,d0
00004D12 6700                       		beq.s	loc_4A18
00004D14 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004D18 24D1                       		move.l	(a1),(a2)+
00004D1A 24E9 0004                  		move.l	4(a1),(a2)+
00004D1E 24E9 0008                  		move.l	8(a1),(a2)+
00004D22                            
00004D22                            loc_4A18:
00004D22 D2FC 000C                  		adda.w	#$C,a1
00004D26 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004D2A 0C40 000A                  		cmpi.w	#$A,d0
00004D2E 6500                       		bcs.s	loc_4A2E
00004D30 0440 000A                  		subi.w	#$A,d0
00004D34 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004D38                            
00004D38                            loc_4A2E:
00004D38 3200                       		move.w	d0,d1
00004D3A D040                       		add.w	d0,d0
00004D3C D041                       		add.w	d1,d0
00004D3E D2C0                       		adda.w	d0,a1
00004D40 24D9                       		move.l	(a1)+,(a2)+
00004D42 34D9                       		move.w	(a1)+,(a2)+
00004D44 4E75                       		rts	
00004D46                            ; End of function PalCycle_SS
00004D46                            
00004D46                            ; ===========================================================================
00004D46 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004D56                            					; XREF: PalCycle_SS
00004D56 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004D66 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004D76 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004D86 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004D96 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004DA6 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004DB6 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004DC6                            		even
00004DC6 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004DD4                            					; XREF: PalCycle_SS
00004DD4                            		even
00004DD4                            
00004DD4                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004E1C                            		even
00004E1C                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004EEE                            		even
00004EEE                            
00004EEE                            ; ---------------------------------------------------------------------------
00004EEE                            ; Subroutine to	make the special stage background animated
00004EEE                            ; ---------------------------------------------------------------------------
00004EEE                            
00004EEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EEE                            
00004EEE                            
00004EEE                            SS_BGAnimate:				; XREF: SpecialStage
00004EEE 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004EF2 6600                       		bne.s	loc_4BF6
00004EF4 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004EFA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004F00                            
00004F00                            loc_4BF6:
00004F00 0C40 0008                  		cmpi.w	#8,d0
00004F04 6400                       		bcc.s	loc_4C4E
00004F06 0C40 0006                  		cmpi.w	#6,d0
00004F0A 6600                       		bne.s	loc_4C10
00004F0C 5278 F718                  		addq.w	#1,($FFFFF718).w
00004F10 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004F14 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004F1A                            
00004F1A                            loc_4C10:
00004F1A 7000                       		moveq	#0,d0
00004F1C 3038 F708                  		move.w	($FFFFF708).w,d0
00004F20 4440                       		neg.w	d0
00004F22 4840                       		swap	d0
00004F24 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004F2A 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004F2E 7609                       		moveq	#9,d3
00004F30                            
00004F30                            loc_4C26:
00004F30 302B 0002                  		move.w	2(a3),d0
00004F34 6100 DCB2                  		bsr.w	CalcSine
00004F38 7400                       		moveq	#0,d2
00004F3A 1419                       		move.b	(a1)+,d2
00004F3C C1C2                       		muls.w	d2,d0
00004F3E E080                       		asr.l	#8,d0
00004F40 36C0                       		move.w	d0,(a3)+
00004F42 1419                       		move.b	(a1)+,d2
00004F44 4882                       		ext.w	d2
00004F46 D55B                       		add.w	d2,(a3)+
00004F48 51CB FFE6                  		dbf	d3,loc_4C26
00004F4C 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004F50 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004F56 6000                       		bra.s	loc_4C7E
00004F58                            ; ===========================================================================
00004F58                            
00004F58                            loc_4C4E:				; XREF: SS_BGAnimate
00004F58 0C40 000C                  		cmpi.w	#$C,d0
00004F5C 6600                       		bne.s	loc_4C74
00004F5E 5378 F718                  		subq.w	#1,($FFFFF718).w
00004F62 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004F66 243C 0001 8000             		move.l	#$18000,d2
00004F6C 7206                       		moveq	#6,d1
00004F6E                            
00004F6E                            loc_4C64:
00004F6E 2013                       		move.l	(a3),d0
00004F70 9082                       		sub.l	d2,d0
00004F72 26C0                       		move.l	d0,(a3)+
00004F74 0482 0000 2000             		subi.l	#$2000,d2
00004F7A 51C9 FFF2                  		dbf	d1,loc_4C64
00004F7E                            
00004F7E                            loc_4C74:
00004F7E 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004F82 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004F88                            
00004F88                            loc_4C7E:
00004F88 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004F8C 3038 F718                  		move.w	($FFFFF718).w,d0
00004F90 4440                       		neg.w	d0
00004F92 4840                       		swap	d0
00004F94 7600                       		moveq	#0,d3
00004F96 161A                       		move.b	(a2)+,d3
00004F98 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004F9C 4442                       		neg.w	d2
00004F9E 0242 00FF                  		andi.w	#$FF,d2
00004FA2 E54A                       		lsl.w	#2,d2
00004FA4                            
00004FA4                            loc_4C9A:
00004FA4 301B                       		move.w	(a3)+,d0
00004FA6 544B                       		addq.w	#2,a3
00004FA8 7200                       		moveq	#0,d1
00004FAA 121A                       		move.b	(a2)+,d1
00004FAC 5341                       		subq.w	#1,d1
00004FAE                            
00004FAE                            loc_4CA4:
00004FAE 2380 2000                  		move.l	d0,(a1,d2.w)
00004FB2 5842                       		addq.w	#4,d2
00004FB4 0242 03FC                  		andi.w	#$3FC,d2
00004FB8 51C9 FFF4                  		dbf	d1,loc_4CA4
00004FBC 51CB FFE6                  		dbf	d3,loc_4C9A
00004FC0 4E75                       		rts	
00004FC2                            ; End of function SS_BGAnimate
00004FC2                            
00004FC2                            ; ===========================================================================
00004FC2 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00004FCE                            		even
00004FCE 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00004FD6                            		even
00004FD6 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00004FEA                            		even
00004FEA                            					; XREF: SS_BGAnimate
00004FEA                            ; ===========================================================================
00004FEA                            
00004FEA                            ; ---------------------------------------------------------------------------
00004FEA                            ; Continue screen
00004FEA                            ; ---------------------------------------------------------------------------
00004FEA                            
00004FEA                            ContinueScreen:				; XREF: GameModeArray
00004FEA 6100 D04C                  		bsr.w	Pal_FadeFrom
00004FEE 46FC 2700                  		move	#$2700,sr
00004FF2 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004FF6 0200 00BF                  		andi.b	#$BF,d0
00004FFA 33C0 00C0 0004             		move.w	d0,($C00004).l
00005000 4DF9 00C0 0004             		lea	($C00004).l,a6
00005006 3CBC 8004                  		move.w	#$8004,(a6)
0000500A 3CBC 8700                  		move.w	#$8700,(a6)
0000500E 6100 C4D4                  		bsr.w	ClearScreen
00005012 43F8 D000                  		lea	($FFFFD000).w,a1
00005016 7000                       		moveq	#0,d0
00005018 323C 07FF                  		move.w	#$7FF,d1
0000501C                            
0000501C                            Cont_ClrObjRam:
0000501C 22C0                       		move.l	d0,(a1)+
0000501E 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005022                            
00005022 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000502C 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005032 6100 C62C                  		bsr.w	NemDec
00005036 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00005040 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005046 6100 C618                  		bsr.w	NemDec
0000504A 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00005054 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
0000505A 6100 C604                  		bsr.w	NemDec
0000505E 720A                       		moveq	#10,d1
00005060 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00005066 7012                       		moveq	#$12,d0
00005068 6100 D278                  		bsr.w	PalLoad1	; load continue	screen pallet
0000506C 103C 0090                  		move.b	#$90,d0
00005070 6100 C544                  		bsr.w	PlaySound	; play continue	music
00005074 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
0000507A 42B8 F700                  		clr.l	($FFFFF700).w
0000507E 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00005086 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
0000508C 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00005092 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00005098 11FC 0003 D098             		move.b	#3,($FFFFD098).w
0000509E 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000050A4 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000050AA 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000050B0 4EB9 0000 0000             		jsr	ObjectsLoad
000050B6 4EB9 0000 0000             		jsr	BuildSprites
000050BC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000050C0 0000 0040                  		ori.b	#$40,d0
000050C4 33C0 00C0 0004             		move.w	d0,($C00004).l
000050CA 6100 CEC6                  		bsr.w	Pal_FadeTo
000050CE                            
000050CE                            ; ---------------------------------------------------------------------------
000050CE                            ; Continue screen main loop
000050CE                            ; ---------------------------------------------------------------------------
000050CE                            
000050CE                            Cont_MainLoop:
000050CE 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000050D4 6100 DAE0                  		bsr.w	DelayProgram
000050D8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000050DE 6400                       		bcc.s	loc_4DF2
000050E0 46FC 2700                  		move	#$2700,sr
000050E4 3238 F614                  		move.w	($FFFFF614).w,d1
000050E8 82FC 003C                  		divu.w	#$3C,d1
000050EC 0281 0000 000F             		andi.l	#$F,d1
000050F2 4EB9 0000 0000             		jsr	ContScrCounter
000050F8 46FC 2300                  		move	#$2300,sr
000050FC                            
000050FC                            loc_4DF2:
000050FC 4EB9 0000 0000             		jsr	ObjectsLoad
00005102 4EB9 0000 0000             		jsr	BuildSprites
00005108 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
0000510E 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00005110 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005116 64B6                       		bcc.s	Cont_MainLoop
00005118 4A78 F614                  		tst.w	($FFFFF614).w
0000511C 6600 FFB0                  		bne.w	Cont_MainLoop
00005120 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005126 4E75                       		rts	
00005128                            ; ===========================================================================
00005128                            
00005128                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005128 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000512E 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005134 7000                       		moveq	#0,d0
00005136 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000513A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000513E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005142 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005146 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
0000514A 4E75                       		rts	
0000514C                            ; ===========================================================================
0000514C                            
0000514C                            ; ---------------------------------------------------------------------------
0000514C                            ; Object 80 - Continue screen elements
0000514C                            ; ---------------------------------------------------------------------------
0000514C                            
0000514C                            Obj80:					; XREF: Obj_Index
0000514C 7000                       		moveq	#0,d0
0000514E 1028 0024                  		move.b	$24(a0),d0
00005152 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005156 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
0000515A                            ; ===========================================================================
0000515A 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
0000515C 0000                       		dc.w Obj80_Display-Obj80_Index
0000515E 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00005160 0000                       		dc.w Obj80_ChkType-Obj80_Index
00005162                            ; ===========================================================================
00005162                            
00005162                            Obj80_Main:				; XREF: Obj80_Index
00005162 5428 0024                  		addq.b	#2,$24(a0)
00005166 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
0000516E 317C 8500 0002             		move.w	#$8500,2(a0)
00005174 117C 0000 0001             		move.b	#0,1(a0)
0000517A 117C 003C 0019             		move.b	#$3C,$19(a0)
00005180 317C 0120 0008             		move.w	#$120,8(a0)
00005186 317C 00C0 000A             		move.w	#$C0,$A(a0)
0000518C 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00005192                            
00005192                            Obj80_Display:				; XREF: Obj80_Index
00005192 4EF9 0000 0000             		jmp	DisplaySprite
00005198                            ; ===========================================================================
00005198                            Obj80_MiniSonicPos:
00005198 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000051AA 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000051B6                            ; ===========================================================================
000051B6                            
000051B6                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000051B6 2248                       		movea.l	a0,a1
000051B8 45F9 0000 5198             		lea	(Obj80_MiniSonicPos).l,a2
000051BE 7200                       		moveq	#0,d1
000051C0 1238 FE18                  		move.b	($FFFFFE18).w,d1
000051C4 5501                       		subq.b	#2,d1
000051C6 6400                       		bcc.s	loc_4EC4
000051C8 4EF9 0000 0000             		jmp	DeleteObject
000051CE                            ; ===========================================================================
000051CE                            
000051CE                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
000051CE 7601                       		moveq	#1,d3
000051D0 0C01 000E                  		cmpi.b	#$E,d1
000051D4 6500                       		bcs.s	loc_4ED0
000051D6 7600                       		moveq	#0,d3
000051D8 720E                       		moveq	#$E,d1
000051DA                            
000051DA                            loc_4ED0:
000051DA 1401                       		move.b	d1,d2
000051DC 0202 0001                  		andi.b	#1,d2
000051E0                            
000051E0                            Obj80_MiniSonLoop:
000051E0 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
000051E4 335A 0008                  		move.w	(a2)+,8(a1)
000051E8 4A02                       		tst.b	d2
000051EA 6700                       		beq.s	loc_4EEA
000051EC 0469 000A 0008             		subi.w	#$A,8(a1)
000051F2                            
000051F2                            loc_4EEA:
000051F2 337C 00D0 000A             		move.w	#$D0,$A(a1)
000051F8 137C 0006 001A             		move.b	#6,$1A(a1)
000051FE 137C 0006 0024             		move.b	#6,$24(a1)
00005204 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
0000520C 337C 8551 0002             		move.w	#$8551,2(a1)
00005212 137C 0000 0001             		move.b	#0,1(a1)
00005218 43E9 0040                  		lea	$40(a1),a1
0000521C 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00005220 43E9 FFC0                  		lea	-$40(a1),a1
00005224 1343 0028                  		move.b	d3,$28(a1)
00005228                            
00005228                            Obj80_ChkType:				; XREF: Obj80_Index
00005228 4A28 0028                  		tst.b	$28(a0)
0000522C 6700                       		beq.s	loc_4F40
0000522E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005234 6500                       		bcs.s	loc_4F40
00005236 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000523A 0200 0001                  		andi.b	#1,d0
0000523E 6600                       		bne.s	loc_4F40
00005240 4A78 D010                  		tst.w	($FFFFD010).w
00005244 6600                       		bne.s	Obj80_Delete
00005246 4E75                       		rts	
00005248                            ; ===========================================================================
00005248                            
00005248                            loc_4F40:				; XREF: Obj80_ChkType
00005248 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000524C 0200 000F                  		andi.b	#$F,d0
00005250 6600                       		bne.s	Obj80_Display2
00005252 0868 0000 001A             		bchg	#0,$1A(a0)
00005258                            
00005258                            Obj80_Display2:
00005258 4EF9 0000 0000             		jmp	DisplaySprite
0000525E                            ; ===========================================================================
0000525E                            
0000525E                            Obj80_Delete:				; XREF: Obj80_ChkType
0000525E 4EF9 0000 0000             		jmp	DeleteObject
00005264                            ; ===========================================================================
00005264                            
00005264                            ; ---------------------------------------------------------------------------
00005264                            ; Object 81 - Sonic on the continue screen
00005264                            ; ---------------------------------------------------------------------------
00005264                            
00005264                            Obj81:					; XREF: Obj_Index
00005264 7000                       		moveq	#0,d0
00005266 1028 0024                  		move.b	$24(a0),d0
0000526A 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
0000526E 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00005272 4EF9 0000 0000             		jmp	DisplaySprite
00005278                            ; ===========================================================================
00005278 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
0000527A 0000                       		dc.w Obj81_ChkLand-Obj81_Index
0000527C 0000                       		dc.w Obj81_Animate-Obj81_Index
0000527E 0000                       		dc.w Obj81_Run-Obj81_Index
00005280                            ; ===========================================================================
00005280                            
00005280                            Obj81_Main:				; XREF: Obj81_Index
00005280 5428 0024                  		addq.b	#2,$24(a0)
00005284 317C 00A0 0008             		move.w	#$A0,8(a0)
0000528A 317C 00C0 000C             		move.w	#$C0,$C(a0)
00005290 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005298 317C 0780 0002             		move.w	#$780,2(a0)
0000529E 117C 0004 0001             		move.b	#4,1(a0)
000052A4 117C 0002 0018             		move.b	#2,$18(a0)
000052AA 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000052B0 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000052B6                            
000052B6                            Obj81_ChkLand:				; XREF: Obj81_Index
000052B6 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000052BC 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000052BE 5428 0024                  		addq.b	#2,$24(a0)
000052C2 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
000052C6 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000052CE 317C 8500 0002             		move.w	#$8500,2(a0)
000052D4 117C 0000 001C             		move.b	#0,$1C(a0)
000052DA 6000                       		bra.s	Obj81_Animate
000052DC                            ; ===========================================================================
000052DC                            
000052DC                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
000052DC 4EB9 0000 0000             		jsr	SpeedToPos
000052E2 4EB9 0000 0000             		jsr	Sonic_Animate
000052E8 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000052EE                            ; ===========================================================================
000052EE                            
000052EE                            Obj81_Animate:				; XREF: Obj81_Index
000052EE 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
000052F2 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
000052F4 43F9 0000 0000             		lea	(Ani_obj81).l,a1
000052FA 4EF9 0000 0000             		jmp	AnimateSprite
00005300                            ; ===========================================================================
00005300                            
00005300                            Obj81_GetUp:				; XREF: Obj81_Animate
00005300 5428 0024                  		addq.b	#2,$24(a0)
00005304 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000530C 317C 0780 0002             		move.w	#$780,2(a0)
00005312 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005318 4268 0014                  		clr.w	$14(a0)
0000531C 5168 000C                  		subq.w	#8,$C(a0)
00005320 103C 00E0                  		move.b	#$E0,d0
00005324 6100 C296                  		bsr.w	PlaySound_Special ; fade out music
00005328                            
00005328                            Obj81_Run:				; XREF: Obj81_Index
00005328 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
0000532E 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005330 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005336 6000                       		bra.s	Obj81_ShowRun
00005338                            ; ===========================================================================
00005338                            
00005338                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005338 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
0000533E                            
0000533E                            Obj81_ShowRun:				; XREF: Obj81_Run
0000533E 4EB9 0000 0000             		jsr	SpeedToPos
00005344 4EB9 0000 0000             		jsr	Sonic_Animate
0000534A 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005350                            ; ===========================================================================
00005350                            Ani_obj81:
00005350                            	include "_anim\obj81.asm"
00005350                            ; ---------------------------------------------------------------------------
00005350                            ; Animation script - Sonic on the continue screen
00005350                            ; ---------------------------------------------------------------------------
00005350 0000                       		dc.w byte_504A-Ani_obj81
00005352 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
0000535E 00                         		even
0000535E 00                         		even
0000535E                            
0000535E                            ; ---------------------------------------------------------------------------
0000535E                            ; Sprite mappings - Continue screen
0000535E                            ; ---------------------------------------------------------------------------
0000535E                            Map_obj80:
0000535E                            	include "_maps\obj80.asm"
0000535E                            ; ---------------------------------------------------------------------------
0000535E                            ; Sprite mappings - Continue screen
0000535E                            ; ---------------------------------------------------------------------------
0000535E 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005362 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005366 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
0000536A 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
0000536E 0B                         byte_5066:	dc.b $B
0000536F F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005374 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005379 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
0000537E F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005383 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005388 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
0000538D F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005392 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005397 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
0000539C 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000053A1 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000053A6 03                         byte_509E:	dc.b 3
000053A7 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000053AC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000053B1 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000053B6 03                         byte_50AE:	dc.b 3
000053B7 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000053BC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000053C1 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000053C6 03                         byte_50BE:	dc.b 3
000053C7 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000053CC F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000053D1 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000053D6 02                         byte_50CE:	dc.b 2
000053D7 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000053DC 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000053E1 01                         byte_50D9:	dc.b 1
000053E2 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000053E7 01                         byte_50DF:	dc.b 1
000053E8 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000053EE 00                         		even
000053EE 00                         		even
000053EE                            
000053EE                            ; ===========================================================================
000053EE                            ; ---------------------------------------------------------------------------
000053EE                            ; Ending sequence in Green Hill	Zone
000053EE                            ; ---------------------------------------------------------------------------
000053EE                            
000053EE                            EndingSequence:				; XREF: GameModeArray
000053EE 103C 00E4                  		move.b	#$E4,d0
000053F2 6100 C1C8                  		bsr.w	PlaySound_Special ; stop music
000053F6 6100 CC40                  		bsr.w	Pal_FadeFrom
000053FA 43F8 D000                  		lea	($FFFFD000).w,a1
000053FE 7000                       		moveq	#0,d0
00005400 323C 07FF                  		move.w	#$7FF,d1
00005404                            
00005404                            End_ClrObjRam:
00005404 22C0                       		move.l	d0,(a1)+
00005406 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
0000540A                            
0000540A 43F8 F628                  		lea	($FFFFF628).w,a1
0000540E 7000                       		moveq	#0,d0
00005410 323C 0015                  		move.w	#$15,d1
00005414                            
00005414                            End_ClrRam:
00005414 22C0                       		move.l	d0,(a1)+
00005416 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
0000541A                            
0000541A 43F8 F700                  		lea	($FFFFF700).w,a1
0000541E 7000                       		moveq	#0,d0
00005420 323C 003F                  		move.w	#$3F,d1
00005424                            
00005424                            End_ClrRam2:
00005424 22C0                       		move.l	d0,(a1)+
00005426 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
0000542A                            
0000542A 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000542E 7000                       		moveq	#0,d0
00005430 323C 0047                  		move.w	#$47,d1
00005434                            
00005434                            End_ClrRam3:
00005434 22C0                       		move.l	d0,(a1)+
00005436 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
0000543A                            
0000543A 46FC 2700                  		move	#$2700,sr
0000543E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005442 0200 00BF                  		andi.b	#$BF,d0
00005446 33C0 00C0 0004             		move.w	d0,($C00004).l
0000544C 6100 C096                  		bsr.w	ClearScreen
00005450 4DF9 00C0 0004             		lea	($C00004).l,a6
00005456 3CBC 8B03                  		move.w	#$8B03,(a6)
0000545A 3CBC 8230                  		move.w	#$8230,(a6)
0000545E 3CBC 8407                  		move.w	#$8407,(a6)
00005462 3CBC 857C                  		move.w	#$857C,(a6)
00005466 3CBC 9001                  		move.w	#$9001,(a6)
0000546A 3CBC 8004                  		move.w	#$8004,(a6)
0000546E 3CBC 8720                  		move.w	#$8720,(a6)
00005472 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005478 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000547C 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005482 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005488 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000548E 6700                       		beq.s	End_LoadData	; if yes, branch
00005490 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005496                            
00005496                            End_LoadData:
00005496 701C                       		moveq	#$1C,d0
00005498 6100 C472                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
0000549C 4EB9 0000 0000             		jsr	Hud_Base
000054A2 6100 0000                  		bsr.w	LevelSizeLoad
000054A6 6100 0000                  		bsr.w	DeformBgLayer
000054AA 08F8 0002 F754             		bset	#2,($FFFFF754).w
000054B0 6100 0000                  		bsr.w	MainLoadBlockLoad
000054B4 6100 0000                  		bsr.w	LoadTilesFromStart
000054B8 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000054C0 46FC 2300                  		move	#$2300,sr
000054C4 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000054CA 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000054CE 6100 C5EC                  		bsr.w	KosDec
000054D2 7003                       		moveq	#3,d0
000054D4 6100 CE0C                  		bsr.w	PalLoad1	; load Sonic's pallet
000054D8 303C 008B                  		move.w	#$8B,d0
000054DC 6100 C0D8                  		bsr.w	PlaySound	; play ending sequence music
000054E0 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
000054E6 6700                       		beq.s	End_LoadSonic	; if not, branch
000054E8 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000054EE                            
000054EE                            End_LoadSonic:
000054EE 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000054F4 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
000054FA 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005500 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005506 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
0000550C 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005512 4EB9 0000 0000             		jsr	ObjPosLoad
00005518 4EB9 0000 0000             		jsr	ObjectsLoad
0000551E 4EB9 0000 0000             		jsr	BuildSprites
00005524 7000                       		moveq	#0,d0
00005526 31C0 FE20                  		move.w	d0,($FFFFFE20).w
0000552A 21C0 FE22                  		move.l	d0,($FFFFFE22).w
0000552E 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005532 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005536 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
0000553A 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
0000553E 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005542 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005546 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000554A 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000554E 6100 EEDA                  		bsr.w	OscillateNumInit
00005552 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005558 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
0000555E 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005564 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000556A 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005570 6100 D644                  		bsr.w	DelayProgram
00005574 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005578 0000 0040                  		ori.b	#$40,d0
0000557C 33C0 00C0 0004             		move.w	d0,($C00004).l
00005582 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005588 6100 CA08                  		bsr.w	Pal_FadeTo
0000558C                            
0000558C                            ; ---------------------------------------------------------------------------
0000558C                            ; Main ending sequence loop
0000558C                            ; ---------------------------------------------------------------------------
0000558C                            
0000558C                            End_MainLoop:
0000558C 6100 C03A                  		bsr.w	PauseGame
00005590 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005596 6100 D61E                  		bsr.w	DelayProgram
0000559A 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000559E 6100 0000                  		bsr.w	End_MoveSonic
000055A2 4EB9 0000 0000             		jsr	ObjectsLoad
000055A8 6100 0000                  		bsr.w	DeformBgLayer
000055AC 4EB9 0000 0000             		jsr	BuildSprites
000055B2 4EB9 0000 0000             		jsr	ObjPosLoad
000055B8 6100 C5A2                  		bsr.w	PalCycle_Load
000055BC 6100 EEC2                  		bsr.w	OscillateNumDo
000055C0 6100 EF4E                  		bsr.w	ChangeRingFrame
000055C4 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
000055CA 6700                       		beq.s	loc_52DA	; if yes, branch
000055CC 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
000055D2 103C 0091                  		move.b	#$91,d0
000055D6 6100 BFE4                  		bsr.w	PlaySound_Special ; play credits music
000055DA 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
000055E0 4E75                       		rts	
000055E2                            ; ===========================================================================
000055E2                            
000055E2                            loc_52DA:
000055E2 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000055E6 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000055EA                            
000055EA 4278 FE02                  		clr.w	($FFFFFE02).w
000055EE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000055F4 4278 F794                  		clr.w	($FFFFF794).w
000055F8                            
000055F8                            End_AllEmlds:				; XREF: loc_5334
000055F8 6100 BFCE                  		bsr.w	PauseGame
000055FC 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005602 6100 D5B2                  		bsr.w	DelayProgram
00005606 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000560A 6100 0000                  		bsr.w	End_MoveSonic
0000560E 4EB9 0000 0000             		jsr	ObjectsLoad
00005614 6100 0000                  		bsr.w	DeformBgLayer
00005618 4EB9 0000 0000             		jsr	BuildSprites
0000561E 4EB9 0000 0000             		jsr	ObjPosLoad
00005624 6100 EE5A                  		bsr.w	OscillateNumDo
00005628 6100 EEE6                  		bsr.w	ChangeRingFrame
0000562C 5378 F794                  		subq.w	#1,($FFFFF794).w
00005630 6A00                       		bpl.s	loc_5334
00005632 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005638 6100 CB48                  		bsr.w	Pal_ToWhite
0000563C                            
0000563C                            loc_5334:
0000563C 4A78 FE02                  		tst.w	($FFFFFE02).w
00005640 6700 FFB6                  		beq.w	End_AllEmlds
00005644 4278 FE02                  		clr.w	($FFFFFE02).w
00005648 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
0000564E 4BF9 00C0 0004             		lea	($C00004).l,a5
00005654 4DF9 00C0 0000             		lea	($C00000).l,a6
0000565A 47F8 F700                  		lea	($FFFFF700).w,a3
0000565E 49F8 A400                  		lea	($FFFFA400).w,a4
00005662 343C 4000                  		move.w	#$4000,d2
00005666 6100 0000                  		bsr.w	LoadTilesFromStart2
0000566A 7013                       		moveq	#$13,d0
0000566C 6100 CC74                  		bsr.w	PalLoad1	; load ending pallet
00005670 6100 CA44                  		bsr.w	Pal_MakeWhite
00005674 6000 FF16                  		bra.w	End_MainLoop
00005678                            
00005678                            ; ---------------------------------------------------------------------------
00005678                            ; Subroutine controlling Sonic on the ending sequence
00005678                            ; ---------------------------------------------------------------------------
00005678                            
00005678                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005678                            
00005678                            
00005678                            End_MoveSonic:				; XREF: End_MainLoop
00005678 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
0000567C 6600                       		bne.s	End_MoveSonic2
0000567E 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005684 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005686 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000568A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00005690 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005696 4E75                       		rts	
00005698                            ; ===========================================================================
00005698                            
00005698                            End_MoveSonic2:				; XREF: End_MoveSonic
00005698 5500                       		subq.b	#2,d0
0000569A 6600                       		bne.s	End_MoveSonic3
0000569C 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000056A2 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000056A4 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000056A8 7000                       		moveq	#0,d0
000056AA 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000056AE 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000056B2 31C0 D014                  		move.w	d0,($FFFFD014).w
000056B6 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000056BC 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000056C2 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
000056C8 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
000056CE 4E75                       		rts	
000056D0                            ; ===========================================================================
000056D0                            
000056D0                            End_MoveSonic3:				; XREF: End_MoveSonic
000056D0 5500                       		subq.b	#2,d0
000056D2 6600                       		bne.s	End_MoveSonExit
000056D4 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000056D8 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
000056DE 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
000056E4 4278 D024                  		clr.w	($FFFFD024).w
000056E8                            
000056E8                            End_MoveSonExit:
000056E8 4E75                       		rts	
000056EA                            ; End of function End_MoveSonic
000056EA                            
000056EA                            ; ===========================================================================
000056EA                            ; ---------------------------------------------------------------------------
000056EA                            ; Object 87 - Sonic on ending sequence
000056EA                            ; ---------------------------------------------------------------------------
000056EA                            
000056EA                            Obj87:					; XREF: Obj_Index
000056EA 7000                       		moveq	#0,d0
000056EC 1028 0025                  		move.b	$25(a0),d0
000056F0 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
000056F4 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
000056F8 4EF9 0000 0000             		jmp	DisplaySprite
000056FE                            ; ===========================================================================
000056FE 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005702 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005706 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
0000570A 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
0000570E 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005712                            ; ===========================================================================
00005712                            
00005712                            Obj87_Main:				; XREF: Obj87_Index
00005712 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005718 6700                       		beq.s	Obj87_Main2	; if yes, branch
0000571A 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005720 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005726 4E75                       		rts	
00005728                            ; ===========================================================================
00005728                            
00005728                            Obj87_Main2:				; XREF: Obj87_Main
00005728 5428 0025                  		addq.b	#2,$25(a0)
0000572C 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005734 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000573A 117C 0004 0001             		move.b	#4,1(a0)
00005740 4228 0022                  		clr.b	$22(a0)
00005744 117C 0002 0018             		move.b	#2,$18(a0)
0000574A 117C 0000 001A             		move.b	#0,$1A(a0)
00005750 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005756                            
00005756                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005756 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000575A 6600                       		bne.s	Obj87_Wait
0000575C 5428 0025                  		addq.b	#2,$25(a0)
00005760 317C 0001 001C             		move.w	#1,$1C(a0)
00005766 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
0000576C                            
0000576C                            Obj87_Wait:
0000576C 4E75                       		rts	
0000576E                            ; ===========================================================================
0000576E                            
0000576E                            Obj87_LookUp:				; XREF: Obj87_Index
0000576E 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005776 6600                       		bne.s	locret_5480
00005778 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
0000577E 317C 005A 0030             		move.w	#$5A,$30(a0)
00005784 5428 0025                  		addq.b	#2,$25(a0)
00005788                            
00005788                            locret_5480:
00005788 4E75                       		rts	
0000578A                            ; ===========================================================================
0000578A                            
0000578A                            Obj87_ClrObjRam:			; XREF: Obj87_Index
0000578A 5368 0030                  		subq.w	#1,$30(a0)
0000578E 6600                       		bne.s	Obj87_Wait2
00005790 43F8 D400                  		lea	($FFFFD400).w,a1
00005794 323C 00FF                  		move.w	#$FF,d1
00005798                            
00005798                            Obj87_ClrLoop:
00005798 4299                       		clr.l	(a1)+
0000579A 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
0000579E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
000057A4 5428 0025                  		addq.b	#2,$25(a0)
000057A8 117C 0001 001C             		move.b	#1,$1C(a0)
000057AE 317C 003C 0030             		move.w	#$3C,$30(a0)
000057B4                            
000057B4                            Obj87_Wait2:
000057B4 4E75                       		rts	
000057B6                            ; ===========================================================================
000057B6                            
000057B6                            Obj87_MakeLogo:				; XREF: Obj87_Index
000057B6 5368 0030                  		subq.w	#1,$30(a0)
000057BA 6600                       		bne.s	Obj87_Wait3
000057BC 5428 0025                  		addq.b	#2,$25(a0)
000057C0 317C 00B4 0030             		move.w	#$B4,$30(a0)
000057C6 117C 0002 001C             		move.b	#2,$1C(a0)
000057CC 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000057D2                            
000057D2                            Obj87_Wait3:
000057D2 4E75                       		rts	
000057D4                            ; ===========================================================================
000057D4                            
000057D4                            Obj87_Animate:				; XREF: Obj87_Index
000057D4 43F9 0000 0000             		lea	(Ani_obj87).l,a1
000057DA 4EF9 0000 0000             		jmp	AnimateSprite
000057E0                            ; ===========================================================================
000057E0                            
000057E0                            Obj87_Leap:				; XREF: Obj87_Index
000057E0 5368 0030                  		subq.w	#1,$30(a0)
000057E4 6600                       		bne.s	Obj87_Wait4
000057E6 5428 0025                  		addq.b	#2,$25(a0)
000057EA 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000057F2 317C 03E1 0002             		move.w	#$3E1,2(a0)
000057F8 117C 0004 0001             		move.b	#4,1(a0)
000057FE 4228 0022                  		clr.b	$22(a0)
00005802 117C 0002 0018             		move.b	#2,$18(a0)
00005808 117C 0005 001A             		move.b	#5,$1A(a0)
0000580E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005814 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000581A 60B8                       		bra.s	Obj87_Animate
0000581C                            ; ===========================================================================
0000581C                            
0000581C                            Obj87_Wait4:				; XREF: Obj87_Leap
0000581C 4E75                       		rts	
0000581E                            ; ===========================================================================
0000581E                            Ani_obj87:
0000581E                            	include "_anim\obj87.asm"
0000581E                            ; ---------------------------------------------------------------------------
0000581E                            ; Animation script - Sonic on the ending sequence
0000581E                            ; ---------------------------------------------------------------------------
0000581E 0000                       		dc.w byte_551C-Ani_obj87
00005820 0000                       		dc.w byte_552A-Ani_obj87
00005822 0000                       		dc.w byte_5534-Ani_obj87
00005824 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005832 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
0000583C 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005844                            		even
00005844                            		even
00005844                            
00005844                            ; ===========================================================================
00005844                            ; ---------------------------------------------------------------------------
00005844                            ; Object 88 - chaos emeralds on	the ending sequence
00005844                            ; ---------------------------------------------------------------------------
00005844                            
00005844                            Obj88:					; XREF: Obj_Index
00005844 7000                       		moveq	#0,d0
00005846 1028 0024                  		move.b	$24(a0),d0
0000584A 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
0000584E 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005852 4EF9 0000 0000             		jmp	DisplaySprite
00005858                            ; ===========================================================================
00005858 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
0000585A 0000                       		dc.w Obj88_Move-Obj88_Index
0000585C                            ; ===========================================================================
0000585C                            
0000585C                            Obj88_Main:				; XREF: Obj88_Index
0000585C 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005862 6700                       		beq.s	Obj88_Main2
00005864 588F                       		addq.l	#4,sp
00005866 4E75                       		rts	
00005868                            ; ===========================================================================
00005868                            
00005868                            Obj88_Main2:				; XREF: Obj88_Main
00005868 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
0000586E 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005874 2248                       		movea.l	a0,a1
00005876 7600                       		moveq	#0,d3
00005878 7401                       		moveq	#1,d2
0000587A 7205                       		moveq	#5,d1
0000587C                            
0000587C                            Obj88_MainLoop:
0000587C 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005880 5429 0024                  		addq.b	#2,$24(a1)
00005884 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
0000588C 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005892 137C 0004 0001             		move.b	#4,1(a1)
00005898 137C 0001 0018             		move.b	#1,$18(a1)
0000589E 3368 0008 0038             		move.w	8(a0),$38(a1)
000058A4 3368 000C 003A             		move.w	$C(a0),$3A(a1)
000058AA 1342 001C                  		move.b	d2,$1C(a1)
000058AE 1342 001A                  		move.b	d2,$1A(a1)
000058B2 5202                       		addq.b	#1,d2
000058B4 1343 0026                  		move.b	d3,$26(a1)
000058B8 0603 002A                  		addi.b	#$2A,d3
000058BC 43E9 0040                  		lea	$40(a1),a1
000058C0 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
000058C4                            
000058C4                            Obj88_Move:				; XREF: Obj88_Index
000058C4 3028 003E                  		move.w	$3E(a0),d0
000058C8 D168 0026                  		add.w	d0,$26(a0)
000058CC 1028 0026                  		move.b	$26(a0),d0
000058D0 4EB9 0000 2BE8             		jsr	(CalcSine).l
000058D6 7800                       		moveq	#0,d4
000058D8 1828 003C                  		move.b	$3C(a0),d4
000058DC C3C4                       		muls.w	d4,d1
000058DE E081                       		asr.l	#8,d1
000058E0 C1C4                       		muls.w	d4,d0
000058E2 E080                       		asr.l	#8,d0
000058E4 D268 0038                  		add.w	$38(a0),d1
000058E8 D068 003A                  		add.w	$3A(a0),d0
000058EC 3141 0008                  		move.w	d1,8(a0)
000058F0 3140 000C                  		move.w	d0,$C(a0)
000058F4 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
000058FA 6700                       		beq.s	loc_55FA
000058FC 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005902                            
00005902                            loc_55FA:
00005902 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005908 6700                       		beq.s	loc_5608
0000590A 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005910                            
00005910                            loc_5608:
00005910 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005916 6700                       		beq.s	locret_5614
00005918 5368 003A                  		subq.w	#1,$3A(a0)
0000591C                            
0000591C                            locret_5614:
0000591C 4E75                       		rts	
0000591E                            ; ===========================================================================
0000591E                            ; ---------------------------------------------------------------------------
0000591E                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
0000591E                            ; ---------------------------------------------------------------------------
0000591E                            
0000591E                            Obj89:					; XREF: Obj_Index
0000591E 7000                       		moveq	#0,d0
00005920 1028 0024                  		move.b	$24(a0),d0
00005924 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005928 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
0000592C                            ; ===========================================================================
0000592C 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
0000592E 0000                       		dc.w Obj89_Move-Obj89_Index
00005930 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005932                            ; ===========================================================================
00005932                            
00005932                            Obj89_Main:				; XREF: Obj89_Index
00005932 5428 0024                  		addq.b	#2,$24(a0)
00005936 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
0000593C 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005942 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
0000594A 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005950 117C 0000 0001             		move.b	#0,1(a0)
00005956 117C 0000 0018             		move.b	#0,$18(a0)
0000595C                            
0000595C                            Obj89_Move:				; XREF: Obj89_Index
0000595C 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005962 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005964 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
0000596A 4EB9 0000 0000             		jsr	DisplaySprite
00005970                            ; ===========================================================================
00005970                            
00005970                            Obj89_Delay:				; XREF: Obj89_Move
00005970 5428 0024                  		addq.b	#2,$24(a0)
00005974 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
0000597A                            
0000597A                            Obj89_GotoCredits:			; XREF: Obj89_Index
0000597A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000597E 6A00                       		bpl.s	Obj89_Display
00005980 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005986                            
00005986                            Obj89_Display:
00005986 4EB9 0000 0000             		jsr	DisplaySprite
0000598C                            ; ===========================================================================
0000598C                            ; ---------------------------------------------------------------------------
0000598C                            ; Sprite mappings - Sonic on the ending	sequence
0000598C                            ; ---------------------------------------------------------------------------
0000598C                            Map_obj87:
0000598C                            	include "_maps\obj87.asm"
0000598C                            ; ---------------------------------------------------------------------------
0000598C                            ; Sprite mappings - Sonic on the ending	sequence
0000598C                            ; ---------------------------------------------------------------------------
0000598C 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005990 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005994 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005998 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
0000599C 02                         byte_5690:	dc.b 2
0000599D EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000059A2 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000059A7 03                         byte_569B:	dc.b 3
000059A8 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000059AD EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000059B2 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000059B7 02                         byte_56AB:	dc.b 2
000059B8 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000059BD FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000059C2 02                         byte_56B6:	dc.b 2
000059C3 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000059C8 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000059CD 02                         byte_56C1:	dc.b 2
000059CE EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000059D3 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000059D8 03                         byte_56CC:	dc.b 3
000059D9 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000059DE EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000059E3 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000059E8 07                         byte_56DC:	dc.b 7
000059E9 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000059EE BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
000059F3 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
000059F8 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
000059FD DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005A02 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005A07 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005A0C 18                         byte_5700:	dc.b $18
00005A0D 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005A12 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005A17 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005A1C 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005A21 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005A26 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005A2B 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005A30 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005A35 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005A3A B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005A3F A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005A44 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005A49 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005A4E B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005A53 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005A58 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005A5D D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005A62 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005A67 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005A6C E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005A71 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005A76 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005A7B F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005A80 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005A86 00                         		even
00005A86 00                         		even
00005A86                            
00005A86                            ; ---------------------------------------------------------------------------
00005A86                            ; Sprite mappings - chaos emeralds on the ending sequence
00005A86                            ; ---------------------------------------------------------------------------
00005A86                            Map_obj88:
00005A86                            	include "_maps\obj88.asm"
00005A86                            ; ---------------------------------------------------------------------------
00005A86                            ; Sprite mappings - chaos emeralds on the ending sequence
00005A86                            ; ---------------------------------------------------------------------------
00005A86 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005A8A 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005A8E 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005A92 0000                       		dc.w byte_57AC-Map_obj88
00005A94 01                         byte_5788:	dc.b 1
00005A95 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005A9A 01                         byte_578E:	dc.b 1
00005A9B F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005AA0 01                         byte_5794:	dc.b 1
00005AA1 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005AA6 01                         byte_579A:	dc.b 1
00005AA7 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005AAC 01                         byte_57A0:	dc.b 1
00005AAD F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005AB2 01                         byte_57A6:	dc.b 1
00005AB3 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005AB8 01                         byte_57AC:	dc.b 1
00005AB9 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005ABE                            		even
00005ABE                            		even
00005ABE                            
00005ABE                            ; ---------------------------------------------------------------------------
00005ABE                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005ABE                            ; ---------------------------------------------------------------------------
00005ABE                            Map_obj89:
00005ABE                            	include "_maps\obj89.asm"
00005ABE                            ; ---------------------------------------------------------------------------
00005ABE                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005ABE                            ; ---------------------------------------------------------------------------
00005ABE 0000                       		dc.w byte_57B4-Map_obj89
00005AC0 03                         byte_57B4:	dc.b 3
00005AC1 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005AC6 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005ACB F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005AD0                            		even
00005AD0                            		even
00005AD0                            
00005AD0                            ; ===========================================================================
00005AD0                            ; ---------------------------------------------------------------------------
00005AD0                            ; Credits ending sequence
00005AD0                            ; ---------------------------------------------------------------------------
00005AD0                            
00005AD0                            Credits:				; XREF: GameModeArray
00005AD0 6100 BD2C                  		bsr.w	ClearPLC
00005AD4 6100 C562                  		bsr.w	Pal_FadeFrom
00005AD8 4DF9 00C0 0004             		lea	($C00004).l,a6
00005ADE 3CBC 8004                  		move.w	#$8004,(a6)
00005AE2 3CBC 8230                  		move.w	#$8230,(a6)
00005AE6 3CBC 8407                  		move.w	#$8407,(a6)
00005AEA 3CBC 9001                  		move.w	#$9001,(a6)
00005AEE 3CBC 9200                  		move.w	#$9200,(a6)
00005AF2 3CBC 8B03                  		move.w	#$8B03,(a6)
00005AF6 3CBC 8720                  		move.w	#$8720,(a6)
00005AFA 4238 F64E                  		clr.b	($FFFFF64E).w
00005AFE 6100 B9E4                  		bsr.w	ClearScreen
00005B02 43F8 D000                  		lea	($FFFFD000).w,a1
00005B06 7000                       		moveq	#0,d0
00005B08 323C 07FF                  		move.w	#$7FF,d1
00005B0C                            
00005B0C                            Cred_ClrObjRam:
00005B0C 22C0                       		move.l	d0,(a1)+
00005B0E 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005B12                            
00005B12 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005B1C 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005B22 6100 BB3C                  		bsr.w	NemDec
00005B26 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005B2A 7000                       		moveq	#0,d0
00005B2C 323C 001F                  		move.w	#$1F,d1
00005B30                            
00005B30                            Cred_ClrPallet:
00005B30 22C0                       		move.l	d0,(a1)+
00005B32 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005B36                            
00005B36 7003                       		moveq	#3,d0
00005B38 6100 C7A8                  		bsr.w	PalLoad1	; load Sonic's pallet
00005B3C 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005B42 4EB9 0000 0000             		jsr	ObjectsLoad
00005B48 4EB9 0000 0000             		jsr	BuildSprites
00005B4E 6100 0000                  		bsr.w	EndingDemoLoad
00005B52 7000                       		moveq	#0,d0
00005B54 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005B58 E948                       		lsl.w	#4,d0
00005B5A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005B60 45F2 0000                  		lea	(a2,d0.w),a2
00005B64 7000                       		moveq	#0,d0
00005B66 1012                       		move.b	(a2),d0
00005B68 6700                       		beq.s	loc_5862
00005B6A 6100 BC34                  		bsr.w	LoadPLC		; load level patterns
00005B6E                            
00005B6E                            loc_5862:
00005B6E 7001                       		moveq	#1,d0
00005B70 6100 BC2E                  		bsr.w	LoadPLC		; load standard	level patterns
00005B74 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005B7A 6100 C416                  		bsr.w	Pal_FadeTo
00005B7E                            
00005B7E                            Cred_WaitLoop:
00005B7E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005B84 6100 D030                  		bsr.w	DelayProgram
00005B88 6100 BC82                  		bsr.w	RunPLC_RAM
00005B8C 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005B90 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005B92 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005B96 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005B98 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005B9E 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005BA2 4E75                       		rts	
00005BA4                            
00005BA4                            ; ---------------------------------------------------------------------------
00005BA4                            ; Ending sequence demo loading subroutine
00005BA4                            ; ---------------------------------------------------------------------------
00005BA4                            
00005BA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005BA4                            
00005BA4                            
00005BA4                            EndingDemoLoad:				; XREF: Credits
00005BA4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005BA8 0240 000F                  		andi.w	#$F,d0
00005BAC D040                       		add.w	d0,d0
00005BAE 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005BB2 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005BB6 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005BBA 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005BC0 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005BC2 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005BC8 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005BCE 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005BD4 7000                       		moveq	#0,d0
00005BD6 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005BDA 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005BDE 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005BE2 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005BE6 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005BEC 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005BEE 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005BF4 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005BF8 303C 0008                  		move.w	#8,d0
00005BFC                            
00005BFC                            EndDemo_LampLoad:
00005BFC 24D9                       		move.l	(a1)+,(a2)+
00005BFE 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005C02                            
00005C02                            EndDemo_Exit:
00005C02 4E75                       		rts	
00005C04                            ; End of function EndingDemoLoad
00005C04                            
00005C04                            ; ===========================================================================
00005C04                            ; ---------------------------------------------------------------------------
00005C04                            ; Levels used in the end sequence demos
00005C04                            ; ---------------------------------------------------------------------------
00005C04                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005C14                            
00005C14                            ; ---------------------------------------------------------------------------
00005C14                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005C14                            ; ---------------------------------------------------------------------------
00005C14                            EndDemo_LampVar:
00005C14 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005C16 0A00 062C 000D             		dc.w $A00, $62C, $D
00005C1C 0000 0000                  		dc.l 0
00005C20 0000                       		dc.b 0,	0
00005C22 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005C36 0101                       		dc.b 1,	1
00005C38                            ; ===========================================================================
00005C38                            ; ---------------------------------------------------------------------------
00005C38                            ; "TRY AGAIN" and "END"	screens
00005C38                            ; ---------------------------------------------------------------------------
00005C38                            
00005C38                            TryAgainEnd:				; XREF: Credits
00005C38 6100 BBC4                  		bsr.w	ClearPLC
00005C3C 6100 C3FA                  		bsr.w	Pal_FadeFrom
00005C40 4DF9 00C0 0004             		lea	($C00004).l,a6
00005C46 3CBC 8004                  		move.w	#$8004,(a6)
00005C4A 3CBC 8230                  		move.w	#$8230,(a6)
00005C4E 3CBC 8407                  		move.w	#$8407,(a6)
00005C52 3CBC 9001                  		move.w	#$9001,(a6)
00005C56 3CBC 9200                  		move.w	#$9200,(a6)
00005C5A 3CBC 8B03                  		move.w	#$8B03,(a6)
00005C5E 3CBC 8720                  		move.w	#$8720,(a6)
00005C62 4238 F64E                  		clr.b	($FFFFF64E).w
00005C66 6100 B87C                  		bsr.w	ClearScreen
00005C6A 43F8 D000                  		lea	($FFFFD000).w,a1
00005C6E 7000                       		moveq	#0,d0
00005C70 323C 07FF                  		move.w	#$7FF,d1
00005C74                            
00005C74                            TryAg_ClrObjRam:
00005C74 22C0                       		move.l	d0,(a1)+
00005C76 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005C7A                            
00005C7A 701D                       		moveq	#$1D,d0
00005C7C 6100 BC8E                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005C80 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005C84 7000                       		moveq	#0,d0
00005C86 323C 001F                  		move.w	#$1F,d1
00005C8A                            
00005C8A                            TryAg_ClrPallet:
00005C8A 22C0                       		move.l	d0,(a1)+
00005C8C 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005C90                            
00005C90 7013                       		moveq	#$13,d0
00005C92 6100 C64E                  		bsr.w	PalLoad1	; load ending pallet
00005C96 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005C9A 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005CA0 4EB9 0000 0000             		jsr	ObjectsLoad
00005CA6 4EB9 0000 0000             		jsr	BuildSprites
00005CAC 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005CB2 6100 C2DE                  		bsr.w	Pal_FadeTo
00005CB6                            
00005CB6                            ; ---------------------------------------------------------------------------
00005CB6                            ; "TRY AGAIN" and "END"	screen main loop
00005CB6                            ; ---------------------------------------------------------------------------
00005CB6                            TryAg_MainLoop:
00005CB6 6100 B910                  		bsr.w	PauseGame
00005CBA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005CC0 6100 CEF4                  		bsr.w	DelayProgram
00005CC4 4EB9 0000 0000             		jsr	ObjectsLoad
00005CCA 4EB9 0000 0000             		jsr	BuildSprites
00005CD0 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005CD6 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005CD8 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005CDC 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005CDE 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005CE4 67D0                       		beq.s	TryAg_MainLoop
00005CE6                            
00005CE6                            TryAg_Exit:
00005CE6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005CEC 4E75                       		rts	
00005CEE                            
00005CEE                            ; ===========================================================================
00005CEE                            ; ---------------------------------------------------------------------------
00005CEE                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005CEE                            ; ---------------------------------------------------------------------------
00005CEE                            
00005CEE                            Obj8B:					; XREF: Obj_Index
00005CEE 7000                       		moveq	#0,d0
00005CF0 1028 0024                  		move.b	$24(a0),d0
00005CF4 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005CF8 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005CFC 4EF9 0000 0000             		jmp	DisplaySprite
00005D02                            ; ===========================================================================
00005D02 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005D04 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005D06 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005D08 0000                       		dc.w loc_5A8E-Obj8B_Index
00005D0A                            ; ===========================================================================
00005D0A                            
00005D0A                            Obj8B_Main:				; XREF: Obj8B_Index
00005D0A 5428 0024                  		addq.b	#2,$24(a0)
00005D0E 317C 0120 0008             		move.w	#$120,8(a0)
00005D14 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005D1A 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005D22 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005D28 117C 0000 0001             		move.b	#0,1(a0)
00005D2E 117C 0002 0018             		move.b	#2,$18(a0)
00005D34 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005D3A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005D40 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005D42 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005D48 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005D4E 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005D54 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005D5A                            
00005D5A                            Obj8B_Animate:				; XREF: Obj8B_Index
00005D5A 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005D60 4EF9 0000 0000             		jmp	AnimateSprite
00005D66                            ; ===========================================================================
00005D66                            
00005D66                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005D66 5428 0024                  		addq.b	#2,$24(a0)
00005D6A 7002                       		moveq	#2,d0
00005D6C 0828 0000 001C             		btst	#0,$1C(a0)
00005D72 6700                       		beq.s	loc_5A6A
00005D74 4440                       		neg.w	d0
00005D76                            
00005D76                            loc_5A6A:
00005D76 43F8 D800                  		lea	($FFFFD800).w,a1
00005D7A 7205                       		moveq	#5,d1
00005D7C                            
00005D7C                            loc_5A70:
00005D7C 1340 003E                  		move.b	d0,$3E(a1)
00005D80 3400                       		move.w	d0,d2
00005D82 E742                       		asl.w	#3,d2
00005D84 D529 0026                  		add.b	d2,$26(a1)
00005D88 43E9 0040                  		lea	$40(a1),a1
00005D8C 51C9 FFEE                  		dbf	d1,loc_5A70
00005D90 5228 001A                  		addq.b	#1,$1A(a0)
00005D94 317C 0070 0030             		move.w	#112,$30(a0)
00005D9A                            
00005D9A                            loc_5A8E:				; XREF: Obj8B_Index
00005D9A 5368 0030                  		subq.w	#1,$30(a0)
00005D9E 6A00                       		bpl.s	locret_5AA0
00005DA0 0868 0000 001C             		bchg	#0,$1C(a0)
00005DA6 117C 0002 0024             		move.b	#2,$24(a0)
00005DAC                            
00005DAC                            locret_5AA0:
00005DAC 4E75                       		rts	
00005DAE                            ; ===========================================================================
00005DAE                            Ani_obj8B:
00005DAE                            	include "_anim\obj8B.asm"
00005DAE                            ; ---------------------------------------------------------------------------
00005DAE                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005DAE                            ; ---------------------------------------------------------------------------
00005DAE 0000                       		dc.w byte_5AA8-Ani_obj8B
00005DB0 0000                       		dc.w byte_5AAC-Ani_obj8B
00005DB2 0000                       		dc.w byte_5AB0-Ani_obj8B
00005DB4 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005DB8 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005DBC 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005DCE                            		even
00005DCE                            		even
00005DCE                            
00005DCE                            ; ===========================================================================
00005DCE                            ; ---------------------------------------------------------------------------
00005DCE                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005DCE                            ; ---------------------------------------------------------------------------
00005DCE                            
00005DCE                            Obj8C:					; XREF: Obj_Index
00005DCE 7000                       		moveq	#0,d0
00005DD0 1028 0024                  		move.b	$24(a0),d0
00005DD4 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005DD8 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005DDC 4EF9 0000 0000             		jmp	DisplaySprite
00005DE2                            ; ===========================================================================
00005DE2 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005DE4 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005DE6                            ; ===========================================================================
00005DE6                            
00005DE6                            Obj8C_Main:				; XREF: Obj8C_Index
00005DE6 2248                       		movea.l	a0,a1
00005DE8 7400                       		moveq	#0,d2
00005DEA 7600                       		moveq	#0,d3
00005DEC 7205                       		moveq	#5,d1
00005DEE 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005DF2                            
00005DF2                            Obj8C_MakeEms:				; XREF: loc_5B42
00005DF2 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005DF6 5429 0024                  		addq.b	#2,$24(a1)
00005DFA 237C 0000 5A86 0004        		move.l	#Map_obj88,4(a1)
00005E02 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005E08 137C 0000 0001             		move.b	#0,1(a1)
00005E0E 137C 0001 0018             		move.b	#1,$18(a1)
00005E14 337C 0104 0008             		move.w	#$104,8(a1)
00005E1A 337C 0120 0038             		move.w	#$120,$38(a1)
00005E20 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005E26 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005E2C 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005E32 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005E36                            
00005E36                            Obj8C_ChkEms:
00005E36 7000                       		moveq	#0,d0
00005E38 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005E3C 5340                       		subq.w	#1,d0
00005E3E 6500                       		bcs.s	loc_5B42
00005E40                            
00005E40                            Obj8C_ChkEmLoop:
00005E40 B433 0000                  		cmp.b	(a3,d0.w),d2
00005E44 6600                       		bne.s	loc_5B3E
00005E46 5202                       		addq.b	#1,d2
00005E48 60EC                       		bra.s	Obj8C_ChkEms
00005E4A                            ; ===========================================================================
00005E4A                            
00005E4A                            loc_5B3E:
00005E4A 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005E4E                            
00005E4E                            loc_5B42:
00005E4E 1342 001A                  		move.b	d2,$1A(a1)
00005E52 5229 001A                  		addq.b	#1,$1A(a1)
00005E56 5202                       		addq.b	#1,d2
00005E58 137C 0080 0026             		move.b	#$80,$26(a1)
00005E5E 1343 001E                  		move.b	d3,$1E(a1)
00005E62 1343 001F                  		move.b	d3,$1F(a1)
00005E66 0643 000A                  		addi.w	#$A,d3
00005E6A 43E9 0040                  		lea	$40(a1),a1
00005E6E 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005E72                            
00005E72                            Obj8C_Move:				; XREF: Obj8C_Index
00005E72 4A68 003E                  		tst.w	$3E(a0)
00005E76 6700                       		beq.s	locret_5BBA
00005E78 4A28 001E                  		tst.b	$1E(a0)
00005E7C 6700                       		beq.s	loc_5B78
00005E7E 5328 001E                  		subq.b	#1,$1E(a0)
00005E82 6600                       		bne.s	loc_5B80
00005E84                            
00005E84                            loc_5B78:
00005E84 3028 003E                  		move.w	$3E(a0),d0
00005E88 D168 0026                  		add.w	d0,$26(a0)
00005E8C                            
00005E8C                            loc_5B80:
00005E8C 1028 0026                  		move.b	$26(a0),d0
00005E90 6700                       		beq.s	loc_5B8C
00005E92 0C00 0080                  		cmpi.b	#$80,d0
00005E96 6600                       		bne.s	loc_5B96
00005E98                            
00005E98                            loc_5B8C:
00005E98 4268 003E                  		clr.w	$3E(a0)
00005E9C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005EA2                            
00005EA2                            loc_5B96:
00005EA2 4EB9 0000 2BE8             		jsr	(CalcSine).l
00005EA8 7800                       		moveq	#0,d4
00005EAA 1828 003C                  		move.b	$3C(a0),d4
00005EAE C3C4                       		muls.w	d4,d1
00005EB0 E081                       		asr.l	#8,d1
00005EB2 C1C4                       		muls.w	d4,d0
00005EB4 E080                       		asr.l	#8,d0
00005EB6 D268 0038                  		add.w	$38(a0),d1
00005EBA D068 003A                  		add.w	$3A(a0),d0
00005EBE 3141 0008                  		move.w	d1,8(a0)
00005EC2 3140 000A                  		move.w	d0,$A(a0)
00005EC6                            
00005EC6                            locret_5BBA:
00005EC6 4E75                       		rts	
00005EC8                            ; ===========================================================================
00005EC8                            ; ---------------------------------------------------------------------------
00005EC8                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005EC8                            ; ---------------------------------------------------------------------------
00005EC8                            Map_obj8B:
00005EC8                            	include "_maps\obj8B.asm"
00005EC8                            ; ---------------------------------------------------------------------------
00005EC8                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005EC8                            ; ---------------------------------------------------------------------------
00005EC8 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005ECC 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005ED0 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005ED4 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005ED8 08                         byte_5BCC:	dc.b 8
00005ED9 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005EDE F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005EE3 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005EE8 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005EED 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005EF2 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005EF7 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005EFC 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F01 08                         byte_5BF5:	dc.b 8
00005F02 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005F07 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005F0C E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005F11 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005F16 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005F1B 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005F20 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005F25 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F2A 08                         byte_5C1E:	dc.b 8
00005F2B E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005F30 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005F35 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005F3A F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005F3F 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005F44 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005F49 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005F4E 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F53 08                         byte_5C47:	dc.b 8
00005F54 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005F59 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005F5E E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005F63 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005F68 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005F6D 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005F72 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005F77 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F7C 0C                         byte_5C70:	dc.b $C
00005F7D ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005F82 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005F87 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005F8C 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005F91 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005F96 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005F9B 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005FA0 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005FA5 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005FAA 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005FAF 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005FB4 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005FB9 0A                         byte_5CAD:	dc.b $A
00005FBA D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005FBF DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005FC4 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00005FC9 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00005FCE DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00005FD3 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00005FD8 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005FDD 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005FE2 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00005FE7 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00005FEC 0A                         byte_5CE0:	dc.b $A
00005FED C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00005FF2 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00005FF7 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00005FFC C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006001 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006006 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
0000600B 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006010 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006015 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
0000601A 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
0000601F 0C                         byte_5D13:	dc.b $C
00006020 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006025 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
0000602A 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
0000602F 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006034 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006039 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
0000603E 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006043 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006048 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
0000604D 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006052 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006057 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000605C                            		even
0000605C                            		even
0000605C                            
0000605C                            ; ---------------------------------------------------------------------------
0000605C                            ; Ending sequence demos
0000605C                            ; ---------------------------------------------------------------------------
0000605C                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
0000608A                            		even
0000608A                            Demo_EndMZ:	incbin	demodata\e_mz.bin
000060CA                            		even
000060CA                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
000060FA                            		even
000060FA                            Demo_EndLZ:	incbin	demodata\e_lz.bin
0000612A                            		even
0000612A                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
0000614A                            		even
0000614A                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
0000616A                            		even
0000616A                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
0000619A                            		even
0000619A                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
000061CA                            		even
000061CA                            
000061CA                            ; ---------------------------------------------------------------------------
000061CA                            ; Subroutine to	load level boundaries and start	locations
000061CA                            ; ---------------------------------------------------------------------------
000061CA                            
000061CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000061CA                            
000061CA                            
000061CA                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
000061CA 7000                       		moveq	#0,d0
000061CC 11C0 F740                  		move.b	d0,($FFFFF740).w
000061D0 11C0 F741                  		move.b	d0,($FFFFF741).w
000061D4 11C0 F746                  		move.b	d0,($FFFFF746).w
000061D8 11C0 F748                  		move.b	d0,($FFFFF748).w
000061DC 11C0 F742                  		move.b	d0,($FFFFF742).w
000061E0 3038 FE10                  		move.w	($FFFFFE10).w,d0
000061E4 ED08                       		lsl.b	#6,d0
000061E6 E848                       		lsr.w	#4,d0
000061E8 3200                       		move.w	d0,d1
000061EA D040                       		add.w	d0,d0
000061EC D041                       		add.w	d1,d0
000061EE 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
000061F2 3018                       		move.w	(a0)+,d0
000061F4 31C0 F730                  		move.w	d0,($FFFFF730).w
000061F8 2018                       		move.l	(a0)+,d0
000061FA 21C0 F728                  		move.l	d0,($FFFFF728).w
000061FE 21C0 F720                  		move.l	d0,($FFFFF720).w
00006202 2018                       		move.l	(a0)+,d0
00006204 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006208 21C0 F724                  		move.l	d0,($FFFFF724).w
0000620C 3038 F728                  		move.w	($FFFFF728).w,d0
00006210 0640 0240                  		addi.w	#$240,d0
00006214 31C0 F732                  		move.w	d0,($FFFFF732).w
00006218 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
0000621E 3018                       		move.w	(a0)+,d0
00006220 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006224 6000 0000                  		bra.w	LevSz_ChkLamp
00006228                            ; ===========================================================================
00006228                            ; ---------------------------------------------------------------------------
00006228                            ; Level size array and ending start location array
00006228                            ; ---------------------------------------------------------------------------
00006228                            LevelSizeArray:	incbin	misc\lvl_size.bin
00006378                            		even
00006378                            
00006378                            EndingStLocArray:
00006378                            		incbin	misc\sloc_end.bin
00006398                            		even
00006398                            
00006398                            ; ===========================================================================
00006398                            
00006398                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006398 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
0000639C 6700                       		beq.s	LevSz_StartLoc	; if not, branch
0000639E 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000063A4 3238 D008                  		move.w	($FFFFD008).w,d1
000063A8 3038 D00C                  		move.w	($FFFFD00C).w,d0
000063AC 6000                       		bra.s	loc_60D0
000063AE                            ; ===========================================================================
000063AE                            
000063AE                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000063AE 3038 FE10                  		move.w	($FFFFFE10).w,d0
000063B2 ED08                       		lsl.b	#6,d0
000063B4 E848                       		lsr.w	#4,d0
000063B6 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000063BA 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000063BE 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000063C0 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000063C4 5340                       		subq.w	#1,d0
000063C6 E548                       		lsl.w	#2,d0
000063C8 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
000063CC                            
000063CC                            LevSz_SonicPos:
000063CC 7200                       		moveq	#0,d1
000063CE 3219                       		move.w	(a1)+,d1
000063D0 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000063D4 7000                       		moveq	#0,d0
000063D6 3011                       		move.w	(a1),d0
000063D8 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000063DC                            
000063DC                            loc_60D0:				; XREF: LevSz_ChkLamp
000063DC 0441 00A0                  		subi.w	#$A0,d1
000063E0 6400                       		bcc.s	loc_60D8
000063E2 7200                       		moveq	#0,d1
000063E4                            
000063E4                            loc_60D8:
000063E4 3438 F72A                  		move.w	($FFFFF72A).w,d2
000063E8 B242                       		cmp.w	d2,d1
000063EA 6500                       		bcs.s	loc_60E2
000063EC 3202                       		move.w	d2,d1
000063EE                            
000063EE                            loc_60E2:
000063EE 31C1 F700                  		move.w	d1,($FFFFF700).w
000063F2 0440 0060                  		subi.w	#$60,d0
000063F6 6400                       		bcc.s	loc_60EE
000063F8 7000                       		moveq	#0,d0
000063FA                            
000063FA                            loc_60EE:
000063FA B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000063FE 6D00                       		blt.s	loc_60F8
00006400 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006404                            
00006404                            loc_60F8:
00006404 31C0 F704                  		move.w	d0,($FFFFF704).w
00006408 6100 0000                  		bsr.w	BgScrollSpeed
0000640C 7000                       		moveq	#0,d0
0000640E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006412 E508                       		lsl.b	#2,d0
00006414 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
0000641A 6000 0000                  		bra.w	LevSz_Unk
0000641E                            ; ===========================================================================
0000641E                            ; ---------------------------------------------------------------------------
0000641E                            ; Sonic	start location array
0000641E                            ; ---------------------------------------------------------------------------
0000641E                            StartLocArray:	incbin	misc\sloc_lev.bin
0000648E                            		even
0000648E                            
0000648E                            ; ---------------------------------------------------------------------------
0000648E                            ; Which	256x256	tiles contain loops or roll-tunnels
0000648E                            ; ---------------------------------------------------------------------------
0000648E                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
0000648E                            ; loop,	loop, tunnel, tunnel
0000648E                            ; ---------------------------------------------------------------------------
0000648E                            LoopTileNums:	incbin	misc\loopnums.bin
000064AA                            		even
000064AA                            
000064AA                            ; ===========================================================================
000064AA                            
000064AA                            LevSz_Unk:				; XREF: LevelSizeLoad
000064AA 7000                       		moveq	#0,d0
000064AC 1038 FE10                  		move.b	($FFFFFE10).w,d0
000064B0 E748                       		lsl.w	#3,d0
000064B2 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000064B6 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000064BA 24D9                       		move.l	(a1)+,(a2)+
000064BC 24D9                       		move.l	(a1)+,(a2)+
000064BE 4E75                       		rts	
000064C0                            ; End of function LevelSizeLoad
000064C0                            
000064C0                            ; ===========================================================================
000064C0 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
000064C8 0800 0100 0100 0000        		dc.l $8000100, $1000000
000064D0 0800 0100 0100 0000        		dc.l $8000100, $1000000
000064D8 0800 0100 0100 0000        		dc.l $8000100, $1000000
000064E0 0800 0100 0100 0000        		dc.l $8000100, $1000000
000064E8 0800 0100 0100 0000        		dc.l $8000100, $1000000
000064F0 0070 0100 0100 0100        		dc.l $700100, $1000100
000064F8                            
000064F8                            ; ---------------------------------------------------------------------------
000064F8                            ; Subroutine to	set scroll speed of some backgrounds
000064F8                            ; ---------------------------------------------------------------------------
000064F8                            
000064F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000064F8                            
000064F8                            
000064F8                            BgScrollSpeed:				; XREF: LevelSizeLoad
000064F8 4A38 FE30                  		tst.b	($FFFFFE30).w
000064FC 6600                       		bne.s	loc_6206
000064FE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006502 31C0 F714                  		move.w	d0,($FFFFF714).w
00006506 31C1 F708                  		move.w	d1,($FFFFF708).w
0000650A 31C1 F710                  		move.w	d1,($FFFFF710).w
0000650E 31C1 F718                  		move.w	d1,($FFFFF718).w
00006512                            
00006512                            loc_6206:
00006512 7400                       		moveq	#0,d2
00006514 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006518 D442                       		add.w	d2,d2
0000651A 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
0000651E 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006522                            ; End of function BgScrollSpeed
00006522                            
00006522                            ; ===========================================================================
00006522 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006526 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
0000652A 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
0000652E 0000                       		dc.w BgScroll_End-BgScroll_Index
00006530                            ; ===========================================================================
00006530                            
00006530                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006530 6000 0000                  		bra.w	Deform_GHZ
00006534                            ; ===========================================================================
00006534                            
00006534                            BgScroll_LZ:				; XREF: BgScroll_Index
00006534 E280                       		asr.l	#1,d0
00006536 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000653A 4E75                       		rts	
0000653C                            ; ===========================================================================
0000653C                            
0000653C                            BgScroll_MZ:				; XREF: BgScroll_Index
0000653C 4E75                       		rts	
0000653E                            ; ===========================================================================
0000653E                            
0000653E                            BgScroll_SLZ:				; XREF: BgScroll_Index
0000653E E280                       		asr.l	#1,d0
00006540 0640 00C0                  		addi.w	#$C0,d0
00006544 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006548 4E75                       		rts	
0000654A                            ; ===========================================================================
0000654A                            
0000654A                            BgScroll_SYZ:				; XREF: BgScroll_Index
0000654A E980                       		asl.l	#4,d0
0000654C 2400                       		move.l	d0,d2
0000654E E380                       		asl.l	#1,d0
00006550 D082                       		add.l	d2,d0
00006552 E080                       		asr.l	#8,d0
00006554 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006558 31C0 F714                  		move.w	d0,($FFFFF714).w
0000655C 4E75                       		rts	
0000655E                            ; ===========================================================================
0000655E                            
0000655E                            BgScroll_SBZ:				; XREF: BgScroll_Index
0000655E E980                       		asl.l	#4,d0
00006560 E380                       		asl.l	#1,d0
00006562 E080                       		asr.l	#8,d0
00006564 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006568 4E75                       		rts	
0000656A                            ; ===========================================================================
0000656A                            
0000656A                            BgScroll_End:				; XREF: BgScroll_Index
0000656A 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006570 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006576 4E75                       		rts	
00006578                            ; ===========================================================================
00006578 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
0000657E 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006584 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
0000658A 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006590 4E75                       		rts
00006592                            
00006592                            ; ---------------------------------------------------------------------------
00006592                            ; Background layer deformation subroutines
00006592                            ; ---------------------------------------------------------------------------
00006592                            
00006592                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006592                            
00006592                            
00006592                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006592 4A38 F744                  		tst.b	($FFFFF744).w
00006596 6700                       		beq.s	loc_628E
00006598 4E75                       		rts	
0000659A                            ; ===========================================================================
0000659A                            
0000659A                            loc_628E:
0000659A 4278 F754                  		clr.w	($FFFFF754).w
0000659E 4278 F756                  		clr.w	($FFFFF756).w
000065A2 4278 F758                  		clr.w	($FFFFF758).w
000065A6 4278 F75A                  		clr.w	($FFFFF75A).w
000065AA 6100 0000                  		bsr.w	ScrollHoriz
000065AE 6100 0000                  		bsr.w	ScrollVertical
000065B2 6100 0000                  		bsr.w	DynScrResizeLoad
000065B6 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000065BC 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000065C2 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
000065C8 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000065CE 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
000065D4 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
000065DA 7000                       		moveq	#0,d0
000065DC 1038 FE10                  		move.b	($FFFFFE10).w,d0
000065E0 D040                       		add.w	d0,d0
000065E2 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000065E6 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000065EA                            ; End of function DeformBgLayer
000065EA                            
000065EA                            ; ===========================================================================
000065EA                            ; ---------------------------------------------------------------------------
000065EA                            ; Offset index for background layer deformation	code
000065EA                            ; ---------------------------------------------------------------------------
000065EA 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000065EE 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000065F2 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
000065F6 0000                       		dc.w Deform_GHZ-Deform_Index
000065F8                            ; ---------------------------------------------------------------------------
000065F8                            ; Green	Hill Zone background layer deformation code
000065F8                            ; ---------------------------------------------------------------------------
000065F8                            
000065F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065F8                            
000065F8                            
000065F8                            Deform_GHZ:				; XREF: Deform_Index
000065F8 3838 F73A                  		move.w	($FFFFF73A).w,d4
000065FC 48C4                       		ext.l	d4
000065FE EB84                       		asl.l	#5,d4
00006600 2204                       		move.l	d4,d1
00006602 E384                       		asl.l	#1,d4
00006604 D881                       		add.l	d1,d4
00006606 7A00                       		moveq	#0,d5
00006608 6100 0000                  		bsr.w	ScrollBlock1
0000660C 6100 0000                  		bsr.w	ScrollBlock4
00006610 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006614 3038 F704                  		move.w	($FFFFF704).w,d0
00006618 0240 07FF                  		andi.w	#$7FF,d0
0000661C EA48                       		lsr.w	#5,d0
0000661E 4440                       		neg.w	d0
00006620 0640 0026                  		addi.w	#$26,d0
00006624 31C0 F714                  		move.w	d0,($FFFFF714).w
00006628 3800                       		move.w	d0,d4
0000662A 6100 0000                  		bsr.w	ScrollBlock3
0000662E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006634 323C 006F                  		move.w	#$6F,d1
00006638 9244                       		sub.w	d4,d1
0000663A 3038 F700                  		move.w	($FFFFF700).w,d0
0000663E 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006644 6600                       		bne.s	loc_633C
00006646 7000                       		moveq	#0,d0
00006648                            
00006648                            loc_633C:
00006648 4440                       		neg.w	d0
0000664A 4840                       		swap	d0
0000664C 3038 F708                  		move.w	($FFFFF708).w,d0
00006650 4440                       		neg.w	d0
00006652                            
00006652                            loc_6346:
00006652 22C0                       		move.l	d0,(a1)+
00006654 51C9 FFFC                  		dbf	d1,loc_6346
00006658 323C 0027                  		move.w	#$27,d1
0000665C 3038 F710                  		move.w	($FFFFF710).w,d0
00006660 4440                       		neg.w	d0
00006662                            
00006662                            loc_6356:
00006662 22C0                       		move.l	d0,(a1)+
00006664 51C9 FFFC                  		dbf	d1,loc_6356
00006668 3038 F710                  		move.w	($FFFFF710).w,d0
0000666C 0640 0000                  		addi.w	#0,d0
00006670 3438 F700                  		move.w	($FFFFF700).w,d2
00006674 0642 FE00                  		addi.w	#-$200,d2
00006678 9440                       		sub.w	d0,d2
0000667A 48C2                       		ext.l	d2
0000667C E182                       		asl.l	#8,d2
0000667E 85FC 0068                  		divs.w	#$68,d2
00006682 48C2                       		ext.l	d2
00006684 E182                       		asl.l	#8,d2
00006686 7600                       		moveq	#0,d3
00006688 3600                       		move.w	d0,d3
0000668A 323C 0047                  		move.w	#$47,d1
0000668E D244                       		add.w	d4,d1
00006690                            
00006690                            loc_6384:
00006690 3003                       		move.w	d3,d0
00006692 4440                       		neg.w	d0
00006694 22C0                       		move.l	d0,(a1)+
00006696 4843                       		swap	d3
00006698 D682                       		add.l	d2,d3
0000669A 4843                       		swap	d3
0000669C 51C9 FFF2                  		dbf	d1,loc_6384
000066A0 4E75                       		rts	
000066A2                            ; End of function Deform_GHZ
000066A2                            
000066A2                            ; ---------------------------------------------------------------------------
000066A2                            ; Labyrinth Zone background layer deformation code
000066A2                            ; ---------------------------------------------------------------------------
000066A2                            
000066A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000066A2                            
000066A2                            
000066A2                            Deform_LZ:				; XREF: Deform_Index
000066A2 3838 F73A                  		move.w	($FFFFF73A).w,d4
000066A6 48C4                       		ext.l	d4
000066A8 EF84                       		asl.l	#7,d4
000066AA 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000066AE 48C5                       		ext.l	d5
000066B0 EF85                       		asl.l	#7,d5
000066B2 6100 0000                  		bsr.w	ScrollBlock1
000066B6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000066BC 43F8 CC00                  		lea	($FFFFCC00).w,a1
000066C0 323C 00DF                  		move.w	#$DF,d1
000066C4 3038 F700                  		move.w	($FFFFF700).w,d0
000066C8 4440                       		neg.w	d0
000066CA 4840                       		swap	d0
000066CC 3038 F708                  		move.w	($FFFFF708).w,d0
000066D0 4440                       		neg.w	d0
000066D2                            
000066D2                            loc_63C6:
000066D2 22C0                       		move.l	d0,(a1)+
000066D4 51C9 FFFC                  		dbf	d1,loc_63C6
000066D8 3038 F646                  		move.w	($FFFFF646).w,d0
000066DC 9078 F704                  		sub.w	($FFFFF704).w,d0
000066E0 4E75                       		rts	
000066E2                            ; End of function Deform_LZ
000066E2                            
000066E2                            ; ---------------------------------------------------------------------------
000066E2                            ; Marble Zone background layer deformation code
000066E2                            ; ---------------------------------------------------------------------------
000066E2                            
000066E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000066E2                            
000066E2                            
000066E2                            Deform_MZ:				; XREF: Deform_Index
000066E2 3838 F73A                  		move.w	($FFFFF73A).w,d4
000066E6 48C4                       		ext.l	d4
000066E8 ED84                       		asl.l	#6,d4
000066EA 2204                       		move.l	d4,d1
000066EC E384                       		asl.l	#1,d4
000066EE D881                       		add.l	d1,d4
000066F0 7A00                       		moveq	#0,d5
000066F2 6100 0000                  		bsr.w	ScrollBlock1
000066F6 303C 0200                  		move.w	#$200,d0
000066FA 3238 F704                  		move.w	($FFFFF704).w,d1
000066FE 0441 01C8                  		subi.w	#$1C8,d1
00006702 6500                       		bcs.s	loc_6402
00006704 3401                       		move.w	d1,d2
00006706 D241                       		add.w	d1,d1
00006708 D242                       		add.w	d2,d1
0000670A E441                       		asr.w	#2,d1
0000670C D041                       		add.w	d1,d0
0000670E                            
0000670E                            loc_6402:
0000670E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006712 6100 0000                  		bsr.w	ScrollBlock3
00006716 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000671C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006720 323C 00DF                  		move.w	#$DF,d1
00006724 3038 F700                  		move.w	($FFFFF700).w,d0
00006728 4440                       		neg.w	d0
0000672A 4840                       		swap	d0
0000672C 3038 F708                  		move.w	($FFFFF708).w,d0
00006730 4440                       		neg.w	d0
00006732                            
00006732                            loc_6426:
00006732 22C0                       		move.l	d0,(a1)+
00006734 51C9 FFFC                  		dbf	d1,loc_6426
00006738 4E75                       		rts	
0000673A                            ; End of function Deform_MZ
0000673A                            
0000673A                            ; ---------------------------------------------------------------------------
0000673A                            ; Star Light Zone background layer deformation code
0000673A                            ; ---------------------------------------------------------------------------
0000673A                            
0000673A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000673A                            
0000673A                            
0000673A                            Deform_SLZ:				; XREF: Deform_Index
0000673A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000673E 48C4                       		ext.l	d4
00006740 EB84                       		asl.l	#5,d4
00006742 2204                       		move.l	d4,d1
00006744 E384                       		asl.l	#1,d4
00006746 D881                       		add.l	d1,d4
00006748 7A00                       		moveq	#0,d5
0000674A 6100 0000                  		bsr.w	ScrollBlock1
0000674E 6100 0000                  		bsr.w	ScrollBlock3
00006752 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006756                            	;	move.w	($FFFFF704).w,d0
00006756                            	;	andi.w	#$7FF,d0
00006756 EA48                       		lsr.w	#5,d0
00006758 4440                       		neg.w	d0
0000675A 0640 0026                  		addi.w	#$26,d0
0000675E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006762 3800                       		move.w	d0,d4
00006764                            	;	bsr.w	ScrollBlock3
00006764 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
0000676A 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
0000676E                            
0000676E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006772 4440                       		neg.w	d0			; negate (positive to negative)
00006774 4840                       		swap	d0			; send to the left side of d0
00006776 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000677A 45F8 A800                  		lea	($FFFFA800).w,a2
0000677E 069A 0000 5000             		addi.l	#$5000,(a2)+
00006784 069A 0000 C000             		addi.l	#$C000,(a2)+
0000678A 3038 A800                  		move.w	($FFFFA800).w,d0
0000678E 4440                       		neg.w	d0			; negate (positive to negative)
00006790 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006792 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006796                            slz_DeformLoop_1:
00006796 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006798 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
0000679C                            
0000679C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000067A0 4440                       		neg.w	d0			; negate (positive to negative)
000067A2 4840                       		swap	d0			; send to the left side of d0
000067A4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000067A8 45F8 A800                  		lea	($FFFFA800).w,a2
000067AC 069A 0000 5000             		addi.l	#$5000,(a2)+
000067B2 069A 0000 C000             		addi.l	#$C000,(a2)+
000067B8 3038 A800                  		move.w	($FFFFA800).w,d0
000067BC 4440                       		neg.w	d0			; negate (positive to negative)
000067BE E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000067C0 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000067C4                            slz_DeformLoop_2:
000067C4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000067C6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
000067CA                            
000067CA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000067CE 4440                       		neg.w	d0			; negate (positive to negative)
000067D0 4840                       		swap	d0			; send to the left side of d0
000067D2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000067D6 45F8 A800                  		lea	($FFFFA800).w,a2
000067DA 069A 0000 5000             		addi.l	#$5000,(a2)+
000067E0 069A 0000 C000             		addi.l	#$C000,(a2)+
000067E6 3038 A800                  		move.w	($FFFFA800).w,d0
000067EA 4440                       		neg.w	d0			; negate (positive to negative)
000067EC E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000067EE 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000067F2                            slz_DeformLoop_3:
000067F2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000067F4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
000067F8                            
000067F8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000067FC 4440                       		neg.w	d0			; negate (positive to negative)
000067FE 4840                       		swap	d0			; send to the left side of d0
00006800 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006804 45F8 A800                  		lea	($FFFFA800).w,a2
00006808 069A 0000 5000             		addi.l	#$5000,(a2)+
0000680E 069A 0000 C000             		addi.l	#$C000,(a2)+
00006814 3038 A800                  		move.w	($FFFFA800).w,d0
00006818 4440                       		neg.w	d0			; negate (positive to negative)
0000681A E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
0000681C 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006820                            slz_DeformLoop_4:
00006820 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006822 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006826                            
00006826 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000682A 4440                       		neg.w	d0			; negate (positive to negative)
0000682C 4840                       		swap	d0			; send to the left side of d0
0000682E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006832 45F8 A800                  		lea	($FFFFA800).w,a2
00006836 069A 0000 5000             		addi.l	#$5000,(a2)+
0000683C 069A 0000 C000             		addi.l	#$C000,(a2)+
00006842 3038 A800                  		move.w	($FFFFA800).w,d0
00006846 4440                       		neg.w	d0			; negate (positive to negative)
00006848 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
0000684A 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000684E                            slz_DeformLoop_5:
0000684E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006850 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006854                            
00006854 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006858 4440                       		neg.w	d0			; negate (positive to negative)
0000685A 4840                       		swap	d0			; send to the left side of d0
0000685C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006860 4440                       		neg.w	d0			; negate (positive to negative)
00006862 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006864 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006868                            slz_DeformLoop_6:
00006868 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000686A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
0000686E                            
0000686E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006872 4440                       		neg.w	d0			; negate (positive to negative)
00006874 4840                       		swap	d0			; send to the left side of d0
00006876 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000687A 4440                       		neg.w	d0			; negate (positive to negative)
0000687C EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
0000687E 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006882                            slz_DeformLoop_7:
00006882 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006884 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006888                            
00006888 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000688C 4440                       		neg.w	d0			; negate (positive to negative)
0000688E 4840                       		swap	d0			; send to the left side of d0
00006890 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006894 4440                       		neg.w	d0			; negate (positive to negative)
00006896 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006898 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000689C                            slz_DeformLoop_8:
0000689C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000689E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
000068A2                            
000068A2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068A6 4440                       		neg.w	d0			; negate (positive to negative)
000068A8 4840                       		swap	d0			; send to the left side of d0
000068AA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068AE 4440                       		neg.w	d0			; negate (positive to negative)
000068B0 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
000068B2 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068B6                            slz_DeformLoop_9:
000068B6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068B8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
000068BC                            
000068BC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068C0 4440                       		neg.w	d0			; negate (positive to negative)
000068C2 4840                       		swap	d0			; send to the left side of d0
000068C4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068C8 4440                       		neg.w	d0			; negate (positive to negative)
000068CA E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
000068CC 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068D0                            slz_DeformLoop_10:
000068D0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068D2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
000068D6                            
000068D6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068DA 4440                       		neg.w	d0			; negate (positive to negative)
000068DC 4840                       		swap	d0			; send to the left side of d0
000068DE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068E2 4440                       		neg.w	d0			; negate (positive to negative)
000068E4 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000068E6 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068EA                            slz_DeformLoop_11:
000068EA 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068EC 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
000068F0                            
000068F0 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068F4 4440                       		neg.w	d0			; negate (positive to negative)
000068F6 4840                       		swap	d0			; send to the left side of d0
000068F8 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068FC 4440                       		neg.w	d0			; negate (positive to negative)
000068FE E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006900 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006904                            slz_DeformLoop_12:
00006904 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006906 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
0000690A                            
0000690A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000690E 4440                       		neg.w	d0			; negate (positive to negative)
00006910 4840                       		swap	d0			; send to the left side of d0
00006912 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006916 4440                       		neg.w	d0			; negate (positive to negative)
00006918 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
0000691A 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000691E                            slz_DeformLoop_13:
0000691E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006920 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006924 4E75                       		rts	
00006926                            ; End of function Deform_SLZ
00006926 4E75                       		rts	
00006928                            ; End of function Deform_SLZ_2
00006928                            
00006928                            ; ---------------------------------------------------------------------------
00006928                            ; Spring Yard Zone background layer deformation	code
00006928                            ; ---------------------------------------------------------------------------
00006928                            
00006928                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006928                            
00006928                            
00006928                            Deform_SYZ:				; XREF: Deform_Index
00006928 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000692C 48C4                       		ext.l	d4
0000692E ED84                       		asl.l	#6,d4
00006930 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006934 48C5                       		ext.l	d5
00006936 E985                       		asl.l	#4,d5
00006938 2205                       		move.l	d5,d1
0000693A E385                       		asl.l	#1,d5
0000693C DA81                       		add.l	d1,d5
0000693E 6100 0000                  		bsr.w	ScrollBlock1
00006942 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006948 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000694C 323C 00DF                  		move.w	#$DF,d1
00006950 3038 F700                  		move.w	($FFFFF700).w,d0
00006954 4440                       		neg.w	d0
00006956 4840                       		swap	d0
00006958 3038 F708                  		move.w	($FFFFF708).w,d0
0000695C 4440                       		neg.w	d0
0000695E                            
0000695E                            loc_653C:
0000695E 22C0                       		move.l	d0,(a1)+
00006960 51C9 FFFC                  		dbf	d1,loc_653C
00006964 4E75                       		rts	
00006966                            ; End of function Deform_SYZ
00006966                            
00006966                            ; ---------------------------------------------------------------------------
00006966                            ; Scrap	Brain Zone background layer deformation	code
00006966                            ; ---------------------------------------------------------------------------
00006966                            
00006966                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006966                            
00006966                            
00006966                            Deform_SBZ:				; XREF: Deform_Index
00006966 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000696A 48C4                       		ext.l	d4
0000696C ED84                       		asl.l	#6,d4
0000696E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006972 48C5                       		ext.l	d5
00006974 E985                       		asl.l	#4,d5
00006976 E385                       		asl.l	#1,d5
00006978 6100 0000                  		bsr.w	ScrollBlock1
0000697C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006982 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006986 323C 00DF                  		move.w	#$DF,d1
0000698A 3038 F700                  		move.w	($FFFFF700).w,d0
0000698E 4440                       		neg.w	d0
00006990 4840                       		swap	d0
00006992 3038 F708                  		move.w	($FFFFF708).w,d0
00006996 4440                       		neg.w	d0
00006998                            
00006998                            loc_6576:
00006998 22C0                       		move.l	d0,(a1)+
0000699A 51C9 FFFC                  		dbf	d1,loc_6576
0000699E 4E75                       		rts	
000069A0                            ; End of function Deform_SBZ
000069A0                            
000069A0                            ; ---------------------------------------------------------------------------
000069A0                            ; Subroutine to	scroll the level horizontally as Sonic moves
000069A0                            ; ---------------------------------------------------------------------------
000069A0                            
000069A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069A0                            
000069A0                            
000069A0                            ScrollHoriz:				; XREF: DeformBgLayer
000069A0 3838 F700                  		move.w	($FFFFF700).w,d4
000069A4 6100                       		bsr.s	ScrollHoriz2
000069A6 3038 F700                  		move.w	($FFFFF700).w,d0
000069AA 0240 0010                  		andi.w	#$10,d0
000069AE 1238 F74A                  		move.b	($FFFFF74A).w,d1
000069B2 B300                       		eor.b	d1,d0
000069B4 6600                       		bne.s	locret_65B0
000069B6 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
000069BC 3038 F700                  		move.w	($FFFFF700).w,d0
000069C0 9044                       		sub.w	d4,d0
000069C2 6A00                       		bpl.s	loc_65AA
000069C4 08F8 0002 F754             		bset	#2,($FFFFF754).w
000069CA 4E75                       		rts	
000069CC                            ; ===========================================================================
000069CC                            
000069CC                            loc_65AA:
000069CC 08F8 0003 F754             		bset	#3,($FFFFF754).w
000069D2                            
000069D2                            locret_65B0:
000069D2 4E75                       		rts	
000069D4                            ; End of function ScrollHoriz
000069D4                            
000069D4                            
000069D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069D4                            
000069D4                            
000069D4                            ScrollHoriz2:				; XREF: ScrollHoriz
000069D4 3038 D008                  		move.w	($FFFFD008).w,d0
000069D8 9078 F700                  		sub.w	($FFFFF700).w,d0
000069DC 0440 0090                  		subi.w	#$90,d0
000069E0 6500                       		bcs.s	loc_65F6
000069E2 0440 0010                  		subi.w	#$10,d0
000069E6 6400                       		bcc.s	loc_65CC
000069E8 4278 F73A                  		clr.w	($FFFFF73A).w
000069EC 4E75                       		rts	
000069EE                            ; ===========================================================================
000069EE                            
000069EE                            loc_65CC:
000069EE 0C40 0010                  		cmpi.w	#$10,d0
000069F2 6500                       		bcs.s	loc_65D6
000069F4 303C 0010                  		move.w	#$10,d0
000069F8                            
000069F8                            loc_65D6:
000069F8 D078 F700                  		add.w	($FFFFF700).w,d0
000069FC B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006A00 6D00                       		blt.s	loc_65E4
00006A02 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006A06                            
00006A06                            loc_65E4:
00006A06 3200                       		move.w	d0,d1
00006A08 9278 F700                  		sub.w	($FFFFF700).w,d1
00006A0C E141                       		asl.w	#8,d1
00006A0E 31C0 F700                  		move.w	d0,($FFFFF700).w
00006A12 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006A16 4E75                       		rts	
00006A18                            ; ===========================================================================
00006A18                            
00006A18                            loc_65F6:				; XREF: ScrollHoriz2
00006A18 D078 F700                  		add.w	($FFFFF700).w,d0
00006A1C B078 F728                  		cmp.w	($FFFFF728).w,d0
00006A20 6EE4                       		bgt.s	loc_65E4
00006A22 3038 F728                  		move.w	($FFFFF728).w,d0
00006A26 60DE                       		bra.s	loc_65E4
00006A28                            ; End of function ScrollHoriz2
00006A28                            
00006A28                            ; ===========================================================================
00006A28 4A40                       		tst.w	d0
00006A2A 6A00                       		bpl.s	loc_6610
00006A2C 303C FFFE                  		move.w	#-2,d0
00006A30 60E6                       		bra.s	loc_65F6
00006A32                            ; ===========================================================================
00006A32                            
00006A32                            loc_6610:
00006A32 303C 0002                  		move.w	#2,d0
00006A36 60B6                       		bra.s	loc_65CC
00006A38                            
00006A38                            ; ---------------------------------------------------------------------------
00006A38                            ; Subroutine to	scroll the level vertically as Sonic moves
00006A38                            ; ---------------------------------------------------------------------------
00006A38                            
00006A38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A38                            
00006A38                            
00006A38                            ScrollVertical:				; XREF: DeformBgLayer
00006A38 7200                       		moveq	#0,d1
00006A3A 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006A3E 9078 F704                  		sub.w	($FFFFF704).w,d0
00006A42 0838 0002 D022             		btst	#2,($FFFFD022).w
00006A48 6700                       		beq.s	loc_662A
00006A4A 5B40                       		subq.w	#5,d0
00006A4C                            
00006A4C                            loc_662A:
00006A4C 0838 0001 D022             		btst	#1,($FFFFD022).w
00006A52 6700                       		beq.s	loc_664A
00006A54 0640 0020                  		addi.w	#$20,d0
00006A58 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006A5C 6500                       		bcs.s	loc_6696
00006A5E 0440 0040                  		subi.w	#$40,d0
00006A62 6400                       		bcc.s	loc_6696
00006A64 4A38 F75C                  		tst.b	($FFFFF75C).w
00006A68 6600                       		bne.s	loc_66A8
00006A6A 6000                       		bra.s	loc_6656
00006A6C                            ; ===========================================================================
00006A6C                            
00006A6C                            loc_664A:
00006A6C 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006A70 6600                       		bne.s	loc_665C
00006A72 4A38 F75C                  		tst.b	($FFFFF75C).w
00006A76 6600                       		bne.s	loc_66A8
00006A78                            
00006A78                            loc_6656:
00006A78 4278 F73C                  		clr.w	($FFFFF73C).w
00006A7C 4E75                       		rts	
00006A7E                            ; ===========================================================================
00006A7E                            
00006A7E                            loc_665C:
00006A7E 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006A84 6600                       		bne.s	loc_6684
00006A86 3238 D014                  		move.w	($FFFFD014).w,d1
00006A8A 6A00                       		bpl.s	loc_666C
00006A8C 4441                       		neg.w	d1
00006A8E                            
00006A8E                            loc_666C:
00006A8E 0C41 0800                  		cmpi.w	#$800,d1
00006A92 6400                       		bcc.s	loc_6696
00006A94 323C 0600                  		move.w	#$600,d1
00006A98 0C40 0006                  		cmpi.w	#6,d0
00006A9C 6E00                       		bgt.s	loc_66F6
00006A9E 0C40 FFFA                  		cmpi.w	#-6,d0
00006AA2 6D00                       		blt.s	loc_66C0
00006AA4 6000                       		bra.s	loc_66AE
00006AA6                            ; ===========================================================================
00006AA6                            
00006AA6                            loc_6684:
00006AA6 323C 0200                  		move.w	#$200,d1
00006AAA 0C40 0002                  		cmpi.w	#2,d0
00006AAE 6E00                       		bgt.s	loc_66F6
00006AB0 0C40 FFFE                  		cmpi.w	#-2,d0
00006AB4 6D00                       		blt.s	loc_66C0
00006AB6 6000                       		bra.s	loc_66AE
00006AB8                            ; ===========================================================================
00006AB8                            
00006AB8                            loc_6696:
00006AB8 323C 1000                  		move.w	#$1000,d1
00006ABC 0C40 0010                  		cmpi.w	#$10,d0
00006AC0 6E00                       		bgt.s	loc_66F6
00006AC2 0C40 FFF0                  		cmpi.w	#-$10,d0
00006AC6 6D00                       		blt.s	loc_66C0
00006AC8 6000                       		bra.s	loc_66AE
00006ACA                            ; ===========================================================================
00006ACA                            
00006ACA                            loc_66A8:
00006ACA 7000                       		moveq	#0,d0
00006ACC 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006AD0                            
00006AD0                            loc_66AE:
00006AD0 7200                       		moveq	#0,d1
00006AD2 3200                       		move.w	d0,d1
00006AD4 D278 F704                  		add.w	($FFFFF704).w,d1
00006AD8 4A40                       		tst.w	d0
00006ADA 6A00 0000                  		bpl.w	loc_6700
00006ADE 6000 0000                  		bra.w	loc_66CC
00006AE2                            ; ===========================================================================
00006AE2                            
00006AE2                            loc_66C0:
00006AE2 4441                       		neg.w	d1
00006AE4 48C1                       		ext.l	d1
00006AE6 E181                       		asl.l	#8,d1
00006AE8 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006AEC 4841                       		swap	d1
00006AEE                            
00006AEE                            loc_66CC:
00006AEE B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006AF2 6E00                       		bgt.s	loc_6724
00006AF4 0C41 FF00                  		cmpi.w	#-$100,d1
00006AF8 6E00                       		bgt.s	loc_66F0
00006AFA 0241 07FF                  		andi.w	#$7FF,d1
00006AFE 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006B04 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006B0A 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006B10 6000                       		bra.s	loc_6724
00006B12                            ; ===========================================================================
00006B12                            
00006B12                            loc_66F0:
00006B12 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006B16 6000                       		bra.s	loc_6724
00006B18                            ; ===========================================================================
00006B18                            
00006B18                            loc_66F6:
00006B18 48C1                       		ext.l	d1
00006B1A E181                       		asl.l	#8,d1
00006B1C D2B8 F704                  		add.l	($FFFFF704).w,d1
00006B20 4841                       		swap	d1
00006B22                            
00006B22                            loc_6700:
00006B22 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006B26 6D00                       		blt.s	loc_6724
00006B28 0441 0800                  		subi.w	#$800,d1
00006B2C 6500                       		bcs.s	loc_6720
00006B2E 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006B34 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006B3A 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006B40 6000                       		bra.s	loc_6724
00006B42                            ; ===========================================================================
00006B42                            
00006B42                            loc_6720:
00006B42 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006B46                            
00006B46                            loc_6724:
00006B46 3838 F704                  		move.w	($FFFFF704).w,d4
00006B4A 4841                       		swap	d1
00006B4C 2601                       		move.l	d1,d3
00006B4E 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006B52 E09B                       		ror.l	#8,d3
00006B54 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006B58 21C1 F704                  		move.l	d1,($FFFFF704).w
00006B5C 3038 F704                  		move.w	($FFFFF704).w,d0
00006B60 0240 0010                  		andi.w	#$10,d0
00006B64 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006B68 B300                       		eor.b	d1,d0
00006B6A 6600                       		bne.s	locret_6766
00006B6C 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006B72 3038 F704                  		move.w	($FFFFF704).w,d0
00006B76 9044                       		sub.w	d4,d0
00006B78 6A00                       		bpl.s	loc_6760
00006B7A 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006B80 4E75                       		rts	
00006B82                            ; ===========================================================================
00006B82                            
00006B82                            loc_6760:
00006B82 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006B88                            
00006B88                            locret_6766:
00006B88 4E75                       		rts	
00006B8A                            ; End of function ScrollVertical
00006B8A                            
00006B8A                            
00006B8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B8A                            
00006B8A                            
00006B8A                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006B8A 2438 F708                  		move.l	($FFFFF708).w,d2
00006B8E 2002                       		move.l	d2,d0
00006B90 D084                       		add.l	d4,d0
00006B92 21C0 F708                  		move.l	d0,($FFFFF708).w
00006B96 2200                       		move.l	d0,d1
00006B98 4841                       		swap	d1
00006B9A 0241 0010                  		andi.w	#$10,d1
00006B9E 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006BA2 B701                       		eor.b	d3,d1
00006BA4 6600                       		bne.s	loc_679C
00006BA6 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006BAC 9082                       		sub.l	d2,d0
00006BAE 6A00                       		bpl.s	loc_6796
00006BB0 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006BB6 6000                       		bra.s	loc_679C
00006BB8                            ; ===========================================================================
00006BB8                            
00006BB8                            loc_6796:
00006BB8 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006BBE                            
00006BBE                            loc_679C:
00006BBE 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006BC2 2003                       		move.l	d3,d0
00006BC4 D085                       		add.l	d5,d0
00006BC6 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006BCA 2200                       		move.l	d0,d1
00006BCC 4841                       		swap	d1
00006BCE 0241 0010                  		andi.w	#$10,d1
00006BD2 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006BD6 B501                       		eor.b	d2,d1
00006BD8 6600                       		bne.s	locret_67D0
00006BDA 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006BE0 9083                       		sub.l	d3,d0
00006BE2 6A00                       		bpl.s	loc_67CA
00006BE4 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006BEA 4E75                       		rts	
00006BEC                            ; ===========================================================================
00006BEC                            
00006BEC                            loc_67CA:
00006BEC 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006BF2                            
00006BF2                            locret_67D0:
00006BF2 4E75                       		rts	
00006BF4                            ; End of function ScrollBlock1
00006BF4                            
00006BF4                            
00006BF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BF4                            
00006BF4                            
00006BF4                            ScrollBlock2:				; XREF: Deform_SLZ
00006BF4 2438 F708                  		move.l	($FFFFF708).w,d2
00006BF8 2002                       		move.l	d2,d0
00006BFA D084                       		add.l	d4,d0
00006BFC 21C0 F708                  		move.l	d0,($FFFFF708).w
00006C00 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006C04 2003                       		move.l	d3,d0
00006C06 D085                       		add.l	d5,d0
00006C08 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006C0C 2200                       		move.l	d0,d1
00006C0E 4841                       		swap	d1
00006C10 0241 0010                  		andi.w	#$10,d1
00006C14 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C18 B501                       		eor.b	d2,d1
00006C1A 6600                       		bne.s	locret_6812
00006C1C 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C22 9083                       		sub.l	d3,d0
00006C24 6A00                       		bpl.s	loc_680C
00006C26 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006C2C 4E75                       		rts	
00006C2E                            ; ===========================================================================
00006C2E                            
00006C2E                            loc_680C:
00006C2E 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006C34                            
00006C34                            locret_6812:
00006C34 4E75                       		rts	
00006C36                            ; End of function ScrollBlock2
00006C36                            
00006C36                            
00006C36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C36                            
00006C36                            
00006C36                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006C36 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006C3A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006C3E 3200                       		move.w	d0,d1
00006C40 0241 0010                  		andi.w	#$10,d1
00006C44 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C48 B501                       		eor.b	d2,d1
00006C4A 6600                       		bne.s	locret_6842
00006C4C 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C52 9043                       		sub.w	d3,d0
00006C54 6A00                       		bpl.s	loc_683C
00006C56 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006C5C 4E75                       		rts	
00006C5E                            ; ===========================================================================
00006C5E                            
00006C5E                            loc_683C:
00006C5E 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006C64                            
00006C64                            locret_6842:
00006C64 4E75                       		rts	
00006C66                            ; End of function ScrollBlock3
00006C66                            
00006C66                            
00006C66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C66                            
00006C66                            
00006C66                            ScrollBlock4:				; XREF: Deform_GHZ
00006C66 3438 F710                  		move.w	($FFFFF710).w,d2
00006C6A 3638 F714                  		move.w	($FFFFF714).w,d3
00006C6E 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006C72 48C0                       		ext.l	d0
00006C74 EF80                       		asl.l	#7,d0
00006C76 D1B8 F710                  		add.l	d0,($FFFFF710).w
00006C7A 3038 F710                  		move.w	($FFFFF710).w,d0
00006C7E 0240 0010                  		andi.w	#$10,d0
00006C82 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006C86 B300                       		eor.b	d1,d0
00006C88 6600                       		bne.s	locret_6884
00006C8A 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006C90 3038 F710                  		move.w	($FFFFF710).w,d0
00006C94 9042                       		sub.w	d2,d0
00006C96 6A00                       		bpl.s	loc_687E
00006C98 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006C9E 6000                       		bra.s	locret_6884
00006CA0                            ; ===========================================================================
00006CA0                            
00006CA0                            loc_687E:
00006CA0 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006CA6                            
00006CA6                            locret_6884:
00006CA6 4E75                       		rts	
00006CA8                            ; End of function ScrollBlock4
00006CA8                            
00006CA8                            
00006CA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CA8                            
00006CA8                            
00006CA8                            sub_6886:				; XREF: loc_C44
00006CA8 4BF9 00C0 0004             		lea	($C00004).l,a5
00006CAE 4DF9 00C0 0000             		lea	($C00000).l,a6
00006CB4 45F8 F756                  		lea	($FFFFF756).w,a2
00006CB8 47F8 F708                  		lea	($FFFFF708).w,a3
00006CBC 49F8 A440                  		lea	($FFFFA440).w,a4
00006CC0 343C 6000                  		move.w	#$6000,d2
00006CC4 6100 0000                  		bsr.w	sub_6954
00006CC8 45F8 F758                  		lea	($FFFFF758).w,a2
00006CCC 47F8 F710                  		lea	($FFFFF710).w,a3
00006CD0 6000 0000                  		bra.w	sub_69F4
00006CD4                            ; End of function sub_6886
00006CD4                            
00006CD4                            ; ---------------------------------------------------------------------------
00006CD4                            ; Subroutine to	display	correct	tiles as you move
00006CD4                            ; ---------------------------------------------------------------------------
00006CD4                            
00006CD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CD4                            
00006CD4                            
00006CD4                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006CD4 4BF9 00C0 0004             		lea	($C00004).l,a5
00006CDA 4DF9 00C0 0000             		lea	($C00000).l,a6
00006CE0 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006CE4 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006CE8 49F8 A440                  		lea	($FFFFA440).w,a4
00006CEC 343C 6000                  		move.w	#$6000,d2
00006CF0 6100 0000                  		bsr.w	sub_6954
00006CF4 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006CF8 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006CFC 6100 0000                  		bsr.w	sub_69F4
00006D00 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006D04 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006D08 49F8 A400                  		lea	($FFFFA400).w,a4
00006D0C 343C 4000                  		move.w	#$4000,d2
00006D10 4A12                       		tst.b	(a2)
00006D12 6700                       		beq.s	locret_6952
00006D14 0892 0000                  		bclr	#0,(a2)
00006D18 6700                       		beq.s	loc_6908
00006D1A 78F0                       		moveq	#-$10,d4
00006D1C 7AF0                       		moveq	#-$10,d5
00006D1E 6100 0000                  		bsr.w	sub_6C20
00006D22 78F0                       		moveq	#-$10,d4
00006D24 7AF0                       		moveq	#-$10,d5
00006D26 6100 0000                  		bsr.w	sub_6AD8
00006D2A                            
00006D2A                            loc_6908:
00006D2A 0892 0001                  		bclr	#1,(a2)
00006D2E 6700                       		beq.s	loc_6922
00006D30 383C 00E0                  		move.w	#$E0,d4
00006D34 7AF0                       		moveq	#-$10,d5
00006D36 6100 0000                  		bsr.w	sub_6C20
00006D3A 383C 00E0                  		move.w	#$E0,d4
00006D3E 7AF0                       		moveq	#-$10,d5
00006D40 6100 0000                  		bsr.w	sub_6AD8
00006D44                            
00006D44                            loc_6922:
00006D44 0892 0002                  		bclr	#2,(a2)
00006D48 6700                       		beq.s	loc_6938
00006D4A 78F0                       		moveq	#-$10,d4
00006D4C 7AF0                       		moveq	#-$10,d5
00006D4E 6100 0000                  		bsr.w	sub_6C20
00006D52 78F0                       		moveq	#-$10,d4
00006D54 7AF0                       		moveq	#-$10,d5
00006D56 6100 0000                  		bsr.w	sub_6B04
00006D5A                            
00006D5A                            loc_6938:
00006D5A 0892 0003                  		bclr	#3,(a2)
00006D5E 6700                       		beq.s	locret_6952
00006D60 78F0                       		moveq	#-$10,d4
00006D62 3A3C 0140                  		move.w	#$140,d5
00006D66 6100 0000                  		bsr.w	sub_6C20
00006D6A 78F0                       		moveq	#-$10,d4
00006D6C 3A3C 0140                  		move.w	#$140,d5
00006D70 6100 0000                  		bsr.w	sub_6B04
00006D74                            
00006D74                            locret_6952:
00006D74 4E75                       		rts	
00006D76                            ; End of function LoadTilesAsYouMove
00006D76                            
00006D76                            
00006D76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D76                            
00006D76                            
00006D76                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006D76 4A12                       		tst.b	(a2)
00006D78 6700 0000                  		beq.w	locret_69F2
00006D7C 0892 0000                  		bclr	#0,(a2)
00006D80 6700                       		beq.s	loc_6972
00006D82 78F0                       		moveq	#-$10,d4
00006D84 7AF0                       		moveq	#-$10,d5
00006D86 6100 0000                  		bsr.w	sub_6C20
00006D8A 78F0                       		moveq	#-$10,d4
00006D8C 7AF0                       		moveq	#-$10,d5
00006D8E 7C1F                       		moveq	#$1F,d6
00006D90 6100 0000                  		bsr.w	sub_6ADA
00006D94                            
00006D94                            loc_6972:
00006D94 0892 0001                  		bclr	#1,(a2)
00006D98 6700                       		beq.s	loc_698E
00006D9A 383C 00E0                  		move.w	#$E0,d4
00006D9E 7AF0                       		moveq	#-$10,d5
00006DA0 6100 0000                  		bsr.w	sub_6C20
00006DA4 383C 00E0                  		move.w	#$E0,d4
00006DA8 7AF0                       		moveq	#-$10,d5
00006DAA 7C1F                       		moveq	#$1F,d6
00006DAC 6100 0000                  		bsr.w	sub_6ADA
00006DB0                            
00006DB0                            loc_698E:
00006DB0 0892 0002                  		bclr	#2,(a2)
00006DB4 6700                       		beq.s	loc_69BE
00006DB6 78F0                       		moveq	#-$10,d4
00006DB8 7AF0                       		moveq	#-$10,d5
00006DBA 6100 0000                  		bsr.w	sub_6C20
00006DBE 78F0                       		moveq	#-$10,d4
00006DC0 7AF0                       		moveq	#-$10,d5
00006DC2 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006DC6 322B 0004                  		move.w	4(a3),d1
00006DCA 0241 FFF0                  		andi.w	#-$10,d1
00006DCE 9C41                       		sub.w	d1,d6
00006DD0 6D00                       		blt.s	loc_69BE
00006DD2 E84E                       		lsr.w	#4,d6
00006DD4 0C46 000F                  		cmpi.w	#$F,d6
00006DD8 6500                       		bcs.s	loc_69BA
00006DDA 7C0F                       		moveq	#$F,d6
00006DDC                            
00006DDC                            loc_69BA:
00006DDC 6100 0000                  		bsr.w	sub_6B06
00006DE0                            
00006DE0                            loc_69BE:
00006DE0 0892 0003                  		bclr	#3,(a2)
00006DE4 6700                       		beq.s	locret_69F2
00006DE6 78F0                       		moveq	#-$10,d4
00006DE8 3A3C 0140                  		move.w	#$140,d5
00006DEC 6100 0000                  		bsr.w	sub_6C20
00006DF0 78F0                       		moveq	#-$10,d4
00006DF2 3A3C 0140                  		move.w	#$140,d5
00006DF6 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006DFA 322B 0004                  		move.w	4(a3),d1
00006DFE 0241 FFF0                  		andi.w	#-$10,d1
00006E02 9C41                       		sub.w	d1,d6
00006E04 6D00                       		blt.s	locret_69F2
00006E06 E84E                       		lsr.w	#4,d6
00006E08 0C46 000F                  		cmpi.w	#$F,d6
00006E0C 6500                       		bcs.s	loc_69EE
00006E0E 7C0F                       		moveq	#$F,d6
00006E10                            
00006E10                            loc_69EE:
00006E10 6100 0000                  		bsr.w	sub_6B06
00006E14                            
00006E14                            locret_69F2:
00006E14 4E75                       		rts	
00006E16                            ; End of function sub_6954
00006E16                            
00006E16                            
00006E16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E16                            
00006E16                            
00006E16                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006E16 4A12                       		tst.b	(a2)
00006E18 6700 0000                  		beq.w	locret_6A80
00006E1C 0892 0002                  		bclr	#2,(a2)
00006E20 6700                       		beq.s	loc_6A3E
00006E22 0C53 0010                  		cmpi.w	#$10,(a3)
00006E26 6500                       		bcs.s	loc_6A3E
00006E28 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006E2C 322B 0004                  		move.w	4(a3),d1
00006E30 0241 FFF0                  		andi.w	#-$10,d1
00006E34 9841                       		sub.w	d1,d4
00006E36 3F04                       		move.w	d4,-(sp)
00006E38 7AF0                       		moveq	#-$10,d5
00006E3A 6100 0000                  		bsr.w	sub_6C20
00006E3E 381F                       		move.w	(sp)+,d4
00006E40 7AF0                       		moveq	#-$10,d5
00006E42 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E46 322B 0004                  		move.w	4(a3),d1
00006E4A 0241 FFF0                  		andi.w	#-$10,d1
00006E4E 9C41                       		sub.w	d1,d6
00006E50 6D00                       		blt.s	loc_6A3E
00006E52 E84E                       		lsr.w	#4,d6
00006E54 0446 000E                  		subi.w	#$E,d6
00006E58 6400                       		bcc.s	loc_6A3E
00006E5A 4446                       		neg.w	d6
00006E5C 6100 0000                  		bsr.w	sub_6B06
00006E60                            
00006E60                            loc_6A3E:
00006E60 0892 0003                  		bclr	#3,(a2)
00006E64 6700                       		beq.s	locret_6A80
00006E66 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006E6A 322B 0004                  		move.w	4(a3),d1
00006E6E 0241 FFF0                  		andi.w	#-$10,d1
00006E72 9841                       		sub.w	d1,d4
00006E74 3F04                       		move.w	d4,-(sp)
00006E76 3A3C 0140                  		move.w	#$140,d5
00006E7A 6100 0000                  		bsr.w	sub_6C20
00006E7E 381F                       		move.w	(sp)+,d4
00006E80 3A3C 0140                  		move.w	#$140,d5
00006E84 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E88 322B 0004                  		move.w	4(a3),d1
00006E8C 0241 FFF0                  		andi.w	#-$10,d1
00006E90 9C41                       		sub.w	d1,d6
00006E92 6D00                       		blt.s	locret_6A80
00006E94 E84E                       		lsr.w	#4,d6
00006E96 0446 000E                  		subi.w	#$E,d6
00006E9A 6400                       		bcc.s	locret_6A80
00006E9C 4446                       		neg.w	d6
00006E9E 6100 0000                  		bsr.w	sub_6B06
00006EA2                            
00006EA2                            locret_6A80:
00006EA2 4E75                       		rts	
00006EA4                            ; End of function sub_69F4
00006EA4                            
00006EA4                            ; ===========================================================================
00006EA4 4A12                       		tst.b	(a2)
00006EA6 6700                       		beq.s	locret_6AD6
00006EA8 0892 0002                  		bclr	#2,(a2)
00006EAC 6700                       		beq.s	loc_6AAC
00006EAE 383C 00D0                  		move.w	#$D0,d4
00006EB2 322B 0004                  		move.w	4(a3),d1
00006EB6 0241 FFF0                  		andi.w	#-$10,d1
00006EBA 9841                       		sub.w	d1,d4
00006EBC 3F04                       		move.w	d4,-(sp)
00006EBE 7AF0                       		moveq	#-$10,d5
00006EC0 6100 0000                  		bsr.w	sub_6C3C
00006EC4 381F                       		move.w	(sp)+,d4
00006EC6 7AF0                       		moveq	#-$10,d5
00006EC8 7C02                       		moveq	#2,d6
00006ECA 6100 0000                  		bsr.w	sub_6B06
00006ECE                            
00006ECE                            loc_6AAC:
00006ECE 0892 0003                  		bclr	#3,(a2)
00006ED2 6700                       		beq.s	locret_6AD6
00006ED4 383C 00D0                  		move.w	#$D0,d4
00006ED8 322B 0004                  		move.w	4(a3),d1
00006EDC 0241 FFF0                  		andi.w	#-$10,d1
00006EE0 9841                       		sub.w	d1,d4
00006EE2 3F04                       		move.w	d4,-(sp)
00006EE4 3A3C 0140                  		move.w	#$140,d5
00006EE8 6100 0000                  		bsr.w	sub_6C3C
00006EEC 381F                       		move.w	(sp)+,d4
00006EEE 3A3C 0140                  		move.w	#$140,d5
00006EF2 7C02                       		moveq	#2,d6
00006EF4 6100 0000                  		bsr.w	sub_6B06
00006EF8                            
00006EF8                            locret_6AD6:
00006EF8 4E75                       		rts	
00006EFA                            
00006EFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EFA                            
00006EFA                            
00006EFA                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00006EFA 7C15                       		moveq	#$15,d6
00006EFC                            ; End of function sub_6AD8
00006EFC                            
00006EFC                            
00006EFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EFC                            
00006EFC                            
00006EFC                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00006EFC 2E3C 0080 0000             		move.l	#$800000,d7
00006F02 2200                       		move.l	d0,d1
00006F04                            
00006F04                            loc_6AE2:
00006F04 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006F08 6100 0000                  		bsr.w	sub_6BD6
00006F0C 2001                       		move.l	d1,d0
00006F0E 6100 0000                  		bsr.w	sub_6B32
00006F12 5801                       		addq.b	#4,d1
00006F14 0201 007F                  		andi.b	#$7F,d1
00006F18 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006F1C 0645 0010                  		addi.w	#$10,d5
00006F20 51CE FFE2                  		dbf	d6,loc_6AE2
00006F24 4E75                       		rts	
00006F26                            ; End of function sub_6ADA
00006F26                            
00006F26                            
00006F26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F26                            
00006F26                            
00006F26                            sub_6B04:				; XREF: LoadTilesAsYouMove
00006F26 7C0F                       		moveq	#$F,d6
00006F28                            ; End of function sub_6B04
00006F28                            
00006F28                            
00006F28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F28                            
00006F28                            
00006F28                            sub_6B06:				; XREF: sub_6954
00006F28 2E3C 0080 0000             		move.l	#$800000,d7
00006F2E 2200                       		move.l	d0,d1
00006F30                            
00006F30                            loc_6B0E:
00006F30 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006F34 6100 0000                  		bsr.w	sub_6BD6
00006F38 2001                       		move.l	d1,d0
00006F3A 6100 0000                  		bsr.w	sub_6B32
00006F3E 0641 0100                  		addi.w	#$100,d1
00006F42 0241 0FFF                  		andi.w	#$FFF,d1
00006F46 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006F4A 0644 0010                  		addi.w	#$10,d4
00006F4E 51CE FFE0                  		dbf	d6,loc_6B0E
00006F52 4E75                       		rts	
00006F54                            ; End of function sub_6B06
00006F54                            
00006F54                            
00006F54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F54                            
00006F54                            
00006F54                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00006F54 8042                       		or.w	d2,d0
00006F56 4840                       		swap	d0
00006F58 0810 0004                  		btst	#4,(a0)
00006F5C 6600                       		bne.s	loc_6B6E
00006F5E 0810 0003                  		btst	#3,(a0)
00006F62 6600                       		bne.s	loc_6B4E
00006F64 2A80                       		move.l	d0,(a5)
00006F66 2C99                       		move.l	(a1)+,(a6)
00006F68 D087                       		add.l	d7,d0
00006F6A 2A80                       		move.l	d0,(a5)
00006F6C 2C99                       		move.l	(a1)+,(a6)
00006F6E 4E75                       		rts	
00006F70                            ; ===========================================================================
00006F70                            
00006F70                            loc_6B4E:
00006F70 2A80                       		move.l	d0,(a5)
00006F72 2819                       		move.l	(a1)+,d4
00006F74 0A84 0800 0800             		eori.l	#$8000800,d4
00006F7A 4844                       		swap	d4
00006F7C 2C84                       		move.l	d4,(a6)
00006F7E D087                       		add.l	d7,d0
00006F80 2A80                       		move.l	d0,(a5)
00006F82 2819                       		move.l	(a1)+,d4
00006F84 0A84 0800 0800             		eori.l	#$8000800,d4
00006F8A 4844                       		swap	d4
00006F8C 2C84                       		move.l	d4,(a6)
00006F8E 4E75                       		rts	
00006F90                            ; ===========================================================================
00006F90                            
00006F90                            loc_6B6E:
00006F90 0810 0003                  		btst	#3,(a0)
00006F94 6600                       		bne.s	loc_6B90
00006F96 2A80                       		move.l	d0,(a5)
00006F98 2A19                       		move.l	(a1)+,d5
00006F9A 2819                       		move.l	(a1)+,d4
00006F9C 0A84 1000 1000             		eori.l	#$10001000,d4
00006FA2 2C84                       		move.l	d4,(a6)
00006FA4 D087                       		add.l	d7,d0
00006FA6 2A80                       		move.l	d0,(a5)
00006FA8 0A85 1000 1000             		eori.l	#$10001000,d5
00006FAE 2C85                       		move.l	d5,(a6)
00006FB0 4E75                       		rts	
00006FB2                            ; ===========================================================================
00006FB2                            
00006FB2                            loc_6B90:
00006FB2 2A80                       		move.l	d0,(a5)
00006FB4 2A19                       		move.l	(a1)+,d5
00006FB6 2819                       		move.l	(a1)+,d4
00006FB8 0A84 1800 1800             		eori.l	#$18001800,d4
00006FBE 4844                       		swap	d4
00006FC0 2C84                       		move.l	d4,(a6)
00006FC2 D087                       		add.l	d7,d0
00006FC4 2A80                       		move.l	d0,(a5)
00006FC6 0A85 1800 1800             		eori.l	#$18001800,d5
00006FCC 4845                       		swap	d5
00006FCE 2C85                       		move.l	d5,(a6)
00006FD0 4E75                       		rts	
00006FD2                            ; End of function sub_6B32
00006FD2                            
00006FD2                            ; ===========================================================================
00006FD2 4E75                       		rts	
00006FD4                            ; ===========================================================================
00006FD4 2A80                       		move.l	d0,(a5)
00006FD6 3A3C 2000                  		move.w	#$2000,d5
00006FDA 3819                       		move.w	(a1)+,d4
00006FDC D845                       		add.w	d5,d4
00006FDE 3C84                       		move.w	d4,(a6)
00006FE0 3819                       		move.w	(a1)+,d4
00006FE2 D845                       		add.w	d5,d4
00006FE4 3C84                       		move.w	d4,(a6)
00006FE6 D087                       		add.l	d7,d0
00006FE8 2A80                       		move.l	d0,(a5)
00006FEA 3819                       		move.w	(a1)+,d4
00006FEC D845                       		add.w	d5,d4
00006FEE 3C84                       		move.w	d4,(a6)
00006FF0 3819                       		move.w	(a1)+,d4
00006FF2 D845                       		add.w	d5,d4
00006FF4 3C84                       		move.w	d4,(a6)
00006FF6 4E75                       		rts	
00006FF8                            
00006FF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FF8                            
00006FF8                            
00006FF8                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00006FF8 43F8 B000                  		lea	($FFFFB000).w,a1
00006FFC D86B 0004                  		add.w	4(a3),d4
00007000 DA53                       		add.w	(a3),d5
00007002 3604                       		move.w	d4,d3
00007004 E24B                       		lsr.w	#1,d3
00007006 0243 0380                  		andi.w	#$380,d3
0000700A E64D                       		lsr.w	#3,d5
0000700C 3005                       		move.w	d5,d0
0000700E EA48                       		lsr.w	#5,d0
00007010 0240 007F                  		andi.w	#$7F,d0
00007014 D043                       		add.w	d3,d0
00007016 76FF                       		moveq	#-1,d3
00007018 1634 0000                  		move.b	(a4,d0.w),d3
0000701C 6700                       		beq.s	locret_6C1E
0000701E 5303                       		subq.b	#1,d3
00007020 0243 007F                  		andi.w	#$7F,d3
00007024 EE5B                       		ror.w	#7,d3
00007026 D844                       		add.w	d4,d4
00007028 0244 01E0                  		andi.w	#$1E0,d4
0000702C 0245 001E                  		andi.w	#$1E,d5
00007030 D644                       		add.w	d4,d3
00007032 D645                       		add.w	d5,d3
00007034 2043                       		movea.l	d3,a0
00007036 3610                       		move.w	(a0),d3
00007038 0243 03FF                  		andi.w	#$3FF,d3
0000703C E74B                       		lsl.w	#3,d3
0000703E D2C3                       		adda.w	d3,a1
00007040                            
00007040                            locret_6C1E:
00007040 4E75                       		rts	
00007042                            ; End of function sub_6BD6
00007042                            
00007042                            
00007042                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007042                            
00007042                            
00007042                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00007042 D86B 0004                  		add.w	4(a3),d4
00007046 DA53                       		add.w	(a3),d5
00007048 0244 00F0                  		andi.w	#$F0,d4
0000704C 0245 01F0                  		andi.w	#$1F0,d5
00007050 E94C                       		lsl.w	#4,d4
00007052 E44D                       		lsr.w	#2,d5
00007054 D845                       		add.w	d5,d4
00007056 7003                       		moveq	#3,d0
00007058 4840                       		swap	d0
0000705A 3004                       		move.w	d4,d0
0000705C 4E75                       		rts	
0000705E                            ; End of function sub_6C20
0000705E                            
0000705E                            
0000705E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000705E                            ; not used
0000705E                            
0000705E                            
0000705E                            sub_6C3C:
0000705E D86B 0004                  		add.w	4(a3),d4
00007062 DA53                       		add.w	(a3),d5
00007064 0244 00F0                  		andi.w	#$F0,d4
00007068 0245 01F0                  		andi.w	#$1F0,d5
0000706C E94C                       		lsl.w	#4,d4
0000706E E44D                       		lsr.w	#2,d5
00007070 D845                       		add.w	d5,d4
00007072 7002                       		moveq	#2,d0
00007074 4840                       		swap	d0
00007076 3004                       		move.w	d4,d0
00007078 4E75                       		rts	
0000707A                            ; End of function sub_6C3C
0000707A                            
0000707A                            ; ---------------------------------------------------------------------------
0000707A                            ; Subroutine to	load tiles as soon as the level	appears
0000707A                            ; ---------------------------------------------------------------------------
0000707A                            
0000707A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000707A                            
0000707A                            
0000707A                            LoadTilesFromStart:			; XREF: Level; EndingSequence
0000707A 4BF9 00C0 0004             		lea	($C00004).l,a5
00007080 4DF9 00C0 0000             		lea	($C00000).l,a6
00007086 47F8 F700                  		lea	($FFFFF700).w,a3
0000708A 49F8 A400                  		lea	($FFFFA400).w,a4
0000708E 343C 4000                  		move.w	#$4000,d2
00007092 6100                       		bsr.s	LoadTilesFromStart2
00007094 47F8 F708                  		lea	($FFFFF708).w,a3
00007098 49F8 A440                  		lea	($FFFFA440).w,a4
0000709C 343C 6000                  		move.w	#$6000,d2
000070A0                            ; End of function LoadTilesFromStart
000070A0                            
000070A0                            
000070A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070A0                            
000070A0                            
000070A0                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
000070A0 78F0                       		moveq	#-$10,d4
000070A2 7C0F                       		moveq	#$F,d6
000070A4                            
000070A4                            loc_6C82:
000070A4 48E7 0E00                  		movem.l	d4-d6,-(sp)
000070A8 7A00                       		moveq	#0,d5
000070AA 3204                       		move.w	d4,d1
000070AC 6100 FF94                  		bsr.w	sub_6C20
000070B0 3801                       		move.w	d1,d4
000070B2 7A00                       		moveq	#0,d5
000070B4 7C1F                       		moveq	#$1F,d6
000070B6 6100 FE44                  		bsr.w	sub_6ADA
000070BA 4CDF 0070                  		movem.l	(sp)+,d4-d6
000070BE 0644 0010                  		addi.w	#$10,d4
000070C2 51CE FFE0                  		dbf	d6,loc_6C82
000070C6 4E75                       		rts	
000070C8                            ; End of function LoadTilesFromStart2
000070C8                            
000070C8                            ; ---------------------------------------------------------------------------
000070C8                            ; Main Load Block loading subroutine
000070C8                            ; ---------------------------------------------------------------------------
000070C8                            
000070C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070C8                            
000070C8                            
000070C8                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
000070C8 7000                       		moveq	#0,d0
000070CA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000070CE E948                       		lsl.w	#4,d0
000070D0 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000070D6 45F2 0000                  		lea	(a2,d0.w),a2
000070DA 2F0A                       		move.l	a2,-(sp)
000070DC 588A                       		addq.l	#4,a2
000070DE 205A                       		movea.l	(a2)+,a0
000070E0 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
000070E4 303C 0000                  		move.w	#0,d0
000070E8 6100 A854                  		bsr.w	EniDec
000070EC 205A                       		movea.l	(a2)+,a0
000070EE 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
000070F4 6100 A9C6                  		bsr.w	KosDec
000070F8 6100 0000                  		bsr.w	LevelLayoutLoad
000070FC 301A                       		move.w	(a2)+,d0
000070FE 3012                       		move.w	(a2),d0
00007100 0240 00FF                  		andi.w	#$FF,d0
00007104 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
0000710A 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
0000710C 700C                       		moveq	#$C,d0		; use SB3 pallet
0000710E                            
0000710E                            MLB_ChkSBZPal:
0000710E 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007114 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007116 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
0000711C 6600                       		bne.s	MLB_NormalPal	; if not, branch
0000711E                            
0000711E                            MLB_UsePal0E:
0000711E 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00007120                            
00007120                            MLB_NormalPal:
00007120 6100 B1C0                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00007124 245F                       		movea.l	(sp)+,a2
00007126 584A                       		addq.w	#4,a2
00007128 7000                       		moveq	#0,d0
0000712A 1012                       		move.b	(a2),d0
0000712C 6700                       		beq.s	locret_6D10
0000712E 6100 A670                  		bsr.w	LoadPLC		; load pattern load cues
00007132                            
00007132                            locret_6D10:
00007132 4E75                       		rts	
00007134                            ; End of function MainLoadBlockLoad
00007134                            
00007134                            ; ---------------------------------------------------------------------------
00007134                            ; Level	layout loading subroutine
00007134                            ; ---------------------------------------------------------------------------
00007134                            
00007134                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007134                            
00007134                            
00007134                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007134 47F8 A400                  		lea	($FFFFA400).w,a3
00007138 323C 01FF                  		move.w	#$1FF,d1
0000713C 7000                       		moveq	#0,d0
0000713E                            
0000713E                            LevLoad_ClrRam:
0000713E 26C0                       		move.l	d0,(a3)+
00007140 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007144                            
00007144 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007148 7200                       		moveq	#0,d1
0000714A 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
0000714E 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007152 7202                       		moveq	#2,d1
00007154                            ; End of function LevelLayoutLoad
00007154                            
00007154                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007154                            
00007154                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007154                            
00007154                            
00007154                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007154 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007158 ED08                       		lsl.b	#6,d0
0000715A EA48                       		lsr.w	#5,d0
0000715C 3400                       		move.w	d0,d2
0000715E D040                       		add.w	d0,d0
00007160 D042                       		add.w	d2,d0
00007162 D041                       		add.w	d1,d0
00007164 43F9 0000 0000             		lea	(Level_Index).l,a1
0000716A 3031 0000                  		move.w	(a1,d0.w),d0
0000716E 43F1 0000                  		lea	(a1,d0.w),a1
00007172 7200                       		moveq	#0,d1
00007174 3401                       		move.w	d1,d2
00007176 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007178 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
0000717A                            
0000717A                            LevLoad_NumRows:
0000717A 3001                       		move.w	d1,d0
0000717C 204B                       		movea.l	a3,a0
0000717E                            
0000717E                            LevLoad_Row:
0000717E 10D9                       		move.b	(a1)+,(a0)+
00007180 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007184 47EB 0080                  		lea	$80(a3),a3	; do next row
00007188 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
0000718C 4E75                       		rts	
0000718E                            ; End of function LevelLayoutLoad2
0000718E                            
0000718E                            ; ---------------------------------------------------------------------------
0000718E                            ; Dynamic screen resize	loading	subroutine
0000718E                            ; ---------------------------------------------------------------------------
0000718E                            
0000718E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000718E                            
0000718E                            
0000718E                            DynScrResizeLoad:			; XREF: DeformBgLayer
0000718E 7000                       		moveq	#0,d0
00007190 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007194 D040                       		add.w	d0,d0
00007196 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
0000719A 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
0000719E 7202                       		moveq	#2,d1
000071A0 3038 F726                  		move.w	($FFFFF726).w,d0
000071A4 9078 F72E                  		sub.w	($FFFFF72E).w,d0
000071A8 6700                       		beq.s	locret_6DAA
000071AA 6400                       		bcc.s	loc_6DAC
000071AC 4441                       		neg.w	d1
000071AE 3038 F704                  		move.w	($FFFFF704).w,d0
000071B2 B078 F726                  		cmp.w	($FFFFF726).w,d0
000071B6 6300                       		bls.s	loc_6DA0
000071B8 31C0 F72E                  		move.w	d0,($FFFFF72E).w
000071BC 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
000071C2                            
000071C2                            loc_6DA0:
000071C2 D378 F72E                  		add.w	d1,($FFFFF72E).w
000071C6 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000071CC                            
000071CC                            locret_6DAA:
000071CC 4E75                       		rts	
000071CE                            ; ===========================================================================
000071CE                            
000071CE                            loc_6DAC:				; XREF: DynScrResizeLoad
000071CE 3038 F704                  		move.w	($FFFFF704).w,d0
000071D2 5040                       		addq.w	#8,d0
000071D4 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000071D8 6500                       		bcs.s	loc_6DC4
000071DA 0838 0001 D022             		btst	#1,($FFFFD022).w
000071E0 6700                       		beq.s	loc_6DC4
000071E2 D241                       		add.w	d1,d1
000071E4 D241                       		add.w	d1,d1
000071E6                            
000071E6                            loc_6DC4:
000071E6 D378 F72E                  		add.w	d1,($FFFFF72E).w
000071EA 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000071F0 4E75                       		rts	
000071F2                            ; End of function DynScrResizeLoad
000071F2                            
000071F2                            ; ===========================================================================
000071F2                            ; ---------------------------------------------------------------------------
000071F2                            ; Offset index for dynamic screen resizing
000071F2                            ; ---------------------------------------------------------------------------
000071F2 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
000071F6 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
000071FA 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
000071FE 0000                       		dc.w Resize_Ending-Resize_Index
00007200                            ; ===========================================================================
00007200                            ; ---------------------------------------------------------------------------
00007200                            ; Green	Hill Zone dynamic screen resizing
00007200                            ; ---------------------------------------------------------------------------
00007200                            
00007200                            Resize_GHZ:				; XREF: Resize_Index
00007200 7000                       		moveq	#0,d0
00007202 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007206 D040                       		add.w	d0,d0
00007208 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
0000720C 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007210                            ; ===========================================================================
00007210 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00007212 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007214 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007216                            ; ===========================================================================
00007216                            
00007216                            Resize_GHZ1:
00007216 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
0000721C 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00007222 6500                       		bcs.s	locret_6E08	; if not, branch
00007224 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
0000722A                            
0000722A                            locret_6E08:
0000722A 4E75                       		rts	
0000722C                            ; ===========================================================================
0000722C                            
0000722C                            Resize_GHZ2:
0000722C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007232 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007238 6500                       		bcs.s	locret_6E3A
0000723A 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007240 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007246 6500                       		bcs.s	locret_6E3A
00007248 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000724E 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00007254 6500                       		bcs.s	locret_6E3A
00007256 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000725C                            
0000725C                            locret_6E3A:
0000725C 4E75                       		rts	
0000725E                            ; ===========================================================================
0000725E                            
0000725E                            Resize_GHZ3:
0000725E 7000                       		moveq	#0,d0
00007260 1038 F742                  		move.b	($FFFFF742).w,d0
00007264 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007268 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
0000726C                            ; ===========================================================================
0000726C 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
0000726E 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007270 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007272                            ; ===========================================================================
00007272                            
00007272                            Resize_GHZ3main:
00007272 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007278 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
0000727E 6500                       		bcs.s	locret_6E96
00007280 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007286 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000728C 6500                       		bcs.s	locret_6E96
0000728E 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007294 6500                       		bcs.s	loc_6E98
00007296 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000729C 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
000072A2 6400                       		bcc.s	loc_6E8E
000072A4 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
000072AA 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
000072B0                            
000072B0                            loc_6E8E:
000072B0 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000072B6 6400                       		bcc.s	loc_6E98
000072B8                            
000072B8                            locret_6E96:
000072B8 4E75                       		rts	
000072BA                            ; ===========================================================================
000072BA                            
000072BA                            loc_6E98:
000072BA 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000072C0 5438 F742                  		addq.b	#2,($FFFFF742).w
000072C4 4E75                       		rts	
000072C6                            ; ===========================================================================
000072C6                            
000072C6                            Resize_GHZ3boss:
000072C6 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000072CC 6400                       		bcc.s	loc_6EB0
000072CE 5538 F742                  		subq.b	#2,($FFFFF742).w
000072D2                            
000072D2                            loc_6EB0:
000072D2 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
000072D8 6500                       		bcs.s	locret_6EE8
000072DA 6100 0000                  		bsr.w	SingleObjLoad
000072DE 6600                       		bne.s	loc_6ED0
000072E0 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
000072E4 337C 2A60 0008             		move.w	#$2A60,8(a1)
000072EA 337C 0280 000C             		move.w	#$280,$C(a1)
000072F0                            
000072F0                            loc_6ED0:
000072F0 303C 008C                  		move.w	#$8C,d0
000072F4 6100 A2C0                  		bsr.w	PlaySound	; play boss music
000072F8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000072FE 5438 F742                  		addq.b	#2,($FFFFF742).w
00007302 7011                       		moveq	#$11,d0
00007304 6000 A49A                  		bra.w	LoadPLC		; load boss patterns
00007308                            ; ===========================================================================
00007308                            
00007308                            locret_6EE8:
00007308 4E75                       		rts	
0000730A                            ; ===========================================================================
0000730A                            
0000730A                            Resize_GHZ3end:
0000730A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007310 4E75                       		rts	
00007312                            ; ===========================================================================
00007312                            ; ---------------------------------------------------------------------------
00007312                            ; Labyrinth Zone dynamic screen	resizing
00007312                            ; ---------------------------------------------------------------------------
00007312                            
00007312                            Resize_LZ:				; XREF: Resize_Index
00007312 7000                       		moveq	#0,d0
00007314 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007318 D040                       		add.w	d0,d0
0000731A 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
0000731E 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007322                            ; ===========================================================================
00007322 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007324 0000                       		dc.w Resize_LZ12-Resize_LZx
00007326 0000                       		dc.w Resize_LZ3-Resize_LZx
00007328 0000                       		dc.w Resize_SBZ3-Resize_LZx
0000732A                            ; ===========================================================================
0000732A                            
0000732A                            Resize_LZ12:
0000732A 4E75                       		rts	
0000732C                            ; ===========================================================================
0000732C                            
0000732C                            Resize_LZ3:
0000732C 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
00007330 6700                       		beq.s	loc_6F28	; if not, branch
00007332 43F8 A506                  		lea	($FFFFA506).w,a1
00007336 0C11 0007                  		cmpi.b	#7,(a1)
0000733A 6700                       		beq.s	loc_6F28
0000733C 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00007340 303C 00B7                  		move.w	#$B7,d0
00007344 6100 A276                  		bsr.w	PlaySound_Special ; play rumbling sound
00007348                            
00007348                            loc_6F28:
00007348 4A38 F742                  		tst.b	($FFFFF742).w
0000734C 6600                       		bne.s	locret_6F64
0000734E 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00007354 6500                       		bcs.s	locret_6F62
00007356 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
0000735C 6400                       		bcc.s	locret_6F62
0000735E 6100 0000                  		bsr.w	SingleObjLoad
00007362 6600                       		bne.s	loc_6F4A
00007364 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007368                            
00007368                            loc_6F4A:
00007368 303C 008C                  		move.w	#$8C,d0
0000736C 6100 A248                  		bsr.w	PlaySound	; play boss music
00007370 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007376 5438 F742                  		addq.b	#2,($FFFFF742).w
0000737A 7011                       		moveq	#$11,d0
0000737C 6000 A422                  		bra.w	LoadPLC		; load boss patterns
00007380                            ; ===========================================================================
00007380                            
00007380                            locret_6F62:
00007380 4E75                       		rts	
00007382                            ; ===========================================================================
00007382                            
00007382                            locret_6F64:
00007382 4E75                       		rts	
00007384                            ; ===========================================================================
00007384                            
00007384                            Resize_SBZ3:
00007384 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000738A 6500                       		bcs.s	locret_6F8C
0000738C 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00007392 6400                       		bcc.s	locret_6F8C	; if not, branch
00007394 4238 FE30                  		clr.b	($FFFFFE30).w
00007398 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000739E 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
000073A4 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
000073AA                            
000073AA                            locret_6F8C:
000073AA 4E75                       		rts	
000073AC                            ; ===========================================================================
000073AC                            ; ---------------------------------------------------------------------------
000073AC                            ; Marble Zone dynamic screen resizing
000073AC                            ; ---------------------------------------------------------------------------
000073AC                            
000073AC                            Resize_MZ:				; XREF: Resize_Index
000073AC 7000                       		moveq	#0,d0
000073AE 1038 FE11                  		move.b	($FFFFFE11).w,d0
000073B2 D040                       		add.w	d0,d0
000073B4 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000073B8 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000073BC                            ; ===========================================================================
000073BC 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000073BE 0000                       		dc.w Resize_MZ2-Resize_MZx
000073C0 0000                       		dc.w Resize_MZ3-Resize_MZx
000073C2                            ; ===========================================================================
000073C2                            
000073C2                            Resize_MZ1:
000073C2 7000                       		moveq	#0,d0
000073C4 1038 F742                  		move.b	($FFFFF742).w,d0
000073C8 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000073CC 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000073D0                            ; ===========================================================================
000073D0 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000073D2 0000                       		dc.w loc_6FEA-off_6FB2
000073D4 0000                       		dc.w loc_702E-off_6FB2
000073D6 0000                       		dc.w loc_7050-off_6FB2
000073D8                            ; ===========================================================================
000073D8                            
000073D8                            loc_6FBA:
000073D8 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000073DE 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
000073E4 6500                       		bcs.s	locret_6FE8
000073E6 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000073EC 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000073F2 6500                       		bcs.s	locret_6FE8
000073F4 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000073FA 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007400 6500                       		bcs.s	locret_6FE8
00007402 5438 F742                  		addq.b	#2,($FFFFF742).w
00007406                            
00007406                            locret_6FE8:
00007406 4E75                       		rts	
00007408                            ; ===========================================================================
00007408                            
00007408                            loc_6FEA:
00007408 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000740E 6400                       		bcc.s	loc_6FF8
00007410 5538 F742                  		subq.b	#2,($FFFFF742).w
00007414 4E75                       		rts	
00007416                            ; ===========================================================================
00007416                            
00007416                            loc_6FF8:
00007416 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000741C 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007422 6400                       		bcc.s	locret_702C
00007424 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
0000742A 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007430 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007436 6400                       		bcc.s	locret_702C
00007438 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000743E 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007444 6500                       		bcs.s	locret_702C
00007446 5438 F742                  		addq.b	#2,($FFFFF742).w
0000744A                            
0000744A                            locret_702C:
0000744A 4E75                       		rts	
0000744C                            ; ===========================================================================
0000744C                            
0000744C                            loc_702E:
0000744C 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007452 6400                       		bcc.s	loc_703C
00007454 5538 F742                  		subq.b	#2,($FFFFF742).w
00007458 4E75                       		rts	
0000745A                            ; ===========================================================================
0000745A                            
0000745A                            loc_703C:
0000745A 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007460 6500                       		bcs.s	locret_704E
00007462 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007468 5438 F742                  		addq.b	#2,($FFFFF742).w
0000746C                            
0000746C                            locret_704E:
0000746C 4E75                       		rts	
0000746E                            ; ===========================================================================
0000746E                            
0000746E                            loc_7050:
0000746E 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007474 6500                       		bcs.s	locret_7072
00007476 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000747C 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007482 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007488 6500                       		bcs.s	locret_7072
0000748A 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007490                            
00007490                            locret_7072:
00007490 4E75                       		rts	
00007492                            ; ===========================================================================
00007492                            
00007492                            Resize_MZ2:
00007492 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007498 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000749E 6500                       		bcs.s	locret_7088
000074A0 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000074A6                            
000074A6                            locret_7088:
000074A6 4E75                       		rts	
000074A8                            ; ===========================================================================
000074A8                            
000074A8                            Resize_MZ3:
000074A8 7000                       		moveq	#0,d0
000074AA 1038 F742                  		move.b	($FFFFF742).w,d0
000074AE 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000074B2 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000074B6                            ; ===========================================================================
000074B6 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000074B8 0000                       		dc.w Resize_MZ3end-off_7098
000074BA                            ; ===========================================================================
000074BA                            
000074BA                            Resize_MZ3boss:
000074BA 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000074C0 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000074C6 6500                       		bcs.s	locret_70E8
000074C8 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000074CE 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
000074D4 6500                       		bcs.s	locret_70E8
000074D6 6100 0000                  		bsr.w	SingleObjLoad
000074DA 6600                       		bne.s	loc_70D0
000074DC 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
000074E0 337C 19F0 0008             		move.w	#$19F0,8(a1)
000074E6 337C 022C 000C             		move.w	#$22C,$C(a1)
000074EC                            
000074EC                            loc_70D0:
000074EC 303C 008C                  		move.w	#$8C,d0
000074F0 6100 A0C4                  		bsr.w	PlaySound	; play boss music
000074F4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000074FA 5438 F742                  		addq.b	#2,($FFFFF742).w
000074FE 7011                       		moveq	#$11,d0
00007500 6000 A29E                  		bra.w	LoadPLC		; load boss patterns
00007504                            ; ===========================================================================
00007504                            
00007504                            locret_70E8:
00007504 4E75                       		rts	
00007506                            ; ===========================================================================
00007506                            
00007506                            Resize_MZ3end:
00007506 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000750C 4E75                       		rts	
0000750E                            ; ===========================================================================
0000750E                            ; ---------------------------------------------------------------------------
0000750E                            ; Star Light Zone dynamic screen resizing
0000750E                            ; ---------------------------------------------------------------------------
0000750E                            
0000750E                            Resize_SLZ:				; XREF: Resize_Index
0000750E 7000                       		moveq	#0,d0
00007510 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007514 D040                       		add.w	d0,d0
00007516 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
0000751A 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
0000751E                            ; ===========================================================================
0000751E 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
00007520 0000                       		dc.w Resize_SLZ2-Resize_SLZx
00007522 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007524                            ; ===========================================================================
00007524                            
00007524                            Resize_SLZ1:
00007524 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
0000752A 4E75                       		rts	
0000752C                            
0000752C                            Resize_SLZ2:
0000752C 4E75                       		rts	
0000752E                            ; ===========================================================================
0000752E                            
0000752E                            Resize_SLZ3:
0000752E 7000                       		moveq	#0,d0
00007530 1038 F742                  		move.b	($FFFFF742).w,d0
00007534 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00007538 4EFB 0000                  		jmp	off_7118(pc,d0.w)
0000753C                            ; ===========================================================================
0000753C 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
0000753E 0000                       		dc.w Resize_SLZ3boss-off_7118
00007540 0000                       		dc.w Resize_SLZ3end-off_7118
00007542                            ; ===========================================================================
00007542                            
00007542                            Resize_SLZ3main:
00007542 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00007548 6500                       		bcs.s	locret_7130
0000754A 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007550 5438 F742                  		addq.b	#2,($FFFFF742).w
00007554                            
00007554                            locret_7130:
00007554 4E75                       		rts	
00007556                            ; ===========================================================================
00007556                            
00007556                            Resize_SLZ3boss:
00007556 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000755C 6500                       		bcs.s	locret_715C
0000755E 6100 0000                  		bsr.w	SingleObjLoad
00007562 6600                       		bne.s	loc_7144
00007564 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007568                            
00007568                            loc_7144:
00007568 303C 008C                  		move.w	#$8C,d0
0000756C 6100 A048                  		bsr.w	PlaySound	; play boss music
00007570 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007576 5438 F742                  		addq.b	#2,($FFFFF742).w
0000757A 7011                       		moveq	#$11,d0
0000757C 6000 A222                  		bra.w	LoadPLC		; load boss patterns
00007580                            ; ===========================================================================
00007580                            
00007580                            locret_715C:
00007580 4E75                       		rts	
00007582                            ; ===========================================================================
00007582                            
00007582                            Resize_SLZ3end:
00007582 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007588 4E75                       		rts
0000758A 4E75                       		rts
0000758C                            ; ===========================================================================
0000758C                            ; ---------------------------------------------------------------------------
0000758C                            ; Spring Yard Zone dynamic screen resizing
0000758C                            ; ---------------------------------------------------------------------------
0000758C                            
0000758C                            Resize_SYZ:				; XREF: Resize_Index
0000758C 7000                       		moveq	#0,d0
0000758E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007592 D040                       		add.w	d0,d0
00007594 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007598 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
0000759C                            ; ===========================================================================
0000759C 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
0000759E 0000                       		dc.w Resize_SYZ2-Resize_SYZx
000075A0 0000                       		dc.w Resize_SYZ3-Resize_SYZx
000075A2                            ; ===========================================================================
000075A2                            
000075A2                            Resize_SYZ1:
000075A2 4E75                       		rts	
000075A4                            ; ===========================================================================
000075A4                            
000075A4                            Resize_SYZ2:
000075A4 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000075AA 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
000075B0 6500                       		bcs.s	locret_71A2
000075B2 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000075B8 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000075BE 6500                       		bcs.s	locret_71A2
000075C0 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000075C6                            
000075C6                            locret_71A2:
000075C6 4E75                       		rts	
000075C8                            ; ===========================================================================
000075C8                            
000075C8                            Resize_SYZ3:
000075C8 7000                       		moveq	#0,d0
000075CA 1038 F742                  		move.b	($FFFFF742).w,d0
000075CE 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000075D2 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000075D6                            ; ===========================================================================
000075D6 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000075D8 0000                       		dc.w Resize_SYZ3boss-off_71B2
000075DA 0000                       		dc.w Resize_SYZ3end-off_71B2
000075DC                            ; ===========================================================================
000075DC                            
000075DC                            Resize_SYZ3main:
000075DC 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000075E2 6500                       		bcs.s	locret_71CE
000075E4 6100 0000                  		bsr.w	SingleObjLoad
000075E8 6600                       		bne.s	locret_71CE
000075EA 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000075EE 5438 F742                  		addq.b	#2,($FFFFF742).w
000075F2                            
000075F2                            locret_71CE:
000075F2 4E75                       		rts	
000075F4                            ; ===========================================================================
000075F4                            
000075F4                            Resize_SYZ3boss:
000075F4 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000075FA 6500                       		bcs.s	locret_7200
000075FC 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007602 6100 0000                  		bsr.w	SingleObjLoad
00007606 6600                       		bne.s	loc_71EC
00007608 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
0000760C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007610                            
00007610                            loc_71EC:
00007610 303C 008C                  		move.w	#$8C,d0
00007614 6100 9FA0                  		bsr.w	PlaySound	; play boss music
00007618 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000761E 7011                       		moveq	#$11,d0
00007620 6000 A17E                  		bra.w	LoadPLC		; load boss patterns
00007624                            ; ===========================================================================
00007624                            
00007624                            locret_7200:
00007624 4E75                       		rts	
00007626                            ; ===========================================================================
00007626                            
00007626                            Resize_SYZ3end:
00007626 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000762C 4E75                       		rts	
0000762E                            ; ===========================================================================
0000762E                            ; ---------------------------------------------------------------------------
0000762E                            ; Scrap	Brain Zone dynamic screen resizing
0000762E                            ; ---------------------------------------------------------------------------
0000762E                            
0000762E                            Resize_SBZ:				; XREF: Resize_Index
0000762E 7000                       		moveq	#0,d0
00007630 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007634 D040                       		add.w	d0,d0
00007636 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
0000763A 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
0000763E                            ; ===========================================================================
0000763E 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007640 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007642 0000                       		dc.w Resize_FZ-Resize_SBZx
00007644                            ; ===========================================================================
00007644                            
00007644                            Resize_SBZ1:
00007644 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000764A 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007650 6500                       		bcs.s	locret_7242
00007652 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007658 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000765E 6500                       		bcs.s	locret_7242
00007660 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007666                            
00007666                            locret_7242:
00007666 4E75                       		rts	
00007668                            ; ===========================================================================
00007668                            
00007668                            Resize_SBZ2:
00007668 7000                       		moveq	#0,d0
0000766A 1038 F742                  		move.b	($FFFFF742).w,d0
0000766E 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007672 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007676                            ; ===========================================================================
00007676 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007678 0000                       		dc.w Resize_SBZ2boss-off_7252
0000767A 0000                       		dc.w Resize_SBZ2boss2-off_7252
0000767C 0000                       		dc.w Resize_SBZ2end-off_7252
0000767E                            ; ===========================================================================
0000767E                            
0000767E                            Resize_SBZ2main:
0000767E 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007684 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
0000768A 6500                       		bcs.s	locret_727A
0000768C 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007692 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007698 6500                       		bcs.s	locret_727A
0000769A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000769E                            
0000769E                            locret_727A:
0000769E 4E75                       		rts	
000076A0                            ; ===========================================================================
000076A0                            
000076A0                            Resize_SBZ2boss:
000076A0 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
000076A6 6500                       		bcs.s	locret_7298
000076A8 6100 0000                  		bsr.w	SingleObjLoad
000076AC 6600                       		bne.s	locret_7298
000076AE 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
000076B2 5438 F742                  		addq.b	#2,($FFFFF742).w
000076B6 701E                       		moveq	#$1E,d0
000076B8 6000 A0E6                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000076BC                            ; ===========================================================================
000076BC                            
000076BC                            locret_7298:
000076BC 4E75                       		rts	
000076BE                            ; ===========================================================================
000076BE                            
000076BE                            Resize_SBZ2boss2:
000076BE 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000076C4 6500                       		bcs.s	loc_72B6
000076C6 6100 0000                  		bsr.w	SingleObjLoad
000076CA 6600                       		bne.s	loc_72B0
000076CC 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
000076D0 5438 F742                  		addq.b	#2,($FFFFF742).w
000076D4                            
000076D4                            loc_72B0:
000076D4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000076DA                            
000076DA                            loc_72B6:
000076DA 6000                       		bra.s	loc_72C2
000076DC                            ; ===========================================================================
000076DC                            
000076DC                            Resize_SBZ2end:
000076DC 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
000076E2 6500                       		bcs.s	loc_72C2
000076E4 4E75                       		rts	
000076E6                            ; ===========================================================================
000076E6                            
000076E6                            loc_72C2:
000076E6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000076EC 4E75                       		rts	
000076EE                            ; ===========================================================================
000076EE                            
000076EE                            Resize_FZ:
000076EE 7000                       		moveq	#0,d0
000076F0 1038 F742                  		move.b	($FFFFF742).w,d0
000076F4 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
000076F8 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
000076FC                            ; ===========================================================================
000076FC 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007700 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007704 0000                       		dc.w Resize_FZend2-off_72D8
00007706                            ; ===========================================================================
00007706                            
00007706                            Resize_FZmain:
00007706 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
0000770C 6500                       		bcs.s	loc_72F4
0000770E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007712 701F                       		moveq	#$1F,d0
00007714 6100 A08A                  		bsr.w	LoadPLC		; load FZ boss patterns
00007718                            
00007718                            loc_72F4:
00007718 60CC                       		bra.s	loc_72C2
0000771A                            ; ===========================================================================
0000771A                            
0000771A                            Resize_FZboss:
0000771A 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007720 6500                       		bcs.s	loc_7312
00007722 6100 0000                  		bsr.w	SingleObjLoad
00007726 6600                       		bne.s	loc_7312
00007728 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
0000772C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007730 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007736                            
00007736                            loc_7312:
00007736 60AE                       		bra.s	loc_72C2
00007738                            ; ===========================================================================
00007738                            
00007738                            Resize_FZend:
00007738 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0000773E 6500                       		bcs.s	loc_7320
00007740 5438 F742                  		addq.b	#2,($FFFFF742).w
00007744                            
00007744                            loc_7320:
00007744 60A0                       		bra.s	loc_72C2
00007746                            ; ===========================================================================
00007746                            
00007746                            locret_7322:
00007746 4E75                       		rts	
00007748                            ; ===========================================================================
00007748                            
00007748                            Resize_FZend2:
00007748 609C                       		bra.s	loc_72C2
0000774A                            ; ===========================================================================
0000774A                            ; ---------------------------------------------------------------------------
0000774A                            ; Ending sequence dynamic screen resizing (empty)
0000774A                            ; ---------------------------------------------------------------------------
0000774A                            
0000774A                            Resize_Ending:				; XREF: Resize_Index
0000774A 4E75                       		rts	
0000774C                            ; ===========================================================================
0000774C                            ; ---------------------------------------------------------------------------
0000774C                            ; Object 11 - GHZ bridge
0000774C                            ; ---------------------------------------------------------------------------
0000774C                            
0000774C                            Obj11:					; XREF: Obj_Index
0000774C 7000                       		moveq	#0,d0
0000774E 1028 0024                  		move.b	$24(a0),d0
00007752 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007756 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
0000775A                            ; ===========================================================================
0000775A 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
0000775E 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007762 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007766                            ; ===========================================================================
00007766                            
00007766                            Obj11_Main:				; XREF: Obj11_Index
00007766 5428 0024                  		addq.b	#2,$24(a0)
0000776A 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007772 317C 438E 0002             		move.w	#$438E,2(a0)
00007778 117C 0004 0001             		move.b	#4,1(a0)
0000777E 117C 0003 0018             		move.b	#3,$18(a0)
00007784 117C 0080 0019             		move.b	#$80,$19(a0)
0000778A 3428 000C                  		move.w	$C(a0),d2
0000778E 3628 0008                  		move.w	8(a0),d3
00007792 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007794 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007798 7200                       		moveq	#0,d1
0000779A 1212                       		move.b	(a2),d1		; copy a2 to d1
0000779C 14FC 0000                  		move.b	#0,(a2)+
000077A0 3001                       		move.w	d1,d0
000077A2 E248                       		lsr.w	#1,d0
000077A4 E948                       		lsl.w	#4,d0
000077A6 9640                       		sub.w	d0,d3
000077A8 5501                       		subq.b	#2,d1
000077AA 6500                       		bcs.s	Obj11_Action
000077AC                            
000077AC                            Obj11_MakeBdg:
000077AC 6100 0000                  		bsr.w	SingleObjLoad
000077B0 6600                       		bne.s	Obj11_Action
000077B2 5228 0028                  		addq.b	#1,$28(a0)
000077B6 B668 0008                  		cmp.w	8(a0),d3
000077BA 6600                       		bne.s	loc_73B8
000077BC 0643 0010                  		addi.w	#$10,d3
000077C0 3142 000C                  		move.w	d2,$C(a0)
000077C4 3142 003C                  		move.w	d2,$3C(a0)
000077C8 3A08                       		move.w	a0,d5
000077CA 0445 D000                  		subi.w	#-$3000,d5
000077CE EC4D                       		lsr.w	#6,d5
000077D0 0245 007F                  		andi.w	#$7F,d5
000077D4 14C5                       		move.b	d5,(a2)+
000077D6 5228 0028                  		addq.b	#1,$28(a0)
000077DA                            
000077DA                            loc_73B8:				; XREF: ROM:00007398j
000077DA 3A09                       		move.w	a1,d5
000077DC 0445 D000                  		subi.w	#-$3000,d5
000077E0 EC4D                       		lsr.w	#6,d5
000077E2 0245 007F                  		andi.w	#$7F,d5
000077E6 14C5                       		move.b	d5,(a2)+
000077E8 137C 000A 0024             		move.b	#$A,$24(a1)
000077EE 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
000077F0 3342 000C                  		move.w	d2,$C(a1)
000077F4 3342 003C                  		move.w	d2,$3C(a1)
000077F8 3343 0008                  		move.w	d3,8(a1)
000077FC 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007804 337C 438E 0002             		move.w	#$438E,2(a1)
0000780A 137C 0004 0001             		move.b	#4,1(a1)
00007810 137C 0003 0018             		move.b	#3,$18(a1)
00007816 137C 0008 0019             		move.b	#8,$19(a1)
0000781C 0643 0010                  		addi.w	#$10,d3
00007820 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007824                            
00007824                            Obj11_Action:				; XREF: Obj11_Index
00007824 6100                       		bsr.s	Obj11_Solid
00007826 4A28 003E                  		tst.b	$3E(a0)
0000782A 6700                       		beq.s	Obj11_Display
0000782C 5928 003E                  		subq.b	#4,$3E(a0)
00007830 6100 0000                  		bsr.w	Obj11_Bend
00007834                            
00007834                            Obj11_Display:
00007834 6100 0000                  		bsr.w	DisplaySprite
00007838 6000 0000                  		bra.w	Obj11_ChkDel
0000783C                            
0000783C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000783C                            
0000783C                            
0000783C                            Obj11_Solid:				; XREF: Obj11_Action
0000783C 7200                       		moveq	#0,d1
0000783E 1228 0028                  		move.b	$28(a0),d1
00007842 E749                       		lsl.w	#3,d1
00007844 3401                       		move.w	d1,d2
00007846 5041                       		addq.w	#8,d1
00007848 D442                       		add.w	d2,d2
0000784A 43F8 D000                  		lea	($FFFFD000).w,a1
0000784E 4A69 0012                  		tst.w	$12(a1)
00007852 6B00 0000                  		bmi.w	locret_751E
00007856 3029 0008                  		move.w	8(a1),d0
0000785A 9068 0008                  		sub.w	8(a0),d0
0000785E D041                       		add.w	d1,d0
00007860 6B00 0000                  		bmi.w	locret_751E
00007864 B042                       		cmp.w	d2,d0
00007866 6400 0000                  		bcc.w	locret_751E
0000786A 6000                       		bra.s	Platform2
0000786C                            ; End of function Obj11_Solid
0000786C                            
0000786C                            ; ---------------------------------------------------------------------------
0000786C                            ; Platform subroutine
0000786C                            ; ---------------------------------------------------------------------------
0000786C                            
0000786C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000786C                            
0000786C                            
0000786C                            PlatformObject:
0000786C 43F8 D000                  		lea	($FFFFD000).w,a1
00007870 4A69 0012                  		tst.w	$12(a1)
00007874 6B00 0000                  		bmi.w	locret_751E
00007878 3029 0008                  		move.w	8(a1),d0
0000787C 9068 0008                  		sub.w	8(a0),d0
00007880 D041                       		add.w	d1,d0
00007882 6B00 0000                  		bmi.w	locret_751E
00007886 D241                       		add.w	d1,d1
00007888 B041                       		cmp.w	d1,d0
0000788A 6400 0000                  		bcc.w	locret_751E
0000788E                            
0000788E                            Platform2:
0000788E 3028 000C                  		move.w	$C(a0),d0
00007892 5140                       		subq.w	#8,d0
00007894                            
00007894                            Platform3:
00007894 3429 000C                  		move.w	$C(a1),d2
00007898 1229 0016                  		move.b	$16(a1),d1
0000789C 4881                       		ext.w	d1
0000789E D242                       		add.w	d2,d1
000078A0 5841                       		addq.w	#4,d1
000078A2 9041                       		sub.w	d1,d0
000078A4 6200 0000                  		bhi.w	locret_751E
000078A8 0C40 FFF0                  		cmpi.w	#-$10,d0
000078AC 6500 0000                  		bcs.w	locret_751E
000078B0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000078B4 6B00 0000                  		bmi.w	locret_751E
000078B8 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000078BE 6400 0000                  		bcc.w	locret_751E
000078C2 D440                       		add.w	d0,d2
000078C4 5642                       		addq.w	#3,d2
000078C6 3342 000C                  		move.w	d2,$C(a1)
000078CA 5428 0024                  		addq.b	#2,$24(a0)
000078CE                            
000078CE                            loc_74AE:
000078CE 0829 0003 0022             		btst	#3,$22(a1)
000078D4 6700                       		beq.s	loc_74DC
000078D6 7000                       		moveq	#0,d0
000078D8 1029 003D                  		move.b	$3D(a1),d0
000078DC ED48                       		lsl.w	#6,d0
000078DE 0680 00FF D000             		addi.l	#$FFD000,d0
000078E4 2440                       		movea.l	d0,a2
000078E6 08AA 0003 0022             		bclr	#3,$22(a2)
000078EC 422A 0025                  		clr.b	$25(a2)
000078F0 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
000078F6 6600                       		bne.s	loc_74DC
000078F8 552A 0024                  		subq.b	#2,$24(a2)
000078FC                            
000078FC                            loc_74DC:
000078FC 3008                       		move.w	a0,d0
000078FE 0440 D000                  		subi.w	#-$3000,d0
00007902 EC48                       		lsr.w	#6,d0
00007904 0240 007F                  		andi.w	#$7F,d0
00007908 1340 003D                  		move.b	d0,$3D(a1)
0000790C 137C 0000 0026             		move.b	#0,$26(a1)
00007912 337C 0000 0012             		move.w	#0,$12(a1)
00007918 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000791E 0829 0001 0022             		btst	#1,$22(a1)
00007924 6700                       		beq.s	loc_7512
00007926 2F08                       		move.l	a0,-(sp)
00007928 2049                       		movea.l	a1,a0
0000792A 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007930 205F                       		movea.l	(sp)+,a0
00007932                            
00007932                            loc_7512:
00007932 08E9 0003 0022             		bset	#3,$22(a1)
00007938 08E8 0003 0022             		bset	#3,$22(a0)
0000793E                            
0000793E                            locret_751E:
0000793E 4E75                       		rts	
00007940                            ; End of function PlatformObject
00007940                            
00007940                            ; ---------------------------------------------------------------------------
00007940                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007940                            ; ---------------------------------------------------------------------------
00007940                            
00007940                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007940                            
00007940                            
00007940                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007940 43F8 D000                  		lea	($FFFFD000).w,a1
00007944 4A69 0012                  		tst.w	$12(a1)
00007948 6B00 FFF4                  		bmi.w	locret_751E
0000794C 3029 0008                  		move.w	8(a1),d0
00007950 9068 0008                  		sub.w	8(a0),d0
00007954 D041                       		add.w	d1,d0
00007956 6BE6                       		bmi.s	locret_751E
00007958 D241                       		add.w	d1,d1
0000795A B041                       		cmp.w	d1,d0
0000795C 64E0                       		bcc.s	locret_751E
0000795E 0828 0000 0001             		btst	#0,1(a0)
00007964 6700                       		beq.s	loc_754A
00007966 4640                       		not.w	d0
00007968 D041                       		add.w	d1,d0
0000796A                            
0000796A                            loc_754A:
0000796A E248                       		lsr.w	#1,d0
0000796C 7600                       		moveq	#0,d3
0000796E 1632 0000                  		move.b	(a2,d0.w),d3
00007972 3028 000C                  		move.w	$C(a0),d0
00007976 9043                       		sub.w	d3,d0
00007978 6000 FF1A                  		bra.w	Platform3
0000797C                            ; End of function SlopeObject
0000797C                            
0000797C                            
0000797C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000797C                            
0000797C                            
0000797C                            Obj15_Solid:				; XREF: Obj15_SetSolid
0000797C 43F8 D000                  		lea	($FFFFD000).w,a1
00007980 4A69 0012                  		tst.w	$12(a1)
00007984 6B00 FFB8                  		bmi.w	locret_751E
00007988 3029 0008                  		move.w	8(a1),d0
0000798C 9068 0008                  		sub.w	8(a0),d0
00007990 D041                       		add.w	d1,d0
00007992 6B00 FFAA                  		bmi.w	locret_751E
00007996 D241                       		add.w	d1,d1
00007998 B041                       		cmp.w	d1,d0
0000799A 6400 FFA2                  		bcc.w	locret_751E
0000799E 3028 000C                  		move.w	$C(a0),d0
000079A2 9043                       		sub.w	d3,d0
000079A4 6000 FEEE                  		bra.w	Platform3
000079A8                            ; End of function Obj15_Solid
000079A8                            
000079A8                            ; ===========================================================================
000079A8                            
000079A8                            Obj11_Action2:				; XREF: Obj11_Index
000079A8 6100                       		bsr.s	Obj11_WalkOff
000079AA 6100 0000                  		bsr.w	DisplaySprite
000079AE 6000 0000                  		bra.w	Obj11_ChkDel
000079B2                            
000079B2                            ; ---------------------------------------------------------------------------
000079B2                            ; Subroutine allowing Sonic to walk off a bridge
000079B2                            ; ---------------------------------------------------------------------------
000079B2                            
000079B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079B2                            
000079B2                            
000079B2                            Obj11_WalkOff:				; XREF: Obj11_Action2
000079B2 7200                       		moveq	#0,d1
000079B4 1228 0028                  		move.b	$28(a0),d1
000079B8 E749                       		lsl.w	#3,d1
000079BA 3401                       		move.w	d1,d2
000079BC 5041                       		addq.w	#8,d1
000079BE 6100                       		bsr.s	ExitPlatform2
000079C0 6400                       		bcc.s	locret_75BE
000079C2 E848                       		lsr.w	#4,d0
000079C4 1140 003F                  		move.b	d0,$3F(a0)
000079C8 1028 003E                  		move.b	$3E(a0),d0
000079CC 0C00 0040                  		cmpi.b	#$40,d0
000079D0 6700                       		beq.s	loc_75B6
000079D2 5828 003E                  		addq.b	#4,$3E(a0)
000079D6                            
000079D6                            loc_75B6:
000079D6 6100 0000                  		bsr.w	Obj11_Bend
000079DA 6100 0000                  		bsr.w	Obj11_MoveSonic
000079DE                            
000079DE                            locret_75BE:
000079DE 4E75                       		rts	
000079E0                            ; End of function Obj11_WalkOff
000079E0                            
000079E0                            ; ---------------------------------------------------------------------------
000079E0                            ; Subroutine allowing Sonic to walk or jump off	a platform
000079E0                            ; ---------------------------------------------------------------------------
000079E0                            
000079E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079E0                            
000079E0                            
000079E0                            ExitPlatform:
000079E0 3401                       		move.w	d1,d2
000079E2                            
000079E2                            ExitPlatform2:
000079E2 D442                       		add.w	d2,d2
000079E4 43F8 D000                  		lea	($FFFFD000).w,a1
000079E8 0829 0001 0022             		btst	#1,$22(a1)
000079EE 6600                       		bne.s	loc_75E0
000079F0 3029 0008                  		move.w	8(a1),d0
000079F4 9068 0008                  		sub.w	8(a0),d0
000079F8 D041                       		add.w	d1,d0
000079FA 6B00                       		bmi.s	loc_75E0
000079FC B042                       		cmp.w	d2,d0
000079FE 6500                       		bcs.s	locret_75F2
00007A00                            
00007A00                            loc_75E0:
00007A00 08A9 0003 0022             		bclr	#3,$22(a1)
00007A06 117C 0002 0024             		move.b	#2,$24(a0)
00007A0C 08A8 0003 0022             		bclr	#3,$22(a0)
00007A12                            
00007A12                            locret_75F2:
00007A12 4E75                       		rts	
00007A14                            ; End of function ExitPlatform
00007A14                            
00007A14                            
00007A14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A14                            
00007A14                            
00007A14                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007A14 7000                       		moveq	#0,d0
00007A16 1028 003F                  		move.b	$3F(a0),d0
00007A1A 1030 0029                  		move.b	$29(a0,d0.w),d0
00007A1E ED48                       		lsl.w	#6,d0
00007A20 0680 00FF D000             		addi.l	#$FFD000,d0
00007A26 2440                       		movea.l	d0,a2
00007A28 43F8 D000                  		lea	($FFFFD000).w,a1
00007A2C 302A 000C                  		move.w	$C(a2),d0
00007A30 5140                       		subq.w	#8,d0
00007A32 7200                       		moveq	#0,d1
00007A34 1229 0016                  		move.b	$16(a1),d1
00007A38 9041                       		sub.w	d1,d0
00007A3A 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007A3E 4E75                       		rts	
00007A40                            ; End of function Obj11_MoveSonic
00007A40                            
00007A40                            
00007A40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A40                            
00007A40                            
00007A40                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007A40 1028 003E                  		move.b	$3E(a0),d0
00007A44 6100 B1A2                  		bsr.w	CalcSine
00007A48 3800                       		move.w	d0,d4
00007A4A 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007A50 7000                       		moveq	#0,d0
00007A52 1028 0028                  		move.b	$28(a0),d0
00007A56 E948                       		lsl.w	#4,d0
00007A58 7600                       		moveq	#0,d3
00007A5A 1628 003F                  		move.b	$3F(a0),d3
00007A5E 3403                       		move.w	d3,d2
00007A60 D640                       		add.w	d0,d3
00007A62 7A00                       		moveq	#0,d5
00007A64 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007A6A 1A35 3000                  		move.b	(a5,d3.w),d5
00007A6E 0243 000F                  		andi.w	#$F,d3
00007A72 E94B                       		lsl.w	#4,d3
00007A74 47F4 3000                  		lea	(a4,d3.w),a3
00007A78 45E8 0029                  		lea	$29(a0),a2
00007A7C                            
00007A7C                            loc_765C:
00007A7C 7000                       		moveq	#0,d0
00007A7E 101A                       		move.b	(a2)+,d0
00007A80 ED48                       		lsl.w	#6,d0
00007A82 0680 00FF D000             		addi.l	#$FFD000,d0
00007A88 2240                       		movea.l	d0,a1
00007A8A 7000                       		moveq	#0,d0
00007A8C 101B                       		move.b	(a3)+,d0
00007A8E 5240                       		addq.w	#1,d0
00007A90 C0C5                       		mulu.w	d5,d0
00007A92 C0C4                       		mulu.w	d4,d0
00007A94 4840                       		swap	d0
00007A96 D069 003C                  		add.w	$3C(a1),d0
00007A9A 3340 000C                  		move.w	d0,$C(a1)
00007A9E 51CA FFDC                  		dbf	d2,loc_765C
00007AA2 7000                       		moveq	#0,d0
00007AA4 1028 0028                  		move.b	$28(a0),d0
00007AA8 7600                       		moveq	#0,d3
00007AAA 1628 003F                  		move.b	$3F(a0),d3
00007AAE 5203                       		addq.b	#1,d3
00007AB0 9600                       		sub.b	d0,d3
00007AB2 4403                       		neg.b	d3
00007AB4 6B00                       		bmi.s	locret_76CA
00007AB6 3403                       		move.w	d3,d2
00007AB8 E94B                       		lsl.w	#4,d3
00007ABA 47F4 3000                  		lea	(a4,d3.w),a3
00007ABE D6C2                       		adda.w	d2,a3
00007AC0 5342                       		subq.w	#1,d2
00007AC2 6500                       		bcs.s	locret_76CA
00007AC4                            
00007AC4                            loc_76A4:
00007AC4 7000                       		moveq	#0,d0
00007AC6 101A                       		move.b	(a2)+,d0
00007AC8 ED48                       		lsl.w	#6,d0
00007ACA 0680 00FF D000             		addi.l	#$FFD000,d0
00007AD0 2240                       		movea.l	d0,a1
00007AD2 7000                       		moveq	#0,d0
00007AD4 1023                       		move.b	-(a3),d0
00007AD6 5240                       		addq.w	#1,d0
00007AD8 C0C5                       		mulu.w	d5,d0
00007ADA C0C4                       		mulu.w	d4,d0
00007ADC 4840                       		swap	d0
00007ADE D069 003C                  		add.w	$3C(a1),d0
00007AE2 3340 000C                  		move.w	d0,$C(a1)
00007AE6 51CA FFDC                  		dbf	d2,loc_76A4
00007AEA                            
00007AEA                            locret_76CA:
00007AEA 4E75                       		rts	
00007AEC                            ; End of function Obj11_Bend
00007AEC                            
00007AEC                            ; ===========================================================================
00007AEC                            ; ---------------------------------------------------------------------------
00007AEC                            ; GHZ bridge-bending data
00007AEC                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007AEC                            ; ---------------------------------------------------------------------------
00007AEC                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007BFC                            		even
00007BFC                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007CFC                            		even
00007CFC                            
00007CFC                            ; ===========================================================================
00007CFC                            
00007CFC                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007CFC 3028 0008                  		move.w	8(a0),d0
00007D00 0240 FF80                  		andi.w	#$FF80,d0
00007D04 3238 F700                  		move.w	($FFFFF700).w,d1
00007D08 0441 0080                  		subi.w	#$80,d1
00007D0C 0241 FF80                  		andi.w	#$FF80,d1
00007D10 9041                       		sub.w	d1,d0
00007D12 0C40 0280                  		cmpi.w	#$280,d0
00007D16 6200 0000                  		bhi.w	Obj11_DelAll
00007D1A 4E75                       		rts	
00007D1C                            ; ===========================================================================
00007D1C                            
00007D1C                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007D1C 7400                       		moveq	#0,d2
00007D1E 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007D22 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007D24 5302                       		subq.b	#1,d2		; subtract 1
00007D26 6500                       		bcs.s	Obj11_Delete
00007D28                            
00007D28                            Obj11_DelLoop:
00007D28 7000                       		moveq	#0,d0
00007D2A 101A                       		move.b	(a2)+,d0
00007D2C ED48                       		lsl.w	#6,d0
00007D2E 0680 00FF D000             		addi.l	#$FFD000,d0
00007D34 2240                       		movea.l	d0,a1
00007D36 B048                       		cmp.w	a0,d0
00007D38 6700                       		beq.s	loc_791E
00007D3A 6100 0000                  		bsr.w	DeleteObject2
00007D3E                            
00007D3E                            loc_791E:
00007D3E 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007D42                            
00007D42                            Obj11_Delete:
00007D42 6100 0000                  		bsr.w	DeleteObject
00007D46 4E75                       		rts	
00007D48                            ; ===========================================================================
00007D48                            
00007D48                            Obj11_Delete2:				; XREF: Obj11_Index
00007D48 6100 0000                  		bsr.w	DeleteObject
00007D4C 4E75                       		rts	
00007D4E                            ; ===========================================================================
00007D4E                            
00007D4E                            Obj11_Display2:				; XREF: Obj11_Index
00007D4E 6100 0000                  		bsr.w	DisplaySprite
00007D52 4E75                       		rts	
00007D54                            ; ===========================================================================
00007D54                            ; ---------------------------------------------------------------------------
00007D54                            ; Sprite mappings - GHZ	bridge
00007D54                            ; ---------------------------------------------------------------------------
00007D54                            Map_obj11:
00007D54                            	include "_maps\obj11.asm"
00007D54                            ; ---------------------------------------------------------------------------
00007D54                            ; Sprite mappings - GHZ	bridge
00007D54                            ; ---------------------------------------------------------------------------
00007D54 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007D58 0000                       		dc.w byte_794B-Map_obj11
00007D5A 01                         byte_793A:	dc.b 1
00007D5B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007D60 02                         byte_7940:	dc.b 2
00007D61 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007D66 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007D6B 01                         byte_794B:	dc.b 1
00007D6C FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007D72 00                         		even
00007D72 00                         		even
00007D72                            
00007D72                            ; ===========================================================================
00007D72                            ; ---------------------------------------------------------------------------
00007D72                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007D72                            ;	    - spiked ball on a chain (SBZ)
00007D72                            ; ---------------------------------------------------------------------------
00007D72                            
00007D72                            Obj15:					; XREF: Obj_Index
00007D72 7000                       		moveq	#0,d0
00007D74 1028 0024                  		move.b	$24(a0),d0
00007D78 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007D7C 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007D80                            ; ===========================================================================
00007D80 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007D84 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007D88 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007D8C 0000                       		dc.w Obj15_Action-Obj15_Index
00007D8E                            ; ===========================================================================
00007D8E                            
00007D8E                            Obj15_Main:				; XREF: Obj15_Index
00007D8E 5428 0024                  		addq.b	#2,$24(a0)
00007D92 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007D9A 317C 4380 0002             		move.w	#$4380,2(a0)
00007DA0 117C 0004 0001             		move.b	#4,1(a0)
00007DA6 117C 0003 0018             		move.b	#3,$18(a0)
00007DAC 117C 0018 0019             		move.b	#$18,$19(a0)
00007DB2 117C 0008 0016             		move.b	#8,$16(a0)
00007DB8 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007DBE 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007DC4 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007DCA 6600                       		bne.s	Obj15_NotSLZ
00007DCC 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007DD4 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007DDA 117C 0020 0019             		move.b	#$20,$19(a0)
00007DE0 117C 0010 0016             		move.b	#$10,$16(a0)
00007DE6 117C 0099 0020             		move.b	#$99,$20(a0)
00007DEC                            
00007DEC                            Obj15_NotSLZ:
00007DEC 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007DF2 6600                       		bne.s	Obj15_SetLength
00007DF4 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007DFC 317C 0391 0002             		move.w	#$391,2(a0)
00007E02 117C 0018 0019             		move.b	#$18,$19(a0)
00007E08 117C 0018 0016             		move.b	#$18,$16(a0)
00007E0E 117C 0086 0020             		move.b	#$86,$20(a0)
00007E14 117C 000C 0024             		move.b	#$C,$24(a0)
00007E1A                            
00007E1A                            Obj15_SetLength:
00007E1A 1810                       		move.b	0(a0),d4
00007E1C 7200                       		moveq	#0,d1
00007E1E 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00007E22 1212                       		move.b	(a2),d1		; move a2 to d1
00007E24 3F01                       		move.w	d1,-(sp)
00007E26 0241 000F                  		andi.w	#$F,d1
00007E2A 14FC 0000                  		move.b	#0,(a2)+
00007E2E 3601                       		move.w	d1,d3
00007E30 E94B                       		lsl.w	#4,d3
00007E32 5003                       		addq.b	#8,d3
00007E34 1143 003C                  		move.b	d3,$3C(a0)
00007E38 5103                       		subq.b	#8,d3
00007E3A 4A28 001A                  		tst.b	$1A(a0)
00007E3E 6700                       		beq.s	Obj15_MakeChain
00007E40 5003                       		addq.b	#8,d3
00007E42 5341                       		subq.w	#1,d1
00007E44                            
00007E44                            Obj15_MakeChain:
00007E44 6100 0000                  		bsr.w	SingleObjLoad
00007E48 6600                       		bne.s	loc_7A92
00007E4A 5228 0028                  		addq.b	#1,$28(a0)
00007E4E 3A09                       		move.w	a1,d5
00007E50 0445 D000                  		subi.w	#-$3000,d5
00007E54 EC4D                       		lsr.w	#6,d5
00007E56 0245 007F                  		andi.w	#$7F,d5
00007E5A 14C5                       		move.b	d5,(a2)+
00007E5C 137C 000A 0024             		move.b	#$A,$24(a1)
00007E62 1284                       		move.b	d4,0(a1)	; load swinging	object
00007E64 2368 0004 0004             		move.l	4(a0),4(a1)
00007E6A 3368 0002 0002             		move.w	2(a0),2(a1)
00007E70 08A9 0006 0002             		bclr	#6,2(a1)
00007E76 137C 0004 0001             		move.b	#4,1(a1)
00007E7C 137C 0004 0018             		move.b	#4,$18(a1)
00007E82 137C 0008 0019             		move.b	#8,$19(a1)
00007E88 137C 0001 001A             		move.b	#1,$1A(a1)
00007E8E 1343 003C                  		move.b	d3,$3C(a1)
00007E92 0403 0010                  		subi.b	#$10,d3
00007E96 6400                       		bcc.s	loc_7A8E
00007E98 137C 0002 001A             		move.b	#2,$1A(a1)
00007E9E 137C 0003 0018             		move.b	#3,$18(a1)
00007EA4 08E9 0006 0002             		bset	#6,2(a1)
00007EAA                            
00007EAA                            loc_7A8E:
00007EAA 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00007EAE                            
00007EAE                            loc_7A92:
00007EAE 3A08                       		move.w	a0,d5
00007EB0 0445 D000                  		subi.w	#-$3000,d5
00007EB4 EC4D                       		lsr.w	#6,d5
00007EB6 0245 007F                  		andi.w	#$7F,d5
00007EBA 14C5                       		move.b	d5,(a2)+
00007EBC 317C 4080 0026             		move.w	#$4080,$26(a0)
00007EC2 317C FE00 003E             		move.w	#-$200,$3E(a0)
00007EC8 321F                       		move.w	(sp)+,d1
00007ECA 0801 0004                  		btst	#4,d1		; is object type $8X ?
00007ECE 6700                       		beq.s	loc_7AD4	; if not, branch
00007ED0 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00007ED8 317C 43AA 0002             		move.w	#$43AA,2(a0)
00007EDE 117C 0001 001A             		move.b	#1,$1A(a0)
00007EE4 117C 0002 0018             		move.b	#2,$18(a0)
00007EEA 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00007EF0                            
00007EF0                            loc_7AD4:
00007EF0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00007EF6 6700                       		beq.s	Obj15_Action	; if yes, branch
00007EF8                            
00007EF8                            Obj15_SetSolid:				; XREF: Obj15_Index
00007EF8 7200                       		moveq	#0,d1
00007EFA 1228 0019                  		move.b	$19(a0),d1
00007EFE 7600                       		moveq	#0,d3
00007F00 1628 0016                  		move.b	$16(a0),d3
00007F04 6100 FA76                  		bsr.w	Obj15_Solid
00007F08                            
00007F08                            Obj15_Action:				; XREF: Obj15_Index
00007F08 6100 0000                  		bsr.w	Obj15_Move
00007F0C 6100 0000                  		bsr.w	DisplaySprite
00007F10 6000 0000                  		bra.w	Obj15_ChkDel
00007F14                            ; ===========================================================================
00007F14                            
00007F14                            Obj15_Action2:				; XREF: Obj15_Index
00007F14 7200                       		moveq	#0,d1
00007F16 1228 0019                  		move.b	$19(a0),d1
00007F1A 6100 FAC4                  		bsr.w	ExitPlatform
00007F1E 3F28 0008                  		move.w	8(a0),-(sp)
00007F22 6100 0000                  		bsr.w	Obj15_Move
00007F26 341F                       		move.w	(sp)+,d2
00007F28 7600                       		moveq	#0,d3
00007F2A 1628 0016                  		move.b	$16(a0),d3
00007F2E 5203                       		addq.b	#1,d3
00007F30 6100 0000                  		bsr.w	MvSonicOnPtfm
00007F34 6100 0000                  		bsr.w	DisplaySprite
00007F38 6000 0000                  		bra.w	Obj15_ChkDel
00007F3C                            
00007F3C 4E75                       		rts
00007F3E                            
00007F3E                            ; ---------------------------------------------------------------------------
00007F3E                            ; Subroutine to	change Sonic's position with a platform
00007F3E                            ; ---------------------------------------------------------------------------
00007F3E                            
00007F3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F3E                            
00007F3E                            
00007F3E                            MvSonicOnPtfm:
00007F3E 43F8 D000                  		lea	($FFFFD000).w,a1
00007F42 3028 000C                  		move.w	$C(a0),d0
00007F46 9043                       		sub.w	d3,d0
00007F48 6000                       		bra.s	MvSonic2
00007F4A                            ; End of function MvSonicOnPtfm
00007F4A                            
00007F4A                            ; ---------------------------------------------------------------------------
00007F4A                            ; Subroutine to	change Sonic's position with a platform
00007F4A                            ; ---------------------------------------------------------------------------
00007F4A                            
00007F4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F4A                            
00007F4A                            
00007F4A                            MvSonicOnPtfm2:
00007F4A 43F8 D000                  		lea	($FFFFD000).w,a1
00007F4E 3028 000C                  		move.w	$C(a0),d0
00007F52 0440 0009                  		subi.w	#9,d0
00007F56                            
00007F56                            MvSonic2:
00007F56 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007F5A 6B00                       		bmi.s	locret_7B62
00007F5C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00007F62 6400                       		bcc.s	locret_7B62
00007F64 4A78 FE08                  		tst.w	($FFFFFE08).w
00007F68 6600                       		bne.s	locret_7B62
00007F6A 7200                       		moveq	#0,d1
00007F6C 1229 0016                  		move.b	$16(a1),d1
00007F70 9041                       		sub.w	d1,d0
00007F72 3340 000C                  		move.w	d0,$C(a1)
00007F76 9468 0008                  		sub.w	8(a0),d2
00007F7A 9569 0008                  		sub.w	d2,8(a1)
00007F7E                            
00007F7E                            locret_7B62:
00007F7E 4E75                       		rts	
00007F80                            ; End of function MvSonicOnPtfm2
00007F80                            
00007F80                            
00007F80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F80                            
00007F80                            
00007F80                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00007F80 1038 FE78                  		move.b	($FFFFFE78).w,d0
00007F84 323C 0080                  		move.w	#$80,d1
00007F88 0828 0000 0022             		btst	#0,$22(a0)
00007F8E 6700                       		beq.s	loc_7B78
00007F90 4440                       		neg.w	d0
00007F92 D041                       		add.w	d1,d0
00007F94                            
00007F94                            loc_7B78:
00007F94 6000                       		bra.s	Obj15_Move2
00007F96                            ; End of function Obj15_Move
00007F96                            
00007F96                            
00007F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F96                            
00007F96                            
00007F96                            Obj48_Move:				; XREF: Obj48_Display2
00007F96 4A28 003D                  		tst.b	$3D(a0)
00007F9A 6600                       		bne.s	loc_7B9C
00007F9C 3028 003E                  		move.w	$3E(a0),d0
00007FA0 5040                       		addq.w	#8,d0
00007FA2 3140 003E                  		move.w	d0,$3E(a0)
00007FA6 D168 0026                  		add.w	d0,$26(a0)
00007FAA 0C40 0200                  		cmpi.w	#$200,d0
00007FAE 6600                       		bne.s	loc_7BB6
00007FB0 117C 0001 003D             		move.b	#1,$3D(a0)
00007FB6 6000                       		bra.s	loc_7BB6
00007FB8                            ; ===========================================================================
00007FB8                            
00007FB8                            loc_7B9C:
00007FB8 3028 003E                  		move.w	$3E(a0),d0
00007FBC 5140                       		subq.w	#8,d0
00007FBE 3140 003E                  		move.w	d0,$3E(a0)
00007FC2 D168 0026                  		add.w	d0,$26(a0)
00007FC6 0C40 FE00                  		cmpi.w	#-$200,d0
00007FCA 6600                       		bne.s	loc_7BB6
00007FCC 117C 0000 003D             		move.b	#0,$3D(a0)
00007FD2                            
00007FD2                            loc_7BB6:
00007FD2 1028 0026                  		move.b	$26(a0),d0
00007FD6                            ; End of function Obj48_Move
00007FD6                            
00007FD6                            
00007FD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FD6                            
00007FD6                            
00007FD6                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00007FD6 6100 AC10                  		bsr.w	CalcSine
00007FDA 3428 0038                  		move.w	$38(a0),d2
00007FDE 3628 003A                  		move.w	$3A(a0),d3
00007FE2 45E8 0028                  		lea	$28(a0),a2
00007FE6 7C00                       		moveq	#0,d6
00007FE8 1C1A                       		move.b	(a2)+,d6
00007FEA                            
00007FEA                            loc_7BCE:
00007FEA 7800                       		moveq	#0,d4
00007FEC 181A                       		move.b	(a2)+,d4
00007FEE ED4C                       		lsl.w	#6,d4
00007FF0 0684 00FF D000             		addi.l	#$FFD000,d4
00007FF6 2244                       		movea.l	d4,a1
00007FF8 7800                       		moveq	#0,d4
00007FFA 1829 003C                  		move.b	$3C(a1),d4
00007FFE 2A04                       		move.l	d4,d5
00008000 C9C0                       		muls.w	d0,d4
00008002 E084                       		asr.l	#8,d4
00008004 CBC1                       		muls.w	d1,d5
00008006 E085                       		asr.l	#8,d5
00008008 D842                       		add.w	d2,d4
0000800A DA43                       		add.w	d3,d5
0000800C 3344 000C                  		move.w	d4,$C(a1)
00008010 3345 0008                  		move.w	d5,8(a1)
00008014 51CE FFD4                  		dbf	d6,loc_7BCE
00008018 4E75                       		rts	
0000801A                            ; End of function Obj15_Move2
0000801A                            
0000801A                            ; ===========================================================================
0000801A                            
0000801A                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
0000801A 3028 003A                  		move.w	$3A(a0),d0
0000801E 0240 FF80                  		andi.w	#$FF80,d0
00008022 3238 F700                  		move.w	($FFFFF700).w,d1
00008026 0441 0080                  		subi.w	#$80,d1
0000802A 0241 FF80                  		andi.w	#$FF80,d1
0000802E 9041                       		sub.w	d1,d0
00008030 0C40 0280                  		cmpi.w	#$280,d0
00008034 6200 0000                  		bhi.w	Obj15_DelAll
00008038 4E75                       		rts	
0000803A                            ; ===========================================================================
0000803A                            
0000803A                            Obj15_DelAll:				; XREF: Obj15_ChkDel
0000803A 7400                       		moveq	#0,d2
0000803C 45E8 0028                  		lea	$28(a0),a2
00008040 141A                       		move.b	(a2)+,d2
00008042                            
00008042                            Obj15_DelLoop:
00008042 7000                       		moveq	#0,d0
00008044 101A                       		move.b	(a2)+,d0
00008046 ED48                       		lsl.w	#6,d0
00008048 0680 00FF D000             		addi.l	#$FFD000,d0
0000804E 2240                       		movea.l	d0,a1
00008050 6100 0000                  		bsr.w	DeleteObject2
00008054 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00008058 4E75                       		rts	
0000805A                            ; ===========================================================================
0000805A                            
0000805A                            Obj15_Delete:				; XREF: Obj15_Index
0000805A 6100 0000                  		bsr.w	DeleteObject
0000805E 4E75                       		rts	
00008060                            ; ===========================================================================
00008060                            
00008060                            Obj15_Display:				; XREF: Obj15_Index
00008060 6000 0000                  		bra.w	DisplaySprite
00008064                            ; ===========================================================================
00008064                            ; ---------------------------------------------------------------------------
00008064                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008064                            ; ---------------------------------------------------------------------------
00008064                            Map_obj15:
00008064                            	include "_maps\obj15ghz.asm"
00008064                            ; ---------------------------------------------------------------------------
00008064                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008064                            ; ---------------------------------------------------------------------------
00008064 0000                       		dc.w byte_7C4E-Map_obj15
00008066 0000                       		dc.w byte_7C59-Map_obj15
00008068 0000                       		dc.w byte_7C5F-Map_obj15
0000806A 02                         byte_7C4E:	dc.b 2
0000806B F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008070 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008075 01                         byte_7C59:	dc.b 1
00008076 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000807B 01                         byte_7C5F:	dc.b 1
0000807C F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008082 00                         		even
00008082 00                         		even
00008082                            
00008082                            ; ---------------------------------------------------------------------------
00008082                            ; Sprite mappings - SLZ	swinging platforms
00008082                            ; ---------------------------------------------------------------------------
00008082                            Map_obj15a:
00008082                            	include "_maps\obj15slz.asm"
00008082                            ; ---------------------------------------------------------------------------
00008082                            ; Sprite mappings - SLZ	swinging platforms
00008082                            ; ---------------------------------------------------------------------------
00008082 0000                       		dc.w byte_7C6C-Map_obj15a
00008084 0000                       		dc.w byte_7C95-Map_obj15a
00008086 0000                       		dc.w byte_7C9B-Map_obj15a
00008088 08                         byte_7C6C:	dc.b 8
00008089 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000808E F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008093 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008098 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
0000809D 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000080A2 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
000080A7 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000080AC 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000080B1 01                         byte_7C95:	dc.b 1
000080B2 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000080B7 01                         byte_7C9B:	dc.b 1
000080B8 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000080BE 00                         		even
000080BE 00                         		even
000080BE                            
000080BE                            ; ===========================================================================
000080BE                            ; ---------------------------------------------------------------------------
000080BE                            ; Object 17 - helix of spikes on a pole	(GHZ)
000080BE                            ; ---------------------------------------------------------------------------
000080BE                            
000080BE                            Obj17:					; XREF: Obj_Index
000080BE 7000                       		moveq	#0,d0
000080C0 1028 0024                  		move.b	$24(a0),d0
000080C4 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
000080C8 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
000080CC                            ; ===========================================================================
000080CC 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
000080CE 0000                       		dc.w Obj17_Action-Obj17_Index
000080D0 0000                       		dc.w Obj17_Action-Obj17_Index
000080D2 0000                       		dc.w Obj17_Delete-Obj17_Index
000080D4 0000                       		dc.w Obj17_Display-Obj17_Index
000080D6                            ; ===========================================================================
000080D6                            
000080D6                            Obj17_Main:				; XREF: Obj17_Index
000080D6 5428 0024                  		addq.b	#2,$24(a0)
000080DA 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
000080E2 317C 4398 0002             		move.w	#$4398,2(a0)
000080E8 117C 0007 0022             		move.b	#7,$22(a0)
000080EE 117C 0004 0001             		move.b	#4,1(a0)
000080F4 117C 0003 0018             		move.b	#3,$18(a0)
000080FA 117C 0008 0019             		move.b	#8,$19(a0)
00008100 3428 000C                  		move.w	$C(a0),d2
00008104 3628 0008                  		move.w	8(a0),d3
00008108 1810                       		move.b	0(a0),d4
0000810A 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000810E 7200                       		moveq	#0,d1
00008110 1212                       		move.b	(a2),d1		; move a2 to d1
00008112 14FC 0000                  		move.b	#0,(a2)+
00008116 3001                       		move.w	d1,d0
00008118 E248                       		lsr.w	#1,d0
0000811A E948                       		lsl.w	#4,d0
0000811C 9640                       		sub.w	d0,d3
0000811E 5501                       		subq.b	#2,d1
00008120 6500                       		bcs.s	Obj17_Action
00008122 7C00                       		moveq	#0,d6
00008124                            
00008124                            Obj17_MakeHelix:
00008124 6100 0000                  		bsr.w	SingleObjLoad
00008128 6600                       		bne.s	Obj17_Action
0000812A 5228 0028                  		addq.b	#1,$28(a0)
0000812E 3A09                       		move.w	a1,d5
00008130 0445 D000                  		subi.w	#$D000,d5
00008134 EC4D                       		lsr.w	#6,d5
00008136 0245 007F                  		andi.w	#$7F,d5
0000813A 14C5                       		move.b	d5,(a2)+
0000813C 137C 0008 0024             		move.b	#8,$24(a1)
00008142 1284                       		move.b	d4,0(a1)
00008144 3342 000C                  		move.w	d2,$C(a1)
00008148 3343 0008                  		move.w	d3,8(a1)
0000814C 2368 0004 0004             		move.l	4(a0),4(a1)
00008152 337C 4398 0002             		move.w	#$4398,2(a1)
00008158 137C 0004 0001             		move.b	#4,1(a1)
0000815E 137C 0003 0018             		move.b	#3,$18(a1)
00008164 137C 0008 0019             		move.b	#8,$19(a1)
0000816A 1346 003E                  		move.b	d6,$3E(a1)
0000816E 5206                       		addq.b	#1,d6
00008170 0206 0007                  		andi.b	#7,d6
00008174 0643 0010                  		addi.w	#$10,d3
00008178 B668 0008                  		cmp.w	8(a0),d3
0000817C 6600                       		bne.s	loc_7D78
0000817E 1146 003E                  		move.b	d6,$3E(a0)
00008182 5206                       		addq.b	#1,d6
00008184 0206 0007                  		andi.b	#7,d6
00008188 0643 0010                  		addi.w	#$10,d3
0000818C 5228 0028                  		addq.b	#1,$28(a0)
00008190                            
00008190                            loc_7D78:
00008190 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008194                            
00008194                            Obj17_Action:				; XREF: Obj17_Index
00008194 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008198 6100 0000                  		bsr.w	DisplaySprite
0000819C 6000 0000                  		bra.w	Obj17_ChkDel
000081A0                            
000081A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081A0                            
000081A0                            
000081A0                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
000081A0 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
000081A4 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
000081AA D028 003E                  		add.b	$3E(a0),d0
000081AE 0200 0007                  		andi.b	#7,d0
000081B2 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
000081B6 6600                       		bne.s	locret_7DA6
000081B8 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
000081BE                            
000081BE                            locret_7DA6:
000081BE 4E75                       		rts	
000081C0                            ; End of function Obj17_RotateSpikes
000081C0                            
000081C0                            ; ===========================================================================
000081C0                            
000081C0                            Obj17_ChkDel:				; XREF: Obj17_Action
000081C0 3028 0008                  		move.w	8(a0),d0
000081C4 0240 FF80                  		andi.w	#$FF80,d0
000081C8 3238 F700                  		move.w	($FFFFF700).w,d1
000081CC 0441 0080                  		subi.w	#$80,d1
000081D0 0241 FF80                  		andi.w	#$FF80,d1
000081D4 9041                       		sub.w	d1,d0
000081D6 0C40 0280                  		cmpi.w	#$280,d0
000081DA 6200 0000                  		bhi.w	Obj17_DelAll
000081DE 4E75                       		rts	
000081E0                            ; ===========================================================================
000081E0                            
000081E0                            Obj17_DelAll:				; XREF: Obj17_ChkDel
000081E0 7400                       		moveq	#0,d2
000081E2 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000081E6 141A                       		move.b	(a2)+,d2	; move a2 to d2
000081E8 5502                       		subq.b	#2,d2
000081EA 6500                       		bcs.s	Obj17_Delete
000081EC                            
000081EC                            Obj17_DelLoop:
000081EC 7000                       		moveq	#0,d0
000081EE 101A                       		move.b	(a2)+,d0
000081F0 ED48                       		lsl.w	#6,d0
000081F2 0680 00FF D000             		addi.l	#$FFD000,d0
000081F8 2240                       		movea.l	d0,a1
000081FA 6100 0000                  		bsr.w	DeleteObject2	; delete object
000081FE 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008202                            
00008202                            Obj17_Delete:				; XREF: Obj17_Index
00008202 6100 0000                  		bsr.w	DeleteObject
00008206 4E75                       		rts	
00008208                            ; ===========================================================================
00008208                            
00008208                            Obj17_Display:				; XREF: Obj17_Index
00008208 6100 FF96                  		bsr.w	Obj17_RotateSpikes
0000820C 6000 0000                  		bra.w	DisplaySprite
00008210                            ; ===========================================================================
00008210                            ; ---------------------------------------------------------------------------
00008210                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008210                            ; ---------------------------------------------------------------------------
00008210                            Map_obj17:
00008210                            	include "_maps\obj17.asm"
00008210                            ; ---------------------------------------------------------------------------
00008210                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008210                            ; ---------------------------------------------------------------------------
00008210 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008214 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00008218 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
0000821C 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008220 01                         byte_7E08:	dc.b 1
00008221 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008226 01                         byte_7E0E:	dc.b 1
00008227 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
0000822C 01                         byte_7E14:	dc.b 1
0000822D F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008232 01                         byte_7E1A:	dc.b 1
00008233 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00008238 01                         byte_7E20:	dc.b 1
00008239 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
0000823E 01                         byte_7E26:	dc.b 1
0000823F 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008244 01                         byte_7E2C:	dc.b 1
00008245 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
0000824A                            		even
0000824A                            		even
0000824A                            
0000824A                            ; ===========================================================================
0000824A                            ; ---------------------------------------------------------------------------
0000824A                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
0000824A                            ; ---------------------------------------------------------------------------
0000824A                            
0000824A                            Obj18:					; XREF: Obj_Index
0000824A 7000                       		moveq	#0,d0
0000824C 1028 0024                  		move.b	$24(a0),d0
00008250 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008254 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008258                            ; ===========================================================================
00008258 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
0000825A 0000                       		dc.w Obj18_Solid-Obj18_Index
0000825C 0000                       		dc.w Obj18_Action2-Obj18_Index
0000825E 0000                       		dc.w Obj18_Delete-Obj18_Index
00008260 0000                       		dc.w Obj18_Action-Obj18_Index
00008262                            ; ===========================================================================
00008262                            
00008262                            Obj18_Main:				; XREF: Obj18_Index
00008262 5428 0024                  		addq.b	#2,$24(a0)
00008266 317C 4000 0002             		move.w	#$4000,2(a0)
0000826C 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008274 117C 0020 0019             		move.b	#$20,$19(a0)
0000827A 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008280 6600                       		bne.s	Obj18_NotSYZ
00008282 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
0000828A 117C 0020 0019             		move.b	#$20,$19(a0)
00008290                            
00008290                            Obj18_NotSYZ:
00008290 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008296 6600                       		bne.s	Obj18_NotSLZ
00008298 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
000082A0 117C 0020 0019             		move.b	#$20,$19(a0)
000082A6 317C 4000 0002             		move.w	#$4000,2(a0)
000082AC 117C 0003 0028             		move.b	#3,$28(a0)
000082B2                            
000082B2                            Obj18_NotSLZ:
000082B2 117C 0004 0001             		move.b	#4,1(a0)
000082B8 117C 0004 0018             		move.b	#4,$18(a0)
000082BE 3168 000C 002C             		move.w	$C(a0),$2C(a0)
000082C4 3168 000C 0034             		move.w	$C(a0),$34(a0)
000082CA 3168 0008 0032             		move.w	8(a0),$32(a0)
000082D0 317C 0080 0026             		move.w	#$80,$26(a0)
000082D6 7200                       		moveq	#0,d1
000082D8 1028 0028                  		move.b	$28(a0),d0
000082DC 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
000082E0 6600                       		bne.s	Obj18_SetFrame	; if not, branch
000082E2 5201                       		addq.b	#1,d1		; use frame #1
000082E4 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
000082EA                            
000082EA                            Obj18_SetFrame:
000082EA 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
000082EE                            
000082EE                            Obj18_Solid:				; XREF: Obj18_Index
000082EE 4A28 0038                  		tst.b	$38(a0)
000082F2 6700                       		beq.s	loc_7EE0
000082F4 5928 0038                  		subq.b	#4,$38(a0)
000082F8                            
000082F8                            loc_7EE0:
000082F8 7200                       		moveq	#0,d1
000082FA 1228 0019                  		move.b	$19(a0),d1
000082FE 6100 F56C                  		bsr.w	PlatformObject
00008302                            
00008302                            Obj18_Action:				; XREF: Obj18_Index
00008302 6100 0000                  		bsr.w	Obj18_Move
00008306 6100 0000                  		bsr.w	Obj18_Nudge
0000830A 6100 0000                  		bsr.w	DisplaySprite
0000830E 6000 0000                  		bra.w	Obj18_ChkDel
00008312                            ; ===========================================================================
00008312                            
00008312                            Obj18_Action2:				; XREF: Obj18_Index
00008312 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00008318 6700                       		beq.s	loc_7F06
0000831A 5828 0038                  		addq.b	#4,$38(a0)
0000831E                            
0000831E                            loc_7F06:
0000831E 7200                       		moveq	#0,d1
00008320 1228 0019                  		move.b	$19(a0),d1
00008324 6100 F6BA                  		bsr.w	ExitPlatform
00008328 3F28 0008                  		move.w	8(a0),-(sp)
0000832C 6100 0000                  		bsr.w	Obj18_Move
00008330 6100 0000                  		bsr.w	Obj18_Nudge
00008334 341F                       		move.w	(sp)+,d2
00008336 6100 FC12                  		bsr.w	MvSonicOnPtfm2
0000833A 6100 0000                  		bsr.w	DisplaySprite
0000833E 6000 0000                  		bra.w	Obj18_ChkDel
00008342                            
00008342 4E75                       		rts
00008344                            
00008344                            ; ---------------------------------------------------------------------------
00008344                            ; Subroutine to	move platform slightly when you	stand on it
00008344                            ; ---------------------------------------------------------------------------
00008344                            
00008344                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008344                            
00008344                            
00008344                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00008344 1028 0038                  		move.b	$38(a0),d0
00008348 6100 A89E                  		bsr.w	CalcSine
0000834C 323C 0400                  		move.w	#$400,d1
00008350 C1C1                       		muls.w	d1,d0
00008352 4840                       		swap	d0
00008354 D068 002C                  		add.w	$2C(a0),d0
00008358 3140 000C                  		move.w	d0,$C(a0)
0000835C 4E75                       		rts	
0000835E                            ; End of function Obj18_Nudge
0000835E                            
0000835E                            ; ---------------------------------------------------------------------------
0000835E                            ; Subroutine to	move platforms
0000835E                            ; ---------------------------------------------------------------------------
0000835E                            
0000835E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000835E                            
0000835E                            
0000835E                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
0000835E 7000                       		moveq	#0,d0
00008360 1028 0028                  		move.b	$28(a0),d0
00008364 0240 000F                  		andi.w	#$F,d0
00008368 D040                       		add.w	d0,d0
0000836A 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
0000836E 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00008372                            ; End of function Obj18_Move
00008372                            
00008372                            ; ===========================================================================
00008372 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00008376 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
0000837A 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
0000837E 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00008382 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00008386 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
0000838A 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
0000838C                            ; ===========================================================================
0000838C                            
0000838C                            Obj18_Type00:
0000838C 4E75                       		rts			; platform 00 doesn't move
0000838E                            ; ===========================================================================
0000838E                            
0000838E                            Obj18_Type05:
0000838E 3028 0032                  		move.w	$32(a0),d0
00008392 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008396 4401                       		neg.b	d1		; reverse platform-motion
00008398 0601 0040                  		addi.b	#$40,d1
0000839C 6000                       		bra.s	Obj18_01_Move
0000839E                            ; ===========================================================================
0000839E                            
0000839E                            Obj18_Type01:
0000839E 3028 0032                  		move.w	$32(a0),d0
000083A2 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000083A6 0401 0040                  		subi.b	#$40,d1
000083AA                            
000083AA                            Obj18_01_Move:
000083AA 4881                       		ext.w	d1
000083AC D041                       		add.w	d1,d0
000083AE 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000083B2 6000 0000                  		bra.w	Obj18_ChgMotion
000083B6                            ; ===========================================================================
000083B6                            
000083B6                            Obj18_Type0C:
000083B6 3028 0034                  		move.w	$34(a0),d0
000083BA 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000083BE 4401                       		neg.b	d1		; reverse platform-motion
000083C0 0601 0030                  		addi.b	#$30,d1
000083C4 6000                       		bra.s	Obj18_02_Move
000083C6                            ; ===========================================================================
000083C6                            
000083C6                            Obj18_Type0B:
000083C6 3028 0034                  		move.w	$34(a0),d0
000083CA 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000083CE 0401 0030                  		subi.b	#$30,d1
000083D2 6000                       		bra.s	Obj18_02_Move
000083D4                            ; ===========================================================================
000083D4                            
000083D4                            Obj18_Type06:
000083D4 3028 0034                  		move.w	$34(a0),d0
000083D8 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000083DC 4401                       		neg.b	d1		; reverse platform-motion
000083DE 0601 0040                  		addi.b	#$40,d1
000083E2 6000                       		bra.s	Obj18_02_Move
000083E4                            ; ===========================================================================
000083E4                            
000083E4                            Obj18_Type02:
000083E4 3028 0034                  		move.w	$34(a0),d0
000083E8 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000083EC 0401 0040                  		subi.b	#$40,d1
000083F0                            
000083F0                            Obj18_02_Move:
000083F0 4881                       		ext.w	d1
000083F2 D041                       		add.w	d1,d0
000083F4 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000083F8 6000 0000                  		bra.w	Obj18_ChgMotion
000083FC                            ; ===========================================================================
000083FC                            
000083FC                            Obj18_Type03:
000083FC 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008400 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008402 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00008408 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
0000840A 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008410                            
00008410                            Obj18_03_NoMove:
00008410 4E75                       		rts	
00008412                            ; ===========================================================================
00008412                            
00008412                            Obj18_03_Wait:
00008412 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008416 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00008418 317C 0020 003A             		move.w	#32,$3A(a0)
0000841E 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008422 4E75                       		rts	
00008424                            ; ===========================================================================
00008424                            
00008424                            Obj18_Type04:
00008424 4A68 003A                  		tst.w	$3A(a0)
00008428 6700                       		beq.s	loc_8048
0000842A 5368 003A                  		subq.w	#1,$3A(a0)
0000842E 6600                       		bne.s	loc_8048
00008430 0828 0003 0022             		btst	#3,$22(a0)
00008436 6700                       		beq.s	loc_8042
00008438 08E9 0001 0022             		bset	#1,$22(a1)
0000843E 08A9 0003 0022             		bclr	#3,$22(a1)
00008444 137C 0002 0024             		move.b	#2,$24(a1)
0000844A 08A8 0003 0022             		bclr	#3,$22(a0)
00008450 4228 0025                  		clr.b	$25(a0)
00008454 3368 0012 0012             		move.w	$12(a0),$12(a1)
0000845A                            
0000845A                            loc_8042:
0000845A 117C 0008 0024             		move.b	#8,$24(a0)
00008460                            
00008460                            loc_8048:
00008460 2628 002C                  		move.l	$2C(a0),d3
00008464 3028 0012                  		move.w	$12(a0),d0
00008468 48C0                       		ext.l	d0
0000846A E180                       		asl.l	#8,d0
0000846C D680                       		add.l	d0,d3
0000846E 2143 002C                  		move.l	d3,$2C(a0)
00008472 0668 0038 0012             		addi.w	#$38,$12(a0)
00008478 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000847C 0640 00E0                  		addi.w	#$E0,d0
00008480 B068 002C                  		cmp.w	$2C(a0),d0
00008484 6400                       		bcc.s	locret_8074
00008486 117C 0006 0024             		move.b	#6,$24(a0)
0000848C                            
0000848C                            locret_8074:
0000848C 4E75                       		rts	
0000848E                            ; ===========================================================================
0000848E                            
0000848E                            Obj18_Type07:
0000848E 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008492 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008494 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008498 7000                       		moveq	#0,d0
0000849A 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
0000849E E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000084A0 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000084A4 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
000084A6 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000084AC                            
000084AC                            Obj18_07_NoMove:
000084AC 4E75                       		rts	
000084AE                            ; ===========================================================================
000084AE                            
000084AE                            Obj18_07_Wait:
000084AE 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000084B2 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000084B4 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000084B8 4E75                       		rts	
000084BA                            ; ===========================================================================
000084BA                            
000084BA                            Obj18_Type08:
000084BA 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000084BE 3028 0034                  		move.w	$34(a0),d0
000084C2 0440 0200                  		subi.w	#$200,d0
000084C6 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000084CA 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000084CC 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
000084D0                            
000084D0                            Obj18_08_NoStop:
000084D0 4E75                       		rts	
000084D2                            ; ===========================================================================
000084D2                            
000084D2                            Obj18_Type0A:
000084D2 3028 0034                  		move.w	$34(a0),d0
000084D6 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000084DA 0401 0040                  		subi.b	#$40,d1
000084DE 4881                       		ext.w	d1
000084E0 E241                       		asr.w	#1,d1
000084E2 D041                       		add.w	d1,d0
000084E4 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000084E8                            
000084E8                            Obj18_ChgMotion:
000084E8 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
000084EE 4E75                       		rts	
000084F0                            ; ===========================================================================
000084F0                            
000084F0                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
000084F0 3028 0032                  		move.w	$32(a0),d0
000084F4 0240 FF80                  		andi.w	#$FF80,d0
000084F8 3238 F700                  		move.w	($FFFFF700).w,d1
000084FC 0441 0080                  		subi.w	#$80,d1
00008500 0241 FF80                  		andi.w	#$FF80,d1
00008504 9041                       		sub.w	d1,d0
00008506 0C40 0280                  		cmpi.w	#$280,d0
0000850A 6200                       		bhi.s	Obj18_Delete
0000850C 4E75                       		rts	
0000850E                            ; ===========================================================================
0000850E                            
0000850E                            Obj18_Delete:				; XREF: Obj18_Index
0000850E 6000 0000                  		bra.w	DeleteObject
00008512                            ; ===========================================================================
00008512                            ; ---------------------------------------------------------------------------
00008512                            ; Sprite mappings - unused
00008512                            ; ---------------------------------------------------------------------------
00008512                            Map_obj18x:
00008512                            	include "_maps\obj18x.asm"
00008512                            ; ---------------------------------------------------------------------------
00008512                            ; Sprite mappings - unused
00008512                            ; ---------------------------------------------------------------------------
00008512 0000                       		dc.w byte_80FE-Map_obj18x
00008514 0000                       		dc.w byte_8109-Map_obj18x
00008516 02                         byte_80FE:	dc.b 2
00008517 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
0000851C F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008521 0A                         byte_8109:	dc.b $A
00008522 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008527 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
0000852C 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008531 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008536 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
0000853B F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008540 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008545 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
0000854A 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000854F 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008554                            		even
00008554                            		even
00008554                            
00008554                            ; ---------------------------------------------------------------------------
00008554                            ; Sprite mappings - GHZ	platforms
00008554                            ; ---------------------------------------------------------------------------
00008554                            Map_obj18:
00008554                            	include "_maps\obj18ghz.asm"
00008554                            ; ---------------------------------------------------------------------------
00008554                            ; Sprite mappings - GHZ	platforms
00008554                            ; ---------------------------------------------------------------------------
00008554 0000                       		dc.w byte_8140-Map_obj18
00008556 0000                       		dc.w byte_8155-Map_obj18
00008558 04                         byte_8140:	dc.b 4
00008559 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
0000855E F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008563 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008568 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
0000856D 0A                         byte_8155:	dc.b $A
0000856E F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008573 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008578 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
0000857D 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008582 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00008587 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
0000858C 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008591 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008596 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
0000859B 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000085A0                            		even
000085A0                            		even
000085A0                            
000085A0                            ; ---------------------------------------------------------------------------
000085A0                            ; Sprite mappings - SYZ	platforms
000085A0                            ; ---------------------------------------------------------------------------
000085A0                            Map_obj18a:
000085A0                            	include "_maps\obj18syz.asm"
000085A0                            ; ---------------------------------------------------------------------------
000085A0                            ; Sprite mappings - SYZ	platforms
000085A0                            ; ---------------------------------------------------------------------------
000085A0 0000                       		dc.w byte_818A-Map_obj18a
000085A2 03                         byte_818A:	dc.b 3
000085A3 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000085A8 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000085AD F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000085B2                            		even
000085B2                            		even
000085B2                            
000085B2                            ; ---------------------------------------------------------------------------
000085B2                            ; Sprite mappings - SLZ	platforms
000085B2                            ; ---------------------------------------------------------------------------
000085B2                            Map_obj18b:
000085B2                            	include "_maps\obj18slz.asm"
000085B2                            ; ---------------------------------------------------------------------------
000085B2                            ; Sprite mappings - SLZ	platforms
000085B2                            ; ---------------------------------------------------------------------------
000085B2 0000                       		dc.w byte_819C-Map_obj18b
000085B4 02                         byte_819C:	dc.b 2
000085B5 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000085BA F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000085C0 00                         		even
000085C0 00                         		even
000085C0                            
000085C0                            ; ===========================================================================
000085C0                            ; ---------------------------------------------------------------------------
000085C0                            ; Object 19 - blank
000085C0                            ; ---------------------------------------------------------------------------
000085C0                            
000085C0                            Obj19:					; XREF: Obj_Index
000085C0 4E75                       		rts	
000085C2                            ; ===========================================================================
000085C2                            ; ---------------------------------------------------------------------------
000085C2                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000085C2                            ; ---------------------------------------------------------------------------
000085C2                            Map_obj48:
000085C2                            	include "_maps\obj48.asm"
000085C2                            ; ---------------------------------------------------------------------------
000085C2                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000085C2                            ; ---------------------------------------------------------------------------
000085C2 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
000085C6 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
000085CA 06                         byte_81B2:	dc.b 6
000085CB F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
000085D0 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
000085D5 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000085DA E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000085DF 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000085E4 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000085E9 04                         byte_81D1:	dc.b 4
000085EA E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
000085EF E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
000085F4 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
000085F9 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
000085FE 04                         byte_81E6:	dc.b 4
000085FF E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008604 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008609 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
0000860E 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008613 04                         byte_81FB:	dc.b 4
00008614 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00008619 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
0000861E 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008623 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00008628                            		even
00008628                            		even
00008628                            
00008628                            ; ===========================================================================
00008628                            ; ---------------------------------------------------------------------------
00008628                            ; Object 1A - GHZ collapsing ledge
00008628                            ; ---------------------------------------------------------------------------
00008628                            
00008628                            Obj1A:					; XREF: Obj_Index
00008628 7000                       		moveq	#0,d0
0000862A 1028 0024                  		move.b	$24(a0),d0
0000862E 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008632 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008636                            ; ===========================================================================
00008636 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
0000863A 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
0000863E 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008642                            ; ===========================================================================
00008642                            
00008642                            Obj1A_Main:				; XREF: Obj1A_Index
00008642 5428 0024                  		addq.b	#2,$24(a0)
00008646 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
0000864E 317C 4000 0002             		move.w	#$4000,2(a0)
00008654 0028 0004 0001             		ori.b	#4,1(a0)
0000865A 117C 0004 0018             		move.b	#4,$18(a0)
00008660 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008666 117C 0064 0019             		move.b	#$64,$19(a0)
0000866C 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008672 117C 0038 0016             		move.b	#$38,$16(a0)
00008678 08E8 0004 0001             		bset	#4,1(a0)
0000867E                            
0000867E                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
0000867E 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008682 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008684 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008688 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
0000868C 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008690                            
00008690                            Obj1A_Slope:
00008690 323C 0030                  		move.w	#$30,d1
00008694 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000869A 6100 F2A4                  		bsr.w	SlopeObject
0000869E 6000 0000                  		bra.w	MarkObjGone
000086A2                            ; ===========================================================================
000086A2                            
000086A2                            Obj1A_Touch:				; XREF: Obj1A_Index
000086A2 4A28 0038                  		tst.b	$38(a0)
000086A6 6700 0000                  		beq.w	loc_847A
000086AA 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000086B0 5328 0038                  		subq.b	#1,$38(a0)
000086B4                            
000086B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086B4                            
000086B4                            
000086B4                            Obj1A_WalkOff:				; XREF: Obj1A_Index
000086B4 323C 0030                  		move.w	#$30,d1
000086B8 6100 F326                  		bsr.w	ExitPlatform
000086BC 323C 0030                  		move.w	#$30,d1
000086C0 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000086C6 3428 0008                  		move.w	8(a0),d2
000086CA 6100 0000                  		bsr.w	SlopeObject2
000086CE 6000 0000                  		bra.w	MarkObjGone
000086D2                            ; End of function Obj1A_WalkOff
000086D2                            
000086D2                            ; ===========================================================================
000086D2                            
000086D2                            Obj1A_Display:				; XREF: Obj1A_Index
000086D2 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000086D6 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
000086D8 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000086DC 6600 0000                  		bne.w	loc_82D0	; if yes, branch
000086E0 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000086E4 6000 0000                  		bra.w	DisplaySprite
000086E8                            ; ===========================================================================
000086E8                            
000086E8                            loc_82D0:				; XREF: Obj1A_Display
000086E8 5328 0038                  		subq.b	#1,$38(a0)
000086EC 6100 FFC6                  		bsr.w	Obj1A_WalkOff
000086F0 43F8 D000                  		lea	($FFFFD000).w,a1
000086F4 0829 0003 0022             		btst	#3,$22(a1)
000086FA 6700                       		beq.s	loc_82FC
000086FC 4A28 0038                  		tst.b	$38(a0)
00008700 6600                       		bne.s	locret_8308
00008702 08A9 0003 0022             		bclr	#3,$22(a1)
00008708 08A9 0005 0022             		bclr	#5,$22(a1)
0000870E 137C 0001 001D             		move.b	#1,$1D(a1)
00008714                            
00008714                            loc_82FC:
00008714 117C 0000 003A             		move.b	#0,$3A(a0)
0000871A 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008720                            
00008720                            locret_8308:
00008720 4E75                       		rts	
00008722                            ; ===========================================================================
00008722                            
00008722                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008722 6100 0000                  		bsr.w	ObjectFall
00008726 6100 0000                  		bsr.w	DisplaySprite
0000872A 4A28 0001                  		tst.b	1(a0)
0000872E 6A00                       		bpl.s	Obj1A_Delete
00008730 4E75                       		rts	
00008732                            ; ===========================================================================
00008732                            
00008732                            Obj1A_Delete:				; XREF: Obj1A_Index
00008732 6100 0000                  		bsr.w	DeleteObject
00008736 4E75                       		rts	
00008738                            ; ===========================================================================
00008738                            ; ---------------------------------------------------------------------------
00008738                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008738                            ; ---------------------------------------------------------------------------
00008738                            
00008738                            Obj53:					; XREF: Obj_Index
00008738 7000                       		moveq	#0,d0
0000873A 1028 0024                  		move.b	$24(a0),d0
0000873E 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008742 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008746                            ; ===========================================================================
00008746 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
0000874A 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
0000874E 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008752                            ; ===========================================================================
00008752                            
00008752                            Obj53_Main:				; XREF: Obj53_Index
00008752 5428 0024                  		addq.b	#2,$24(a0)
00008756 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
0000875E 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008764 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000876A 6600                       		bne.s	Obj53_NotSLZ
0000876C 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008772 5428 001A                  		addq.b	#2,$1A(a0)
00008776                            
00008776                            Obj53_NotSLZ:
00008776 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000877C 6600                       		bne.s	Obj53_NotSBZ
0000877E 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008784                            
00008784                            Obj53_NotSBZ:
00008784 0028 0004 0001             		ori.b	#4,1(a0)
0000878A 117C 0004 0018             		move.b	#4,$18(a0)
00008790 117C 0007 0038             		move.b	#7,$38(a0)
00008796 117C 0044 0019             		move.b	#$44,$19(a0)
0000879C                            
0000879C                            Obj53_ChkTouch:				; XREF: Obj53_Index
0000879C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000087A0 6700                       		beq.s	Obj53_Solid	; if not, branch
000087A2 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000087A6 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
000087AA 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000087AE                            
000087AE                            Obj53_Solid:
000087AE 323C 0020                  		move.w	#$20,d1
000087B2 6100 F0B8                  		bsr.w	PlatformObject
000087B6 4A28 0028                  		tst.b	$28(a0)
000087BA 6A00                       		bpl.s	Obj53_MarkAsGone
000087BC 0829 0003 0022             		btst	#3,$22(a1)
000087C2 6700                       		beq.s	Obj53_MarkAsGone
000087C4 08A8 0000 0001             		bclr	#0,1(a0)
000087CA 3029 0008                  		move.w	8(a1),d0
000087CE 9068 0008                  		sub.w	8(a0),d0
000087D2 6400                       		bcc.s	Obj53_MarkAsGone
000087D4 08E8 0000 0001             		bset	#0,1(a0)
000087DA                            
000087DA                            Obj53_MarkAsGone:
000087DA 6000 0000                  		bra.w	MarkObjGone
000087DE                            ; ===========================================================================
000087DE                            
000087DE                            Obj53_Touch:				; XREF: Obj53_Index
000087DE 4A28 0038                  		tst.b	$38(a0)
000087E2 6700 0000                  		beq.w	loc_8458
000087E6 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000087EC 5328 0038                  		subq.b	#1,$38(a0)
000087F0                            
000087F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000087F0                            
000087F0                            
000087F0                            Obj53_WalkOff:				; XREF: Obj53_Index
000087F0 323C 0020                  		move.w	#$20,d1
000087F4 6100 F1EA                  		bsr.w	ExitPlatform
000087F8 3428 0008                  		move.w	8(a0),d2
000087FC 6100 F74C                  		bsr.w	MvSonicOnPtfm2
00008800 6000 0000                  		bra.w	MarkObjGone
00008804                            ; End of function Obj53_WalkOff
00008804                            
00008804                            ; ===========================================================================
00008804                            
00008804                            Obj53_Display:				; XREF: Obj53_Index
00008804 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008808 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
0000880A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000880E 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008812 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008816 6000 0000                  		bra.w	DisplaySprite
0000881A                            ; ===========================================================================
0000881A                            
0000881A                            loc_8402:
0000881A 5328 0038                  		subq.b	#1,$38(a0)
0000881E 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008822 43F8 D000                  		lea	($FFFFD000).w,a1
00008826 0829 0003 0022             		btst	#3,$22(a1)
0000882C 6700                       		beq.s	loc_842E
0000882E 4A28 0038                  		tst.b	$38(a0)
00008832 6600                       		bne.s	locret_843A
00008834 08A9 0003 0022             		bclr	#3,$22(a1)
0000883A 08A9 0005 0022             		bclr	#5,$22(a1)
00008840 137C 0001 001D             		move.b	#1,$1D(a1)
00008846                            
00008846                            loc_842E:
00008846 117C 0000 003A             		move.b	#0,$3A(a0)
0000884C 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008852                            
00008852                            locret_843A:
00008852 4E75                       		rts	
00008854                            ; ===========================================================================
00008854                            
00008854                            Obj53_TimeZero:				; XREF: Obj53_Display
00008854 6100 0000                  		bsr.w	ObjectFall
00008858 6100 0000                  		bsr.w	DisplaySprite
0000885C 4A28 0001                  		tst.b	1(a0)
00008860 6A00                       		bpl.s	Obj53_Delete
00008862 4E75                       		rts	
00008864                            ; ===========================================================================
00008864                            
00008864                            Obj53_Delete:				; XREF: Obj53_Index
00008864 6100 0000                  		bsr.w	DeleteObject
00008868 4E75                       		rts	
0000886A                            ; ===========================================================================
0000886A                            
0000886A                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
0000886A 117C 0000 003A             		move.b	#0,$3A(a0)
00008870                            
00008870                            loc_8458:				; XREF: Obj53_Touch
00008870 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008876 0828 0000 0028             		btst	#0,$28(a0)
0000887C 6700                       		beq.s	loc_846C
0000887E 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008884                            
00008884                            loc_846C:
00008884 7207                       		moveq	#7,d1
00008886 5228 001A                  		addq.b	#1,$1A(a0)
0000888A 6000                       		bra.s	loc_8486
0000888C                            ; ===========================================================================
0000888C                            
0000888C                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
0000888C 117C 0000 003A             		move.b	#0,$3A(a0)
00008892                            
00008892                            loc_847A:				; XREF: Obj1A_Touch
00008892 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008898 7218                       		moveq	#$18,d1
0000889A 5428 001A                  		addq.b	#2,$1A(a0)
0000889E                            
0000889E                            loc_8486:				; XREF: Obj53_Collapse
0000889E 7000                       		moveq	#0,d0
000088A0 1028 001A                  		move.b	$1A(a0),d0
000088A4 D040                       		add.w	d0,d0
000088A6 2668 0004                  		movea.l	4(a0),a3
000088AA D6F3 0000                  		adda.w	(a3,d0.w),a3
000088AE 524B                       		addq.w	#1,a3
000088B0 08E8 0005 0001             		bset	#5,1(a0)
000088B6 1810                       		move.b	0(a0),d4
000088B8 1A28 0001                  		move.b	1(a0),d5
000088BC 2248                       		movea.l	a0,a1
000088BE 6000                       		bra.s	loc_84B2
000088C0                            ; ===========================================================================
000088C0                            
000088C0                            loc_84AA:
000088C0 6100 0000                  		bsr.w	SingleObjLoad
000088C4 6600                       		bne.s	loc_84F2
000088C6 5A4B                       		addq.w	#5,a3
000088C8                            
000088C8                            loc_84B2:
000088C8 137C 0006 0024             		move.b	#6,$24(a1)
000088CE 1284                       		move.b	d4,0(a1)
000088D0 234B 0004                  		move.l	a3,4(a1)
000088D4 1345 0001                  		move.b	d5,1(a1)
000088D8 3368 0008 0008             		move.w	8(a0),8(a1)
000088DE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000088E4 3368 0002 0002             		move.w	2(a0),2(a1)
000088EA 1368 0018 0018             		move.b	$18(a0),$18(a1)
000088F0 1368 0019 0019             		move.b	$19(a0),$19(a1)
000088F6 135C 0038                  		move.b	(a4)+,$38(a1)
000088FA B3C8                       		cmpa.l	a0,a1
000088FC 6400                       		bcc.s	loc_84EE
000088FE 6100 0000                  		bsr.w	DisplaySprite2
00008902                            
00008902                            loc_84EE:
00008902 51C9 FFBC                  		dbf	d1,loc_84AA
00008906                            
00008906                            loc_84F2:
00008906 6100 0000                  		bsr.w	DisplaySprite
0000890A 303C 00B9                  		move.w	#$B9,d0
0000890E 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008914                            ; ===========================================================================
00008914                            ; ---------------------------------------------------------------------------
00008914                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008914                            ; ---------------------------------------------------------------------------
00008914 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008924 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
0000892E 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008936 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
0000893E                            
0000893E                            ; ---------------------------------------------------------------------------
0000893E                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
0000893E                            ; ---------------------------------------------------------------------------
0000893E                            
0000893E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000893E                            
0000893E                            
0000893E                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
0000893E 43F8 D000                  		lea	($FFFFD000).w,a1
00008942 0829 0003 0022             		btst	#3,$22(a1)
00008948 6700                       		beq.s	locret_856E
0000894A 3029 0008                  		move.w	8(a1),d0
0000894E 9068 0008                  		sub.w	8(a0),d0
00008952 D041                       		add.w	d1,d0
00008954 E248                       		lsr.w	#1,d0
00008956 0828 0000 0001             		btst	#0,1(a0)
0000895C 6700                       		beq.s	loc_854E
0000895E 4640                       		not.w	d0
00008960 D041                       		add.w	d1,d0
00008962                            
00008962                            loc_854E:
00008962 7200                       		moveq	#0,d1
00008964 1232 0000                  		move.b	(a2,d0.w),d1
00008968 3028 000C                  		move.w	$C(a0),d0
0000896C 9041                       		sub.w	d1,d0
0000896E 7200                       		moveq	#0,d1
00008970 1229 0016                  		move.b	$16(a1),d1
00008974 9041                       		sub.w	d1,d0
00008976 3340 000C                  		move.w	d0,$C(a1)
0000897A 9468 0008                  		sub.w	8(a0),d2
0000897E 9569 0008                  		sub.w	d2,8(a1)
00008982                            
00008982                            locret_856E:
00008982 4E75                       		rts	
00008984                            ; End of function SlopeObject2
00008984                            
00008984                            ; ===========================================================================
00008984                            ; ---------------------------------------------------------------------------
00008984                            ; Collision data for GHZ collapsing ledge
00008984                            ; ---------------------------------------------------------------------------
00008984                            Obj1A_SlopeData:
00008984                            		incbin	misc\ghzledge.bin
000089B4                            		even
000089B4                            
000089B4                            ; ---------------------------------------------------------------------------
000089B4                            ; Sprite mappings - GHZ	collapsing ledge
000089B4                            ; ---------------------------------------------------------------------------
000089B4                            Map_obj1A:
000089B4                            	include "_maps\obj1A.asm"
000089B4                            ; ---------------------------------------------------------------------------
000089B4                            ; Sprite mappings - GHZ	collapsing ledge
000089B4                            ; ---------------------------------------------------------------------------
000089B4 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
000089B8 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
000089BC 10                         byte_85A8:	dc.b $10
000089BD C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
000089C2 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000089C7 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000089CC E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000089D1 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000089D6 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000089DB F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000089E0 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000089E5 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000089EA F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
000089EF 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000089F4 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000089F9 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000089FE 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008A03 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008A08 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008A0D 10                         byte_85F9:	dc.b $10
00008A0E C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008A13 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008A18 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008A1D E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008A22 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008A27 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008A2C F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008A31 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008A36 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008A3B F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008A40 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008A45 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008A4A 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008A4F 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008A54 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008A59 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008A5E 19                         byte_864A:	dc.b $19
00008A5F C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008A64 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008A69 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008A6E D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008A73 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008A78 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008A7D E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008A82 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008A87 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008A8C D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008A91 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008A96 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008A9B F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008AA0 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008AA5 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008AAA F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008AAF 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008AB4 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008AB9 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008ABE 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008AC3 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008AC8 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008ACD 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008AD2 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008AD7 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008ADC 19                         byte_86C8:	dc.b $19
00008ADD C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008AE2 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008AE7 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008AEC D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008AF1 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008AF6 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008AFB E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008B00 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008B05 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008B0A D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008B0F F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008B14 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008B19 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008B1E F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008B23 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008B28 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008B2D 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008B32 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008B37 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008B3C 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008B41 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008B46 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008B4B 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008B50 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008B55 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008B5A                            		even
00008B5A                            		even
00008B5A                            
00008B5A                            ; ---------------------------------------------------------------------------
00008B5A                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008B5A                            ; ---------------------------------------------------------------------------
00008B5A                            Map_obj53:
00008B5A                            	include "_maps\obj53.asm"
00008B5A                            ; ---------------------------------------------------------------------------
00008B5A                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008B5A                            ; ---------------------------------------------------------------------------
00008B5A 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008B5E 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008B62 04                         byte_874E:	dc.b 4
00008B63 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008B68 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008B6D F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008B72 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008B77 08                         byte_8763:	dc.b 8
00008B78 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008B7D F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008B82 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008B87 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008B8C 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008B91 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008B96 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008B9B 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008BA0 04                         byte_878C:	dc.b 4
00008BA1 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008BA6 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008BAB F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008BB0 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008BB5 08                         byte_87A1:	dc.b 8
00008BB6 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008BBB F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008BC0 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008BC5 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008BCA 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008BCF 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008BD4 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008BD9 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008BDE                            		even
00008BDE                            		even
00008BDE                            
00008BDE                            ; ===========================================================================
00008BDE                            ; ---------------------------------------------------------------------------
00008BDE                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008BDE                            ; ---------------------------------------------------------------------------
00008BDE                            
00008BDE                            Obj1C:					; XREF: Obj_Index
00008BDE 7000                       		moveq	#0,d0
00008BE0 1028 0024                  		move.b	$24(a0),d0
00008BE4 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008BE8 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008BEC                            ; ===========================================================================
00008BEC 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008BEE 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008BF0                            ; ===========================================================================
00008BF0                            
00008BF0                            Obj1C_Main:				; XREF: Obj1C_Index
00008BF0 5428 0024                  		addq.b	#2,$24(a0)
00008BF4 7000                       		moveq	#0,d0
00008BF6 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008BFA C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008BFE 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008C02 2159 0004                  		move.l	(a1)+,4(a0)
00008C06 3159 0002                  		move.w	(a1)+,2(a0)
00008C0A 0028 0004 0001             		ori.b	#4,1(a0)
00008C10 1159 001A                  		move.b	(a1)+,$1A(a0)
00008C14 1159 0019                  		move.b	(a1)+,$19(a0)
00008C18 1159 0018                  		move.b	(a1)+,$18(a0)
00008C1C 1159 0020                  		move.b	(a1)+,$20(a0)
00008C20                            
00008C20                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008C20 3028 0008                  		move.w	8(a0),d0
00008C24 0240 FF80                  		andi.w	#$FF80,d0
00008C28 3238 F700                  		move.w	($FFFFF700).w,d1
00008C2C 0441 0080                  		subi.w	#$80,d1
00008C30 0241 FF80                  		andi.w	#$FF80,d1
00008C34 9041                       		sub.w	d1,d0
00008C36 0C40 0280                  		cmpi.w	#$280,d0
00008C3A 6200 0000                  		bhi.w	DeleteObject
00008C3E 6000 0000                  		bra.w	DisplaySprite
00008C42                            ; ===========================================================================
00008C42                            ; ---------------------------------------------------------------------------
00008C42                            ; Variables for	object $1C are stored in an array
00008C42                            ; ---------------------------------------------------------------------------
00008C42 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008C46 44D8                       		dc.w $44D8		; VRAM setting
00008C48 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008C4C 0000 0000                  		dc.l Map_obj1C
00008C50 44D8                       		dc.w $44D8
00008C52 0008 0200                  		dc.b 0,	8, 2, 0
00008C56 0000 0000                  		dc.l Map_obj1C
00008C5A 44D8                       		dc.w $44D8
00008C5C 0008 0200                  		dc.b 0,	8, 2, 0
00008C60 0000 7D54                  		dc.l Map_obj11
00008C64 438E                       		dc.w $438E
00008C66 0110 0100                  		dc.b 1,	$10, 1,	0
00008C6A                            ; ---------------------------------------------------------------------------
00008C6A                            ; Sprite mappings - SLZ	lava thrower
00008C6A                            ; ---------------------------------------------------------------------------
00008C6A                            Map_obj1C:
00008C6A                            	include "_maps\obj1C.asm"
00008C6A                            ; ---------------------------------------------------------------------------
00008C6A                            ; Sprite mappings - SLZ	lava thrower
00008C6A                            ; ---------------------------------------------------------------------------
00008C6A 0000                       		dc.w byte_8858-Map_obj1C
00008C6C 01                         byte_8858:	dc.b 1
00008C6D F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008C72                            		even
00008C72                            		even
00008C72                            
00008C72                            ; ===========================================================================
00008C72                            ; ---------------------------------------------------------------------------
00008C72                            ; Object 1D - switch that activates when Sonic touches it
00008C72                            ; (this	is not used anywhere in	the game)
00008C72                            ; ---------------------------------------------------------------------------
00008C72                            
00008C72                            Obj1D:					; XREF: Obj_Index
00008C72 7000                       		moveq	#0,d0
00008C74 1028 0024                  		move.b	$24(a0),d0
00008C78 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008C7C 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008C80                            ; ===========================================================================
00008C80 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008C82 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008C84 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008C86                            ; ===========================================================================
00008C86                            
00008C86                            Obj1D_Main:				; XREF: Obj1D_Index
00008C86 5428 0024                  		addq.b	#2,$24(a0)
00008C8A 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008C92 317C 4000 0002             		move.w	#$4000,2(a0)
00008C98 117C 0004 0001             		move.b	#4,1(a0)
00008C9E 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008CA4 117C 0010 0019             		move.b	#$10,$19(a0)
00008CAA 117C 0005 0018             		move.b	#5,$18(a0)
00008CB0                            
00008CB0                            Obj1D_Action:				; XREF: Obj1D_Index
00008CB0 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008CB6 323C 0010                  		move.w	#$10,d1
00008CBA 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008CBE 6700                       		beq.s	Obj1D_ChkDel
00008CC0 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008CC4 7001                       		moveq	#1,d0
00008CC6 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008CCA                            
00008CCA                            Obj1D_ChkDel:
00008CCA 6100 0000                  		bsr.w	DisplaySprite
00008CCE 3028 0008                  		move.w	8(a0),d0
00008CD2 0240 FF80                  		andi.w	#$FF80,d0
00008CD6 3238 F700                  		move.w	($FFFFF700).w,d1
00008CDA 0441 0080                  		subi.w	#$80,d1
00008CDE 0241 FF80                  		andi.w	#$FF80,d1
00008CE2 9041                       		sub.w	d1,d0
00008CE4 0C40 0280                  		cmpi.w	#$280,d0
00008CE8 6200 0000                  		bhi.w	Obj1D_Delete
00008CEC 4E75                       		rts	
00008CEE                            ; ===========================================================================
00008CEE                            
00008CEE                            Obj1D_Delete:				; XREF: Obj1D_Index
00008CEE 6100 0000                  		bsr.w	DeleteObject
00008CF2 4E75                       		rts	
00008CF4                            ; ---------------------------------------------------------------------------
00008CF4                            ; Subroutine to	check if Sonic touches the object
00008CF4                            ; ---------------------------------------------------------------------------
00008CF4                            
00008CF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008CF4                            
00008CF4                            
00008CF4                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008CF4 43F8 D000                  		lea	($FFFFD000).w,a1
00008CF8 3029 0008                  		move.w	8(a1),d0
00008CFC 9068 0008                  		sub.w	8(a0),d0
00008D00 D041                       		add.w	d1,d0
00008D02 6B00                       		bmi.s	loc_8918
00008D04 D241                       		add.w	d1,d1
00008D06 B041                       		cmp.w	d1,d0
00008D08 6400                       		bcc.s	loc_8918
00008D0A 3429 000C                  		move.w	$C(a1),d2
00008D0E 1229 0016                  		move.b	$16(a1),d1
00008D12 4881                       		ext.w	d1
00008D14 D242                       		add.w	d2,d1
00008D16 3028 000C                  		move.w	$C(a0),d0
00008D1A 0440 0010                  		subi.w	#$10,d0
00008D1E 9041                       		sub.w	d1,d0
00008D20 6200                       		bhi.s	loc_8918
00008D22 0C40 FFF0                  		cmpi.w	#-$10,d0
00008D26 6500                       		bcs.s	loc_8918
00008D28 70FF                       		moveq	#-1,d0
00008D2A 4E75                       		rts	
00008D2C                            ; ===========================================================================
00008D2C                            
00008D2C                            loc_8918:
00008D2C 7000                       		moveq	#0,d0
00008D2E 4E75                       		rts	
00008D30                            ; End of function Obj1D_ChkTouch
00008D30                            
00008D30                            ; ===========================================================================
00008D30                            ; ---------------------------------------------------------------------------
00008D30                            ; Sprite mappings - object 1D
00008D30                            ; ---------------------------------------------------------------------------
00008D30                            Map_obj1D:
00008D30                            	include "_maps\obj1D.asm"
00008D30                            ; ---------------------------------------------------------------------------
00008D30                            ; Sprite mappings - object 1D
00008D30                            ; ---------------------------------------------------------------------------
00008D30 0000                       		dc.w byte_891E-Map_obj1D
00008D32 04                         byte_891E:	dc.b 4
00008D33 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008D38 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008D3D E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008D42 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008D48 00                         		even
00008D48 00                         		even
00008D48                            
00008D48                            ; ===========================================================================
00008D48                            ; ---------------------------------------------------------------------------
00008D48                            ; Object 2A - doors (SBZ)
00008D48                            ; ---------------------------------------------------------------------------
00008D48                            
00008D48                            Obj2A:					; XREF: Obj_Index
00008D48 7000                       		moveq	#0,d0
00008D4A 1028 0024                  		move.b	$24(a0),d0
00008D4E 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008D52 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008D56                            ; ===========================================================================
00008D56 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008D58 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008D5A                            ; ===========================================================================
00008D5A                            
00008D5A                            Obj2A_Main:				; XREF: Obj2A_Index
00008D5A 5428 0024                  		addq.b	#2,$24(a0)
00008D5E 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008D66 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008D6C 0028 0004 0001             		ori.b	#4,1(a0)
00008D72 117C 0008 0019             		move.b	#8,$19(a0)
00008D78 117C 0004 0018             		move.b	#4,$18(a0)
00008D7E                            
00008D7E                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008D7E 323C 0040                  		move.w	#$40,d1
00008D82 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008D86 3038 D008                  		move.w	($FFFFD008).w,d0
00008D8A D041                       		add.w	d1,d0
00008D8C B068 0008                  		cmp.w	8(a0),d0
00008D90 6500                       		bcs.s	Obj2A_Animate
00008D92 9041                       		sub.w	d1,d0
00008D94 9041                       		sub.w	d1,d0
00008D96 B068 0008                  		cmp.w	8(a0),d0
00008D9A 6400                       		bcc.s	Obj2A_Animate
00008D9C D041                       		add.w	d1,d0
00008D9E B068 0008                  		cmp.w	8(a0),d0
00008DA2 6400                       		bcc.s	loc_899A
00008DA4 0828 0000 0022             		btst	#0,$22(a0)
00008DAA 6600                       		bne.s	Obj2A_Animate
00008DAC 6000                       		bra.s	Obj2A_Open
00008DAE                            ; ===========================================================================
00008DAE                            
00008DAE                            loc_899A:				; XREF: Obj2A_OpenShut
00008DAE 0828 0000 0022             		btst	#0,$22(a0)
00008DB4 6700                       		beq.s	Obj2A_Animate
00008DB6                            
00008DB6                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00008DB6 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008DBC                            
00008DBC                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008DBC 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00008DC2 6100 0000                  		bsr.w	AnimateSprite
00008DC6 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008DCA 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008DCC 323C 0011                  		move.w	#$11,d1
00008DD0 343C 0020                  		move.w	#$20,d2
00008DD4 3602                       		move.w	d2,d3
00008DD6 5243                       		addq.w	#1,d3
00008DD8 3828 0008                  		move.w	8(a0),d4
00008DDC 6100 0000                  		bsr.w	SolidObject
00008DE0                            
00008DE0                            Obj2A_MarkAsUsed:
00008DE0 6000 0000                  		bra.w	MarkObjGone
00008DE4                            ; ===========================================================================
00008DE4                            Ani_obj2A:
00008DE4                            	include "_anim\obj2A.asm"
00008DE4                            ; ---------------------------------------------------------------------------
00008DE4                            ; Animation script - doors (SBZ)
00008DE4                            ; ---------------------------------------------------------------------------
00008DE4 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00008DE6 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00008DE8 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00008DF4 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00008E00                            		even
00008E00                            		even
00008E00                            
00008E00                            ; ---------------------------------------------------------------------------
00008E00                            ; Sprite mappings - doors (SBZ)
00008E00                            ; ---------------------------------------------------------------------------
00008E00                            Map_obj2A:
00008E00                            	include "_maps\obj2A.asm"
00008E00                            ; ---------------------------------------------------------------------------
00008E00                            ; Sprite mappings - doors (SBZ)
00008E00                            ; ---------------------------------------------------------------------------
00008E00 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00008E04 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00008E08 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00008E0C 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00008E10 0000                       		dc.w byte_8A56-Map_obj2A
00008E12 02                         byte_89FE:	dc.b 2
00008E13 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00008E18 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00008E1D 02                         byte_8A09:	dc.b 2
00008E1E DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00008E23 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00008E28 02                         byte_8A14:	dc.b 2
00008E29 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00008E2E 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00008E33 02                         byte_8A1F:	dc.b 2
00008E34 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00008E39 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00008E3E 02                         byte_8A2A:	dc.b 2
00008E3F D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00008E44 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00008E49 02                         byte_8A35:	dc.b 2
00008E4A CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00008E4F 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00008E54 02                         byte_8A40:	dc.b 2
00008E55 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00008E5A 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00008E5F 02                         byte_8A4B:	dc.b 2
00008E60 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00008E65 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00008E6A 02                         byte_8A56:	dc.b 2
00008E6B C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00008E70 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00008E76 00                         		even
00008E76 00                         		even
00008E76                            
00008E76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E76                            
00008E76                            
00008E76                            Obj44_SolidWall:			; XREF: Obj44_Solid
00008E76 6100 0000                  		bsr.w	Obj44_SolidWall2
00008E7A 6700                       		beq.s	loc_8AA8
00008E7C 6B00 0000                  		bmi.w	loc_8AC4
00008E80 4A40                       		tst.w	d0
00008E82 6700 0000                  		beq.w	loc_8A92
00008E86 6B00                       		bmi.s	loc_8A7C
00008E88 4A69 0010                  		tst.w	$10(a1)
00008E8C 6B00                       		bmi.s	loc_8A92
00008E8E 6000                       		bra.s	loc_8A82
00008E90                            ; ===========================================================================
00008E90                            
00008E90                            loc_8A7C:
00008E90 4A69 0010                  		tst.w	$10(a1)
00008E94 6A00                       		bpl.s	loc_8A92
00008E96                            
00008E96                            loc_8A82:
00008E96 9169 0008                  		sub.w	d0,8(a1)
00008E9A 337C 0000 0014             		move.w	#0,$14(a1)
00008EA0 337C 0000 0010             		move.w	#0,$10(a1)
00008EA6                            
00008EA6                            loc_8A92:
00008EA6 0829 0001 0022             		btst	#1,$22(a1)
00008EAC 6600                       		bne.s	loc_8AB6
00008EAE 08E9 0005 0022             		bset	#5,$22(a1)
00008EB4 08E8 0005 0022             		bset	#5,$22(a0)
00008EBA 4E75                       		rts	
00008EBC                            ; ===========================================================================
00008EBC                            
00008EBC                            loc_8AA8:
00008EBC 0828 0005 0022             		btst	#5,$22(a0)
00008EC2 6700                       		beq.s	locret_8AC2
00008EC4 337C 0001 001C             		move.w	#1,$1C(a1)
00008ECA                            
00008ECA                            loc_8AB6:
00008ECA 08A8 0005 0022             		bclr	#5,$22(a0)
00008ED0 08A9 0005 0022             		bclr	#5,$22(a1)
00008ED6                            
00008ED6                            locret_8AC2:
00008ED6 4E75                       		rts	
00008ED8                            ; ===========================================================================
00008ED8                            
00008ED8                            loc_8AC4:
00008ED8 4A69 0012                  		tst.w	$12(a1)
00008EDC 6A00                       		bpl.s	locret_8AD8
00008EDE 4A43                       		tst.w	d3
00008EE0 6A00                       		bpl.s	locret_8AD8
00008EE2 9769 000C                  		sub.w	d3,$C(a1)
00008EE6 337C 0000 0012             		move.w	#0,$12(a1)
00008EEC                            
00008EEC                            locret_8AD8:
00008EEC 4E75                       		rts	
00008EEE                            ; End of function Obj44_SolidWall
00008EEE                            
00008EEE                            
00008EEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008EEE                            
00008EEE                            
00008EEE                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00008EEE 43F8 D000                  		lea	($FFFFD000).w,a1
00008EF2 3029 0008                  		move.w	8(a1),d0
00008EF6 9068 0008                  		sub.w	8(a0),d0
00008EFA D041                       		add.w	d1,d0
00008EFC 6B00                       		bmi.s	loc_8B48
00008EFE 3601                       		move.w	d1,d3
00008F00 D643                       		add.w	d3,d3
00008F02 B043                       		cmp.w	d3,d0
00008F04 6200                       		bhi.s	loc_8B48
00008F06 1629 0016                  		move.b	$16(a1),d3
00008F0A 4883                       		ext.w	d3
00008F0C D443                       		add.w	d3,d2
00008F0E 3629 000C                  		move.w	$C(a1),d3
00008F12 9668 000C                  		sub.w	$C(a0),d3
00008F16 D642                       		add.w	d2,d3
00008F18 6B00                       		bmi.s	loc_8B48
00008F1A 3802                       		move.w	d2,d4
00008F1C D844                       		add.w	d4,d4
00008F1E B644                       		cmp.w	d4,d3
00008F20 6400                       		bcc.s	loc_8B48
00008F22 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008F26 6B00                       		bmi.s	loc_8B48
00008F28 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008F2E 6400                       		bcc.s	loc_8B48
00008F30 4A78 FE08                  		tst.w	($FFFFFE08).w
00008F34 6600                       		bne.s	loc_8B48
00008F36 3A00                       		move.w	d0,d5
00008F38 B240                       		cmp.w	d0,d1
00008F3A 6400                       		bcc.s	loc_8B30
00008F3C D241                       		add.w	d1,d1
00008F3E 9041                       		sub.w	d1,d0
00008F40 3A00                       		move.w	d0,d5
00008F42 4445                       		neg.w	d5
00008F44                            
00008F44                            loc_8B30:
00008F44 3203                       		move.w	d3,d1
00008F46 B443                       		cmp.w	d3,d2
00008F48 6400                       		bcc.s	loc_8B3C
00008F4A 9644                       		sub.w	d4,d3
00008F4C 3203                       		move.w	d3,d1
00008F4E 4441                       		neg.w	d1
00008F50                            
00008F50                            loc_8B3C:
00008F50 BA41                       		cmp.w	d1,d5
00008F52 6200                       		bhi.s	loc_8B44
00008F54 7801                       		moveq	#1,d4
00008F56 4E75                       		rts	
00008F58                            ; ===========================================================================
00008F58                            
00008F58                            loc_8B44:
00008F58 78FF                       		moveq	#-1,d4
00008F5A 4E75                       		rts	
00008F5C                            ; ===========================================================================
00008F5C                            
00008F5C                            loc_8B48:
00008F5C 7800                       		moveq	#0,d4
00008F5E 4E75                       		rts	
00008F60                            ; End of function Obj44_SolidWall2
00008F60                            
00008F60                            ; ===========================================================================
00008F60                            ; ---------------------------------------------------------------------------
00008F60                            ; Object 1E - Ball Hog enemy (SBZ)
00008F60                            ; ---------------------------------------------------------------------------
00008F60                            
00008F60                            Obj1E:					; XREF: Obj_Index
00008F60 7000                       		moveq	#0,d0
00008F62 1028 0024                  		move.b	$24(a0),d0
00008F66 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00008F6A 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00008F6E                            ; ===========================================================================
00008F6E 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00008F70 0000                       		dc.w Obj1E_Action-Obj1E_Index
00008F72                            ; ===========================================================================
00008F72                            
00008F72                            Obj1E_Main:				; XREF: Obj1E_Index
00008F72 117C 0013 0016             		move.b	#$13,$16(a0)
00008F78 117C 0008 0017             		move.b	#8,$17(a0)
00008F7E 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008F86 317C 2302 0002             		move.w	#$2302,2(a0)
00008F8C 117C 0004 0001             		move.b	#4,1(a0)
00008F92 117C 0004 0018             		move.b	#4,$18(a0)
00008F98 117C 0005 0020             		move.b	#5,$20(a0)
00008F9E 117C 000C 0019             		move.b	#$C,$19(a0)
00008FA4 6100 0000                  		bsr.w	ObjectFall
00008FA8 4EB9 0000 0000             		jsr	ObjHitFloor
00008FAE 4A41                       		tst.w	d1
00008FB0 6A00                       		bpl.s	locret_8BAC
00008FB2 D368 000C                  		add.w	d1,$C(a0)
00008FB6 317C 0000 0012             		move.w	#0,$12(a0)
00008FBC 5428 0024                  		addq.b	#2,$24(a0)
00008FC0                            
00008FC0                            locret_8BAC:
00008FC0 4E75                       		rts	
00008FC2                            ; ===========================================================================
00008FC2                            
00008FC2                            Obj1E_Action:				; XREF: Obj1E_Index
00008FC2 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00008FC8 6100 0000                  		bsr.w	AnimateSprite
00008FCC 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00008FD2 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00008FD4 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00008FD8 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00008FDA 6000                       		bra.s	Obj1E_MarkAsGone
00008FDC                            ; ===========================================================================
00008FDC                            
00008FDC                            Obj1E_SetBall:				; XREF: Obj1E_Action
00008FDC 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00008FE0                            
00008FE0                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00008FE0 6000 0000                  		bra.w	MarkObjGone
00008FE4                            ; ===========================================================================
00008FE4                            
00008FE4                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00008FE4 117C 0001 0032             		move.b	#1,$32(a0)
00008FEA 6100 0000                  		bsr.w	SingleObjLoad
00008FEE 6600                       		bne.s	loc_8C1A
00008FF0 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00008FF4 3368 0008 0008             		move.w	8(a0),8(a1)
00008FFA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009000 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009006 337C 0000 0012             		move.w	#0,$12(a1)
0000900C 70FC                       		moveq	#-4,d0
0000900E 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009014 6700                       		beq.s	loc_8C0A	; if not, branch
00009016 4440                       		neg.w	d0
00009018 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000901C                            
0000901C                            loc_8C0A:
0000901C D169 0008                  		add.w	d0,8(a1)
00009020 0669 000C 000C             		addi.w	#$C,$C(a1)
00009026 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000902C                            
0000902C                            loc_8C1A:
0000902C 60B2                       		bra.s	Obj1E_MarkAsGone
0000902E                            ; ===========================================================================
0000902E                            ; ---------------------------------------------------------------------------
0000902E                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000902E                            ; ---------------------------------------------------------------------------
0000902E                            
0000902E                            Obj20:					; XREF: Obj_Index
0000902E 7000                       		moveq	#0,d0
00009030 1028 0024                  		move.b	$24(a0),d0
00009034 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00009038 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
0000903C                            ; ===========================================================================
0000903C 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
0000903E 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009040                            ; ===========================================================================
00009040                            
00009040                            Obj20_Main:				; XREF: Obj20_Index
00009040 5428 0024                  		addq.b	#2,$24(a0)
00009044 117C 0007 0016             		move.b	#7,$16(a0)
0000904A 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009052 317C 2302 0002             		move.w	#$2302,2(a0)
00009058 117C 0004 0001             		move.b	#4,1(a0)
0000905E 117C 0003 0018             		move.b	#3,$18(a0)
00009064 117C 0087 0020             		move.b	#$87,$20(a0)
0000906A 117C 0008 0019             		move.b	#8,$19(a0)
00009070 7000                       		moveq	#0,d0
00009072 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009076 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000907A 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
0000907E 117C 0004 001A             		move.b	#4,$1A(a0)
00009084                            
00009084                            Obj20_Bounce:				; XREF: Obj20_Index
00009084 4EB9 0000 0000             		jsr	ObjectFall
0000908A 4A68 0012                  		tst.w	$12(a0)
0000908E 6B00                       		bmi.s	Obj20_ChkExplode
00009090 4EB9 0000 0000             		jsr	ObjHitFloor
00009096 4A41                       		tst.w	d1
00009098 6A00                       		bpl.s	Obj20_ChkExplode
0000909A D368 000C                  		add.w	d1,$C(a0)
0000909E 317C FD00 0012             		move.w	#-$300,$12(a0)
000090A4 4A03                       		tst.b	d3
000090A6 6700                       		beq.s	Obj20_ChkExplode
000090A8 6B00                       		bmi.s	loc_8CA4
000090AA 4A68 0010                  		tst.w	$10(a0)
000090AE 6A00                       		bpl.s	Obj20_ChkExplode
000090B0 4468 0010                  		neg.w	$10(a0)
000090B4 6000                       		bra.s	Obj20_ChkExplode
000090B6                            ; ===========================================================================
000090B6                            
000090B6                            loc_8CA4:				; XREF: Obj20_Bounce
000090B6 4A68 0010                  		tst.w	$10(a0)
000090BA 6B00                       		bmi.s	Obj20_ChkExplode
000090BC 4468 0010                  		neg.w	$10(a0)
000090C0                            
000090C0                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
000090C0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
000090C4 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
000090C6 10BC 0024                  		move.b	#$24,0(a0)
000090CA 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
000090CE 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
000090D4 6000 0000                  		bra.w	Obj3F		; jump to explosion code
000090D8                            ; ===========================================================================
000090D8                            
000090D8                            Obj20_Animate:				; XREF: Obj20_ChkExplode
000090D8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000090DC 6A00                       		bpl.s	Obj20_Display
000090DE 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
000090E4 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
000090EA                            
000090EA                            Obj20_Display:
000090EA 6100 0000                  		bsr.w	DisplaySprite
000090EE 3038 F72E                  		move.w	($FFFFF72E).w,d0
000090F2 0640 00E0                  		addi.w	#$E0,d0
000090F6 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
000090FA 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
000090FE 4E75                       		rts	
00009100                            ; ===========================================================================
00009100                            ; ---------------------------------------------------------------------------
00009100                            ; Object 24 - explosion	from a destroyed monitor
00009100                            ; ---------------------------------------------------------------------------
00009100                            
00009100                            Obj24:					; XREF: Obj_Index
00009100 7000                       		moveq	#0,d0
00009102 1028 0024                  		move.b	$24(a0),d0
00009106 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000910A 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
0000910E                            ; ===========================================================================
0000910E 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00009110 0000                       		dc.w Obj24_Animate-Obj24_Index
00009112                            ; ===========================================================================
00009112                            
00009112                            Obj24_Main:				; XREF: Obj24_Index
00009112 5428 0024                  		addq.b	#2,$24(a0)
00009116 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
0000911E 317C 041C 0002             		move.w	#$41C,2(a0)
00009124 117C 0004 0001             		move.b	#4,1(a0)
0000912A 117C 0001 0018             		move.b	#1,$18(a0)
00009130 117C 0000 0020             		move.b	#0,$20(a0)
00009136 117C 000C 0019             		move.b	#$C,$19(a0)
0000913C 117C 0009 001E             		move.b	#9,$1E(a0)
00009142 117C 0000 001A             		move.b	#0,$1A(a0)
00009148 303C 00A5                  		move.w	#$A5,d0
0000914C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play explosion sound
00009152                            
00009152                            Obj24_Animate:				; XREF: Obj24_Index
00009152 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009156 6A00                       		bpl.s	Obj24_Display
00009158 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
0000915E 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009162 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00009168 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000916C                            
0000916C                            Obj24_Display:
0000916C 6000 0000                  		bra.w	DisplaySprite
00009170                            ; ===========================================================================
00009170                            ; ---------------------------------------------------------------------------
00009170                            ; Object 27 - explosion	from a destroyed enemy
00009170                            ; ---------------------------------------------------------------------------
00009170                            
00009170                            Obj27:					; XREF: Obj_Index
00009170 7000                       		moveq	#0,d0
00009172 1028 0024                  		move.b	$24(a0),d0
00009176 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
0000917A 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
0000917E                            ; ===========================================================================
0000917E 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00009180 0000                       		dc.w Obj27_Main-Obj27_Index
00009182 0000                       		dc.w Obj27_Animate-Obj27_Index
00009184                            ; ===========================================================================
00009184                            
00009184                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00009184 5428 0024                  		addq.b	#2,$24(a0)
00009188 6100 0000                  		bsr.w	SingleObjLoad
0000918C 6600                       		bne.s	Obj27_Main
0000918E 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00009192 3368 0008 0008             		move.w	8(a0),8(a1)
00009198 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000919E 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
000091A4                            
000091A4                            Obj27_Main:				; XREF: Obj27_Index
000091A4 5428 0024                  		addq.b	#2,$24(a0)
000091A8 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
000091B0 317C 05A0 0002             		move.w	#$5A0,2(a0)
000091B6 117C 0004 0001             		move.b	#4,1(a0)
000091BC 117C 0001 0018             		move.b	#1,$18(a0)
000091C2 117C 0000 0020             		move.b	#0,$20(a0)
000091C8 117C 000C 0019             		move.b	#$C,$19(a0)
000091CE                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
000091CE 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
000091D4 117C 0000 001A             		move.b	#0,$1A(a0)
000091DA 303C 00C1                  		move.w	#$C1,d0
000091DE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
000091E4                            
000091E4 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
000091EA 1028 0028                  		move.b	$28(a0),d0
000091EE 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
000091F4 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
000091FA                            
000091FA                            Obj27_Animate:				; XREF: Obj27_Index
000091FA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000091FE 6A00                       		bpl.s	Obj27_Display
00009200                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009200 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009206 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000920A 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009210 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009214                            
00009214                            Obj27_Display:
00009214 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
0000921A 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
00009220 6000 0000                  		bra.w	DisplaySprite
00009224                            ; ===========================================================================
00009224                            ; ---------------------------------------------------------------------------
00009224                            Obj27_ExplosionXYSpd:
00009224                            		; dc.w	-$350, -$300	; Left
00009224                            		; dc.w	-$200, -$450	; Near middle (left)
00009224                            		; dc.w	0, -$500	; Middle
00009224                            		; dc.w	$200, -$450	; Near middle (right)
00009224                            		; dc.w	$350, -$300	; Right
00009224                            
00009224 FEB0 FC00                  		dc.w	-$150, -$400	; Left
00009228 FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
0000922C 0000 FA00                  		dc.w	0, -$600	; Middle
00009230 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
00009234 0150 FC00                  		dc.w	$150, -$400	; Right
00009238                            
00009238 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
00009252                            ; ---------------------------------------------------------------------------
00009252                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009252                            ; ---------------------------------------------------------------------------
00009252                            
00009252                            Obj3F:					; XREF: Obj_Index
00009252 7000                       		moveq	#0,d0
00009254 1028 0024                  		move.b	$24(a0),d0
00009258 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000925C 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009260                            ; ===========================================================================
00009260 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009262 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
00009264                            ; ===========================================================================
00009264                            
00009264                            Obj3F_Main:				; XREF: Obj3F_Index
00009264 5428 0024                  		addq.b	#2,$24(a0)
00009268 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00009270 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009276 117C 0004 0001             		move.b	#4,1(a0)
0000927C 117C 0001 0018             		move.b	#1,$18(a0)
00009282 117C 0000 0020             		move.b	#0,$20(a0)
00009288 117C 000C 0019             		move.b	#$C,$19(a0)
0000928E 117C 0007 001E             		move.b	#7,$1E(a0)
00009294 117C 0000 001A             		move.b	#0,$1A(a0)
0000929A 303C 00C4                  		move.w	#$C4,d0
0000929E 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
000092A4                            ; ===========================================================================
000092A4                            Ani_obj1E:
000092A4                            	include "_anim\obj1E.asm"
000092A4                            ; ---------------------------------------------------------------------------
000092A4                            ; Animation script - doors (SBZ)
000092A4                            ; ---------------------------------------------------------------------------
000092A4 0000                       		dc.w byte_8E4A-Ani_obj1E
000092A6 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
000092BE 00                         		even
000092BE 00                         		even
000092BE                            
000092BE                            ; ---------------------------------------------------------------------------
000092BE                            ; Sprite mappings - Ball Hog enemy (SBZ)
000092BE                            ; ---------------------------------------------------------------------------
000092BE                            Map_obj1E:
000092BE                            	include "_maps\obj1E.asm"
000092BE                            ; ---------------------------------------------------------------------------
000092BE                            ; Sprite mappings - Ball Hog enemy (SBZ)
000092BE                            ; ---------------------------------------------------------------------------
000092BE 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
000092C2 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
000092C6 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
000092CA 02                         byte_8E6E:	dc.b 2
000092CB EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
000092D0 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
000092D5 02                         byte_8E79:	dc.b 2
000092D6 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
000092DB FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
000092E0 02                         byte_8E84:	dc.b 2
000092E1 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
000092E6 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
000092EB 02                         byte_8E8F:	dc.b 2
000092EC E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
000092F1 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
000092F6 01                         byte_8E9A:	dc.b 1
000092F7 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
000092FC 01                         byte_8EA0:	dc.b 1
000092FD F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00009302                            		even
00009302                            		even
00009302                            
00009302                            ; ---------------------------------------------------------------------------
00009302                            ; Sprite mappings - explosion
00009302                            ; ---------------------------------------------------------------------------
00009302                            Map_obj24:
00009302                            	include "_maps\obj24.asm"
00009302                            ; ---------------------------------------------------------------------------
00009302                            ; Sprite mappings - explosion
00009302                            ; ---------------------------------------------------------------------------
00009302 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009306 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000930A 01                         byte_8EAE:	dc.b 1
0000930B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009310 01                         byte_8EB4:	dc.b 1
00009311 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009316 01                         byte_8EBA:	dc.b 1
00009317 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000931C 01                         byte_8EC0:	dc.b 1
0000931D F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009322                            		even
00009322                            		even
00009322                            
00009322                            ; ---------------------------------------------------------------------------
00009322                            ; Sprite mappings - explosion
00009322                            ; ---------------------------------------------------------------------------
00009322 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009326 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000932A 0000                       		dc.w byte_8EF7-Map_obj27
0000932C 01                         byte_8ED0:	dc.b 1
0000932D F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009332 01                         byte_8ED6:	dc.b 1
00009333 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00009338 01                         byte_8EDC:	dc.b 1
00009339 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000933E 04                         byte_8EE2:	dc.b 4
0000933F EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009344 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009349 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000934E FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009353 04                         byte_8EF7:	dc.b 4
00009354 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009359 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000935E 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009363 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00009368                            		even
00009368                            ; ---------------------------------------------------------------------------
00009368                            ; Sprite mappings - explosion from when	a boss is destroyed
00009368                            ; ---------------------------------------------------------------------------
00009368 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000936A 0000                       		dc.w byte_8F16-Map_obj3F
0000936C 0000                       		dc.w byte_8F1C-Map_obj3F
0000936E FFD6                       		dc.w byte_8EE2-Map_obj3F
00009370 FFEB                       		dc.w byte_8EF7-Map_obj3F
00009372 01                         byte_8F16:	dc.b 1
00009373 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00009378 01                         byte_8F1C:	dc.b 1
00009379 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000937E                            		even
0000937E                            ; ===========================================================================
0000937E                            ; ---------------------------------------------------------------------------
0000937E                            ; Object 28 - animals
0000937E                            ; ---------------------------------------------------------------------------
0000937E                            
0000937E                            Obj28:					; XREF: Obj_Index
0000937E 7000                       		moveq	#0,d0
00009380 1028 0024                  		move.b	$24(a0),d0
00009384 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00009388 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000938C                            ; ===========================================================================
0000938C 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00009390 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009394 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00009398 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000939C 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
000093A0 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
000093A4 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
000093A8 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000093AC 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000093B0 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
000093B4 0000                       		dc.w loc_92D6-Obj28_Index
000093B6                            
000093B6 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
000093C2                            
000093C2 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
000093C6 0000 0000                  		dc.l Map_obj28
000093CA FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
000093CE 0000 0000                  		dc.l Map_obj28a		; mappings address
000093D2 FE80 FD00                  		dc.w $FE80, $FD00
000093D6 0000 0000                  		dc.l Map_obj28
000093DA FEC0 FE80                  		dc.w $FEC0, $FE80
000093DE 0000 0000                  		dc.l Map_obj28a
000093E2 FE40 FD00                  		dc.w $FE40, $FD00
000093E6 0000 0000                  		dc.l Map_obj28b
000093EA FD00 FC00                  		dc.w $FD00, $FC00
000093EE 0000 0000                  		dc.l Map_obj28a
000093F2 FD80 FC80                  		dc.w $FD80, $FC80
000093F6 0000 0000                  		dc.l Map_obj28b
000093FA                            
000093FA FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000940A FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000941A FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009426                            
00009426 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000943A 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
0000944E 0000 0000                  		dc.l Map_obj28b
00009452                            
00009452 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009464 0565 05B3                  		dc.w $565, $5B3
00009468                            ; ===========================================================================
00009468                            
00009468                            Obj28_Ending:				; XREF: Obj28_Index
00009468 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000946C 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009470 7000                       		moveq	#0,d0
00009472 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009476 D040                       		add.w	d0,d0		; multiply d0 by 2
00009478 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000947C 0440 0014                  		subi.w	#$14,d0
00009480 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009486 D040                       		add.w	d0,d0
00009488 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000948E 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009492 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009498 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000949E 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
000094A4 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
000094AA 117C 000C 0016             		move.b	#$C,$16(a0)
000094B0 117C 0004 0001             		move.b	#4,1(a0)
000094B6 08E8 0000 0001             		bset	#0,1(a0)
000094BC 117C 0006 0018             		move.b	#6,$18(a0)
000094C2 117C 0008 0019             		move.b	#8,$19(a0)
000094C8 117C 0007 001E             		move.b	#7,$1E(a0)
000094CE 6000 0000                  		bra.w	DisplaySprite
000094D2                            ; ===========================================================================
000094D2                            
000094D2                            Obj28_FromEnemy:			; XREF: Obj28_Ending
000094D2 5428 0024                  		addq.b	#2,$24(a0)
000094D6 6100 96EA                  		bsr.w	RandomNumber
000094DA 0240 0001                  		andi.w	#1,d0
000094DE 7200                       		moveq	#0,d1
000094E0 1238 FE10                  		move.b	($FFFFFE10).w,d1
000094E4 D241                       		add.w	d1,d1
000094E6 D240                       		add.w	d0,d1
000094E8 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
000094EC 1031 1000                  		move.b	(a1,d1.w),d0
000094F0 1140 0030                  		move.b	d0,$30(a0)
000094F4 E748                       		lsl.w	#3,d0
000094F6 43FA FECA                  		lea	Obj28_Variables(pc),a1
000094FA D2C0                       		adda.w	d0,a1
000094FC 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009500 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009504 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00009508 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000950E 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009514 6700                       		beq.s	loc_90C0	; if yes, branch
00009516 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000951C                            
0000951C                            loc_90C0:
0000951C 117C 000C 0016             		move.b	#$C,$16(a0)
00009522 117C 0004 0001             		move.b	#4,1(a0)
00009528 08E8 0000 0001             		bset	#0,1(a0)
0000952E 117C 0006 0018             		move.b	#6,$18(a0)
00009534 117C 0008 0019             		move.b	#8,$19(a0)
0000953A 117C 0007 001E             		move.b	#7,$1E(a0)
00009540 117C 0002 001A             		move.b	#2,$1A(a0)
00009546 317C FC00 0012             		move.w	#-$400,$12(a0)
0000954C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009550 6600                       		bne.s	loc_911C
00009552 6100 0000                  		bsr.w	SingleObjLoad
00009556 6600                       		bne.s	Obj28_Display
00009558 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000955C 3368 0008 0008             		move.w	8(a0),8(a1)
00009562 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009568 3028 003E                  		move.w	$3E(a0),d0
0000956C E248                       		lsr.w	#1,d0
0000956E 1340 001A                  		move.b	d0,$1A(a1)
00009572                            
00009572                            Obj28_Display:
00009572 6000 0000                  		bra.w	DisplaySprite
00009576                            ; ===========================================================================
00009576                            
00009576                            loc_911C:
00009576 117C 0012 0024             		move.b	#$12,$24(a0)
0000957C 4268 0010                  		clr.w	$10(a0)
00009580 6000 0000                  		bra.w	DisplaySprite
00009584                            ; ===========================================================================
00009584                            
00009584                            loc_912A:				; XREF: Obj28_Index
00009584 4A28 0001                  		tst.b	1(a0)
00009588 6A00 0000                  		bpl.w	DeleteObject
0000958C 6100 0000                  		bsr.w	ObjectFall
00009590 4A68 0012                  		tst.w	$12(a0)
00009594 6B00                       		bmi.s	loc_9180
00009596 4EB9 0000 0000             		jsr	ObjHitFloor
0000959C 4A41                       		tst.w	d1
0000959E 6A00                       		bpl.s	loc_9180
000095A0 D368 000C                  		add.w	d1,$C(a0)
000095A4 3168 0032 0010             		move.w	$32(a0),$10(a0)
000095AA 3168 0034 0012             		move.w	$34(a0),$12(a0)
000095B0 117C 0001 001A             		move.b	#1,$1A(a0)
000095B6 1028 0030                  		move.b	$30(a0),d0
000095BA D000                       		add.b	d0,d0
000095BC 5800                       		addq.b	#4,d0
000095BE 1140 0024                  		move.b	d0,$24(a0)
000095C2 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000095C6 6700                       		beq.s	loc_9180
000095C8 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
000095CE 6700                       		beq.s	loc_9180
000095D0 4468 0010                  		neg.w	$10(a0)
000095D4 0868 0000 0001             		bchg	#0,1(a0)
000095DA                            
000095DA                            loc_9180:
000095DA 6000 0000                  		bra.w	DisplaySprite
000095DE                            ; ===========================================================================
000095DE                            
000095DE                            loc_9184:				; XREF: Obj28_Index
000095DE 6100 0000                  		bsr.w	ObjectFall
000095E2 117C 0001 001A             		move.b	#1,$1A(a0)
000095E8 4A68 0012                  		tst.w	$12(a0)
000095EC 6B00                       		bmi.s	loc_91AE
000095EE 117C 0000 001A             		move.b	#0,$1A(a0)
000095F4 4EB9 0000 0000             		jsr	ObjHitFloor
000095FA 4A41                       		tst.w	d1
000095FC 6A00                       		bpl.s	loc_91AE
000095FE D368 000C                  		add.w	d1,$C(a0)
00009602 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009608                            
00009608                            loc_91AE:
00009608 4A28 0028                  		tst.b	$28(a0)
0000960C 6600                       		bne.s	loc_9224
0000960E 4A28 0001                  		tst.b	1(a0)
00009612 6A00 0000                  		bpl.w	DeleteObject
00009616 6000 0000                  		bra.w	DisplaySprite
0000961A                            ; ===========================================================================
0000961A                            
0000961A                            loc_91C0:				; XREF: Obj28_Index
0000961A 6100 0000                  		bsr.w	SpeedToPos
0000961E 0668 0018 0012             		addi.w	#$18,$12(a0)
00009624 4A68 0012                  		tst.w	$12(a0)
00009628 6B00                       		bmi.s	loc_91FC
0000962A 4EB9 0000 0000             		jsr	ObjHitFloor
00009630 4A41                       		tst.w	d1
00009632 6A00                       		bpl.s	loc_91FC
00009634 D368 000C                  		add.w	d1,$C(a0)
00009638 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000963E 4A28 0028                  		tst.b	$28(a0)
00009642 6700                       		beq.s	loc_91FC
00009644 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000964A 6700                       		beq.s	loc_91FC
0000964C 4468 0010                  		neg.w	$10(a0)
00009650 0868 0000 0001             		bchg	#0,1(a0)
00009656                            
00009656                            loc_91FC:
00009656 5328 001E                  		subq.b	#1,$1E(a0)
0000965A 6A00                       		bpl.s	loc_9212
0000965C 117C 0001 001E             		move.b	#1,$1E(a0)
00009662 5228 001A                  		addq.b	#1,$1A(a0)
00009666 0228 0001 001A             		andi.b	#1,$1A(a0)
0000966C                            
0000966C                            loc_9212:
0000966C 4A28 0028                  		tst.b	$28(a0)
00009670 6600                       		bne.s	loc_9224
00009672 4A28 0001                  		tst.b	1(a0)
00009676 6A00 0000                  		bpl.w	DeleteObject
0000967A 6000 0000                  		bra.w	DisplaySprite
0000967E                            ; ===========================================================================
0000967E                            
0000967E                            loc_9224:				; XREF: Obj28_Index
0000967E 3028 0008                  		move.w	8(a0),d0
00009682 9078 D008                  		sub.w	($FFFFD008).w,d0
00009686 6500                       		bcs.s	loc_923C
00009688 0440 0180                  		subi.w	#$180,d0
0000968C 6A00                       		bpl.s	loc_923C
0000968E 4A28 0001                  		tst.b	1(a0)
00009692 6A00 0000                  		bpl.w	DeleteObject
00009696                            
00009696                            loc_923C:
00009696 6000 0000                  		bra.w	DisplaySprite
0000969A                            ; ===========================================================================
0000969A                            
0000969A                            loc_9240:				; XREF: Obj28_Index
0000969A 4A28 0001                  		tst.b	1(a0)
0000969E 6A00 0000                  		bpl.w	DeleteObject
000096A2 5368 0036                  		subq.w	#1,$36(a0)
000096A6 6600 0000                  		bne.w	loc_925C
000096AA 117C 0002 0024             		move.b	#2,$24(a0)
000096B0 117C 0003 0018             		move.b	#3,$18(a0)
000096B6                            
000096B6                            loc_925C:
000096B6 6000 0000                  		bra.w	DisplaySprite
000096BA                            ; ===========================================================================
000096BA                            
000096BA                            loc_9260:				; XREF: Obj28_Index
000096BA 6100 0000                  		bsr.w	sub_9404
000096BE 6400                       		bcc.s	loc_927C
000096C0 3168 0032 0010             		move.w	$32(a0),$10(a0)
000096C6 3168 0034 0012             		move.w	$34(a0),$12(a0)
000096CC 117C 000E 0024             		move.b	#$E,$24(a0)
000096D2 6000 FF46                  		bra.w	loc_91C0
000096D6                            ; ===========================================================================
000096D6                            
000096D6                            loc_927C:
000096D6 6000 FFA6                  		bra.w	loc_9224
000096DA                            ; ===========================================================================
000096DA                            
000096DA                            loc_9280:				; XREF: Obj28_Index
000096DA 6100 0000                  		bsr.w	sub_9404
000096DE 6A00                       		bpl.s	loc_92B6
000096E0 4268 0010                  		clr.w	$10(a0)
000096E4 4268 0032                  		clr.w	$32(a0)
000096E8 6100 0000                  		bsr.w	SpeedToPos
000096EC 0668 0018 0012             		addi.w	#$18,$12(a0)
000096F2 6100 0000                  		bsr.w	loc_93C4
000096F6 6100 0000                  		bsr.w	loc_93EC
000096FA 5328 001E                  		subq.b	#1,$1E(a0)
000096FE 6A00                       		bpl.s	loc_92B6
00009700 117C 0001 001E             		move.b	#1,$1E(a0)
00009706 5228 001A                  		addq.b	#1,$1A(a0)
0000970A 0228 0001 001A             		andi.b	#1,$1A(a0)
00009710                            
00009710                            loc_92B6:
00009710 6000 FF6C                  		bra.w	loc_9224
00009714                            ; ===========================================================================
00009714                            
00009714                            loc_92BA:				; XREF: Obj28_Index
00009714 6100 0000                  		bsr.w	sub_9404
00009718 6A00                       		bpl.s	loc_9310
0000971A 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009720 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009726 117C 0004 0024             		move.b	#4,$24(a0)
0000972C 6000 FEB0                  		bra.w	loc_9184
00009730                            ; ===========================================================================
00009730                            
00009730                            loc_92D6:				; XREF: Obj28_Index
00009730 6100 0000                  		bsr.w	ObjectFall
00009734 117C 0001 001A             		move.b	#1,$1A(a0)
0000973A 4A68 0012                  		tst.w	$12(a0)
0000973E 6B00                       		bmi.s	loc_9310
00009740 117C 0000 001A             		move.b	#0,$1A(a0)
00009746 4EB9 0000 0000             		jsr	ObjHitFloor
0000974C 4A41                       		tst.w	d1
0000974E 6A00                       		bpl.s	loc_9310
00009750 4628 0029                  		not.b	$29(a0)
00009754 6600                       		bne.s	loc_9306
00009756 4468 0010                  		neg.w	$10(a0)
0000975A 0868 0000 0001             		bchg	#0,1(a0)
00009760                            
00009760                            loc_9306:
00009760 D368 000C                  		add.w	d1,$C(a0)
00009764 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000976A                            
0000976A                            loc_9310:
0000976A 6000 FF12                  		bra.w	loc_9224
0000976E                            ; ===========================================================================
0000976E                            
0000976E                            loc_9314:				; XREF: Obj28_Index
0000976E 6100 0000                  		bsr.w	sub_9404
00009772 6A00                       		bpl.s	loc_932E
00009774 4268 0010                  		clr.w	$10(a0)
00009778 4268 0032                  		clr.w	$32(a0)
0000977C 6100 0000                  		bsr.w	ObjectFall
00009780 6100 0000                  		bsr.w	loc_93C4
00009784 6100 0000                  		bsr.w	loc_93EC
00009788                            
00009788                            loc_932E:
00009788 6000 FEF4                  		bra.w	loc_9224
0000978C                            ; ===========================================================================
0000978C                            
0000978C                            loc_9332:				; XREF: Obj28_Index
0000978C 6100 0000                  		bsr.w	sub_9404
00009790 6A00                       		bpl.s	loc_936C
00009792 6100 0000                  		bsr.w	ObjectFall
00009796 117C 0001 001A             		move.b	#1,$1A(a0)
0000979C 4A68 0012                  		tst.w	$12(a0)
000097A0 6B00                       		bmi.s	loc_936C
000097A2 117C 0000 001A             		move.b	#0,$1A(a0)
000097A8 4EB9 0000 0000             		jsr	ObjHitFloor
000097AE 4A41                       		tst.w	d1
000097B0 6A00                       		bpl.s	loc_936C
000097B2 4468 0010                  		neg.w	$10(a0)
000097B6 0868 0000 0001             		bchg	#0,1(a0)
000097BC D368 000C                  		add.w	d1,$C(a0)
000097C0 3168 0034 0012             		move.w	$34(a0),$12(a0)
000097C6                            
000097C6                            loc_936C:
000097C6 6000 FEB6                  		bra.w	loc_9224
000097CA                            ; ===========================================================================
000097CA                            
000097CA                            loc_9370:				; XREF: Obj28_Index
000097CA 6100 0000                  		bsr.w	sub_9404
000097CE 6A00                       		bpl.s	loc_93C0
000097D0 6100 0000                  		bsr.w	SpeedToPos
000097D4 0668 0018 0012             		addi.w	#$18,$12(a0)
000097DA 4A68 0012                  		tst.w	$12(a0)
000097DE 6B00                       		bmi.s	loc_93AA
000097E0 4EB9 0000 0000             		jsr	ObjHitFloor
000097E6 4A41                       		tst.w	d1
000097E8 6A00                       		bpl.s	loc_93AA
000097EA 4628 0029                  		not.b	$29(a0)
000097EE 6600                       		bne.s	loc_93A0
000097F0 4468 0010                  		neg.w	$10(a0)
000097F4 0868 0000 0001             		bchg	#0,1(a0)
000097FA                            
000097FA                            loc_93A0:
000097FA D368 000C                  		add.w	d1,$C(a0)
000097FE 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009804                            
00009804                            loc_93AA:
00009804 5328 001E                  		subq.b	#1,$1E(a0)
00009808 6A00                       		bpl.s	loc_93C0
0000980A 117C 0001 001E             		move.b	#1,$1E(a0)
00009810 5228 001A                  		addq.b	#1,$1A(a0)
00009814 0228 0001 001A             		andi.b	#1,$1A(a0)
0000981A                            
0000981A                            loc_93C0:
0000981A 6000 FE62                  		bra.w	loc_9224
0000981E                            ; ===========================================================================
0000981E                            
0000981E                            loc_93C4:
0000981E 117C 0001 001A             		move.b	#1,$1A(a0)
00009824 4A68 0012                  		tst.w	$12(a0)
00009828 6B00                       		bmi.s	locret_93EA
0000982A 117C 0000 001A             		move.b	#0,$1A(a0)
00009830 4EB9 0000 0000             		jsr	ObjHitFloor
00009836 4A41                       		tst.w	d1
00009838 6A00                       		bpl.s	locret_93EA
0000983A D368 000C                  		add.w	d1,$C(a0)
0000983E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009844                            
00009844                            locret_93EA:
00009844 4E75                       		rts	
00009846                            ; ===========================================================================
00009846                            
00009846                            loc_93EC:
00009846 08E8 0000 0001             		bset	#0,1(a0)
0000984C 3028 0008                  		move.w	8(a0),d0
00009850 9078 D008                  		sub.w	($FFFFD008).w,d0
00009854 6400                       		bcc.s	locret_9402
00009856 08A8 0000 0001             		bclr	#0,1(a0)
0000985C                            
0000985C                            locret_9402:
0000985C 4E75                       		rts	
0000985E                            
0000985E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000985E                            
0000985E                            
0000985E                            sub_9404:
0000985E 3038 D008                  		move.w	($FFFFD008).w,d0
00009862 9068 0008                  		sub.w	8(a0),d0
00009866 0440 00B8                  		subi.w	#$B8,d0
0000986A 4E75                       		rts	
0000986C                            ; End of function sub_9404
0000986C                            
0000986C                            ; ===========================================================================
0000986C                            ; ---------------------------------------------------------------------------
0000986C                            ; Object 29 - points that appear when you destroy something
0000986C                            ; ---------------------------------------------------------------------------
0000986C                            
0000986C                            Obj29:					; XREF: Obj_Index
0000986C 7000                       		moveq	#0,d0
0000986E 1028 0024                  		move.b	$24(a0),d0
00009872 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009876 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
0000987A 6000 0000                  		bra.w	DisplaySprite
0000987E                            ; ===========================================================================
0000987E 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009880 0000                       		dc.w Obj29_Slower-Obj29_Index
00009882                            ; ===========================================================================
00009882                            
00009882                            Obj29_Main:				; XREF: Obj29_Index
00009882 5428 0024                  		addq.b	#2,$24(a0)
00009886 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
0000988E 317C 2797 0002             		move.w	#$2797,2(a0)
00009894 117C 0004 0001             		move.b	#4,1(a0)
0000989A 117C 0001 0018             		move.b	#1,$18(a0)
000098A0 117C 0008 0019             		move.b	#8,$19(a0)
000098A6 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
000098AC                            
000098AC                            Obj29_Slower:				; XREF: Obj29_Index
000098AC 4A68 0012                  		tst.w	$12(a0)		; is object moving?
000098B0 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
000098B4 6100 0000                  		bsr.w	SpeedToPos
000098B8 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
000098BE 4E75                       		rts	
000098C0                            ; ===========================================================================
000098C0                            ; ---------------------------------------------------------------------------
000098C0                            ; Sprite mappings - animals
000098C0                            ; ---------------------------------------------------------------------------
000098C0                            Map_obj28:
000098C0                            	include "_maps\obj28.asm"
000098C0                            ; ---------------------------------------------------------------------------
000098C0                            ; Sprite mappings - animals
000098C0                            ; ---------------------------------------------------------------------------
000098C0 0000                       		dc.w byte_9472-Map_obj28
000098C2 0000                       		dc.w byte_9478-Map_obj28
000098C4 0000                       		dc.w byte_946C-Map_obj28
000098C6 01                         byte_946C:	dc.b 1
000098C7 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000098CC 01                         byte_9472:	dc.b 1
000098CD F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
000098D2 01                         byte_9478:	dc.b 1
000098D3 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
000098D8                            		even
000098D8                            		even
000098D8                            
000098D8                            Map_obj28a:
000098D8                            	include "_maps\obj28a.asm"
000098D8                            ; ---------------------------------------------------------------------------
000098D8                            ; Sprite mappings - animals
000098D8                            ; ---------------------------------------------------------------------------
000098D8 0000                       		dc.w byte_948A-Map_obj28a
000098DA 0000                       		dc.w byte_9490-Map_obj28a
000098DC 0000                       		dc.w byte_9484-Map_obj28a
000098DE 01                         byte_9484:	dc.b 1
000098DF F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000098E4 01                         byte_948A:	dc.b 1
000098E5 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
000098EA 01                         byte_9490:	dc.b 1
000098EB FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
000098F0                            		even
000098F0                            		even
000098F0                            
000098F0                            Map_obj28b:
000098F0                            	include "_maps\obj28b.asm"
000098F0                            ; ---------------------------------------------------------------------------
000098F0                            ; Sprite mappings - animals
000098F0                            ; ---------------------------------------------------------------------------
000098F0 0000                       		dc.w byte_94A2-Map_obj28b
000098F2 0000                       		dc.w byte_94A8-Map_obj28b
000098F4 0000                       		dc.w byte_949C-Map_obj28b
000098F6 01                         byte_949C:	dc.b 1
000098F7 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000098FC 01                         byte_94A2:	dc.b 1
000098FD FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009902 01                         byte_94A8:	dc.b 1
00009903 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009908                            		even
00009908                            		even
00009908                            
00009908                            ; ---------------------------------------------------------------------------
00009908                            ; Sprite mappings - points that	appear when you	destroy	something
00009908                            ; ---------------------------------------------------------------------------
00009908                            Map_obj29:
00009908                            	include "_maps\obj29.asm"
00009908                            ; ---------------------------------------------------------------------------
00009908                            ; Sprite mappings - points that	appear when you	destroy	something
00009908                            ; ---------------------------------------------------------------------------
00009908 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000990C 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009910 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009914 0000                       		dc.w byte_94E5-Map_obj29
00009916 01                         byte_94BC:	dc.b 1
00009917 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000991C 01                         byte_94C2:	dc.b 1
0000991D FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009922 01                         byte_94C8:	dc.b 1
00009923 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009928 01                         byte_94CE:	dc.b 1
00009929 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
0000992E 01                         byte_94D4:	dc.b 1
0000992F FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009934 02                         byte_94DA:	dc.b 2
00009935 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000993A FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
0000993F 02                         byte_94E5:	dc.b 2
00009940 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009945 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000994A                            		even
0000994A                            		even
0000994A                            
0000994A                            ; ===========================================================================
0000994A                            ; ---------------------------------------------------------------------------
0000994A                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000994A                            ; ---------------------------------------------------------------------------
0000994A                            
0000994A                            Obj1F:					; XREF: Obj_Index
0000994A 7000                       		moveq	#0,d0
0000994C 1028 0024                  		move.b	$24(a0),d0
00009950 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009954 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009958                            ; ===========================================================================
00009958 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000995A 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000995C 0000                       		dc.w Obj1F_Delete-Obj1F_Index
0000995E 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009960 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009962                            ; ===========================================================================
00009962                            
00009962                            Obj1F_Main:				; XREF: Obj1F_Index
00009962 117C 0010 0016             		move.b	#$10,$16(a0)
00009968 117C 0008 0017             		move.b	#8,$17(a0)
0000996E 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009976 317C 0400 0002             		move.w	#$400,2(a0)
0000997C 117C 0004 0001             		move.b	#4,1(a0)
00009982 117C 0003 0018             		move.b	#3,$18(a0)
00009988 117C 0006 0020             		move.b	#6,$20(a0)
0000998E 117C 0015 0019             		move.b	#$15,$19(a0)
00009994 6100 0000                  		bsr.w	ObjectFall
00009998 4EB9 0000 0000             		jsr	ObjHitFloor
0000999E 4A41                       		tst.w	d1
000099A0 6A00                       		bpl.s	locret_955A
000099A2 D368 000C                  		add.w	d1,$C(a0)
000099A6 1143 0026                  		move.b	d3,$26(a0)
000099AA 317C 0000 0012             		move.w	#0,$12(a0)
000099B0 5428 0024                  		addq.b	#2,$24(a0)
000099B4                            
000099B4                            locret_955A:
000099B4 4E75                       		rts	
000099B6                            ; ===========================================================================
000099B6                            
000099B6                            Obj1F_Action:				; XREF: Obj1F_Index
000099B6 7000                       		moveq	#0,d0
000099B8 1028 0025                  		move.b	$25(a0),d0
000099BC 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
000099C0 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
000099C4 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
000099CA 6100 0000                  		bsr.w	AnimateSprite
000099CE 6000 0000                  		bra.w	MarkObjGone
000099D2                            ; ===========================================================================
000099D2 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
000099D4 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
000099D6                            ; ===========================================================================
000099D6                            
000099D6                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
000099D6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000099DA 6A00                       		bpl.s	locret_95B6
000099DC 4A28 0001                  		tst.b	1(a0)
000099E0 6A00                       		bpl.s	Obj1F_Move
000099E2 0868 0001 0032             		bchg	#1,$32(a0)
000099E8 6600                       		bne.s	Obj1F_MakeFire
000099EA                            
000099EA                            Obj1F_Move:
000099EA 5428 0025                  		addq.b	#2,$25(a0)
000099EE 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
000099F4 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
000099FA 6100 0000                  		bsr.w	Obj1F_SetAni
000099FE 5600                       		addq.b	#3,d0
00009A00 1140 001C                  		move.b	d0,$1C(a0)
00009A04 0868 0000 0022             		bchg	#0,$22(a0)
00009A0A 6600                       		bne.s	locret_95B6
00009A0C 4468 0010                  		neg.w	$10(a0)		; change direction
00009A10                            
00009A10                            locret_95B6:
00009A10 4E75                       		rts	
00009A12                            ; ===========================================================================
00009A12                            
00009A12                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009A12 317C 003B 0030             		move.w	#$3B,$30(a0)
00009A18 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009A1E 6100 0000                  		bsr.w	SingleObjLoad
00009A22 6600                       		bne.s	Obj1F_MakeFire2
00009A24 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009A28 137C 0006 0024             		move.b	#6,$24(a1)
00009A2E 3368 0008 0008             		move.w	8(a0),8(a1)
00009A34 0469 0010 0008             		subi.w	#$10,8(a1)
00009A3A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009A40 337C FF00 0010             		move.w	#-$100,$10(a1)
00009A46                            
00009A46                            Obj1F_MakeFire2:
00009A46 6100 0000                  		bsr.w	SingleObjLoad
00009A4A 6600                       		bne.s	locret_9618
00009A4C 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009A50 137C 0006 0024             		move.b	#6,$24(a1)
00009A56 3368 0008 0008             		move.w	8(a0),8(a1)
00009A5C 0669 0010 0008             		addi.w	#$10,8(a1)
00009A62 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009A68 337C 0100 0010             		move.w	#$100,$10(a1)
00009A6E                            
00009A6E                            locret_9618:
00009A6E 4E75                       		rts	
00009A70                            ; ===========================================================================
00009A70                            
00009A70                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009A70 5368 0030                  		subq.w	#1,$30(a0)
00009A74 6B00                       		bmi.s	loc_966E
00009A76 6100 0000                  		bsr.w	SpeedToPos
00009A7A 0868 0000 0032             		bchg	#0,$32(a0)
00009A80 6600                       		bne.s	loc_9654
00009A82 3628 0008                  		move.w	8(a0),d3
00009A86 0643 0010                  		addi.w	#$10,d3
00009A8A 0828 0000 0022             		btst	#0,$22(a0)
00009A90 6700                       		beq.s	loc_9640
00009A92 0443 0020                  		subi.w	#$20,d3
00009A96                            
00009A96                            loc_9640:
00009A96 4EB9 0000 0000             		jsr	ObjHitFloor2
00009A9C 0C41 FFF8                  		cmpi.w	#-8,d1
00009AA0 6D00                       		blt.s	loc_966E
00009AA2 0C41 000C                  		cmpi.w	#$C,d1
00009AA6 6C00                       		bge.s	loc_966E
00009AA8 4E75                       		rts	
00009AAA                            ; ===========================================================================
00009AAA                            
00009AAA                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009AAA 4EB9 0000 0000             		jsr	ObjHitFloor
00009AB0 D368 000C                  		add.w	d1,$C(a0)
00009AB4 1143 0026                  		move.b	d3,$26(a0)
00009AB8 6100 0000                  		bsr.w	Obj1F_SetAni
00009ABC 5600                       		addq.b	#3,d0
00009ABE 1140 001C                  		move.b	d0,$1C(a0)
00009AC2 4E75                       		rts	
00009AC4                            ; ===========================================================================
00009AC4                            
00009AC4                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009AC4 5528 0025                  		subq.b	#2,$25(a0)
00009AC8 317C 003B 0030             		move.w	#59,$30(a0)
00009ACE 317C 0000 0010             		move.w	#0,$10(a0)
00009AD4 6100 0000                  		bsr.w	Obj1F_SetAni
00009AD8 1140 001C                  		move.b	d0,$1C(a0)
00009ADC 4E75                       		rts	
00009ADE                            ; ---------------------------------------------------------------------------
00009ADE                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009ADE                            ; ---------------------------------------------------------------------------
00009ADE                            
00009ADE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009ADE                            
00009ADE                            
00009ADE                            Obj1F_SetAni:				; XREF: loc_966E
00009ADE 7000                       		moveq	#0,d0
00009AE0 1628 0026                  		move.b	$26(a0),d3
00009AE4 6B00                       		bmi.s	loc_96A4
00009AE6 0C03 0006                  		cmpi.b	#6,d3
00009AEA 6500                       		bcs.s	locret_96A2
00009AEC 7001                       		moveq	#1,d0
00009AEE 0828 0000 0022             		btst	#0,$22(a0)
00009AF4 6600                       		bne.s	locret_96A2
00009AF6 7002                       		moveq	#2,d0
00009AF8                            
00009AF8                            locret_96A2:
00009AF8 4E75                       		rts	
00009AFA                            ; ===========================================================================
00009AFA                            
00009AFA                            loc_96A4:				; XREF: Obj1F_SetAni
00009AFA 0C03 00FA                  		cmpi.b	#-6,d3
00009AFE 6200                       		bhi.s	locret_96B6
00009B00 7002                       		moveq	#2,d0
00009B02 0828 0000 0022             		btst	#0,$22(a0)
00009B08 6600                       		bne.s	locret_96B6
00009B0A 7001                       		moveq	#1,d0
00009B0C                            
00009B0C                            locret_96B6:
00009B0C 4E75                       		rts	
00009B0E                            ; End of function Obj1F_SetAni
00009B0E                            
00009B0E                            ; ===========================================================================
00009B0E                            
00009B0E                            Obj1F_Delete:				; XREF: Obj1F_Index
00009B0E 6100 0000                  		bsr.w	DeleteObject
00009B12 4E75                       		rts	
00009B14                            ; ===========================================================================
00009B14                            ; ---------------------------------------------------------------------------
00009B14                            ; Sub-object - missile that the	Crabmeat throws
00009B14                            ; ---------------------------------------------------------------------------
00009B14                            
00009B14                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009B14 5428 0024                  		addq.b	#2,$24(a0)
00009B18 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009B20 317C 0400 0002             		move.w	#$400,2(a0)
00009B26 117C 0004 0001             		move.b	#4,1(a0)
00009B2C 117C 0003 0018             		move.b	#3,$18(a0)
00009B32 117C 0087 0020             		move.b	#$87,$20(a0)
00009B38 117C 0008 0019             		move.b	#8,$19(a0)
00009B3E 317C FC00 0012             		move.w	#-$400,$12(a0)
00009B44 117C 0007 001C             		move.b	#7,$1C(a0)
00009B4A                            
00009B4A                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009B4A 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009B50 6100 0000                  		bsr.w	AnimateSprite
00009B54 6100 0000                  		bsr.w	ObjectFall
00009B58 6100 0000                  		bsr.w	DisplaySprite
00009B5C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009B60 0640 00E0                  		addi.w	#$E0,d0
00009B64 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009B68 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009B6A 4E75                       		rts	
00009B6C                            ; ===========================================================================
00009B6C                            
00009B6C                            Obj1F_Delete2:
00009B6C 6000 0000                  		bra.w	DeleteObject
00009B70                            ; ===========================================================================
00009B70                            Ani_obj1F:
00009B70                            	include "_anim\obj1F.asm"
00009B70                            ; ---------------------------------------------------------------------------
00009B70                            ; Animation script - Crabmeat enemy
00009B70                            ; ---------------------------------------------------------------------------
00009B70 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009B76 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009B7C 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009B80 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009B84 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009B88 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009B8C 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009B92 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009B98 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009B9E 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009BA2 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009BA6                            		even
00009BA6                            		even
00009BA6                            
00009BA6                            ; ---------------------------------------------------------------------------
00009BA6                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009BA6                            ; ---------------------------------------------------------------------------
00009BA6                            Map_obj1F:
00009BA6                            	include "_maps\obj1F.asm"
00009BA6                            Map_1514:
00009BA6 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009BA8 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009BAA 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009BAC 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009BAE 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009BB0 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009BB2 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009BB4 03                         Map_1514_E: 	dc.b $3
00009BB5 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009BBA F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009BBF F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009BC4 03                         Map_1514_1E: 	dc.b $3
00009BC5 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009BCA F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009BCF F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009BD4 03                         Map_1514_2E: 	dc.b $3
00009BD5 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009BDA F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009BDF F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009BE4 03                         Map_1514_3E: 	dc.b $3
00009BE5 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009BEA F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009BEF F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009BF4 03                         Map_1514_4E: 	dc.b $3
00009BF5 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009BFA F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009BFF F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C04 01                         Map_1514_5E: 	dc.b $1
00009C05 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
00009C0A 01                         Map_1514_64: 	dc.b $1
00009C0B F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
00009C10                            	even
00009C10                            	even
00009C10                            
00009C10                            ; ===========================================================================
00009C10                            ; ---------------------------------------------------------------------------
00009C10                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009C10                            ; ---------------------------------------------------------------------------
00009C10                            
00009C10                            Obj22:					; XREF: Obj_Index
00009C10 7000                       		moveq	#0,d0
00009C12 1028 0024                  		move.b	$24(a0),d0
00009C16 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009C1A 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009C1E                            ; ===========================================================================
00009C1E 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009C20 0000                       		dc.w Obj22_Action-Obj22_Index
00009C22 0000                       		dc.w Obj22_Delete-Obj22_Index
00009C24                            ; ===========================================================================
00009C24                            
00009C24                            Obj22_Main:				; XREF: Obj22_Index
00009C24 5428 0024                  		addq.b	#2,$24(a0)
00009C28 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009C30 317C 0444 0002             		move.w	#$444,2(a0)
00009C36 117C 0004 0001             		move.b	#4,1(a0)
00009C3C 117C 0003 0018             		move.b	#3,$18(a0)
00009C42 117C 0008 0020             		move.b	#8,$20(a0)
00009C48 117C 0018 0019             		move.b	#$18,$19(a0)
00009C4E                            
00009C4E                            Obj22_Action:				; XREF: Obj22_Index
00009C4E 7000                       		moveq	#0,d0
00009C50 1028 0025                  		move.b	$25(a0),d0
00009C54 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009C58 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009C5C 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009C62 6100 0000                  		bsr.w	AnimateSprite
00009C66 6000 0000                  		bra.w	MarkObjGone
00009C6A                            ; ===========================================================================
00009C6A 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009C6C 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009C6E                            ; ===========================================================================
00009C6E                            
00009C6E                            Obj22_Move:				; XREF: Obj22_Index2
00009C6E 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009C72 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009C74 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009C7A 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009C7C 5428 0025                  		addq.b	#2,$25(a0)
00009C80 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009C86 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009C8C 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009C92 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009C98 6600                       		bne.s	locret_986C	; if not, branch
00009C9A 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009C9E                            
00009C9E                            locret_986C:
00009C9E 4E75                       		rts	
00009CA0                            ; ===========================================================================
00009CA0                            
00009CA0                            Obj22_Fire:				; XREF: Obj22_Move
00009CA0 6100 0000                  		bsr.w	SingleObjLoad
00009CA4 6600                       		bne.s	locret_98D0
00009CA6 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009CAA 3368 0008 0008             		move.w	8(a0),8(a1)
00009CB0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009CB6 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009CBC 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009CC2 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009CC8 303C 0018                  		move.w	#$18,d0
00009CCC 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009CD2 6600                       		bne.s	loc_98AA	; if not, branch
00009CD4 4440                       		neg.w	d0
00009CD6 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009CDA                            
00009CDA                            loc_98AA:
00009CDA D169 0008                  		add.w	d0,8(a1)
00009CDE 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009CE4 337C 000E 0032             		move.w	#$E,$32(a1)
00009CEA 2348 003C                  		move.l	a0,$3C(a1)
00009CEE 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009CF4 317C 003B 0032             		move.w	#$3B,$32(a0)
00009CFA 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009D00                            
00009D00                            locret_98D0:
00009D00 4E75                       		rts	
00009D02                            ; ===========================================================================
00009D02                            
00009D02                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009D02 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009D06 6B00                       		bmi.s	Obj22_ChgDir
00009D08 6100 0000                  		bsr.w	SpeedToPos
00009D0C 4A28 0034                  		tst.b	$34(a0)
00009D10 6600                       		bne.s	locret_992A
00009D12 3038 D008                  		move.w	($FFFFD008).w,d0
00009D16 9068 0008                  		sub.w	8(a0),d0
00009D1A 6A00                       		bpl.s	Obj22_SetNrSonic
00009D1C 4440                       		neg.w	d0
00009D1E                            
00009D1E                            Obj22_SetNrSonic:
00009D1E 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009D22 6400                       		bcc.s	locret_992A	; if not, branch
00009D24 4A28 0001                  		tst.b	1(a0)
00009D28 6A00                       		bpl.s	locret_992A
00009D2A 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009D30 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009D36 6000                       		bra.s	Obj22_Stop
00009D38                            ; ===========================================================================
00009D38                            
00009D38                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009D38 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009D3E 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
00009D44 317C 003B 0032             		move.w	#59,$32(a0)
00009D4A                            
00009D4A                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009D4A 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009D4E 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009D54 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009D5A                            
00009D5A                            locret_992A:
00009D5A 4E75                       		rts	
00009D5C                            ; ===========================================================================
00009D5C                            
00009D5C                            Obj22_Delete:				; XREF: Obj22_Index
00009D5C 6100 0000                  		bsr.w	DeleteObject
00009D60 4E75                       		rts	
00009D62                            ; ===========================================================================
00009D62                            ; ---------------------------------------------------------------------------
00009D62                            ; Object 23 - missile that Buzz	Bomber throws
00009D62                            ; ---------------------------------------------------------------------------
00009D62                            
00009D62                            Obj23:					; XREF: Obj_Index
00009D62 7000                       		moveq	#0,d0
00009D64 1028 0024                  		move.b	$24(a0),d0
00009D68 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009D6C 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009D70                            ; ===========================================================================
00009D70 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009D72 0000                       		dc.w Obj23_Animate-Obj23_Index
00009D74 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009D76 0000                       		dc.w Obj23_Delete-Obj23_Index
00009D78 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009D7A                            ; ===========================================================================
00009D7A                            
00009D7A                            Obj23_Main:				; XREF: Obj23_Index
00009D7A 5368 0032                  		subq.w	#1,$32(a0)
00009D7E 6A00                       		bpl.s	Obj23_ChkCancel
00009D80 5428 0024                  		addq.b	#2,$24(a0)
00009D84 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009D8C 317C 2444 0002             		move.w	#$2444,2(a0)
00009D92 117C 0004 0001             		move.b	#4,1(a0)
00009D98 117C 0003 0018             		move.b	#3,$18(a0)
00009D9E 117C 0008 0019             		move.b	#8,$19(a0)
00009DA4 0228 0003 0022             		andi.b	#3,$22(a0)
00009DAA 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
00009DAE 6700                       		beq.s	Obj23_Animate	; if not, branch
00009DB0 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00009DB6 117C 0087 0020             		move.b	#$87,$20(a0)
00009DBC 117C 0001 001C             		move.b	#1,$1C(a0)
00009DC2 6000                       		bra.s	Obj23_Animate2
00009DC4                            ; ===========================================================================
00009DC4                            
00009DC4                            Obj23_Animate:				; XREF: Obj23_Index
00009DC4 6100                       		bsr.s	Obj23_ChkCancel
00009DC6 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009DCC 6100 0000                  		bsr.w	AnimateSprite
00009DD0 6000 0000                  		bra.w	DisplaySprite
00009DD4                            ; ---------------------------------------------------------------------------
00009DD4                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009DD4                            ; destroyed, and if it has, then cancel	the missile
00009DD4                            ; ---------------------------------------------------------------------------
00009DD4                            
00009DD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009DD4                            
00009DD4                            
00009DD4                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009DD4 2268 003C                  		movea.l	$3C(a0),a1
00009DD8 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009DDC 6700                       		beq.s	Obj23_Delete	; if yes, branch
00009DDE 4E75                       		rts	
00009DE0                            ; End of function Obj23_ChkCancel
00009DE0                            
00009DE0                            ; ===========================================================================
00009DE0                            
00009DE0                            Obj23_FromBuzz:				; XREF: Obj23_Index
00009DE0 0828 0007 0022             		btst	#7,$22(a0)
00009DE6 6600                       		bne.s	Obj23_Explode
00009DE8 117C 0087 0020             		move.b	#$87,$20(a0)
00009DEE 117C 0001 001C             		move.b	#1,$1C(a0)
00009DF4 6100 0000                  		bsr.w	SpeedToPos
00009DF8 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009DFE 6100 0000                  		bsr.w	AnimateSprite
00009E02 6100 0000                  		bsr.w	DisplaySprite
00009E06 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009E0A 0640 00E0                  		addi.w	#$E0,d0
00009E0E B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009E12 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00009E14 4E75                       		rts	
00009E16                            ; ===========================================================================
00009E16                            
00009E16                            Obj23_Explode:				; XREF: Obj23_FromBuzz
00009E16 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
00009E1A 117C 0000 0024             		move.b	#0,$24(a0)
00009E20 6000 F2DE                  		bra.w	Obj24
00009E24                            ; ===========================================================================
00009E24                            
00009E24                            Obj23_Delete:				; XREF: Obj23_Index
00009E24 6100 0000                  		bsr.w	DeleteObject
00009E28 4E75                       		rts	
00009E2A                            ; ===========================================================================
00009E2A                            
00009E2A                            Obj23_FromNewt:				; XREF: Obj23_Index
00009E2A 4A28 0001                  		tst.b	1(a0)
00009E2E 6AF4                       		bpl.s	Obj23_Delete
00009E30 6100 0000                  		bsr.w	SpeedToPos
00009E34                            
00009E34                            Obj23_Animate2:				; XREF: Obj23_Main
00009E34 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009E3A 6100 0000                  		bsr.w	AnimateSprite
00009E3E 6100 0000                  		bsr.w	DisplaySprite
00009E42 4E75                       		rts	
00009E44                            ; ===========================================================================
00009E44                            Ani_obj22:
00009E44                            	include "_anim\obj22.asm"
00009E44                            ; ---------------------------------------------------------------------------
00009E44                            ; Animation script - Buzz Bomber enemy
00009E44                            ; ---------------------------------------------------------------------------
00009E44 0000                       		dc.w byte_9A1E-Ani_obj22
00009E46 0000                       		dc.w byte_9A22-Ani_obj22
00009E48 0000                       		dc.w byte_9A26-Ani_obj22
00009E4A 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
00009E4E 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
00009E52 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
00009E56                            		even
00009E56                            		even
00009E56                            
00009E56                            Ani_obj23:
00009E56                            	include "_anim\obj23.asm"
00009E56                            ; ---------------------------------------------------------------------------
00009E56                            ; Animation script - missile that Buzz Bomber throws
00009E56                            ; ---------------------------------------------------------------------------
00009E56 0000                       		dc.w byte_9A2E-Ani_obj23
00009E58 0000                       		dc.w byte_9A32-Ani_obj23
00009E5A 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
00009E5E 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
00009E62                            		even
00009E62                            		even
00009E62                            
00009E62                            ; ---------------------------------------------------------------------------
00009E62                            ; Sprite mappings - Buzz Bomber	enemy
00009E62                            ; ---------------------------------------------------------------------------
00009E62                            Map_obj22:
00009E62                            	include "_maps\obj22.asm"
00009E62                            Map_e97a:
00009E62 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
00009E64 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
00009E66 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
00009E68 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
00009E6A 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
00009E6C 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
00009E6E 06                         Map_e97a_C: 	dc.b $6
00009E6F F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009E74 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009E79 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009E7E 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009E83 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009E88 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009E8D 06                         Map_e97a_2B: 	dc.b $6
00009E8E F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009E93 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009E98 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009E9D 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009EA2 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009EA7 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009EAC 07                         Map_e97a_4A: 	dc.b $7
00009EAD 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
00009EB2 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009EB7 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009EBC 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009EC1 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009EC6 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009ECB F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009ED0 07                         Map_e97a_6E: 	dc.b $7
00009ED1 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
00009ED6 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009EDB F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009EE0 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009EE5 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009EEA F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009EEF F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009EF4 06                         Map_e97a_92: 	dc.b $6
00009EF5 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009EFA 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009EFF 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009F04 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009F09 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009F0E F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009F13 04                         Map_e97a_B1: 	dc.b $4
00009F14 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009F19 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009F1E 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009F23 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009F28                            	even
00009F28                            	even
00009F28                            
00009F28                            ; ---------------------------------------------------------------------------
00009F28                            ; Sprite mappings - missile that Buzz Bomber throws
00009F28                            ; ---------------------------------------------------------------------------
00009F28                            Map_obj23:
00009F28                            	include "_maps\obj23.asm"
00009F28                            ; ---------------------------------------------------------------------------
00009F28                            ; Sprite mappings - missile that Buzz Bomber throws
00009F28                            ; ---------------------------------------------------------------------------
00009F28 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
00009F2C 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
00009F30 01                         byte_9B0E:	dc.b 1
00009F31 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
00009F36 01                         byte_9B14:	dc.b 1
00009F37 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
00009F3C 01                         byte_9B1A:	dc.b 1
00009F3D F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
00009F42 01                         byte_9B20:	dc.b 1
00009F43 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
00009F48                            		even
00009F48                            		even
00009F48                            
00009F48                            ; ===========================================================================
00009F48                            ; ---------------------------------------------------------------------------
00009F48                            ; Object 25 - rings
00009F48                            ; ---------------------------------------------------------------------------
00009F48                            
00009F48                            Obj25:					; XREF: Obj_Index
00009F48 7000                       		moveq	#0,d0
00009F4A 1028 0024                  		move.b	$24(a0),d0
00009F4E 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
00009F52 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
00009F56                            ; ===========================================================================
00009F56 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
00009F58 0000                       		dc.w Obj25_Animate-Obj25_Index
00009F5A 0000                       		dc.w Obj25_Collect-Obj25_Index
00009F5C 0000                       		dc.w Obj25_Sparkle-Obj25_Index
00009F5E 0000                       		dc.w Obj25_Delete-Obj25_Index
00009F60                            ; ---------------------------------------------------------------------------
00009F60                            ; Distances between rings (format: horizontal, vertical)
00009F60                            ; ---------------------------------------------------------------------------
00009F60 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
00009F62 1800                       		dc.b $18, 0		; horizontal normal
00009F64 2000                       		dc.b $20, 0		; horizontal wide
00009F66 0010                       		dc.b 0,	$10		; vertical tight
00009F68 0018                       		dc.b 0,	$18		; vertical normal
00009F6A 0020                       		dc.b 0,	$20		; vertical wide
00009F6C 1010                       		dc.b $10, $10		; diagonal
00009F6E 1818                       		dc.b $18, $18
00009F70 2020                       		dc.b $20, $20
00009F72 F010                       		dc.b $F0, $10
00009F74 E818                       		dc.b $E8, $18
00009F76 E020                       		dc.b $E0, $20
00009F78 1008                       		dc.b $10, 8
00009F7A 1810                       		dc.b $18, $10
00009F7C F008                       		dc.b $F0, 8
00009F7E E810                       		dc.b $E8, $10
00009F80                            ; ===========================================================================
00009F80                            
00009F80                            Obj25_Main:				; XREF: Obj25_Index
00009F80 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009F84 7000                       		moveq	#0,d0
00009F86 1028 0023                  		move.b	$23(a0),d0
00009F8A 45F2 0002                  		lea	2(a2,d0.w),a2
00009F8E 1812                       		move.b	(a2),d4
00009F90 1228 0028                  		move.b	$28(a0),d1
00009F94 1001                       		move.b	d1,d0
00009F96 0241 0007                  		andi.w	#7,d1
00009F9A 0C41 0007                  		cmpi.w	#7,d1
00009F9E 6600                       		bne.s	loc_9B80
00009FA0 7206                       		moveq	#6,d1
00009FA2                            
00009FA2                            loc_9B80:
00009FA2 4841                       		swap	d1
00009FA4 323C 0000                  		move.w	#0,d1
00009FA8 E808                       		lsr.b	#4,d0
00009FAA D040                       		add.w	d0,d0
00009FAC 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
00009FB0 4885                       		ext.w	d5
00009FB2 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
00009FB6 4886                       		ext.w	d6
00009FB8 2248                       		movea.l	a0,a1
00009FBA 3428 0008                  		move.w	8(a0),d2
00009FBE 3628 000C                  		move.w	$C(a0),d3
00009FC2 E20C                       		lsr.b	#1,d4
00009FC4 6500                       		bcs.s	loc_9C02
00009FC6 0892 0007                  		bclr	#7,(a2)
00009FCA 6000                       		bra.s	loc_9BBA
00009FCC                            ; ===========================================================================
00009FCC                            
00009FCC                            Obj25_MakeRings:
00009FCC 4841                       		swap	d1
00009FCE E20C                       		lsr.b	#1,d4
00009FD0 6500                       		bcs.s	loc_9C02
00009FD2 0892 0007                  		bclr	#7,(a2)
00009FD6 6100 0000                  		bsr.w	SingleObjLoad
00009FDA 6600                       		bne.s	loc_9C0E
00009FDC                            
00009FDC                            loc_9BBA:				; XREF: Obj25_Main
00009FDC 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
00009FE0 5429 0024                  		addq.b	#2,$24(a1)
00009FE4 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
00009FE8 3368 0008 0032             		move.w	8(a0),$32(a1)
00009FEE 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
00009FF2 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
00009FFA 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A000 137C 0004 0001             		move.b	#4,1(a1)
0000A006 137C 0002 0018             		move.b	#2,$18(a1)
0000A00C 137C 0047 0020             		move.b	#$47,$20(a1)
0000A012 137C 0008 0019             		move.b	#8,$19(a1)
0000A018 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A01E 1341 0034                  		move.b	d1,$34(a1)
0000A022                            
0000A022                            loc_9C02:
0000A022 5241                       		addq.w	#1,d1
0000A024 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A026 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A028 4841                       		swap	d1
0000A02A 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A02E                            
0000A02E                            loc_9C0E:
0000A02E 0812 0000                  		btst	#0,(a2)
0000A032 6600 0000                  		bne.w	DeleteObject
0000A036                            
0000A036                            Obj25_Animate:				; XREF: Obj25_Index
0000A036 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A03C 6100 0000                  		bsr.w	DisplaySprite
0000A040 3028 0032                  		move.w	$32(a0),d0
0000A044 0240 FF80                  		andi.w	#$FF80,d0
0000A048 3238 F700                  		move.w	($FFFFF700).w,d1
0000A04C 0441 0080                  		subi.w	#$80,d1
0000A050 0241 FF80                  		andi.w	#$FF80,d1
0000A054 9041                       		sub.w	d1,d0
0000A056 0C40 0280                  		cmpi.w	#$280,d0
0000A05A 6200                       		bhi.s	Obj25_Delete
0000A05C 4E75                       		rts	
0000A05E                            ; ===========================================================================
0000A05E                            
0000A05E                            Obj25_Collect:				; XREF: Obj25_Index
0000A05E 5428 0024                  		addq.b	#2,$24(a0)
0000A062 117C 0000 0020             		move.b	#0,$20(a0)
0000A068 117C 0001 0018             		move.b	#1,$18(a0)
0000A06E 6100 0000                  		bsr.w	CollectRing
0000A072 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A076 7000                       		moveq	#0,d0
0000A078 1028 0023                  		move.b	$23(a0),d0
0000A07C 1228 0034                  		move.b	$34(a0),d1
0000A080 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A084                            
0000A084                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A084 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A08A 6100 0000                  		bsr.w	AnimateSprite
0000A08E 6000 0000                  		bra.w	DisplaySprite
0000A092                            ; ===========================================================================
0000A092                            
0000A092                            Obj25_Delete:				; XREF: Obj25_Index
0000A092 6000 0000                  		bra.w	DeleteObject
0000A096                            
0000A096                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A096                            
0000A096                            
0000A096                            CollectRing:				; XREF: Obj25_Collect
0000A096 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A09A 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A0A0 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A0A4 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A0AA 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A0AC 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A0B2 6700                       		beq.s	loc_9CA4
0000A0B4 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A0BA 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A0BC 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A0C2 6600                       		bne.s	Obj25_PlaySnd
0000A0C4                            
0000A0C4                            loc_9CA4:
0000A0C4 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A0C8 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A0CC 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A0D0                            
0000A0D0                            Obj25_PlaySnd:
0000A0D0 4EF9 0000 15BC             		jmp	(PlaySound_Special).l
0000A0D6                            ; End of function CollectRing
0000A0D6                            
0000A0D6                            ; ===========================================================================
0000A0D6                            ; ---------------------------------------------------------------------------
0000A0D6                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A0D6                            ; ---------------------------------------------------------------------------
0000A0D6                            
0000A0D6                            Obj37:					; XREF: Obj_Index
0000A0D6 7000                       		moveq	#0,d0
0000A0D8 1028 0024                  		move.b	$24(a0),d0
0000A0DC 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A0E0 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A0E4                            ; ===========================================================================
0000A0E4 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A0E6 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A0E8 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A0EA 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A0EC 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A0EE                            ; ===========================================================================
0000A0EE                            
0000A0EE                            Obj37_CountRings:			; XREF: Obj37_Index
0000A0EE 2248                       		movea.l	a0,a1
0000A0F0 7A00                       		moveq	#0,d5
0000A0F2 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A0F6 7020                       		moveq	#32,d0
0000A0F8 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A0FA 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A0FC 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A0FE                            
0000A0FE                            loc_9CDE:
0000A0FE 5345                       		subq.w	#1,d5
0000A100 383C 0288                  		move.w	#$288,d4
0000A104 6000                       		bra.s	Obj37_MakeRings
0000A106                            ; ===========================================================================
0000A106                            
0000A106                            Obj37_Loop:
0000A106 6100 0000                  		bsr.w	SingleObjLoad
0000A10A 6600 0000                  		bne.w	Obj37_ResetCounter
0000A10E                            
0000A10E                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A10E 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A112 5429 0024                  		addq.b	#2,$24(a1)
0000A116 137C 0008 0016             		move.b	#8,$16(a1)
0000A11C 137C 0008 0017             		move.b	#8,$17(a1)
0000A122 3368 0008 0008             		move.w	8(a0),8(a1)
0000A128 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A12E 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A136 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A13C 137C 0004 0001             		move.b	#4,1(a1)
0000A142 137C 0003 0018             		move.b	#3,$18(a1)
0000A148 137C 0047 0020             		move.b	#$47,$20(a1)
0000A14E 137C 0008 0019             		move.b	#8,$19(a1)
0000A154 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A15A 4A44                       		tst.w	d4
0000A15C 6B00                       		bmi.s	loc_9D62
0000A15E 3004                       		move.w	d4,d0
0000A160 6100 8A86                  		bsr.w	CalcSine
0000A164 3404                       		move.w	d4,d2
0000A166 E04A                       		lsr.w	#8,d2
0000A168 E560                       		asl.w	d2,d0
0000A16A E561                       		asl.w	d2,d1
0000A16C 3400                       		move.w	d0,d2
0000A16E 3601                       		move.w	d1,d3
0000A170 0604 0010                  		addi.b	#$10,d4
0000A174 6400                       		bcc.s	loc_9D62
0000A176 0444 0080                  		subi.w	#$80,d4
0000A17A 6400                       		bcc.s	loc_9D62
0000A17C 383C 0288                  		move.w	#$288,d4
0000A180                            
0000A180                            loc_9D62:
0000A180 3342 0010                  		move.w	d2,$10(a1)
0000A184 3343 0012                  		move.w	d3,$12(a1)
0000A188 4442                       		neg.w	d2
0000A18A 4444                       		neg.w	d4
0000A18C 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A190                            
0000A190                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A190 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A196 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A19C 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A1A2 303C 00C6                  		move.w	#$C6,d0
0000A1A6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A1AC                            
0000A1AC                            Obj37_Bounce:				; XREF: Obj37_Index
0000A1AC 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A1B2 6100 0000                  		bsr.w	SpeedToPos
0000A1B6 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A1BC 6B00                       		bmi.s	Obj37_ChkDel
0000A1BE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A1C2 D007                       		add.b	d7,d0
0000A1C4 0200 0003                  		andi.b	#3,d0
0000A1C8 6600                       		bne.s	Obj37_ChkDel
0000A1CA 4EB9 0000 0000             		jsr	ObjHitFloor
0000A1D0 4A41                       		tst.w	d1
0000A1D2 6A00                       		bpl.s	Obj37_ChkDel
0000A1D4 D368 000C                  		add.w	d1,$C(a0)
0000A1D8 3028 0012                  		move.w	$12(a0),d0
0000A1DC E440                       		asr.w	#2,d0
0000A1DE 9168 0012                  		sub.w	d0,$12(a0)
0000A1E2 4468 0012                  		neg.w	$12(a0)
0000A1E6                            
0000A1E6                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A1E6 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A1EA 6700                       		beq.s	Obj37_Delete
0000A1EC 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A1F0 0640 00E0                  		addi.w	#$E0,d0
0000A1F4 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A1F8 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A1FA 6000 0000                  		bra.w	DisplaySprite
0000A1FE                            ; ===========================================================================
0000A1FE                            
0000A1FE                            Obj37_Collect:				; XREF: Obj37_Index
0000A1FE 5428 0024                  		addq.b	#2,$24(a0)
0000A202 117C 0000 0020             		move.b	#0,$20(a0)
0000A208 117C 0001 0018             		move.b	#1,$18(a0)
0000A20E 6100 FE86                  		bsr.w	CollectRing
0000A212                            
0000A212                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A212 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A218 6100 0000                  		bsr.w	AnimateSprite
0000A21C 6000 0000                  		bra.w	DisplaySprite
0000A220                            ; ===========================================================================
0000A220                            
0000A220                            Obj37_Delete:				; XREF: Obj37_Index
0000A220 6000 0000                  		bra.w	DeleteObject
0000A224                            ; ===========================================================================
0000A224                            ; ---------------------------------------------------------------------------
0000A224                            ; Object 4B - giant ring for entry to special stage
0000A224                            ; ---------------------------------------------------------------------------
0000A224                            
0000A224                            Obj4B:					; XREF: Obj_Index
0000A224 7000                       		moveq	#0,d0
0000A226 1028 0024                  		move.b	$24(a0),d0
0000A22A 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A22E 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A232                            ; ===========================================================================
0000A232 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A234 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A236 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A238 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A23A                            ; ===========================================================================
0000A23A                            
0000A23A                            Obj4B_Main:				; XREF: Obj4B_Index
0000A23A 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A242 317C 2400 0002             		move.w	#$2400,2(a0)
0000A248 0028 0004 0001             		ori.b	#4,1(a0)
0000A24E 117C 0040 0019             		move.b	#$40,$19(a0)
0000A254 4A28 0001                  		tst.b	1(a0)
0000A258 6A00                       		bpl.s	Obj4B_Animate
0000A25A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A260 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A264 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A26A 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A26C 4E75                       		rts	
0000A26E                            ; ===========================================================================
0000A26E                            
0000A26E                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A26E 5428 0024                  		addq.b	#2,$24(a0)
0000A272 117C 0002 0018             		move.b	#2,$18(a0)
0000A278 117C 0052 0020             		move.b	#$52,$20(a0)
0000A27E 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A284                            
0000A284                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A284 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A28A 3028 0008                  		move.w	8(a0),d0
0000A28E 0240 FF80                  		andi.w	#$FF80,d0
0000A292 3238 F700                  		move.w	($FFFFF700).w,d1
0000A296 0441 0080                  		subi.w	#$80,d1
0000A29A 0241 FF80                  		andi.w	#$FF80,d1
0000A29E 9041                       		sub.w	d1,d0
0000A2A0 0C40 0280                  		cmpi.w	#$280,d0
0000A2A4 6200 0000                  		bhi.w	DeleteObject
0000A2A8 6000 0000                  		bra.w	DisplaySprite
0000A2AC                            ; ===========================================================================
0000A2AC                            
0000A2AC                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A2AC 5528 0024                  		subq.b	#2,$24(a0)
0000A2B0 117C 0000 0020             		move.b	#0,$20(a0)
0000A2B6 6100 0000                  		bsr.w	SingleObjLoad
0000A2BA 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A2BE 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A2C2 3368 0008 0008             		move.w	8(a0),8(a1)
0000A2C8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A2CE 2348 003C                  		move.l	a0,$3C(a1)
0000A2D2 3038 D008                  		move.w	($FFFFD008).w,d0
0000A2D6 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A2DA 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A2DC 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A2E2                            
0000A2E2                            Obj4B_PlaySnd:
0000A2E2 303C 00C3                  		move.w	#$C3,d0
0000A2E6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A2EC 6096                       		bra.s	Obj4B_Animate
0000A2EE                            ; ===========================================================================
0000A2EE                            
0000A2EE                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A2EE 6000 0000                  		bra.w	DeleteObject
0000A2F2                            ; ===========================================================================
0000A2F2                            ; ---------------------------------------------------------------------------
0000A2F2                            ; Object 7C - flash effect when	you collect the	giant ring
0000A2F2                            ; ---------------------------------------------------------------------------
0000A2F2                            
0000A2F2                            Obj7C:					; XREF: Obj_Index
0000A2F2 7000                       		moveq	#0,d0
0000A2F4 1028 0024                  		move.b	$24(a0),d0
0000A2F8 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A2FC 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A300                            ; ===========================================================================
0000A300 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A302 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A304 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A306                            ; ===========================================================================
0000A306                            
0000A306                            Obj7C_Main:				; XREF: Obj7C_Index
0000A306 5428 0024                  		addq.b	#2,$24(a0)
0000A30A 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A312 317C 2462 0002             		move.w	#$2462,2(a0)
0000A318 0028 0004 0001             		ori.b	#4,1(a0)
0000A31E 117C 0000 0018             		move.b	#0,$18(a0)
0000A324 117C 0020 0019             		move.b	#$20,$19(a0)
0000A32A 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A330                            
0000A330                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A330 6100                       		bsr.s	Obj7C_Collect
0000A332 3028 0008                  		move.w	8(a0),d0
0000A336 0240 FF80                  		andi.w	#$FF80,d0
0000A33A 3238 F700                  		move.w	($FFFFF700).w,d1
0000A33E 0441 0080                  		subi.w	#$80,d1
0000A342 0241 FF80                  		andi.w	#$FF80,d1
0000A346 9041                       		sub.w	d1,d0
0000A348 0C40 0280                  		cmpi.w	#$280,d0
0000A34C 6200 0000                  		bhi.w	DeleteObject
0000A350 6000 0000                  		bra.w	DisplaySprite
0000A354                            
0000A354                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A354                            
0000A354                            
0000A354                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A354 5328 001E                  		subq.b	#1,$1E(a0)
0000A358 6A00                       		bpl.s	locret_9F76
0000A35A 117C 0001 001E             		move.b	#1,$1E(a0)
0000A360 5228 001A                  		addq.b	#1,$1A(a0)
0000A364 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A36A 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A36C 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A372 6600                       		bne.s	locret_9F76	; if not, branch
0000A374 2268 003C                  		movea.l	$3C(a0),a1
0000A378 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A37E 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A384 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A38A 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A38E 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A392                            
0000A392                            locret_9F76:
0000A392 4E75                       		rts	
0000A394                            ; ===========================================================================
0000A394                            
0000A394                            Obj7C_End:				; XREF: Obj7C_Collect
0000A394 5428 0024                  		addq.b	#2,$24(a0)
0000A398 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A39E 588F                       		addq.l	#4,sp
0000A3A0 4E75                       		rts	
0000A3A2                            ; End of function Obj7C_Collect
0000A3A2                            
0000A3A2                            ; ===========================================================================
0000A3A2                            
0000A3A2                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A3A2 6000 0000                  		bra.w	DeleteObject
0000A3A6                            ; ===========================================================================
0000A3A6                            Ani_obj25:
0000A3A6                            	include "_anim\obj25.asm"
0000A3A6                            ; ---------------------------------------------------------------------------
0000A3A6                            ; Animation script - ring
0000A3A6                            ; ---------------------------------------------------------------------------
0000A3A6 0000                       		dc.w byte_9F8C-Ani_obj25
0000A3A8 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A3AE                            		even
0000A3AE                            		even
0000A3AE                            
0000A3AE                            ; ---------------------------------------------------------------------------
0000A3AE                            ; Sprite mappings - rings
0000A3AE                            ; ---------------------------------------------------------------------------
0000A3AE                            Map_obj25:
0000A3AE                            	include "_maps\obj25.asm"
0000A3AE                            ; ---------------------------------------------------------------------------
0000A3AE                            ; Sprite mappings - rings
0000A3AE                            ; ---------------------------------------------------------------------------
0000A3AE 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A3B2 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A3B6 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A3BA 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A3BE 01                         byte_9FA2:	dc.b 1
0000A3BF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A3C4 01                         byte_9FA8:	dc.b 1
0000A3C5 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A3CA 01                         byte_9FAE:	dc.b 1
0000A3CB F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A3D0 01                         byte_9FB4:	dc.b 1
0000A3D1 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A3D6 01                         byte_9FBA:	dc.b 1
0000A3D7 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A3DC 01                         byte_9FC0:	dc.b 1
0000A3DD F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A3E2 01                         byte_9FC6:	dc.b 1
0000A3E3 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A3E8 01                         byte_9FCC:	dc.b 1
0000A3E9 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A3EE                            		even
0000A3EE                            		even
0000A3EE                            
0000A3EE                            ; ---------------------------------------------------------------------------
0000A3EE                            ; Sprite mappings - giant ring
0000A3EE                            ; ---------------------------------------------------------------------------
0000A3EE                            Map_obj4B:
0000A3EE                            	include "_maps\obj4B.asm"
0000A3EE                            ; ---------------------------------------------------------------------------
0000A3EE                            ; Sprite mappings - giant ring
0000A3EE                            ; ---------------------------------------------------------------------------
0000A3EE 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A3F2 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A3F6 0A                         byte_9FDA:	dc.b $A
0000A3F7 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A3FC E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A401 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A406 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A40B F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A410 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A415 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A41A 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A41F 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A424 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A429 08                         byte_A00D:	dc.b 8
0000A42A E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A42F E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A434 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A439 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A43E F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A443 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A448 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A44D 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A452 04                         byte_A036:	dc.b 4
0000A453 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A458 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A45D 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A462 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A467 08                         byte_A04B:	dc.b 8
0000A468 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A46D E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A472 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A477 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A47C F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A481 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A486 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A48B 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A490                            		even
0000A490                            		even
0000A490                            
0000A490                            ; ---------------------------------------------------------------------------
0000A490                            ; Sprite mappings - flash effect when you collect the giant ring
0000A490                            ; ---------------------------------------------------------------------------
0000A490                            Map_obj7C:
0000A490                            	include "_maps\obj7C.asm"
0000A490                            ; ---------------------------------------------------------------------------
0000A490                            ; Sprite mappings - flash effect when you collect the giant ring
0000A490                            ; ---------------------------------------------------------------------------
0000A490 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A494 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A498 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A49C 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A4A0 02                         byte_A084:	dc.b 2
0000A4A1 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A4A6 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A4AB 04                         byte_A08F:	dc.b 4
0000A4AC E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A4B1 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A4B6 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A4BB 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A4C0 04                         byte_A0A4:	dc.b 4
0000A4C1 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A4C6 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A4CB 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A4D0 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A4D5 04                         byte_A0B9:	dc.b 4
0000A4D6 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A4DB E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A4E0 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A4E5 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A4EA 04                         byte_A0CE:	dc.b 4
0000A4EB E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A4F0 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A4F5 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A4FA 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A4FF 04                         byte_A0E3:	dc.b 4
0000A500 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A505 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A50A 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A50F 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A514 02                         byte_A0F8:	dc.b 2
0000A515 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A51A 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A51F 04                         byte_A103:	dc.b 4
0000A520 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A525 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A52A 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A52F 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A534                            		even
0000A534                            		even
0000A534                            
0000A534                            ; ===========================================================================
0000A534                            ; ---------------------------------------------------------------------------
0000A534                            ; Object 26 - monitors
0000A534                            ; ---------------------------------------------------------------------------
0000A534                            
0000A534                            Obj26:					; XREF: Obj_Index
0000A534 7000                       		moveq	#0,d0
0000A536 1028 0024                  		move.b	$24(a0),d0
0000A53A 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A53E 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A542                            ; ===========================================================================
0000A542 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A544 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A546 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A548 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A54A 0000                       		dc.w Obj26_Display-Obj26_Index
0000A54C                            ; ===========================================================================
0000A54C                            
0000A54C                            Obj26_Main:				; XREF: Obj26_Index
0000A54C 5428 0024                  		addq.b	#2,$24(a0)
0000A550 117C 000E 0016             		move.b	#$E,$16(a0)
0000A556 117C 000E 0017             		move.b	#$E,$17(a0)
0000A55C 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A564 317C 0680 0002             		move.w	#$680,2(a0)
0000A56A 117C 0004 0001             		move.b	#4,1(a0)
0000A570 117C 0003 0018             		move.b	#3,$18(a0)
0000A576 117C 000F 0019             		move.b	#$F,$19(a0)
0000A57C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A580 7000                       		moveq	#0,d0
0000A582 1028 0023                  		move.b	$23(a0),d0
0000A586 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A58C 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A592 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A594 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A59A 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A5A0 4E75                       		rts	
0000A5A2                            ; ===========================================================================
0000A5A2                            
0000A5A2                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A5A2 117C 0046 0020             		move.b	#$46,$20(a0)
0000A5A8 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A5AE                            
0000A5AE                            Obj26_Solid:				; XREF: Obj26_Index
0000A5AE 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A5B2 6700                       		beq.s	loc_A1EC	; if not, branch
0000A5B4 5500                       		subq.b	#2,d0
0000A5B6 6600                       		bne.s	Obj26_Fall
0000A5B8 7200                       		moveq	#0,d1
0000A5BA 1228 0019                  		move.b	$19(a0),d1
0000A5BE 0641 000B                  		addi.w	#$B,d1
0000A5C2 6100 D41C                  		bsr.w	ExitPlatform
0000A5C6 0829 0003 0022             		btst	#3,$22(a1)
0000A5CC 6600 0000                  		bne.w	loc_A1BC
0000A5D0 4228 0025                  		clr.b	$25(a0)
0000A5D4 6000 0000                  		bra.w	Obj26_Animate
0000A5D8                            ; ===========================================================================
0000A5D8                            
0000A5D8                            loc_A1BC:				; XREF: Obj26_Solid
0000A5D8 363C 0010                  		move.w	#$10,d3
0000A5DC 3428 0008                  		move.w	8(a0),d2
0000A5E0 6100 D95C                  		bsr.w	MvSonicOnPtfm
0000A5E4 6000 0000                  		bra.w	Obj26_Animate
0000A5E8                            ; ===========================================================================
0000A5E8                            
0000A5E8                            Obj26_Fall:				; XREF: Obj26_Solid
0000A5E8 6100 0000                  		bsr.w	ObjectFall
0000A5EC 4EB9 0000 0000             		jsr	ObjHitFloor
0000A5F2 4A41                       		tst.w	d1
0000A5F4 6A00 0000                  		bpl.w	Obj26_Animate
0000A5F8 D368 000C                  		add.w	d1,$C(a0)
0000A5FC 4268 0012                  		clr.w	$12(a0)
0000A600 4228 0025                  		clr.b	$25(a0)
0000A604 6000 0000                  		bra.w	Obj26_Animate
0000A608                            ; ===========================================================================
0000A608                            
0000A608                            loc_A1EC:				; XREF: Obj26_Solid
0000A608 323C 001A                  		move.w	#$1A,d1
0000A60C 343C 000F                  		move.w	#$F,d2
0000A610 6100 0000                  		bsr.w	Obj26_SolidSides
0000A614 6700 0000                  		beq.w	loc_A25C
0000A618 4A69 0012                  		tst.w	$12(a1)
0000A61C 6B00                       		bmi.s	loc_A20A
0000A61E 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A624 6700                       		beq.s	loc_A25C	; if yes, branch
0000A626                            
0000A626                            loc_A20A:
0000A626 4A41                       		tst.w	d1
0000A628 6A00                       		bpl.s	loc_A220
0000A62A 9769 000C                  		sub.w	d3,$C(a1)
0000A62E 6100 D29E                  		bsr.w	loc_74AE
0000A632 117C 0002 0025             		move.b	#2,$25(a0)
0000A638 6000 0000                  		bra.w	Obj26_Animate
0000A63C                            ; ===========================================================================
0000A63C                            
0000A63C                            loc_A220:
0000A63C 4A40                       		tst.w	d0
0000A63E 6700 0000                  		beq.w	loc_A246
0000A642 6B00                       		bmi.s	loc_A230
0000A644 4A69 0010                  		tst.w	$10(a1)
0000A648 6B00                       		bmi.s	loc_A246
0000A64A 6000                       		bra.s	loc_A236
0000A64C                            ; ===========================================================================
0000A64C                            
0000A64C                            loc_A230:
0000A64C 4A69 0010                  		tst.w	$10(a1)
0000A650 6A00                       		bpl.s	loc_A246
0000A652                            
0000A652                            loc_A236:
0000A652 9169 0008                  		sub.w	d0,8(a1)
0000A656 337C 0000 0014             		move.w	#0,$14(a1)
0000A65C 337C 0000 0010             		move.w	#0,$10(a1)
0000A662                            
0000A662                            loc_A246:
0000A662 0829 0001 0022             		btst	#1,$22(a1)
0000A668 6600                       		bne.s	loc_A26A
0000A66A 08E9 0005 0022             		bset	#5,$22(a1)
0000A670 08E8 0005 0022             		bset	#5,$22(a0)
0000A676 6000                       		bra.s	Obj26_Animate
0000A678                            ; ===========================================================================
0000A678                            
0000A678                            loc_A25C:
0000A678 0828 0005 0022             		btst	#5,$22(a0)
0000A67E 6700                       		beq.s	Obj26_Animate
0000A680 337C 0001 001C             		move.w	#1,$1C(a1)
0000A686                            
0000A686                            loc_A26A:
0000A686 08A8 0005 0022             		bclr	#5,$22(a0)
0000A68C 08A9 0005 0022             		bclr	#5,$22(a1)
0000A692                            
0000A692                            Obj26_Animate:				; XREF: Obj26_Index
0000A692 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A698 6100 0000                  		bsr.w	AnimateSprite
0000A69C                            
0000A69C                            Obj26_Display:				; XREF: Obj26_Index
0000A69C 6100 0000                  		bsr.w	DisplaySprite
0000A6A0 3028 0008                  		move.w	8(a0),d0
0000A6A4 0240 FF80                  		andi.w	#$FF80,d0
0000A6A8 3238 F700                  		move.w	($FFFFF700).w,d1
0000A6AC 0441 0080                  		subi.w	#$80,d1
0000A6B0 0241 FF80                  		andi.w	#$FF80,d1
0000A6B4 9041                       		sub.w	d1,d0
0000A6B6 0C40 0280                  		cmpi.w	#$280,d0
0000A6BA 6200 0000                  		bhi.w	DeleteObject
0000A6BE 4E75                       		rts	
0000A6C0                            ; ===========================================================================
0000A6C0                            
0000A6C0                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A6C0 5428 0024                  		addq.b	#2,$24(a0)
0000A6C4 117C 0000 0020             		move.b	#0,$20(a0)
0000A6CA 6100 0000                  		bsr.w	SingleObjLoad
0000A6CE 6600                       		bne.s	Obj26_Explode
0000A6D0 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A6D4 3368 0008 0008             		move.w	8(a0),8(a1)
0000A6DA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A6E0 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A6E6 7400                       		moveq	#0,d2	; GMZ
0000A6E8 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A6EA                            
0000A6EA                            Obj26_Explode:
0000A6EA 6100 0000                  		bsr.w	SingleObjLoad
0000A6EE 6600                       		bne.s	Obj26_SetBroken
0000A6F0 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A6F4 5429 0024                  		addq.b	#2,$24(a1)
0000A6F8 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A6FC 3368 0008 0008             		move.w	8(a0),8(a1)
0000A702 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A708                            
0000A708                            Obj26_NextExplosion:
0000A708 5802                       		addq.b	#4,d2
0000A70A 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A70E                            
0000A70E                            Obj26_SetBroken:
0000A70E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A712 7000                       		moveq	#0,d0
0000A714 1028 0023                  		move.b	$23(a0),d0
0000A718 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A71E 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A724 6000 0000                  		bra.w	DisplaySprite
0000A728                            ; ===========================================================================
0000A728                            ; ---------------------------------------------------------------------------
0000A728                            ; Object 2E - contents of monitors
0000A728                            ; ---------------------------------------------------------------------------
0000A728                            
0000A728                            Obj2E:					; XREF: Obj_Index
0000A728 7000                       		moveq	#0,d0
0000A72A 1028 0024                  		move.b	$24(a0),d0
0000A72E 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A732 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A736 6000 0000                  		bra.w	DisplaySprite
0000A73A                            ; ===========================================================================
0000A73A 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A73C 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A73E 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A740                            ; ===========================================================================
0000A740                            
0000A740                            Obj2E_Main:				; XREF: Obj2E_Index
0000A740 5428 0024                  		addq.b	#2,$24(a0)
0000A744 317C 0680 0002             		move.w	#$680,2(a0)
0000A74A 117C 0024 0001             		move.b	#$24,1(a0)
0000A750 117C 0003 0018             		move.b	#3,$18(a0)
0000A756 117C 0008 0019             		move.b	#8,$19(a0)
0000A75C 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A762 7000                       		moveq	#0,d0
0000A764 1028 001C                  		move.b	$1C(a0),d0
0000A768 5400                       		addq.b	#2,d0
0000A76A 1140 001A                  		move.b	d0,$1A(a0)
0000A76E 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A774 D000                       		add.b	d0,d0
0000A776 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A77A 5249                       		addq.w	#1,a1
0000A77C 2149 0004                  		move.l	a1,4(a0)
0000A780                            
0000A780                            Obj2E_Move:				; XREF: Obj2E_Index
0000A780 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A784 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A788 6100 0000                  		bsr.w	SpeedToPos
0000A78C 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A792 4E75                       		rts	
0000A794                            ; ===========================================================================
0000A794                            
0000A794                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A794 5428 0024                  		addq.b	#2,$24(a0)
0000A798 317C 001D 001E             		move.w	#29,$1E(a0)
0000A79E 1028 001C                  		move.b	$1C(a0),d0
0000A7A2 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A7A6 6600                       		bne.s	Obj2E_ChkSonic
0000A7A8 4E75                       		rts			; Eggman monitor does nothing
0000A7AA                            ; ===========================================================================
0000A7AA                            
0000A7AA                            Obj2E_ChkSonic:
0000A7AA 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A7AE 6600                       		bne.s	Obj2E_ChkShoes
0000A7B0                            
0000A7B0                            ExtraLife:
0000A7B0 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A7B4 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A7B8 303C 0088                  		move.w	#$88,d0
0000A7BC 4EF9 0000 15B6             		jmp	(PlaySound).l	; play extra life music
0000A7C2                            ; ===========================================================================
0000A7C2                            
0000A7C2                            Obj2E_ChkShoes:
0000A7C2 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A7C6 6600                       		bne.s	Obj2E_ChkShield
0000A7C8 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A7CE 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A7D4 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A7DA 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A7E0 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A7E6 303C 00E2                  		move.w	#$E2,d0
0000A7EA 4EF9 0000 15B6             		jmp	(PlaySound).l	; Speed	up the music
0000A7F0                            ; ===========================================================================
0000A7F0                            
0000A7F0                            Obj2E_ChkShield:
0000A7F0 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000A7F4 6600                       		bne.s	Obj2E_ChkInvinc
0000A7F6 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000A7FC 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000A802 303C 00AF                  		move.w	#$AF,d0
0000A806 4EF9 0000 15B6             		jmp	(PlaySound).l	; play shield sound
0000A80C                            ; ===========================================================================
0000A80C                            
0000A80C                            Obj2E_ChkInvinc:
0000A80C 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000A810 6600                       		bne.s	Obj2E_ChkRings
0000A812 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000A818 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000A81E 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000A824 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000A82A 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000A830 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000A836 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000A83C 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000A842 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000A848 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000A84E 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000A852 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000A854 303C 0087                  		move.w	#$87,d0
0000A858 4EF9 0000 15B6             		jmp	(PlaySound).l	; play invincibility music
0000A85E                            ; ===========================================================================
0000A85E                            
0000A85E                            Obj2E_NoMusic:
0000A85E 4E75                       		rts	
0000A860                            ; ===========================================================================
0000A860                            
0000A860                            Obj2E_ChkRings:
0000A860 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000A864 6600                       		bne.s	Obj2E_ChkS
0000A866 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000A86C 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000A872 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000A878 6500                       		bcs.s	Obj2E_RingSound
0000A87A 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000A880 6700 FF2E                  		beq.w	ExtraLife
0000A884 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000A88A 6500                       		bcs.s	Obj2E_RingSound
0000A88C 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000A892 6700 FF1C                  		beq.w	ExtraLife
0000A896                            
0000A896                            Obj2E_RingSound:
0000A896 303C 00B5                  		move.w	#$B5,d0
0000A89A 4EF9 0000 15B6             		jmp	(PlaySound).l	; play ring sound
0000A8A0                            ; ===========================================================================
0000A8A0                            
0000A8A0                            Obj2E_ChkS:
0000A8A0 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000A8A4 6600                       		bne.s	Obj2E_ChkEnd
0000A8A6                            		; nop	
0000A8A6 7201                       		moveq	#1,d1
0000A8A8 B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000A8AC                            
0000A8AC                            Obj2E_ChkEnd:
0000A8AC 4E75                       		rts			; 'S' and goggles monitors do nothing
0000A8AE                            ; ===========================================================================
0000A8AE                            
0000A8AE                            Obj2E_Delete:				; XREF: Obj2E_Index
0000A8AE 5368 001E                  		subq.w	#1,$1E(a0)
0000A8B2 6B00 0000                  		bmi.w	DeleteObject
0000A8B6 4E75                       		rts	
0000A8B8                            ; ---------------------------------------------------------------------------
0000A8B8                            ; Subroutine to	make the sides of a monitor solid
0000A8B8                            ; ---------------------------------------------------------------------------
0000A8B8                            
0000A8B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A8B8                            
0000A8B8                            
0000A8B8                            Obj26_SolidSides:			; XREF: loc_A1EC
0000A8B8 43F8 D000                  		lea	($FFFFD000).w,a1
0000A8BC 3029 0008                  		move.w	8(a1),d0
0000A8C0 9068 0008                  		sub.w	8(a0),d0
0000A8C4 D041                       		add.w	d1,d0
0000A8C6 6B00                       		bmi.s	loc_A4E6
0000A8C8 3601                       		move.w	d1,d3
0000A8CA D643                       		add.w	d3,d3
0000A8CC B043                       		cmp.w	d3,d0
0000A8CE 6200                       		bhi.s	loc_A4E6
0000A8D0 1629 0016                  		move.b	$16(a1),d3
0000A8D4 4883                       		ext.w	d3
0000A8D6 D443                       		add.w	d3,d2
0000A8D8 3629 000C                  		move.w	$C(a1),d3
0000A8DC 9668 000C                  		sub.w	$C(a0),d3
0000A8E0 D642                       		add.w	d2,d3
0000A8E2 6B00                       		bmi.s	loc_A4E6
0000A8E4 D442                       		add.w	d2,d2
0000A8E6 B642                       		cmp.w	d2,d3
0000A8E8 6400                       		bcc.s	loc_A4E6
0000A8EA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A8EE 6B00                       		bmi.s	loc_A4E6
0000A8F0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A8F6 6400                       		bcc.s	loc_A4E6
0000A8F8 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A8FC 6600                       		bne.s	loc_A4E6
0000A8FE B240                       		cmp.w	d0,d1
0000A900 6400                       		bcc.s	loc_A4DC
0000A902 D241                       		add.w	d1,d1
0000A904 9041                       		sub.w	d1,d0
0000A906                            
0000A906                            loc_A4DC:
0000A906 0C43 0010                  		cmpi.w	#$10,d3
0000A90A 6500                       		bcs.s	loc_A4EA
0000A90C                            
0000A90C                            loc_A4E2:
0000A90C 7201                       		moveq	#1,d1
0000A90E 4E75                       		rts	
0000A910                            ; ===========================================================================
0000A910                            
0000A910                            loc_A4E6:
0000A910 7200                       		moveq	#0,d1
0000A912 4E75                       		rts	
0000A914                            ; ===========================================================================
0000A914                            
0000A914                            loc_A4EA:
0000A914 7200                       		moveq	#0,d1
0000A916 1228 0019                  		move.b	$19(a0),d1
0000A91A 5841                       		addq.w	#4,d1
0000A91C 3401                       		move.w	d1,d2
0000A91E D442                       		add.w	d2,d2
0000A920 D269 0008                  		add.w	8(a1),d1
0000A924 9268 0008                  		sub.w	8(a0),d1
0000A928 6BE2                       		bmi.s	loc_A4E2
0000A92A B242                       		cmp.w	d2,d1
0000A92C 64DE                       		bcc.s	loc_A4E2
0000A92E 72FF                       		moveq	#-1,d1
0000A930 4E75                       		rts	
0000A932                            ; End of function Obj26_SolidSides
0000A932                            
0000A932                            ; ===========================================================================
0000A932                            Ani_obj26:
0000A932                            	include "_anim\obj26.asm"
0000A932                            ; ---------------------------------------------------------------------------
0000A932                            ; Animation script - monitors
0000A932                            ; ---------------------------------------------------------------------------
0000A932 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000A938 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000A93E 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000A944 0000                       		dc.w byte_A582-Ani_obj26
0000A946 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000A94C 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000A958 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000A964 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000A970 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000A97C 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000A988 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000A994 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000A9A0 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000A9AC 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000A9B4                            		even
0000A9B4                            		even
0000A9B4                            
0000A9B4                            ; ---------------------------------------------------------------------------
0000A9B4                            ; Sprite mappings - monitors
0000A9B4                            ; ---------------------------------------------------------------------------
0000A9B4                            Map_obj26:
0000A9B4                            	include "_maps\obj26.asm"
0000A9B4                            ; ================================================================================
0000A9B4                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000A9B4                            ; ================================================================================
0000A9B4                            
0000A9B4                            DATAY1U343IF3L:
0000A9B4 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000A9B8 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000A9BC 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000A9C0 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000A9C4 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000A9C8 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000A9CC 05                         DATAY1U343IF3L_0: dc.b $5
0000A9CD E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000A9D2 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000A9D7 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000A9DC 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000A9E1 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000A9E6 06                         DATAY1U343IF3L_1: dc.b $6
0000A9E7 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000A9EC E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000A9F1 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000A9F6 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000A9FB 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA00 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA05 05                         DATAY1U343IF3L_2: dc.b $5
0000AA06 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA0B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA10 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA15 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA1A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA1F 05                         DATAY1U343IF3L_3: dc.b $5
0000AA20 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA25 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA2A E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA2F 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA34 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA39 06                         DATAY1U343IF3L_4: dc.b $6
0000AA3A F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AA3F E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA44 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA49 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA4E 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA53 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA58 06                         DATAY1U343IF3L_5: dc.b $6
0000AA59 F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AA5E E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA63 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA68 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA6D 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA72 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA77 06                         DATAY1U343IF3L_6: dc.b $6
0000AA78 F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AA7D E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA82 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA87 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA8C 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA91 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA96 06                         DATAY1U343IF3L_7: dc.b $6
0000AA97 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AA9C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAA1 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAA6 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAAB 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAB0 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAB5 06                         DATAY1U343IF3L_8: dc.b $6
0000AAB6 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AABB E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAC0 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAC5 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AACA 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AACF 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAD4 06                         DATAY1U343IF3L_9: dc.b $6
0000AAD5 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AADA E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AADF 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAE4 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAE9 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAEE 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAF3 05                         DATAY1U343IF3L_A: dc.b $5
0000AAF4 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAF9 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAFE E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB03 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB08 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB0D 01                         DATAY1U343IF3L_B: dc.b $1
0000AB0E FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000AB14 00                         	even
0000AB14 00                         	even
0000AB14                            
0000AB14                            ; ===========================================================================
0000AB14                            ; ---------------------------------------------------------------------------
0000AB14                            ; Object 0E - Sonic on the title screen
0000AB14                            ; ---------------------------------------------------------------------------
0000AB14                            
0000AB14                            Obj0E:					; XREF: Obj_Index
0000AB14 7000                       		moveq	#0,d0
0000AB16 1028 0024                  		move.b	$24(a0),d0
0000AB1A 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000AB1E 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AB22                            ; ===========================================================================
0000AB22 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AB24 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AB26 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000AB28 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000AB2A                            ; ===========================================================================
0000AB2A                            
0000AB2A                            Obj0E_Main:				; XREF: Obj0E_Index
0000AB2A 5428 0024                  		addq.b	#2,$24(a0)
0000AB2E 317C 00F0 0008             		move.w	#$F0,8(a0)
0000AB34 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000AB3A 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AB42 317C 2300 0002             		move.w	#$2300,2(a0)
0000AB48 117C 0001 0018             		move.b	#1,$18(a0)
0000AB4E 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AB54 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AB5A 6100 0000                  		bsr.w	AnimateSprite
0000AB5E                            
0000AB5E                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AB5E 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AB62 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AB64 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AB68 6000 0000                  		bra.w	DisplaySprite
0000AB6C                            ; ===========================================================================
0000AB6C                            
0000AB6C                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AB6C 4E75                       		rts	
0000AB6E                            ; ===========================================================================
0000AB6E                            
0000AB6E                            Obj0E_Move:				; XREF: Obj0E_Index
0000AB6E 5168 000A                  		subq.w	#8,$A(a0)
0000AB72 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000AB78 6600                       		bne.s	Obj0E_Display
0000AB7A 5428 0024                  		addq.b	#2,$24(a0)
0000AB7E                            
0000AB7E                            Obj0E_Display:
0000AB7E 6000 0000                  		bra.w	DisplaySprite
0000AB82                            ; ===========================================================================
0000AB82 4E75                       		rts	
0000AB84                            ; ===========================================================================
0000AB84                            
0000AB84                            Obj0E_Animate:				; XREF: Obj0E_Index
0000AB84 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AB8A 6100 0000                  		bsr.w	AnimateSprite
0000AB8E 6000 0000                  		bra.w	DisplaySprite
0000AB92                            ; ===========================================================================
0000AB92 4E75                       		rts	
0000AB94                            ; ===========================================================================
0000AB94                            ; ---------------------------------------------------------------------------
0000AB94                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000AB94                            ; ---------------------------------------------------------------------------
0000AB94                            
0000AB94                            Obj0F:					; XREF: Obj_Index
0000AB94 7000                       		moveq	#0,d0
0000AB96 1028 0024                  		move.b	$24(a0),d0
0000AB9A 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000AB9E 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000ABA2 6000 0000                  		bra.w	DisplaySprite
0000ABA6                            ; ===========================================================================
0000ABA6 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000ABA8 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000ABAA 0000                       		dc.w locret_A6F8-Obj0F_Index
0000ABAC                            ; ===========================================================================
0000ABAC                            
0000ABAC                            Obj0F_Main:				; XREF: Obj0F_Index
0000ABAC 5428 0024                  		addq.b	#2,$24(a0)
0000ABB0 317C 00D0 0008             		move.w	#$D0,8(a0)
0000ABB6 317C 0130 000A             		move.w	#$130,$A(a0)
0000ABBC 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000ABC4 317C 0200 0002             		move.w	#$200,2(a0)
0000ABCA 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000ABD0 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000ABD2 5428 0024                  		addq.b	#2,$24(a0)
0000ABD6 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000ABDC 6600                       		bne.s	locret_A6F8	; if not, branch
0000ABDE 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000ABE4 317C 0170 0008             		move.w	#$170,8(a0)
0000ABEA 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000ABF0                            
0000ABF0                            locret_A6F8:				; XREF: Obj0F_Index
0000ABF0 4E75                       		rts	
0000ABF2                            ; ===========================================================================
0000ABF2                            
0000ABF2                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000ABF2 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000ABF8 6000 0000                  		bra.w	AnimateSprite
0000ABFC                            ; ===========================================================================
0000ABFC                            Ani_obj0E:
0000ABFC                            	include "_anim\obj0E.asm"
0000ABFC                            ; ---------------------------------------------------------------------------
0000ABFC                            ; Animation script - Sonic on the title screen
0000ABFC                            ; ---------------------------------------------------------------------------
0000ABFC 0000                       		dc.w byte_A706-Ani_obj0E
0000ABFE 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AC0A                            		even
0000AC0A                            		even
0000AC0A                            
0000AC0A                            Ani_obj0F:
0000AC0A                            	include "_anim\obj0F.asm"
0000AC0A                            ; ---------------------------------------------------------------------------
0000AC0A                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AC0A                            ; ---------------------------------------------------------------------------
0000AC0A 0000                       		dc.w byte_A714-Ani_obj0F
0000AC0C 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AC10                            		even
0000AC10                            		even
0000AC10                            
0000AC10                            ; ---------------------------------------------------------------------------
0000AC10                            ; Subroutine to	animate	a sprite using an animation script
0000AC10                            ; ---------------------------------------------------------------------------
0000AC10                            
0000AC10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AC10                            
0000AC10                            
0000AC10                            AnimateSprite:
0000AC10 7000                       		moveq	#0,d0
0000AC12 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000AC16 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000AC1A 6700                       		beq.s	Anim_Run	; if not, branch
0000AC1C 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000AC20 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AC26 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000AC2C                            
0000AC2C                            Anim_Run:
0000AC2C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000AC30 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000AC32 D040                       		add.w	d0,d0
0000AC34 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000AC38 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000AC3C 7200                       		moveq	#0,d1
0000AC3E 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AC42 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AC46 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AC48                            
0000AC48                            Anim_Next:
0000AC48 1200                       		move.b	d0,d1
0000AC4A 0200 001F                  		andi.b	#$1F,d0
0000AC4E 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000AC52 1028 0022                  		move.b	$22(a0),d0
0000AC56 E719                       		rol.b	#3,d1
0000AC58 B101                       		eor.b	d0,d1
0000AC5A 0201 0003                  		andi.b	#3,d1
0000AC5E 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000AC64 8328 0001                  		or.b	d1,1(a0)
0000AC68 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000AC6C                            
0000AC6C                            Anim_Wait:
0000AC6C 4E75                       		rts	
0000AC6E                            ; ===========================================================================
0000AC6E                            
0000AC6E                            Anim_End_FF:
0000AC6E 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000AC70 6600                       		bne.s	Anim_End_FE	; if not, branch
0000AC72 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000AC78 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000AC7C 60CA                       		bra.s	Anim_Next
0000AC7E                            ; ===========================================================================
0000AC7E                            
0000AC7E                            Anim_End_FE:
0000AC7E 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000AC80 6600                       		bne.s	Anim_End_FD	; if not, branch
0000AC82 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000AC86 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000AC8A 9200                       		sub.b	d0,d1
0000AC8C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000AC90 60B6                       		bra.s	Anim_Next
0000AC92                            ; ===========================================================================
0000AC92                            
0000AC92                            Anim_End_FD:
0000AC92 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000AC94 6600                       		bne.s	Anim_End_FC	; if not, branch
0000AC96 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000AC9C                            
0000AC9C                            Anim_End_FC:
0000AC9C 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000AC9E 6600                       		bne.s	Anim_End_FB	; if not, branch
0000ACA0 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000ACA4                            
0000ACA4                            Anim_End_FB:
0000ACA4 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000ACA6 6600                       		bne.s	Anim_End_FA	; if not, branch
0000ACA8 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000ACAE 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000ACB2                            
0000ACB2                            Anim_End_FA:
0000ACB2 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000ACB4 6600                       		bne.s	Anim_End	; if not, branch
0000ACB6 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000ACBA                            
0000ACBA                            Anim_End:
0000ACBA 4E75                       		rts	
0000ACBC                            ; End of function AnimateSprite
0000ACBC                            
0000ACBC                            ; ===========================================================================
0000ACBC                            ; ---------------------------------------------------------------------------
0000ACBC                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000ACBC                            ; ---------------------------------------------------------------------------
0000ACBC                            Map_obj0F:
0000ACBC                            	include "_maps\obj0F.asm"
0000ACBC                            ; ---------------------------------------------------------------------------
0000ACBC                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000ACBC                            ; ---------------------------------------------------------------------------
0000ACBC 0000                       		dc.w byte_A7CD-Map_obj0F
0000ACBE 0000                       		dc.w byte_A7CC-Map_obj0F
0000ACC0 0000                       		dc.w byte_A7EB-Map_obj0F
0000ACC2 0000                       		dc.w byte_A882-Map_obj0F
0000ACC4 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000ACC5 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000ACCA 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000ACCF 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000ACD4 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000ACD9 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000ACDE 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000ACE3 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000ACE4 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ACE9 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ACEE B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ACF3 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ACF8 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ACFD B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD02 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD07 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD0C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD11 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD16 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD1B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD20 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD25 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD2A D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD2F D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD34 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD39 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD3E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD43 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD48 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD4D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD52 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD57 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD5C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD61 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD66 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD6B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD70 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD75 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD7A 01                         byte_A882:	dc.b 1			; "TM"
0000AD7B FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000AD80                            		even
0000AD80                            		even
0000AD80                            
0000AD80                            ; ---------------------------------------------------------------------------
0000AD80                            ; Sprite mappings - Sonic on the title screen
0000AD80                            ; ---------------------------------------------------------------------------
0000AD80                            Map_obj0E:
0000AD80                            	include "_maps\obj0E.asm"
0000AD80                            ; ================================================================================
0000AD80                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000AD80                            ; ================================================================================
0000AD80                            
0000AD80                            DATAGKI0HYDQBXP:
0000AD80 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000AD84 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000AD88 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000AD8C 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000AD90 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000AD91 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000AD96 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000AD9B 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000ADA0 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000ADA5 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000ADAA 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000ADAF 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000ADB4 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000ADB9 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000ADBA 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000ADBF 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000ADC4 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000ADC9 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000ADCE 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000ADD3 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000ADD8 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000ADDD 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000ADE2 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000ADE7 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000ADEC 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000ADF1 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000ADF2 F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000ADF7 F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000ADFC F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000AE01 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000AE06 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000AE0B 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000AE10 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000AE15 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000AE1A 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000AE1F 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000AE24 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000AE29 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000AE2A FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000AE2F F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000AE34 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000AE39 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000AE3E 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000AE43 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000AE48 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000AE4D 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000AE52 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000AE57 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000AE5C 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000AE5D F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000AE62 F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000AE67 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000AE6C 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000AE71 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000AE76 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000AE7B 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000AE80 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000AE85 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000AE8A 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000AE8F 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000AE94 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000AE99 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000AE9E 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000AEA3 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000AEA8 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000AEAD 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000AEAE 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000AEB3 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000AEB8 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000AEBD 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000AEC2 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000AEC7 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000AECC 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000AED1 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000AED6 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000AEDB 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000AEE0 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000AEE5 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000AEE6 EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000AEEB 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000AEF0 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000AEF5 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000AEFA 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000AEFF 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000AF04 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000AF09 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000AF0E 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000AF13 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000AF18 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000AF1D 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000AF22 EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000AF27 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000AF2C 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000AF31 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000AF32 EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000AF37 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000AF3C 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000AF41 EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000AF46 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000AF4B 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000AF50 EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000AF55 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000AF5A 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000AF5F EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000AF64 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000AF69 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000AF6E EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000AF73 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000AF78 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000AF7E 00                         	even
0000AF7E 00                         	even
0000AF7E                            
0000AF7E                            ; ===========================================================================
0000AF7E                            ; ---------------------------------------------------------------------------
0000AF7E                            ; Object 2B - Chopper enemy (GHZ)
0000AF7E                            ; ---------------------------------------------------------------------------
0000AF7E                            
0000AF7E                            Obj2B:					; XREF: Obj_Index
0000AF7E 7000                       		moveq	#0,d0
0000AF80 1028 0024                  		move.b	$24(a0),d0
0000AF84 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000AF88 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000AF8C 6000 0000                  		bra.w	MarkObjGone
0000AF90                            ; ===========================================================================
0000AF90 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000AF92 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000AF94                            ; ===========================================================================
0000AF94                            
0000AF94                            Obj2B_Main:				; XREF: Obj2B_Index
0000AF94 5428 0024                  		addq.b	#2,$24(a0)
0000AF98 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000AFA0 317C 047B 0002             		move.w	#$47B,2(a0)
0000AFA6 117C 0004 0001             		move.b	#4,1(a0)
0000AFAC 117C 0004 0018             		move.b	#4,$18(a0)
0000AFB2 117C 0009 0020             		move.b	#9,$20(a0)
0000AFB8 117C 0010 0019             		move.b	#$10,$19(a0)
0000AFBE 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000AFC4 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000AFCA                            
0000AFCA                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000AFCA 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000AFD0 6100 FC3E                  		bsr.w	AnimateSprite
0000AFD4 6100 0000                  		bsr.w	SpeedToPos
0000AFD8 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000AFDE 3028 0030                  		move.w	$30(a0),d0
0000AFE2 B068 000C                  		cmp.w	$C(a0),d0
0000AFE6 6400                       		bcc.s	Obj2B_ChgAni
0000AFE8 3140 000C                  		move.w	d0,$C(a0)
0000AFEC 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000AFF2                            
0000AFF2                            Obj2B_ChgAni:
0000AFF2 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000AFF8 0440 00C0                  		subi.w	#$C0,d0
0000AFFC B068 000C                  		cmp.w	$C(a0),d0
0000B000 6400                       		bcc.s	locret_ABB6
0000B002 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B008 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B00C 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B00E 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B014                            
0000B014                            locret_ABB6:
0000B014 4E75                       		rts	
0000B016                            ; ===========================================================================
0000B016                            Ani_obj2B:
0000B016                            	include "_anim\obj2B.asm"
0000B016                            ; ---------------------------------------------------------------------------
0000B016                            ; Animation script - Chopper enemy
0000B016                            ; ---------------------------------------------------------------------------
0000B016 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B018 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B01A 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B01C 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B020 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B024 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B028 00                         		even
0000B028 00                         		even
0000B028                            
0000B028                            ; ---------------------------------------------------------------------------
0000B028                            ; Sprite mappings - Chopper enemy (GHZ)
0000B028                            ; ---------------------------------------------------------------------------
0000B028                            Map_obj2B:
0000B028                            	include "_maps\obj2B.asm"
0000B028                            ; ---------------------------------------------------------------------------
0000B028                            ; Sprite mappings - Chopper enemy (GHZ)
0000B028                            ; ---------------------------------------------------------------------------
0000B028 0000                       		dc.w byte_ABCE-Map_obj2B
0000B02A 0000                       		dc.w byte_ABD4-Map_obj2B
0000B02C 01                         byte_ABCE:	dc.b 1
0000B02D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000B032 01                         byte_ABD4:	dc.b 1
0000B033 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000B038                            		even
0000B038                            		even
0000B038                            
0000B038                            ; ===========================================================================
0000B038                            ; ---------------------------------------------------------------------------
0000B038                            ; Object 2C - Jaws enemy (LZ)
0000B038                            ; ---------------------------------------------------------------------------
0000B038                            
0000B038                            Obj2C:					; XREF: Obj_Index
0000B038 7000                       		moveq	#0,d0
0000B03A 1028 0024                  		move.b	$24(a0),d0
0000B03E 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B042 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B046                            ; ===========================================================================
0000B046 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B048 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B04A                            ; ===========================================================================
0000B04A                            
0000B04A                            Obj2C_Main:				; XREF: Obj2C_Index
0000B04A 5428 0024                  		addq.b	#2,$24(a0)
0000B04E 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B056 317C 2486 0002             		move.w	#$2486,2(a0)
0000B05C 0028 0004 0001             		ori.b	#4,1(a0)
0000B062 117C 000A 0020             		move.b	#$A,$20(a0)
0000B068 117C 0004 0018             		move.b	#4,$18(a0)
0000B06E 117C 0010 0019             		move.b	#$10,$19(a0)
0000B074 7000                       		moveq	#0,d0
0000B076 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B07A ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B07C 5340                       		subq.w	#1,d0
0000B07E 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B082 3140 0032                  		move.w	d0,$32(a0)
0000B086 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B08C 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B092 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B094 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B098                            
0000B098                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B098 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B09C 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B09E 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B0A4 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B0A8 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B0AE 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B0B4                            
0000B0B4                            Obj2C_Animate:
0000B0B4 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B0BA 6100 FB54                  		bsr.w	AnimateSprite
0000B0BE 6100 0000                  		bsr.w	SpeedToPos
0000B0C2 6000 0000                  		bra.w	MarkObjGone
0000B0C6                            ; ===========================================================================
0000B0C6                            Ani_obj2C:
0000B0C6                            	include "_anim\obj2C.asm"
0000B0C6                            ; ---------------------------------------------------------------------------
0000B0C6                            ; Animation script - Jaws enemy
0000B0C6                            ; ---------------------------------------------------------------------------
0000B0C6 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B0C8 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B0CE                            		even
0000B0CE                            		even
0000B0CE                            
0000B0CE                            ; ---------------------------------------------------------------------------
0000B0CE                            ; Sprite mappings - Jaws enemy (LZ)
0000B0CE                            ; ---------------------------------------------------------------------------
0000B0CE                            Map_obj2C:
0000B0CE                            	include "_maps\obj2C.asm"
0000B0CE                            ; ---------------------------------------------------------------------------
0000B0CE                            ; Sprite mappings - Jaws enemy (LZ)
0000B0CE                            ; ---------------------------------------------------------------------------
0000B0CE 0000                       		dc.w byte_AC78-Map_obj2C
0000B0D0 0000                       		dc.w byte_AC83-Map_obj2C
0000B0D2 0000                       		dc.w byte_AC8E-Map_obj2C
0000B0D4 0000                       		dc.w byte_AC99-Map_obj2C
0000B0D6 02                         byte_AC78:	dc.b 2
0000B0D7 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B0DC F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B0E1 02                         byte_AC83:	dc.b 2
0000B0E2 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B0E7 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B0EC 02                         byte_AC8E:	dc.b 2
0000B0ED F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B0F2 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B0F7 02                         byte_AC99:	dc.b 2
0000B0F8 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B0FD F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B102                            		even
0000B102                            		even
0000B102                            
0000B102                            ; ===========================================================================
0000B102                            ; ---------------------------------------------------------------------------
0000B102                            ; Object 2D - Burrobot enemy (LZ)
0000B102                            ; ---------------------------------------------------------------------------
0000B102                            
0000B102                            Obj2D:					; XREF: Obj_Index
0000B102 7000                       		moveq	#0,d0
0000B104 1028 0024                  		move.b	$24(a0),d0
0000B108 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B10C 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B110                            ; ===========================================================================
0000B110 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B112 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B114                            ; ===========================================================================
0000B114                            
0000B114                            Obj2D_Main:				; XREF: Obj2D_Index
0000B114 5428 0024                  		addq.b	#2,$24(a0)
0000B118 117C 0013 0016             		move.b	#$13,$16(a0)
0000B11E 117C 0008 0017             		move.b	#8,$17(a0)
0000B124 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B12C 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B132 0028 0004 0001             		ori.b	#4,1(a0)
0000B138 117C 0004 0018             		move.b	#4,$18(a0)
0000B13E 117C 0005 0020             		move.b	#5,$20(a0)
0000B144 117C 000C 0019             		move.b	#$C,$19(a0)
0000B14A 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B14E 117C 0002 001C             		move.b	#2,$1C(a0)
0000B154                            
0000B154                            Obj2D_Action:				; XREF: Obj2D_Index
0000B154 7000                       		moveq	#0,d0
0000B156 1028 0025                  		move.b	$25(a0),d0
0000B15A 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B15E 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B162 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B168 6100 FAA6                  		bsr.w	AnimateSprite
0000B16C 6000 0000                  		bra.w	MarkObjGone
0000B170                            ; ===========================================================================
0000B170 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B172 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B174 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B176 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B178                            ; ===========================================================================
0000B178                            
0000B178                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B178 5368 0030                  		subq.w	#1,$30(a0)
0000B17C 6A00                       		bpl.s	locret_AD42
0000B17E 5428 0025                  		addq.b	#2,$25(a0)
0000B182 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B188 317C 0080 0010             		move.w	#$80,$10(a0)
0000B18E 117C 0001 001C             		move.b	#1,$1C(a0)
0000B194 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B19A 6700                       		beq.s	locret_AD42
0000B19C 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B1A0                            
0000B1A0                            locret_AD42:
0000B1A0 4E75                       		rts	
0000B1A2                            ; ===========================================================================
0000B1A2                            
0000B1A2                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B1A2 5368 0030                  		subq.w	#1,$30(a0)
0000B1A6 6B00                       		bmi.s	loc_AD84
0000B1A8 6100 0000                  		bsr.w	SpeedToPos
0000B1AC 0868 0000 0032             		bchg	#0,$32(a0)
0000B1B2 6600                       		bne.s	loc_AD78
0000B1B4 3628 0008                  		move.w	8(a0),d3
0000B1B8 0643 000C                  		addi.w	#$C,d3
0000B1BC 0828 0000 0022             		btst	#0,$22(a0)
0000B1C2 6600                       		bne.s	loc_AD6A
0000B1C4 0443 0018                  		subi.w	#$18,d3
0000B1C8                            
0000B1C8                            loc_AD6A:
0000B1C8 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B1CE 0C41 000C                  		cmpi.w	#$C,d1
0000B1D2 6C00                       		bge.s	loc_AD84
0000B1D4 4E75                       		rts	
0000B1D6                            ; ===========================================================================
0000B1D6                            
0000B1D6                            loc_AD78:				; XREF: Obj2D_Move
0000B1D6 4EB9 0000 0000             		jsr	ObjHitFloor
0000B1DC D368 000C                  		add.w	d1,$C(a0)
0000B1E0 4E75                       		rts	
0000B1E2                            ; ===========================================================================
0000B1E2                            
0000B1E2                            loc_AD84:				; XREF: Obj2D_Move
0000B1E2 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B1E8 6700                       		beq.s	loc_ADA4
0000B1EA 5528 0025                  		subq.b	#2,$25(a0)
0000B1EE 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B1F4 317C 0000 0010             		move.w	#0,$10(a0)
0000B1FA 117C 0000 001C             		move.b	#0,$1C(a0)
0000B200 4E75                       		rts	
0000B202                            ; ===========================================================================
0000B202                            
0000B202                            loc_ADA4:
0000B202 5428 0025                  		addq.b	#2,$25(a0)
0000B206 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B20C 117C 0002 001C             		move.b	#2,$1C(a0)
0000B212 4E75                       		rts	
0000B214                            ; ===========================================================================
0000B214                            
0000B214                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B214 6100 0000                  		bsr.w	SpeedToPos
0000B218 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B21E 6B00                       		bmi.s	locret_ADF0
0000B220 117C 0003 001C             		move.b	#3,$1C(a0)
0000B226 4EB9 0000 0000             		jsr	ObjHitFloor
0000B22C 4A41                       		tst.w	d1
0000B22E 6A00                       		bpl.s	locret_ADF0
0000B230 D368 000C                  		add.w	d1,$C(a0)
0000B234 317C 0000 0012             		move.w	#0,$12(a0)
0000B23A 117C 0001 001C             		move.b	#1,$1C(a0)
0000B240 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B246 5528 0025                  		subq.b	#2,$25(a0)
0000B24A 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B24E                            
0000B24E                            locret_ADF0:
0000B24E 4E75                       		rts	
0000B250                            ; ===========================================================================
0000B250                            
0000B250                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B250 343C 0060                  		move.w	#$60,d2
0000B254 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B258 6400                       		bcc.s	locret_AE20
0000B25A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B25E 9068 000C                  		sub.w	$C(a0),d0
0000B262 6400                       		bcc.s	locret_AE20
0000B264 0C40 FF80                  		cmpi.w	#-$80,d0
0000B268 6500                       		bcs.s	locret_AE20
0000B26A 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B26E 6600                       		bne.s	locret_AE20
0000B270 5528 0025                  		subq.b	#2,$25(a0)
0000B274 3141 0010                  		move.w	d1,$10(a0)
0000B278 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B27E                            
0000B27E                            locret_AE20:
0000B27E 4E75                       		rts	
0000B280                            
0000B280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B280                            
0000B280                            
0000B280                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B280 323C 0080                  		move.w	#$80,d1
0000B284 08E8 0000 0022             		bset	#0,$22(a0)
0000B28A 3038 D008                  		move.w	($FFFFD008).w,d0
0000B28E 9068 0008                  		sub.w	8(a0),d0
0000B292 6400                       		bcc.s	loc_AE40
0000B294 4440                       		neg.w	d0
0000B296 4441                       		neg.w	d1
0000B298 08A8 0000 0022             		bclr	#0,$22(a0)
0000B29E                            
0000B29E                            loc_AE40:
0000B29E B042                       		cmp.w	d2,d0
0000B2A0 4E75                       		rts	
0000B2A2                            ; End of function Obj2D_ChkSonic2
0000B2A2                            
0000B2A2                            ; ===========================================================================
0000B2A2                            Ani_obj2D:
0000B2A2                            	include "_anim\obj2D.asm"
0000B2A2                            ; ---------------------------------------------------------------------------
0000B2A2                            ; Animation script - Burrobot enemy but craig
0000B2A2                            ; ---------------------------------------------------------------------------
0000B2A2 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B2A4 0000                       		dc.w byte_AE50-Ani_obj2D
0000B2A6 0000                       		dc.w byte_AE54-Ani_obj2D
0000B2A8 0000                       		dc.w byte_AE58-Ani_obj2D
0000B2AA 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B2AD 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B2B1 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B2BF 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B2C2                            		even
0000B2C2                            		even
0000B2C2                            
0000B2C2                            ; ---------------------------------------------------------------------------
0000B2C2                            ; Sprite mappings - Burrobot enemy (LZ)
0000B2C2                            ; ---------------------------------------------------------------------------
0000B2C2                            Map_obj2D:
0000B2C2                            	include "_maps\obj2D.asm"
0000B2C2                            Map_e3a3:
0000B2C2 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B2C4 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B2C6 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B2C8 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B2CA 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B2CC 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B2CE 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B2D0 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B2D2 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B2D4 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B2D6 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B2D8 02                         Map_e3a3_16: 	dc.b $2
0000B2D9 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B2DE 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B2E3 02                         Map_e3a3_21: 	dc.b $2
0000B2E4 EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B2E9 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B2EE 02                         Map_e3a3_2C: 	dc.b $2
0000B2EF EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B2F4 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B2F9 02                         Map_e3a3_37: 	dc.b $2
0000B2FA EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B2FF FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B304 02                         Map_e3a3_42: 	dc.b $2
0000B305 EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B30A FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B30F 02                         Map_e3a3_4D: 	dc.b $2
0000B310 EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B315 FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B31A 02                         Map_e3a3_58: 	dc.b $2
0000B31B EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B320 FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B325 02                         Map_e3a3_63: 	dc.b $2
0000B326 EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B32B FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B330 02                         Map_e3a3_6E: 	dc.b $2
0000B331 EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B336 FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B33B 02                         Map_e3a3_79: 	dc.b $2
0000B33C EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B341 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B346 02                         Map_e3a3_84: 	dc.b $2
0000B347 EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B34C 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B352 00                         	even
0000B352 00                         	even
0000B352                            
0000B352                            ; ===========================================================================
0000B352                            ; ---------------------------------------------------------------------------
0000B352                            ; Object 2F - large moving platforms (MZ)
0000B352                            ; ---------------------------------------------------------------------------
0000B352                            
0000B352                            Obj2F:					; XREF: Obj_Index
0000B352 7000                       		moveq	#0,d0
0000B354 1028 0024                  		move.b	$24(a0),d0
0000B358 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B35C 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B360                            ; ===========================================================================
0000B360 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B362 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B364                            
0000B364 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B366 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B368 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B36A 0140                       		dc.b 1,	$40
0000B36C 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B36E 0220                       		dc.b 2,	$20
0000B370                            ; ===========================================================================
0000B370                            
0000B370                            Obj2F_Main:				; XREF: Obj2F_Index
0000B370 5428 0024                  		addq.b	#2,$24(a0)
0000B374 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B37C 317C C000 0002             		move.w	#$C000,2(a0)
0000B382 117C 0004 0001             		move.b	#4,1(a0)
0000B388 117C 0005 0018             		move.b	#5,$18(a0)
0000B38E 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B394 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B39A 7000                       		moveq	#0,d0
0000B39C 1028 0028                  		move.b	$28(a0),d0
0000B3A0 E448                       		lsr.w	#2,d0
0000B3A2 0240 001C                  		andi.w	#$1C,d0
0000B3A6 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B3AA 3019                       		move.w	(a1)+,d0
0000B3AC 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B3B0 214A 0030                  		move.l	a2,$30(a0)
0000B3B4 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B3B8 1151 0019                  		move.b	(a1),$19(a0)
0000B3BC 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B3C2 117C 0040 0016             		move.b	#$40,$16(a0)
0000B3C8 08E8 0004 0001             		bset	#4,1(a0)
0000B3CE                            
0000B3CE                            Obj2F_Action:				; XREF: Obj2F_Index
0000B3CE 6100 0000                  		bsr.w	Obj2F_Types
0000B3D2 4A28 0025                  		tst.b	$25(a0)
0000B3D6 6700                       		beq.s	Obj2F_Solid
0000B3D8 7200                       		moveq	#0,d1
0000B3DA 1228 0019                  		move.b	$19(a0),d1
0000B3DE 0641 000B                  		addi.w	#$B,d1
0000B3E2 6100 C5FC                  		bsr.w	ExitPlatform
0000B3E6 0829 0003 0022             		btst	#3,$22(a1)
0000B3EC 6600 0000                  		bne.w	Obj2F_Slope
0000B3F0 4228 0025                  		clr.b	$25(a0)
0000B3F4 6000                       		bra.s	Obj2F_Display
0000B3F6                            ; ===========================================================================
0000B3F6                            
0000B3F6                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B3F6 7200                       		moveq	#0,d1
0000B3F8 1228 0019                  		move.b	$19(a0),d1
0000B3FC 0641 000B                  		addi.w	#$B,d1
0000B400 2468 0030                  		movea.l	$30(a0),a2
0000B404 3428 0008                  		move.w	8(a0),d2
0000B408 6100 D534                  		bsr.w	SlopeObject2
0000B40C 6000                       		bra.s	Obj2F_Display
0000B40E                            ; ===========================================================================
0000B40E                            
0000B40E                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B40E 7200                       		moveq	#0,d1
0000B410 1228 0019                  		move.b	$19(a0),d1
0000B414 0641 000B                  		addi.w	#$B,d1
0000B418 343C 0020                  		move.w	#$20,d2
0000B41C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B422 6600                       		bne.s	loc_AF8E
0000B424 343C 0030                  		move.w	#$30,d2
0000B428                            
0000B428                            loc_AF8E:
0000B428 2468 0030                  		movea.l	$30(a0),a2
0000B42C 6100 0000                  		bsr.w	SolidObject2F
0000B430                            
0000B430                            Obj2F_Display:				; XREF: Obj2F_Action
0000B430 6100 0000                  		bsr.w	DisplaySprite
0000B434 6000 0000                  		bra.w	Obj2F_ChkDel
0000B438                            
0000B438                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B438                            
0000B438                            
0000B438                            Obj2F_Types:				; XREF: Obj2F_Action
0000B438 7000                       		moveq	#0,d0
0000B43A 1028 0028                  		move.b	$28(a0),d0
0000B43E 0240 0007                  		andi.w	#7,d0
0000B442 D040                       		add.w	d0,d0
0000B444 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B448 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B44C                            ; End of function Obj2F_Types
0000B44C                            
0000B44C                            ; ===========================================================================
0000B44C 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B44E 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B450 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B452 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B454 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B456 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B458                            ; ===========================================================================
0000B458                            
0000B458                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B458 4E75                       		rts			; type 00 platform doesn't move
0000B45A                            ; ===========================================================================
0000B45A                            
0000B45A                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B45A 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B45E 323C 0020                  		move.w	#$20,d1
0000B462 6000                       		bra.s	Obj2F_Move
0000B464                            ; ===========================================================================
0000B464                            
0000B464                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B464 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B468 323C 0030                  		move.w	#$30,d1
0000B46C 6000                       		bra.s	Obj2F_Move
0000B46E                            ; ===========================================================================
0000B46E                            
0000B46E                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B46E 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B472 323C 0040                  		move.w	#$40,d1
0000B476 6000                       		bra.s	Obj2F_Move
0000B478                            ; ===========================================================================
0000B478                            
0000B478                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B478 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B47C 323C 0060                  		move.w	#$60,d1
0000B480                            
0000B480                            Obj2F_Move:
0000B480 0828 0003 0028             		btst	#3,$28(a0)
0000B486 6700                       		beq.s	loc_AFF2
0000B488 4440                       		neg.w	d0
0000B48A D041                       		add.w	d1,d0
0000B48C                            
0000B48C                            loc_AFF2:
0000B48C 3228 002C                  		move.w	$2C(a0),d1
0000B490 9240                       		sub.w	d0,d1
0000B492 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B496 4E75                       		rts	
0000B498                            ; ===========================================================================
0000B498                            
0000B498                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B498 1028 0034                  		move.b	$34(a0),d0
0000B49C 4A28 0025                  		tst.b	$25(a0)
0000B4A0 6600                       		bne.s	loc_B010
0000B4A2 5500                       		subq.b	#2,d0
0000B4A4 6400                       		bcc.s	loc_B01C
0000B4A6 7000                       		moveq	#0,d0
0000B4A8 6000                       		bra.s	loc_B01C
0000B4AA                            ; ===========================================================================
0000B4AA                            
0000B4AA                            loc_B010:
0000B4AA 5800                       		addq.b	#4,d0
0000B4AC 0C00 0040                  		cmpi.b	#$40,d0
0000B4B0 6500                       		bcs.s	loc_B01C
0000B4B2 103C 0040                  		move.b	#$40,d0
0000B4B6                            
0000B4B6                            loc_B01C:
0000B4B6 1140 0034                  		move.b	d0,$34(a0)
0000B4BA 4EB9 0000 2BE8             		jsr	(CalcSine).l
0000B4C0 E848                       		lsr.w	#4,d0
0000B4C2 3200                       		move.w	d0,d1
0000B4C4 D068 002C                  		add.w	$2C(a0),d0
0000B4C8 3140 000C                  		move.w	d0,$C(a0)
0000B4CC 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B4D2 6600                       		bne.s	loc_B07A
0000B4D4 4A28 0035                  		tst.b	$35(a0)
0000B4D8 6600                       		bne.s	loc_B07A
0000B4DA 117C 0001 0035             		move.b	#1,$35(a0)
0000B4E0 6100 0000                  		bsr.w	SingleObjLoad2
0000B4E4 6600                       		bne.s	loc_B07A
0000B4E6 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B4EA 3368 0008 0008             		move.w	8(a0),8(a1)
0000B4F0 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B4F6 5069 002C                  		addq.w	#8,$2C(a1)
0000B4FA 5769 002C                  		subq.w	#3,$2C(a1)
0000B4FE 0469 0040 0008             		subi.w	#$40,8(a1)
0000B504 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B50A 2348 0038                  		move.l	a0,$38(a1)
0000B50E 2448                       		movea.l	a0,a2
0000B510 6100                       		bsr.s	sub_B09C
0000B512                            
0000B512                            loc_B07A:
0000B512 7400                       		moveq	#0,d2
0000B514 45E8 0036                  		lea	$36(a0),a2
0000B518 141A                       		move.b	(a2)+,d2
0000B51A 5302                       		subq.b	#1,d2
0000B51C 6500                       		bcs.s	locret_B09A
0000B51E                            
0000B51E                            loc_B086:
0000B51E 7000                       		moveq	#0,d0
0000B520 101A                       		move.b	(a2)+,d0
0000B522 ED48                       		lsl.w	#6,d0
0000B524 0640 D000                  		addi.w	#-$3000,d0
0000B528 3240                       		movea.w	d0,a1
0000B52A 3341 003C                  		move.w	d1,$3C(a1)
0000B52E 51CA FFEE                  		dbf	d2,loc_B086
0000B532                            
0000B532                            locret_B09A:
0000B532 4E75                       		rts	
0000B534                            
0000B534                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B534                            
0000B534                            
0000B534                            sub_B09C:
0000B534 45EA 0036                  		lea	$36(a2),a2
0000B538 7000                       		moveq	#0,d0
0000B53A 1012                       		move.b	(a2),d0
0000B53C 5212                       		addq.b	#1,(a2)
0000B53E 45F2 0001                  		lea	1(a2,d0.w),a2
0000B542 3009                       		move.w	a1,d0
0000B544 0440 D000                  		subi.w	#-$3000,d0
0000B548 EC48                       		lsr.w	#6,d0
0000B54A 0240 007F                  		andi.w	#$7F,d0
0000B54E 1480                       		move.b	d0,(a2)
0000B550 4E75                       		rts	
0000B552                            ; End of function sub_B09C
0000B552                            
0000B552                            ; ===========================================================================
0000B552                            
0000B552                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B552 4A28 0035                  		tst.b	$35(a0)
0000B556 6700                       		beq.s	loc_B0C6
0000B558 4A28 0001                  		tst.b	1(a0)
0000B55C 6A00                       		bpl.s	Obj2F_DelFlames
0000B55E                            
0000B55E                            loc_B0C6:
0000B55E 3028 002A                  		move.w	$2A(a0),d0
0000B562 0240 FF80                  		andi.w	#$FF80,d0
0000B566 3238 F700                  		move.w	($FFFFF700).w,d1
0000B56A 0441 0080                  		subi.w	#$80,d1
0000B56E 0241 FF80                  		andi.w	#$FF80,d1
0000B572 9041                       		sub.w	d1,d0
0000B574 0C40 0280                  		cmpi.w	#$280,d0
0000B578 6200 0000                  		bhi.w	DeleteObject
0000B57C 4E75                       		rts	
0000B57E                            ; ===========================================================================
0000B57E                            
0000B57E                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B57E 7400                       		moveq	#0,d2
0000B580                            
0000B580                            loc_B0E8:
0000B580 45E8 0036                  		lea	$36(a0),a2
0000B584 1412                       		move.b	(a2),d2
0000B586 421A                       		clr.b	(a2)+
0000B588 5302                       		subq.b	#1,d2
0000B58A 6500                       		bcs.s	locret_B116
0000B58C                            
0000B58C                            loc_B0F4:
0000B58C 7000                       		moveq	#0,d0
0000B58E 1012                       		move.b	(a2),d0
0000B590 421A                       		clr.b	(a2)+
0000B592 ED48                       		lsl.w	#6,d0
0000B594 0640 D000                  		addi.w	#-$3000,d0
0000B598 3240                       		movea.w	d0,a1
0000B59A 6100 0000                  		bsr.w	DeleteObject2
0000B59E 51CA FFEC                  		dbf	d2,loc_B0F4
0000B5A2 117C 0000 0035             		move.b	#0,$35(a0)
0000B5A8 117C 0000 0034             		move.b	#0,$34(a0)
0000B5AE                            
0000B5AE                            locret_B116:
0000B5AE 4E75                       		rts	
0000B5B0                            ; ===========================================================================
0000B5B0                            ; ---------------------------------------------------------------------------
0000B5B0                            ; Collision data for large moving platforms (MZ)
0000B5B0                            ; ---------------------------------------------------------------------------
0000B5B0                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B5FC                            		even
0000B5FC                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B628                            		even
0000B628                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B674                            		even
0000B674                            ; ===========================================================================
0000B674                            ; ---------------------------------------------------------------------------
0000B674                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B674                            ; (appears when	you walk on sinking platforms)
0000B674                            ; ---------------------------------------------------------------------------
0000B674                            
0000B674                            Obj35:					; XREF: Obj_Index
0000B674 7000                       		moveq	#0,d0
0000B676 1028 0024                  		move.b	$24(a0),d0
0000B67A 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B67E 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B682                            ; ===========================================================================
0000B682 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B684 0000                       		dc.w loc_B238-Obj35_Index
0000B686 0000                       		dc.w Obj35_Move-Obj35_Index
0000B688                            ; ===========================================================================
0000B688                            
0000B688                            Obj35_Main:				; XREF: Obj35_Index
0000B688 5428 0024                  		addq.b	#2,$24(a0)
0000B68C 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B694 317C 0345 0002             		move.w	#$345,2(a0)
0000B69A 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B6A0 117C 0004 0001             		move.b	#4,1(a0)
0000B6A6 117C 0001 0018             		move.b	#1,$18(a0)
0000B6AC 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B6B2 117C 0008 0019             		move.b	#8,$19(a0)
0000B6B8 303C 00C8                  		move.w	#$C8,d0
0000B6BC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000B6C2 4A28 0028                  		tst.b	$28(a0)
0000B6C6 6700                       		beq.s	loc_B238
0000B6C8 5428 0024                  		addq.b	#2,$24(a0)
0000B6CC 6000 0000                  		bra.w	Obj35_Move
0000B6D0                            ; ===========================================================================
0000B6D0                            
0000B6D0                            loc_B238:				; XREF: Obj35_Index
0000B6D0 2268 0030                  		movea.l	$30(a0),a1
0000B6D4 3228 0008                  		move.w	8(a0),d1
0000B6D8 9268 002A                  		sub.w	$2A(a0),d1
0000B6DC 0641 000C                  		addi.w	#$C,d1
0000B6E0 3001                       		move.w	d1,d0
0000B6E2 E248                       		lsr.w	#1,d0
0000B6E4 1031 0000                  		move.b	(a1,d0.w),d0
0000B6E8 4440                       		neg.w	d0
0000B6EA D068 002C                  		add.w	$2C(a0),d0
0000B6EE 3400                       		move.w	d0,d2
0000B6F0 D068 003C                  		add.w	$3C(a0),d0
0000B6F4 3140 000C                  		move.w	d0,$C(a0)
0000B6F8 0C41 0084                  		cmpi.w	#$84,d1
0000B6FC 6400                       		bcc.s	loc_B2B0
0000B6FE 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B706 0C41 0080                  		cmpi.w	#$80,d1
0000B70A 6400                       		bcc.s	loc_B2B0
0000B70C 2028 0008                  		move.l	8(a0),d0
0000B710 0680 0008 0000             		addi.l	#$80000,d0
0000B716 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B71C 6600                       		bne.s	loc_B2B0
0000B71E 6100 0000                  		bsr.w	SingleObjLoad2
0000B722 6600                       		bne.s	loc_B2B0
0000B724 12BC 0035                  		move.b	#$35,0(a1)
0000B728 3368 0008 0008             		move.w	8(a0),8(a1)
0000B72E 3342 002C                  		move.w	d2,$2C(a1)
0000B732 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B738 137C 0001 0028             		move.b	#1,$28(a1)
0000B73E 2468 0038                  		movea.l	$38(a0),a2
0000B742 6100 FDF0                  		bsr.w	sub_B09C
0000B746                            
0000B746                            loc_B2B0:
0000B746 6000                       		bra.s	Obj35_Animate
0000B748                            ; ===========================================================================
0000B748                            
0000B748                            Obj35_Move:				; XREF: Obj35_Index
0000B748 3028 002C                  		move.w	$2C(a0),d0
0000B74C D068 003C                  		add.w	$3C(a0),d0
0000B750 3140 000C                  		move.w	d0,$C(a0)
0000B754                            
0000B754                            Obj35_Animate:				; XREF: loc_B238
0000B754 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B75A 6100 F4B4                  		bsr.w	AnimateSprite
0000B75E 6000 0000                  		bra.w	DisplaySprite
0000B762                            ; ===========================================================================
0000B762                            Ani_obj35:
0000B762                            	include "_anim\obj35.asm"
0000B762                            ; ---------------------------------------------------------------------------
0000B762                            ; Animation script - fireball that sits on the	floor (MZ)
0000B762                            ; ---------------------------------------------------------------------------
0000B762 0000                       		dc.w byte_B2CE-Ani_obj35
0000B764 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B76A                            		even
0000B76A                            		even
0000B76A                            
0000B76A                            ; ---------------------------------------------------------------------------
0000B76A                            ; Sprite mappings - large moving platforms (MZ)
0000B76A                            ; ---------------------------------------------------------------------------
0000B76A                            Map_obj2F:
0000B76A                            	include "_maps\obj2F.asm"
0000B76A                            ; ---------------------------------------------------------------------------
0000B76A                            ; Sprite mappings - large moving platforms (MZ)
0000B76A                            ; ---------------------------------------------------------------------------
0000B76A 0000                       		dc.w byte_B2DA-Map_obj2F
0000B76C 0000                       		dc.w byte_B31C-Map_obj2F
0000B76E 0000                       		dc.w byte_B34F-Map_obj2F
0000B770 0D                         byte_B2DA:	dc.b $D
0000B771 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B776 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B77B 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B780 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B785 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B78A F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B78F D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B794 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B799 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B79E F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B7A3 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B7A8 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B7AD F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B7B2 0A                         byte_B31C:	dc.b $A
0000B7B3 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B7B8 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B7BD 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B7C2 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B7C7 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B7CC F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B7D1 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B7D6 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B7DB C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B7E0 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B7E5 06                         byte_B34F:	dc.b 6
0000B7E6 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000B7EB F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B7F0 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000B7F5 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000B7FA F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B7FF 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000B804                            		even
0000B804                            		even
0000B804                            
0000B804                            ; ---------------------------------------------------------------------------
0000B804                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B804                            ; ---------------------------------------------------------------------------
0000B804                            Map_obj14:
0000B804                            	include "_maps\obj14.asm"
0000B804                            ; ---------------------------------------------------------------------------
0000B804                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B804                            ; ---------------------------------------------------------------------------
0000B804 0000                       		dc.w byte_B37A-Map_obj14
0000B806 0000                       		dc.w byte_B380-Map_obj14
0000B808 0000                       		dc.w byte_B386-Map_obj14
0000B80A 0000                       		dc.w byte_B38C-Map_obj14
0000B80C 0000                       		dc.w byte_B392-Map_obj14
0000B80E 0000                       		dc.w byte_B398-Map_obj14
0000B810 01                         byte_B37A:	dc.b 1
0000B811 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000B816 01                         byte_B380:	dc.b 1
0000B817 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000B81C 01                         byte_B386:	dc.b 1
0000B81D F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000B822 01                         byte_B38C:	dc.b 1
0000B823 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000B828 01                         byte_B392:	dc.b 1
0000B829 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000B82E 01                         byte_B398:	dc.b 1
0000B82F F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000B834                            		even
0000B834                            		even
0000B834                            
0000B834                            ; ===========================================================================
0000B834                            ; ---------------------------------------------------------------------------
0000B834                            ; Object 30 - large green glassy blocks	(MZ)
0000B834                            ; ---------------------------------------------------------------------------
0000B834                            
0000B834                            Obj30:					; XREF: Obj_Index
0000B834 7000                       		moveq	#0,d0
0000B836 1028 0024                  		move.b	$24(a0),d0
0000B83A 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000B83E 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000B842 3028 0008                  		move.w	8(a0),d0
0000B846 0240 FF80                  		andi.w	#$FF80,d0
0000B84A 3238 F700                  		move.w	($FFFFF700).w,d1
0000B84E 0441 0080                  		subi.w	#$80,d1
0000B852 0241 FF80                  		andi.w	#$FF80,d1
0000B856 9041                       		sub.w	d1,d0
0000B858 0C40 0280                  		cmpi.w	#$280,d0
0000B85C 6200 0000                  		bhi.w	Obj30_Delete
0000B860 6000 0000                  		bra.w	DisplaySprite
0000B864                            ; ===========================================================================
0000B864                            
0000B864                            Obj30_Delete:
0000B864 6000 0000                  		bra.w	DeleteObject
0000B868                            ; ===========================================================================
0000B868 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000B86A 0000                       		dc.w Obj30_Block012-Obj30_Index
0000B86C 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000B86E 0000                       		dc.w Obj30_Block34-Obj30_Index
0000B870 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000B872                            
0000B872 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000B875 0400 01                    		dc.b 4,	0, 1
0000B878 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000B87B 0800 01                    		dc.b 8,	0, 1
0000B87E                            ; ===========================================================================
0000B87E                            
0000B87E                            Obj30_Main:				; XREF: Obj30_Index
0000B87E 45F9 0000 B872             		lea	(Obj30_Vars1).l,a2
0000B884 7201                       		moveq	#1,d1
0000B886 117C 0048 0016             		move.b	#$48,$16(a0)
0000B88C 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000B892 6500                       		bcs.s	loc_B40C	; if yes, branch
0000B894 45F9 0000 B878             		lea	(Obj30_Vars2).l,a2
0000B89A 7201                       		moveq	#1,d1
0000B89C 117C 0038 0016             		move.b	#$38,$16(a0)
0000B8A2                            
0000B8A2                            loc_B40C:
0000B8A2 2248                       		movea.l	a0,a1
0000B8A4 6000                       		bra.s	Obj30_Load	; load main object
0000B8A6                            ; ===========================================================================
0000B8A6                            
0000B8A6                            Obj30_Loop:
0000B8A6 6100 0000                  		bsr.w	SingleObjLoad2
0000B8AA 6600                       		bne.s	loc_B480
0000B8AC                            
0000B8AC                            Obj30_Load:				; XREF: Obj30_Main
0000B8AC 135A 0024                  		move.b	(a2)+,$24(a1)
0000B8B0 12BC 0030                  		move.b	#$30,0(a1)
0000B8B4 3368 0008 0008             		move.w	8(a0),8(a1)
0000B8BA 101A                       		move.b	(a2)+,d0
0000B8BC 4880                       		ext.w	d0
0000B8BE D068 000C                  		add.w	$C(a0),d0
0000B8C2 3340 000C                  		move.w	d0,$C(a1)
0000B8C6 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000B8CE 337C C38E 0002             		move.w	#$C38E,2(a1)
0000B8D4 137C 0004 0001             		move.b	#4,1(a1)
0000B8DA 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B8E0 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B8E6 137C 0020 0019             		move.b	#$20,$19(a1)
0000B8EC 137C 0004 0018             		move.b	#4,$18(a1)
0000B8F2 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B8F6 2348 003C                  		move.l	a0,$3C(a1)
0000B8FA 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000B8FE                            
0000B8FE 137C 0010 0019             		move.b	#$10,$19(a1)
0000B904 137C 0003 0018             		move.b	#3,$18(a1)
0000B90A 5029 0028                  		addq.b	#8,$28(a1)
0000B90E 0229 000F 0028             		andi.b	#$F,$28(a1)
0000B914                            
0000B914                            loc_B480:
0000B914 317C 0090 0032             		move.w	#$90,$32(a0)
0000B91A 08E8 0004 0001             		bset	#4,1(a0)
0000B920                            
0000B920                            Obj30_Block012:				; XREF: Obj30_Index
0000B920 6100 0000                  		bsr.w	Obj30_Types
0000B924 323C 002B                  		move.w	#$2B,d1
0000B928 343C 0048                  		move.w	#$48,d2
0000B92C 363C 0049                  		move.w	#$49,d3
0000B930 3828 0008                  		move.w	8(a0),d4
0000B934 6000 0000                  		bra.w	SolidObject
0000B938                            ; ===========================================================================
0000B938                            
0000B938                            Obj30_Reflect012:			; XREF: Obj30_Index
0000B938 2268 003C                  		movea.l	$3C(a0),a1
0000B93C 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B942 6000 0000                  		bra.w	Obj30_Types
0000B946                            ; ===========================================================================
0000B946                            
0000B946                            Obj30_Block34:				; XREF: Obj30_Index
0000B946 6100 0000                  		bsr.w	Obj30_Types
0000B94A 323C 002B                  		move.w	#$2B,d1
0000B94E 343C 0038                  		move.w	#$38,d2
0000B952 363C 0039                  		move.w	#$39,d3
0000B956 3828 0008                  		move.w	8(a0),d4
0000B95A 6000 0000                  		bra.w	SolidObject
0000B95E                            ; ===========================================================================
0000B95E                            
0000B95E                            Obj30_Reflect34:			; XREF: Obj30_Index
0000B95E 2268 003C                  		movea.l	$3C(a0),a1
0000B962 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B968 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000B96E 6000 0002                  		bra.w	*+4
0000B972                            
0000B972                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B972                            
0000B972                            
0000B972                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000B972 7000                       		moveq	#0,d0
0000B974 1028 0028                  		move.b	$28(a0),d0
0000B978 0240 0007                  		andi.w	#7,d0
0000B97C D040                       		add.w	d0,d0
0000B97E 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000B982 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000B986                            ; End of function Obj30_Types
0000B986                            
0000B986                            ; ===========================================================================
0000B986 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000B988 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000B98A 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000B98C 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000B98E 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000B990                            ; ===========================================================================
0000B990                            
0000B990                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000B990 4E75                       		rts	
0000B992                            ; ===========================================================================
0000B992                            
0000B992                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000B992 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B996 323C 0040                  		move.w	#$40,d1
0000B99A 6000                       		bra.s	loc_B514
0000B99C                            ; ===========================================================================
0000B99C                            
0000B99C                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000B99C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B9A0 323C 0040                  		move.w	#$40,d1
0000B9A4 4440                       		neg.w	d0
0000B9A6 D041                       		add.w	d1,d0
0000B9A8                            
0000B9A8                            loc_B514:				; XREF: Obj30_Type01
0000B9A8 0828 0003 0028             		btst	#3,$28(a0)
0000B9AE 6700                       		beq.s	loc_B526
0000B9B0 4440                       		neg.w	d0
0000B9B2 D041                       		add.w	d1,d0
0000B9B4 E208                       		lsr.b	#1,d0
0000B9B6 0640 0020                  		addi.w	#$20,d0
0000B9BA                            
0000B9BA                            loc_B526:
0000B9BA 6000 0000                  		bra.w	loc_B5EE
0000B9BE                            ; ===========================================================================
0000B9BE                            
0000B9BE                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000B9BE 0828 0003 0028             		btst	#3,$28(a0)
0000B9C4 6700                       		beq.s	loc_B53E
0000B9C6 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B9CA 0440 0010                  		subi.w	#$10,d0
0000B9CE 6000 0000                  		bra.w	loc_B5EE
0000B9D2                            ; ===========================================================================
0000B9D2                            
0000B9D2                            loc_B53E:
0000B9D2 0828 0003 0022             		btst	#3,$22(a0)
0000B9D8 6600                       		bne.s	loc_B54E
0000B9DA 08A8 0000 0034             		bclr	#0,$34(a0)
0000B9E0 6000                       		bra.s	loc_B582
0000B9E2                            ; ===========================================================================
0000B9E2                            
0000B9E2                            loc_B54E:
0000B9E2 4A28 0034                  		tst.b	$34(a0)
0000B9E6 6600                       		bne.s	loc_B582
0000B9E8 117C 0001 0034             		move.b	#1,$34(a0)
0000B9EE 08E8 0000 0035             		bset	#0,$35(a0)
0000B9F4 6700                       		beq.s	loc_B582
0000B9F6 08E8 0007 0034             		bset	#7,$34(a0)
0000B9FC 317C 0010 0036             		move.w	#$10,$36(a0)
0000BA02 117C 000A 0038             		move.b	#$A,$38(a0)
0000BA08 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BA0E 6600                       		bne.s	loc_B582
0000BA10 317C 0040 0036             		move.w	#$40,$36(a0)
0000BA16                            
0000BA16                            loc_B582:
0000BA16 4A28 0034                  		tst.b	$34(a0)
0000BA1A 6A00                       		bpl.s	loc_B5AA
0000BA1C 4A28 0038                  		tst.b	$38(a0)
0000BA20 6700                       		beq.s	loc_B594
0000BA22 5328 0038                  		subq.b	#1,$38(a0)
0000BA26 6600                       		bne.s	loc_B5AA
0000BA28                            
0000BA28                            loc_B594:
0000BA28 4A68 0032                  		tst.w	$32(a0)
0000BA2C 6700                       		beq.s	loc_B5A4
0000BA2E 5368 0032                  		subq.w	#1,$32(a0)
0000BA32 5368 0036                  		subq.w	#1,$36(a0)
0000BA36 6600                       		bne.s	loc_B5AA
0000BA38                            
0000BA38                            loc_B5A4:
0000BA38 08A8 0007 0034             		bclr	#7,$34(a0)
0000BA3E                            
0000BA3E                            loc_B5AA:
0000BA3E 3028 0032                  		move.w	$32(a0),d0
0000BA42 6000                       		bra.s	loc_B5EE
0000BA44                            ; ===========================================================================
0000BA44                            
0000BA44                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BA44 0828 0003 0028             		btst	#3,$28(a0)
0000BA4A 6700                       		beq.s	Obj30_ChkSwitch
0000BA4C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BA50 0440 0010                  		subi.w	#$10,d0
0000BA54 6000                       		bra.s	loc_B5EE
0000BA56                            ; ===========================================================================
0000BA56                            
0000BA56                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BA56 4A28 0034                  		tst.b	$34(a0)
0000BA5A 6600                       		bne.s	loc_B5E0
0000BA5C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BA60 7000                       		moveq	#0,d0
0000BA62 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BA66 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BA68 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BA6C 6700                       		beq.s	loc_B5EA	; if not, branch
0000BA6E 117C 0001 0034             		move.b	#1,$34(a0)
0000BA74                            
0000BA74                            loc_B5E0:
0000BA74 4A68 0032                  		tst.w	$32(a0)
0000BA78 6700                       		beq.s	loc_B5EA
0000BA7A 5568 0032                  		subq.w	#2,$32(a0)
0000BA7E                            
0000BA7E                            loc_B5EA:
0000BA7E 3028 0032                  		move.w	$32(a0),d0
0000BA82                            
0000BA82                            loc_B5EE:
0000BA82 3228 0030                  		move.w	$30(a0),d1
0000BA86 9240                       		sub.w	d0,d1
0000BA88 3141 000C                  		move.w	d1,$C(a0)
0000BA8C 4E75                       		rts	
0000BA8E                            ; ===========================================================================
0000BA8E                            ; ---------------------------------------------------------------------------
0000BA8E                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BA8E                            ; ---------------------------------------------------------------------------
0000BA8E                            Map_obj30:
0000BA8E                            	include "_maps\obj30.asm"
0000BA8E                            ; ---------------------------------------------------------------------------
0000BA8E                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BA8E                            ; ---------------------------------------------------------------------------
0000BA8E 0000                       		dc.w byte_B600-Map_obj30
0000BA90 0000                       		dc.w byte_B63D-Map_obj30
0000BA92 0000                       		dc.w byte_B648-Map_obj30
0000BA94 0C                         byte_B600:	dc.b $C
0000BA95 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BA9A B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BA9F C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BAA4 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BAA9 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BAAE E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BAB3 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BAB8 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BABD 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BAC2 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BAC7 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BACC 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BAD1 02                         byte_B63D:	dc.b 2
0000BAD2 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BAD7 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BADC 0A                         byte_B648:	dc.b $A
0000BADD C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BAE2 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BAE7 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BAEC D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BAF1 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BAF6 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BAFB 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BB00 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BB05 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BB0A 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BB10 00                         		even
0000BB10 00                         		even
0000BB10                            
0000BB10                            ; ===========================================================================
0000BB10                            ; ---------------------------------------------------------------------------
0000BB10                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BB10                            ; ---------------------------------------------------------------------------
0000BB10                            
0000BB10                            Obj31:					; XREF: Obj_Index
0000BB10 7000                       		moveq	#0,d0
0000BB12 1028 0024                  		move.b	$24(a0),d0
0000BB16 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BB1A 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BB1E                            ; ===========================================================================
0000BB1E 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BB20 0000                       		dc.w loc_B798-Obj31_Index
0000BB22 0000                       		dc.w loc_B7FE-Obj31_Index
0000BB24 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BB26 0000                       		dc.w loc_B7E2-Obj31_Index
0000BB28                            
0000BB28 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BB2A 0100                       		dc.b 1,	0
0000BB2C                            
0000BB2C 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BB2F 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BB32 08CC 03                    		dc.b 8,	$CC, 3
0000BB35 06F0 02                    		dc.b 6,	$F0, 2
0000BB38                            
0000BB38 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BB3C 5000 7800                  		dc.w $5000, $7800
0000BB40 3800 5800                  		dc.w $3800, $5800
0000BB44 B800                       		dc.w $B800
0000BB46                            ; ===========================================================================
0000BB46                            
0000BB46                            Obj31_Main:				; XREF: Obj31_Index
0000BB46 7000                       		moveq	#0,d0
0000BB48 1028 0028                  		move.b	$28(a0),d0
0000BB4C 6A00                       		bpl.s	loc_B6CE
0000BB4E 0240 007F                  		andi.w	#$7F,d0
0000BB52 D040                       		add.w	d0,d0
0000BB54 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BB58 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BB5C 101A                       		move.b	(a2)+,d0
0000BB5E 1140 0028                  		move.b	d0,$28(a0)
0000BB62                            
0000BB62                            loc_B6CE:
0000BB62 0200 000F                  		andi.b	#$F,d0
0000BB66 D040                       		add.w	d0,d0
0000BB68 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BB6C 4A40                       		tst.w	d0
0000BB6E 6600                       		bne.s	loc_B6E0
0000BB70 3142 0032                  		move.w	d2,$32(a0)
0000BB74                            
0000BB74                            loc_B6E0:
0000BB74 45F9 0000 BB2C             		lea	(Obj31_Var).l,a2
0000BB7A 2248                       		movea.l	a0,a1
0000BB7C 7203                       		moveq	#3,d1
0000BB7E 6000                       		bra.s	Obj31_MakeStomper
0000BB80                            ; ===========================================================================
0000BB80                            
0000BB80                            Obj31_Loop:
0000BB80 6100 0000                  		bsr.w	SingleObjLoad2
0000BB84 6600 0000                  		bne.w	Obj31_SetSize
0000BB88                            
0000BB88                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BB88 135A 0024                  		move.b	(a2)+,$24(a1)
0000BB8C 12BC 0031                  		move.b	#$31,0(a1)
0000BB90 3368 0008 0008             		move.w	8(a0),8(a1)
0000BB96 101A                       		move.b	(a2)+,d0
0000BB98 4880                       		ext.w	d0
0000BB9A D068 000C                  		add.w	$C(a0),d0
0000BB9E 3340 000C                  		move.w	d0,$C(a1)
0000BBA2 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BBAA 337C 0300 0002             		move.w	#$300,2(a1)
0000BBB0 137C 0004 0001             		move.b	#4,1(a1)
0000BBB6 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BBBC 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BBC2 137C 0010 0019             		move.b	#$10,$19(a1)
0000BBC8 3342 0034                  		move.w	d2,$34(a1)
0000BBCC 137C 0004 0018             		move.b	#4,$18(a1)
0000BBD2 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BBD6 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BBDC 6600                       		bne.s	loc_B76A
0000BBDE 5341                       		subq.w	#1,d1
0000BBE0 1028 0028                  		move.b	$28(a0),d0
0000BBE4 0240 00F0                  		andi.w	#$F0,d0
0000BBE8 0C40 0020                  		cmpi.w	#$20,d0
0000BBEC 679A                       		beq.s	Obj31_MakeStomper
0000BBEE 137C 0038 0019             		move.b	#$38,$19(a1)
0000BBF4 137C 0090 0020             		move.b	#$90,$20(a1)
0000BBFA 5241                       		addq.w	#1,d1
0000BBFC                            
0000BBFC                            loc_B76A:
0000BBFC 2348 003C                  		move.l	a0,$3C(a1)
0000BC00 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BC04                            
0000BC04 137C 0003 0018             		move.b	#3,$18(a1)
0000BC0A                            
0000BC0A                            Obj31_SetSize:
0000BC0A 7000                       		moveq	#0,d0
0000BC0C 1028 0028                  		move.b	$28(a0),d0
0000BC10 E648                       		lsr.w	#3,d0
0000BC12 0200 000E                  		andi.b	#$E,d0
0000BC16 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BC1A 115A 0019                  		move.b	(a2)+,$19(a0)
0000BC1E 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BC22 6000                       		bra.s	loc_B798
0000BC24                            ; ===========================================================================
0000BC24 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BC26 3009                       		dc.b $30, 9
0000BC28 100A                       		dc.b $10, $A
0000BC2A                            ; ===========================================================================
0000BC2A                            
0000BC2A                            loc_B798:				; XREF: Obj31_Index
0000BC2A 6100 0000                  		bsr.w	Obj31_Types
0000BC2E 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BC34 7200                       		moveq	#0,d1
0000BC36 1228 0019                  		move.b	$19(a0),d1
0000BC3A 0641 000B                  		addi.w	#$B,d1
0000BC3E 343C 000C                  		move.w	#$C,d2
0000BC42 363C 000D                  		move.w	#$D,d3
0000BC46 3828 0008                  		move.w	8(a0),d4
0000BC4A 6100 0000                  		bsr.w	SolidObject
0000BC4E 0828 0003 0022             		btst	#3,$22(a0)
0000BC54 6700                       		beq.s	Obj31_Display
0000BC56 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BC5C 6400                       		bcc.s	Obj31_Display
0000BC5E 2448                       		movea.l	a0,a2
0000BC60 41F8 D000                  		lea	($FFFFD000).w,a0
0000BC64 4EB9 0000 0000             		jsr	KillSonic
0000BC6A 204A                       		movea.l	a2,a0
0000BC6C                            
0000BC6C                            Obj31_Display:
0000BC6C 6100 0000                  		bsr.w	DisplaySprite
0000BC70 6000 0000                  		bra.w	Obj31_ChkDel
0000BC74                            ; ===========================================================================
0000BC74                            
0000BC74                            loc_B7E2:				; XREF: Obj31_Index
0000BC74 117C 0080 0016             		move.b	#$80,$16(a0)
0000BC7A 08E8 0004 0001             		bset	#4,1(a0)
0000BC80 2268 003C                  		movea.l	$3C(a0),a1
0000BC84 1029 0032                  		move.b	$32(a1),d0
0000BC88 EA08                       		lsr.b	#5,d0
0000BC8A 5600                       		addq.b	#3,d0
0000BC8C 1140 001A                  		move.b	d0,$1A(a0)
0000BC90                            
0000BC90                            loc_B7FE:				; XREF: Obj31_Index
0000BC90 2268 003C                  		movea.l	$3C(a0),a1
0000BC94 7000                       		moveq	#0,d0
0000BC96 1029 0032                  		move.b	$32(a1),d0
0000BC9A D068 0030                  		add.w	$30(a0),d0
0000BC9E 3140 000C                  		move.w	d0,$C(a0)
0000BCA2                            
0000BCA2                            Obj31_Display2:				; XREF: Obj31_Index
0000BCA2 6100 0000                  		bsr.w	DisplaySprite
0000BCA6                            
0000BCA6                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BCA6 3028 0008                  		move.w	8(a0),d0
0000BCAA 0240 FF80                  		andi.w	#$FF80,d0
0000BCAE 3238 F700                  		move.w	($FFFFF700).w,d1
0000BCB2 0441 0080                  		subi.w	#$80,d1
0000BCB6 0241 FF80                  		andi.w	#$FF80,d1
0000BCBA 9041                       		sub.w	d1,d0
0000BCBC 0C40 0280                  		cmpi.w	#$280,d0
0000BCC0 6200 0000                  		bhi.w	DeleteObject
0000BCC4 4E75                       		rts	
0000BCC6                            ; ===========================================================================
0000BCC6                            
0000BCC6                            Obj31_Types:				; XREF: loc_B798
0000BCC6 1028 0028                  		move.b	$28(a0),d0
0000BCCA 0240 000F                  		andi.w	#$F,d0
0000BCCE D040                       		add.w	d0,d0
0000BCD0 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BCD4 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BCD8                            ; ===========================================================================
0000BCD8 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BCDA 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BCDC 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BCDE 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BCE0 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BCE2 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BCE4 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BCE6                            ; ===========================================================================
0000BCE6                            
0000BCE6                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BCE6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BCEA 7000                       		moveq	#0,d0
0000BCEC 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BCF0 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BCF4 6700                       		beq.s	loc_B8A8	; if not, branch
0000BCF6 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BCFA 6A00                       		bpl.s	loc_B872
0000BCFC 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BD02 6700                       		beq.s	loc_B8A0
0000BD04                            
0000BD04                            loc_B872:
0000BD04 4A68 0032                  		tst.w	$32(a0)
0000BD08 6700                       		beq.s	loc_B8A0
0000BD0A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BD0E 0200 000F                  		andi.b	#$F,d0
0000BD12 6600                       		bne.s	loc_B892
0000BD14 4A28 0001                  		tst.b	1(a0)
0000BD18 6A00                       		bpl.s	loc_B892
0000BD1A 303C 00C7                  		move.w	#$C7,d0
0000BD1E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BD24                            
0000BD24                            loc_B892:
0000BD24 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BD2A 6400                       		bcc.s	Obj31_Restart
0000BD2C 317C 0000 0032             		move.w	#0,$32(a0)
0000BD32                            
0000BD32                            loc_B8A0:
0000BD32 317C 0000 0012             		move.w	#0,$12(a0)
0000BD38 6000                       		bra.s	Obj31_Restart
0000BD3A                            ; ===========================================================================
0000BD3A                            
0000BD3A                            loc_B8A8:				; XREF: Obj31_Type00
0000BD3A 3228 0034                  		move.w	$34(a0),d1
0000BD3E B268 0032                  		cmp.w	$32(a0),d1
0000BD42 6700                       		beq.s	Obj31_Restart
0000BD44 3028 0012                  		move.w	$12(a0),d0
0000BD48 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BD4E D168 0032                  		add.w	d0,$32(a0)
0000BD52 B268 0032                  		cmp.w	$32(a0),d1
0000BD56 6200                       		bhi.s	Obj31_Restart
0000BD58 3141 0032                  		move.w	d1,$32(a0)
0000BD5C 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BD62 4A28 0001                  		tst.b	1(a0)
0000BD66 6A00                       		bpl.s	Obj31_Restart
0000BD68 303C 00BD                  		move.w	#$BD,d0
0000BD6C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BD72                            
0000BD72                            Obj31_Restart:
0000BD72 7000                       		moveq	#0,d0
0000BD74 1028 0032                  		move.b	$32(a0),d0
0000BD78 D068 0030                  		add.w	$30(a0),d0
0000BD7C 3140 000C                  		move.w	d0,$C(a0)
0000BD80 4E75                       		rts	
0000BD82                            ; ===========================================================================
0000BD82                            
0000BD82                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000BD82 4A68 0036                  		tst.w	$36(a0)
0000BD86 6700                       		beq.s	loc_B938
0000BD88 4A68 0038                  		tst.w	$38(a0)
0000BD8C 6700                       		beq.s	loc_B902
0000BD8E 5368 0038                  		subq.w	#1,$38(a0)
0000BD92 6000                       		bra.s	loc_B97C
0000BD94                            ; ===========================================================================
0000BD94                            
0000BD94                            loc_B902:
0000BD94 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BD98 0200 000F                  		andi.b	#$F,d0
0000BD9C 6600                       		bne.s	loc_B91C
0000BD9E 4A28 0001                  		tst.b	1(a0)
0000BDA2 6A00                       		bpl.s	loc_B91C
0000BDA4 303C 00C7                  		move.w	#$C7,d0
0000BDA8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BDAE                            
0000BDAE                            loc_B91C:
0000BDAE 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BDB4 6400                       		bcc.s	loc_B97C
0000BDB6 317C 0000 0032             		move.w	#0,$32(a0)
0000BDBC 317C 0000 0012             		move.w	#0,$12(a0)
0000BDC2 317C 0000 0036             		move.w	#0,$36(a0)
0000BDC8 6000                       		bra.s	loc_B97C
0000BDCA                            ; ===========================================================================
0000BDCA                            
0000BDCA                            loc_B938:				; XREF: Obj31_Type01
0000BDCA 3228 0034                  		move.w	$34(a0),d1
0000BDCE B268 0032                  		cmp.w	$32(a0),d1
0000BDD2 6700                       		beq.s	loc_B97C
0000BDD4 3028 0012                  		move.w	$12(a0),d0
0000BDD8 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BDDE D168 0032                  		add.w	d0,$32(a0)
0000BDE2 B268 0032                  		cmp.w	$32(a0),d1
0000BDE6 6200                       		bhi.s	loc_B97C
0000BDE8 3141 0032                  		move.w	d1,$32(a0)
0000BDEC 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BDF2 317C 0001 0036             		move.w	#1,$36(a0)
0000BDF8 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BDFE 4A28 0001                  		tst.b	1(a0)
0000BE02 6A00                       		bpl.s	loc_B97C
0000BE04 303C 00BD                  		move.w	#$BD,d0
0000BE08 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BE0E                            
0000BE0E                            loc_B97C:
0000BE0E 6000 FF62                  		bra.w	Obj31_Restart
0000BE12                            ; ===========================================================================
0000BE12                            
0000BE12                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000BE12 3038 D008                  		move.w	($FFFFD008).w,d0
0000BE16 9068 0008                  		sub.w	8(a0),d0
0000BE1A 6400                       		bcc.s	loc_B98C
0000BE1C 4440                       		neg.w	d0
0000BE1E                            
0000BE1E                            loc_B98C:
0000BE1E 0C40 0090                  		cmpi.w	#$90,d0
0000BE22 6400                       		bcc.s	loc_B996
0000BE24 5228 0028                  		addq.b	#1,$28(a0)
0000BE28                            
0000BE28                            loc_B996:
0000BE28 6000 FF48                  		bra.w	Obj31_Restart
0000BE2C                            ; ===========================================================================
0000BE2C                            ; ---------------------------------------------------------------------------
0000BE2C                            ; Object 45 - spiked metal block from beta version (MZ)
0000BE2C                            ; ---------------------------------------------------------------------------
0000BE2C                            
0000BE2C                            Obj45:					; XREF: Obj_Index
0000BE2C 7000                       		moveq	#0,d0
0000BE2E 1028 0024                  		move.b	$24(a0),d0
0000BE32 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000BE36 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000BE3A                            ; ===========================================================================
0000BE3A 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000BE3C 0000                       		dc.w Obj45_Solid-Obj45_Index
0000BE3E 0000                       		dc.w loc_BA8E-Obj45_Index
0000BE40 0000                       		dc.w Obj45_Display-Obj45_Index
0000BE42 0000                       		dc.w loc_BA7A-Obj45_Index
0000BE44                            
0000BE44 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000BE47 04E4 01                    		dc.b	4, $E4,	  1
0000BE4A 0834 03                    		dc.b	8, $34,	  3
0000BE4D 0628 02                    		dc.b	6, $28,	  2
0000BE50                            
0000BE50 3800                       word_B9BE:	dc.w $3800
0000BE52 A000                       		dc.w -$6000
0000BE54 5000                       		dc.w $5000
0000BE56                            ; ===========================================================================
0000BE56                            
0000BE56                            Obj45_Main:				; XREF: Obj45_Index
0000BE56 7000                       		moveq	#0,d0
0000BE58 1028 0028                  		move.b	$28(a0),d0
0000BE5C D040                       		add.w	d0,d0
0000BE5E 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000BE62 45F9 0000 BE44             		lea	(Obj45_Var).l,a2
0000BE68 2248                       		movea.l	a0,a1
0000BE6A 7203                       		moveq	#3,d1
0000BE6C 6000                       		bra.s	Obj45_Load
0000BE6E                            ; ===========================================================================
0000BE6E                            
0000BE6E                            Obj45_Loop:
0000BE6E 6100 0000                  		bsr.w	SingleObjLoad2
0000BE72 6600                       		bne.s	loc_BA52
0000BE74                            
0000BE74                            Obj45_Load:				; XREF: Obj45_Main
0000BE74 135A 0024                  		move.b	(a2)+,$24(a1)
0000BE78 12BC 0045                  		move.b	#$45,0(a1)
0000BE7C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BE82 101A                       		move.b	(a2)+,d0
0000BE84 4880                       		ext.w	d0
0000BE86 D068 0008                  		add.w	8(a0),d0
0000BE8A 3340 0008                  		move.w	d0,8(a1)
0000BE8E 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000BE96 337C 0300 0002             		move.w	#$300,2(a1)
0000BE9C 137C 0004 0001             		move.b	#4,1(a1)
0000BEA2 3369 0008 0030             		move.w	8(a1),$30(a1)
0000BEA8 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000BEAE 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BEB4 137C 0020 0019             		move.b	#$20,$19(a1)
0000BEBA 3342 0034                  		move.w	d2,$34(a1)
0000BEBE 137C 0004 0018             		move.b	#4,$18(a1)
0000BEC4 0C12 0001                  		cmpi.b	#1,(a2)
0000BEC8 6600                       		bne.s	loc_BA40
0000BECA 137C 0091 0020             		move.b	#$91,$20(a1)
0000BED0                            
0000BED0                            loc_BA40:
0000BED0 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BED4 2348 003C                  		move.l	a0,$3C(a1)
0000BED8 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000BEDC                            
0000BEDC 137C 0003 0018             		move.b	#3,$18(a1)
0000BEE2                            
0000BEE2                            loc_BA52:
0000BEE2 117C 0010 0019             		move.b	#$10,$19(a0)
0000BEE8                            
0000BEE8                            Obj45_Solid:				; XREF: Obj45_Index
0000BEE8 3F28 0008                  		move.w	8(a0),-(sp)
0000BEEC 6100 0000                  		bsr.w	Obj45_Move
0000BEF0 323C 0017                  		move.w	#$17,d1
0000BEF4 343C 0020                  		move.w	#$20,d2
0000BEF8 363C 0020                  		move.w	#$20,d3
0000BEFC 381F                       		move.w	(sp)+,d4
0000BEFE 6100 0000                  		bsr.w	SolidObject
0000BF02 6100 0000                  		bsr.w	DisplaySprite
0000BF06 6000 0000                  		bra.w	Obj45_ChkDel
0000BF0A                            ; ===========================================================================
0000BF0A                            
0000BF0A                            loc_BA7A:				; XREF: Obj45_Index
0000BF0A 2268 003C                  		movea.l	$3C(a0),a1
0000BF0E 1029 0032                  		move.b	$32(a1),d0
0000BF12 0600 0010                  		addi.b	#$10,d0
0000BF16 EA08                       		lsr.b	#5,d0
0000BF18 5600                       		addq.b	#3,d0
0000BF1A 1140 001A                  		move.b	d0,$1A(a0)
0000BF1E                            
0000BF1E                            loc_BA8E:				; XREF: Obj45_Index
0000BF1E 2268 003C                  		movea.l	$3C(a0),a1
0000BF22 7000                       		moveq	#0,d0
0000BF24 1029 0032                  		move.b	$32(a1),d0
0000BF28 4440                       		neg.w	d0
0000BF2A D068 0030                  		add.w	$30(a0),d0
0000BF2E 3140 0008                  		move.w	d0,8(a0)
0000BF32                            
0000BF32                            Obj45_Display:				; XREF: Obj45_Index
0000BF32 6100 0000                  		bsr.w	DisplaySprite
0000BF36                            
0000BF36                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000BF36 3028 003A                  		move.w	$3A(a0),d0
0000BF3A 0240 FF80                  		andi.w	#$FF80,d0
0000BF3E 3238 F700                  		move.w	($FFFFF700).w,d1
0000BF42 0441 0080                  		subi.w	#$80,d1
0000BF46 0241 FF80                  		andi.w	#$FF80,d1
0000BF4A 9041                       		sub.w	d1,d0
0000BF4C 0C40 0280                  		cmpi.w	#$280,d0
0000BF50 6200 0000                  		bhi.w	DeleteObject
0000BF54 4E75                       		rts	
0000BF56                            
0000BF56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BF56                            
0000BF56                            
0000BF56                            Obj45_Move:				; XREF: Obj45_Solid
0000BF56 7000                       		moveq	#0,d0
0000BF58 1028 0028                  		move.b	$28(a0),d0
0000BF5C D040                       		add.w	d0,d0
0000BF5E 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000BF62 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000BF66                            ; End of function Obj45_Move
0000BF66                            
0000BF66                            ; ===========================================================================
0000BF66 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000BF68 0000                       		dc.w loc_BADA-off_BAD6
0000BF6A                            ; ===========================================================================
0000BF6A                            
0000BF6A                            loc_BADA:				; XREF: off_BAD6
0000BF6A 4A68 0036                  		tst.w	$36(a0)
0000BF6E 6700                       		beq.s	loc_BB08
0000BF70 4A68 0038                  		tst.w	$38(a0)
0000BF74 6700                       		beq.s	loc_BAEC
0000BF76 5368 0038                  		subq.w	#1,$38(a0)
0000BF7A 6000                       		bra.s	loc_BB3C
0000BF7C                            ; ===========================================================================
0000BF7C                            
0000BF7C                            loc_BAEC:
0000BF7C 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BF82 6400                       		bcc.s	loc_BB3C
0000BF84 317C 0000 0032             		move.w	#0,$32(a0)
0000BF8A 317C 0000 0010             		move.w	#0,$10(a0)
0000BF90 317C 0000 0036             		move.w	#0,$36(a0)
0000BF96 6000                       		bra.s	loc_BB3C
0000BF98                            ; ===========================================================================
0000BF98                            
0000BF98                            loc_BB08:				; XREF: loc_BADA
0000BF98 3228 0034                  		move.w	$34(a0),d1
0000BF9C B268 0032                  		cmp.w	$32(a0),d1
0000BFA0 6700                       		beq.s	loc_BB3C
0000BFA2 3028 0010                  		move.w	$10(a0),d0
0000BFA6 0668 0070 0010             		addi.w	#$70,$10(a0)
0000BFAC D168 0032                  		add.w	d0,$32(a0)
0000BFB0 B268 0032                  		cmp.w	$32(a0),d1
0000BFB4 6200                       		bhi.s	loc_BB3C
0000BFB6 3141 0032                  		move.w	d1,$32(a0)
0000BFBA 317C 0000 0010             		move.w	#0,$10(a0)
0000BFC0 317C 0001 0036             		move.w	#1,$36(a0)
0000BFC6 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BFCC                            
0000BFCC                            loc_BB3C:
0000BFCC 7000                       		moveq	#0,d0
0000BFCE 1028 0032                  		move.b	$32(a0),d0
0000BFD2 4440                       		neg.w	d0
0000BFD4 D068 0030                  		add.w	$30(a0),d0
0000BFD8 3140 0008                  		move.w	d0,8(a0)
0000BFDC 4E75                       		rts	
0000BFDE                            ; ===========================================================================
0000BFDE                            ; ---------------------------------------------------------------------------
0000BFDE                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000BFDE                            ; ---------------------------------------------------------------------------
0000BFDE                            Map_obj31:
0000BFDE                            	include "_maps\obj31.asm"
0000BFDE                            ; ---------------------------------------------------------------------------
0000BFDE                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000BFDE                            ; ---------------------------------------------------------------------------
0000BFDE 0000                       		dc.w byte_BB64-Map_obj31
0000BFE0 0000                       		dc.w byte_BB7E-Map_obj31
0000BFE2 0000                       		dc.w byte_BB98-Map_obj31
0000BFE4 0000                       		dc.w byte_BB9E-Map_obj31
0000BFE6 0000                       		dc.w byte_BBA9-Map_obj31
0000BFE8 0000                       		dc.w byte_BBBE-Map_obj31
0000BFEA 0000                       		dc.w byte_BBDD-Map_obj31
0000BFEC 0000                       		dc.w byte_BC06-Map_obj31
0000BFEE 0000                       		dc.w byte_BC06-Map_obj31
0000BFF0 0000                       		dc.w byte_BC39-Map_obj31
0000BFF2 0000                       		dc.w byte_BC53-Map_obj31
0000BFF4 05                         byte_BB64:	dc.b 5
0000BFF5 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000BFFA F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000BFFF EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C004 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C009 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C00E 05                         byte_BB7E:	dc.b 5
0000C00F F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C014 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C019 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C01E F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C023 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C028 01                         byte_BB98:	dc.b 1
0000C029 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C02E 02                         byte_BB9E:	dc.b 2
0000C02F 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C034 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C039 04                         byte_BBA9:	dc.b 4
0000C03A E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C03F F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C044 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C049 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C04E 06                         byte_BBBE:	dc.b 6
0000C04F C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C054 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C059 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C05E F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C063 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C068 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C06D 08                         byte_BBDD:	dc.b 8
0000C06E A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C073 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C078 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C07D D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C082 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C087 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C08C 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C091 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C096 0A                         byte_BC06:	dc.b $A
0000C097 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C09C 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C0A1 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C0A6 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C0AB C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C0B0 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C0B5 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C0BA F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C0BF 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C0C4 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C0C9 05                         byte_BC39:	dc.b 5
0000C0CA F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C0CF F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C0D4 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C0D9 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C0DE EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C0E3 01                         byte_BC53:	dc.b 1
0000C0E4 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C0EA 00                         		even
0000C0EA 00                         		even
0000C0EA                            
0000C0EA                            ; ---------------------------------------------------------------------------
0000C0EA                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C0EA                            ; ---------------------------------------------------------------------------
0000C0EA                            Map_obj45:
0000C0EA                            	include "_maps\obj45.asm"
0000C0EA                            ; ---------------------------------------------------------------------------
0000C0EA                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C0EA                            ; ---------------------------------------------------------------------------
0000C0EA 0000                       		dc.w byte_BC6C-Map_obj45
0000C0EC 0000                       		dc.w byte_BC7C-Map_obj45
0000C0EE 0000                       		dc.w byte_BC8C-Map_obj45
0000C0F0 0000                       		dc.w byte_BC92-Map_obj45
0000C0F2 0000                       		dc.w byte_BC9D-Map_obj45
0000C0F4 0000                       		dc.w byte_BCB2-Map_obj45
0000C0F6 0000                       		dc.w byte_BCD1-Map_obj45
0000C0F8 0000                       		dc.w byte_BCFA-Map_obj45
0000C0FA 0000                       		dc.w byte_BCFA-Map_obj45
0000C0FC 03                         byte_BC6C:	dc.b 3
0000C0FD E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C102 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C107 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C10C 03                         byte_BC7C:	dc.b 3
0000C10D E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C112 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C117 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C11C 01                         byte_BC8C:	dc.b 1
0000C11D F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C122 02                         byte_BC92:	dc.b 2
0000C123 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C128 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C12D 04                         byte_BC9D:	dc.b 4
0000C12E F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C133 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C138 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C13D F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C142 06                         byte_BCB2:	dc.b 6
0000C143 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C148 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C14D F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C152 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C157 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C15C F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C161 08                         byte_BCD1:	dc.b 8
0000C162 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C167 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C16C F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C171 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C176 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C17B F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C180 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C185 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C18A 08                         byte_BCFA:	dc.b 8
0000C18B F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C190 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C195 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C19A F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C19F F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C1A4 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C1A9 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C1AE F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C1B3 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C1B8 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C1BE 00                         		even
0000C1BE 00                         		even
0000C1BE                            
0000C1BE                            ; ===========================================================================
0000C1BE                            ; ---------------------------------------------------------------------------
0000C1BE                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C1BE                            ; ---------------------------------------------------------------------------
0000C1BE                            
0000C1BE                            Obj32:					; XREF: Obj_Index
0000C1BE 7000                       		moveq	#0,d0
0000C1C0 1028 0024                  		move.b	$24(a0),d0
0000C1C4 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C1C8 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C1CC                            ; ===========================================================================
0000C1CC 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C1CE 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C1D0                            ; ===========================================================================
0000C1D0                            
0000C1D0                            Obj32_Main:				; XREF: Obj32_Index
0000C1D0 5428 0024                  		addq.b	#2,$24(a0)
0000C1D4 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C1DC 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C1E2 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C1E8 6700                       		beq.s	loc_BD60
0000C1EA 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C1F0                            
0000C1F0                            loc_BD60:
0000C1F0 117C 0004 0001             		move.b	#4,1(a0)
0000C1F6 117C 0010 0019             		move.b	#$10,$19(a0)
0000C1FC 117C 0004 0018             		move.b	#4,$18(a0)
0000C202 5668 000C                  		addq.w	#3,$C(a0)
0000C206                            
0000C206                            Obj32_Pressed:				; XREF: Obj32_Index
0000C206 4A28 0001                  		tst.b	1(a0)
0000C20A 6A00                       		bpl.s	Obj32_Display
0000C20C 323C 001B                  		move.w	#$1B,d1
0000C210 343C 0005                  		move.w	#5,d2
0000C214 363C 0005                  		move.w	#5,d3
0000C218 3828 0008                  		move.w	8(a0),d4
0000C21C 6100 0000                  		bsr.w	SolidObject
0000C220 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C226 1028 0028                  		move.b	$28(a0),d0
0000C22A 0240 000F                  		andi.w	#$F,d0
0000C22E 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C232 47F3 0000                  		lea	(a3,d0.w),a3
0000C236 7600                       		moveq	#0,d3
0000C238 0828 0006 0028             		btst	#6,$28(a0)
0000C23E 6700                       		beq.s	loc_BDB2
0000C240 7607                       		moveq	#7,d3
0000C242                            
0000C242                            loc_BDB2:
0000C242 4A28 0028                  		tst.b	$28(a0)
0000C246 6A00                       		bpl.s	loc_BDBE
0000C248 6100 0000                  		bsr.w	Obj32_MZBlock
0000C24C 6600                       		bne.s	loc_BDC8
0000C24E                            
0000C24E                            loc_BDBE:
0000C24E 4A28 0025                  		tst.b	$25(a0)
0000C252 6600                       		bne.s	loc_BDC8
0000C254 0793                       		bclr	d3,(a3)
0000C256 6000                       		bra.s	loc_BDDE
0000C258                            ; ===========================================================================
0000C258                            
0000C258                            loc_BDC8:
0000C258 4A13                       		tst.b	(a3)
0000C25A 6600                       		bne.s	loc_BDD6
0000C25C 303C 00CD                  		move.w	#$CD,d0
0000C260 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play switch sound
0000C266                            
0000C266                            loc_BDD6:
0000C266 07D3                       		bset	d3,(a3)
0000C268 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C26E                            
0000C26E                            loc_BDDE:
0000C26E 0828 0005 0028             		btst	#5,$28(a0)
0000C274 6700                       		beq.s	Obj32_Display
0000C276 5328 001E                  		subq.b	#1,$1E(a0)
0000C27A 6A00                       		bpl.s	Obj32_Display
0000C27C 117C 0007 001E             		move.b	#7,$1E(a0)
0000C282 0868 0001 001A             		bchg	#1,$1A(a0)
0000C288                            
0000C288                            Obj32_Display:
0000C288 6100 0000                  		bsr.w	DisplaySprite
0000C28C 3028 0008                  		move.w	8(a0),d0
0000C290 0240 FF80                  		andi.w	#$FF80,d0
0000C294 3238 F700                  		move.w	($FFFFF700).w,d1
0000C298 0441 0080                  		subi.w	#$80,d1
0000C29C 0241 FF80                  		andi.w	#$FF80,d1
0000C2A0 9041                       		sub.w	d1,d0
0000C2A2 0C40 0280                  		cmpi.w	#$280,d0
0000C2A6 6200 0000                  		bhi.w	Obj32_Delete
0000C2AA 4E75                       		rts	
0000C2AC                            ; ===========================================================================
0000C2AC                            
0000C2AC                            Obj32_Delete:
0000C2AC 6100 0000                  		bsr.w	DeleteObject
0000C2B0 4E75                       		rts	
0000C2B2                            
0000C2B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C2B2                            
0000C2B2                            
0000C2B2                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C2B2 3F03                       		move.w	d3,-(sp)
0000C2B4 3428 0008                  		move.w	8(a0),d2
0000C2B8 3628 000C                  		move.w	$C(a0),d3
0000C2BC 0442 0010                  		subi.w	#$10,d2
0000C2C0 5143                       		subq.w	#8,d3
0000C2C2 383C 0020                  		move.w	#$20,d4
0000C2C6 3A3C 0010                  		move.w	#$10,d5
0000C2CA 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C2CE 3C3C 005F                  		move.w	#$5F,d6
0000C2D2                            
0000C2D2                            Obj32_MZLoop:
0000C2D2 4A29 0001                  		tst.b	1(a1)
0000C2D6 6A00                       		bpl.s	loc_BE4E
0000C2D8 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C2DC 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C2DE                            
0000C2DE                            loc_BE4E:
0000C2DE 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C2E2 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C2E6                            
0000C2E6 361F                       		move.w	(sp)+,d3
0000C2E8 7000                       		moveq	#0,d0
0000C2EA                            
0000C2EA                            locret_BE5A:
0000C2EA 4E75                       		rts	
0000C2EC                            ; ===========================================================================
0000C2EC 1010                       Obj32_MZData:	dc.b $10, $10
0000C2EE                            ; ===========================================================================
0000C2EE                            
0000C2EE                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C2EE 7001                       		moveq	#1,d0
0000C2F0 0240 003F                  		andi.w	#$3F,d0
0000C2F4 D040                       		add.w	d0,d0
0000C2F6 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C2FA 121A                       		move.b	(a2)+,d1
0000C2FC 4881                       		ext.w	d1
0000C2FE 3029 0008                  		move.w	8(a1),d0
0000C302 9041                       		sub.w	d1,d0
0000C304 9042                       		sub.w	d2,d0
0000C306 6400                       		bcc.s	loc_BE80
0000C308 D241                       		add.w	d1,d1
0000C30A D041                       		add.w	d1,d0
0000C30C 6500                       		bcs.s	loc_BE84
0000C30E 60CE                       		bra.s	loc_BE4E
0000C310                            ; ===========================================================================
0000C310                            
0000C310                            loc_BE80:
0000C310 B044                       		cmp.w	d4,d0
0000C312 62CA                       		bhi.s	loc_BE4E
0000C314                            
0000C314                            loc_BE84:
0000C314 121A                       		move.b	(a2)+,d1
0000C316 4881                       		ext.w	d1
0000C318 3029 000C                  		move.w	$C(a1),d0
0000C31C 9041                       		sub.w	d1,d0
0000C31E 9043                       		sub.w	d3,d0
0000C320 6400                       		bcc.s	loc_BE9A
0000C322 D241                       		add.w	d1,d1
0000C324 D041                       		add.w	d1,d0
0000C326 6500                       		bcs.s	loc_BE9E
0000C328 60B4                       		bra.s	loc_BE4E
0000C32A                            ; ===========================================================================
0000C32A                            
0000C32A                            loc_BE9A:
0000C32A B045                       		cmp.w	d5,d0
0000C32C 62B0                       		bhi.s	loc_BE4E
0000C32E                            
0000C32E                            loc_BE9E:
0000C32E 361F                       		move.w	(sp)+,d3
0000C330 7001                       		moveq	#1,d0
0000C332 4E75                       		rts	
0000C334                            ; End of function Obj32_MZBlock
0000C334                            
0000C334                            ; ===========================================================================
0000C334                            ; ---------------------------------------------------------------------------
0000C334                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C334                            ; ---------------------------------------------------------------------------
0000C334                            Map_obj32:
0000C334                            	include "_maps\obj32.asm"
0000C334                            ; ---------------------------------------------------------------------------
0000C334                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C334                            ; ---------------------------------------------------------------------------
0000C334 0000                       		dc.w byte_BEAC-Map_obj32
0000C336 0000                       		dc.w byte_BEB7-Map_obj32
0000C338 0000                       		dc.w byte_BEC2-Map_obj32
0000C33A 0000                       		dc.w byte_BEB7-Map_obj32
0000C33C 02                         byte_BEAC:	dc.b 2
0000C33D F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C342 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C347 02                         byte_BEB7:	dc.b 2
0000C348 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C34D F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C352 02                         byte_BEC2:	dc.b 2
0000C353 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C358 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C35D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C362                            		even
0000C362                            		even
0000C362                            
0000C362                            ; ===========================================================================
0000C362                            ; ---------------------------------------------------------------------------
0000C362                            ; Object 33 - pushable blocks (MZ, LZ)
0000C362                            ; ---------------------------------------------------------------------------
0000C362                            
0000C362                            Obj33:					; XREF: Obj_Index
0000C362 7000                       		moveq	#0,d0
0000C364 1028 0024                  		move.b	$24(a0),d0
0000C368 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C36C 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C370                            ; ===========================================================================
0000C370 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C372 0000                       		dc.w loc_BF6E-Obj33_Index
0000C374 0000                       		dc.w loc_C02C-Obj33_Index
0000C376                            
0000C376 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C378 4001                       		dc.b $40, 1
0000C37A                            ; ===========================================================================
0000C37A                            
0000C37A                            Obj33_Main:				; XREF: Obj33_Index
0000C37A 5428 0024                  		addq.b	#2,$24(a0)
0000C37E 117C 000F 0016             		move.b	#$F,$16(a0)
0000C384 117C 000F 0017             		move.b	#$F,$17(a0)
0000C38A 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C392 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C398 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C39E 6600                       		bne.s	loc_BF16
0000C3A0 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C3A6                            
0000C3A6                            loc_BF16:
0000C3A6 117C 0004 0001             		move.b	#4,1(a0)
0000C3AC 117C 0003 0018             		move.b	#3,$18(a0)
0000C3B2 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C3B8 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C3BE 7000                       		moveq	#0,d0
0000C3C0 1028 0028                  		move.b	$28(a0),d0
0000C3C4 D040                       		add.w	d0,d0
0000C3C6 0240 000E                  		andi.w	#$E,d0
0000C3CA 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C3CE 115A 0019                  		move.b	(a2)+,$19(a0)
0000C3D2 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C3D6 4A28 0028                  		tst.b	$28(a0)
0000C3DA 6700                       		beq.s	Obj33_ChkGone
0000C3DC 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C3E2                            
0000C3E2                            Obj33_ChkGone:
0000C3E2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C3E6 7000                       		moveq	#0,d0
0000C3E8 1028 0023                  		move.b	$23(a0),d0
0000C3EC 6700                       		beq.s	loc_BF6E
0000C3EE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C3F4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C3FA 6600 0000                  		bne.w	DeleteObject
0000C3FE                            
0000C3FE                            loc_BF6E:				; XREF: Obj33_Index
0000C3FE 4A28 0032                  		tst.b	$32(a0)
0000C402 6600 0000                  		bne.w	loc_C046
0000C406 7200                       		moveq	#0,d1
0000C408 1228 0019                  		move.b	$19(a0),d1
0000C40C 0641 000B                  		addi.w	#$B,d1
0000C410 343C 0010                  		move.w	#$10,d2
0000C414 363C 0011                  		move.w	#$11,d3
0000C418 3828 0008                  		move.w	8(a0),d4
0000C41C 6100 0000                  		bsr.w	loc_C186
0000C420 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C426 6600                       		bne.s	loc_BFC6	; if not, branch
0000C428 08A8 0007 0028             		bclr	#7,$28(a0)
0000C42E 3028 0008                  		move.w	8(a0),d0
0000C432 0C40 0A20                  		cmpi.w	#$A20,d0
0000C436 6500                       		bcs.s	loc_BFC6
0000C438 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C43C 6400                       		bcc.s	loc_BFC6
0000C43E 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C442 0440 001C                  		subi.w	#$1C,d0
0000C446 3140 000C                  		move.w	d0,$C(a0)
0000C44A 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C450 08E8 0007 0028             		bset	#7,$28(a0)
0000C456                            
0000C456                            loc_BFC6:
0000C456 3028 0008                  		move.w	8(a0),d0
0000C45A 0240 FF80                  		andi.w	#$FF80,d0
0000C45E 3238 F700                  		move.w	($FFFFF700).w,d1
0000C462 0441 0080                  		subi.w	#$80,d1
0000C466 0241 FF80                  		andi.w	#$FF80,d1
0000C46A 9041                       		sub.w	d1,d0
0000C46C 0C40 0280                  		cmpi.w	#$280,d0
0000C470 6200                       		bhi.s	loc_BFE6
0000C472 6000 0000                  		bra.w	DisplaySprite
0000C476                            ; ===========================================================================
0000C476                            
0000C476                            loc_BFE6:
0000C476 3028 0034                  		move.w	$34(a0),d0
0000C47A 0240 FF80                  		andi.w	#$FF80,d0
0000C47E 3238 F700                  		move.w	($FFFFF700).w,d1
0000C482 0441 0080                  		subi.w	#$80,d1
0000C486 0241 FF80                  		andi.w	#$FF80,d1
0000C48A 9041                       		sub.w	d1,d0
0000C48C 0C40 0280                  		cmpi.w	#$280,d0
0000C490 6200                       		bhi.s	loc_C016
0000C492 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C498 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C49E 117C 0004 0024             		move.b	#4,$24(a0)
0000C4A4 6000                       		bra.s	loc_C02C
0000C4A6                            ; ===========================================================================
0000C4A6                            
0000C4A6                            loc_C016:
0000C4A6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C4AA 7000                       		moveq	#0,d0
0000C4AC 1028 0023                  		move.b	$23(a0),d0
0000C4B0 6700                       		beq.s	loc_C028
0000C4B2 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C4B8                            
0000C4B8                            loc_C028:
0000C4B8 6000 0000                  		bra.w	DeleteObject
0000C4BC                            ; ===========================================================================
0000C4BC                            
0000C4BC                            loc_C02C:				; XREF: Obj33_Index
0000C4BC 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C4C0 6700                       		beq.s	locret_C044
0000C4C2 117C 0002 0024             		move.b	#2,$24(a0)
0000C4C8 4228 0032                  		clr.b	$32(a0)
0000C4CC 4268 0010                  		clr.w	$10(a0)
0000C4D0 4268 0012                  		clr.w	$12(a0)
0000C4D4                            
0000C4D4                            locret_C044:
0000C4D4 4E75                       		rts	
0000C4D6                            ; ===========================================================================
0000C4D6                            
0000C4D6                            loc_C046:				; XREF: loc_BF6E
0000C4D6 3F28 0008                  		move.w	8(a0),-(sp)
0000C4DA 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C4E0 6400                       		bcc.s	loc_C056
0000C4E2 6100 0000                  		bsr.w	SpeedToPos
0000C4E6                            
0000C4E6                            loc_C056:
0000C4E6 0828 0001 0022             		btst	#1,$22(a0)
0000C4EC 6700                       		beq.s	loc_C0A0
0000C4EE 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C4F4 4EB9 0000 0000             		jsr	ObjHitFloor
0000C4FA 4A41                       		tst.w	d1
0000C4FC 6A00 0000                  		bpl.w	loc_C09E
0000C500 D368 000C                  		add.w	d1,$C(a0)
0000C504 4268 0012                  		clr.w	$12(a0)
0000C508 08A8 0001 0022             		bclr	#1,$22(a0)
0000C50E 3011                       		move.w	(a1),d0
0000C510 0240 03FF                  		andi.w	#$3FF,d0
0000C514 0C40 016A                  		cmpi.w	#$16A,d0
0000C518 6500                       		bcs.s	loc_C09E
0000C51A 3028 0030                  		move.w	$30(a0),d0
0000C51E E640                       		asr.w	#3,d0
0000C520 3140 0010                  		move.w	d0,$10(a0)
0000C524 117C 0001 0032             		move.b	#1,$32(a0)
0000C52A 4268 000E                  		clr.w	$E(a0)
0000C52E                            
0000C52E                            loc_C09E:
0000C52E 6000                       		bra.s	loc_C0E6
0000C530                            ; ===========================================================================
0000C530                            
0000C530                            loc_C0A0:
0000C530 4A68 0010                  		tst.w	$10(a0)
0000C534 6700 0000                  		beq.w	loc_C0D6
0000C538 6B00                       		bmi.s	loc_C0BC
0000C53A 7600                       		moveq	#0,d3
0000C53C 1628 0019                  		move.b	$19(a0),d3
0000C540 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C546 4A41                       		tst.w	d1		; has block touched a wall?
0000C548 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C54A 6000                       		bra.s	loc_C0E6
0000C54C                            ; ===========================================================================
0000C54C                            
0000C54C                            loc_C0BC:
0000C54C 7600                       		moveq	#0,d3
0000C54E 1628 0019                  		move.b	$19(a0),d3
0000C552 4643                       		not.w	d3
0000C554 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C55A 4A41                       		tst.w	d1		; has block touched a wall?
0000C55C 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C55E 6000                       		bra.s	loc_C0E6
0000C560                            ; ===========================================================================
0000C560                            
0000C560                            Obj33_StopPush:
0000C560 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C564 6000                       		bra.s	loc_C0E6
0000C566                            ; ===========================================================================
0000C566                            
0000C566                            loc_C0D6:
0000C566 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C56E 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C574 6400                       		bcc.s	loc_C104
0000C576                            
0000C576                            loc_C0E6:
0000C576 7200                       		moveq	#0,d1
0000C578 1228 0019                  		move.b	$19(a0),d1
0000C57C 0641 000B                  		addi.w	#$B,d1
0000C580 343C 0010                  		move.w	#$10,d2
0000C584 363C 0011                  		move.w	#$11,d3
0000C588 381F                       		move.w	(sp)+,d4
0000C58A 6100 0000                  		bsr.w	loc_C186
0000C58E 6100                       		bsr.s	Obj33_ChkLava
0000C590 6000 FEC4                  		bra.w	loc_BFC6
0000C594                            ; ===========================================================================
0000C594                            
0000C594                            loc_C104:
0000C594 381F                       		move.w	(sp)+,d4
0000C596 43F8 D000                  		lea	($FFFFD000).w,a1
0000C59A 08A9 0003 0022             		bclr	#3,$22(a1)
0000C5A0 08A8 0003 0022             		bclr	#3,$22(a0)
0000C5A6 6000 FECE                  		bra.w	loc_BFE6
0000C5AA                            ; ===========================================================================
0000C5AA                            
0000C5AA                            Obj33_ChkLava:
0000C5AA 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C5B0 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C5B2 343C FFE0                  		move.w	#-$20,d2
0000C5B6 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C5BC 6700                       		beq.s	Obj33_LoadLava
0000C5BE 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C5C4 6700                       		beq.s	Obj33_LoadLava
0000C5C6 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C5CC 6700                       		beq.s	Obj33_LoadLava
0000C5CE 4E75                       		rts	
0000C5D0                            ; ===========================================================================
0000C5D0                            
0000C5D0                            Obj33_ChkLava2:
0000C5D0 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C5D6 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C5D8 343C 0020                  		move.w	#$20,d2
0000C5DC 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C5E2 6700                       		beq.s	Obj33_LoadLava
0000C5E4 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C5EA 6700                       		beq.s	Obj33_LoadLava
0000C5EC                            
0000C5EC                            Obj33_NoLava:
0000C5EC 4E75                       		rts	
0000C5EE                            ; ===========================================================================
0000C5EE                            
0000C5EE                            Obj33_LoadLava:
0000C5EE 6100 0000                  		bsr.w	SingleObjLoad
0000C5F2 6600                       		bne.s	locret_C184
0000C5F4 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C5F8 3368 0008 0008             		move.w	8(a0),8(a1)
0000C5FE D569 0008                  		add.w	d2,8(a1)
0000C602 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C608 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C60E 2348 003C                  		move.l	a0,$3C(a1)
0000C612                            
0000C612                            locret_C184:
0000C612 4E75                       		rts	
0000C614                            ; ===========================================================================
0000C614                            
0000C614                            loc_C186:				; XREF: loc_BF6E
0000C614 1028 0025                  		move.b	$25(a0),d0
0000C618 6700 0000                  		beq.w	loc_C218
0000C61C 5500                       		subq.b	#2,d0
0000C61E 6600                       		bne.s	loc_C1AA
0000C620 6100 B3BE                  		bsr.w	ExitPlatform
0000C624 0829 0003 0022             		btst	#3,$22(a1)
0000C62A 6600                       		bne.s	loc_C1A4
0000C62C 4228 0025                  		clr.b	$25(a0)
0000C630 4E75                       		rts	
0000C632                            ; ===========================================================================
0000C632                            
0000C632                            loc_C1A4:
0000C632 3404                       		move.w	d4,d2
0000C634 6000 B908                  		bra.w	MvSonicOnPtfm
0000C638                            ; ===========================================================================
0000C638                            
0000C638                            loc_C1AA:
0000C638 5500                       		subq.b	#2,d0
0000C63A 6600                       		bne.s	loc_C1F2
0000C63C 6100 0000                  		bsr.w	SpeedToPos
0000C640 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C646 4EB9 0000 0000             		jsr	ObjHitFloor
0000C64C 4A41                       		tst.w	d1
0000C64E 6A00 0000                  		bpl.w	locret_C1F0
0000C652 D368 000C                  		add.w	d1,$C(a0)
0000C656 4268 0012                  		clr.w	$12(a0)
0000C65A 4228 0025                  		clr.b	$25(a0)
0000C65E 3011                       		move.w	(a1),d0
0000C660 0240 03FF                  		andi.w	#$3FF,d0
0000C664 0C40 016A                  		cmpi.w	#$16A,d0
0000C668 6500                       		bcs.s	locret_C1F0
0000C66A 3028 0030                  		move.w	$30(a0),d0
0000C66E E640                       		asr.w	#3,d0
0000C670 3140 0010                  		move.w	d0,$10(a0)
0000C674 117C 0001 0032             		move.b	#1,$32(a0)
0000C67A 4268 000E                  		clr.w	$E(a0)
0000C67E                            
0000C67E                            locret_C1F0:
0000C67E 4E75                       		rts	
0000C680                            ; ===========================================================================
0000C680                            
0000C680                            loc_C1F2:
0000C680 6100 0000                  		bsr.w	SpeedToPos
0000C684 3028 0008                  		move.w	8(a0),d0
0000C688 0240 000C                  		andi.w	#$C,d0
0000C68C 6600 0000                  		bne.w	locret_C2E4
0000C690 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C696 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C69C 4268 0010                  		clr.w	$10(a0)
0000C6A0 5528 0025                  		subq.b	#2,$25(a0)
0000C6A4 4E75                       		rts	
0000C6A6                            ; ===========================================================================
0000C6A6                            
0000C6A6                            loc_C218:
0000C6A6 6100 0000                  		bsr.w	loc_FAC8
0000C6AA 4A44                       		tst.w	d4
0000C6AC 6700 0000                  		beq.w	locret_C2E4
0000C6B0 6B00 0000                  		bmi.w	locret_C2E4
0000C6B4 4A28 0032                  		tst.b	$32(a0)
0000C6B8 6700                       		beq.s	loc_C230
0000C6BA 6000 0000                  		bra.w	locret_C2E4
0000C6BE                            ; ===========================================================================
0000C6BE                            
0000C6BE                            loc_C230:
0000C6BE 4A40                       		tst.w	d0
0000C6C0 6700 0000                  		beq.w	locret_C2E4
0000C6C4 6B00                       		bmi.s	loc_C268
0000C6C6 0829 0000 0022             		btst	#0,$22(a1)
0000C6CC 6600 0000                  		bne.w	locret_C2E4
0000C6D0 3F00                       		move.w	d0,-(sp)
0000C6D2 7600                       		moveq	#0,d3
0000C6D4 1628 0019                  		move.b	$19(a0),d3
0000C6D8 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C6DE 301F                       		move.w	(sp)+,d0
0000C6E0 4A41                       		tst.w	d1
0000C6E2 6B00 0000                  		bmi.w	locret_C2E4
0000C6E6 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C6EE 7001                       		moveq	#1,d0
0000C6F0 323C 0040                  		move.w	#$40,d1
0000C6F4 6000                       		bra.s	loc_C294
0000C6F6                            ; ===========================================================================
0000C6F6                            
0000C6F6                            loc_C268:
0000C6F6 0829 0000 0022             		btst	#0,$22(a1)
0000C6FC 6700                       		beq.s	locret_C2E4
0000C6FE 3F00                       		move.w	d0,-(sp)
0000C700 7600                       		moveq	#0,d3
0000C702 1628 0019                  		move.b	$19(a0),d3
0000C706 4643                       		not.w	d3
0000C708 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C70E 301F                       		move.w	(sp)+,d0
0000C710 4A41                       		tst.w	d1
0000C712 6B00                       		bmi.s	locret_C2E4
0000C714 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C71C 70FF                       		moveq	#-1,d0
0000C71E 323C FFC0                  		move.w	#-$40,d1
0000C722                            
0000C722                            loc_C294:
0000C722 43F8 D000                  		lea	($FFFFD000).w,a1
0000C726 D169 0008                  		add.w	d0,8(a1)
0000C72A 3341 0014                  		move.w	d1,$14(a1)
0000C72E 337C 0000 0010             		move.w	#0,$10(a1)
0000C734 3F00                       		move.w	d0,-(sp)
0000C736 303C 00A7                  		move.w	#$A7,d0
0000C73A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C740 301F                       		move.w	(sp)+,d0
0000C742 4A28 0028                  		tst.b	$28(a0)
0000C746 6B00                       		bmi.s	locret_C2E4
0000C748 3F00                       		move.w	d0,-(sp)
0000C74A 4EB9 0000 0000             		jsr	ObjHitFloor
0000C750 301F                       		move.w	(sp)+,d0
0000C752 0C41 0004                  		cmpi.w	#4,d1
0000C756 6F00                       		ble.s	loc_C2E0
0000C758 317C 0400 0010             		move.w	#$400,$10(a0)
0000C75E 4A40                       		tst.w	d0
0000C760 6A00                       		bpl.s	loc_C2D8
0000C762 4468 0010                  		neg.w	$10(a0)
0000C766                            
0000C766                            loc_C2D8:
0000C766 117C 0006 0025             		move.b	#6,$25(a0)
0000C76C 6000                       		bra.s	locret_C2E4
0000C76E                            ; ===========================================================================
0000C76E                            
0000C76E                            loc_C2E0:
0000C76E D368 000C                  		add.w	d1,$C(a0)
0000C772                            
0000C772                            locret_C2E4:
0000C772 4E75                       		rts	
0000C774                            ; ===========================================================================
0000C774                            ; ---------------------------------------------------------------------------
0000C774                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C774                            ; ---------------------------------------------------------------------------
0000C774                            Map_obj33:
0000C774                            	include "_maps\obj33.asm"
0000C774                            ; ---------------------------------------------------------------------------
0000C774                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C774                            ; ---------------------------------------------------------------------------
0000C774 0000                       		dc.w byte_C2EA-Map_obj33
0000C776 0000                       		dc.w byte_C2F0-Map_obj33
0000C778 01                         byte_C2EA:	dc.b 1
0000C779 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C77E 04                         byte_C2F0:	dc.b 4
0000C77F F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C784 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C789 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C78E F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C794 00                         		even
0000C794 00                         		even
0000C794                            
0000C794                            ; ===========================================================================
0000C794                            ; ---------------------------------------------------------------------------
0000C794                            ; Object 34 - zone title cards
0000C794                            ; ---------------------------------------------------------------------------
0000C794                            
0000C794                            Obj34:					; XREF: Obj_Index
0000C794 7000                       		moveq	#0,d0
0000C796 1028 0024                  		move.b	$24(a0),d0
0000C79A 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C79E 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C7A2                            ; ===========================================================================
0000C7A2 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C7A4 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C7A6 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C7A8 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C7AA                            ; ===========================================================================
0000C7AA                            
0000C7AA                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C7AA 2248                       		movea.l	a0,a1
0000C7AC 7000                       		moveq	#0,d0
0000C7AE 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C7B2 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C7B8 6600                       		bne.s	Obj34_CheckFZ
0000C7BA 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C7BC                            
0000C7BC                            Obj34_CheckFZ:
0000C7BC 3400                       		move.w	d0,d2
0000C7BE 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C7C4 6600                       		bne.s	Obj34_LoadConfig
0000C7C6 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C7C8 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C7CA                            
0000C7CA                            Obj34_LoadConfig:
0000C7CA 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C7D0 E948                       		lsl.w	#4,d0
0000C7D2 D6C0                       		adda.w	d0,a3
0000C7D4 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C7DA 7203                       		moveq	#3,d1
0000C7DC                            
0000C7DC                            Obj34_Loop:
0000C7DC 12BC 0034                  		move.b	#$34,0(a1)
0000C7E0 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000C7E4 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000C7E8 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000C7EC 335A 000A                  		move.w	(a2)+,$A(a1)
0000C7F0 135A 0024                  		move.b	(a2)+,$24(a1)
0000C7F4 101A                       		move.b	(a2)+,d0
0000C7F6 6600                       		bne.s	Obj34_ActNumber
0000C7F8 1002                       		move.b	d2,d0
0000C7FA                            
0000C7FA                            Obj34_ActNumber:
0000C7FA 0C00 0007                  		cmpi.b	#7,d0
0000C7FE 6600                       		bne.s	Obj34_MakeSprite
0000C800 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000C804 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000C80A 6600                       		bne.s	Obj34_MakeSprite
0000C80C 5300                       		subq.b	#1,d0
0000C80E                            
0000C80E                            Obj34_MakeSprite:
0000C80E 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000C812 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000C81A 337C 8580 0002             		move.w	#$8580,2(a1)
0000C820 137C 0078 0019             		move.b	#$78,$19(a1)
0000C826 137C 0000 0001             		move.b	#0,1(a1)
0000C82C 137C 0000 0018             		move.b	#0,$18(a1)
0000C832 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000C838 43E9 0040                  		lea	$40(a1),a1	; next object
0000C83C 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000C840                            
0000C840                            Obj34_ChkPos:				; XREF: Obj34_Index
0000C840 7210                       		moveq	#$10,d1		; set horizontal speed
0000C842 3028 0030                  		move.w	$30(a0),d0
0000C846 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000C84A 6700                       		beq.s	loc_C3C8	; if yes, branch
0000C84C 6C00                       		bge.s	Obj34_Move
0000C84E 4441                       		neg.w	d1
0000C850                            
0000C850                            Obj34_Move:
0000C850 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C854                            
0000C854                            loc_C3C8:
0000C854 3028 0008                  		move.w	8(a0),d0
0000C858 6B00                       		bmi.s	locret_C3D8
0000C85A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C85E 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000C860 6000 0000                  		bra.w	DisplaySprite
0000C864                            ; ===========================================================================
0000C864                            
0000C864                            locret_C3D8:
0000C864 4E75                       		rts	
0000C866                            ; ===========================================================================
0000C866                            
0000C866                            Obj34_Wait:				; XREF: Obj34_Index
0000C866 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000C86A 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000C86C 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000C870 6000 0000                  		bra.w	DisplaySprite
0000C874                            ; ===========================================================================
0000C874                            
0000C874                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000C874 4A28 0001                  		tst.b	1(a0)
0000C878 6A00                       		bpl.s	Obj34_ChangeArt
0000C87A 7220                       		moveq	#$20,d1
0000C87C 3028 0032                  		move.w	$32(a0),d0
0000C880 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000C884 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000C886 6C00                       		bge.s	Obj34_Move2
0000C888 4441                       		neg.w	d1
0000C88A                            
0000C88A                            Obj34_Move2:
0000C88A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C88E 3028 0008                  		move.w	8(a0),d0
0000C892 6B00                       		bmi.s	locret_C412
0000C894 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C898 6400                       		bcc.s	locret_C412	; if yes, branch
0000C89A 6000 0000                  		bra.w	DisplaySprite
0000C89E                            ; ===========================================================================
0000C89E                            
0000C89E                            locret_C412:
0000C89E 4E75                       		rts	
0000C8A0                            ; ===========================================================================
0000C8A0                            
0000C8A0                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000C8A0 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000C8A6 6600                       		bne.s	Obj34_Delete
0000C8A8 7002                       		moveq	#2,d0
0000C8AA 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load explosion patterns
0000C8B0 7000                       		moveq	#0,d0
0000C8B2 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C8B6 0640 0015                  		addi.w	#$15,d0
0000C8BA 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load animal patterns
0000C8C0                            
0000C8C0                            Obj34_Delete:
0000C8C0 6000 0000                  		bra.w	DeleteObject
0000C8C4                            ; ===========================================================================
0000C8C4 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000C8C6 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000C8C8 00E4                       		dc.w $E4
0000C8CA 0206                       		dc.b 2,	6
0000C8CC 00EA                       		dc.w $EA
0000C8CE 0207                       		dc.b 2,	7
0000C8D0 00E0                       		dc.w $E0
0000C8D2 020A                       		dc.b 2,	$A
0000C8D4                            ; ---------------------------------------------------------------------------
0000C8D4                            ; Title	card configuration data
0000C8D4                            ; Format:
0000C8D4                            ; 4 bytes per item (YYYY XXXX)
0000C8D4                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000C8D4                            ; ---------------------------------------------------------------------------
0000C8D4 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000C8E4 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000C8F4 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000C904 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000C914 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000C924 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000C934 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000C944                            ; ===========================================================================
0000C944                            ; ---------------------------------------------------------------------------
0000C944                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000C944                            ; ---------------------------------------------------------------------------
0000C944                            
0000C944                            Obj39:					; XREF: Obj_Index
0000C944 7000                       		moveq	#0,d0
0000C946 1028 0024                  		move.b	$24(a0),d0
0000C94A 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000C94E 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000C952                            ; ===========================================================================
0000C952 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000C954 0000                       		dc.w loc_C50C-Obj39_Index
0000C956 0000                       		dc.w Obj39_Wait-Obj39_Index
0000C958                            ; ===========================================================================
0000C958                            
0000C958                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000C958 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C95C 6700                       		beq.s	Obj39_Main	; if yes, branch
0000C95E 4E75                       		rts	
0000C960                            ; ===========================================================================
0000C960                            
0000C960                            Obj39_Main:
0000C960 5428 0024                  		addq.b	#2,$24(a0)
0000C964 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000C96A 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000C970 6700                       		beq.s	loc_C4EC	; if not, branch
0000C972 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000C978                            
0000C978                            loc_C4EC:
0000C978 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000C97E 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000C986 317C 855E 0002             		move.w	#$855E,2(a0)
0000C98C 117C 0000 0001             		move.b	#0,1(a0)
0000C992 117C 0000 0018             		move.b	#0,$18(a0)
0000C998                            
0000C998                            loc_C50C:				; XREF: Obj39_Index
0000C998 7210                       		moveq	#$10,d1		; set horizontal speed
0000C99A 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000C9A0 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000C9A2 6500                       		bcs.s	Obj39_Move
0000C9A4 4441                       		neg.w	d1
0000C9A6                            
0000C9A6                            Obj39_Move:
0000C9A6 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C9AA 6000 0000                  		bra.w	DisplaySprite
0000C9AE                            ; ===========================================================================
0000C9AE                            
0000C9AE                            Obj39_SetWait:				; XREF: Obj39_Main
0000C9AE 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000C9B4 5428 0024                  		addq.b	#2,$24(a0)
0000C9B8 4E75                       		rts	
0000C9BA                            ; ===========================================================================
0000C9BA                            
0000C9BA                            Obj39_Wait:				; XREF: Obj39_Index
0000C9BA 1038 F605                  		move.b	($FFFFF605).w,d0
0000C9BE 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000C9C2 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000C9C4 0828 0000 001A             		btst	#0,$1A(a0)
0000C9CA 6600                       		bne.s	Obj39_Display
0000C9CC 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000C9D0 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000C9D2 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C9D6 6000 0000                  		bra.w	DisplaySprite
0000C9DA                            ; ===========================================================================
0000C9DA                            
0000C9DA                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000C9DA 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000C9DE 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000C9E0 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000C9E6 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000C9EA 6600                       		bne.s	Obj39_Display	; if yes, branch
0000C9EC 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000C9F2 6000                       		bra.s	Obj39_Display
0000C9F4                            ; ===========================================================================
0000C9F4                            
0000C9F4                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000C9F4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C9FA                            
0000C9FA                            Obj39_Display:				; XREF: Obj39_ChgMode
0000C9FA 6000 0000                  		bra.w	DisplaySprite
0000C9FE                            ; ===========================================================================
0000C9FE                            ; ---------------------------------------------------------------------------
0000C9FE                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000C9FE                            ; ---------------------------------------------------------------------------
0000C9FE                            
0000C9FE                            Obj3A:					; XREF: Obj_Index
0000C9FE 7000                       		moveq	#0,d0
0000CA00 1028 0024                  		move.b	$24(a0),d0
0000CA04 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CA08 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CA0C                            ; ===========================================================================
0000CA0C 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CA0E 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CA10 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CA12 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CA14 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CA16 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CA18 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CA1A 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CA1C 0000                       		dc.w loc_C766-Obj3A_Index
0000CA1E                            ; ===========================================================================
0000CA1E                            
0000CA1E                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CA1E 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CA22 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CA24 4E75                       		rts	
0000CA26                            ; ===========================================================================
0000CA26                            
0000CA26                            Obj3A_Main:
0000CA26 2248                       		movea.l	a0,a1
0000CA28 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CA2E 7206                       		moveq	#6,d1
0000CA30                            
0000CA30                            Obj3A_Loop:
0000CA30 12BC 003A                  		move.b	#$3A,0(a1)
0000CA34 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CA38 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CA3C 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CA40 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CA44 135A 0024                  		move.b	(a2)+,$24(a1)
0000CA48 101A                       		move.b	(a2)+,d0
0000CA4A 0C00 0006                  		cmpi.b	#6,d0
0000CA4E 6600                       		bne.s	loc_C5CA
0000CA50 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CA54                            
0000CA54                            loc_C5CA:
0000CA54 1340 001A                  		move.b	d0,$1A(a1)
0000CA58 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CA60 337C 8580 0002             		move.w	#$8580,2(a1)
0000CA66 137C 0000 0001             		move.b	#0,1(a1)
0000CA6C 43E9 0040                  		lea	$40(a1),a1
0000CA70 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CA74                            
0000CA74                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CA74 7210                       		moveq	#$10,d1		; set horizontal speed
0000CA76 3028 0030                  		move.w	$30(a0),d0
0000CA7A B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CA7E 6700                       		beq.s	loc_C61A	; if yes, branch
0000CA80 6C00                       		bge.s	Obj3A_Move
0000CA82 4441                       		neg.w	d1
0000CA84                            
0000CA84                            Obj3A_Move:
0000CA84 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CA88                            
0000CA88                            loc_C5FE:				; XREF: loc_C61A
0000CA88 3028 0008                  		move.w	8(a0),d0
0000CA8C 6B00                       		bmi.s	locret_C60E
0000CA8E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CA92 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CA94 6000 0000                  		bra.w	DisplaySprite
0000CA98                            ; ===========================================================================
0000CA98                            
0000CA98                            locret_C60E:
0000CA98 4E75                       		rts	
0000CA9A                            ; ===========================================================================
0000CA9A                            
0000CA9A                            loc_C610:				; XREF: loc_C61A
0000CA9A 117C 000E 0024             		move.b	#$E,$24(a0)
0000CAA0 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CAA4                            ; ===========================================================================
0000CAA4                            
0000CAA4                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CAA4 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CAAA 67EE                       		beq.s	loc_C610
0000CAAC 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CAB2 66D4                       		bne.s	loc_C5FE
0000CAB4 5428 0024                  		addq.b	#2,$24(a0)
0000CAB8 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CABE                            
0000CABE                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CABE 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CAC2 6600                       		bne.s	Obj3A_Display
0000CAC4 5428 0024                  		addq.b	#2,$24(a0)
0000CAC8                            
0000CAC8                            Obj3A_Display:
0000CAC8 6000 0000                  		bra.w	DisplaySprite
0000CACC                            ; ===========================================================================
0000CACC                            
0000CACC                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CACC 6100 0000                  		bsr.w	DisplaySprite
0000CAD0 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CAD6 7000                       		moveq	#0,d0
0000CAD8 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CADC 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CADE 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CAE2 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CAE8                            
0000CAE8                            Obj3A_RingBonus:
0000CAE8 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CAEC 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CAEE 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CAF2 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CAF8                            
0000CAF8                            Obj3A_ChkBonus:
0000CAF8 4A40                       		tst.w	d0		; is there any bonus?
0000CAFA 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CAFC 303C 00C5                  		move.w	#$C5,d0
0000CB00 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CB06 5428 0024                  		addq.b	#2,$24(a0)
0000CB0A 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CB10 6600                       		bne.s	Obj3A_SetDelay
0000CB12 5828 0024                  		addq.b	#4,$24(a0)
0000CB16                            
0000CB16                            Obj3A_SetDelay:
0000CB16 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CB1C                            
0000CB1C                            locret_C692:
0000CB1C 4E75                       		rts	
0000CB1E                            ; ===========================================================================
0000CB1E                            
0000CB1E                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CB1E 4EB9 0000 0000             		jsr	AddPoints
0000CB24 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CB28 0200 0003                  		andi.b	#3,d0
0000CB2C 66EE                       		bne.s	locret_C692
0000CB2E 303C 00CD                  		move.w	#$CD,d0
0000CB32 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CB38                            ; ===========================================================================
0000CB38                            
0000CB38                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CB38 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CB3C 0240 0007                  		andi.w	#7,d0
0000CB40 E748                       		lsl.w	#3,d0
0000CB42 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CB46 0241 0003                  		andi.w	#3,d1
0000CB4A D241                       		add.w	d1,d1
0000CB4C D041                       		add.w	d1,d0
0000CB4E 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CB52 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CB56 4A40                       		tst.w	d0
0000CB58 6600                       		bne.s	Obj3A_ChkSS
0000CB5A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CB60 6000                       		bra.s	Obj3A_Display2
0000CB62                            ; ===========================================================================
0000CB62                            
0000CB62                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CB62 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CB66 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CB6A 6700                       		beq.s	loc_C6EA	; if not, branch
0000CB6C 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CB72 6000                       		bra.s	Obj3A_Display2
0000CB74                            ; ===========================================================================
0000CB74                            
0000CB74                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CB74 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CB7A                            
0000CB7A                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CB7A 6000 0000                  		bra.w	DisplaySprite
0000CB7E                            ; ===========================================================================
0000CB7E                            ; ---------------------------------------------------------------------------
0000CB7E                            ; Level	order array
0000CB7E                            ; ---------------------------------------------------------------------------
0000CB7E                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CBAE                            		even
0000CBAE                            ; ===========================================================================
0000CBAE                            
0000CBAE                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CBAE 7220                       		moveq	#$20,d1		; set horizontal speed
0000CBB0 3028 0032                  		move.w	$32(a0),d0
0000CBB4 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CBB8 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CBBA 6C00                       		bge.s	Obj3A_Move2
0000CBBC 4441                       		neg.w	d1
0000CBBE                            
0000CBBE                            Obj3A_Move2:
0000CBBE D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CBC2 3028 0008                  		move.w	8(a0),d0
0000CBC6 6B00                       		bmi.s	locret_C748
0000CBC8 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CBCC 6400                       		bcc.s	locret_C748	; if yes, branch
0000CBCE 6000 0000                  		bra.w	DisplaySprite
0000CBD2                            ; ===========================================================================
0000CBD2                            
0000CBD2                            locret_C748:
0000CBD2 4E75                       		rts	
0000CBD4                            ; ===========================================================================
0000CBD4                            
0000CBD4                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CBD4 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CBDA 6600 0000                  		bne.w	DeleteObject
0000CBDE 5428 0024                  		addq.b	#2,$24(a0)
0000CBE2 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CBE6 303C 008D                  		move.w	#$8D,d0
0000CBEA 4EF9 0000 15B6             		jmp	(PlaySound).l	; play FZ music
0000CBF0                            ; ===========================================================================
0000CBF0                            
0000CBF0                            loc_C766:				; XREF: Obj3A_Index
0000CBF0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CBF4 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CBFA 6700 0000                  		beq.w	DeleteObject
0000CBFE 4E75                       		rts	
0000CC00                            ; ===========================================================================
0000CC00 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CC06 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CC08 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CC0E 0201                       		dc.b 2,	1
0000CC10 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CC16 0206                       		dc.b 2,	6
0000CC18 0520 0120 00EC             		dc.w $520, $120, $EC
0000CC1E 0202                       		dc.b 2,	2
0000CC20 0540 0120 00FC             		dc.w $540, $120, $FC
0000CC26 0203                       		dc.b 2,	3
0000CC28 0560 0120 010C             		dc.w $560, $120, $10C
0000CC2E 0204                       		dc.b 2,	4
0000CC30 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CC36 0205                       		dc.b 2,	5
0000CC38                            ; ===========================================================================
0000CC38                            ; ---------------------------------------------------------------------------
0000CC38                            ; Object 7E - special stage results screen
0000CC38                            ; ---------------------------------------------------------------------------
0000CC38                            
0000CC38                            Obj7E:					; XREF: Obj_Index
0000CC38 7000                       		moveq	#0,d0
0000CC3A 1028 0024                  		move.b	$24(a0),d0
0000CC3E 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CC42 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CC46                            ; ===========================================================================
0000CC46 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CC48 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CC4A 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CC4C 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CC4E 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CC50 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CC52 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CC54 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CC56 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CC58 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CC5A 0000                       		dc.w loc_C91A-Obj7E_Index
0000CC5C                            ; ===========================================================================
0000CC5C                            
0000CC5C                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CC5C 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CC60 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CC62 4E75                       		rts	
0000CC64                            ; ===========================================================================
0000CC64                            
0000CC64                            Obj7E_Main:
0000CC64 2248                       		movea.l	a0,a1
0000CC66 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CC6C 7203                       		moveq	#3,d1
0000CC6E 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CC74 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CC76 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CC78                            
0000CC78                            Obj7E_Loop:
0000CC78 12BC 007E                  		move.b	#$7E,0(a1)
0000CC7C 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CC80 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CC84 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CC88 135A 0024                  		move.b	(a2)+,$24(a1)
0000CC8C 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CC90 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CC98 337C 8580 0002             		move.w	#$8580,2(a1)
0000CC9E 137C 0000 0001             		move.b	#0,1(a1)
0000CCA4 43E9 0040                  		lea	$40(a1),a1
0000CCA8 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CCAC                            
0000CCAC 7007                       		moveq	#7,d0
0000CCAE 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CCB2 6700                       		beq.s	loc_C842
0000CCB4 7000                       		moveq	#0,d0
0000CCB6 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CCBA 6600                       		bne.s	loc_C842	; if not, branch
0000CCBC 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CCBE 317C 0018 0008             		move.w	#$18,8(a0)
0000CCC4 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CCCA                            
0000CCCA                            loc_C842:
0000CCCA 1140 001A                  		move.b	d0,$1A(a0)
0000CCCE                            
0000CCCE                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CCCE 7210                       		moveq	#$10,d1		; set horizontal speed
0000CCD0 3028 0030                  		move.w	$30(a0),d0
0000CCD4 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CCD8 6700                       		beq.s	loc_C86C	; if yes, branch
0000CCDA 6C00                       		bge.s	Obj7E_Move
0000CCDC 4441                       		neg.w	d1
0000CCDE                            
0000CCDE                            Obj7E_Move:
0000CCDE D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CCE2                            
0000CCE2                            loc_C85A:				; XREF: loc_C86C
0000CCE2 3028 0008                  		move.w	8(a0),d0
0000CCE6 6B00                       		bmi.s	locret_C86A
0000CCE8 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CCEC 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CCEE 6000 0000                  		bra.w	DisplaySprite
0000CCF2                            ; ===========================================================================
0000CCF2                            
0000CCF2                            locret_C86A:
0000CCF2 4E75                       		rts	
0000CCF4                            ; ===========================================================================
0000CCF4                            
0000CCF4                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CCF4 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CCFA 66E6                       		bne.s	loc_C85A
0000CCFC 5428 0024                  		addq.b	#2,$24(a0)
0000CD00 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CD06 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CD0C                            
0000CD0C                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CD0C 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CD10 6600                       		bne.s	Obj7E_Display
0000CD12 5428 0024                  		addq.b	#2,$24(a0)
0000CD16                            
0000CD16                            Obj7E_Display:
0000CD16 6000 0000                  		bra.w	DisplaySprite
0000CD1A                            ; ===========================================================================
0000CD1A                            
0000CD1A                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000CD1A 6100 0000                  		bsr.w	DisplaySprite
0000CD1E 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000CD24 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CD28 6700                       		beq.s	loc_C8C4	; if yes, branch
0000CD2A 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CD30 700A                       		moveq	#10,d0		; add 10 to score
0000CD32 4EB9 0000 0000             		jsr	AddPoints
0000CD38 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CD3C 0200 0003                  		andi.b	#3,d0
0000CD40 6600                       		bne.s	locret_C8EA
0000CD42 303C 00CD                  		move.w	#$CD,d0
0000CD46 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CD4C                            ; ===========================================================================
0000CD4C                            
0000CD4C                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000CD4C 303C 00C5                  		move.w	#$C5,d0
0000CD50 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CD56 5428 0024                  		addq.b	#2,$24(a0)
0000CD5A 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CD60 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000CD66 6500                       		bcs.s	locret_C8EA	; if not, branch
0000CD68 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000CD6E 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000CD72                            
0000CD72                            locret_C8EA:
0000CD72 4E75                       		rts	
0000CD74                            ; ===========================================================================
0000CD74                            
0000CD74                            Obj7E_Exit:				; XREF: Obj7E_Index
0000CD74 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CD7A 6000 0000                  		bra.w	DisplaySprite
0000CD7E                            ; ===========================================================================
0000CD7E                            
0000CD7E                            Obj7E_Continue:				; XREF: Obj7E_Index
0000CD7E 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000CD84 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000CD8A 303C 00BF                  		move.w	#$BF,d0
0000CD8E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play continues music
0000CD94 5428 0024                  		addq.b	#2,$24(a0)
0000CD98 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000CD9E 6000 0000                  		bra.w	DisplaySprite
0000CDA2                            ; ===========================================================================
0000CDA2                            
0000CDA2                            loc_C91A:				; XREF: Obj7E_Index
0000CDA2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CDA6 0200 000F                  		andi.b	#$F,d0
0000CDAA 6600                       		bne.s	Obj7E_Display2
0000CDAC 0868 0000 001A             		bchg	#0,$1A(a0)
0000CDB2                            
0000CDB2                            Obj7E_Display2:
0000CDB2 6000 0000                  		bra.w	DisplaySprite
0000CDB6                            ; ===========================================================================
0000CDB6 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000CDBC 0200                       		dc.b 2,	0		; rountine number, frame number
0000CDBE 0320 0120 0118             		dc.w $320, $120, $118
0000CDC4 0201                       		dc.b 2,	1
0000CDC6 0360 0120 0128             		dc.w $360, $120, $128
0000CDCC 0202                       		dc.b 2,	2
0000CDCE 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000CDD4 0203                       		dc.b 2,	3
0000CDD6 03A0 0120 0138             		dc.w $3A0, $120, $138
0000CDDC 0206                       		dc.b 2,	6
0000CDDE                            ; ===========================================================================
0000CDDE                            ; ---------------------------------------------------------------------------
0000CDDE                            ; Object 7F - chaos emeralds from the special stage results screen
0000CDDE                            ; ---------------------------------------------------------------------------
0000CDDE                            
0000CDDE                            Obj7F:					; XREF: Obj_Index
0000CDDE 7000                       		moveq	#0,d0
0000CDE0 1028 0024                  		move.b	$24(a0),d0
0000CDE4 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000CDE8 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000CDEC                            ; ===========================================================================
0000CDEC 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000CDEE 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000CDF0                            
0000CDF0                            ; ---------------------------------------------------------------------------
0000CDF0                            ; X-axis positions for chaos emeralds
0000CDF0                            ; ---------------------------------------------------------------------------
0000CDF0 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000CDFC                            ; ===========================================================================
0000CDFC                            
0000CDFC                            Obj7F_Main:				; XREF: Obj7F_Index
0000CDFC 2248                       		movea.l	a0,a1
0000CDFE 45F9 0000 CDF0             		lea	(Obj7F_PosData).l,a2
0000CE04 7400                       		moveq	#0,d2
0000CE06 7200                       		moveq	#0,d1
0000CE08 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000CE0C 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000CE0E 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000CE12                            
0000CE12                            Obj7F_Loop:
0000CE12 12BC 007F                  		move.b	#$7F,0(a1)
0000CE16 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000CE1A 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000CE20 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000CE24 1633 2000                  		move.b	(a3,d2.w),d3
0000CE28 1343 001A                  		move.b	d3,$1A(a1)
0000CE2C 1343 001C                  		move.b	d3,$1C(a1)
0000CE30 5202                       		addq.b	#1,d2
0000CE32 5429 0024                  		addq.b	#2,$24(a1)
0000CE36 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000CE3E 337C 8541 0002             		move.w	#$8541,2(a1)
0000CE44 137C 0000 0001             		move.b	#0,1(a1)
0000CE4A 43E9 0040                  		lea	$40(a1),a1	; next object
0000CE4E 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000CE52                            
0000CE52                            Obj7F_Flash:				; XREF: Obj7F_Index
0000CE52 1028 001A                  		move.b	$1A(a0),d0
0000CE56 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000CE5C 0C00 0006                  		cmpi.b	#6,d0
0000CE60 6600                       		bne.s	Obj7F_Display
0000CE62 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000CE68                            
0000CE68                            Obj7F_Display:
0000CE68 6000 0000                  		bra.w	DisplaySprite
0000CE6C                            ; ===========================================================================
0000CE6C                            ; ---------------------------------------------------------------------------
0000CE6C                            ; Sprite mappings - zone title cards
0000CE6C                            ; ---------------------------------------------------------------------------
0000CE6C 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000CE6E 0000                       		dc.w byte_CA2C-Map_obj34
0000CE70 0000                       		dc.w byte_CA5A-Map_obj34
0000CE72 0000                       		dc.w byte_CA7A-Map_obj34
0000CE74 0000                       		dc.w byte_CAA8-Map_obj34
0000CE76 0000                       		dc.w byte_CADC-Map_obj34
0000CE78 0000                       		dc.w byte_CB10-Map_obj34
0000CE7A 0000                       		dc.w byte_CB26-Map_obj34
0000CE7C 0000                       		dc.w byte_CB31-Map_obj34
0000CE7E 0000                       		dc.w byte_CB3C-Map_obj34
0000CE80 0000                       		dc.w byte_CB47-Map_obj34
0000CE82 0000                       		dc.w byte_CB8A-Map_obj34
0000CE84 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000CE85 F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000CE8A F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000CE8F F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000CE94 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000CE99 F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000CE9E F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000CEA3 F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000CEA8 F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000CEAD F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000CEB2 F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000CEB7 F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000CEBC F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000CEC1 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000CEC2 F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000CEC7 F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000CECC F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000CED1 F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000CED6 F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000CEDB F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000CEE0 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000CEE5 F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000CEEA F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000CEEF F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000CEF4 F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000CEF9 F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000CEFE F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000CF03 F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000CF08 F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000CF0D F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000CF12 F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000CF17 F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000CF1C F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000CF21 F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000CF26 F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000CF2B F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000CF30 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000CF31 F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000CF36 F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000CF3B F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000CF40 F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000CF45 F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000CF4A 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000CF4B F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000CF50 F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000CF55 F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000CF5A F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000CF5F F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000CF64 F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000CF69 F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000CF6E F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000CF73 F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000CF78 F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000CF7D F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000CF82 F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000CF87 F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000CF8C F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000CF91 F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000CF96 F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000CF9B F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000CFA0 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000CFA1 F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000CFA6 F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000CFAB F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000CFB0 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000CFB5 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000CFBA F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000CFBF F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000CFC4 F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000CFC9 F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000CFCE F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000CFD3 F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000CFD8 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000CFDD F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000CFE2 F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000CFE7 F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000CFEC F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000CFF1 F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000CFF6 F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000CFFB F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000D000 F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000D005 F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000D00A 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000D00B F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000D010 F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000D015 F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000D01A F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D01F F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000D024 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D029 F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000D02E 04                         byte_CB10:	dc.b 4			; ZONE
0000D02F F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D034 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D039 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D03E F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D043 00                         		dc.b 0
0000D044 02                         byte_CB26:	dc.b 2			; ACT 1
0000D045 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D04A F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D04F 02                         byte_CB31:	dc.b 2			; ACT 2
0000D050 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D055 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D05A 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D05B 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D060 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D065 0D                         byte_CB47:	dc.b $D			; Oval
0000D066 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D06B E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D070 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D075 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D07A 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D07F 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D084 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D089 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D08E EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D093 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D098 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D09D 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D0A2 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D0A7 00                         		dc.b 0
0000D0A8 05                         byte_CB8A:	dc.b 5			; FINAL
0000D0A9 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D0AE F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D0B3 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D0B8 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D0BD F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D0C2                            		even
0000D0C2                            ; ---------------------------------------------------------------------------
0000D0C2                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D0C2                            ; ---------------------------------------------------------------------------
0000D0C2                            Map_obj39:
0000D0C2                            	include "_maps\obj39.asm"
0000D0C2                            ; ---------------------------------------------------------------------------
0000D0C2                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D0C2                            ; ---------------------------------------------------------------------------
0000D0C2 0000                       		dc.w byte_CBAC-Map_obj39
0000D0C4 0000                       		dc.w byte_CBB7-Map_obj39
0000D0C6 0000                       		dc.w byte_CBC2-Map_obj39
0000D0C8 0000                       		dc.w byte_CBCD-Map_obj39
0000D0CA 02                         byte_CBAC:	dc.b 2
0000D0CB F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D0D0 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D0D5 02                         byte_CBB7:	dc.b 2
0000D0D6 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D0DB F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D0E0 02                         byte_CBC2:	dc.b 2
0000D0E1 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D0E6 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D0EB 02                         byte_CBCD:	dc.b 2
0000D0EC F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D0F1 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D0F6                            		even
0000D0F6                            		even
0000D0F6                            
0000D0F6                            ; ---------------------------------------------------------------------------
0000D0F6                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D0F6                            ; ---------------------------------------------------------------------------
0000D0F6 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D0F8 0000                       		dc.w byte_CC13-Map_obj3A
0000D0FA 0000                       		dc.w byte_CC32-Map_obj3A
0000D0FC 0000                       		dc.w byte_CC51-Map_obj3A
0000D0FE 0000                       		dc.w byte_CC75-Map_obj3A
0000D100 FF6F                       		dc.w byte_CB47-Map_obj3A
0000D102 FF4E                       		dc.w byte_CB26-Map_obj3A
0000D104 FF59                       		dc.w byte_CB31-Map_obj3A
0000D106 FF64                       		dc.w byte_CB3C-Map_obj3A
0000D108 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D109 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D10E F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D113 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D118 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D11D F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D122 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D127 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D12C F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D131 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D136 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D13B F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D140 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D145 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D14A F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D14F F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D154 06                         byte_CC13:	dc.b 6			; PASSED
0000D155 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D15A F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D15F F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D164 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D169 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D16E F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D173 06                         byte_CC32:	dc.b 6			; SCORE
0000D174 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D179 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D17E F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D183 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D188 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D18D FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D192 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D193 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D198 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D19D F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D1A2 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D1A7 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D1AC F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D1B1 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D1B6 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D1B7 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D1BC F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D1C1 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D1C6 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D1CB FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D1D0 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D1D5 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D1DA                            		even
0000D1DA                            ; ---------------------------------------------------------------------------
0000D1DA                            ; Sprite mappings - special stage results screen
0000D1DA                            ; ---------------------------------------------------------------------------
0000D1DA 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D1DC 0000                       		dc.w byte_CCEE-Map_obj7E
0000D1DE 0000                       		dc.w byte_CD0D-Map_obj7E
0000D1E0 FE8B                       		dc.w byte_CB47-Map_obj7E
0000D1E2 0000                       		dc.w byte_CD31-Map_obj7E
0000D1E4 0000                       		dc.w byte_CD46-Map_obj7E
0000D1E6 0000                       		dc.w byte_CD5B-Map_obj7E
0000D1E8 0000                       		dc.w byte_CD6B-Map_obj7E
0000D1EA 0000                       		dc.w byte_CDA8-Map_obj7E
0000D1EC 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D1ED F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D1F2 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D1F7 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D1FC F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D201 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D206 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D20B F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D210 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D215 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D21A F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D21F F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D224 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D229 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D22E 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D22F F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D234 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D239 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D23E F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D243 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D248 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D24D 07                         byte_CD0D:	dc.b 7
0000D24E F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D253 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D258 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D25D F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D262 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D267 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D26C F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D271 04                         byte_CD31:	dc.b 4
0000D272 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D277 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D27C F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D281 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D286 04                         byte_CD46:	dc.b 4
0000D287 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D28C F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D291 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D296 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D29B 03                         byte_CD5B:	dc.b 3
0000D29C F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D2A1 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D2A6 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D2AB 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D2AC F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D2B1 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D2B6 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D2BB F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D2C0 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D2C5 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D2CA F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D2CF F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D2D4 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D2D9 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D2DE F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D2E3 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D2E8 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D2E9 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D2EE F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D2F3 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D2F8 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D2FD F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D302 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D307 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D30C F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D311 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D316 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D31B F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D320 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D325 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D32A F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D32F F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D334                            		even
0000D334                            ; ---------------------------------------------------------------------------
0000D334                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D334                            ; ---------------------------------------------------------------------------
0000D334                            Map_obj7F:
0000D334                            	include "_maps\obj7F.asm"
0000D334                            ; ---------------------------------------------------------------------------
0000D334                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D334                            ; ---------------------------------------------------------------------------
0000D334 0000                       		dc.w byte_CE02-Map_obj7F
0000D336 0000                       		dc.w byte_CE08-Map_obj7F
0000D338 0000                       		dc.w byte_CE0E-Map_obj7F
0000D33A 0000                       		dc.w byte_CE14-Map_obj7F
0000D33C 0000                       		dc.w byte_CE1A-Map_obj7F
0000D33E 0000                       		dc.w byte_CE20-Map_obj7F
0000D340 0000                       		dc.w byte_CE26-Map_obj7F
0000D342 01                         byte_CE02:	dc.b 1
0000D343 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D348 01                         byte_CE08:	dc.b 1
0000D349 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D34E 01                         byte_CE0E:	dc.b 1
0000D34F F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D354 01                         byte_CE14:	dc.b 1
0000D355 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D35A 01                         byte_CE1A:	dc.b 1
0000D35B F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D360 01                         byte_CE20:	dc.b 1
0000D361 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D366 00                         byte_CE26:	dc.b 0			; Blank frame
0000D368 00                         		even
0000D368 00                         		even
0000D368                            
0000D368                            ; ===========================================================================
0000D368                            ; ---------------------------------------------------------------------------
0000D368                            ; Object 36 - spikes
0000D368                            ; ---------------------------------------------------------------------------
0000D368                            
0000D368                            Obj36:					; XREF: Obj_Index
0000D368 7000                       		moveq	#0,d0
0000D36A 1028 0024                  		move.b	$24(a0),d0
0000D36E 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D372 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D376                            ; ===========================================================================
0000D376 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D378 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D37A                            
0000D37A 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D37C 0110                       		dc.b 1,	$10
0000D37E 0204                       		dc.b 2,	4
0000D380 031C                       		dc.b 3,	$1C
0000D382 0440                       		dc.b 4,	$40
0000D384 0510                       		dc.b 5,	$10
0000D386                            ; ===========================================================================
0000D386                            
0000D386                            Obj36_Main:				; XREF: Obj36_Index
0000D386 5428 0024                  		addq.b	#2,$24(a0)
0000D38A 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D392 317C 051B 0002             		move.w	#$51B,2(a0)
0000D398 0028 0004 0001             		ori.b	#4,1(a0)
0000D39E 117C 0004 0018             		move.b	#4,$18(a0)
0000D3A4 1028 0028                  		move.b	$28(a0),d0
0000D3A8 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D3AE 0240 00F0                  		andi.w	#$F0,d0
0000D3B2 43F9 0000 D37A             		lea	(Obj36_Var).l,a1
0000D3B8 E648                       		lsr.w	#3,d0
0000D3BA D2C0                       		adda.w	d0,a1
0000D3BC 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D3C0 1159 0019                  		move.b	(a1)+,$19(a0)
0000D3C4 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D3CA 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D3D0                            
0000D3D0                            Obj36_Solid:				; XREF: Obj36_Index
0000D3D0 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D3D4 343C 0004                  		move.w	#4,d2
0000D3D8 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D3DE 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D3E0 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D3E6 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D3E8 343C 0014                  		move.w	#$14,d2
0000D3EC                            
0000D3EC                            ; Spikes types $1x and $5x face	sideways
0000D3EC                            
0000D3EC                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D3EC 323C 001B                  		move.w	#$1B,d1
0000D3F0 3602                       		move.w	d2,d3
0000D3F2 5243                       		addq.w	#1,d3
0000D3F4 3828 0008                  		move.w	8(a0),d4
0000D3F8 6100 0000                  		bsr.w	SolidObject
0000D3FC 0828 0003 0022             		btst	#3,$22(a0)
0000D402 6600                       		bne.s	Obj36_Display
0000D404 0C44 0001                  		cmpi.w	#1,d4
0000D408 6700                       		beq.s	Obj36_Hurt
0000D40A 6000                       		bra.s	Obj36_Display
0000D40C                            ; ===========================================================================
0000D40C                            
0000D40C                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D40C                            
0000D40C                            Obj36_Upright:				; XREF: Obj36_Solid
0000D40C 7200                       		moveq	#0,d1
0000D40E 1228 0019                  		move.b	$19(a0),d1
0000D412 0641 000B                  		addi.w	#$B,d1
0000D416 343C 0010                  		move.w	#$10,d2
0000D41A 363C 0011                  		move.w	#$11,d3
0000D41E 3828 0008                  		move.w	8(a0),d4
0000D422 6100 0000                  		bsr.w	SolidObject
0000D426 0828 0003 0022             		btst	#3,$22(a0)
0000D42C 6600                       		bne.s	Obj36_Hurt
0000D42E 4A44                       		tst.w	d4
0000D430 6A00                       		bpl.s	Obj36_Display
0000D432                            
0000D432                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D432 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D436 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D438 2F08                       		move.l	a0,-(sp)
0000D43A 2448                       		movea.l	a0,a2
0000D43C 41F8 D000                  		lea	($FFFFD000).w,a0
0000D440 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D446 6400                       		bcc.s	loc_CF20
0000D448 2628 000C                  		move.l	$C(a0),d3
0000D44C 3028 0012                  		move.w	$12(a0),d0
0000D450 48C0                       		ext.l	d0
0000D452 E180                       		asl.l	#8,d0
0000D454 9680                       		sub.l	d0,d3
0000D456 2143 000C                  		move.l	d3,$C(a0)
0000D45A 4EB9 0000 0000             		jsr	HurtSonic
0000D460                            
0000D460                            loc_CF20:
0000D460 205F                       		movea.l	(sp)+,a0
0000D462                            
0000D462                            Obj36_Display:
0000D462 6100 0000                  		bsr.w	DisplaySprite
0000D466 3028 0030                  		move.w	$30(a0),d0
0000D46A 0240 FF80                  		andi.w	#$FF80,d0
0000D46E 3238 F700                  		move.w	($FFFFF700).w,d1
0000D472 0441 0080                  		subi.w	#$80,d1
0000D476 0241 FF80                  		andi.w	#$FF80,d1
0000D47A 9041                       		sub.w	d1,d0
0000D47C 0C40 0280                  		cmpi.w	#$280,d0
0000D480 6200 0000                  		bhi.w	DeleteObject
0000D484 4E75                       		rts	
0000D486                            ; ===========================================================================
0000D486                            
0000D486                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D486 7000                       		moveq	#0,d0
0000D488 1028 0028                  		move.b	$28(a0),d0
0000D48C D040                       		add.w	d0,d0
0000D48E 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D492 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D496                            ; ===========================================================================
0000D496 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D498 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D49A 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D49C                            ; ===========================================================================
0000D49C                            
0000D49C                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D49C 4E75                       		rts			; don't move the object
0000D49E                            ; ===========================================================================
0000D49E                            
0000D49E                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D49E 6100 0000                  		bsr.w	Obj36_Wait
0000D4A2 7000                       		moveq	#0,d0
0000D4A4 1028 0034                  		move.b	$34(a0),d0
0000D4A8 D068 0032                  		add.w	$32(a0),d0
0000D4AC 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D4B0 4E75                       		rts	
0000D4B2                            ; ===========================================================================
0000D4B2                            
0000D4B2                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D4B2 6100 0000                  		bsr.w	Obj36_Wait
0000D4B6 7000                       		moveq	#0,d0
0000D4B8 1028 0034                  		move.b	$34(a0),d0
0000D4BC D068 0030                  		add.w	$30(a0),d0
0000D4C0 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D4C4 4E75                       		rts	
0000D4C6                            ; ===========================================================================
0000D4C6                            
0000D4C6                            Obj36_Wait:
0000D4C6 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D4CA 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D4CC 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D4D0 6600                       		bne.s	locret_CFE6
0000D4D2 4A28 0001                  		tst.b	1(a0)
0000D4D6 6A00                       		bpl.s	locret_CFE6
0000D4D8 303C 00B6                  		move.w	#$B6,d0
0000D4DC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D4E2 6000                       		bra.s	locret_CFE6
0000D4E4                            ; ===========================================================================
0000D4E4                            
0000D4E4                            loc_CFA4:
0000D4E4 4A68 0036                  		tst.w	$36(a0)
0000D4E8 6700                       		beq.s	loc_CFC6
0000D4EA 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D4F0 6400                       		bcc.s	locret_CFE6
0000D4F2 317C 0000 0034             		move.w	#0,$34(a0)
0000D4F8 317C 0000 0036             		move.w	#0,$36(a0)
0000D4FE 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D504 6000                       		bra.s	locret_CFE6
0000D506                            ; ===========================================================================
0000D506                            
0000D506                            loc_CFC6:
0000D506 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D50C 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D512 6500                       		bcs.s	locret_CFE6
0000D514 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D51A 317C 0001 0036             		move.w	#1,$36(a0)
0000D520 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D526                            
0000D526                            locret_CFE6:
0000D526 4E75                       		rts	
0000D528                            ; ===========================================================================
0000D528                            ; ---------------------------------------------------------------------------
0000D528                            ; Sprite mappings - spikes
0000D528                            ; ---------------------------------------------------------------------------
0000D528                            Map_obj36:
0000D528                            	include "_maps\obj36.asm"
0000D528                            ; ---------------------------------------------------------------------------
0000D528                            ; Sprite mappings - spikes
0000D528                            ; ---------------------------------------------------------------------------
0000D528 0000                       		dc.w byte_CFF4-Map_obj36
0000D52A 0000                       		dc.w byte_D004-Map_obj36
0000D52C 0000                       		dc.w byte_D014-Map_obj36
0000D52E 0000                       		dc.w byte_D01A-Map_obj36
0000D530 0000                       		dc.w byte_D02A-Map_obj36
0000D532 0000                       		dc.w byte_D049-Map_obj36
0000D534 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D535 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D53A F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D53F F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D544 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D545 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D54A FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D54F 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D554 01                         byte_D014:	dc.b 1			; 1 spike
0000D555 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D55A 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D55B F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D560 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D565 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D56A 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D56B F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D570 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D575 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D57A F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D57F F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D584 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D589 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D58A FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D590 00                         		even
0000D590 00                         		even
0000D590                            
0000D590                            ; ===========================================================================
0000D590                            ; ---------------------------------------------------------------------------
0000D590                            ; Object 3B - purple rock (GHZ)
0000D590                            ; ---------------------------------------------------------------------------
0000D590                            
0000D590                            Obj3B:					; XREF: Obj_Index
0000D590 7000                       		moveq	#0,d0
0000D592 1028 0024                  		move.b	$24(a0),d0
0000D596 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D59A 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D59E                            ; ===========================================================================
0000D59E 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D5A0 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D5A2                            ; ===========================================================================
0000D5A2                            
0000D5A2                            Obj3B_Main:				; XREF: Obj3B_Index
0000D5A2 5428 0024                  		addq.b	#2,$24(a0)
0000D5A6 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D5AE 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D5B4 117C 0004 0001             		move.b	#4,1(a0)
0000D5BA 117C 0013 0019             		move.b	#$13,$19(a0)
0000D5C0 117C 0004 0018             		move.b	#4,$18(a0)
0000D5C6                            
0000D5C6                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D5C6 323C 001B                  		move.w	#$1B,d1
0000D5CA 343C 0010                  		move.w	#$10,d2
0000D5CE 363C 0010                  		move.w	#$10,d3
0000D5D2 3828 0008                  		move.w	8(a0),d4
0000D5D6 6100 0000                  		bsr.w	SolidObject
0000D5DA 6100 0000                  		bsr.w	DisplaySprite
0000D5DE 3028 0008                  		move.w	8(a0),d0
0000D5E2 0240 FF80                  		andi.w	#$FF80,d0
0000D5E6 3238 F700                  		move.w	($FFFFF700).w,d1
0000D5EA 0441 0080                  		subi.w	#$80,d1
0000D5EE 0241 FF80                  		andi.w	#$FF80,d1
0000D5F2 9041                       		sub.w	d1,d0
0000D5F4 0C40 0280                  		cmpi.w	#$280,d0
0000D5F8 6200 0000                  		bhi.w	DeleteObject
0000D5FC 4E75                       		rts	
0000D5FE                            ; ===========================================================================
0000D5FE                            ; ---------------------------------------------------------------------------
0000D5FE                            ; Object 49 - waterfall	sound effect (GHZ)
0000D5FE                            ; ---------------------------------------------------------------------------
0000D5FE                            
0000D5FE                            Obj49:					; XREF: Obj_Index
0000D5FE 7000                       		moveq	#0,d0
0000D600 1028 0024                  		move.b	$24(a0),d0
0000D604 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D608 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D60C                            ; ===========================================================================
0000D60C 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D60E 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D610                            ; ===========================================================================
0000D610                            
0000D610                            Obj49_Main:				; XREF: Obj49_Index
0000D610 5428 0024                  		addq.b	#2,$24(a0)
0000D614 117C 0004 0001             		move.b	#4,1(a0)
0000D61A                            
0000D61A                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D61A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D61E 0200 003F                  		andi.b	#$3F,d0
0000D622 6600                       		bne.s	Obj49_ChkDel
0000D624 303C 00D0                  		move.w	#$D0,d0
0000D628 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D62E                            
0000D62E                            Obj49_ChkDel:
0000D62E 3028 0008                  		move.w	8(a0),d0
0000D632 0240 FF80                  		andi.w	#$FF80,d0
0000D636 3238 F700                  		move.w	($FFFFF700).w,d1
0000D63A 0441 0080                  		subi.w	#$80,d1
0000D63E 0241 FF80                  		andi.w	#$FF80,d1
0000D642 9041                       		sub.w	d1,d0
0000D644 0C40 0280                  		cmpi.w	#$280,d0
0000D648 6200 0000                  		bhi.w	DeleteObject
0000D64C 4E75                       		rts	
0000D64E                            ; ===========================================================================
0000D64E                            ; ---------------------------------------------------------------------------
0000D64E                            ; Sprite mappings - purple rock	(GHZ)
0000D64E                            ; ---------------------------------------------------------------------------
0000D64E                            Map_obj3B:
0000D64E                            	include "_maps\obj3B.asm"
0000D64E                            ; ---------------------------------------------------------------------------
0000D64E                            ; Sprite mappings - purple rock	(GHZ)
0000D64E                            ; ---------------------------------------------------------------------------
0000D64E 0000                       		dc.w byte_D110-Map_obj3B
0000D650 02                         byte_D110:	dc.b 2
0000D651 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D656 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D65C 00                         		even
0000D65C 00                         		even
0000D65C                            
0000D65C                            ; ===========================================================================
0000D65C                            ; ---------------------------------------------------------------------------
0000D65C                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D65C                            ; ---------------------------------------------------------------------------
0000D65C                            
0000D65C                            Obj3C:					; XREF: Obj_Index
0000D65C 7000                       		moveq	#0,d0
0000D65E 1028 0024                  		move.b	$24(a0),d0
0000D662 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D666 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D66A 6000 0000                  		bra.w	MarkObjGone
0000D66E                            ; ===========================================================================
0000D66E 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D670 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D672 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D674                            ; ===========================================================================
0000D674                            
0000D674                            Obj3C_Main:				; XREF: Obj3C_Index
0000D674 5428 0024                  		addq.b	#2,$24(a0)
0000D678 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D680 317C 450F 0002             		move.w	#$450F,2(a0)
0000D686 117C 0004 0001             		move.b	#4,1(a0)
0000D68C 117C 0010 0019             		move.b	#$10,$19(a0)
0000D692 117C 0004 0018             		move.b	#4,$18(a0)
0000D698 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D69E                            
0000D69E                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D69E 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D6A4 323C 001B                  		move.w	#$1B,d1
0000D6A8 343C 0020                  		move.w	#$20,d2
0000D6AC 363C 0020                  		move.w	#$20,d3
0000D6B0 3828 0008                  		move.w	8(a0),d4
0000D6B4 6100 0000                  		bsr.w	SolidObject
0000D6B8 0828 0005 0022             		btst	#5,$22(a0)
0000D6BE 6600                       		bne.s	Obj3C_ChkRoll
0000D6C0                            
0000D6C0                            locret_D180:
0000D6C0 4E75                       		rts	
0000D6C2                            ; ===========================================================================
0000D6C2                            
0000D6C2                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D6C2 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D6C8 66F6                       		bne.s	locret_D180	; if not, branch
0000D6CA 3028 0030                  		move.w	$30(a0),d0
0000D6CE 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D6D0 4440                       		neg.w	d0
0000D6D2                            
0000D6D2                            Obj3C_ChkSpeed:
0000D6D2 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D6D6 65E8                       		bcs.s	locret_D180	; if not, branch
0000D6D8 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D6DE 5869 0008                  		addq.w	#4,8(a1)
0000D6E2 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D6E8 3028 0008                  		move.w	8(a0),d0
0000D6EC B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D6F0 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D6F2 5169 0008                  		subq.w	#8,8(a1)
0000D6F6 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D6FC                            
0000D6FC                            Obj3C_Smash:
0000D6FC 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D702 08A8 0005 0022             		bclr	#5,$22(a0)
0000D708 08A9 0005 0022             		bclr	#5,$22(a1)
0000D70E 7207                       		moveq	#7,d1		; load 8 fragments
0000D710 343C 0070                  		move.w	#$70,d2
0000D714 6100                       		bsr.s	SmashObject
0000D716                            
0000D716                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D716 6100 0000                  		bsr.w	SpeedToPos
0000D71A 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D720 6100 0000                  		bsr.w	DisplaySprite
0000D724 4A28 0001                  		tst.b	1(a0)
0000D728 6A00 0000                  		bpl.w	DeleteObject
0000D72C 4E75                       		rts	
0000D72E                            
0000D72E                            ; ---------------------------------------------------------------------------
0000D72E                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D72E                            ; ---------------------------------------------------------------------------
0000D72E                            
0000D72E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D72E                            
0000D72E                            
0000D72E                            SmashObject:				; XREF: Obj3C_Smash
0000D72E 7000                       		moveq	#0,d0
0000D730 1028 001A                  		move.b	$1A(a0),d0
0000D734 D040                       		add.w	d0,d0
0000D736 2668 0004                  		movea.l	4(a0),a3
0000D73A D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D73E 524B                       		addq.w	#1,a3
0000D740 08E8 0005 0001             		bset	#5,1(a0)
0000D746 1810                       		move.b	0(a0),d4
0000D748 1A28 0001                  		move.b	1(a0),d5
0000D74C 2248                       		movea.l	a0,a1
0000D74E 6000                       		bra.s	Smash_LoadFrag
0000D750                            ; ===========================================================================
0000D750                            
0000D750                            Smash_Loop:
0000D750 6100 0000                  		bsr.w	SingleObjLoad
0000D754 6600                       		bne.s	Smash_PlaySnd
0000D756 5A4B                       		addq.w	#5,a3
0000D758                            
0000D758                            Smash_LoadFrag:				; XREF: SmashObject
0000D758 137C 0004 0024             		move.b	#4,$24(a1)
0000D75E 1284                       		move.b	d4,0(a1)
0000D760 234B 0004                  		move.l	a3,4(a1)
0000D764 1345 0001                  		move.b	d5,1(a1)
0000D768 3368 0008 0008             		move.w	8(a0),8(a1)
0000D76E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D774 3368 0002 0002             		move.w	2(a0),2(a1)
0000D77A 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D780 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D786 335C 0010                  		move.w	(a4)+,$10(a1)
0000D78A 335C 0012                  		move.w	(a4)+,$12(a1)
0000D78E B3C8                       		cmpa.l	a0,a1
0000D790 6400                       		bcc.s	loc_D268
0000D792 2F08                       		move.l	a0,-(sp)
0000D794 2049                       		movea.l	a1,a0
0000D796 6100 0000                  		bsr.w	SpeedToPos
0000D79A D568 0012                  		add.w	d2,$12(a0)
0000D79E 205F                       		movea.l	(sp)+,a0
0000D7A0 6100 0000                  		bsr.w	DisplaySprite2
0000D7A4                            
0000D7A4                            loc_D268:
0000D7A4 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D7A8                            
0000D7A8                            Smash_PlaySnd:
0000D7A8 303C 00CB                  		move.w	#$CB,d0
0000D7AC 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D7B2                            ; End of function SmashObject
0000D7B2                            
0000D7B2                            ; ===========================================================================
0000D7B2                            ; Smashed block	fragment speeds
0000D7B2                            ;
0000D7B2 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D7B6 0600 FF00                  		dc.w $600, $FF00
0000D7BA 0600 0100                  		dc.w $600, $100
0000D7BE 0400 0500                  		dc.w $400, $500
0000D7C2 0600 FA00                  		dc.w $600, $FA00
0000D7C6 0800 FE00                  		dc.w $800, $FE00
0000D7CA 0800 0200                  		dc.w $800, $200
0000D7CE 0600 0600                  		dc.w $600, $600
0000D7D2                            
0000D7D2 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D7D6 F800 FE00                  		dc.w $F800, $FE00
0000D7DA F800 0200                  		dc.w $F800, $200
0000D7DE FA00 0600                  		dc.w $FA00, $600
0000D7E2 FC00 FB00                  		dc.w $FC00, $FB00
0000D7E6 FA00 FF00                  		dc.w $FA00, $FF00
0000D7EA FA00 0100                  		dc.w $FA00, $100
0000D7EE FC00 0500                  		dc.w $FC00, $500
0000D7F2                            ; ---------------------------------------------------------------------------
0000D7F2                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D7F2                            ; ---------------------------------------------------------------------------
0000D7F2                            Map_obj3C:
0000D7F2                            	include "_maps\obj3C.asm"
0000D7F2                            ; ---------------------------------------------------------------------------
0000D7F2                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D7F2                            ; ---------------------------------------------------------------------------
0000D7F2 0000                       		dc.w byte_D2BC-Map_obj3C
0000D7F4 0000                       		dc.w byte_D2E5-Map_obj3C
0000D7F6 0000                       		dc.w byte_D30E-Map_obj3C
0000D7F8 08                         byte_D2BC:	dc.b 8
0000D7F9 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000D7FE F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000D803 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000D808 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000D80D E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D812 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D817 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D81C 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D821 08                         byte_D2E5:	dc.b 8
0000D822 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D827 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D82C 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D831 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D836 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D83B F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D840 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D845 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D84A 08                         byte_D30E:	dc.b 8
0000D84B E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D850 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D855 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D85A 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D85F E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000D864 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000D869 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000D86E 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000D874 00                         		even
0000D874 00                         		even
0000D874                            
0000D874                            ; ---------------------------------------------------------------------------
0000D874                            ; Object code loading subroutine
0000D874                            ; ---------------------------------------------------------------------------
0000D874                            
0000D874                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D874                            
0000D874                            
0000D874                            ObjectsLoad:				; XREF: TitleScreen; et al
0000D874 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000D878 7E7F                       		moveq	#$7F,d7
0000D87A 7000                       		moveq	#0,d0
0000D87C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000D882 6400                       		bcc.s	loc_D362
0000D884                            
0000D884                            loc_D348:
0000D884 1010                       		move.b	(a0),d0		; load object number from RAM
0000D886 6700                       		beq.s	loc_D358
0000D888 D040                       		add.w	d0,d0
0000D88A D040                       		add.w	d0,d0
0000D88C 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000D890 4E91                       		jsr	(a1)		; run the object's code
0000D892 7000                       		moveq	#0,d0
0000D894                            
0000D894                            loc_D358:
0000D894 41E8 0040                  		lea	$40(a0),a0	; next object
0000D898 51CF FFEA                  		dbf	d7,loc_D348
0000D89C 4E75                       		rts	
0000D89E                            ; ===========================================================================
0000D89E                            
0000D89E                            loc_D362:
0000D89E 7E1F                       		moveq	#$1F,d7
0000D8A0 61E2                       		bsr.s	loc_D348
0000D8A2 7E5F                       		moveq	#$5F,d7
0000D8A4                            
0000D8A4                            loc_D368:
0000D8A4 7000                       		moveq	#0,d0
0000D8A6 1010                       		move.b	(a0),d0
0000D8A8 6700                       		beq.s	loc_D378
0000D8AA 4A28 0001                  		tst.b	1(a0)
0000D8AE 6A00                       		bpl.s	loc_D378
0000D8B0 6100 0000                  		bsr.w	DisplaySprite
0000D8B4                            
0000D8B4                            loc_D378:
0000D8B4 41E8 0040                  		lea	$40(a0),a0
0000D8B8                            
0000D8B8                            loc_D37C:
0000D8B8 51CF FFEA                  		dbf	d7,loc_D368
0000D8BC 4E75                       		rts	
0000D8BE                            ; End of function ObjectsLoad
0000D8BE                            
0000D8BE                            ; ===========================================================================
0000D8BE                            ; ---------------------------------------------------------------------------
0000D8BE                            ; Object pointers
0000D8BE                            ; ---------------------------------------------------------------------------
0000D8BE                            Obj_Index:
0000D8BE                            	include "_inc\Object pointers.asm"
0000D8BE                            ; ---------------------------------------------------------------------------
0000D8BE                            ; Object pointers
0000D8BE                            ; ---------------------------------------------------------------------------
0000D8BE 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000D8CE 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000D8DE 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000D8EE 0000 0000 0000 AB14 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000D8FE 0000 774C 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000D90E 0000 7D72 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000D91E 0000 85C0 0000 8628 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000D92E 0000 8C72 0000 8F60 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000D93E 0000 0000 0000 9C10 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000D94E 0000 9F48 0000 A534 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000D95E 0000 986C 0000 8D48 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000D96E 0000 B102 0000 A728 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000D97E 0000 BB10 0000 C1BE 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000D98E 0000 B674 0000 D368 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000D99E 0000 C944 0000 C9FE 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000D9AE 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000D9BE 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000D9CE 0000 BE2C 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000D9DE 0000 D5FE 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000D9EE 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000D9FE 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DA0E 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DA1E 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DA2E 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DA3E 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DA4E 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DA5E 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DA6E 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DA7E 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DA8E 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DA9E 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DAAE 0000 0000 0000 CC38 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DABE 0000 5264 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DACE 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DADE 0000 591E 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DADE 0000 591E 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DAEE                            
0000DAEE                            ; ---------------------------------------------------------------------------
0000DAEE                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DAEE                            ; ---------------------------------------------------------------------------
0000DAEE                            
0000DAEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DAEE                            
0000DAEE                            
0000DAEE                            ObjectFall:
0000DAEE 2428 0008                  		move.l	8(a0),d2
0000DAF2 2628 000C                  		move.l	$C(a0),d3
0000DAF6 3028 0010                  		move.w	$10(a0),d0
0000DAFA 48C0                       		ext.l	d0
0000DAFC E180                       		asl.l	#8,d0
0000DAFE D480                       		add.l	d0,d2
0000DB00 3028 0012                  		move.w	$12(a0),d0
0000DB04 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DB0A 48C0                       		ext.l	d0
0000DB0C E180                       		asl.l	#8,d0
0000DB0E D680                       		add.l	d0,d3
0000DB10 2142 0008                  		move.l	d2,8(a0)
0000DB14 2143 000C                  		move.l	d3,$C(a0)
0000DB18 4E75                       		rts	
0000DB1A                            ; End of function ObjectFall
0000DB1A                            
0000DB1A                            ; ---------------------------------------------------------------------------
0000DB1A                            ; Subroutine translating object	speed to update	object position
0000DB1A                            ; ---------------------------------------------------------------------------
0000DB1A                            
0000DB1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB1A                            
0000DB1A                            
0000DB1A                            SpeedToPos:
0000DB1A 2428 0008                  		move.l	8(a0),d2
0000DB1E 2628 000C                  		move.l	$C(a0),d3
0000DB22 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DB26 48C0                       		ext.l	d0
0000DB28 E180                       		asl.l	#8,d0		; multiply speed by $100
0000DB2A D480                       		add.l	d0,d2		; add to x-axis	position
0000DB2C 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DB30 48C0                       		ext.l	d0
0000DB32 E180                       		asl.l	#8,d0		; multiply by $100
0000DB34 D680                       		add.l	d0,d3		; add to y-axis	position
0000DB36 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DB3A 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DB3E 4E75                       		rts	
0000DB40                            ; End of function SpeedToPos
0000DB40                            
0000DB40                            ; ---------------------------------------------------------------------------
0000DB40                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DB40                            ; ---------------------------------------------------------------------------
0000DB40                            
0000DB40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB40                            
0000DB40                            
0000DB40                            DisplaySprite:
0000DB40 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DB44 3028 0018                  		move.w	$18(a0),d0
0000DB48 E248                       		lsr.w	#1,d0
0000DB4A 0240 0380                  		andi.w	#$380,d0
0000DB4E D2C0                       		adda.w	d0,a1
0000DB50 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DB54 6400                       		bcc.s	locret_D620
0000DB56 5451                       		addq.w	#2,(a1)
0000DB58 D2D1                       		adda.w	(a1),a1
0000DB5A 3288                       		move.w	a0,(a1)
0000DB5C                            
0000DB5C                            locret_D620:
0000DB5C 4E75                       		rts	
0000DB5E                            ; End of function DisplaySprite
0000DB5E                            
0000DB5E                            ; ---------------------------------------------------------------------------
0000DB5E                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DB5E                            ; ---------------------------------------------------------------------------
0000DB5E                            
0000DB5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB5E                            
0000DB5E                            
0000DB5E                            DisplaySprite2:
0000DB5E 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DB62 3029 0018                  		move.w	$18(a1),d0
0000DB66 E248                       		lsr.w	#1,d0
0000DB68 0240 0380                  		andi.w	#$380,d0
0000DB6C D4C0                       		adda.w	d0,a2
0000DB6E 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DB72 6400                       		bcc.s	locret_D63E
0000DB74 5452                       		addq.w	#2,(a2)
0000DB76 D4D2                       		adda.w	(a2),a2
0000DB78 3489                       		move.w	a1,(a2)
0000DB7A                            
0000DB7A                            locret_D63E:
0000DB7A 4E75                       		rts	
0000DB7C                            ; End of function DisplaySprite2
0000DB7C                            
0000DB7C                            ; ---------------------------------------------------------------------------
0000DB7C                            ; Subroutine to	delete an object
0000DB7C                            ; ---------------------------------------------------------------------------
0000DB7C                            
0000DB7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB7C                            
0000DB7C                            
0000DB7C                            DeleteObject:
0000DB7C 2248                       		movea.l	a0,a1
0000DB7E                            
0000DB7E                            DeleteObject2:
0000DB7E 7200                       		moveq	#0,d1
0000DB80 700F                       		moveq	#$F,d0
0000DB82                            
0000DB82                            loc_D646:
0000DB82 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DB84 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DB88 4E75                       		rts	
0000DB8A                            ; End of function DeleteObject
0000DB8A                            
0000DB8A                            ; ===========================================================================
0000DB8A 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DB8E 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DB92 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DB96 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DB9A                            ; ---------------------------------------------------------------------------
0000DB9A                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DB9A                            ; ---------------------------------------------------------------------------
0000DB9A                            
0000DB9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB9A                            
0000DB9A                            
0000DB9A                            BuildSprites:				; XREF: TitleScreen; et al
0000DB9A 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DB9E 7A00                       		moveq	#0,d5
0000DBA0 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DBA4 7E07                       		moveq	#7,d7
0000DBA6                            
0000DBA6                            loc_D66A:
0000DBA6 4A54                       		tst.w	(a4)
0000DBA8 6700 0000                  		beq.w	loc_D72E
0000DBAC 7C02                       		moveq	#2,d6
0000DBAE                            
0000DBAE                            loc_D672:
0000DBAE 3074 6000                  		movea.w	(a4,d6.w),a0
0000DBB2 4A10                       		tst.b	(a0)
0000DBB4 6700 0000                  		beq.w	loc_D726
0000DBB8 08A8 0007 0001             		bclr	#7,1(a0)
0000DBBE 1028 0001                  		move.b	1(a0),d0
0000DBC2 1800                       		move.b	d0,d4
0000DBC4 0240 000C                  		andi.w	#$C,d0
0000DBC8 6700                       		beq.s	loc_D6DE
0000DBCA 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DBCE 7000                       		moveq	#0,d0
0000DBD0 1028 0019                  		move.b	$19(a0),d0
0000DBD4 3628 0008                  		move.w	8(a0),d3
0000DBD8 9651                       		sub.w	(a1),d3
0000DBDA 3203                       		move.w	d3,d1
0000DBDC D240                       		add.w	d0,d1
0000DBDE 6B00 0000                  		bmi.w	loc_D726
0000DBE2 3203                       		move.w	d3,d1
0000DBE4 9240                       		sub.w	d0,d1
0000DBE6 0C41 0140                  		cmpi.w	#$140,d1
0000DBEA 6C00                       		bge.s	loc_D726
0000DBEC 0643 0080                  		addi.w	#$80,d3
0000DBF0 0804 0004                  		btst	#4,d4
0000DBF4 6700                       		beq.s	loc_D6E8
0000DBF6 7000                       		moveq	#0,d0
0000DBF8 1028 0016                  		move.b	$16(a0),d0
0000DBFC 3428 000C                  		move.w	$C(a0),d2
0000DC00 9469 0004                  		sub.w	4(a1),d2
0000DC04 3202                       		move.w	d2,d1
0000DC06 D240                       		add.w	d0,d1
0000DC08 6B00                       		bmi.s	loc_D726
0000DC0A 3202                       		move.w	d2,d1
0000DC0C 9240                       		sub.w	d0,d1
0000DC0E 0C41 00E0                  		cmpi.w	#$E0,d1
0000DC12 6C00                       		bge.s	loc_D726
0000DC14 0642 0080                  		addi.w	#$80,d2
0000DC18 6000                       		bra.s	loc_D700
0000DC1A                            ; ===========================================================================
0000DC1A                            
0000DC1A                            loc_D6DE:
0000DC1A 3428 000A                  		move.w	$A(a0),d2
0000DC1E 3628 0008                  		move.w	8(a0),d3
0000DC22 6000                       		bra.s	loc_D700
0000DC24                            ; ===========================================================================
0000DC24                            
0000DC24                            loc_D6E8:
0000DC24 3428 000C                  		move.w	$C(a0),d2
0000DC28 9469 0004                  		sub.w	4(a1),d2
0000DC2C 0642 0080                  		addi.w	#$80,d2
0000DC30 0C42 0060                  		cmpi.w	#$60,d2
0000DC34 6500                       		bcs.s	loc_D726
0000DC36 0C42 0180                  		cmpi.w	#$180,d2
0000DC3A 6400                       		bcc.s	loc_D726
0000DC3C                            
0000DC3C                            loc_D700:
0000DC3C 2268 0004                  		movea.l	4(a0),a1
0000DC40 7200                       		moveq	#0,d1
0000DC42 0804 0005                  		btst	#5,d4
0000DC46 6600                       		bne.s	loc_D71C
0000DC48 1228 001A                  		move.b	$1A(a0),d1
0000DC4C D201                       		add.b	d1,d1
0000DC4E D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DC52 1219                       		move.b	(a1)+,d1
0000DC54 5301                       		subq.b	#1,d1
0000DC56 6B00                       		bmi.s	loc_D720
0000DC58                            
0000DC58                            loc_D71C:
0000DC58 6100 0000                  		bsr.w	sub_D750
0000DC5C                            
0000DC5C                            loc_D720:
0000DC5C 08E8 0007 0001             		bset	#7,1(a0)
0000DC62                            
0000DC62                            loc_D726:
0000DC62 5446                       		addq.w	#2,d6
0000DC64 5554                       		subq.w	#2,(a4)
0000DC66 6600 FF46                  		bne.w	loc_D672
0000DC6A                            
0000DC6A                            loc_D72E:
0000DC6A 49EC 0080                  		lea	$80(a4),a4
0000DC6E 51CF FF36                  		dbf	d7,loc_D66A
0000DC72 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DC76 0C05 0050                  		cmpi.b	#$50,d5
0000DC7A 6700                       		beq.s	loc_D748
0000DC7C 24BC 0000 0000             		move.l	#0,(a2)
0000DC82 4E75                       		rts	
0000DC84                            ; ===========================================================================
0000DC84                            
0000DC84                            loc_D748:
0000DC84 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DC8A 4E75                       		rts	
0000DC8C                            ; End of function BuildSprites
0000DC8C                            
0000DC8C                            
0000DC8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC8C                            
0000DC8C                            
0000DC8C                            sub_D750:				; XREF: BuildSprites
0000DC8C 3668 0002                  		movea.w	2(a0),a3
0000DC90 0804 0000                  		btst	#0,d4
0000DC94 6600                       		bne.s	loc_D796
0000DC96 0804 0001                  		btst	#1,d4
0000DC9A 6600 0000                  		bne.w	loc_D7E4
0000DC9E                            ; End of function sub_D750
0000DC9E                            
0000DC9E                            
0000DC9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC9E                            
0000DC9E                            
0000DC9E                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DC9E 0C05 0050                  		cmpi.b	#$50,d5
0000DCA2 6700                       		beq.s	locret_D794
0000DCA4 1019                       		move.b	(a1)+,d0
0000DCA6 4880                       		ext.w	d0
0000DCA8 D042                       		add.w	d2,d0
0000DCAA 34C0                       		move.w	d0,(a2)+
0000DCAC 14D9                       		move.b	(a1)+,(a2)+
0000DCAE 5205                       		addq.b	#1,d5
0000DCB0 14C5                       		move.b	d5,(a2)+
0000DCB2 1019                       		move.b	(a1)+,d0
0000DCB4 E148                       		lsl.w	#8,d0
0000DCB6 1019                       		move.b	(a1)+,d0
0000DCB8 D04B                       		add.w	a3,d0
0000DCBA 34C0                       		move.w	d0,(a2)+
0000DCBC 1019                       		move.b	(a1)+,d0
0000DCBE 4880                       		ext.w	d0
0000DCC0 D043                       		add.w	d3,d0
0000DCC2 0240 01FF                  		andi.w	#$1FF,d0
0000DCC6 6600                       		bne.s	loc_D78E
0000DCC8 5240                       		addq.w	#1,d0
0000DCCA                            
0000DCCA                            loc_D78E:
0000DCCA 34C0                       		move.w	d0,(a2)+
0000DCCC 51C9 FFD0                  		dbf	d1,sub_D762
0000DCD0                            
0000DCD0                            locret_D794:
0000DCD0 4E75                       		rts	
0000DCD2                            ; End of function sub_D762
0000DCD2                            
0000DCD2                            ; ===========================================================================
0000DCD2                            
0000DCD2                            loc_D796:
0000DCD2 0804 0001                  		btst	#1,d4
0000DCD6 6600 0000                  		bne.w	loc_D82A
0000DCDA                            
0000DCDA                            loc_D79E:
0000DCDA 0C05 0050                  		cmpi.b	#$50,d5
0000DCDE 6700                       		beq.s	locret_D7E2
0000DCE0 1019                       		move.b	(a1)+,d0
0000DCE2 4880                       		ext.w	d0
0000DCE4 D042                       		add.w	d2,d0
0000DCE6 34C0                       		move.w	d0,(a2)+
0000DCE8 1819                       		move.b	(a1)+,d4
0000DCEA 14C4                       		move.b	d4,(a2)+
0000DCEC 5205                       		addq.b	#1,d5
0000DCEE 14C5                       		move.b	d5,(a2)+
0000DCF0 1019                       		move.b	(a1)+,d0
0000DCF2 E148                       		lsl.w	#8,d0
0000DCF4 1019                       		move.b	(a1)+,d0
0000DCF6 D04B                       		add.w	a3,d0
0000DCF8 0A40 0800                  		eori.w	#$800,d0
0000DCFC 34C0                       		move.w	d0,(a2)+
0000DCFE 1019                       		move.b	(a1)+,d0
0000DD00 4880                       		ext.w	d0
0000DD02 4440                       		neg.w	d0
0000DD04 D804                       		add.b	d4,d4
0000DD06 0244 0018                  		andi.w	#$18,d4
0000DD0A 5044                       		addq.w	#8,d4
0000DD0C 9044                       		sub.w	d4,d0
0000DD0E D043                       		add.w	d3,d0
0000DD10 0240 01FF                  		andi.w	#$1FF,d0
0000DD14 6600                       		bne.s	loc_D7DC
0000DD16 5240                       		addq.w	#1,d0
0000DD18                            
0000DD18                            loc_D7DC:
0000DD18 34C0                       		move.w	d0,(a2)+
0000DD1A 51C9 FFBE                  		dbf	d1,loc_D79E
0000DD1E                            
0000DD1E                            locret_D7E2:
0000DD1E 4E75                       		rts	
0000DD20                            ; ===========================================================================
0000DD20                            
0000DD20                            loc_D7E4:				; XREF: sub_D750
0000DD20 0C05 0050                  		cmpi.b	#$50,d5
0000DD24 6700                       		beq.s	locret_D828
0000DD26 1019                       		move.b	(a1)+,d0
0000DD28 1811                       		move.b	(a1),d4
0000DD2A 4880                       		ext.w	d0
0000DD2C 4440                       		neg.w	d0
0000DD2E E70C                       		lsl.b	#3,d4
0000DD30 0244 0018                  		andi.w	#$18,d4
0000DD34 5044                       		addq.w	#8,d4
0000DD36 9044                       		sub.w	d4,d0
0000DD38 D042                       		add.w	d2,d0
0000DD3A 34C0                       		move.w	d0,(a2)+
0000DD3C 14D9                       		move.b	(a1)+,(a2)+
0000DD3E 5205                       		addq.b	#1,d5
0000DD40 14C5                       		move.b	d5,(a2)+
0000DD42 1019                       		move.b	(a1)+,d0
0000DD44 E148                       		lsl.w	#8,d0
0000DD46 1019                       		move.b	(a1)+,d0
0000DD48 D04B                       		add.w	a3,d0
0000DD4A 0A40 1000                  		eori.w	#$1000,d0
0000DD4E 34C0                       		move.w	d0,(a2)+
0000DD50 1019                       		move.b	(a1)+,d0
0000DD52 4880                       		ext.w	d0
0000DD54 D043                       		add.w	d3,d0
0000DD56 0240 01FF                  		andi.w	#$1FF,d0
0000DD5A 6600                       		bne.s	loc_D822
0000DD5C 5240                       		addq.w	#1,d0
0000DD5E                            
0000DD5E                            loc_D822:
0000DD5E 34C0                       		move.w	d0,(a2)+
0000DD60 51C9 FFBE                  		dbf	d1,loc_D7E4
0000DD64                            
0000DD64                            locret_D828:
0000DD64 4E75                       		rts	
0000DD66                            ; ===========================================================================
0000DD66                            
0000DD66                            loc_D82A:
0000DD66 0C05 0050                  		cmpi.b	#$50,d5
0000DD6A 6700                       		beq.s	locret_D87C
0000DD6C 1019                       		move.b	(a1)+,d0
0000DD6E 1811                       		move.b	(a1),d4
0000DD70 4880                       		ext.w	d0
0000DD72 4440                       		neg.w	d0
0000DD74 E70C                       		lsl.b	#3,d4
0000DD76 0244 0018                  		andi.w	#$18,d4
0000DD7A 5044                       		addq.w	#8,d4
0000DD7C 9044                       		sub.w	d4,d0
0000DD7E D042                       		add.w	d2,d0
0000DD80 34C0                       		move.w	d0,(a2)+
0000DD82 1819                       		move.b	(a1)+,d4
0000DD84 14C4                       		move.b	d4,(a2)+
0000DD86 5205                       		addq.b	#1,d5
0000DD88 14C5                       		move.b	d5,(a2)+
0000DD8A 1019                       		move.b	(a1)+,d0
0000DD8C E148                       		lsl.w	#8,d0
0000DD8E 1019                       		move.b	(a1)+,d0
0000DD90 D04B                       		add.w	a3,d0
0000DD92 0A40 1800                  		eori.w	#$1800,d0
0000DD96 34C0                       		move.w	d0,(a2)+
0000DD98 1019                       		move.b	(a1)+,d0
0000DD9A 4880                       		ext.w	d0
0000DD9C 4440                       		neg.w	d0
0000DD9E D804                       		add.b	d4,d4
0000DDA0 0244 0018                  		andi.w	#$18,d4
0000DDA4 5044                       		addq.w	#8,d4
0000DDA6 9044                       		sub.w	d4,d0
0000DDA8 D043                       		add.w	d3,d0
0000DDAA 0240 01FF                  		andi.w	#$1FF,d0
0000DDAE 6600                       		bne.s	loc_D876
0000DDB0 5240                       		addq.w	#1,d0
0000DDB2                            
0000DDB2                            loc_D876:
0000DDB2 34C0                       		move.w	d0,(a2)+
0000DDB4 51C9 FFB0                  		dbf	d1,loc_D82A
0000DDB8                            
0000DDB8                            locret_D87C:
0000DDB8 4E75                       		rts	
0000DDBA                            ; ---------------------------------------------------------------------------
0000DDBA                            ; Subroutine to	check if an object is on the screen
0000DDBA                            ; ---------------------------------------------------------------------------
0000DDBA                            
0000DDBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDBA                            
0000DDBA                            
0000DDBA                            ChkObjOnScreen:
0000DDBA 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000DDBE 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000DDC2 6B00                       		bmi.s	NotOnScreen
0000DDC4 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000DDC8 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DDCA                            
0000DDCA 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000DDCE 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000DDD2 6B00                       		bmi.s	NotOnScreen
0000DDD4 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000DDD8 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DDDA                            
0000DDDA 7000                       		moveq	#0,d0		; set flag to 0
0000DDDC 4E75                       		rts	
0000DDDE                            ; ===========================================================================
0000DDDE                            
0000DDDE                            NotOnScreen:				; XREF: ChkObjOnScreen
0000DDDE 7001                       		moveq	#1,d0		; set flag to 1
0000DDE0 4E75                       		rts	
0000DDE2                            ; End of function ChkObjOnScreen
0000DDE2                            
0000DDE2                            
0000DDE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDE2                            
0000DDE2                            
0000DDE2                            ChkObjOnScreen2:
0000DDE2 7200                       		moveq	#0,d1
0000DDE4 1228 0019                  		move.b	$19(a0),d1
0000DDE8 3028 0008                  		move.w	8(a0),d0
0000DDEC 9078 F700                  		sub.w	($FFFFF700).w,d0
0000DDF0 D041                       		add.w	d1,d0
0000DDF2 6B00                       		bmi.s	NotOnScreen2
0000DDF4 D241                       		add.w	d1,d1
0000DDF6 9041                       		sub.w	d1,d0
0000DDF8 0C40 0140                  		cmpi.w	#320,d0
0000DDFC 6C00                       		bge.s	NotOnScreen2
0000DDFE                            
0000DDFE 3228 000C                  		move.w	$C(a0),d1
0000DE02 9278 F704                  		sub.w	($FFFFF704).w,d1
0000DE06 6B00                       		bmi.s	NotOnScreen2
0000DE08 0C41 00E0                  		cmpi.w	#224,d1
0000DE0C 6C00                       		bge.s	NotOnScreen2
0000DE0E                            
0000DE0E 7000                       		moveq	#0,d0
0000DE10 4E75                       		rts	
0000DE12                            ; ===========================================================================
0000DE12                            
0000DE12                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000DE12 7001                       		moveq	#1,d0
0000DE14 4E75                       		rts	
0000DE16                            ; End of function ChkObjOnScreen2
0000DE16                            
0000DE16                            ; ---------------------------------------------------------------------------
0000DE16                            ; Subroutine to	load a level's objects
0000DE16                            ; ---------------------------------------------------------------------------
0000DE16                            
0000DE16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE16                            
0000DE16                            
0000DE16                            ObjPosLoad:				; XREF: Level; et al
0000DE16 7000                       		moveq	#0,d0
0000DE18 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000DE1C 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000DE20 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000DE24                            ; End of function ObjPosLoad
0000DE24                            
0000DE24                            ; ===========================================================================
0000DE24 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000DE26 0000                       		dc.w OPL_Next-OPL_Index
0000DE28                            ; ===========================================================================
0000DE28                            
0000DE28                            OPL_Main:				; XREF: OPL_Index
0000DE28 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000DE2C 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000DE30 ED08                       		lsl.b	#6,d0
0000DE32 E848                       		lsr.w	#4,d0
0000DE34 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000DE3A 2248                       		movea.l	a0,a1
0000DE3C D0F0 0000                  		adda.w	(a0,d0.w),a0
0000DE40 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DE44 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DE48 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000DE4C 21C9 F778                  		move.l	a1,($FFFFF778).w
0000DE50 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000DE54 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DE58 34FC 0101                  		move.w	#$101,(a2)+
0000DE5C 303C 005E                  		move.w	#$5E,d0
0000DE60                            
0000DE60                            OPL_ClrList:
0000DE60 429A                       		clr.l	(a2)+
0000DE62 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000DE66                            
0000DE66 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DE6A 7400                       		moveq	#0,d2
0000DE6C 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DE70 0446 0080                  		subi.w	#$80,d6
0000DE74 6400                       		bcc.s	loc_D93C
0000DE76 7C00                       		moveq	#0,d6
0000DE78                            
0000DE78                            loc_D93C:
0000DE78 0246 FF80                  		andi.w	#$FF80,d6
0000DE7C 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DE80                            
0000DE80                            loc_D944:
0000DE80 BC50                       		cmp.w	(a0),d6
0000DE82 6300                       		bls.s	loc_D956
0000DE84 4A28 0004                  		tst.b	4(a0)
0000DE88 6A00                       		bpl.s	loc_D952
0000DE8A 1412                       		move.b	(a2),d2
0000DE8C 5212                       		addq.b	#1,(a2)
0000DE8E                            
0000DE8E                            loc_D952:
0000DE8E 5C48                       		addq.w	#6,a0
0000DE90 60EE                       		bra.s	loc_D944
0000DE92                            ; ===========================================================================
0000DE92                            
0000DE92                            loc_D956:
0000DE92 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DE96 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DE9A 0446 0080                  		subi.w	#$80,d6
0000DE9E 6500                       		bcs.s	loc_D976
0000DEA0                            
0000DEA0                            loc_D964:
0000DEA0 BC50                       		cmp.w	(a0),d6
0000DEA2 6300                       		bls.s	loc_D976
0000DEA4 4A28 0004                  		tst.b	4(a0)
0000DEA8 6A00                       		bpl.s	loc_D972
0000DEAA 522A 0001                  		addq.b	#1,1(a2)
0000DEAE                            
0000DEAE                            loc_D972:
0000DEAE 5C48                       		addq.w	#6,a0
0000DEB0 60EE                       		bra.s	loc_D964
0000DEB2                            ; ===========================================================================
0000DEB2                            
0000DEB2                            loc_D976:
0000DEB2 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DEB6 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000DEBC                            
0000DEBC                            OPL_Next:				; XREF: OPL_Index
0000DEBC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DEC0 7400                       		moveq	#0,d2
0000DEC2 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DEC6 0246 FF80                  		andi.w	#$FF80,d6
0000DECA BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000DECE 6700 0000                  		beq.w	locret_DA3A
0000DED2 6C00                       		bge.s	loc_D9F6
0000DED4 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DED8 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DEDC 0446 0080                  		subi.w	#$80,d6
0000DEE0 6500                       		bcs.s	loc_D9D2
0000DEE2                            
0000DEE2                            loc_D9A6:
0000DEE2 BC68 FFFA                  		cmp.w	-6(a0),d6
0000DEE6 6C00                       		bge.s	loc_D9D2
0000DEE8 5D48                       		subq.w	#6,a0
0000DEEA 4A28 0004                  		tst.b	4(a0)
0000DEEE 6A00                       		bpl.s	loc_D9BC
0000DEF0 532A 0001                  		subq.b	#1,1(a2)
0000DEF4 142A 0001                  		move.b	1(a2),d2
0000DEF8                            
0000DEF8                            loc_D9BC:
0000DEF8 6100 0000                  		bsr.w	loc_DA3C
0000DEFC 6600                       		bne.s	loc_D9C6
0000DEFE 5D48                       		subq.w	#6,a0
0000DF00 60E0                       		bra.s	loc_D9A6
0000DF02                            ; ===========================================================================
0000DF02                            
0000DF02                            loc_D9C6:
0000DF02 4A28 0004                  		tst.b	4(a0)
0000DF06 6A00                       		bpl.s	loc_D9D0
0000DF08 522A 0001                  		addq.b	#1,1(a2)
0000DF0C                            
0000DF0C                            loc_D9D0:
0000DF0C 5C48                       		addq.w	#6,a0
0000DF0E                            
0000DF0E                            loc_D9D2:
0000DF0E 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DF12 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DF16 0646 0300                  		addi.w	#$300,d6
0000DF1A                            
0000DF1A                            loc_D9DE:
0000DF1A BC68 FFFA                  		cmp.w	-6(a0),d6
0000DF1E 6E00                       		bgt.s	loc_D9F0
0000DF20 4A28 FFFE                  		tst.b	-2(a0)
0000DF24 6A00                       		bpl.s	loc_D9EC
0000DF26 5312                       		subq.b	#1,(a2)
0000DF28                            
0000DF28                            loc_D9EC:
0000DF28 5D48                       		subq.w	#6,a0
0000DF2A 60EE                       		bra.s	loc_D9DE
0000DF2C                            ; ===========================================================================
0000DF2C                            
0000DF2C                            loc_D9F0:
0000DF2C 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DF30 4E75                       		rts	
0000DF32                            ; ===========================================================================
0000DF32                            
0000DF32                            loc_D9F6:
0000DF32 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DF36 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DF3A 0646 0280                  		addi.w	#$280,d6
0000DF3E                            
0000DF3E                            loc_DA02:
0000DF3E BC50                       		cmp.w	(a0),d6
0000DF40 6300                       		bls.s	loc_DA16
0000DF42 4A28 0004                  		tst.b	4(a0)
0000DF46 6A00                       		bpl.s	loc_DA10
0000DF48 1412                       		move.b	(a2),d2
0000DF4A 5212                       		addq.b	#1,(a2)
0000DF4C                            
0000DF4C                            loc_DA10:
0000DF4C 6100 0000                  		bsr.w	loc_DA3C
0000DF50 67EC                       		beq.s	loc_DA02
0000DF52                            
0000DF52                            loc_DA16:
0000DF52 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DF56 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DF5A 0446 0300                  		subi.w	#$300,d6
0000DF5E 6500                       		bcs.s	loc_DA36
0000DF60                            
0000DF60                            loc_DA24:
0000DF60 BC50                       		cmp.w	(a0),d6
0000DF62 6300                       		bls.s	loc_DA36
0000DF64 4A28 0004                  		tst.b	4(a0)
0000DF68 6A00                       		bpl.s	loc_DA32
0000DF6A 522A 0001                  		addq.b	#1,1(a2)
0000DF6E                            
0000DF6E                            loc_DA32:
0000DF6E 5C48                       		addq.w	#6,a0
0000DF70 60EE                       		bra.s	loc_DA24
0000DF72                            ; ===========================================================================
0000DF72                            
0000DF72                            loc_DA36:
0000DF72 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DF76                            
0000DF76                            locret_DA3A:
0000DF76 4E75                       		rts	
0000DF78                            ; ===========================================================================
0000DF78                            
0000DF78                            loc_DA3C:
0000DF78 4A28 0004                  		tst.b	4(a0)
0000DF7C 6A00                       		bpl.s	OPL_MakeItem
0000DF7E 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000DF84 6700                       		beq.s	OPL_MakeItem
0000DF86 5C48                       		addq.w	#6,a0
0000DF88 7000                       		moveq	#0,d0
0000DF8A 4E75                       		rts	
0000DF8C                            ; ===========================================================================
0000DF8C                            
0000DF8C                            OPL_MakeItem:
0000DF8C 6100 0000                  		bsr.w	SingleObjLoad
0000DF90 6600                       		bne.s	locret_DA8A
0000DF92 3358 0008                  		move.w	(a0)+,8(a1)
0000DF96 3018                       		move.w	(a0)+,d0
0000DF98 3200                       		move.w	d0,d1
0000DF9A 0240 0FFF                  		andi.w	#$FFF,d0
0000DF9E 3340 000C                  		move.w	d0,$C(a1)
0000DFA2 E559                       		rol.w	#2,d1
0000DFA4 0201 0003                  		andi.b	#3,d1
0000DFA8 1341 0001                  		move.b	d1,1(a1)
0000DFAC 1341 0022                  		move.b	d1,$22(a1)
0000DFB0 1018                       		move.b	(a0)+,d0
0000DFB2 6A00                       		bpl.s	loc_DA80
0000DFB4 0200 007F                  		andi.b	#$7F,d0
0000DFB8 1342 0023                  		move.b	d2,$23(a1)
0000DFBC                            
0000DFBC                            loc_DA80:
0000DFBC 1280                       		move.b	d0,0(a1)
0000DFBE 1358 0028                  		move.b	(a0)+,$28(a1)
0000DFC2 7000                       		moveq	#0,d0
0000DFC4                            
0000DFC4                            locret_DA8A:
0000DFC4 4E75                       		rts	
0000DFC6                            ; ---------------------------------------------------------------------------
0000DFC6                            ; Single object	loading	subroutine
0000DFC6                            ; ---------------------------------------------------------------------------
0000DFC6                            
0000DFC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFC6                            
0000DFC6                            
0000DFC6                            SingleObjLoad:
0000DFC6 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000DFCA 303C 005F                  		move.w	#$5F,d0
0000DFCE                            
0000DFCE                            loc_DA94:
0000DFCE 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000DFD0 6700                       		beq.s	locret_DAA0	; if yes, branch
0000DFD2 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000DFD6 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000DFDA                            
0000DFDA                            locret_DAA0:
0000DFDA 4E75                       		rts	
0000DFDC                            ; End of function SingleObjLoad
0000DFDC                            
0000DFDC                            
0000DFDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFDC                            
0000DFDC                            
0000DFDC                            SingleObjLoad2:
0000DFDC 2248                       		movea.l	a0,a1
0000DFDE 303C F000                  		move.w	#-$1000,d0
0000DFE2 9048                       		sub.w	a0,d0
0000DFE4 EC48                       		lsr.w	#6,d0
0000DFE6 5340                       		subq.w	#1,d0
0000DFE8 6500                       		bcs.s	locret_DABC
0000DFEA                            
0000DFEA                            loc_DAB0:
0000DFEA 4A11                       		tst.b	(a1)
0000DFEC 6700                       		beq.s	locret_DABC
0000DFEE 43E9 0040                  		lea	$40(a1),a1
0000DFF2 51C8 FFF6                  		dbf	d0,loc_DAB0
0000DFF6                            
0000DFF6                            locret_DABC:
0000DFF6 4E75                       		rts	
0000DFF8                            ; End of function SingleObjLoad2
0000DFF8                            
0000DFF8                            ; ===========================================================================
0000DFF8                            ; ---------------------------------------------------------------------------
0000DFF8                            ; Object 41 - springs
0000DFF8                            ; ---------------------------------------------------------------------------
0000DFF8                            
0000DFF8                            Obj41:					; XREF: Obj_Index
0000DFF8 7000                       		moveq	#0,d0
0000DFFA 1028 0024                  		move.b	$24(a0),d0
0000DFFE 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E002 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E006 6100 FB38                  		bsr.w	DisplaySprite
0000E00A 3028 0008                  		move.w	8(a0),d0
0000E00E 0240 FF80                  		andi.w	#$FF80,d0
0000E012 3238 F700                  		move.w	($FFFFF700).w,d1
0000E016 0441 0080                  		subi.w	#$80,d1
0000E01A 0241 FF80                  		andi.w	#$FF80,d1
0000E01E 9041                       		sub.w	d1,d0
0000E020 0C40 0280                  		cmpi.w	#$280,d0
0000E024 6200 FB56                  		bhi.w	DeleteObject
0000E028 4E75                       		rts	
0000E02A                            ; ===========================================================================
0000E02A 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E02C 0000                       		dc.w Obj41_Up-Obj41_Index
0000E02E 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E030 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E032 0000                       		dc.w Obj41_LR-Obj41_Index
0000E034 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E036 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E038 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E03A 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E03C 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E03E                            
0000E03E F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E040 F600                       		dc.w -$A00		; power	of yellow spring
0000E042                            ; ===========================================================================
0000E042                            
0000E042                            Obj41_Main:				; XREF: Obj41_Index
0000E042 5428 0024                  		addq.b	#2,$24(a0)
0000E046 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E04E 317C 0523 0002             		move.w	#$523,2(a0)
0000E054 0028 0004 0001             		ori.b	#4,1(a0)
0000E05A 117C 0010 0019             		move.b	#$10,$19(a0)
0000E060 117C 0004 0018             		move.b	#4,$18(a0)
0000E066 1028 0028                  		move.b	$28(a0),d0
0000E06A 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E06E 6700                       		beq.s	loc_DB54	; if not, branch
0000E070 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E076 117C 0001 001C             		move.b	#1,$1C(a0)
0000E07C 117C 0003 001A             		move.b	#3,$1A(a0)
0000E082 317C 0533 0002             		move.w	#$533,2(a0)
0000E088 117C 0008 0019             		move.b	#8,$19(a0)
0000E08E                            
0000E08E                            loc_DB54:
0000E08E 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E092 6700                       		beq.s	loc_DB66	; if not, branch
0000E094 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E09A 08E8 0001 0022             		bset	#1,$22(a0)
0000E0A0                            
0000E0A0                            loc_DB66:
0000E0A0 0800 0001                  		btst	#1,d0
0000E0A4 6700                       		beq.s	loc_DB72
0000E0A6 08E8 0005 0002             		bset	#5,2(a0)
0000E0AC                            
0000E0AC                            loc_DB72:
0000E0AC 0240 000F                  		andi.w	#$F,d0
0000E0B0 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E0B6 4E75                       		rts	
0000E0B8                            ; ===========================================================================
0000E0B8                            
0000E0B8                            Obj41_Up:				; XREF: Obj41_Index
0000E0B8 323C 001B                  		move.w	#$1B,d1
0000E0BC 343C 0008                  		move.w	#8,d2
0000E0C0 363C 0010                  		move.w	#$10,d3
0000E0C4 3828 0008                  		move.w	8(a0),d4
0000E0C8 6100 0000                  		bsr.w	SolidObject
0000E0CC 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E0D0 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E0D2 4E75                       		rts	
0000E0D4                            ; ===========================================================================
0000E0D4                            
0000E0D4                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E0D4 5428 0024                  		addq.b	#2,$24(a0)
0000E0D8 5069 000C                  		addq.w	#8,$C(a1)
0000E0DC 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E0E2 08E9 0001 0022             		bset	#1,$22(a1)
0000E0E8 08A9 0003 0022             		bclr	#3,$22(a1)
0000E0EE 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E0F4 137C 0002 0024             		move.b	#2,$24(a1)
0000E0FA 08A8 0003 0022             		bclr	#3,$22(a0)
0000E100 4228 0025                  		clr.b	$25(a0)
0000E104 303C 00CC                  		move.w	#$CC,d0
0000E108 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E10E                            
0000E10E                            Obj41_AniUp:				; XREF: Obj41_Index
0000E10E 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E114 6000 CAFA                  		bra.w	AnimateSprite
0000E118                            ; ===========================================================================
0000E118                            
0000E118                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E118 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E11E 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E122 4E75                       		rts	
0000E124                            ; ===========================================================================
0000E124                            
0000E124                            Obj41_LR:				; XREF: Obj41_Index
0000E124 323C 0013                  		move.w	#$13,d1
0000E128 343C 000E                  		move.w	#$E,d2
0000E12C 363C 000F                  		move.w	#$F,d3
0000E130 3828 0008                  		move.w	8(a0),d4
0000E134 6100 0000                  		bsr.w	SolidObject
0000E138 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E13E 6600                       		bne.s	loc_DC0C
0000E140 117C 0008 0024             		move.b	#8,$24(a0)
0000E146                            
0000E146                            loc_DC0C:
0000E146 0828 0005 0022             		btst	#5,$22(a0)
0000E14C 6600                       		bne.s	Obj41_BounceLR
0000E14E 4E75                       		rts	
0000E150                            ; ===========================================================================
0000E150                            
0000E150                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E150 5428 0024                  		addq.b	#2,$24(a0)
0000E154 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E15A 5069 0008                  		addq.w	#8,8(a1)
0000E15E 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E164 6600                       		bne.s	loc_DC36	; if yes, branch
0000E166 0469 0010 0008             		subi.w	#$10,8(a1)
0000E16C 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E170                            
0000E170                            loc_DC36:
0000E170 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E176 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E17C 0869 0000 0022             		bchg	#0,$22(a1)
0000E182 0829 0002 0022             		btst	#2,$22(a1)
0000E188 6600                       		bne.s	loc_DC56
0000E18A 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E190                            
0000E190                            loc_DC56:
0000E190 08A8 0005 0022             		bclr	#5,$22(a0)
0000E196 08A9 0005 0022             		bclr	#5,$22(a1)
0000E19C 303C 00CC                  		move.w	#$CC,d0
0000E1A0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E1A6                            
0000E1A6                            Obj41_AniLR:				; XREF: Obj41_Index
0000E1A6 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E1AC 6000 CA62                  		bra.w	AnimateSprite
0000E1B0                            ; ===========================================================================
0000E1B0                            
0000E1B0                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E1B0 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E1B6 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E1BA 4E75                       		rts	
0000E1BC                            ; ===========================================================================
0000E1BC                            
0000E1BC                            Obj41_Dwn:				; XREF: Obj41_Index
0000E1BC 323C 001B                  		move.w	#$1B,d1
0000E1C0 343C 0008                  		move.w	#8,d2
0000E1C4 363C 0010                  		move.w	#$10,d3
0000E1C8 3828 0008                  		move.w	8(a0),d4
0000E1CC 6100 0000                  		bsr.w	SolidObject
0000E1D0 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E1D6 6600                       		bne.s	loc_DCA4
0000E1D8 117C 000E 0024             		move.b	#$E,$24(a0)
0000E1DE                            
0000E1DE                            loc_DCA4:
0000E1DE 4A28 0025                  		tst.b	$25(a0)
0000E1E2 6600                       		bne.s	locret_DCAE
0000E1E4 4A44                       		tst.w	d4
0000E1E6 6B00                       		bmi.s	Obj41_BounceDwn
0000E1E8                            
0000E1E8                            locret_DCAE:
0000E1E8 4E75                       		rts	
0000E1EA                            ; ===========================================================================
0000E1EA                            
0000E1EA                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E1EA 5428 0024                  		addq.b	#2,$24(a0)
0000E1EE 5169 000C                  		subq.w	#8,$C(a1)
0000E1F2 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E1F8 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E1FC 08E9 0001 0022             		bset	#1,$22(a1)
0000E202 08A9 0003 0022             		bclr	#3,$22(a1)
0000E208 137C 0002 0024             		move.b	#2,$24(a1)
0000E20E 08A8 0003 0022             		bclr	#3,$22(a0)
0000E214 4228 0025                  		clr.b	$25(a0)
0000E218 303C 00CC                  		move.w	#$CC,d0
0000E21C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E222                            
0000E222                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E222 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E228 6000 C9E6                  		bra.w	AnimateSprite
0000E22C                            ; ===========================================================================
0000E22C                            
0000E22C                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E22C 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E232 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E236 4E75                       		rts	
0000E238                            ; ===========================================================================
0000E238                            Ani_obj41:
0000E238                            	include "_anim\obj41.asm"
0000E238                            ; ---------------------------------------------------------------------------
0000E238                            ; Animation script - springs
0000E238                            ; ---------------------------------------------------------------------------
0000E238 0000                       		dc.w byte_DD02-Ani_obj41
0000E23A 0000                       		dc.w byte_DD0E-Ani_obj41
0000E23C 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E248 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E254                            		even
0000E254                            		even
0000E254                            
0000E254                            ; ---------------------------------------------------------------------------
0000E254                            ; Sprite mappings - springs
0000E254                            ; ---------------------------------------------------------------------------
0000E254                            Map_obj41:
0000E254                            	include "_maps\obj41.asm"
0000E254                            ; ---------------------------------------------------------------------------
0000E254                            ; Sprite mappings - springs
0000E254                            ; ---------------------------------------------------------------------------
0000E254 0000                       		dc.w byte_DD26-Map_obj41
0000E256 0000                       		dc.w byte_DD31-Map_obj41
0000E258 0000                       		dc.w byte_DD37-Map_obj41
0000E25A 0000                       		dc.w byte_DD47-Map_obj41
0000E25C 0000                       		dc.w byte_DD4D-Map_obj41
0000E25E 0000                       		dc.w byte_DD53-Map_obj41
0000E260 02                         byte_DD26:	dc.b 2
0000E261 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E266 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E26B 01                         byte_DD31:	dc.b 1
0000E26C 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E271 03                         byte_DD37:	dc.b 3
0000E272 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E277 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E27C 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E281 01                         byte_DD47:	dc.b 1
0000E282 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E287 01                         byte_DD4D:	dc.b 1
0000E288 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E28D 04                         byte_DD53:	dc.b 4
0000E28E F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E293 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E298 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E29D 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E2A2                            		even
0000E2A2                            		even
0000E2A2                            
0000E2A2                            ; ===========================================================================
0000E2A2                            ; ---------------------------------------------------------------------------
0000E2A2                            ; Object 42 - Newtron enemy (GHZ)
0000E2A2                            ; ---------------------------------------------------------------------------
0000E2A2                            
0000E2A2                            Obj42:					; XREF: Obj_Index
0000E2A2 7000                       		moveq	#0,d0
0000E2A4 1028 0024                  		move.b	$24(a0),d0
0000E2A8 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E2AC 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E2B0                            ; ===========================================================================
0000E2B0 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E2B2 0000                       		dc.w Obj42_Action-Obj42_Index
0000E2B4 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E2B6                            ; ===========================================================================
0000E2B6                            
0000E2B6                            Obj42_Main:				; XREF: Obj42_Index
0000E2B6 5428 0024                  		addq.b	#2,$24(a0)
0000E2BA 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E2C2 317C 049B 0002             		move.w	#$49B,2(a0)
0000E2C8 117C 0004 0001             		move.b	#4,1(a0)
0000E2CE 117C 0004 0018             		move.b	#4,$18(a0)
0000E2D4 117C 0014 0019             		move.b	#$14,$19(a0)
0000E2DA 117C 0010 0016             		move.b	#$10,$16(a0)
0000E2E0 117C 0008 0017             		move.b	#8,$17(a0)
0000E2E6                            
0000E2E6                            Obj42_Action:				; XREF: Obj42_Index
0000E2E6 7000                       		moveq	#0,d0
0000E2E8 1028 0025                  		move.b	$25(a0),d0
0000E2EC 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E2F0 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E2F4 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E2FA 6100 C914                  		bsr.w	AnimateSprite
0000E2FE 6000 0000                  		bra.w	MarkObjGone
0000E302                            ; ===========================================================================
0000E302 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E304 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E306 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E308 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E30A 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E30C                            ; ===========================================================================
0000E30C                            
0000E30C                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E30C 08E8 0000 0022             		bset	#0,$22(a0)
0000E312 3038 D008                  		move.w	($FFFFD008).w,d0
0000E316 9068 0008                  		sub.w	8(a0),d0
0000E31A 6400                       		bcc.s	loc_DDEA
0000E31C 4440                       		neg.w	d0
0000E31E 08A8 0000 0022             		bclr	#0,$22(a0)
0000E324                            
0000E324                            loc_DDEA:
0000E324 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E328 6400                       		bcc.s	locret_DE12	; if not, branch
0000E32A 5428 0025                  		addq.b	#2,$25(a0)
0000E32E 117C 0001 001C             		move.b	#1,$1C(a0)
0000E334 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E338 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E33A 317C 249B 0002             		move.w	#$249B,2(a0)
0000E340 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E346 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E34C                            
0000E34C                            locret_DE12:
0000E34C 4E75                       		rts	
0000E34E                            ; ===========================================================================
0000E34E                            
0000E34E                            Obj42_Type00:				; XREF: Obj42_Index2
0000E34E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E354 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E356 08E8 0000 0022             		bset	#0,$22(a0)
0000E35C 3038 D008                  		move.w	($FFFFD008).w,d0
0000E360 9068 0008                  		sub.w	8(a0),d0
0000E364 6400                       		bcc.s	locret_DE32
0000E366 08A8 0000 0022             		bclr	#0,$22(a0)
0000E36C                            
0000E36C                            locret_DE32:
0000E36C 4E75                       		rts	
0000E36E                            ; ===========================================================================
0000E36E                            
0000E36E                            Obj42_Fall:				; XREF: Obj42_Type00
0000E36E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E374 6600                       		bne.s	loc_DE42
0000E376 117C 000C 0020             		move.b	#$C,$20(a0)
0000E37C                            
0000E37C                            loc_DE42:
0000E37C 6100 F770                  		bsr.w	ObjectFall
0000E380 6100 0000                  		bsr.w	ObjHitFloor
0000E384 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E386 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E388 D368 000C                  		add.w	d1,$C(a0)
0000E38C 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E392 5428 0025                  		addq.b	#2,$25(a0)
0000E396 117C 0002 001C             		move.b	#2,$1C(a0)
0000E39C 0828 0005 0002             		btst	#5,2(a0)
0000E3A2 6700                       		beq.s	Obj42_Move
0000E3A4 5228 001C                  		addq.b	#1,$1C(a0)
0000E3A8                            
0000E3A8                            Obj42_Move:
0000E3A8 117C 000D 0020             		move.b	#$D,$20(a0)
0000E3AE 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E3B4 0828 0000 0022             		btst	#0,$22(a0)
0000E3BA 6600                       		bne.s	locret_DE86
0000E3BC 4468 0010                  		neg.w	$10(a0)
0000E3C0                            
0000E3C0                            locret_DE86:
0000E3C0 4E75                       		rts	
0000E3C2                            ; ===========================================================================
0000E3C2                            
0000E3C2                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E3C2 6100 F756                  		bsr.w	SpeedToPos
0000E3C6 6100 0000                  		bsr.w	ObjHitFloor
0000E3CA 0C41 FFF8                  		cmpi.w	#-8,d1
0000E3CE 6D00                       		blt.s	loc_DEA2
0000E3D0 0C41 000C                  		cmpi.w	#$C,d1
0000E3D4 6C00                       		bge.s	loc_DEA2
0000E3D6 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E3DA 4E75                       		rts	
0000E3DC                            ; ===========================================================================
0000E3DC                            
0000E3DC                            loc_DEA2:
0000E3DC 5428 0025                  		addq.b	#2,$25(a0)
0000E3E0 4E75                       		rts	
0000E3E2                            ; ===========================================================================
0000E3E2                            
0000E3E2                            Obj42_Speed:				; XREF: Obj42_Index2
0000E3E2 6100 F736                  		bsr.w	SpeedToPos
0000E3E6 4E75                       		rts	
0000E3E8                            ; ===========================================================================
0000E3E8                            
0000E3E8                            Obj42_Type01:				; XREF: Obj42_Index2
0000E3E8 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E3EE 6600                       		bne.s	Obj42_FireMissile
0000E3F0 117C 000C 0020             		move.b	#$C,$20(a0)
0000E3F6                            
0000E3F6                            Obj42_FireMissile:
0000E3F6 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E3FC 6600                       		bne.s	locret_DF14
0000E3FE 4A28 0032                  		tst.b	$32(a0)
0000E402 6600                       		bne.s	locret_DF14
0000E404 117C 0001 0032             		move.b	#1,$32(a0)
0000E40A 6100 FBBA                  		bsr.w	SingleObjLoad
0000E40E 6600                       		bne.s	locret_DF14
0000E410 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E414 3368 0008 0008             		move.w	8(a0),8(a1)
0000E41A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E420 5169 000C                  		subq.w	#8,$C(a1)
0000E424 337C 0200 0010             		move.w	#$200,$10(a1)
0000E42A 303C 0014                  		move.w	#$14,d0
0000E42E 0828 0000 0022             		btst	#0,$22(a0)
0000E434 6600                       		bne.s	loc_DF04
0000E436 4440                       		neg.w	d0
0000E438 4469 0010                  		neg.w	$10(a1)
0000E43C                            
0000E43C                            loc_DF04:
0000E43C D169 0008                  		add.w	d0,8(a1)
0000E440 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E446 137C 0001 0028             		move.b	#1,$28(a1)
0000E44C                            
0000E44C                            locret_DF14:
0000E44C 4E75                       		rts	
0000E44E                            ; ===========================================================================
0000E44E                            
0000E44E                            Obj42_Delete:				; XREF: Obj42_Index
0000E44E 6000 F72C                  		bra.w	DeleteObject
0000E452                            ; ===========================================================================
0000E452                            Ani_obj42:
0000E452                            	include "_anim\obj42.asm"
0000E452                            ; ---------------------------------------------------------------------------
0000E452                            ; Animation script - Newtron enemy
0000E452                            ; ---------------------------------------------------------------------------
0000E452 0000                       		dc.w byte_DF24-Ani_obj42
0000E454 0000                       		dc.w byte_DF28-Ani_obj42
0000E456 0000                       		dc.w byte_DF30-Ani_obj42
0000E458 0000                       		dc.w byte_DF34-Ani_obj42
0000E45A 0000                       		dc.w byte_DF38-Ani_obj42
0000E45C 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E460 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E468 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E46C 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E470 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E47A                            		even
0000E47A                            		even
0000E47A                            
0000E47A                            ; ---------------------------------------------------------------------------
0000E47A                            ; Sprite mappings - Newtron enemy (GHZ)
0000E47A                            ; ---------------------------------------------------------------------------
0000E47A                            Map_obj42:
0000E47A                            	include "_maps\obj42.asm"
0000E47A                            ; ---------------------------------------------------------------------------
0000E47A                            ; Sprite mappings - Newtron enemy (GHZ)
0000E47A                            ; ---------------------------------------------------------------------------
0000E47A 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E47E 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E482 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E486 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E48A 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E48E 0000                       		dc.w byte_DFF8-Map_obj42
0000E490 03                         byte_DF58:	dc.b 3
0000E491 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E496 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E49B FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E4A0 03                         byte_DF68:	dc.b 3
0000E4A1 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E4A6 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E4AB FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E4B0 03                         byte_DF78:	dc.b 3
0000E4B1 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E4B6 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E4BB FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E4C0 04                         byte_DF88:	dc.b 4
0000E4C1 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E4C6 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E4CB FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E4D0 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E4D5 03                         byte_DF9D:	dc.b 3
0000E4D6 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E4DB FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E4E0 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E4E5 02                         byte_DFAD:	dc.b 2
0000E4E6 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E4EB F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E4F0 03                         byte_DFB8:	dc.b 3
0000E4F1 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E4F6 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E4FB FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E500 03                         byte_DFC8:	dc.b 3
0000E501 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E506 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E50B FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E510 03                         byte_DFD8:	dc.b 3
0000E511 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E516 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E51B FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E520 03                         byte_DFE8:	dc.b 3
0000E521 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E526 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E52B FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E530 00                         byte_DFF8:	dc.b 0
0000E532 00                         		even
0000E532 00                         		even
0000E532                            
0000E532                            ; ===========================================================================
0000E532                            ; ---------------------------------------------------------------------------
0000E532                            ; Object 43 - Roller enemy (SYZ)
0000E532                            ; ---------------------------------------------------------------------------
0000E532                            
0000E532                            Obj43:					; XREF: Obj_Index
0000E532 7000                       		moveq	#0,d0
0000E534 1028 0024                  		move.b	$24(a0),d0
0000E538 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E53C 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E540                            ; ===========================================================================
0000E540 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E542 0000                       		dc.w Obj43_Action-Obj43_Index
0000E544                            ; ===========================================================================
0000E544                            
0000E544                            Obj43_Main:				; XREF: Obj43_Index
0000E544 117C 000E 0016             		move.b	#$E,$16(a0)
0000E54A 117C 0008 0017             		move.b	#8,$17(a0)
0000E550 6100 F59C                  		bsr.w	ObjectFall
0000E554 6100 0000                  		bsr.w	ObjHitFloor
0000E558 4A41                       		tst.w	d1
0000E55A 6A00                       		bpl.s	locret_E052
0000E55C D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E560 317C 0000 0012             		move.w	#0,$12(a0)
0000E566 5428 0024                  		addq.b	#2,$24(a0)
0000E56A 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E572 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E578 117C 0004 0001             		move.b	#4,1(a0)
0000E57E 117C 0004 0018             		move.b	#4,$18(a0)
0000E584 117C 0010 0019             		move.b	#$10,$19(a0)
0000E58A                            
0000E58A                            locret_E052:
0000E58A 4E75                       		rts	
0000E58C                            ; ===========================================================================
0000E58C                            
0000E58C                            Obj43_Action:				; XREF: Obj43_Index
0000E58C 7000                       		moveq	#0,d0
0000E58E 1028 0025                  		move.b	$25(a0),d0
0000E592 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E596 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E59A 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E5A0 6100 C66E                  		bsr.w	AnimateSprite
0000E5A4 3028 0008                  		move.w	8(a0),d0
0000E5A8 0240 FF80                  		andi.w	#$FF80,d0
0000E5AC 3238 F700                  		move.w	($FFFFF700).w,d1
0000E5B0 0441 0080                  		subi.w	#$80,d1
0000E5B4 0241 FF80                  		andi.w	#$FF80,d1
0000E5B8 9041                       		sub.w	d1,d0
0000E5BA 0C40 0280                  		cmpi.w	#$280,d0
0000E5BE 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E5C2 6000 F57C                  		bra.w	DisplaySprite
0000E5C6                            ; ===========================================================================
0000E5C6                            
0000E5C6                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E5C6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E5CA 7000                       		moveq	#0,d0
0000E5CC 1028 0023                  		move.b	$23(a0),d0
0000E5D0 6700                       		beq.s	Obj43_Delete
0000E5D2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E5D8                            
0000E5D8                            Obj43_Delete:
0000E5D8 6000 F5A2                  		bra.w	DeleteObject
0000E5DC                            ; ===========================================================================
0000E5DC 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E5DE 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E5E0 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E5E2 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E5E4                            ; ===========================================================================
0000E5E4                            
0000E5E4                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E5E4 3038 D008                  		move.w	($FFFFD008).w,d0
0000E5E8 0440 0100                  		subi.w	#$100,d0
0000E5EC 6500                       		bcs.s	loc_E0D2
0000E5EE 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E5F2 6500                       		bcs.s	loc_E0D2
0000E5F4 5828 0025                  		addq.b	#4,$25(a0)
0000E5F8 117C 0002 001C             		move.b	#2,$1C(a0)
0000E5FE 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E604 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E60A                            
0000E60A                            loc_E0D2:
0000E60A 588F                       		addq.l	#4,sp
0000E60C 4E75                       		rts	
0000E60E                            ; ===========================================================================
0000E60E                            
0000E60E                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E60E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E614 6700                       		beq.s	loc_E0F8
0000E616 5368 0030                  		subq.w	#1,$30(a0)
0000E61A 6A00                       		bpl.s	locret_E0F6
0000E61C 117C 0001 001C             		move.b	#1,$1C(a0)
0000E622 317C 0700 0010             		move.w	#$700,$10(a0)
0000E628 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E62E                            
0000E62E                            locret_E0F6:
0000E62E 4E75                       		rts	
0000E630                            ; ===========================================================================
0000E630                            
0000E630                            loc_E0F8:
0000E630 5428 0025                  		addq.b	#2,$25(a0)
0000E634 4E75                       		rts	
0000E636                            ; ===========================================================================
0000E636                            
0000E636                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E636 6100 0000                  		bsr.w	Obj43_Stop
0000E63A 6100 F4DE                  		bsr.w	SpeedToPos
0000E63E 6100 0000                  		bsr.w	ObjHitFloor
0000E642 0C41 FFF8                  		cmpi.w	#-8,d1
0000E646 6D00                       		blt.s	Obj43_Jump
0000E648 0C41 000C                  		cmpi.w	#$C,d1
0000E64C 6C00                       		bge.s	Obj43_Jump
0000E64E D368 000C                  		add.w	d1,$C(a0)
0000E652 4E75                       		rts	
0000E654                            ; ===========================================================================
0000E654                            
0000E654                            Obj43_Jump:
0000E654 5428 0025                  		addq.b	#2,$25(a0)
0000E658 08E8 0000 0032             		bset	#0,$32(a0)
0000E65E 6700                       		beq.s	locret_E12E
0000E660 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E666                            
0000E666                            locret_E12E:
0000E666 4E75                       		rts	
0000E668                            ; ===========================================================================
0000E668                            
0000E668                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E668 6100 F484                  		bsr.w	ObjectFall
0000E66C 4A68 0012                  		tst.w	$12(a0)
0000E670 6B00                       		bmi.s	locret_E150
0000E672 6100 0000                  		bsr.w	ObjHitFloor
0000E676 4A41                       		tst.w	d1
0000E678 6A00                       		bpl.s	locret_E150
0000E67A D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E67E 5528 0025                  		subq.b	#2,$25(a0)
0000E682 317C 0000 0012             		move.w	#0,$12(a0)
0000E688                            
0000E688                            locret_E150:
0000E688 4E75                       		rts	
0000E68A                            
0000E68A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E68A                            
0000E68A                            
0000E68A                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E68A 4A28 0032                  		tst.b	$32(a0)
0000E68E 6B00                       		bmi.s	locret_E188
0000E690 3038 D008                  		move.w	($FFFFD008).w,d0
0000E694 0440 0030                  		subi.w	#$30,d0
0000E698 9068 0008                  		sub.w	8(a0),d0
0000E69C 6400                       		bcc.s	locret_E188
0000E69E 117C 0000 001C             		move.b	#0,$1C(a0)
0000E6A4 117C 000E 0020             		move.b	#$E,$20(a0)
0000E6AA 4268 0010                  		clr.w	$10(a0)
0000E6AE 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E6B4 117C 0002 0025             		move.b	#2,$25(a0)
0000E6BA 08E8 0007 0032             		bset	#7,$32(a0)
0000E6C0                            
0000E6C0                            locret_E188:
0000E6C0 4E75                       		rts	
0000E6C2                            ; End of function Obj43_Stop
0000E6C2                            
0000E6C2                            ; ===========================================================================
0000E6C2                            Ani_obj43:
0000E6C2                            	include "_anim\obj43.asm"
0000E6C2                            ; ---------------------------------------------------------------------------
0000E6C2                            ; Animation script - Roller enemy
0000E6C2                            ; ---------------------------------------------------------------------------
0000E6C2 0000                       		dc.w byte_E190-Ani_obj43
0000E6C4 0000                       		dc.w byte_E196-Ani_obj43
0000E6C6 0000                       		dc.w byte_E19C-Ani_obj43
0000E6C8 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E6CE 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E6D4 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E6DA 00                         		even
0000E6DA 00                         		even
0000E6DA                            
0000E6DA                            ; ---------------------------------------------------------------------------
0000E6DA                            ; Sprite mappings - Roller enemy (SYZ)
0000E6DA                            ; ---------------------------------------------------------------------------
0000E6DA                            Map_obj43:
0000E6DA                            	include "_maps\obj43.asm"
0000E6DA                            Map_61da:
0000E6DA 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000E6DC 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000E6DE 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000E6E0 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000E6E2 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000E6E4 02                         Map_61da_A: 	dc.b $2
0000E6E5 DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000E6EA F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000E6EF 02                         Map_61da_15: 	dc.b $2
0000E6F0 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000E6F5 FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000E6FA 01                         Map_61da_20: 	dc.b $1
0000E6FB F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000E700 01                         Map_61da_26: 	dc.b $1
0000E701 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000E706 01                         Map_61da_2C: 	dc.b $1
0000E707 F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000E70C                            	even
0000E70C                            	even
0000E70C                            
0000E70C                            ; ===========================================================================
0000E70C                            ; ---------------------------------------------------------------------------
0000E70C                            ; Object 44 - walls (GHZ)
0000E70C                            ; ---------------------------------------------------------------------------
0000E70C                            
0000E70C                            Obj44:					; XREF: Obj_Index
0000E70C 7000                       		moveq	#0,d0
0000E70E 1028 0024                  		move.b	$24(a0),d0
0000E712 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E716 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E71A                            ; ===========================================================================
0000E71A 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E71C 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E71E 0000                       		dc.w Obj44_Display-Obj44_Index
0000E720                            ; ===========================================================================
0000E720                            
0000E720                            Obj44_Main:				; XREF: Obj44_Index
0000E720 5428 0024                  		addq.b	#2,$24(a0)
0000E724 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E72C 317C 434C 0002             		move.w	#$434C,2(a0)
0000E732 0028 0004 0001             		ori.b	#4,1(a0)
0000E738 117C 0008 0019             		move.b	#8,$19(a0)
0000E73E 117C 0006 0018             		move.b	#6,$18(a0)
0000E744 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E74A 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E750 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E752 5428 0024                  		addq.b	#2,$24(a0)
0000E756 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E758                            ; ===========================================================================
0000E758                            
0000E758                            Obj44_Solid:				; XREF: Obj44_Index
0000E758 323C 0013                  		move.w	#$13,d1
0000E75C 343C 0028                  		move.w	#$28,d2
0000E760 6100 A714                  		bsr.w	Obj44_SolidWall
0000E764                            
0000E764                            Obj44_Display:				; XREF: Obj44_Index
0000E764 6100 F3DA                  		bsr.w	DisplaySprite
0000E768 3028 0008                  		move.w	8(a0),d0
0000E76C 0240 FF80                  		andi.w	#$FF80,d0
0000E770 3238 F700                  		move.w	($FFFFF700).w,d1
0000E774 0441 0080                  		subi.w	#$80,d1
0000E778 0241 FF80                  		andi.w	#$FF80,d1
0000E77C 9041                       		sub.w	d1,d0
0000E77E 0C40 0280                  		cmpi.w	#$280,d0
0000E782 6200 F3F8                  		bhi.w	DeleteObject
0000E786 4E75                       		rts	
0000E788                            ; ===========================================================================
0000E788                            ; ---------------------------------------------------------------------------
0000E788                            ; Sprite mappings - walls (GHZ)
0000E788                            ; ---------------------------------------------------------------------------
0000E788                            Map_obj44:
0000E788                            	include "_maps\obj44.asm"
0000E788                            ; ---------------------------------------------------------------------------
0000E788                            ; Sprite mappings - walls (GHZ)
0000E788                            ; ---------------------------------------------------------------------------
0000E788 0000                       		dc.w byte_E256-Map_obj44
0000E78A 0000                       		dc.w byte_E26B-Map_obj44
0000E78C 0000                       		dc.w byte_E280-Map_obj44
0000E78E 04                         byte_E256:	dc.b 4
0000E78F E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E794 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E799 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E79E 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E7A3 04                         byte_E26B:	dc.b 4
0000E7A4 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E7A9 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E7AE 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E7B3 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E7B8 04                         byte_E280:	dc.b 4
0000E7B9 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E7BE F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E7C3 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E7C8 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E7CE 00                         		even
0000E7CE 00                         		even
0000E7CE                            
0000E7CE                            ; ===========================================================================
0000E7CE                            ; ---------------------------------------------------------------------------
0000E7CE                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E7CE                            ; ---------------------------------------------------------------------------
0000E7CE                            
0000E7CE                            Obj13:					; XREF: Obj_Index
0000E7CE 7000                       		moveq	#0,d0
0000E7D0 1028 0024                  		move.b	$24(a0),d0
0000E7D4 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E7D8 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E7DC 6000 0000                  		bra.w	Obj14_ChkDel
0000E7E0                            ; ===========================================================================
0000E7E0 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000E7E2 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000E7E4                            ; ---------------------------------------------------------------------------
0000E7E4                            ;
0000E7E4                            ; Lava ball production rates
0000E7E4                            ;
0000E7E4 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000E7EA                            ; ===========================================================================
0000E7EA                            
0000E7EA                            Obj13_Main:				; XREF: Obj13_Index
0000E7EA 5428 0024                  		addq.b	#2,$24(a0)
0000E7EE 1028 0028                  		move.b	$28(a0),d0
0000E7F2 E848                       		lsr.w	#4,d0
0000E7F4 0240 000F                  		andi.w	#$F,d0
0000E7F8 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000E7FE 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000E804 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E80A                            
0000E80A                            Obj13_MakeLava:				; XREF: Obj13_Index
0000E80A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000E80E 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000E810 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000E816 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000E81A 6600                       		bne.s	locret_E302
0000E81C 6100 F7A8                  		bsr.w	SingleObjLoad
0000E820 6600                       		bne.s	locret_E302
0000E822 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000E826 3368 0008 0008             		move.w	8(a0),8(a1)
0000E82C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E832 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E838                            
0000E838                            locret_E302:
0000E838 4E75                       		rts	
0000E83A                            ; ===========================================================================
0000E83A                            ; ---------------------------------------------------------------------------
0000E83A                            ; Object 14 - lava balls (MZ, SLZ)
0000E83A                            ; ---------------------------------------------------------------------------
0000E83A                            
0000E83A                            Obj14:					; XREF: Obj_Index
0000E83A 7000                       		moveq	#0,d0
0000E83C 1028 0024                  		move.b	$24(a0),d0
0000E840 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000E844 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000E848 6000 F2F6                  		bra.w	DisplaySprite
0000E84C                            ; ===========================================================================
0000E84C 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000E84E 0000                       		dc.w Obj14_Action-Obj14_Index
0000E850 0000                       		dc.w Obj14_Delete-Obj14_Index
0000E852                            
0000E852 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000E85C 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000E864                            ; ===========================================================================
0000E864                            
0000E864                            Obj14_Main:				; XREF: Obj14_Index
0000E864 5428 0024                  		addq.b	#2,$24(a0)
0000E868 117C 0008 0016             		move.b	#8,$16(a0)
0000E86E 117C 0008 0017             		move.b	#8,$17(a0)
0000E874 217C 0000 B804 0004        		move.l	#Map_obj14,4(a0)
0000E87C 317C 0345 0002             		move.w	#$345,2(a0)
0000E882 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000E888 6600                       		bne.s	loc_E35A
0000E88A 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000E890                            
0000E890                            loc_E35A:
0000E890 117C 0004 0001             		move.b	#4,1(a0)
0000E896 117C 0003 0018             		move.b	#3,$18(a0)
0000E89C 117C 008B 0020             		move.b	#$8B,$20(a0)
0000E8A2 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E8A8 4A28 0029                  		tst.b	$29(a0)
0000E8AC 6700                       		beq.s	Obj14_SetSpeed
0000E8AE 5428 0018                  		addq.b	#2,$18(a0)
0000E8B2                            
0000E8B2                            Obj14_SetSpeed:
0000E8B2 7000                       		moveq	#0,d0
0000E8B4 1028 0028                  		move.b	$28(a0),d0
0000E8B8 D040                       		add.w	d0,d0
0000E8BA 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000E8C0 117C 0008 0019             		move.b	#8,$19(a0)
0000E8C6 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000E8CC 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000E8CE 117C 0010 0019             		move.b	#$10,$19(a0)
0000E8D4 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000E8DA 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000E8E0 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000E8E6                            
0000E8E6                            Obj14_PlaySnd:
0000E8E6 303C 00AE                  		move.w	#$AE,d0
0000E8EA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000E8F0                            
0000E8F0                            Obj14_Action:				; XREF: Obj14_Index
0000E8F0 7000                       		moveq	#0,d0
0000E8F2 1028 0028                  		move.b	$28(a0),d0
0000E8F6 D040                       		add.w	d0,d0
0000E8F8 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000E8FC 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000E900 6100 F218                  		bsr.w	SpeedToPos
0000E904 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000E90A 6100 C304                  		bsr.w	AnimateSprite
0000E90E                            
0000E90E                            Obj14_ChkDel:				; XREF: Obj13
0000E90E 3028 0008                  		move.w	8(a0),d0
0000E912 0240 FF80                  		andi.w	#$FF80,d0
0000E916 3238 F700                  		move.w	($FFFFF700).w,d1
0000E91A 0441 0080                  		subi.w	#$80,d1
0000E91E 0241 FF80                  		andi.w	#$FF80,d1
0000E922 9041                       		sub.w	d1,d0
0000E924 0C40 0280                  		cmpi.w	#$280,d0
0000E928 6200 F252                  		bhi.w	DeleteObject
0000E92C 4E75                       		rts	
0000E92E                            ; ===========================================================================
0000E92E 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E932 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E936 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000E93A 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000E93E 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000E940                            ; ===========================================================================
0000E940                            ; lavaball types 00-03 fly up and fall back down
0000E940                            
0000E940                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000E940 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000E946 3028 0030                  		move.w	$30(a0),d0
0000E94A B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000E94E 6400                       		bcc.s	loc_E41E	; if not, branch
0000E950 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000E954                            
0000E954                            loc_E41E:
0000E954 08A8 0001 0022             		bclr	#1,$22(a0)
0000E95A 4A68 0012                  		tst.w	$12(a0)
0000E95E 6A00                       		bpl.s	locret_E430
0000E960 08E8 0001 0022             		bset	#1,$22(a0)
0000E966                            
0000E966                            locret_E430:
0000E966 4E75                       		rts	
0000E968                            ; ===========================================================================
0000E968                            ; lavaball type	04 flies up until it hits the ceiling
0000E968                            
0000E968                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000E968 08E8 0001 0022             		bset	#1,$22(a0)
0000E96E 6100 0000                  		bsr.w	ObjHitCeiling
0000E972 4A41                       		tst.w	d1
0000E974 6A00                       		bpl.s	locret_E452
0000E976 117C 0008 0028             		move.b	#8,$28(a0)
0000E97C 117C 0001 001C             		move.b	#1,$1C(a0)
0000E982 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000E988                            
0000E988                            locret_E452:
0000E988 4E75                       		rts	
0000E98A                            ; ===========================================================================
0000E98A                            ; lavaball type	05 falls down until it hits the	floor
0000E98A                            
0000E98A                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000E98A 08A8 0001 0022             		bclr	#1,$22(a0)
0000E990 6100 0000                  		bsr.w	ObjHitFloor
0000E994 4A41                       		tst.w	d1
0000E996 6A00                       		bpl.s	locret_E474
0000E998 117C 0008 0028             		move.b	#8,$28(a0)
0000E99E 117C 0001 001C             		move.b	#1,$1C(a0)
0000E9A4 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000E9AA                            
0000E9AA                            locret_E474:
0000E9AA 4E75                       		rts	
0000E9AC                            ; ===========================================================================
0000E9AC                            ; lavaball types 06-07 move sideways
0000E9AC                            
0000E9AC                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000E9AC 08E8 0000 0022             		bset	#0,$22(a0)
0000E9B2 76F8                       		moveq	#-8,d3
0000E9B4 6100 0000                  		bsr.w	ObjHitWallLeft
0000E9B8 4A41                       		tst.w	d1
0000E9BA 6A00                       		bpl.s	locret_E498
0000E9BC 117C 0008 0028             		move.b	#8,$28(a0)
0000E9C2 117C 0003 001C             		move.b	#3,$1C(a0)
0000E9C8 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000E9CE                            
0000E9CE                            locret_E498:
0000E9CE 4E75                       		rts	
0000E9D0                            ; ===========================================================================
0000E9D0                            
0000E9D0                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000E9D0 08A8 0000 0022             		bclr	#0,$22(a0)
0000E9D6 7608                       		moveq	#8,d3
0000E9D8 6100 0000                  		bsr.w	ObjHitWallRight
0000E9DC 4A41                       		tst.w	d1
0000E9DE 6A00                       		bpl.s	locret_E4BC
0000E9E0 117C 0008 0028             		move.b	#8,$28(a0)
0000E9E6 117C 0003 001C             		move.b	#3,$1C(a0)
0000E9EC 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000E9F2                            
0000E9F2                            locret_E4BC:
0000E9F2 4E75                       		rts	
0000E9F4                            ; ===========================================================================
0000E9F4                            
0000E9F4                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000E9F4 4E75                       		rts	
0000E9F6                            ; ===========================================================================
0000E9F6                            
0000E9F6                            Obj14_Delete:				; XREF: Obj14_Index
0000E9F6 6000 F184                  		bra.w	DeleteObject
0000E9FA                            ; ===========================================================================
0000E9FA                            Ani_obj14:
0000E9FA                            	include "_anim\obj14.asm"
0000E9FA                            ; ---------------------------------------------------------------------------
0000E9FA                            ; Animation script - lava balls
0000E9FA                            ; ---------------------------------------------------------------------------
0000E9FA 0000                       		dc.w byte_E4CC-Ani_obj14
0000E9FC 0000                       		dc.w byte_E4D2-Ani_obj14
0000E9FE 0000                       		dc.w byte_E4D6-Ani_obj14
0000EA00 0000                       		dc.w byte_E4DC-Ani_obj14
0000EA02 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EA08 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EA0C 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EA12 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EA16                            		even
0000EA16                            		even
0000EA16                            
0000EA16                            ; ===========================================================================
0000EA16                            ; ---------------------------------------------------------------------------
0000EA16                            ; Object 6D - flame thrower (SBZ)
0000EA16                            ; ---------------------------------------------------------------------------
0000EA16                            
0000EA16                            Obj6D:					; XREF: Obj_Index
0000EA16 7000                       		moveq	#0,d0
0000EA18 1028 0024                  		move.b	$24(a0),d0
0000EA1C 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EA20 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EA24                            ; ===========================================================================
0000EA24 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EA26 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EA28                            ; ===========================================================================
0000EA28                            
0000EA28                            Obj6D_Main:				; XREF: Obj6D_Index
0000EA28 5428 0024                  		addq.b	#2,$24(a0)
0000EA2C 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EA34 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EA3A 0028 0004 0001             		ori.b	#4,1(a0)
0000EA40 117C 0001 0018             		move.b	#1,$18(a0)
0000EA46 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EA4C 117C 000C 0019             		move.b	#$C,$19(a0)
0000EA52 1028 0028                  		move.b	$28(a0),d0
0000EA56 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EA5A D040                       		add.w	d0,d0		; multiply by 2
0000EA5C 3140 0030                  		move.w	d0,$30(a0)
0000EA60 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EA64 1028 0028                  		move.b	$28(a0),d0
0000EA68 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EA6C EB48                       		lsl.w	#5,d0		; multiply by $20
0000EA6E 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EA72 117C 000A 0036             		move.b	#$A,$36(a0)
0000EA78 0828 0001 0022             		btst	#1,$22(a0)
0000EA7E 6700                       		beq.s	Obj6D_Action
0000EA80 117C 0002 001C             		move.b	#2,$1C(a0)
0000EA86 117C 0015 0036             		move.b	#$15,$36(a0)
0000EA8C                            
0000EA8C                            Obj6D_Action:				; XREF: Obj6D_Index
0000EA8C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EA90 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EA92 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EA98 0868 0000 001C             		bchg	#0,$1C(a0)
0000EA9E 6700                       		beq.s	loc_E57A
0000EAA0 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EAA6 303C 00B3                  		move.w	#$B3,d0
0000EAAA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000EAB0                            
0000EAB0                            loc_E57A:
0000EAB0 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EAB6 6100 C158                  		bsr.w	AnimateSprite
0000EABA 117C 0000 0020             		move.b	#0,$20(a0)
0000EAC0 1028 0036                  		move.b	$36(a0),d0
0000EAC4 B028 001A                  		cmp.b	$1A(a0),d0
0000EAC8 6600                       		bne.s	Obj6D_ChkDel
0000EACA 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EAD0                            
0000EAD0                            Obj6D_ChkDel:
0000EAD0 3028 0008                  		move.w	8(a0),d0
0000EAD4 0240 FF80                  		andi.w	#$FF80,d0
0000EAD8 3238 F700                  		move.w	($FFFFF700).w,d1
0000EADC 0441 0080                  		subi.w	#$80,d1
0000EAE0 0241 FF80                  		andi.w	#$FF80,d1
0000EAE4 9041                       		sub.w	d1,d0
0000EAE6 0C40 0280                  		cmpi.w	#$280,d0
0000EAEA 6200 F090                  		bhi.w	DeleteObject
0000EAEE 6000 F050                  		bra.w	DisplaySprite
0000EAF2                            ; ===========================================================================
0000EAF2                            Ani_obj6D:
0000EAF2                            	include "_anim\obj6D.asm"
0000EAF2                            ; ---------------------------------------------------------------------------
0000EAF2                            ; Animation script - flamethrower (SBZ)
0000EAF2                            ; ---------------------------------------------------------------------------
0000EAF2 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EAF4 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EAF6 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EAF8 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EAFA 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EB08 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000EB12 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EB20 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EB2A                            		even
0000EB2A                            		even
0000EB2A                            
0000EB2A                            ; ---------------------------------------------------------------------------
0000EB2A                            ; Sprite mappings - flame thrower (SBZ)
0000EB2A                            ; ---------------------------------------------------------------------------
0000EB2A                            Map_obj6D:
0000EB2A                            	include "_maps\obj6D.asm"
0000EB2A                            ; ---------------------------------------------------------------------------
0000EB2A                            ; Sprite mappings - flame thrower (SBZ)
0000EB2A                            ; ---------------------------------------------------------------------------
0000EB2A 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EB2E 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EB32 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EB36 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EB3A 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EB3E 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EB42 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EB46 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000EB4A 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000EB4E 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000EB52 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000EB56 01                         byte_E620:	dc.b 1
0000EB57 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EB5C 02                         byte_E626:	dc.b 2
0000EB5D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EB62 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EB67 02                         byte_E631:	dc.b 2
0000EB68 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EB6D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EB72 03                         byte_E63C:	dc.b 3
0000EB73 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EB78 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EB7D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EB82 03                         byte_E64C:	dc.b 3
0000EB83 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EB88 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EB8D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EB92 04                         byte_E65C:	dc.b 4
0000EB93 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EB98 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EB9D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EBA2 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBA7 04                         byte_E671:	dc.b 4
0000EBA8 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EBAD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EBB2 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EBB7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBBC 05                         byte_E686:	dc.b 5
0000EBBD F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EBC2 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EBC7 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EBCC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EBD1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBD6 05                         byte_E6A0:	dc.b 5
0000EBD7 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EBDC 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EBE1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EBE6 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EBEB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBF0 06                         byte_E6BA:	dc.b 6
0000EBF1 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EBF6 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EBFB 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC00 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EC05 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC0A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC0F 06                         byte_E6D9:	dc.b 6
0000EC10 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EC15 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EC1A 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EC1F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC24 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC29 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC2E 01                         byte_E6F8:	dc.b 1
0000EC2F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC34 02                         byte_E6FE:	dc.b 2
0000EC35 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC3A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC3F 02                         byte_E709:	dc.b 2
0000EC40 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC45 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC4A 03                         byte_E714:	dc.b 3
0000EC4B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EC50 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC55 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC5A 03                         byte_E724:	dc.b 3
0000EC5B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC60 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC65 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC6A 04                         byte_E734:	dc.b 4
0000EC6B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC70 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EC75 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC7A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC7F 04                         byte_E749:	dc.b 4
0000EC80 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EC85 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC8A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC8F 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC94 05                         byte_E75E:	dc.b 5
0000EC95 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EC9A 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC9F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ECA4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECA9 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECAE 05                         byte_E778:	dc.b 5
0000ECAF F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ECB4 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ECB9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECBE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECC3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECC8 06                         byte_E792:	dc.b 6
0000ECC9 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000ECCE F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000ECD3 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ECD8 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000ECDD 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECE2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECE7 06                         byte_E7B1:	dc.b 6
0000ECE8 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000ECED F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ECF2 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000ECF7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECFC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED01 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED06                            		even
0000ED06                            		even
0000ED06                            
0000ED06                            ; ===========================================================================
0000ED06                            ; ---------------------------------------------------------------------------
0000ED06                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000ED06                            ; ---------------------------------------------------------------------------
0000ED06                            
0000ED06                            Obj46:					; XREF: Obj_Index
0000ED06 7000                       		moveq	#0,d0
0000ED08 1028 0024                  		move.b	$24(a0),d0
0000ED0C 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000ED10 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000ED14                            ; ===========================================================================
0000ED14 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000ED16 0000                       		dc.w Obj46_Action-Obj46_Index
0000ED18                            ; ===========================================================================
0000ED18                            
0000ED18                            Obj46_Main:				; XREF: Obj46_Index
0000ED18 5428 0024                  		addq.b	#2,$24(a0)
0000ED1C 117C 000F 0016             		move.b	#$F,$16(a0)
0000ED22 117C 000F 0017             		move.b	#$F,$17(a0)
0000ED28 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000ED30 317C 4000 0002             		move.w	#$4000,2(a0)
0000ED36 117C 0004 0001             		move.b	#4,1(a0)
0000ED3C 117C 0003 0018             		move.b	#3,$18(a0)
0000ED42 117C 0010 0019             		move.b	#$10,$19(a0)
0000ED48 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000ED4E 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000ED54                            
0000ED54                            Obj46_Action:				; XREF: Obj46_Index
0000ED54 4A28 0001                  		tst.b	1(a0)
0000ED58 6A00                       		bpl.s	Obj46_ChkDel
0000ED5A 7000                       		moveq	#0,d0
0000ED5C 1028 0028                  		move.b	$28(a0),d0	; get object type
0000ED60 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000ED64 D040                       		add.w	d0,d0
0000ED66 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000ED6A 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000ED6E 323C 001B                  		move.w	#$1B,d1
0000ED72 343C 0010                  		move.w	#$10,d2
0000ED76 363C 0011                  		move.w	#$11,d3
0000ED7A 3828 0008                  		move.w	8(a0),d4
0000ED7E 6100 0000                  		bsr.w	SolidObject
0000ED82                            
0000ED82                            Obj46_ChkDel:
0000ED82 6100 EDBC                  		bsr.w	DisplaySprite
0000ED86 3028 0008                  		move.w	8(a0),d0
0000ED8A 0240 FF80                  		andi.w	#$FF80,d0
0000ED8E 3238 F700                  		move.w	($FFFFF700).w,d1
0000ED92 0441 0080                  		subi.w	#$80,d1
0000ED96 0241 FF80                  		andi.w	#$FF80,d1
0000ED9A 9041                       		sub.w	d1,d0
0000ED9C 0C40 0280                  		cmpi.w	#$280,d0
0000EDA0 6200 EDDA                  		bhi.w	DeleteObject
0000EDA4 4E75                       		rts	
0000EDA6                            ; ===========================================================================
0000EDA6 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000EDA8 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000EDAA 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000EDAC 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000EDAE 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000EDB0                            ; ===========================================================================
0000EDB0                            
0000EDB0                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000EDB0 4E75                       		rts	
0000EDB2                            ; ===========================================================================
0000EDB2                            
0000EDB2                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000EDB2 3038 D008                  		move.w	($FFFFD008).w,d0
0000EDB6 9068 0008                  		sub.w	8(a0),d0
0000EDBA 6400                       		bcc.s	loc_E888
0000EDBC 4440                       		neg.w	d0
0000EDBE                            
0000EDBE                            loc_E888:
0000EDBE 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000EDC2 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000EDC4 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000EDCA                            
0000EDCA                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000EDCA 7000                       		moveq	#0,d0
0000EDCC 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000EDD0 0828 0003 0028             		btst	#3,$28(a0)
0000EDD6 6700                       		beq.s	loc_E8A8
0000EDD8 4440                       		neg.w	d0
0000EDDA 0640 0010                  		addi.w	#$10,d0
0000EDDE                            
0000EDDE                            loc_E8A8:
0000EDDE 3228 0030                  		move.w	$30(a0),d1
0000EDE2 9240                       		sub.w	d0,d1
0000EDE4 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000EDE8 4E75                       		rts	
0000EDEA                            ; ===========================================================================
0000EDEA                            
0000EDEA                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000EDEA 6100 ED2E                  		bsr.w	SpeedToPos
0000EDEE 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000EDF4 6100 0000                  		bsr.w	ObjHitFloor
0000EDF8 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000EDFA 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000EDFE D368 000C                  		add.w	d1,$C(a0)
0000EE02 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000EE06 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EE0C 117C 0004 0028             		move.b	#4,$28(a0)
0000EE12 3011                       		move.w	(a1),d0
0000EE14 0240 03FF                  		andi.w	#$3FF,d0
0000EE18 0C40 02E8                  		cmpi.w	#$2E8,d0
0000EE1C 6400                       		bcc.s	locret_E8EE
0000EE1E 117C 0000 0028             		move.b	#0,$28(a0)
0000EE24                            
0000EE24                            locret_E8EE:
0000EE24 4E75                       		rts	
0000EE26                            ; ===========================================================================
0000EE26                            
0000EE26                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000EE26 7000                       		moveq	#0,d0
0000EE28 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000EE2C E648                       		lsr.w	#3,d0
0000EE2E 3228 0030                  		move.w	$30(a0),d1
0000EE32 9240                       		sub.w	d0,d1
0000EE34 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000EE38 4E75                       		rts	
0000EE3A                            ; ===========================================================================
0000EE3A                            ; ---------------------------------------------------------------------------
0000EE3A                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EE3A                            ; ---------------------------------------------------------------------------
0000EE3A                            Map_obj46:
0000EE3A                            	include "_maps\obj46.asm"
0000EE3A                            ; ---------------------------------------------------------------------------
0000EE3A                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EE3A                            ; ---------------------------------------------------------------------------
0000EE3A 0000                       		dc.w byte_E906-Map_obj46
0000EE3C 01                         byte_E906:	dc.b 1
0000EE3D F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000EE42                            		even
0000EE42                            		even
0000EE42                            
0000EE42                            ; ===========================================================================
0000EE42                            ; ---------------------------------------------------------------------------
0000EE42                            ; Object 12 - lamp (SYZ)
0000EE42                            ; ---------------------------------------------------------------------------
0000EE42                            
0000EE42                            Obj12:					; XREF: Obj_Index
0000EE42 7000                       		moveq	#0,d0
0000EE44 1028 0024                  		move.b	$24(a0),d0
0000EE48 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000EE4C 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000EE50                            ; ===========================================================================
0000EE50 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000EE52 0000                       		dc.w Obj12_Animate-Obj12_Index
0000EE54                            ; ===========================================================================
0000EE54                            
0000EE54                            Obj12_Main:				; XREF: Obj12_Index
0000EE54 5428 0024                  		addq.b	#2,$24(a0)
0000EE58 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000EE60 317C 0000 0002             		move.w	#0,2(a0)
0000EE66 117C 0004 0001             		move.b	#4,1(a0)
0000EE6C 117C 0010 0019             		move.b	#$10,$19(a0)
0000EE72 117C 0006 0018             		move.b	#6,$18(a0)
0000EE78                            
0000EE78                            Obj12_Animate:				; XREF: Obj12_Index
0000EE78 5328 001E                  		subq.b	#1,$1E(a0)
0000EE7C 6A00                       		bpl.s	Obj12_ChkDel
0000EE7E 117C 0007 001E             		move.b	#7,$1E(a0)
0000EE84 5228 001A                  		addq.b	#1,$1A(a0)
0000EE88 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000EE8E 6500                       		bcs.s	Obj12_ChkDel
0000EE90 117C 0000 001A             		move.b	#0,$1A(a0)
0000EE96                            
0000EE96                            Obj12_ChkDel:
0000EE96 3028 0008                  		move.w	8(a0),d0
0000EE9A 0240 FF80                  		andi.w	#$FF80,d0
0000EE9E 3238 F700                  		move.w	($FFFFF700).w,d1
0000EEA2 0441 0080                  		subi.w	#$80,d1
0000EEA6 0241 FF80                  		andi.w	#$FF80,d1
0000EEAA 9041                       		sub.w	d1,d0
0000EEAC 0C40 0280                  		cmpi.w	#$280,d0
0000EEB0 6200 ECCA                  		bhi.w	DeleteObject
0000EEB4 6000 EC8A                  		bra.w	DisplaySprite
0000EEB8                            ; ===========================================================================
0000EEB8                            ; ---------------------------------------------------------------------------
0000EEB8                            ; Sprite mappings - lamp (SYZ)
0000EEB8                            ; ---------------------------------------------------------------------------
0000EEB8                            Map_obj12:
0000EEB8                            	include "_maps\obj12.asm"
0000EEB8                            ; ---------------------------------------------------------------------------
0000EEB8                            ; Sprite mappings - lamp (SYZ)
0000EEB8                            ; ---------------------------------------------------------------------------
0000EEB8 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000EEBC 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000EEC0 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000EEC4 02                         byte_E98E:	dc.b 2
0000EEC5 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000EECA 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000EECF 02                         byte_E999:	dc.b 2
0000EED0 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000EED5 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000EEDA 02                         byte_E9A4:	dc.b 2
0000EEDB F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000EEE0 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000EEE5 02                         byte_E9AF:	dc.b 2
0000EEE6 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000EEEB 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000EEF0 02                         byte_E9BA:	dc.b 2
0000EEF1 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000EEF6 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000EEFB 02                         byte_E9C5:	dc.b 2
0000EEFC F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000EF01 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000EF06                            		even
0000EF06                            		even
0000EF06                            
0000EF06                            ; ===========================================================================
0000EF06                            ; ---------------------------------------------------------------------------
0000EF06                            ; Object 47 - pinball bumper (SYZ)
0000EF06                            ; ---------------------------------------------------------------------------
0000EF06                            
0000EF06                            Obj47:					; XREF: Obj_Index
0000EF06 7000                       		moveq	#0,d0
0000EF08 1028 0024                  		move.b	$24(a0),d0
0000EF0C 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000EF10 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000EF14                            ; ===========================================================================
0000EF14 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000EF16 0000                       		dc.w Obj47_Hit-Obj47_Index
0000EF18                            ; ===========================================================================
0000EF18                            
0000EF18                            Obj47_Main:				; XREF: Obj47_Index
0000EF18 5428 0024                  		addq.b	#2,$24(a0)
0000EF1C 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000EF24 317C 0380 0002             		move.w	#$380,2(a0)
0000EF2A 117C 0004 0001             		move.b	#4,1(a0)
0000EF30 117C 0010 0019             		move.b	#$10,$19(a0)
0000EF36 117C 0001 0018             		move.b	#1,$18(a0)
0000EF3C 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000EF42                            
0000EF42                            Obj47_Hit:				; XREF: Obj47_Index
0000EF42 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000EF46 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000EF4A 4228 0021                  		clr.b	$21(a0)
0000EF4E 43F8 D000                  		lea	($FFFFD000).w,a1
0000EF52 3228 0008                  		move.w	8(a0),d1
0000EF56 3428 000C                  		move.w	$C(a0),d2
0000EF5A 9269 0008                  		sub.w	8(a1),d1
0000EF5E 9469 000C                  		sub.w	$C(a1),d2
0000EF62 4EB9 0000 2EB6             		jsr	(CalcAngle).l
0000EF68 4EB9 0000 2BE8             		jsr	(CalcSine).l
0000EF6E C3FC F900                  		muls.w	#-$700,d1
0000EF72 E081                       		asr.l	#8,d1
0000EF74 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000EF78 C1FC F900                  		muls.w	#-$700,d0
0000EF7C E080                       		asr.l	#8,d0
0000EF7E 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000EF82 08E9 0001 0022             		bset	#1,$22(a1)
0000EF88 08A9 0004 0022             		bclr	#4,$22(a1)
0000EF8E 08A9 0005 0022             		bclr	#5,$22(a1)
0000EF94 4229 003C                  		clr.b	$3C(a1)
0000EF98 117C 0001 001C             		move.b	#1,$1C(a0)
0000EF9E 303C 00B4                  		move.w	#$B4,d0
0000EFA2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play bumper sound
0000EFA8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EFAC 7000                       		moveq	#0,d0
0000EFAE 1028 0023                  		move.b	$23(a0),d0
0000EFB2 6700                       		beq.s	Obj47_Score
0000EFB4 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000EFBA 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000EFBC 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000EFC0                            
0000EFC0                            Obj47_Score:
0000EFC0 7001                       		moveq	#1,d0
0000EFC2 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000EFC8 6100 EFFC                  		bsr.w	SingleObjLoad
0000EFCC 6600                       		bne.s	Obj47_Display
0000EFCE 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000EFD2 3368 0008 0008             		move.w	8(a0),8(a1)
0000EFD8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EFDE 137C 0004 001A             		move.b	#4,$1A(a1)
0000EFE4                            
0000EFE4                            Obj47_Display:
0000EFE4 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000EFEA 6100 BC24                  		bsr.w	AnimateSprite
0000EFEE 3028 0008                  		move.w	8(a0),d0
0000EFF2 0240 FF80                  		andi.w	#$FF80,d0
0000EFF6 3238 F700                  		move.w	($FFFFF700).w,d1
0000EFFA 0441 0080                  		subi.w	#$80,d1
0000EFFE 0241 FF80                  		andi.w	#$FF80,d1
0000F002 9041                       		sub.w	d1,d0
0000F004 0C40 0280                  		cmpi.w	#$280,d0
0000F008 6200                       		bhi.s	Obj47_ChkHit
0000F00A 6000 EB34                  		bra.w	DisplaySprite
0000F00E                            ; ===========================================================================
0000F00E                            
0000F00E                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F00E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F012 7000                       		moveq	#0,d0
0000F014 1028 0023                  		move.b	$23(a0),d0
0000F018 6700                       		beq.s	Obj47_Delete
0000F01A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F020                            
0000F020                            Obj47_Delete:
0000F020 6000 EB5A                  		bra.w	DeleteObject
0000F024                            ; ===========================================================================
0000F024                            Ani_obj47:
0000F024                            	include "_anim\obj47.asm"
0000F024                            ; ---------------------------------------------------------------------------
0000F024                            ; Animation script - flamethrower (SBZ)
0000F024                            ; ---------------------------------------------------------------------------
0000F024 0000                       		dc.w byte_EAF4-Ani_obj47
0000F026 0000                       		dc.w byte_EAF8-Ani_obj47
0000F028 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F02C 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F034                            		even
0000F034                            		even
0000F034                            
0000F034                            ; ---------------------------------------------------------------------------
0000F034                            ; Sprite mappings - pinball bumper (SYZ)
0000F034                            ; ---------------------------------------------------------------------------
0000F034                            Map_obj47:
0000F034                            	include "_maps\obj47.asm"
0000F034                            ; ---------------------------------------------------------------------------
0000F034                            ; Sprite mappings - pinball bumper (SYZ)
0000F034                            ; ---------------------------------------------------------------------------
0000F034 0000                       		dc.w byte_EB06-Map_obj47
0000F036 0000                       		dc.w byte_EB11-Map_obj47
0000F038 0000                       		dc.w byte_EB1C-Map_obj47
0000F03A 02                         byte_EB06:	dc.b 2
0000F03B F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F040 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F045 02                         byte_EB11:	dc.b 2
0000F046 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F04B F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F050 02                         byte_EB1C:	dc.b 2
0000F051 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F056 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F05C 00                         		even
0000F05C 00                         		even
0000F05C                            
0000F05C                            ; ===========================================================================
0000F05C                            ; ---------------------------------------------------------------------------
0000F05C                            ; Object 0D - signpost at the end of a level
0000F05C                            ; ---------------------------------------------------------------------------
0000F05C                            
0000F05C                            Obj0D:					; XREF: Obj_Index
0000F05C 7000                       		moveq	#0,d0
0000F05E 1028 0024                  		move.b	$24(a0),d0
0000F062 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F066 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F06A 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F070 6100 BB9E                  		bsr.w	AnimateSprite
0000F074 6100 EACA                  		bsr.w	DisplaySprite
0000F078 3028 0008                  		move.w	8(a0),d0
0000F07C 0240 FF80                  		andi.w	#$FF80,d0
0000F080 3238 F700                  		move.w	($FFFFF700).w,d1
0000F084 0441 0080                  		subi.w	#$80,d1
0000F088 0241 FF80                  		andi.w	#$FF80,d1
0000F08C 9041                       		sub.w	d1,d0
0000F08E 0C40 0280                  		cmpi.w	#$280,d0
0000F092 6200 EAE8                  		bhi.w	DeleteObject
0000F096 4E75                       		rts	
0000F098                            ; ===========================================================================
0000F098 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F09A 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F09C 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F09E 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F0A0 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F0A2                            ; ===========================================================================
0000F0A2                            
0000F0A2                            Obj0D_Main:				; XREF: Obj0D_Index
0000F0A2 5428 0024                  		addq.b	#2,$24(a0)
0000F0A6 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F0AE 317C 0680 0002             		move.w	#$680,2(a0)
0000F0B4 117C 0004 0001             		move.b	#4,1(a0)
0000F0BA 117C 0018 0019             		move.b	#$18,$19(a0)
0000F0C0 117C 0004 0018             		move.b	#4,$18(a0)
0000F0C6                            
0000F0C6                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F0C6 3038 D008                  		move.w	($FFFFD008).w,d0
0000F0CA 9068 0008                  		sub.w	8(a0),d0
0000F0CE 6500                       		bcs.s	locret_EBBA
0000F0D0 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F0D4 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F0D6 303C 00CF                  		move.w	#$CF,d0
0000F0DA 4EB9 0000 15B6             		jsr	(PlaySound).l	; play signpost	sound
0000F0E0 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F0E4 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F0EA 5428 0024                  		addq.b	#2,$24(a0)
0000F0EE                            
0000F0EE                            locret_EBBA:
0000F0EE 4E75                       		rts	
0000F0F0                            ; ===========================================================================
0000F0F0                            
0000F0F0                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F0F0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F0F4 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F0F6 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F0FC 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F100 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F106 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F108 5428 0024                  		addq.b	#2,$24(a0)
0000F10C                            
0000F10C                            Obj0D_Sparkle:
0000F10C 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F110 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F112 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F118 7000                       		moveq	#0,d0
0000F11A 1028 0034                  		move.b	$34(a0),d0
0000F11E 5428 0034                  		addq.b	#2,$34(a0)
0000F122 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F128 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F12C 6100 EE98                  		bsr.w	SingleObjLoad
0000F130 6600                       		bne.s	locret_EC42
0000F132 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F136 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F13C 101A                       		move.b	(a2)+,d0
0000F13E 4880                       		ext.w	d0
0000F140 D068 0008                  		add.w	8(a0),d0
0000F144 3340 0008                  		move.w	d0,8(a1)
0000F148 101A                       		move.b	(a2)+,d0
0000F14A 4880                       		ext.w	d0
0000F14C D068 000C                  		add.w	$C(a0),d0
0000F150 3340 000C                  		move.w	d0,$C(a1)
0000F154 237C 0000 A3AE 0004        		move.l	#Map_obj25,4(a1)
0000F15C 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F162 137C 0004 0001             		move.b	#4,1(a1)
0000F168 137C 0002 0018             		move.b	#2,$18(a1)
0000F16E 137C 0008 0019             		move.b	#8,$19(a1)
0000F174                            
0000F174                            locret_EC42:
0000F174 4E75                       		rts	
0000F176                            ; ===========================================================================
0000F176 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F178 0808                       		dc.b	8,   8
0000F17A F000                       		dc.b -$10,   0
0000F17C 18F8                       		dc.b  $18,  -8
0000F17E 00F8                       		dc.b	0,  -8
0000F180 1000                       		dc.b  $10,   0
0000F182 E808                       		dc.b -$18,   8
0000F184 1810                       		dc.b  $18, $10
0000F186                            ; ===========================================================================
0000F186                            
0000F186                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F186 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F18A 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F18E 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F194 6600                       		bne.s	loc_EC70
0000F196 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F19C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F1A2 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F1A4 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F1AA 6000                       		bra.s	loc_EC70
0000F1AC                            
0000F1AC                            Obj0D_MoveLeft:
0000F1AC 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F1B2                            
0000F1B2                            loc_EC70:
0000F1B2 4A38 D000                  		tst.b	($FFFFD000).w
0000F1B6 6700                       		beq.s	loc_EC86
0000F1B8 3038 D008                  		move.w	($FFFFD008).w,d0
0000F1BC 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F1C0 0641 0128                  		addi.w	#$128,d1
0000F1C4 B041                       		cmp.w	d1,d0
0000F1C6 6500                       		bcs.s	locret_ECEE
0000F1C8                            
0000F1C8                            loc_EC86:
0000F1C8 5428 0024                  		addq.b	#2,$24(a0)
0000F1CC                            
0000F1CC                            ; ---------------------------------------------------------------------------
0000F1CC                            ; Subroutine to	set up bonuses at the end of an	act
0000F1CC                            ; ---------------------------------------------------------------------------
0000F1CC                            
0000F1CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F1CC                            
0000F1CC                            
0000F1CC                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F1CC 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F1D0 6600                       		bne.s	locret_ECEE
0000F1D2 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F1D8 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F1DC 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F1E0 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F1E6 7010                       		moveq	#$10,d0
0000F1E8 4EB9 0000 17D2             		jsr	(LoadPLC2).l	; load title card patterns
0000F1EE 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F1F4 7000                       		moveq	#0,d0
0000F1F6 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F1FA C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F1FE 7200                       		moveq	#0,d1
0000F200 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F204 D041                       		add.w	d1,d0		; add up your time
0000F206 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F20A 7214                       		moveq	#$14,d1
0000F20C B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F20E 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F210 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F212                            
0000F212                            loc_ECD0:
0000F212 D040                       		add.w	d0,d0
0000F214 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F21A 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F21E C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F222 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F226 303C 008E                  		move.w	#$8E,d0
0000F22A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F230                            
0000F230                            locret_ECEE:
0000F230 4E75                       		rts	
0000F232                            ; End of function GotThroughAct
0000F232                            
0000F232                            ; ===========================================================================
0000F232 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F246 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F25C                            ; ===========================================================================
0000F25C                            
0000F25C                            locret_ED1A:				; XREF: Obj0D_Index
0000F25C 4E75                       		rts	
0000F25E                            ; ===========================================================================
0000F25E                            Ani_obj0D:
0000F25E                            	include "_anim\obj0D.asm"
0000F25E                            ; ---------------------------------------------------------------------------
0000F25E                            ; Animation script - signpost
0000F25E                            ; ---------------------------------------------------------------------------
0000F25E 0000                       		dc.w byte_ED24-Ani_obj0D
0000F260 0000                       		dc.w byte_ED28-Ani_obj0D
0000F262 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F264 0000                       		dc.w byte_ED34-Ani_obj0D
0000F266 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F26A 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F270 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F276 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F27A 00                         		even
0000F27A 00                         		even
0000F27A                            
0000F27A                            ; ---------------------------------------------------------------------------
0000F27A                            ; Sprite mappings - signpost
0000F27A                            ; ---------------------------------------------------------------------------
0000F27A                            Map_obj0D:
0000F27A                            	include "_maps\obj0D.asm"
0000F27A                            ; ---------------------------------------------------------------------------
0000F27A                            ; Sprite mappings - signpost
0000F27A                            ; ---------------------------------------------------------------------------
0000F27A 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F27E 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F282 0000                       		dc.w byte_ED73-Map_obj0D
0000F284 03                         byte_ED42:	dc.b 3
0000F285 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F28A F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F28F 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F294 02                         byte_ED52:	dc.b 2
0000F295 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F29A 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F29F 02                         byte_ED5D:	dc.b 2
0000F2A0 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F2A5 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F2AA 02                         byte_ED68:	dc.b 2
0000F2AB F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F2B0 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F2B5 03                         byte_ED73:	dc.b 3
0000F2B6 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F2BB F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F2C0 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F2C6 00                         		even
0000F2C6 00                         		even
0000F2C6                            
0000F2C6                            ; ===========================================================================
0000F2C6                            ; ---------------------------------------------------------------------------
0000F2C6                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F2C6                            ; ---------------------------------------------------------------------------
0000F2C6                            
0000F2C6                            Obj4C:					; XREF: Obj_Index
0000F2C6 7000                       		moveq	#0,d0
0000F2C8 1028 0024                  		move.b	$24(a0),d0
0000F2CC 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F2D0 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F2D4 6000 0000                  		bra.w	Obj4D_ChkDel
0000F2D8                            ; ===========================================================================
0000F2D8 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F2DA 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F2DC 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F2DE 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F2E0 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F2E2 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F2E4                            ; ===========================================================================
0000F2E4                            
0000F2E4                            Obj4C_Main:				; XREF: Obj4C_Index
0000F2E4 5428 0024                  		addq.b	#2,$24(a0)
0000F2E8 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F2F0 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F2F6 117C 0004 0001             		move.b	#4,1(a0)
0000F2FC 117C 0001 0018             		move.b	#1,$18(a0)
0000F302 117C 0038 0019             		move.b	#$38,$19(a0)
0000F308 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F30E                            
0000F30E                            loc_EDCC:				; XREF: Obj4C_Index
0000F30E 5368 0032                  		subq.w	#1,$32(a0)
0000F312 6A00                       		bpl.s	locret_EDF0
0000F314 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F31A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F31E 3228 000C                  		move.w	$C(a0),d1
0000F322 B041                       		cmp.w	d1,d0
0000F324 6400                       		bcc.s	locret_EDF0
0000F326 0441 0170                  		subi.w	#$170,d1
0000F32A B041                       		cmp.w	d1,d0
0000F32C 6500                       		bcs.s	locret_EDF0
0000F32E 5428 0024                  		addq.b	#2,$24(a0)
0000F332                            
0000F332                            locret_EDF0:
0000F332 4E75                       		rts	
0000F334                            ; ===========================================================================
0000F334                            
0000F334                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F334 5428 0024                  		addq.b	#2,$24(a0)
0000F338 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F33C 6600                       		bne.s	loc_EE18
0000F33E 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F342 3368 0008 0008             		move.w	8(a0),8(a1)
0000F348 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F34E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F354 2348 003C                  		move.l	a0,$3C(a1)
0000F358                            
0000F358                            loc_EE18:
0000F358 117C 0001 001C             		move.b	#1,$1C(a0)
0000F35E 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F362 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F364 117C 0004 001C             		move.b	#4,$1C(a0)
0000F36A 6000                       		bra.s	Obj4C_Display
0000F36C                            ; ===========================================================================
0000F36C                            
0000F36C                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F36C 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F370 08E9 0001 0022             		bset	#1,$22(a1)
0000F376 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F37C 6000                       		bra.s	Obj4C_Display
0000F37E                            ; ===========================================================================
0000F37E                            
0000F37E                            loc_EE3E:				; XREF: Obj4C_Index
0000F37E 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F382 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F384 5428 0024                  		addq.b	#2,$24(a0)
0000F388 4E75                       		rts	
0000F38A                            ; ===========================================================================
0000F38A                            
0000F38A                            Obj4C_Display:				; XREF: Obj4C_Index
0000F38A 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F390 6100 B87E                  		bsr.w	AnimateSprite
0000F394 6100 E7AA                  		bsr.w	DisplaySprite
0000F398 4E75                       		rts	
0000F39A                            ; ===========================================================================
0000F39A                            
0000F39A                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F39A 117C 0000 001C             		move.b	#0,$1C(a0)
0000F3A0 117C 0002 0024             		move.b	#2,$24(a0)
0000F3A6 4A28 0028                  		tst.b	$28(a0)
0000F3AA 6700 E7D0                  		beq.w	DeleteObject
0000F3AE 4E75                       		rts	
0000F3B0                            ; ===========================================================================
0000F3B0                            ; ---------------------------------------------------------------------------
0000F3B0                            ; Object 4D - lava geyser / lavafall (MZ)
0000F3B0                            ; ---------------------------------------------------------------------------
0000F3B0                            
0000F3B0                            Obj4D:					; XREF: Obj_Index
0000F3B0 7000                       		moveq	#0,d0
0000F3B2 1028 0024                  		move.b	$24(a0),d0
0000F3B6 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F3BA 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F3BE 6000 E780                  		bra.w	DisplaySprite
0000F3C2                            ; ===========================================================================
0000F3C2 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F3C4 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F3C6 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F3C8 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F3CA                            
0000F3CA FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F3CE                            ; ===========================================================================
0000F3CE                            
0000F3CE                            Obj4D_Main:				; XREF: Obj4D_Index
0000F3CE 5428 0024                  		addq.b	#2,$24(a0)
0000F3D2 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F3D8 4A28 0028                  		tst.b	$28(a0)
0000F3DC 6700                       		beq.s	loc_EEA4
0000F3DE 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F3E4                            
0000F3E4                            loc_EEA4:
0000F3E4 7000                       		moveq	#0,d0
0000F3E6 1028 0028                  		move.b	$28(a0),d0
0000F3EA D040                       		add.w	d0,d0
0000F3EC 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F3F2 2248                       		movea.l	a0,a1
0000F3F4 7201                       		moveq	#1,d1
0000F3F6 6100                       		bsr.s	Obj4D_MakeLava
0000F3F8 6000                       		bra.s	loc_EF10
0000F3FA                            ; ===========================================================================
0000F3FA                            
0000F3FA                            Obj4D_Loop:
0000F3FA 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F3FE 6600                       		bne.s	loc_EF0A
0000F400                            
0000F400                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F400 12BC 004D                  		move.b	#$4D,0(a1)
0000F404 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F40C 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F412 137C 0004 0001             		move.b	#4,1(a1)
0000F418 137C 0020 0019             		move.b	#$20,$19(a1)
0000F41E 3368 0008 0008             		move.w	8(a0),8(a1)
0000F424 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F42A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F430 137C 0001 0018             		move.b	#1,$18(a1)
0000F436 137C 0005 001C             		move.b	#5,$1C(a1)
0000F43C 4A28 0028                  		tst.b	$28(a0)
0000F440 6700                       		beq.s	loc_EF0A
0000F442 137C 0002 001C             		move.b	#2,$1C(a1)
0000F448                            
0000F448                            loc_EF0A:
0000F448 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F44C 4E75                       		rts	
0000F44E                            ; ===========================================================================
0000F44E                            
0000F44E                            loc_EF10:				; XREF: Obj4D_Main
0000F44E 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F454 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F45A 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F460 137C 0093 0020             		move.b	#$93,$20(a1)
0000F466 137C 0080 0016             		move.b	#$80,$16(a1)
0000F46C 08E9 0004 0001             		bset	#4,1(a1)
0000F472 5829 0024                  		addq.b	#4,$24(a1)
0000F476 2348 003C                  		move.l	a0,$3C(a1)
0000F47A 4A28 0028                  		tst.b	$28(a0)
0000F47E 6700                       		beq.s	Obj4D_PlaySnd
0000F480 7200                       		moveq	#0,d1
0000F482 6100 FF76                  		bsr.w	Obj4D_Loop
0000F486 5429 0024                  		addq.b	#2,$24(a1)
0000F48A 08E9 0004 0002             		bset	#4,2(a1)
0000F490 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F496 137C 0000 0018             		move.b	#0,$18(a1)
0000F49C 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F4A2 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F4A8 117C 0000 0028             		move.b	#0,$28(a0)
0000F4AE                            
0000F4AE                            Obj4D_PlaySnd:
0000F4AE 303C 00C8                  		move.w	#$C8,d0
0000F4B2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000F4B8                            
0000F4B8                            Obj4D_Action:				; XREF: Obj4D_Index
0000F4B8 7000                       		moveq	#0,d0
0000F4BA 1028 0028                  		move.b	$28(a0),d0
0000F4BE D040                       		add.w	d0,d0
0000F4C0 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F4C4 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F4C8 6100 E650                  		bsr.w	SpeedToPos
0000F4CC 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F4D2 6100 B73C                  		bsr.w	AnimateSprite
0000F4D6                            
0000F4D6                            Obj4D_ChkDel:				; XREF: Obj4C
0000F4D6 3028 0008                  		move.w	8(a0),d0
0000F4DA 0240 FF80                  		andi.w	#$FF80,d0
0000F4DE 3238 F700                  		move.w	($FFFFF700).w,d1
0000F4E2 0441 0080                  		subi.w	#$80,d1
0000F4E6 0241 FF80                  		andi.w	#$FF80,d1
0000F4EA 9041                       		sub.w	d1,d0
0000F4EC 0C40 0280                  		cmpi.w	#$280,d0
0000F4F0 6200 E68A                  		bhi.w	DeleteObject
0000F4F4 4E75                       		rts	
0000F4F6                            ; ===========================================================================
0000F4F6 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F4F8 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F4FA                            ; ===========================================================================
0000F4FA                            
0000F4FA                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F4FA 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F500 3028 0030                  		move.w	$30(a0),d0
0000F504 B068 000C                  		cmp.w	$C(a0),d0
0000F508 6400                       		bcc.s	locret_EFDA
0000F50A 5828 0024                  		addq.b	#4,$24(a0)
0000F50E 2268 003C                  		movea.l	$3C(a0),a1
0000F512 137C 0003 001C             		move.b	#3,$1C(a1)
0000F518                            
0000F518                            locret_EFDA:
0000F518 4E75                       		rts	
0000F51A                            ; ===========================================================================
0000F51A                            
0000F51A                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F51A 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F520 3028 0030                  		move.w	$30(a0),d0
0000F524 B068 000C                  		cmp.w	$C(a0),d0
0000F528 6400                       		bcc.s	locret_EFFA
0000F52A 5828 0024                  		addq.b	#4,$24(a0)
0000F52E 2268 003C                  		movea.l	$3C(a0),a1
0000F532 137C 0001 001C             		move.b	#1,$1C(a1)
0000F538                            
0000F538                            locret_EFFA:
0000F538 4E75                       		rts	
0000F53A                            ; ===========================================================================
0000F53A                            
0000F53A                            loc_EFFC:				; XREF: Obj4D_Index
0000F53A 2268 003C                  		movea.l	$3C(a0),a1
0000F53E 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F544 6700 0000                  		beq.w	Obj4D_Delete
0000F548 3029 000C                  		move.w	$C(a1),d0
0000F54C 0640 0060                  		addi.w	#$60,d0
0000F550 3140 000C                  		move.w	d0,$C(a0)
0000F554 9068 0030                  		sub.w	$30(a0),d0
0000F558 4440                       		neg.w	d0
0000F55A 7208                       		moveq	#8,d1
0000F55C 0C40 0040                  		cmpi.w	#$40,d0
0000F560 6C00                       		bge.s	loc_F026
0000F562 720B                       		moveq	#$B,d1
0000F564                            
0000F564                            loc_F026:
0000F564 0C40 0080                  		cmpi.w	#$80,d0
0000F568 6F00                       		ble.s	loc_F02E
0000F56A 720E                       		moveq	#$E,d1
0000F56C                            
0000F56C                            loc_F02E:
0000F56C 5328 001E                  		subq.b	#1,$1E(a0)
0000F570 6A00                       		bpl.s	loc_F04C
0000F572 117C 0007 001E             		move.b	#7,$1E(a0)
0000F578 5228 001B                  		addq.b	#1,$1B(a0)
0000F57C 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F582 6500                       		bcs.s	loc_F04C
0000F584 117C 0000 001B             		move.b	#0,$1B(a0)
0000F58A                            
0000F58A                            loc_F04C:
0000F58A 1028 001B                  		move.b	$1B(a0),d0
0000F58E D001                       		add.b	d1,d0
0000F590 1140 001A                  		move.b	d0,$1A(a0)
0000F594 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F598                            ; ===========================================================================
0000F598                            
0000F598                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F598 6000 E5E2                  		bra.w	DeleteObject
0000F59C                            ; ===========================================================================
0000F59C                            ; ---------------------------------------------------------------------------
0000F59C                            ; Object 4E - advancing	wall of	lava (MZ)
0000F59C                            ; ---------------------------------------------------------------------------
0000F59C                            
0000F59C                            Obj4E:					; XREF: Obj_Index
0000F59C 7000                       		moveq	#0,d0
0000F59E 1028 0024                  		move.b	$24(a0),d0
0000F5A2 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F5A6 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F5AA                            ; ===========================================================================
0000F5AA 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F5AC 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F5AE 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F5B0 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F5B2 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F5B4                            ; ===========================================================================
0000F5B4                            
0000F5B4                            Obj4E_Main:				; XREF: Obj4E_Index
0000F5B4 5828 0024                  		addq.b	#4,$24(a0)
0000F5B8 2248                       		movea.l	a0,a1
0000F5BA 7201                       		moveq	#1,d1
0000F5BC 6000                       		bra.s	Obj4E_Main2
0000F5BE                            ; ===========================================================================
0000F5BE                            
0000F5BE                            Obj4E_Loop:
0000F5BE 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F5C2 6600                       		bne.s	loc_F0C8
0000F5C4                            
0000F5C4                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F5C4 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F5C8 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F5D0 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F5D6 137C 0004 0001             		move.b	#4,1(a1)
0000F5DC 137C 0050 0019             		move.b	#$50,$19(a1)
0000F5E2 3368 0008 0008             		move.w	8(a0),8(a1)
0000F5E8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F5EE 137C 0001 0018             		move.b	#1,$18(a1)
0000F5F4 137C 0000 001C             		move.b	#0,$1C(a1)
0000F5FA 137C 0094 0020             		move.b	#$94,$20(a1)
0000F600 2348 003C                  		move.l	a0,$3C(a1)
0000F604                            
0000F604                            loc_F0C8:
0000F604 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F608                            
0000F608 5C29 0024                  		addq.b	#6,$24(a1)
0000F60C 137C 0004 001A             		move.b	#4,$1A(a1)
0000F612                            
0000F612                            Obj4E_Action:				; XREF: Obj4E_Index
0000F612 3038 D008                  		move.w	($FFFFD008).w,d0
0000F616 9068 0008                  		sub.w	8(a0),d0
0000F61A 6400                       		bcc.s	Obj4E_ChkSonic
0000F61C 4440                       		neg.w	d0
0000F61E                            
0000F61E                            Obj4E_ChkSonic:
0000F61E 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F622 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F624 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F628 9068 000C                  		sub.w	$C(a0),d0
0000F62C 6400                       		bcc.s	loc_F0F4
0000F62E 4440                       		neg.w	d0
0000F630                            
0000F630                            loc_F0F4:
0000F630 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F634 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F636 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F63C 6000                       		bra.s	Obj4E_Solid
0000F63E                            ; ===========================================================================
0000F63E                            
0000F63E                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F63E 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F642 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F644 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F64A 5528 0024                  		subq.b	#2,$24(a0)
0000F64E                            
0000F64E                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F64E 323C 002B                  		move.w	#$2B,d1
0000F652 343C 0018                  		move.w	#$18,d2
0000F656 3602                       		move.w	d2,d3
0000F658 5243                       		addq.w	#1,d3
0000F65A 3828 0008                  		move.w	8(a0),d4
0000F65E 1028 0024                  		move.b	$24(a0),d0
0000F662 3F00                       		move.w	d0,-(sp)
0000F664 6100 0000                  		bsr.w	SolidObject
0000F668 301F                       		move.w	(sp)+,d0
0000F66A 1140 0024                  		move.b	d0,$24(a0)
0000F66E 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F674 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F676 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F67A 4228 0036                  		clr.b	$36(a0)
0000F67E                            
0000F67E                            Obj4E_Animate:
0000F67E 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F684 6100 B58A                  		bsr.w	AnimateSprite
0000F688 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F68E 6400                       		bcc.s	Obj4E_ChkDel
0000F690 6100 E488                  		bsr.w	SpeedToPos
0000F694                            
0000F694                            Obj4E_ChkDel:
0000F694 6100 E4AA                  		bsr.w	DisplaySprite
0000F698 4A28 0036                  		tst.b	$36(a0)
0000F69C 6600                       		bne.s	locret_F17E
0000F69E 3028 0008                  		move.w	8(a0),d0
0000F6A2 0240 FF80                  		andi.w	#$FF80,d0
0000F6A6 3238 F700                  		move.w	($FFFFF700).w,d1
0000F6AA 0441 0080                  		subi.w	#$80,d1
0000F6AE 0241 FF80                  		andi.w	#$FF80,d1
0000F6B2 9041                       		sub.w	d1,d0
0000F6B4 0C40 0280                  		cmpi.w	#$280,d0
0000F6B8 6200                       		bhi.s	Obj4E_ChkGone
0000F6BA                            
0000F6BA                            locret_F17E:
0000F6BA 4E75                       		rts	
0000F6BC                            ; ===========================================================================
0000F6BC                            
0000F6BC                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F6BC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F6C0 7000                       		moveq	#0,d0
0000F6C2 1028 0023                  		move.b	$23(a0),d0
0000F6C6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F6CC 117C 0008 0024             		move.b	#8,$24(a0)
0000F6D2 4E75                       		rts	
0000F6D4                            ; ===========================================================================
0000F6D4                            
0000F6D4                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F6D4 2268 003C                  		movea.l	$3C(a0),a1
0000F6D8 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F6DE 6700                       		beq.s	Obj4E_Delete
0000F6E0 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F6E6 0468 0080 0008             		subi.w	#$80,8(a0)
0000F6EC 6000 E452                  		bra.w	DisplaySprite
0000F6F0                            ; ===========================================================================
0000F6F0                            
0000F6F0                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F6F0 6000 E48A                  		bra.w	DeleteObject
0000F6F4                            ; ===========================================================================
0000F6F4                            ; ---------------------------------------------------------------------------
0000F6F4                            ; Object 54 - invisible	lava tag (MZ)
0000F6F4                            ; ---------------------------------------------------------------------------
0000F6F4                            
0000F6F4                            Obj54:					; XREF: Obj_Index
0000F6F4 7000                       		moveq	#0,d0
0000F6F6 1028 0024                  		move.b	$24(a0),d0
0000F6FA 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F6FE 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F702                            ; ===========================================================================
0000F702 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F704 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F706                            
0000F706 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F70A                            ; ===========================================================================
0000F70A                            
0000F70A                            Obj54_Main:				; XREF: Obj54_Index
0000F70A 5428 0024                  		addq.b	#2,$24(a0)
0000F70E 7000                       		moveq	#0,d0
0000F710 1028 0028                  		move.b	$28(a0),d0
0000F714 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F71A 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F722 117C 0084 0001             		move.b	#$84,1(a0)
0000F728                            
0000F728                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F728 3028 0008                  		move.w	8(a0),d0
0000F72C 0240 FF80                  		andi.w	#$FF80,d0
0000F730 3238 F700                  		move.w	($FFFFF700).w,d1
0000F734 0441 0080                  		subi.w	#$80,d1
0000F738 0241 FF80                  		andi.w	#$FF80,d1
0000F73C 9041                       		sub.w	d1,d0
0000F73E 6B00 E43C                  		bmi.w	DeleteObject
0000F742 0C40 0280                  		cmpi.w	#$280,d0
0000F746 6200 E434                  		bhi.w	DeleteObject
0000F74A 4E75                       		rts	
0000F74C                            ; ===========================================================================
0000F74C                            ; ---------------------------------------------------------------------------
0000F74C                            ; Sprite mappings - invisible lava tag (MZ)
0000F74C                            ; ---------------------------------------------------------------------------
0000F74C                            Map_obj54:
0000F74C                            	include "_maps\obj54.asm"
0000F74C                            ; ---------------------------------------------------------------------------
0000F74C                            ; Sprite mappings - invisible lava tag (MZ)
0000F74C                            ; ---------------------------------------------------------------------------
0000F74C 0000                       		dc.w byte_F212-Map_obj54
0000F74E 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F750 00                         		even
0000F750 00                         		even
0000F750                            
0000F750                            Ani_obj4C:
0000F750                            	include "_anim\obj4C.asm"
0000F750                            ; ---------------------------------------------------------------------------
0000F750                            ; Animation script - geyser of lava (MZ)
0000F750                            ; ---------------------------------------------------------------------------
0000F750 0000                       		dc.w byte_F220-Ani_obj4C
0000F752 0000                       		dc.w byte_F22A-Ani_obj4C
0000F754 0000                       		dc.w byte_F22E-Ani_obj4C
0000F756 0000                       		dc.w byte_F232-Ani_obj4C
0000F758 0000                       		dc.w byte_F23A-Ani_obj4C
0000F75A 0000                       		dc.w byte_F23E-Ani_obj4C
0000F75C 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F766 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F76A 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F76E 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F776 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F77A 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F77E                            		even
0000F77E                            		even
0000F77E                            
0000F77E                            Ani_obj4E:
0000F77E                            	include "_anim\obj4E.asm"
0000F77E                            ; ---------------------------------------------------------------------------
0000F77E                            ; Animation script - advancing wall of lava (MZ)
0000F77E                            ; ---------------------------------------------------------------------------
0000F77E 0000                       		dc.w byte_F244-Ani_obj4E
0000F780 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F786                            		even
0000F786                            		even
0000F786                            
0000F786                            ; ---------------------------------------------------------------------------
0000F786                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F786                            ; ---------------------------------------------------------------------------
0000F786                            Map_obj4C:
0000F786                            	include "_maps\obj4C.asm"
0000F786                            ; ---------------------------------------------------------------------------
0000F786                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F786                            ; ---------------------------------------------------------------------------
0000F786 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F78A 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F78E 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F792 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F796 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F79A 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F79E 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F7A2 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F7A6 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F7AA 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F7AE 02                         byte_F272:	dc.b 2
0000F7AF EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F7B4 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F7B9 02                         byte_F27D:	dc.b 2
0000F7BA EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F7BF EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F7C4 04                         byte_F288:	dc.b 4
0000F7C5 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F7CA F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F7CF F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F7D4 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F7D9 04                         byte_F29D:	dc.b 4
0000F7DA EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F7DF F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F7E4 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F7E9 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F7EE 06                         byte_F2B2:	dc.b 6
0000F7EF EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F7F4 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F7F9 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F7FE EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F803 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000F808 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000F80D 06                         byte_F2D1:	dc.b 6
0000F80E EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F813 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F818 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F81D EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F822 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000F827 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000F82C 02                         byte_F2F0:	dc.b 2
0000F82D E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000F832 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000F837 02                         byte_F2FB:	dc.b 2
0000F838 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000F83D E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000F842 0A                         byte_F306:	dc.b $A
0000F843 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F848 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F84D B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F852 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F857 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F85C D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F861 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F866 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F86B 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F870 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F875 0A                         byte_F339:	dc.b $A
0000F876 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F87B 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F880 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F885 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F88A D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F88F D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F894 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F899 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F89E 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F8A3 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F8A8 0A                         byte_F36C:	dc.b $A
0000F8A9 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F8AE 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F8B3 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F8B8 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F8BD D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F8C2 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F8C7 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F8CC F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F8D1 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F8D6 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F8DB 06                         byte_F39F:	dc.b 6
0000F8DC 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F8E1 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F8E6 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F8EB B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F8F0 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F8F5 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F8FA 06                         byte_F3BE:	dc.b 6
0000F8FB 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F900 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F905 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F90A B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F90F D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F914 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F919 06                         byte_F3DD:	dc.b 6
0000F91A 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F91F 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F924 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F929 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F92E D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F933 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F938 10                         byte_F3FC:	dc.b $10
0000F939 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F93E 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F943 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F948 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F94D D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F952 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F957 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F95C F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F961 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F966 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F96B 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000F970 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000F975 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000F97A 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000F97F 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000F984 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000F989 10                         byte_F44D:	dc.b $10
0000F98A 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F98F 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F994 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F999 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F99E D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F9A3 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F9A8 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F9AD F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F9B2 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F9B7 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F9BC 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000F9C1 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000F9C6 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000F9CB 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000F9D0 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000F9D5 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000F9DA 10                         byte_F49E:	dc.b $10
0000F9DB 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F9E0 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F9E5 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F9EA B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F9EF D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F9F4 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F9F9 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F9FE F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FA03 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FA08 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FA0D 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FA12 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FA17 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FA1C 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FA21 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FA26 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FA2B 06                         byte_F4EF:	dc.b 6
0000FA2C E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FA31 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FA36 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FA3B E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FA40 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FA45 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FA4A 06                         byte_F50E:	dc.b 6
0000FA4B E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FA50 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FA55 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FA5A E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FA5F D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FA64 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FA69 00                         byte_F52D:	dc.b 0
0000FA6A                            		even
0000FA6A                            		even
0000FA6A                            
0000FA6A                            ; ---------------------------------------------------------------------------
0000FA6A                            ; Sprite mappings - advancing wall of lava (MZ)
0000FA6A                            ; ---------------------------------------------------------------------------
0000FA6A                            Map_obj4E:
0000FA6A                            	include "_maps\obj4E.asm"
0000FA6A                            ; ---------------------------------------------------------------------------
0000FA6A                            ; Sprite mappings - advancing wall of lava (MZ)
0000FA6A                            ; ---------------------------------------------------------------------------
0000FA6A 0000                       		dc.w byte_F538-Map_obj4E
0000FA6C 0000                       		dc.w byte_F566-Map_obj4E
0000FA6E 0000                       		dc.w byte_F594-Map_obj4E
0000FA70 0000                       		dc.w byte_F5C2-Map_obj4E
0000FA72 0000                       		dc.w byte_F5F0-Map_obj4E
0000FA74 09                         byte_F538:	dc.b 9
0000FA75 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FA7A 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FA7F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FA84 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FA89 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FA8E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FA93 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FA98 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FA9D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FAA2 09                         byte_F566:	dc.b 9
0000FAA3 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FAA8 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FAAD 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FAB2 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FAB7 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FABC E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FAC1 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FAC6 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FACB 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FAD0 09                         byte_F594:	dc.b 9
0000FAD1 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FAD6 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FADB 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FAE0 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FAE5 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FAEA E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FAEF 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FAF4 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FAF9 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FAFE 09                         byte_F5C2:	dc.b 9
0000FAFF E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FB04 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FB09 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB0E E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB13 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB18 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB1D 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB22 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB27 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB2C 08                         byte_F5F0:	dc.b 8
0000FB2D E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FB32 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB37 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB3C 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB41 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB46 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB4B E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB50 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB56 00                         		even
0000FB56 00                         		even
0000FB56                            
0000FB56                            ; ===========================================================================
0000FB56                            ; ---------------------------------------------------------------------------
0000FB56                            ; Object 40 - Moto Bug enemy (GHZ)
0000FB56                            ; ---------------------------------------------------------------------------
0000FB56                            
0000FB56                            Obj40:					; XREF: Obj_Index
0000FB56 7000                       		moveq	#0,d0
0000FB58 1028 0024                  		move.b	$24(a0),d0
0000FB5C 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FB60 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FB64                            ; ===========================================================================
0000FB64 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FB66 0000                       		dc.w Obj40_Action-Obj40_Index
0000FB68 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FB6A 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FB6C                            ; ===========================================================================
0000FB6C                            
0000FB6C                            Obj40_Main:				; XREF: Obj40_Index
0000FB6C 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FB74 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FB7A 117C 0004 0001             		move.b	#4,1(a0)
0000FB80 117C 0004 0018             		move.b	#4,$18(a0)
0000FB86 117C 0014 0019             		move.b	#$14,$19(a0)
0000FB8C 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FB90 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FB92 117C 000E 0016             		move.b	#$E,$16(a0)
0000FB98 117C 0008 0017             		move.b	#8,$17(a0)
0000FB9E 117C 000C 0020             		move.b	#$C,$20(a0)
0000FBA4 6100 DF48                  		bsr.w	ObjectFall
0000FBA8 4EB9 0000 0000             		jsr	ObjHitFloor
0000FBAE 4A41                       		tst.w	d1
0000FBB0 6A00                       		bpl.s	locret_F68A
0000FBB2 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FBB6 317C 0000 0012             		move.w	#0,$12(a0)
0000FBBC 5428 0024                  		addq.b	#2,$24(a0)
0000FBC0 0868 0000 0022             		bchg	#0,$22(a0)
0000FBC6                            
0000FBC6                            locret_F68A:
0000FBC6 4E75                       		rts	
0000FBC8                            ; ===========================================================================
0000FBC8                            
0000FBC8                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FBC8 5828 0024                  		addq.b	#4,$24(a0)
0000FBCC 6000 0000                  		bra.w	Obj40_Animate
0000FBD0                            ; ===========================================================================
0000FBD0                            
0000FBD0                            Obj40_Action:				; XREF: Obj40_Index
0000FBD0 7000                       		moveq	#0,d0
0000FBD2 1028 0025                  		move.b	$25(a0),d0
0000FBD6 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FBDA 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FBDE 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FBE4 6100 B02A                  		bsr.w	AnimateSprite
0000FBE8                            
0000FBE8                            ; ---------------------------------------------------------------------------
0000FBE8                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FBE8                            ; ---------------------------------------------------------------------------
0000FBE8                            
0000FBE8                            MarkObjGone:
0000FBE8 3028 0008                  		move.w	8(a0),d0
0000FBEC 0240 FF80                  		andi.w	#$FF80,d0
0000FBF0 3238 F700                  		move.w	($FFFFF700).w,d1
0000FBF4 0441 0080                  		subi.w	#$80,d1
0000FBF8 0241 FF80                  		andi.w	#$FF80,d1
0000FBFC 9041                       		sub.w	d1,d0
0000FBFE 0C40 0280                  		cmpi.w	#$280,d0
0000FC02 6200 0000                  		bhi.w	Mark_ChkGone
0000FC06 6000 DF38                  		bra.w	DisplaySprite
0000FC0A                            ; ===========================================================================
0000FC0A                            
0000FC0A                            Mark_ChkGone:
0000FC0A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FC0E 7000                       		moveq	#0,d0
0000FC10 1028 0023                  		move.b	$23(a0),d0
0000FC14 6700                       		beq.s	Mark_Delete
0000FC16 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FC1C                            
0000FC1C                            Mark_Delete:
0000FC1C 6000 DF5E                  		bra.w	DeleteObject
0000FC20                            
0000FC20                            ; ===========================================================================
0000FC20 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FC22 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FC24                            ; ===========================================================================
0000FC24                            
0000FC24                            Obj40_Move:				; XREF: Obj40_Index2
0000FC24 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FC28 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FC2A 5428 0025                  		addq.b	#2,$25(a0)
0000FC2E 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FC34 117C 0001 001C             		move.b	#1,$1C(a0)
0000FC3A 0868 0000 0022             		bchg	#0,$22(a0)
0000FC40 6600                       		bne.s	locret_F70A
0000FC42 4468 0010                  		neg.w	$10(a0)		; change direction
0000FC46                            
0000FC46                            locret_F70A:
0000FC46 4E75                       		rts	
0000FC48                            ; ===========================================================================
0000FC48                            
0000FC48                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FC48 6100 DED0                  		bsr.w	SpeedToPos
0000FC4C 4EB9 0000 0000             		jsr	ObjHitFloor
0000FC52 0C41 FFF8                  		cmpi.w	#-8,d1
0000FC56 6D00                       		blt.s	Obj40_Pause
0000FC58 0C41 000C                  		cmpi.w	#$C,d1
0000FC5C 6C00                       		bge.s	Obj40_Pause
0000FC5E D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FC62 5328 0033                  		subq.b	#1,$33(a0)
0000FC66 6A00                       		bpl.s	locret_F756
0000FC68 117C 000F 0033             		move.b	#$F,$33(a0)
0000FC6E 6100 E356                  		bsr.w	SingleObjLoad
0000FC72 6600                       		bne.s	locret_F756
0000FC74 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FC78 3368 0008 0008             		move.w	8(a0),8(a1)
0000FC7E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FC84 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FC8A 137C 0002 001C             		move.b	#2,$1C(a1)
0000FC90                            
0000FC90                            locret_F756:
0000FC90 4E75                       		rts	
0000FC92                            ; ===========================================================================
0000FC92                            
0000FC92                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FC92 5528 0025                  		subq.b	#2,$25(a0)
0000FC96 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FC9C 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FCA2 117C 0000 001C             		move.b	#0,$1C(a0)
0000FCA8 4E75                       		rts	
0000FCAA                            ; ===========================================================================
0000FCAA                            
0000FCAA                            Obj40_Animate:				; XREF: Obj40_Index
0000FCAA 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FCB0 6100 AF5E                  		bsr.w	AnimateSprite
0000FCB4 6000 DE8A                  		bra.w	DisplaySprite
0000FCB8                            ; ===========================================================================
0000FCB8                            
0000FCB8                            Obj40_Delete:				; XREF: Obj40_Index
0000FCB8 6000 DEC2                  		bra.w	DeleteObject
0000FCBC                            ; ===========================================================================
0000FCBC                            Ani_obj40:
0000FCBC                            	include "_anim\obj40.asm"
0000FCBC                            ; ---------------------------------------------------------------------------
0000FCBC                            ; Animation script - Motobug enemy
0000FCBC                            ; ---------------------------------------------------------------------------
0000FCBC 0000                       		dc.w byte_F788-Ani_obj40
0000FCBE 0000                       		dc.w byte_F78C-Ani_obj40
0000FCC0 0000                       		dc.w byte_F792-Ani_obj40
0000FCC2 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FCC6 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FCCC 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FCDA                            		even
0000FCDA                            		even
0000FCDA                            
0000FCDA                            ; ---------------------------------------------------------------------------
0000FCDA                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FCDA                            ; ---------------------------------------------------------------------------
0000FCDA                            Map_obj40:
0000FCDA                            	include "_maps\obj40.asm"
0000FCDA                            Map_cedc:
0000FCDA 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000FCDC 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000FCDE 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0000FCE0 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0000FCE2 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0000FCE4 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0000FCE6 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0000FCE8 04                         Map_cedc_E: 	dc.b $4
0000FCE9 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FCEE 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0000FCF3 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FCF8 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0000FCFD 04                         Map_cedc_23: 	dc.b $4
0000FCFE F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0000FD03 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0000FD08 F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0000FD0D 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0000FD12 05                         Map_cedc_38: 	dc.b $5
0000FD13 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FD18 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0000FD1D F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FD22 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0000FD27 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0000FD2C 01                         Map_cedc_52: 	dc.b $1
0000FD2D FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0000FD32 01                         Map_cedc_58: 	dc.b $1
0000FD33 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0000FD38 01                         Map_cedc_5E: 	dc.b $1
0000FD39 FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0000FD3E 00                         Map_cedc_64: 	dc.b $0
0000FD40 00                         	even
0000FD40 00                         	even
0000FD40                            
0000FD40                            ; ===========================================================================
0000FD40                            ; ---------------------------------------------------------------------------
0000FD40                            ; Object 4F - blank
0000FD40                            ; ---------------------------------------------------------------------------
0000FD40                            
0000FD40                            Obj4F:					; XREF: Obj_Index
0000FD40 4E75                       		rts	
0000FD42                            
0000FD42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FD42                            
0000FD42                            
0000FD42                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000FD42 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000FD46 D047                       		add.w	d7,d0
0000FD48 0240 0003                  		andi.w	#3,d0
0000FD4C 6600                       		bne.s	loc_F836
0000FD4E 7600                       		moveq	#0,d3
0000FD50 1628 0019                  		move.b	$19(a0),d3
0000FD54 4A68 0010                  		tst.w	$10(a0)
0000FD58 6B00                       		bmi.s	loc_F82C
0000FD5A 6100 0000                  		bsr.w	ObjHitWallRight
0000FD5E 4A41                       		tst.w	d1
0000FD60 6A00                       		bpl.s	loc_F836
0000FD62                            
0000FD62                            loc_F828:
0000FD62 7001                       		moveq	#1,d0
0000FD64 4E75                       		rts	
0000FD66                            ; ===========================================================================
0000FD66                            
0000FD66                            loc_F82C:
0000FD66 4643                       		not.w	d3
0000FD68 6100 0000                  		bsr.w	ObjHitWallLeft
0000FD6C 4A41                       		tst.w	d1
0000FD6E 6BF2                       		bmi.s	loc_F828
0000FD70                            
0000FD70                            loc_F836:
0000FD70 7000                       		moveq	#0,d0
0000FD72 4E75                       		rts	
0000FD74                            ; End of function Obj50_ChkWall
0000FD74                            
0000FD74                            ; ===========================================================================
0000FD74                            ; ---------------------------------------------------------------------------
0000FD74                            ; Object 50 - Yadrin enemy (SYZ)
0000FD74                            ; ---------------------------------------------------------------------------
0000FD74                            
0000FD74                            Obj50:					; XREF: Obj_Index
0000FD74 7000                       		moveq	#0,d0
0000FD76 1028 0024                  		move.b	$24(a0),d0
0000FD7A 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000FD7E 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000FD82                            ; ===========================================================================
0000FD82 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000FD84 0000                       		dc.w Obj50_Action-Obj50_Index
0000FD86                            ; ===========================================================================
0000FD86                            
0000FD86                            Obj50_Main:				; XREF: Obj50_Index
0000FD86 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000FD8E 317C 247B 0002             		move.w	#$247B,2(a0)
0000FD94 117C 0004 0001             		move.b	#4,1(a0)
0000FD9A 117C 0004 0018             		move.b	#4,$18(a0)
0000FDA0 117C 0014 0019             		move.b	#$14,$19(a0)
0000FDA6 117C 0011 0016             		move.b	#$11,$16(a0)
0000FDAC 117C 0008 0017             		move.b	#8,$17(a0)
0000FDB2 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000FDB8 6100 DD34                  		bsr.w	ObjectFall
0000FDBC 6100 0000                  		bsr.w	ObjHitFloor
0000FDC0 4A41                       		tst.w	d1
0000FDC2 6A00                       		bpl.s	locret_F89E
0000FDC4 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FDC8 317C 0000 0012             		move.w	#0,$12(a0)
0000FDCE 5428 0024                  		addq.b	#2,$24(a0)
0000FDD2 0868 0000 0022             		bchg	#0,$22(a0)
0000FDD8                            
0000FDD8                            locret_F89E:
0000FDD8 4E75                       		rts	
0000FDDA                            ; ===========================================================================
0000FDDA                            
0000FDDA                            Obj50_Action:				; XREF: Obj50_Index
0000FDDA 7000                       		moveq	#0,d0
0000FDDC 1028 0025                  		move.b	$25(a0),d0
0000FDE0 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0000FDE4 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0000FDE8 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0000FDEE 6100 AE20                  		bsr.w	AnimateSprite
0000FDF2 6000 FDF4                  		bra.w	MarkObjGone
0000FDF6                            ; ===========================================================================
0000FDF6 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0000FDF8 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0000FDFA                            ; ===========================================================================
0000FDFA                            
0000FDFA                            Obj50_Move:				; XREF: Obj50_Index2
0000FDFA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FDFE 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000FE00 5428 0025                  		addq.b	#2,$25(a0)
0000FE04 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0000FE0A 117C 0001 001C             		move.b	#1,$1C(a0)
0000FE10 0868 0000 0022             		bchg	#0,$22(a0)
0000FE16 6600                       		bne.s	locret_F8E2
0000FE18 4468 0010                  		neg.w	$10(a0)		; change direction
0000FE1C                            
0000FE1C                            locret_F8E2:
0000FE1C 4E75                       		rts	
0000FE1E                            ; ===========================================================================
0000FE1E                            
0000FE1E                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0000FE1E 6100 DCFA                  		bsr.w	SpeedToPos
0000FE22 6100 0000                  		bsr.w	ObjHitFloor
0000FE26 0C41 FFF8                  		cmpi.w	#-8,d1
0000FE2A 6D00                       		blt.s	Obj50_Pause
0000FE2C 0C41 000C                  		cmpi.w	#$C,d1
0000FE30 6C00                       		bge.s	Obj50_Pause
0000FE32 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0000FE36 6100 FF0A                  		bsr.w	Obj50_ChkWall
0000FE3A 6600                       		bne.s	Obj50_Pause
0000FE3C 4E75                       		rts	
0000FE3E                            ; ===========================================================================
0000FE3E                            
0000FE3E                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0000FE3E 5528 0025                  		subq.b	#2,$25(a0)
0000FE42 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FE48 317C 0000 0010             		move.w	#0,$10(a0)
0000FE4E 117C 0000 001C             		move.b	#0,$1C(a0)
0000FE54 4E75                       		rts	
0000FE56                            ; ===========================================================================
0000FE56                            Ani_obj50:
0000FE56                            	include "_anim\obj50.asm"
0000FE56                            ; ---------------------------------------------------------------------------
0000FE56                            ; Animation script - Yadrin enemy
0000FE56                            ; ---------------------------------------------------------------------------
0000FE56 0000                       		dc.w byte_F920-Ani_obj50
0000FE58 0000                       		dc.w byte_F924-Ani_obj50
0000FE5A 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0000FE5E 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0000FE68                            		even
0000FE68                            		even
0000FE68                            
0000FE68                            ; ---------------------------------------------------------------------------
0000FE68                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FE68                            ; ---------------------------------------------------------------------------
0000FE68                            Map_obj50:
0000FE68                            	include "_maps\obj50.asm"
0000FE68                            ; ---------------------------------------------------------------------------
0000FE68                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FE68                            ; ---------------------------------------------------------------------------
0000FE68 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0000FE6C 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0000FE70 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0000FE74 05                         byte_F93A:	dc.b 5
0000FE75 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FE7A FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FE7F EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FE84 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FE89 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FE8E 05                         byte_F954:	dc.b 5
0000FE8F F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FE94 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FE99 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FE9E F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FEA3 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FEA8 05                         byte_F96E:	dc.b 5
0000FEA9 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FEAE 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FEB3 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FEB8 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FEBD 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FEC2 05                         byte_F988:	dc.b 5
0000FEC3 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FEC8 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FECD EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FED2 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FED7 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FEDC 05                         byte_F9A2:	dc.b 5
0000FEDD F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FEE2 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FEE7 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FEEC F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FEF1 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FEF6 05                         byte_F9BC:	dc.b 5
0000FEF7 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FEFC 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FF01 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF06 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF0B 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FF10                            		even
0000FF10                            		even
0000FF10                            
0000FF10                            ; ---------------------------------------------------------------------------
0000FF10                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0000FF10                            ;
0000FF10                            ; variables:
0000FF10                            ; d1 = width
0000FF10                            ; d2 = height /	2 (when	jumping)
0000FF10                            ; d3 = height /	2 (when	walking)
0000FF10                            ; d4 = x-axis position
0000FF10                            ; ---------------------------------------------------------------------------
0000FF10                            
0000FF10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FF10                            
0000FF10                            
0000FF10                            SolidObject:
0000FF10 4A28 0025                  		tst.b	$25(a0)
0000FF14 6700 0000                  		beq.w	loc_FAC8
0000FF18 3401                       		move.w	d1,d2
0000FF1A D442                       		add.w	d2,d2
0000FF1C 43F8 D000                  		lea	($FFFFD000).w,a1
0000FF20 0829 0001 0022             		btst	#1,$22(a1)
0000FF26 6600                       		bne.s	loc_F9FE
0000FF28 3029 0008                  		move.w	8(a1),d0
0000FF2C 9068 0008                  		sub.w	8(a0),d0
0000FF30 D041                       		add.w	d1,d0
0000FF32 6B00                       		bmi.s	loc_F9FE
0000FF34 B042                       		cmp.w	d2,d0
0000FF36 6500                       		bcs.s	loc_FA12
0000FF38                            
0000FF38                            loc_F9FE:
0000FF38 08A9 0003 0022             		bclr	#3,$22(a1)
0000FF3E 08A8 0003 0022             		bclr	#3,$22(a0)
0000FF44 4228 0025                  		clr.b	$25(a0)
0000FF48 7800                       		moveq	#0,d4
0000FF4A 4E75                       		rts	
0000FF4C                            ; ===========================================================================
0000FF4C                            
0000FF4C                            loc_FA12:
0000FF4C 3404                       		move.w	d4,d2
0000FF4E                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
0000FF4E 7800                       		moveq	#0,d4
0000FF50 4E75                       		rts	
0000FF52                            ; ===========================================================================
0000FF52                            
0000FF52                            SolidObject71:				; XREF: Obj71_Solid
0000FF52 4A28 0025                  		tst.b	$25(a0)
0000FF56 6700 0000                  		beq.w	loc_FAD0
0000FF5A 3401                       		move.w	d1,d2
0000FF5C D442                       		add.w	d2,d2
0000FF5E 43F8 D000                  		lea	($FFFFD000).w,a1
0000FF62 0829 0001 0022             		btst	#1,$22(a1)
0000FF68 6600                       		bne.s	loc_FA44
0000FF6A 3029 0008                  		move.w	8(a1),d0
0000FF6E 9068 0008                  		sub.w	8(a0),d0
0000FF72 D041                       		add.w	d1,d0
0000FF74 6B00                       		bmi.s	loc_FA44
0000FF76 B042                       		cmp.w	d2,d0
0000FF78 6500                       		bcs.s	loc_FA58
0000FF7A                            
0000FF7A                            loc_FA44:
0000FF7A 08A9 0003 0022             		bclr	#3,$22(a1)
0000FF80 08A8 0003 0022             		bclr	#3,$22(a0)
0000FF86 4228 0025                  		clr.b	$25(a0)
0000FF8A 7800                       		moveq	#0,d4
0000FF8C 4E75                       		rts	
0000FF8E                            ; ===========================================================================
0000FF8E                            
0000FF8E                            loc_FA58:
0000FF8E 3404                       		move.w	d4,d2
0000FF90                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
0000FF90 7800                       		moveq	#0,d4
0000FF92 4E75                       		rts	
0000FF94                            ; ===========================================================================
0000FF94                            
0000FF94                            SolidObject2F:				; XREF: Obj2F_Solid
0000FF94 43F8 D000                  		lea	($FFFFD000).w,a1
0000FF98 4A28 0001                  		tst.b	1(a0)
0000FF9C 6A00 0000                  		bpl.w	loc_FB92
0000FFA0 3029 0008                  		move.w	8(a1),d0
0000FFA4 9068 0008                  		sub.w	8(a0),d0
0000FFA8 D041                       		add.w	d1,d0
0000FFAA 6B00 0000                  		bmi.w	loc_FB92
0000FFAE 3601                       		move.w	d1,d3
0000FFB0 D643                       		add.w	d3,d3
0000FFB2 B043                       		cmp.w	d3,d0
0000FFB4 6200 0000                  		bhi.w	loc_FB92
0000FFB8 3A00                       		move.w	d0,d5
0000FFBA 0828 0000 0001             		btst	#0,1(a0)
0000FFC0 6700                       		beq.s	loc_FA94
0000FFC2 4645                       		not.w	d5
0000FFC4 DA43                       		add.w	d3,d5
0000FFC6                            
0000FFC6                            loc_FA94:
0000FFC6 E24D                       		lsr.w	#1,d5
0000FFC8 7600                       		moveq	#0,d3
0000FFCA 1632 5000                  		move.b	(a2,d5.w),d3
0000FFCE 9612                       		sub.b	(a2),d3
0000FFD0 3A28 000C                  		move.w	$C(a0),d5
0000FFD4 9A43                       		sub.w	d3,d5
0000FFD6 1629 0016                  		move.b	$16(a1),d3
0000FFDA 4883                       		ext.w	d3
0000FFDC D443                       		add.w	d3,d2
0000FFDE 3629 000C                  		move.w	$C(a1),d3
0000FFE2 9645                       		sub.w	d5,d3
0000FFE4 5843                       		addq.w	#4,d3
0000FFE6 D642                       		add.w	d2,d3
0000FFE8 6B00 0000                  		bmi.w	loc_FB92
0000FFEC 3802                       		move.w	d2,d4
0000FFEE D844                       		add.w	d4,d4
0000FFF0 B644                       		cmp.w	d4,d3
0000FFF2 6400 0000                  		bcc.w	loc_FB92
0000FFF6 6000 0000                  		bra.w	loc_FB0E
0000FFFA                            ; ===========================================================================
0000FFFA                            
0000FFFA                            loc_FAC8:
0000FFFA 4A28 0001                  		tst.b	1(a0)
0000FFFE 6A00 0000                  		bpl.w	loc_FB92
00010002                            
00010002                            loc_FAD0:
00010002 43F8 D000                  		lea	($FFFFD000).w,a1
00010006 3029 0008                  		move.w	8(a1),d0
0001000A 9068 0008                  		sub.w	8(a0),d0
0001000E D041                       		add.w	d1,d0
00010010 6B00 0000                  		bmi.w	loc_FB92
00010014 3601                       		move.w	d1,d3
00010016 D643                       		add.w	d3,d3
00010018 B043                       		cmp.w	d3,d0
0001001A 6200 0000                  		bhi.w	loc_FB92
0001001E 1629 0016                  		move.b	$16(a1),d3
00010022 4883                       		ext.w	d3
00010024 D443                       		add.w	d3,d2
00010026 3629 000C                  		move.w	$C(a1),d3
0001002A 9668 000C                  		sub.w	$C(a0),d3
0001002E 5843                       		addq.w	#4,d3
00010030 D642                       		add.w	d2,d3
00010032 6B00 0000                  		bmi.w	loc_FB92
00010036 3802                       		move.w	d2,d4
00010038 D844                       		add.w	d4,d4
0001003A B644                       		cmp.w	d4,d3
0001003C 6400 0000                  		bcc.w	loc_FB92
00010040                            
00010040                            loc_FB0E:
00010040 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010044 6B00 0000                  		bmi.w	loc_FB92
00010048 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001004E 6400 0000                  		bcc.w	loc_FB92
00010052 4A78 FE08                  		tst.w	($FFFFFE08).w
00010056 6600 0000                  		bne.w	loc_FBAC
0001005A 3A00                       		move.w	d0,d5
0001005C B240                       		cmp.w	d0,d1
0001005E 6400                       		bcc.s	loc_FB36
00010060 D241                       		add.w	d1,d1
00010062 9041                       		sub.w	d1,d0
00010064 3A00                       		move.w	d0,d5
00010066 4445                       		neg.w	d5
00010068                            
00010068                            loc_FB36:
00010068 3203                       		move.w	d3,d1
0001006A B443                       		cmp.w	d3,d2
0001006C 6400                       		bcc.s	loc_FB44
0001006E 5943                       		subq.w	#4,d3
00010070 9644                       		sub.w	d4,d3
00010072 3203                       		move.w	d3,d1
00010074 4441                       		neg.w	d1
00010076                            
00010076                            loc_FB44:
00010076 BA41                       		cmp.w	d1,d5
00010078 6200 0000                  		bhi.w	loc_FBB0
0001007C 0C41 0004                  		cmpi.w	#4,d1
00010080 6300                       		bls.s	loc_FB8C
00010082 4A40                       		tst.w	d0
00010084 6700                       		beq.s	loc_FB70
00010086 6B00                       		bmi.s	loc_FB5E
00010088 4A69 0010                  		tst.w	$10(a1)
0001008C 6B00                       		bmi.s	loc_FB70
0001008E 6000                       		bra.s	loc_FB64
00010090                            ; ===========================================================================
00010090                            
00010090                            loc_FB5E:
00010090 4A69 0010                  		tst.w	$10(a1)
00010094 6A00                       		bpl.s	loc_FB70
00010096                            
00010096                            loc_FB64:
00010096 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
0001009C 337C 0000 0010             		move.w	#0,$10(a1)
000100A2                            
000100A2                            loc_FB70:
000100A2 9169 0008                  		sub.w	d0,8(a1)
000100A6 0829 0001 0022             		btst	#1,$22(a1)
000100AC 6600                       		bne.s	loc_FB8C
000100AE 08E9 0005 0022             		bset	#5,$22(a1)
000100B4 08E8 0005 0022             		bset	#5,$22(a0)
000100BA 7801                       		moveq	#1,d4
000100BC 4E75                       		rts	
000100BE                            ; ===========================================================================
000100BE                            
000100BE                            loc_FB8C:
000100BE 6100                       		bsr.s	loc_FBA0
000100C0 7801                       		moveq	#1,d4
000100C2 4E75                       		rts	
000100C4                            ; ===========================================================================
000100C4                            
000100C4                            loc_FB92:
000100C4 0828 0005 0022             		btst	#5,$22(a0)
000100CA 6700                       		beq.s	loc_FBAC
000100CC 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
000100D2                            
000100D2                            loc_FBA0:
000100D2 08A8 0005 0022             		bclr	#5,$22(a0)
000100D8 08A9 0005 0022             		bclr	#5,$22(a1)
000100DE                            
000100DE                            loc_FBAC:
000100DE 7800                       		moveq	#0,d4
000100E0 4E75                       		rts	
000100E2                            ; ===========================================================================
000100E2                            
000100E2                            loc_FBB0:
000100E2 4A43                       		tst.w	d3
000100E4 6B00                       		bmi.s	loc_FBBC
000100E6 0C43 0010                  		cmpi.w	#$10,d3
000100EA 6500                       		bcs.s	loc_FBEE
000100EC 60D6                       		bra.s	loc_FB92
000100EE                            ; ===========================================================================
000100EE                            
000100EE                            loc_FBBC:
000100EE 4A69 0012                  		tst.w	$12(a1)
000100F2 6700                       		beq.s	loc_FBD6
000100F4 6A00                       		bpl.s	loc_FBD2
000100F6 4A43                       		tst.w	d3
000100F8 6A00                       		bpl.s	loc_FBD2
000100FA 9769 000C                  		sub.w	d3,$C(a1)
000100FE 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00010104                            
00010104                            loc_FBD2:
00010104 78FF                       		moveq	#-1,d4
00010106 4E75                       		rts	
00010108                            ; ===========================================================================
00010108                            
00010108                            loc_FBD6:
00010108 0829 0001 0022             		btst	#1,$22(a1)
0001010E 66F4                       		bne.s	loc_FBD2
00010110 2F08                       		move.l	a0,-(sp)
00010112 2049                       		movea.l	a1,a0
00010114 4EB9 0000 0000             		jsr	KillSonic
0001011A 205F                       		movea.l	(sp)+,a0
0001011C 78FF                       		moveq	#-1,d4
0001011E 4E75                       		rts	
00010120                            ; ===========================================================================
00010120                            
00010120                            loc_FBEE:
00010120 5943                       		subq.w	#4,d3
00010122 7200                       		moveq	#0,d1
00010124 1228 0019                  		move.b	$19(a0),d1
00010128 3401                       		move.w	d1,d2
0001012A D442                       		add.w	d2,d2
0001012C D269 0008                  		add.w	8(a1),d1
00010130 9268 0008                  		sub.w	8(a0),d1
00010134 6B00                       		bmi.s	loc_FC28
00010136 B242                       		cmp.w	d2,d1
00010138 6400                       		bcc.s	loc_FC28
0001013A 4A69 0012                  		tst.w	$12(a1)
0001013E 6B00                       		bmi.s	loc_FC28
00010140 9769 000C                  		sub.w	d3,$C(a1)
00010144 5369 000C                  		subq.w	#1,$C(a1)
00010148 6100                       		bsr.s	sub_FC2C
0001014A 117C 0002 0025             		move.b	#2,$25(a0)
00010150 08E8 0003 0022             		bset	#3,$22(a0)
00010156 78FF                       		moveq	#-1,d4
00010158 4E75                       		rts	
0001015A                            ; ===========================================================================
0001015A                            
0001015A                            loc_FC28:
0001015A 7800                       		moveq	#0,d4
0001015C 4E75                       		rts	
0001015E                            ; End of function SolidObject
0001015E                            
0001015E                            
0001015E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001015E                            
0001015E                            
0001015E                            sub_FC2C:				; XREF: SolidObject
0001015E 0829 0003 0022             		btst	#3,$22(a1)
00010164 6700                       		beq.s	loc_FC4E
00010166 7000                       		moveq	#0,d0
00010168 1029 003D                  		move.b	$3D(a1),d0
0001016C ED48                       		lsl.w	#6,d0
0001016E 0680 00FF D000             		addi.l	#$FFD000,d0
00010174 2440                       		movea.l	d0,a2
00010176 08AA 0003 0022             		bclr	#3,$22(a2)
0001017C 422A 0025                  		clr.b	$25(a2)
00010180                            
00010180                            loc_FC4E:
00010180 3008                       		move.w	a0,d0
00010182 0440 D000                  		subi.w	#-$3000,d0
00010186 EC48                       		lsr.w	#6,d0
00010188 0240 007F                  		andi.w	#$7F,d0
0001018C 1340 003D                  		move.b	d0,$3D(a1)
00010190 137C 0000 0026             		move.b	#0,$26(a1)
00010196 337C 0000 0012             		move.w	#0,$12(a1)
0001019C 3369 0010 0014             		move.w	$10(a1),$14(a1)
000101A2 0829 0001 0022             		btst	#1,$22(a1)
000101A8 6700                       		beq.s	loc_FC84
000101AA 2F08                       		move.l	a0,-(sp)
000101AC 2049                       		movea.l	a1,a0
000101AE 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000101B4 205F                       		movea.l	(sp)+,a0
000101B6                            
000101B6                            loc_FC84:
000101B6 08E9 0003 0022             		bset	#3,$22(a1)
000101BC 08E8 0003 0022             		bset	#3,$22(a0)
000101C2 4E75                       		rts	
000101C4                            ; End of function sub_FC2C
000101C4                            
000101C4                            ; ===========================================================================
000101C4                            ; ---------------------------------------------------------------------------
000101C4                            ; Object 51 - smashable	green block (MZ)
000101C4                            ; ---------------------------------------------------------------------------
000101C4                            
000101C4                            Obj51:					; XREF: Obj_Index
000101C4 7000                       		moveq	#0,d0
000101C6 1028 0024                  		move.b	$24(a0),d0
000101CA 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
000101CE 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
000101D2 6000 FA14                  		bra.w	MarkObjGone
000101D6                            ; ===========================================================================
000101D6 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
000101D8 0000                       		dc.w Obj51_Solid-Obj51_Index
000101DA 0000                       		dc.w Obj51_Display-Obj51_Index
000101DC                            ; ===========================================================================
000101DC                            
000101DC                            Obj51_Main:				; XREF: Obj51_Index
000101DC 5428 0024                  		addq.b	#2,$24(a0)
000101E0 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000101E8 317C 42B8 0002             		move.w	#$42B8,2(a0)
000101EE 117C 0004 0001             		move.b	#4,1(a0)
000101F4 117C 0010 0019             		move.b	#$10,$19(a0)
000101FA 117C 0004 0018             		move.b	#4,$18(a0)
00010200 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00010206                            
00010206                            Obj51_Solid:				; XREF: Obj51_Index
00010206 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
0001020C 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00010212 323C 001B                  		move.w	#$1B,d1
00010216 343C 0010                  		move.w	#$10,d2
0001021A 363C 0011                  		move.w	#$11,d3
0001021E 3828 0008                  		move.w	8(a0),d4
00010222 6100 FCEC                  		bsr.w	SolidObject
00010226 0828 0003 0022             		btst	#3,$22(a0)
0001022C 6600                       		bne.s	Obj51_Smash
0001022E                            
0001022E                            locret_FCFC:
0001022E 4E75                       		rts	
00010230                            ; ===========================================================================
00010230                            
00010230                            Obj51_Smash:				; XREF: Obj51_Solid
00010230 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00010236 66F6                       		bne.s	locret_FCFC	; if not, branch
00010238 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
0001023E 08E9 0002 0022             		bset	#2,$22(a1)
00010244 137C 000E 0016             		move.b	#$E,$16(a1)
0001024A 137C 0007 0017             		move.b	#7,$17(a1)
00010250 137C 0002 001C             		move.b	#2,$1C(a1)
00010256 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0001025C 08E9 0001 0022             		bset	#1,$22(a1)
00010262 08A9 0003 0022             		bclr	#3,$22(a1)
00010268 137C 0002 0024             		move.b	#2,$24(a1)
0001026E 08A8 0003 0022             		bclr	#3,$22(a0)
00010274 4228 0025                  		clr.b	$25(a0)
00010278 117C 0001 001A             		move.b	#1,$1A(a0)
0001027E 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00010284 7203                       		moveq	#3,d1		; set number of	fragments to 4
00010286 343C 0038                  		move.w	#$38,d2
0001028A 6100 D4A2                  		bsr.w	SmashObject
0001028E 6100 DD36                  		bsr.w	SingleObjLoad
00010292 6600                       		bne.s	Obj51_Display
00010294 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010298 3368 0008 0008             		move.w	8(a0),8(a1)
0001029E 3368 000C 000C             		move.w	$C(a0),$C(a1)
000102A4 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
000102A8 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
000102AC 0C42 0006                  		cmpi.w	#6,d2
000102B0 6500                       		bcs.s	Obj51_Bonus
000102B2 7406                       		moveq	#6,d2
000102B4                            
000102B4                            Obj51_Bonus:
000102B4 7000                       		moveq	#0,d0
000102B6 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
000102BA 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
000102C0 6500                       		bcs.s	loc_FD98	; if not, branch
000102C2 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000102C6 740A                       		moveq	#10,d2
000102C8                            
000102C8                            loc_FD98:
000102C8 4EB9 0000 0000             		jsr	AddPoints
000102CE E24A                       		lsr.w	#1,d2
000102D0 1342 001A                  		move.b	d2,$1A(a1)
000102D4                            
000102D4                            Obj51_Display:				; XREF: Obj51_Index
000102D4 6100 D844                  		bsr.w	SpeedToPos
000102D8 0668 0038 0012             		addi.w	#$38,$12(a0)
000102DE 6100 D860                  		bsr.w	DisplaySprite
000102E2 4A28 0001                  		tst.b	1(a0)
000102E6 6A00 D894                  		bpl.w	DeleteObject
000102EA 4E75                       		rts	
000102EC                            ; ===========================================================================
000102EC FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000102F0 FF00 FF00                  		dc.w $FF00, $FF00
000102F4 0200 FE00                  		dc.w $200, $FE00
000102F8 0100 FF00                  		dc.w $100, $FF00
000102FC                            
000102FC 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00010304                            ; ---------------------------------------------------------------------------
00010304                            ; Sprite mappings - smashable green block (MZ)
00010304                            ; ---------------------------------------------------------------------------
00010304                            Map_obj51:
00010304                            	include "_maps\obj51.asm"
00010304                            ; ---------------------------------------------------------------------------
00010304                            ; Sprite mappings - smashable green block (MZ)
00010304                            ; ---------------------------------------------------------------------------
00010304 0000                       		dc.w byte_FDD8-Map_obj51
00010306 0000                       		dc.w byte_FDE3-Map_obj51
00010308 02                         byte_FDD8:	dc.b 2
00010309 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
0001030E 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00010313 04                         byte_FDE3:	dc.b 4
00010314 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00010319 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
0001031E F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00010323 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010328                            		even
00010328                            		even
00010328                            
00010328                            ; ===========================================================================
00010328                            ; ---------------------------------------------------------------------------
00010328                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010328                            ; ---------------------------------------------------------------------------
00010328                            
00010328                            Obj52:					; XREF: Obj_Index
00010328 7000                       		moveq	#0,d0
0001032A 1028 0024                  		move.b	$24(a0),d0
0001032E 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00010332 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00010336                            ; ===========================================================================
00010336 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010338 0000                       		dc.w Obj52_Platform-Obj52_Index
0001033A 0000                       		dc.w Obj52_StandOn-Obj52_Index
0001033C                            
0001033C 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
0001033E 2001                       		dc.b $20, 1
00010340 2002                       		dc.b $20, 2
00010342 4003                       		dc.b $40, 3
00010344 3004                       		dc.b $30, 4
00010346                            ; ===========================================================================
00010346                            
00010346                            Obj52_Main:				; XREF: Obj52_Index
00010346 5428 0024                  		addq.b	#2,$24(a0)
0001034A 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010352 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010358 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001035E 6600                       		bne.s	loc_FE44
00010360 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010368 317C 43BC 0002             		move.w	#$43BC,2(a0)
0001036E 117C 0007 0016             		move.b	#7,$16(a0)
00010374                            
00010374                            loc_FE44:
00010374 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001037A 6600                       		bne.s	loc_FE60
0001037C 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00010382 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00010388 6700                       		beq.s	loc_FE60	; if yes, branch
0001038A 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00010390                            
00010390                            loc_FE60:
00010390 117C 0004 0001             		move.b	#4,1(a0)
00010396 7000                       		moveq	#0,d0
00010398 1028 0028                  		move.b	$28(a0),d0
0001039C E648                       		lsr.w	#3,d0
0001039E 0240 001E                  		andi.w	#$1E,d0
000103A2 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
000103A6 115A 0019                  		move.b	(a2)+,$19(a0)
000103AA 115A 001A                  		move.b	(a2)+,$1A(a0)
000103AE 117C 0004 0018             		move.b	#4,$18(a0)
000103B4 3168 0008 0030             		move.w	8(a0),$30(a0)
000103BA 3168 000C 0032             		move.w	$C(a0),$32(a0)
000103C0 0228 000F 0028             		andi.b	#$F,$28(a0)
000103C6                            
000103C6                            Obj52_Platform:				; XREF: Obj52_Index
000103C6 6100 0000                  		bsr.w	Obj52_Move
000103CA 7200                       		moveq	#0,d1
000103CC 1228 0019                  		move.b	$19(a0),d1
000103D0 4EB9 0000 786C             		jsr	(PlatformObject).l
000103D6 6000                       		bra.s	Obj52_ChkDel
000103D8                            ; ===========================================================================
000103D8                            
000103D8                            Obj52_StandOn:				; XREF: Obj52_Index
000103D8 7200                       		moveq	#0,d1
000103DA 1228 0019                  		move.b	$19(a0),d1
000103DE 4EB9 0000 79E0             		jsr	(ExitPlatform).l
000103E4 3F28 0008                  		move.w	8(a0),-(sp)
000103E8 6100 0000                  		bsr.w	Obj52_Move
000103EC 341F                       		move.w	(sp)+,d2
000103EE 4EB9 0000 7F4A             		jsr	(MvSonicOnPtfm2).l
000103F4                            
000103F4                            Obj52_ChkDel:				; XREF: Obj52_Platform
000103F4 3028 0030                  		move.w	$30(a0),d0
000103F8 0240 FF80                  		andi.w	#$FF80,d0
000103FC 3238 F700                  		move.w	($FFFFF700).w,d1
00010400 0441 0080                  		subi.w	#$80,d1
00010404 0241 FF80                  		andi.w	#$FF80,d1
00010408 9041                       		sub.w	d1,d0
0001040A 0C40 0280                  		cmpi.w	#$280,d0
0001040E 6200 D76C                  		bhi.w	DeleteObject
00010412 6000 D72C                  		bra.w	DisplaySprite
00010416                            ; ===========================================================================
00010416                            
00010416                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00010416 7000                       		moveq	#0,d0
00010418 1028 0028                  		move.b	$28(a0),d0
0001041C 0240 000F                  		andi.w	#$F,d0
00010420 D040                       		add.w	d0,d0
00010422 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00010426 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
0001042A                            ; ===========================================================================
0001042A 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
0001042E 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00010432 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00010436 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
0001043A 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
0001043E 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010440                            ; ===========================================================================
00010440                            
00010440                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010440 4E75                       		rts	
00010442                            ; ===========================================================================
00010442                            
00010442                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010442 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010446 323C 0060                  		move.w	#$60,d1
0001044A 0828 0000 0022             		btst	#0,$22(a0)
00010450 6700                       		beq.s	loc_FF26
00010452 4440                       		neg.w	d0
00010454 D041                       		add.w	d1,d0
00010456                            
00010456                            loc_FF26:
00010456 3228 0030                  		move.w	$30(a0),d1
0001045A 9240                       		sub.w	d0,d1
0001045C 3141 0008                  		move.w	d1,8(a0)
00010460 4E75                       		rts	
00010462                            ; ===========================================================================
00010462                            
00010462                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010462 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010468 6600                       		bne.s	Obj52_02_Wait
0001046A 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001046E                            
0001046E                            Obj52_02_Wait:
0001046E 4E75                       		rts	
00010470                            ; ===========================================================================
00010470                            
00010470                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00010470 7600                       		moveq	#0,d3
00010472 1628 0019                  		move.b	$19(a0),d3
00010476 6100 0000                  		bsr.w	ObjHitWallRight
0001047A 4A41                       		tst.w	d1		; has the platform hit a wall?
0001047C 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
0001047E 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010482 3168 0008 0030             		move.w	8(a0),$30(a0)
00010488 4E75                       		rts	
0001048A                            ; ===========================================================================
0001048A                            
0001048A                            Obj52_03_End:
0001048A 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
0001048E 4E75                       		rts	
00010490                            ; ===========================================================================
00010490                            
00010490                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00010490 7600                       		moveq	#0,d3
00010492 1628 0019                  		move.b	$19(a0),d3
00010496 6100 0000                  		bsr.w	ObjHitWallRight
0001049A 4A41                       		tst.w	d1		; has the platform hit a wall?
0001049C 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
0001049E 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000104A2 3168 0008 0030             		move.w	8(a0),$30(a0)
000104A8 4E75                       		rts	
000104AA                            ; ===========================================================================
000104AA                            
000104AA                            Obj52_05_End:
000104AA 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000104AE 4E75                       		rts	
000104B0                            ; ===========================================================================
000104B0                            
000104B0                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000104B0 6100 D668                  		bsr.w	SpeedToPos
000104B4 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000104BA 6100 0000                  		bsr.w	ObjHitFloor
000104BE 4A41                       		tst.w	d1		; has platform hit the floor?
000104C0 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000104C4 D368 000C                  		add.w	d1,$C(a0)
000104C8 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
000104CC 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
000104D0                            
000104D0                            locret_FFA0:
000104D0 4E75                       		rts	
000104D2                            ; ===========================================================================
000104D2                            
000104D2                            Obj52_Type07:				; XREF: Obj52_TypeIndex
000104D2 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
000104D6 6700                       		beq.s	Obj52_07_ChkDel
000104D8 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
000104DC                            
000104DC                            Obj52_07_ChkDel:
000104DC 588F                       		addq.l	#4,sp
000104DE 3028 0030                  		move.w	$30(a0),d0
000104E2 0240 FF80                  		andi.w	#$FF80,d0
000104E6 3238 F700                  		move.w	($FFFFF700).w,d1
000104EA 0441 0080                  		subi.w	#$80,d1
000104EE 0241 FF80                  		andi.w	#$FF80,d1
000104F2 9041                       		sub.w	d1,d0
000104F4 0C40 0280                  		cmpi.w	#$280,d0
000104F8 6200 D682                  		bhi.w	DeleteObject
000104FC 4E75                       		rts	
000104FE                            ; ===========================================================================
000104FE                            
000104FE                            Obj52_Type08:				; XREF: Obj52_TypeIndex
000104FE 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010502 323C 0080                  		move.w	#$80,d1
00010506 0828 0000 0022             		btst	#0,$22(a0)
0001050C 6700                       		beq.s	loc_FFE2
0001050E 4440                       		neg.w	d0
00010510 D041                       		add.w	d1,d0
00010512                            
00010512                            loc_FFE2:
00010512 3228 0032                  		move.w	$32(a0),d1
00010516 9240                       		sub.w	d0,d1
00010518 3141 000C                  		move.w	d1,$C(a0)
0001051C 4E75                       		rts	
0001051E                            ; ===========================================================================
0001051E                            
0001051E                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
0001051E 7600                       		moveq	#0,d3
00010520 1628 0019                  		move.b	$19(a0),d3
00010524 D643                       		add.w	d3,d3
00010526 7208                       		moveq	#8,d1
00010528 0828 0000 0022             		btst	#0,$22(a0)
0001052E 6700                       		beq.s	loc_10004
00010530 4441                       		neg.w	d1
00010532 4443                       		neg.w	d3
00010534                            
00010534                            loc_10004:
00010534 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010538 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
0001053A 3028 0008                  		move.w	8(a0),d0
0001053E 9068 0030                  		sub.w	$30(a0),d0
00010542 B043                       		cmp.w	d3,d0
00010544 6700                       		beq.s	Obj52_0A_Wait
00010546 D368 0008                  		add.w	d1,8(a0)	; move platform
0001054A 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010550 4E75                       		rts	
00010552                            ; ===========================================================================
00010552                            
00010552                            Obj52_0A_Wait:
00010552 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010556 6600                       		bne.s	locret_1002E	; if time remains, branch
00010558 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
0001055E                            
0001055E                            locret_1002E:
0001055E 4E75                       		rts	
00010560                            ; ===========================================================================
00010560                            
00010560                            Obj52_0A_Back:
00010560 3028 0008                  		move.w	8(a0),d0
00010564 9068 0030                  		sub.w	$30(a0),d0
00010568 6700                       		beq.s	Obj52_0A_Reset
0001056A 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
0001056E 4E75                       		rts	
00010570                            ; ===========================================================================
00010570                            
00010570                            Obj52_0A_Reset:
00010570 4268 0036                  		clr.w	$36(a0)
00010574 5328 0028                  		subq.b	#1,$28(a0)
00010578 4E75                       		rts	
0001057A                            ; ===========================================================================
0001057A                            ; ---------------------------------------------------------------------------
0001057A                            ; Sprite mappings - moving blocks (MZ, SBZ)
0001057A                            ; ---------------------------------------------------------------------------
0001057A                            Map_obj52:
0001057A                            	include "_maps\obj52mz.asm"
0001057A                            ; ---------------------------------------------------------------------------
0001057A                            ; Sprite mappings - moving blocks (MZ, SBZ)
0001057A                            ; ---------------------------------------------------------------------------
0001057A 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
0001057E 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010582 0000                       		dc.w byte_1008F-Map_obj52
00010584 01                         byte_10054:	dc.b 1
00010585 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001058A 02                         byte_1005A:	dc.b 2
0001058B F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010590 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010595 04                         byte_10065:	dc.b 4
00010596 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
0001059B 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000105A0 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000105A5 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000105AA 04                         byte_1007A:	dc.b 4
000105AB F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000105B0 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000105B5 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000105BA F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000105BF 03                         byte_1008F:	dc.b 3
000105C0 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000105C5 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000105CA F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
000105D0 00                         		even
000105D0 00                         		even
000105D0                            
000105D0                            ; ---------------------------------------------------------------------------
000105D0                            ; Sprite mappings - moving block (LZ)
000105D0                            ; ---------------------------------------------------------------------------
000105D0                            Map_obj52a:
000105D0                            	include "_maps\obj52lz.asm"
000105D0                            ; ---------------------------------------------------------------------------
000105D0                            ; Sprite mappings - moving block (LZ)
000105D0                            ; ---------------------------------------------------------------------------
000105D0 0000                       		dc.w byte_100A2-Map_obj52a
000105D2 01                         byte_100A2:	dc.b 1
000105D3 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
000105D8                            		even
000105D8                            		even
000105D8                            
000105D8                            ; ===========================================================================
000105D8                            ; ---------------------------------------------------------------------------
000105D8                            ; Object 55 - Basaran enemy (MZ)
000105D8                            ; ---------------------------------------------------------------------------
000105D8                            
000105D8                            Obj55:					; XREF: Obj_Index
000105D8 7000                       		moveq	#0,d0
000105DA 1028 0024                  		move.b	$24(a0),d0
000105DE 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
000105E2 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
000105E6                            ; ===========================================================================
000105E6 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
000105E8 0000                       		dc.w Obj55_Action-Obj55_Index
000105EA                            ; ===========================================================================
000105EA                            
000105EA                            Obj55_Main:				; XREF: Obj55_Index
000105EA 5428 0024                  		addq.b	#2,$24(a0)
000105EE 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
000105F6 317C 84B8 0002             		move.w	#$84B8,2(a0)
000105FC 117C 0004 0001             		move.b	#4,1(a0)
00010602 117C 000C 0016             		move.b	#$C,$16(a0)
00010608 117C 0002 0018             		move.b	#2,$18(a0)
0001060E 117C 000B 0020             		move.b	#$B,$20(a0)
00010614 117C 0010 0019             		move.b	#$10,$19(a0)
0001061A                            
0001061A                            Obj55_Action:				; XREF: Obj55_Index
0001061A 7000                       		moveq	#0,d0
0001061C 1028 0025                  		move.b	$25(a0),d0
00010620 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010624 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010628 43F9 0000 0000             		lea	(Ani_obj55).l,a1
0001062E 6100 A5E0                  		bsr.w	AnimateSprite
00010632 6000 F5B4                  		bra.w	MarkObjGone
00010636                            ; ===========================================================================
00010636 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010638 0000                       		dc.w Obj55_DropFly-Obj55_Index2
0001063A 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
0001063C 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
0001063E                            ; ===========================================================================
0001063E                            
0001063E                            Obj55_ChkDrop:				; XREF: Obj55_Index2
0001063E 343C 0080                  		move.w	#$80,d2
00010642 6100 0000                  		bsr.w	Obj55_ChkSonic
00010646 6400                       		bcc.s	Obj55_NoDrop
00010648 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001064C 3140 0036                  		move.w	d0,$36(a0)
00010650 9068 000C                  		sub.w	$C(a0),d0
00010654 6500                       		bcs.s	Obj55_NoDrop
00010656 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
0001065A 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
0001065C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010660 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010662 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010666 D007                       		add.b	d7,d0
00010668 0200 0007                  		andi.b	#7,d0
0001066C 6600                       		bne.s	Obj55_NoDrop
0001066E 117C 0001 001C             		move.b	#1,$1C(a0)
00010674 5428 0025                  		addq.b	#2,$25(a0)
00010678                            
00010678                            Obj55_NoDrop:
00010678 4E75                       		rts	
0001067A                            ; ===========================================================================
0001067A                            
0001067A                            Obj55_DropFly:				; XREF: Obj55_Index2
0001067A 6100 D49E                  		bsr.w	SpeedToPos
0001067E 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010684 343C 0080                  		move.w	#$80,d2
00010688 6100 0000                  		bsr.w	Obj55_ChkSonic
0001068C 3028 0036                  		move.w	$36(a0),d0
00010690 9068 000C                  		sub.w	$C(a0),d0
00010694 6500                       		bcs.s	Obj55_ChkDel
00010696 0C40 0010                  		cmpi.w	#$10,d0
0001069A 6400                       		bcc.s	locret_10180
0001069C 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
000106A0 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
000106A6 117C 0002 001C             		move.b	#2,$1C(a0)
000106AC 5428 0025                  		addq.b	#2,$25(a0)
000106B0                            
000106B0                            locret_10180:
000106B0 4E75                       		rts	
000106B2                            ; ===========================================================================
000106B2                            
000106B2                            Obj55_ChkDel:				; XREF: Obj55_DropFly
000106B2 4A28 0001                  		tst.b	1(a0)
000106B6 6A00 D4C4                  		bpl.w	DeleteObject
000106BA 4E75                       		rts	
000106BC                            ; ===========================================================================
000106BC                            
000106BC                            Obj55_PlaySnd:				; XREF: Obj55_Index2
000106BC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000106C0 0200 000F                  		andi.b	#$F,d0
000106C4 6600                       		bne.s	loc_101A0
000106C6 303C 00C0                  		move.w	#$C0,d0
000106CA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flapping sound
000106D0                            
000106D0                            loc_101A0:
000106D0 6100 D448                  		bsr.w	SpeedToPos
000106D4 3038 D008                  		move.w	($FFFFD008).w,d0
000106D8 9068 0008                  		sub.w	8(a0),d0
000106DC 6400                       		bcc.s	loc_101B0
000106DE 4440                       		neg.w	d0
000106E0                            
000106E0                            loc_101B0:
000106E0 0C40 0080                  		cmpi.w	#$80,d0
000106E4 6500                       		bcs.s	locret_101C6
000106E6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000106EA D007                       		add.b	d7,d0
000106EC 0200 0007                  		andi.b	#7,d0
000106F0 6600                       		bne.s	locret_101C6
000106F2 5428 0025                  		addq.b	#2,$25(a0)
000106F6                            
000106F6                            locret_101C6:
000106F6 4E75                       		rts	
000106F8                            ; ===========================================================================
000106F8                            
000106F8                            Obj55_FlyUp:				; XREF: Obj55_Index2
000106F8 6100 D420                  		bsr.w	SpeedToPos
000106FC 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010702 6100 0000                  		bsr.w	ObjHitCeiling
00010706 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010708 6A00                       		bpl.s	locret_101F4	; if not, branch
0001070A 9368 000C                  		sub.w	d1,$C(a0)
0001070E 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010714 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010718 4268 0012                  		clr.w	$12(a0)
0001071C 4228 001C                  		clr.b	$1C(a0)
00010720 4228 0025                  		clr.b	$25(a0)
00010724                            
00010724                            locret_101F4:
00010724 4E75                       		rts	
00010726                            ; ===========================================================================
00010726                            
00010726                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010726 323C 0100                  		move.w	#$100,d1
0001072A 08E8 0000 0022             		bset	#0,$22(a0)
00010730 3038 D008                  		move.w	($FFFFD008).w,d0
00010734 9068 0008                  		sub.w	8(a0),d0
00010738 6400                       		bcc.s	loc_10214
0001073A 4440                       		neg.w	d0
0001073C 4441                       		neg.w	d1
0001073E 08A8 0000 0022             		bclr	#0,$22(a0)
00010744                            
00010744                            loc_10214:
00010744 B042                       		cmp.w	d2,d0
00010746 4E75                       		rts	
00010748                            ; ===========================================================================
00010748 6100 D3D0                  		bsr.w	SpeedToPos
0001074C 6100 D3F2                  		bsr.w	DisplaySprite
00010750 4A28 0001                  		tst.b	1(a0)
00010754 6A00 D426                  		bpl.w	DeleteObject
00010758 4E75                       		rts	
0001075A                            ; ===========================================================================
0001075A                            Ani_obj55:
0001075A                            	include "_anim\obj55.asm"
0001075A                            ; ---------------------------------------------------------------------------
0001075A                            ; Animation script - Basaran enemy
0001075A                            ; ---------------------------------------------------------------------------
0001075A 0000                       		dc.w byte_10230-Ani_obj55
0001075C 0000                       		dc.w byte_10234-Ani_obj55
0001075E 0000                       		dc.w byte_10238-Ani_obj55
00010760 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010764 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010768 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
0001076E                            		even
0001076E                            		even
0001076E                            
0001076E                            ; ---------------------------------------------------------------------------
0001076E                            ; Sprite mappings - Basaran enemy (MZ)
0001076E                            ; ---------------------------------------------------------------------------
0001076E                            Map_obj55:
0001076E                            	include "_maps\obj55.asm"
0001076E                            ; ---------------------------------------------------------------------------
0001076E                            ; Sprite mappings - Basaran enemy (MZ)
0001076E                            ; ---------------------------------------------------------------------------
0001076E 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010772 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010776 01                         byte_10246:	dc.b 1
00010777 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0001077C 03                         byte_1024C:	dc.b 3
0001077D F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010782 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010787 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
0001078C 04                         byte_1025C:	dc.b 4
0001078D F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010792 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010797 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
0001079C 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
000107A1 04                         byte_10271:	dc.b 4
000107A2 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
000107A7 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
000107AC 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
000107B1 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
000107B6                            		even
000107B6                            		even
000107B6                            
000107B6                            ; ===========================================================================
000107B6                            ; ---------------------------------------------------------------------------
000107B6                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
000107B6                            ; ---------------------------------------------------------------------------
000107B6                            
000107B6                            Obj56:					; XREF: Obj_Index
000107B6 7000                       		moveq	#0,d0
000107B8 1028 0024                  		move.b	$24(a0),d0
000107BC 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
000107C0 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
000107C4                            ; ===========================================================================
000107C4 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
000107C6 0000                       		dc.w Obj56_Action-Obj56_Index
000107C8                            
000107C8 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
000107CA 2020                       		dc.b  $20, $20
000107CC 1020                       		dc.b  $10, $20
000107CE 201A                       		dc.b  $20, $1A
000107D0 1027                       		dc.b  $10, $27
000107D2 1010                       		dc.b  $10, $10
000107D4 0820                       		dc.b	8, $20
000107D6 4010                       		dc.b  $40, $10
000107D8                            ; ===========================================================================
000107D8                            
000107D8                            Obj56_Main:				; XREF: Obj56_Index
000107D8 5428 0024                  		addq.b	#2,$24(a0)
000107DC 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
000107E4 317C 4000 0002             		move.w	#$4000,2(a0)
000107EA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000107F0 6600                       		bne.s	loc_102C8
000107F2 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
000107F8                            
000107F8                            loc_102C8:
000107F8 117C 0004 0001             		move.b	#4,1(a0)
000107FE 117C 0003 0018             		move.b	#3,$18(a0)
00010804 7000                       		moveq	#0,d0
00010806 1028 0028                  		move.b	$28(a0),d0
0001080A E648                       		lsr.w	#3,d0
0001080C 0240 000E                  		andi.w	#$E,d0
00010810 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010814 115A 0019                  		move.b	(a2)+,$19(a0)
00010818 1152 0016                  		move.b	(a2),$16(a0)
0001081C E248                       		lsr.w	#1,d0
0001081E 1140 001A                  		move.b	d0,$1A(a0)
00010822 3168 0008 0034             		move.w	8(a0),$34(a0)
00010828 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001082E 7000                       		moveq	#0,d0
00010830 1012                       		move.b	(a2),d0
00010832 D040                       		add.w	d0,d0
00010834 3140 003A                  		move.w	d0,$3A(a0)
00010838 7000                       		moveq	#0,d0
0001083A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010840 6700                       		beq.s	loc_10332
00010842 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010846 0240 000F                  		andi.w	#$F,d0
0001084A 5140                       		subq.w	#8,d0
0001084C 6500                       		bcs.s	loc_10332
0001084E E548                       		lsl.w	#2,d0
00010850 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010854 45F2 0000                  		lea	(a2,d0.w),a2
00010858 4A52                       		tst.w	(a2)
0001085A 6A00                       		bpl.s	loc_10332
0001085C 0868 0000 0022             		bchg	#0,$22(a0)
00010862                            
00010862                            loc_10332:
00010862 1028 0028                  		move.b	$28(a0),d0
00010866 6A00                       		bpl.s	Obj56_Action
00010868 0200 000F                  		andi.b	#$F,d0
0001086C 1140 003C                  		move.b	d0,$3C(a0)
00010870 117C 0005 0028             		move.b	#5,$28(a0)
00010876 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
0001087C 6600                       		bne.s	Obj56_ChkGone
0001087E 117C 000C 0028             		move.b	#$C,$28(a0)
00010884 317C 0080 003A             		move.w	#$80,$3A(a0)
0001088A                            
0001088A                            Obj56_ChkGone:
0001088A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001088E 7000                       		moveq	#0,d0
00010890 1028 0023                  		move.b	$23(a0),d0
00010894 6700                       		beq.s	Obj56_Action
00010896 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001089C 0832 0000 0002             		btst	#0,2(a2,d0.w)
000108A2 6700                       		beq.s	Obj56_Action
000108A4 5228 0028                  		addq.b	#1,$28(a0)
000108A8 4268 003A                  		clr.w	$3A(a0)
000108AC                            
000108AC                            Obj56_Action:				; XREF: Obj56_Index
000108AC 3F28 0008                  		move.w	8(a0),-(sp)
000108B0 7000                       		moveq	#0,d0
000108B2 1028 0028                  		move.b	$28(a0),d0	; get object type
000108B6 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000108BA D040                       		add.w	d0,d0
000108BC 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
000108C0 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
000108C4 381F                       		move.w	(sp)+,d4
000108C6 4A28 0001                  		tst.b	1(a0)
000108CA 6A00                       		bpl.s	Obj56_ChkDel
000108CC 7200                       		moveq	#0,d1
000108CE 1228 0019                  		move.b	$19(a0),d1
000108D2 0641 000B                  		addi.w	#$B,d1
000108D6 7400                       		moveq	#0,d2
000108D8 1428 0016                  		move.b	$16(a0),d2
000108DC 3602                       		move.w	d2,d3
000108DE 5243                       		addq.w	#1,d3
000108E0 6100 F62E                  		bsr.w	SolidObject
000108E4                            
000108E4                            Obj56_ChkDel:
000108E4 3028 0034                  		move.w	$34(a0),d0
000108E8 0240 FF80                  		andi.w	#$FF80,d0
000108EC 3238 F700                  		move.w	($FFFFF700).w,d1
000108F0 0441 0080                  		subi.w	#$80,d1
000108F4 0241 FF80                  		andi.w	#$FF80,d1
000108F8 9041                       		sub.w	d1,d0
000108FA 0C40 0280                  		cmpi.w	#$280,d0
000108FE 6200 D27C                  		bhi.w	DeleteObject
00010902 6000 D23C                  		bra.w	DisplaySprite
00010906                            ; ===========================================================================
00010906 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
0001090A 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
0001090E 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010912 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010916 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
0001091A 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
0001091E 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010922                            ; ===========================================================================
00010922                            
00010922                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010922 4E75                       		rts	
00010924                            ; ===========================================================================
00010924                            
00010924                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010924 323C 0040                  		move.w	#$40,d1
00010928 7000                       		moveq	#0,d0
0001092A 1038 FE68                  		move.b	($FFFFFE68).w,d0
0001092E 6000                       		bra.s	Obj56_Move_LR
00010930                            ; ===========================================================================
00010930                            
00010930                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010930 323C 0080                  		move.w	#$80,d1
00010934 7000                       		moveq	#0,d0
00010936 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001093A                            
0001093A                            Obj56_Move_LR:
0001093A 0828 0000 0022             		btst	#0,$22(a0)
00010940 6700                       		beq.s	loc_10416
00010942 4440                       		neg.w	d0
00010944 D041                       		add.w	d1,d0
00010946                            
00010946                            loc_10416:
00010946 3228 0034                  		move.w	$34(a0),d1
0001094A 9240                       		sub.w	d0,d1
0001094C 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010950 4E75                       		rts	
00010952                            ; ===========================================================================
00010952                            
00010952                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010952 323C 0040                  		move.w	#$40,d1
00010956 7000                       		moveq	#0,d0
00010958 1038 FE68                  		move.b	($FFFFFE68).w,d0
0001095C 6000                       		bra.s	Obj56_Move_UD
0001095E                            ; ===========================================================================
0001095E                            
0001095E                            Obj56_Type04:				; XREF: Obj56_TypeIndex
0001095E 323C 0080                  		move.w	#$80,d1
00010962 7000                       		moveq	#0,d0
00010964 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010968                            
00010968                            Obj56_Move_UD:
00010968 0828 0000 0022             		btst	#0,$22(a0)
0001096E 6700                       		beq.s	loc_10444
00010970 4440                       		neg.w	d0
00010972 D041                       		add.w	d1,d0
00010974                            
00010974                            loc_10444:
00010974 3228 0030                  		move.w	$30(a0),d1
00010978 9240                       		sub.w	d0,d1
0001097A 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
0001097E 4E75                       		rts	
00010980                            ; ===========================================================================
00010980                            
00010980                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010980 4A28 0038                  		tst.b	$38(a0)
00010984 6600                       		bne.s	loc_104A4
00010986 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
0001098C 6600                       		bne.s	loc_1047A	; if not, branch
0001098E 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010994 6600                       		bne.s	loc_1047A
00010996 4238 F7C9                  		clr.b	($FFFFF7C9).w
0001099A 3038 D008                  		move.w	($FFFFD008).w,d0
0001099E B068 0008                  		cmp.w	8(a0),d0
000109A2 6400                       		bcc.s	loc_1047A
000109A4 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
000109AA                            
000109AA                            loc_1047A:
000109AA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000109AE 7000                       		moveq	#0,d0
000109B0 1028 003C                  		move.b	$3C(a0),d0
000109B4 0832 0000 0000             		btst	#0,(a2,d0.w)
000109BA 6700                       		beq.s	loc_104AE
000109BC 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000109C2 6600                       		bne.s	loc_1049E	; if not, branch
000109C4 0C00 0003                  		cmpi.b	#3,d0
000109C8 6600                       		bne.s	loc_1049E
000109CA 4238 F7C9                  		clr.b	($FFFFF7C9).w
000109CE                            
000109CE                            loc_1049E:
000109CE 117C 0001 0038             		move.b	#1,$38(a0)
000109D4                            
000109D4                            loc_104A4:
000109D4 4A68 003A                  		tst.w	$3A(a0)
000109D8 6700                       		beq.s	loc_104C8
000109DA 5568 003A                  		subq.w	#2,$3A(a0)
000109DE                            
000109DE                            loc_104AE:
000109DE 3028 003A                  		move.w	$3A(a0),d0
000109E2 0828 0000 0022             		btst	#0,$22(a0)
000109E8 6700                       		beq.s	loc_104BC
000109EA 4440                       		neg.w	d0
000109EC                            
000109EC                            loc_104BC:
000109EC 3228 0030                  		move.w	$30(a0),d1
000109F0 D240                       		add.w	d0,d1
000109F2 3141 000C                  		move.w	d1,$C(a0)
000109F6 4E75                       		rts	
000109F8                            ; ===========================================================================
000109F8                            
000109F8                            loc_104C8:
000109F8 5228 0028                  		addq.b	#1,$28(a0)
000109FC 4228 0038                  		clr.b	$38(a0)
00010A00 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010A04 7000                       		moveq	#0,d0
00010A06 1028 0023                  		move.b	$23(a0),d0
00010A0A 67D2                       		beq.s	loc_104AE
00010A0C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010A12 60CA                       		bra.s	loc_104AE
00010A14                            ; ===========================================================================
00010A14                            
00010A14                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010A14 4A28 0038                  		tst.b	$38(a0)
00010A18 6600                       		bne.s	loc_10500
00010A1A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010A1E 7000                       		moveq	#0,d0
00010A20 1028 003C                  		move.b	$3C(a0),d0
00010A24 4A32 0000                  		tst.b	(a2,d0.w)
00010A28 6A00                       		bpl.s	loc_10512
00010A2A 117C 0001 0038             		move.b	#1,$38(a0)
00010A30                            
00010A30                            loc_10500:
00010A30 7000                       		moveq	#0,d0
00010A32 1028 0016                  		move.b	$16(a0),d0
00010A36 D040                       		add.w	d0,d0
00010A38 B068 003A                  		cmp.w	$3A(a0),d0
00010A3C 6700                       		beq.s	loc_1052C
00010A3E 5468 003A                  		addq.w	#2,$3A(a0)
00010A42                            
00010A42                            loc_10512:
00010A42 3028 003A                  		move.w	$3A(a0),d0
00010A46 0828 0000 0022             		btst	#0,$22(a0)
00010A4C 6700                       		beq.s	loc_10520
00010A4E 4440                       		neg.w	d0
00010A50                            
00010A50                            loc_10520:
00010A50 3228 0030                  		move.w	$30(a0),d1
00010A54 D240                       		add.w	d0,d1
00010A56 3141 000C                  		move.w	d1,$C(a0)
00010A5A 4E75                       		rts	
00010A5C                            ; ===========================================================================
00010A5C                            
00010A5C                            loc_1052C:
00010A5C 5328 0028                  		subq.b	#1,$28(a0)
00010A60 4228 0038                  		clr.b	$38(a0)
00010A64 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010A68 7000                       		moveq	#0,d0
00010A6A 1028 0023                  		move.b	$23(a0),d0
00010A6E 67D2                       		beq.s	loc_10512
00010A70 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010A76 60CA                       		bra.s	loc_10512
00010A78                            ; ===========================================================================
00010A78                            
00010A78                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010A78 4A28 0038                  		tst.b	$38(a0)
00010A7C 6600                       		bne.s	loc_1055E
00010A7E 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010A82 6700                       		beq.s	locret_10578
00010A84 117C 0001 0038             		move.b	#1,$38(a0)
00010A8A 4268 003A                  		clr.w	$3A(a0)
00010A8E                            
00010A8E                            loc_1055E:
00010A8E 5268 0008                  		addq.w	#1,8(a0)
00010A92 3168 0008 0034             		move.w	8(a0),$34(a0)
00010A98 5268 003A                  		addq.w	#1,$3A(a0)
00010A9C 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010AA2 6600                       		bne.s	locret_10578
00010AA4 4228 0028                  		clr.b	$28(a0)
00010AA8                            
00010AA8                            locret_10578:
00010AA8 4E75                       		rts	
00010AAA                            ; ===========================================================================
00010AAA                            
00010AAA                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010AAA 4A28 0038                  		tst.b	$38(a0)
00010AAE 6600                       		bne.s	loc_10598
00010AB0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010AB4 7000                       		moveq	#0,d0
00010AB6 1028 003C                  		move.b	$3C(a0),d0
00010ABA 0832 0000 0000             		btst	#0,(a2,d0.w)
00010AC0 6700                       		beq.s	loc_105A2
00010AC2 117C 0001 0038             		move.b	#1,$38(a0)
00010AC8                            
00010AC8                            loc_10598:
00010AC8 4A68 003A                  		tst.w	$3A(a0)
00010ACC 6700                       		beq.s	loc_105C0
00010ACE 5568 003A                  		subq.w	#2,$3A(a0)
00010AD2                            
00010AD2                            loc_105A2:
00010AD2 3028 003A                  		move.w	$3A(a0),d0
00010AD6 0828 0000 0022             		btst	#0,$22(a0)
00010ADC 6700                       		beq.s	loc_105B4
00010ADE 4440                       		neg.w	d0
00010AE0 0640 0080                  		addi.w	#$80,d0
00010AE4                            
00010AE4                            loc_105B4:
00010AE4 3228 0034                  		move.w	$34(a0),d1
00010AE8 D240                       		add.w	d0,d1
00010AEA 3141 0008                  		move.w	d1,8(a0)
00010AEE 4E75                       		rts	
00010AF0                            ; ===========================================================================
00010AF0                            
00010AF0                            loc_105C0:
00010AF0 5228 0028                  		addq.b	#1,$28(a0)
00010AF4 4228 0038                  		clr.b	$38(a0)
00010AF8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010AFC 7000                       		moveq	#0,d0
00010AFE 1028 0023                  		move.b	$23(a0),d0
00010B02 67CE                       		beq.s	loc_105A2
00010B04 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010B0A 60C6                       		bra.s	loc_105A2
00010B0C                            ; ===========================================================================
00010B0C                            
00010B0C                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010B0C 4A28 0038                  		tst.b	$38(a0)
00010B10 6600                       		bne.s	loc_105F8
00010B12 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010B16 7000                       		moveq	#0,d0
00010B18 1028 003C                  		move.b	$3C(a0),d0
00010B1C 4A32 0000                  		tst.b	(a2,d0.w)
00010B20 6A00                       		bpl.s	loc_10606
00010B22 117C 0001 0038             		move.b	#1,$38(a0)
00010B28                            
00010B28                            loc_105F8:
00010B28 303C 0080                  		move.w	#$80,d0
00010B2C B068 003A                  		cmp.w	$3A(a0),d0
00010B30 6700                       		beq.s	loc_10624
00010B32 5468 003A                  		addq.w	#2,$3A(a0)
00010B36                            
00010B36                            loc_10606:
00010B36 3028 003A                  		move.w	$3A(a0),d0
00010B3A 0828 0000 0022             		btst	#0,$22(a0)
00010B40 6700                       		beq.s	loc_10618
00010B42 4440                       		neg.w	d0
00010B44 0640 0080                  		addi.w	#$80,d0
00010B48                            
00010B48                            loc_10618:
00010B48 3228 0034                  		move.w	$34(a0),d1
00010B4C D240                       		add.w	d0,d1
00010B4E 3141 0008                  		move.w	d1,8(a0)
00010B52 4E75                       		rts	
00010B54                            ; ===========================================================================
00010B54                            
00010B54                            loc_10624:
00010B54 5328 0028                  		subq.b	#1,$28(a0)
00010B58 4228 0038                  		clr.b	$38(a0)
00010B5C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010B60 7000                       		moveq	#0,d0
00010B62 1028 0023                  		move.b	$23(a0),d0
00010B66 67CE                       		beq.s	loc_10606
00010B68 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010B6E 60C6                       		bra.s	loc_10606
00010B70                            ; ===========================================================================
00010B70                            
00010B70                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010B70 323C 0010                  		move.w	#$10,d1
00010B74 7000                       		moveq	#0,d0
00010B76 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010B7A E248                       		lsr.w	#1,d0
00010B7C 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010B80 6000                       		bra.s	Obj56_Move_Sqr
00010B82                            ; ===========================================================================
00010B82                            
00010B82                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010B82 323C 0030                  		move.w	#$30,d1
00010B86 7000                       		moveq	#0,d0
00010B88 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010B8C 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010B90 6000                       		bra.s	Obj56_Move_Sqr
00010B92                            ; ===========================================================================
00010B92                            
00010B92                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010B92 323C 0050                  		move.w	#$50,d1
00010B96 7000                       		moveq	#0,d0
00010B98 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010B9C 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010BA0 6000                       		bra.s	Obj56_Move_Sqr
00010BA2                            ; ===========================================================================
00010BA2                            
00010BA2                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010BA2 323C 0070                  		move.w	#$70,d1
00010BA6 7000                       		moveq	#0,d0
00010BA8 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010BAC 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010BB0                            
00010BB0                            Obj56_Move_Sqr:
00010BB0 4A43                       		tst.w	d3
00010BB2 6600                       		bne.s	loc_1068E
00010BB4 5228 0022                  		addq.b	#1,$22(a0)
00010BB8 0228 0003 0022             		andi.b	#3,$22(a0)
00010BBE                            
00010BBE                            loc_1068E:
00010BBE 1428 0022                  		move.b	$22(a0),d2
00010BC2 0202 0003                  		andi.b	#3,d2
00010BC6 6600                       		bne.s	loc_106AE
00010BC8 9041                       		sub.w	d1,d0
00010BCA D068 0034                  		add.w	$34(a0),d0
00010BCE 3140 0008                  		move.w	d0,8(a0)
00010BD2 4441                       		neg.w	d1
00010BD4 D268 0030                  		add.w	$30(a0),d1
00010BD8 3141 000C                  		move.w	d1,$C(a0)
00010BDC 4E75                       		rts	
00010BDE                            ; ===========================================================================
00010BDE                            
00010BDE                            loc_106AE:
00010BDE 5302                       		subq.b	#1,d2
00010BE0 6600                       		bne.s	loc_106CC
00010BE2 5341                       		subq.w	#1,d1
00010BE4 9041                       		sub.w	d1,d0
00010BE6 4440                       		neg.w	d0
00010BE8 D068 0030                  		add.w	$30(a0),d0
00010BEC 3140 000C                  		move.w	d0,$C(a0)
00010BF0 5241                       		addq.w	#1,d1
00010BF2 D268 0034                  		add.w	$34(a0),d1
00010BF6 3141 0008                  		move.w	d1,8(a0)
00010BFA 4E75                       		rts	
00010BFC                            ; ===========================================================================
00010BFC                            
00010BFC                            loc_106CC:
00010BFC 5302                       		subq.b	#1,d2
00010BFE 6600                       		bne.s	loc_106EA
00010C00 5341                       		subq.w	#1,d1
00010C02 9041                       		sub.w	d1,d0
00010C04 4440                       		neg.w	d0
00010C06 D068 0034                  		add.w	$34(a0),d0
00010C0A 3140 0008                  		move.w	d0,8(a0)
00010C0E 5241                       		addq.w	#1,d1
00010C10 D268 0030                  		add.w	$30(a0),d1
00010C14 3141 000C                  		move.w	d1,$C(a0)
00010C18 4E75                       		rts	
00010C1A                            ; ===========================================================================
00010C1A                            
00010C1A                            loc_106EA:
00010C1A 9041                       		sub.w	d1,d0
00010C1C D068 0030                  		add.w	$30(a0),d0
00010C20 3140 000C                  		move.w	d0,$C(a0)
00010C24 4441                       		neg.w	d1
00010C26 D268 0034                  		add.w	$34(a0),d1
00010C2A 3141 0008                  		move.w	d1,8(a0)
00010C2E 4E75                       		rts	
00010C30                            ; ===========================================================================
00010C30                            ; ---------------------------------------------------------------------------
00010C30                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010C30                            ; ---------------------------------------------------------------------------
00010C30                            Map_obj56:
00010C30                            	include "_maps\obj56.asm"
00010C30                            ; ---------------------------------------------------------------------------
00010C30                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010C30                            ; ---------------------------------------------------------------------------
00010C30 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010C34 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010C38 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010C3C 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010C40 01                         byte_10710:	dc.b 1
00010C41 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010C46 04                         byte_10716:	dc.b 4
00010C47 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010C4C E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010C51 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010C56 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010C5B 02                         byte_1072B:	dc.b 2
00010C5C E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010C61 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010C66 04                         byte_10736:	dc.b 4
00010C67 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010C6C E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010C71 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010C76 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010C7B 03                         byte_1074B:	dc.b 3
00010C7C D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010C81 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010C86 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010C8B 01                         byte_1075B:	dc.b 1
00010C8C F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010C91 02                         byte_10761:	dc.b 2
00010C92 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010C97 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010C9C 04                         byte_1076C:	dc.b 4
00010C9D F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010CA2 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010CA7 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010CAC F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010CB2 00                         		even
00010CB2 00                         		even
00010CB2                            
00010CB2                            ; ===========================================================================
00010CB2                            ; ---------------------------------------------------------------------------
00010CB2                            ; Object 57 - spiked balls (SYZ, LZ)
00010CB2                            ; ---------------------------------------------------------------------------
00010CB2                            
00010CB2                            Obj57:					; XREF: Obj_Index
00010CB2 7000                       		moveq	#0,d0
00010CB4 1028 0024                  		move.b	$24(a0),d0
00010CB8 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010CBC 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010CC0                            ; ===========================================================================
00010CC0 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010CC2 0000                       		dc.w Obj57_Move-Obj57_Index
00010CC4 0000                       		dc.w Obj57_Display-Obj57_Index
00010CC6                            ; ===========================================================================
00010CC6                            
00010CC6                            Obj57_Main:				; XREF: Obj57_Index
00010CC6 5428 0024                  		addq.b	#2,$24(a0)
00010CCA 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010CD2 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010CD8 117C 0004 0001             		move.b	#4,1(a0)
00010CDE 117C 0004 0018             		move.b	#4,$18(a0)
00010CE4 117C 0008 0019             		move.b	#8,$19(a0)
00010CEA 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010CF0 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010CF6 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010CFC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010D02 6600                       		bne.s	loc_107E8
00010D04 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010D0A 317C 0310 0002             		move.w	#$310,2(a0)
00010D10 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010D18                            
00010D18                            loc_107E8:
00010D18 1228 0028                  		move.b	$28(a0),d1	; get object type
00010D1C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010D20 4881                       		ext.w	d1
00010D22 E741                       		asl.w	#3,d1		; multiply by 8
00010D24 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010D28 1028 0022                  		move.b	$22(a0),d0
00010D2C E418                       		ror.b	#2,d0
00010D2E 0200 00C0                  		andi.b	#-$40,d0
00010D32 1140 0026                  		move.b	d0,$26(a0)
00010D36 45E8 0029                  		lea	$29(a0),a2
00010D3A 1228 0028                  		move.b	$28(a0),d1	; get object type
00010D3E 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00010D42 14FC 0000                  		move.b	#0,(a2)+
00010D46 3601                       		move.w	d1,d3
00010D48 E94B                       		lsl.w	#4,d3
00010D4A 1143 003C                  		move.b	d3,$3C(a0)
00010D4E 5341                       		subq.w	#1,d1		; set chain length (type-1)
00010D50 6500                       		bcs.s	loc_10894
00010D52 0828 0003 0028             		btst	#3,$28(a0)
00010D58 6700                       		beq.s	Obj57_MakeChain
00010D5A 5341                       		subq.w	#1,d1
00010D5C 6500                       		bcs.s	loc_10894
00010D5E                            
00010D5E                            Obj57_MakeChain:
00010D5E 6100 D266                  		bsr.w	SingleObjLoad
00010D62 6600                       		bne.s	loc_10894
00010D64 5228 0029                  		addq.b	#1,$29(a0)
00010D68 3A09                       		move.w	a1,d5
00010D6A 0445 D000                  		subi.w	#-$3000,d5
00010D6E EC4D                       		lsr.w	#6,d5
00010D70 0245 007F                  		andi.w	#$7F,d5
00010D74 14C5                       		move.b	d5,(a2)+
00010D76 137C 0004 0024             		move.b	#4,$24(a1)
00010D7C 1290                       		move.b	0(a0),0(a1)
00010D7E 2368 0004 0004             		move.l	4(a0),4(a1)
00010D84 3368 0002 0002             		move.w	2(a0),2(a1)
00010D8A 1368 0001 0001             		move.b	1(a0),1(a1)
00010D90 1368 0018 0018             		move.b	$18(a0),$18(a1)
00010D96 1368 0019 0019             		move.b	$19(a0),$19(a1)
00010D9C 1368 0020 0020             		move.b	$20(a0),$20(a1)
00010DA2 0403 0010                  		subi.b	#$10,d3
00010DA6 1343 003C                  		move.b	d3,$3C(a1)
00010DAA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00010DB0 6600                       		bne.s	loc_10890
00010DB2 4A03                       		tst.b	d3
00010DB4 6600                       		bne.s	loc_10890
00010DB6 137C 0002 001A             		move.b	#2,$1A(a1)
00010DBC                            
00010DBC                            loc_10890:
00010DBC 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00010DC0                            
00010DC0                            loc_10894:
00010DC0 3A08                       		move.w	a0,d5
00010DC2 0445 D000                  		subi.w	#-$3000,d5
00010DC6 EC4D                       		lsr.w	#6,d5
00010DC8 0245 007F                  		andi.w	#$7F,d5
00010DCC 14C5                       		move.b	d5,(a2)+
00010DCE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010DD4 6600                       		bne.s	Obj57_Move
00010DD6 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00010DDC 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00010DE2                            
00010DE2                            Obj57_Move:				; XREF: Obj57_Index
00010DE2 6100 0000                  		bsr.w	Obj57_MoveSub
00010DE6 6000 0000                  		bra.w	Obj57_ChkDel
00010DEA                            ; ===========================================================================
00010DEA                            
00010DEA                            Obj57_MoveSub:				; XREF: Obj57_Move
00010DEA 3028 003E                  		move.w	$3E(a0),d0
00010DEE D168 0026                  		add.w	d0,$26(a0)
00010DF2 1028 0026                  		move.b	$26(a0),d0
00010DF6 4EB9 0000 2BE8             		jsr	(CalcSine).l
00010DFC 3428 0038                  		move.w	$38(a0),d2
00010E00 3628 003A                  		move.w	$3A(a0),d3
00010E04 45E8 0029                  		lea	$29(a0),a2
00010E08 7C00                       		moveq	#0,d6
00010E0A 1C1A                       		move.b	(a2)+,d6
00010E0C                            
00010E0C                            Obj57_MoveLoop:
00010E0C 7800                       		moveq	#0,d4
00010E0E 181A                       		move.b	(a2)+,d4
00010E10 ED4C                       		lsl.w	#6,d4
00010E12 0684 00FF D000             		addi.l	#$FFD000,d4
00010E18 2244                       		movea.l	d4,a1
00010E1A 7800                       		moveq	#0,d4
00010E1C 1829 003C                  		move.b	$3C(a1),d4
00010E20 2A04                       		move.l	d4,d5
00010E22 C9C0                       		muls.w	d0,d4
00010E24 E084                       		asr.l	#8,d4
00010E26 CBC1                       		muls.w	d1,d5
00010E28 E085                       		asr.l	#8,d5
00010E2A D842                       		add.w	d2,d4
00010E2C DA43                       		add.w	d3,d5
00010E2E 3344 000C                  		move.w	d4,$C(a1)
00010E32 3345 0008                  		move.w	d5,8(a1)
00010E36 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00010E3A 4E75                       		rts	
00010E3C                            ; ===========================================================================
00010E3C                            
00010E3C                            Obj57_ChkDel:				; XREF: Obj57_Move
00010E3C 3028 003A                  		move.w	$3A(a0),d0
00010E40 0240 FF80                  		andi.w	#$FF80,d0
00010E44 3238 F700                  		move.w	($FFFFF700).w,d1
00010E48 0441 0080                  		subi.w	#$80,d1
00010E4C 0241 FF80                  		andi.w	#$FF80,d1
00010E50 9041                       		sub.w	d1,d0
00010E52 0C40 0280                  		cmpi.w	#$280,d0
00010E56 6200 0000                  		bhi.w	Obj57_Delete
00010E5A 6000 CCE4                  		bra.w	DisplaySprite
00010E5E                            ; ===========================================================================
00010E5E                            
00010E5E                            Obj57_Delete:				; XREF: Obj57_ChkDel
00010E5E 7400                       		moveq	#0,d2
00010E60 45E8 0029                  		lea	$29(a0),a2
00010E64 141A                       		move.b	(a2)+,d2
00010E66                            
00010E66                            Obj57_DelLoop:
00010E66 7000                       		moveq	#0,d0
00010E68 101A                       		move.b	(a2)+,d0
00010E6A ED48                       		lsl.w	#6,d0
00010E6C 0680 00FF D000             		addi.l	#$FFD000,d0
00010E72 2240                       		movea.l	d0,a1
00010E74 6100 CD08                  		bsr.w	DeleteObject2
00010E78 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00010E7C                            
00010E7C 4E75                       		rts	
00010E7E                            ; ===========================================================================
00010E7E                            
00010E7E                            Obj57_Display:				; XREF: Obj57_Index
00010E7E 6000 CCC0                  		bra.w	DisplaySprite
00010E82                            ; ===========================================================================
00010E82                            ; ---------------------------------------------------------------------------
00010E82                            ; Sprite mappings - chain of spiked balls (SYZ)
00010E82                            ; ---------------------------------------------------------------------------
00010E82                            Map_obj57:
00010E82                            	include "_maps\obj57syz.asm"
00010E82                            ; ---------------------------------------------------------------------------
00010E82                            ; Sprite mappings - chain of spiked balls (SYZ)
00010E82                            ; ---------------------------------------------------------------------------
00010E82 0000                       		dc.w byte_10958-Map_obj57
00010E84 01                         byte_10958:	dc.b 1
00010E85 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010E8A                            		even
00010E8A                            		even
00010E8A                            
00010E8A                            ; ---------------------------------------------------------------------------
00010E8A                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010E8A                            ; ---------------------------------------------------------------------------
00010E8A                            Map_obj57a:
00010E8A                            	include "_maps\obj57lz.asm"
00010E8A                            ; ---------------------------------------------------------------------------
00010E8A                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010E8A                            ; ---------------------------------------------------------------------------
00010E8A 0000                       		dc.w byte_10964-Map_obj57a
00010E8C 0000                       		dc.w byte_1096A-Map_obj57a
00010E8E 0000                       		dc.w byte_10970-Map_obj57a
00010E90 01                         byte_10964:	dc.b 1
00010E91 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010E96 01                         byte_1096A:	dc.b 1
00010E97 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00010E9C 01                         byte_10970:	dc.b 1
00010E9D F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00010EA2                            		even
00010EA2                            		even
00010EA2                            
00010EA2                            ; ===========================================================================
00010EA2                            ; ---------------------------------------------------------------------------
00010EA2                            ; Object 58 - giant spiked balls (SYZ)
00010EA2                            ; ---------------------------------------------------------------------------
00010EA2                            
00010EA2                            Obj58:					; XREF: Obj_Index
00010EA2 7000                       		moveq	#0,d0
00010EA4 1028 0024                  		move.b	$24(a0),d0
00010EA8 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00010EAC 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00010EB0                            ; ===========================================================================
00010EB0 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00010EB2 0000                       		dc.w Obj58_Move-Obj58_Index
00010EB4                            ; ===========================================================================
00010EB4                            
00010EB4                            Obj58_Main:				; XREF: Obj58_Index
00010EB4 5428 0024                  		addq.b	#2,$24(a0)
00010EB8 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00010EC0 317C 0396 0002             		move.w	#$396,2(a0)
00010EC6 117C 0004 0001             		move.b	#4,1(a0)
00010ECC 117C 0004 0018             		move.b	#4,$18(a0)
00010ED2 117C 0018 0019             		move.b	#$18,$19(a0)
00010ED8 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010EDE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010EE4 117C 0086 0020             		move.b	#$86,$20(a0)
00010EEA 1228 0028                  		move.b	$28(a0),d1	; get object type
00010EEE 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010EF2 4881                       		ext.w	d1
00010EF4 E741                       		asl.w	#3,d1		; multiply by 8
00010EF6 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00010EFA 1028 0022                  		move.b	$22(a0),d0
00010EFE E418                       		ror.b	#2,d0
00010F00 0200 00C0                  		andi.b	#$C0,d0
00010F04 1140 0026                  		move.b	d0,$26(a0)
00010F08 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00010F0E                            
00010F0E                            Obj58_Move:				; XREF: Obj58_Index
00010F0E 7000                       		moveq	#0,d0
00010F10 1028 0028                  		move.b	$28(a0),d0	; get object type
00010F14 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00010F18 D040                       		add.w	d0,d0
00010F1A 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00010F1E 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00010F22 3028 003A                  		move.w	$3A(a0),d0
00010F26 0240 FF80                  		andi.w	#$FF80,d0
00010F2A 3238 F700                  		move.w	($FFFFF700).w,d1
00010F2E 0441 0080                  		subi.w	#$80,d1
00010F32 0241 FF80                  		andi.w	#$FF80,d1
00010F36 9041                       		sub.w	d1,d0
00010F38 0C40 0280                  		cmpi.w	#$280,d0
00010F3C 6200 CC3E                  		bhi.w	DeleteObject
00010F40 6000 CBFE                  		bra.w	DisplaySprite
00010F44                            ; ===========================================================================
00010F44 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00010F46 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00010F48 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00010F4A 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00010F4C                            ; ===========================================================================
00010F4C                            
00010F4C                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00010F4C 4E75                       		rts	
00010F4E                            ; ===========================================================================
00010F4E                            
00010F4E                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00010F4E 323C 0060                  		move.w	#$60,d1
00010F52 7000                       		moveq	#0,d0
00010F54 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010F58 0828 0000 0022             		btst	#0,$22(a0)
00010F5E 6700                       		beq.s	loc_10A38
00010F60 4440                       		neg.w	d0
00010F62 D041                       		add.w	d1,d0
00010F64                            
00010F64                            loc_10A38:
00010F64 3228 003A                  		move.w	$3A(a0),d1
00010F68 9240                       		sub.w	d0,d1
00010F6A 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010F6E 4E75                       		rts	
00010F70                            ; ===========================================================================
00010F70                            
00010F70                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00010F70 323C 0060                  		move.w	#$60,d1
00010F74 7000                       		moveq	#0,d0
00010F76 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010F7A 0828 0000 0022             		btst	#0,$22(a0)
00010F80 6700                       		beq.s	loc_10A5C
00010F82 4440                       		neg.w	d0
00010F84 0640 0080                  		addi.w	#$80,d0
00010F88                            
00010F88                            loc_10A5C:
00010F88 3228 0038                  		move.w	$38(a0),d1
00010F8C 9240                       		sub.w	d0,d1
00010F8E 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010F92 4E75                       		rts	
00010F94                            ; ===========================================================================
00010F94                            
00010F94                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00010F94 3028 003E                  		move.w	$3E(a0),d0
00010F98 D168 0026                  		add.w	d0,$26(a0)
00010F9C 1028 0026                  		move.b	$26(a0),d0
00010FA0 4EB9 0000 2BE8             		jsr	(CalcSine).l
00010FA6 3428 0038                  		move.w	$38(a0),d2
00010FAA 3628 003A                  		move.w	$3A(a0),d3
00010FAE 7800                       		moveq	#0,d4
00010FB0 1828 003C                  		move.b	$3C(a0),d4
00010FB4 2A04                       		move.l	d4,d5
00010FB6 C9C0                       		muls.w	d0,d4
00010FB8 E084                       		asr.l	#8,d4
00010FBA CBC1                       		muls.w	d1,d5
00010FBC E085                       		asr.l	#8,d5
00010FBE D842                       		add.w	d2,d4
00010FC0 DA43                       		add.w	d3,d5
00010FC2 3144 000C                  		move.w	d4,$C(a0)
00010FC6 3145 0008                  		move.w	d5,8(a0)
00010FCA 4E75                       		rts	
00010FCC                            ; ===========================================================================
00010FCC                            ; ---------------------------------------------------------------------------
00010FCC                            ; Sprite mappings - SBZ	spiked ball on a chain
00010FCC                            ; ---------------------------------------------------------------------------
00010FCC                            Map_obj15b:
00010FCC                            	include "_maps\obj15sbz.asm"
00010FCC                            ; ---------------------------------------------------------------------------
00010FCC                            ; Sprite mappings - spiked ball on a chain (SBZ)
00010FCC                            ; ---------------------------------------------------------------------------
00010FCC 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00010FD0 0000                       		dc.w byte_10AC6-Map_obj15b
00010FD2 05                         byte_10AA6:	dc.b 5
00010FD3 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00010FD8 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00010FDD F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00010FE2 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00010FE7 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00010FEC 01                         byte_10AC0:	dc.b 1
00010FED F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00010FF2 02                         byte_10AC6:	dc.b 2
00010FF3 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00010FF8 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00010FFE 00                         		even
00010FFE 00                         		even
00010FFE                            
00010FFE                            ; ===========================================================================
00010FFE                            ; ---------------------------------------------------------------------------
00010FFE                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00010FFE                            ; ---------------------------------------------------------------------------
00010FFE                            
00010FFE                            Obj59:					; XREF: Obj_Index
00010FFE 7000                       		moveq	#0,d0
00011000 1028 0024                  		move.b	$24(a0),d0
00011004 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00011008 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
0001100C 3028 0032                  		move.w	$32(a0),d0
00011010 0240 FF80                  		andi.w	#$FF80,d0
00011014 3238 F700                  		move.w	($FFFFF700).w,d1
00011018 0441 0080                  		subi.w	#$80,d1
0001101C 0241 FF80                  		andi.w	#$FF80,d1
00011020 9041                       		sub.w	d1,d0
00011022 0C40 0280                  		cmpi.w	#$280,d0
00011026 6200 CB54                  		bhi.w	DeleteObject
0001102A 6000 CB14                  		bra.w	DisplaySprite
0001102E                            ; ===========================================================================
0001102E 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011030 0000                       		dc.w Obj59_Platform-Obj59_Index
00011032 0000                       		dc.w Obj59_Action-Obj59_Index
00011034 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00011036                            
00011036 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00011038                            
00011038 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
0001103A 2001                       		dc.b $20, 1
0001103C 3401                       		dc.b $34, 1
0001103E 1003                       		dc.b $10, 3
00011040 2003                       		dc.b $20, 3
00011042 3403                       		dc.b $34, 3
00011044 1401                       		dc.b $14, 1
00011046 2401                       		dc.b $24, 1
00011048 2C01                       		dc.b $2C, 1
0001104A 1403                       		dc.b $14, 3
0001104C 2403                       		dc.b $24, 3
0001104E 2C03                       		dc.b $2C, 3
00011050 2005                       		dc.b $20, 5
00011052 2007                       		dc.b $20, 7
00011054 3009                       		dc.b $30, 9
00011056                            ; ===========================================================================
00011056                            
00011056                            Obj59_Main:				; XREF: Obj59_Index
00011056 5428 0024                  		addq.b	#2,$24(a0)
0001105A 7000                       		moveq	#0,d0
0001105C 1028 0028                  		move.b	$28(a0),d0
00011060 6A00                       		bpl.s	Obj59_Main2
00011062 5828 0024                  		addq.b	#4,$24(a0)
00011066 0240 007F                  		andi.w	#$7F,d0
0001106A C0FC 0006                  		mulu.w	#6,d0
0001106E 3140 003C                  		move.w	d0,$3C(a0)
00011072 3140 003E                  		move.w	d0,$3E(a0)
00011076 588F                       		addq.l	#4,sp
00011078 4E75                       		rts	
0001107A                            ; ===========================================================================
0001107A                            
0001107A                            Obj59_Main2:
0001107A E648                       		lsr.w	#3,d0
0001107C 0240 001E                  		andi.w	#$1E,d0
00011080 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00011084 115A 0019                  		move.b	(a2)+,$19(a0)
00011088 115A 001A                  		move.b	(a2)+,$1A(a0)
0001108C 7000                       		moveq	#0,d0
0001108E 1028 0028                  		move.b	$28(a0),d0
00011092 D040                       		add.w	d0,d0
00011094 0240 001E                  		andi.w	#$1E,d0
00011098 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
0001109C 101A                       		move.b	(a2)+,d0
0001109E E548                       		lsl.w	#2,d0
000110A0 3140 003C                  		move.w	d0,$3C(a0)
000110A4 115A 0028                  		move.b	(a2)+,$28(a0)
000110A8 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
000110B0 317C 4000 0002             		move.w	#$4000,2(a0)
000110B6 117C 0004 0001             		move.b	#4,1(a0)
000110BC 117C 0004 0018             		move.b	#4,$18(a0)
000110C2 3168 0008 0032             		move.w	8(a0),$32(a0)
000110C8 3168 000C 0030             		move.w	$C(a0),$30(a0)
000110CE                            
000110CE                            Obj59_Platform:				; XREF: Obj59_Index
000110CE 7200                       		moveq	#0,d1
000110D0 1228 0019                  		move.b	$19(a0),d1
000110D4 4EB9 0000 786C             		jsr	(PlatformObject).l
000110DA 6000 0000                  		bra.w	Obj59_Types
000110DE                            ; ===========================================================================
000110DE                            
000110DE                            Obj59_Action:				; XREF: Obj59_Index
000110DE 7200                       		moveq	#0,d1
000110E0 1228 0019                  		move.b	$19(a0),d1
000110E4 4EB9 0000 79E0             		jsr	(ExitPlatform).l
000110EA 3F28 0008                  		move.w	8(a0),-(sp)
000110EE 6100 0000                  		bsr.w	Obj59_Types
000110F2 341F                       		move.w	(sp)+,d2
000110F4 4A10                       		tst.b	0(a0)
000110F6 6700                       		beq.s	locret_10BD4
000110F8 4EF9 0000 7F4A             		jmp	(MvSonicOnPtfm2).l
000110FE                            ; ===========================================================================
000110FE                            
000110FE                            locret_10BD4:
000110FE 4E75                       		rts	
00011100                            ; ===========================================================================
00011100                            
00011100                            Obj59_Types:
00011100 7000                       		moveq	#0,d0
00011102 1028 0028                  		move.b	$28(a0),d0
00011106 0240 000F                  		andi.w	#$F,d0
0001110A D040                       		add.w	d0,d0
0001110C 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011110 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00011114                            ; ===========================================================================
00011114 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011118 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001111C 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011120 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011124 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011128                            ; ===========================================================================
00011128                            
00011128                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011128 4E75                       		rts	
0001112A                            ; ===========================================================================
0001112A                            
0001112A                            Obj59_Type01:				; XREF: Obj59_TypeIndex
0001112A 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011130 6600                       		bne.s	locret_10C0C
00011132 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011136                            
00011136                            locret_10C0C:
00011136 4E75                       		rts	
00011138                            ; ===========================================================================
00011138                            
00011138                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011138 6100 0000                  		bsr.w	Obj59_Move
0001113C 3028 0034                  		move.w	$34(a0),d0
00011140 4440                       		neg.w	d0
00011142 D068 0030                  		add.w	$30(a0),d0
00011146 3140 000C                  		move.w	d0,$C(a0)
0001114A 4E75                       		rts	
0001114C                            ; ===========================================================================
0001114C                            
0001114C                            Obj59_Type04:				; XREF: Obj59_TypeIndex
0001114C 6100 0000                  		bsr.w	Obj59_Move
00011150 3028 0034                  		move.w	$34(a0),d0
00011154 D068 0030                  		add.w	$30(a0),d0
00011158 3140 000C                  		move.w	d0,$C(a0)
0001115C 4E75                       		rts	
0001115E                            ; ===========================================================================
0001115E                            
0001115E                            Obj59_Type06:				; XREF: Obj59_TypeIndex
0001115E 6100 0000                  		bsr.w	Obj59_Move
00011162 3028 0034                  		move.w	$34(a0),d0
00011166 E240                       		asr.w	#1,d0
00011168 4440                       		neg.w	d0
0001116A D068 0030                  		add.w	$30(a0),d0
0001116E 3140 000C                  		move.w	d0,$C(a0)
00011172 3028 0034                  		move.w	$34(a0),d0
00011176 D068 0032                  		add.w	$32(a0),d0
0001117A 3140 0008                  		move.w	d0,8(a0)
0001117E 4E75                       		rts	
00011180                            ; ===========================================================================
00011180                            
00011180                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00011180 6100 0000                  		bsr.w	Obj59_Move
00011184 3028 0034                  		move.w	$34(a0),d0
00011188 E240                       		asr.w	#1,d0
0001118A D068 0030                  		add.w	$30(a0),d0
0001118E 3140 000C                  		move.w	d0,$C(a0)
00011192 3028 0034                  		move.w	$34(a0),d0
00011196 4440                       		neg.w	d0
00011198 D068 0032                  		add.w	$32(a0),d0
0001119C 3140 0008                  		move.w	d0,8(a0)
000111A0 4E75                       		rts	
000111A2                            ; ===========================================================================
000111A2                            
000111A2                            Obj59_Type09:				; XREF: Obj59_TypeIndex
000111A2 6100 0000                  		bsr.w	Obj59_Move
000111A6 3028 0034                  		move.w	$34(a0),d0
000111AA 4440                       		neg.w	d0
000111AC D068 0030                  		add.w	$30(a0),d0
000111B0 3140 000C                  		move.w	d0,$C(a0)
000111B4 4A28 0028                  		tst.b	$28(a0)
000111B8 6700 0000                  		beq.w	loc_10C94
000111BC 4E75                       		rts	
000111BE                            ; ===========================================================================
000111BE                            
000111BE                            loc_10C94:
000111BE 0828 0003 0022             		btst	#3,$22(a0)
000111C4 6700                       		beq.s	Obj59_Delete
000111C6 08E9 0001 0022             		bset	#1,$22(a1)
000111CC 08A9 0003 0022             		bclr	#3,$22(a1)
000111D2 137C 0002 0024             		move.b	#2,$24(a1)
000111D8                            
000111D8                            Obj59_Delete:
000111D8 6000 C9A2                  		bra.w	DeleteObject
000111DC                            
000111DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000111DC                            
000111DC                            
000111DC                            Obj59_Move:				; XREF: Obj59_Type02; et al
000111DC 3028 0038                  		move.w	$38(a0),d0
000111E0 4A28 003A                  		tst.b	$3A(a0)
000111E4 6600                       		bne.s	loc_10CC8
000111E6 0C40 0800                  		cmpi.w	#$800,d0
000111EA 6400                       		bcc.s	loc_10CD0
000111EC 0640 0010                  		addi.w	#$10,d0
000111F0 6000                       		bra.s	loc_10CD0
000111F2                            ; ===========================================================================
000111F2                            
000111F2                            loc_10CC8:
000111F2 4A40                       		tst.w	d0
000111F4 6700                       		beq.s	loc_10CD0
000111F6 0440 0010                  		subi.w	#$10,d0
000111FA                            
000111FA                            loc_10CD0:
000111FA 3140 0038                  		move.w	d0,$38(a0)
000111FE 48C0                       		ext.l	d0
00011200 E180                       		asl.l	#8,d0
00011202 D0A8 0034                  		add.l	$34(a0),d0
00011206 2140 0034                  		move.l	d0,$34(a0)
0001120A 4840                       		swap	d0
0001120C 3428 003C                  		move.w	$3C(a0),d2
00011210 B042                       		cmp.w	d2,d0
00011212 6300                       		bls.s	loc_10CF0
00011214 117C 0001 003A             		move.b	#1,$3A(a0)
0001121A                            
0001121A                            loc_10CF0:
0001121A D442                       		add.w	d2,d2
0001121C B042                       		cmp.w	d2,d0
0001121E 6600                       		bne.s	locret_10CFA
00011220 4228 0028                  		clr.b	$28(a0)
00011224                            
00011224                            locret_10CFA:
00011224 4E75                       		rts	
00011226                            ; End of function Obj59_Move
00011226                            
00011226                            ; ===========================================================================
00011226                            
00011226                            Obj59_MakeMulti:			; XREF: Obj59_Index
00011226 5368 003C                  		subq.w	#1,$3C(a0)
0001122A 6600                       		bne.s	Obj59_ChkDel
0001122C 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00011232 6100 CD92                  		bsr.w	SingleObjLoad
00011236 6600                       		bne.s	Obj59_ChkDel
00011238 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
0001123C 3368 0008 0008             		move.w	8(a0),8(a1)
00011242 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011248 137C 000E 0028             		move.b	#$E,$28(a1)
0001124E                            
0001124E                            Obj59_ChkDel:
0001124E 588F                       		addq.l	#4,sp
00011250 3028 0008                  		move.w	8(a0),d0
00011254 0240 FF80                  		andi.w	#$FF80,d0
00011258 3238 F700                  		move.w	($FFFFF700).w,d1
0001125C 0441 0080                  		subi.w	#$80,d1
00011260 0241 FF80                  		andi.w	#$FF80,d1
00011264 9041                       		sub.w	d1,d0
00011266 0C40 0280                  		cmpi.w	#$280,d0
0001126A 6200 C910                  		bhi.w	DeleteObject
0001126E 4E75                       		rts	
00011270                            ; ===========================================================================
00011270                            ; ---------------------------------------------------------------------------
00011270                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011270                            ; ---------------------------------------------------------------------------
00011270                            Map_obj59:
00011270                            	include "_maps\obj59.asm"
00011270                            ; ---------------------------------------------------------------------------
00011270                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011270                            ; ---------------------------------------------------------------------------
00011270 0000                       		dc.w byte_10D4A-Map_obj59
00011272 03                         byte_10D4A:	dc.b 3
00011273 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011278 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001127D F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00011282                            		even
00011282                            		even
00011282                            
00011282                            ; ===========================================================================
00011282                            ; ---------------------------------------------------------------------------
00011282                            ; Object 5A - platforms	moving in circles (SLZ)
00011282                            ; ---------------------------------------------------------------------------
00011282                            
00011282                            Obj5A:					; XREF: Obj_Index
00011282 7000                       		moveq	#0,d0
00011284 1028 0024                  		move.b	$24(a0),d0
00011288 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
0001128C 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00011290 3028 0032                  		move.w	$32(a0),d0
00011294 0240 FF80                  		andi.w	#$FF80,d0
00011298 3238 F700                  		move.w	($FFFFF700).w,d1
0001129C 0441 0080                  		subi.w	#$80,d1
000112A0 0241 FF80                  		andi.w	#$FF80,d1
000112A4 9041                       		sub.w	d1,d0
000112A6 0C40 0280                  		cmpi.w	#$280,d0
000112AA 6200 C8D0                  		bhi.w	DeleteObject
000112AE 6000 C890                  		bra.w	DisplaySprite
000112B2                            ; ===========================================================================
000112B2 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000112B4 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000112B6 0000                       		dc.w Obj5A_Action-Obj5A_Index
000112B8                            ; ===========================================================================
000112B8                            
000112B8                            Obj5A_Main:				; XREF: Obj5A_Index
000112B8 5428 0024                  		addq.b	#2,$24(a0)
000112BC 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
000112C4 317C 4000 0002             		move.w	#$4000,2(a0)
000112CA 117C 0004 0001             		move.b	#4,1(a0)
000112D0 117C 0004 0018             		move.b	#4,$18(a0)
000112D6 117C 0018 0019             		move.b	#$18,$19(a0)
000112DC 3168 0008 0032             		move.w	8(a0),$32(a0)
000112E2 3168 000C 0030             		move.w	$C(a0),$30(a0)
000112E8                            
000112E8                            Obj5A_Platform:				; XREF: Obj5A_Index
000112E8 7200                       		moveq	#0,d1
000112EA 1228 0019                  		move.b	$19(a0),d1
000112EE 4EB9 0000 786C             		jsr	(PlatformObject).l
000112F4 6000 0000                  		bra.w	Obj5A_Types
000112F8                            ; ===========================================================================
000112F8                            
000112F8                            Obj5A_Action:				; XREF: Obj5A_Index
000112F8 7200                       		moveq	#0,d1
000112FA 1228 0019                  		move.b	$19(a0),d1
000112FE 4EB9 0000 79E0             		jsr	(ExitPlatform).l
00011304 3F28 0008                  		move.w	8(a0),-(sp)
00011308 6100 0000                  		bsr.w	Obj5A_Types
0001130C 341F                       		move.w	(sp)+,d2
0001130E 4EF9 0000 7F4A             		jmp	(MvSonicOnPtfm2).l
00011314                            ; ===========================================================================
00011314                            
00011314                            Obj5A_Types:
00011314 7000                       		moveq	#0,d0
00011316 1028 0028                  		move.b	$28(a0),d0
0001131A 0240 000C                  		andi.w	#$C,d0
0001131E E248                       		lsr.w	#1,d0
00011320 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00011324 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011328                            ; ===========================================================================
00011328 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
0001132A 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
0001132C                            ; ===========================================================================
0001132C                            
0001132C                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
0001132C 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011330 0401 0050                  		subi.b	#$50,d1
00011334 4881                       		ext.w	d1
00011336 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001133A 0402 0050                  		subi.b	#$50,d2
0001133E 4882                       		ext.w	d2
00011340 0828 0000 0028             		btst	#0,$28(a0)
00011346 6700                       		beq.s	loc_10E24
00011348 4441                       		neg.w	d1
0001134A 4442                       		neg.w	d2
0001134C                            
0001134C                            loc_10E24:
0001134C 0828 0001 0028             		btst	#1,$28(a0)
00011352 6700                       		beq.s	loc_10E30
00011354 4441                       		neg.w	d1
00011356 C342                       		exg	d1,d2
00011358                            
00011358                            loc_10E30:
00011358 D268 0032                  		add.w	$32(a0),d1
0001135C 3141 0008                  		move.w	d1,8(a0)
00011360 D468 0030                  		add.w	$30(a0),d2
00011364 3142 000C                  		move.w	d2,$C(a0)
00011368 4E75                       		rts	
0001136A                            ; ===========================================================================
0001136A                            
0001136A                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
0001136A 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001136E 0401 0050                  		subi.b	#$50,d1
00011372 4881                       		ext.w	d1
00011374 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011378 0402 0050                  		subi.b	#$50,d2
0001137C 4882                       		ext.w	d2
0001137E 0828 0000 0028             		btst	#0,$28(a0)
00011384 6700                       		beq.s	loc_10E62
00011386 4441                       		neg.w	d1
00011388 4442                       		neg.w	d2
0001138A                            
0001138A                            loc_10E62:
0001138A 0828 0001 0028             		btst	#1,$28(a0)
00011390 6700                       		beq.s	loc_10E6E
00011392 4441                       		neg.w	d1
00011394 C342                       		exg	d1,d2
00011396                            
00011396                            loc_10E6E:
00011396 4441                       		neg.w	d1
00011398 D268 0032                  		add.w	$32(a0),d1
0001139C 3141 0008                  		move.w	d1,8(a0)
000113A0 D468 0030                  		add.w	$30(a0),d2
000113A4 3142 000C                  		move.w	d2,$C(a0)
000113A8 4E75                       		rts	
000113AA                            ; ===========================================================================
000113AA                            ; ---------------------------------------------------------------------------
000113AA                            ; Sprite mappings - platforms that move	in circles (SLZ)
000113AA                            ; ---------------------------------------------------------------------------
000113AA                            Map_obj5A:
000113AA                            	include "_maps\obj5A.asm"
000113AA                            ; ---------------------------------------------------------------------------
000113AA                            ; Sprite mappings - platforms that move	in circles (SLZ)
000113AA                            ; ---------------------------------------------------------------------------
000113AA 0000                       		dc.w byte_10E84-Map_obj5A
000113AC 02                         byte_10E84:	dc.b 2
000113AD F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000113B2 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000113B8 00                         		even
000113B8 00                         		even
000113B8                            
000113B8                            ; ===========================================================================
000113B8                            ; ---------------------------------------------------------------------------
000113B8                            ; Object 5B - blocks that form a staircase (SLZ)
000113B8                            ; ---------------------------------------------------------------------------
000113B8                            
000113B8                            Obj5B:					; XREF: Obj_Index
000113B8 7000                       		moveq	#0,d0
000113BA 1028 0024                  		move.b	$24(a0),d0
000113BE 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
000113C2 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
000113C6 3028 0030                  		move.w	$30(a0),d0
000113CA 0240 FF80                  		andi.w	#$FF80,d0
000113CE 3238 F700                  		move.w	($FFFFF700).w,d1
000113D2 0441 0080                  		subi.w	#$80,d1
000113D6 0241 FF80                  		andi.w	#$FF80,d1
000113DA 9041                       		sub.w	d1,d0
000113DC 0C40 0280                  		cmpi.w	#$280,d0
000113E0 6200 C79A                  		bhi.w	DeleteObject
000113E4 6000 C75A                  		bra.w	DisplaySprite
000113E8                            ; ===========================================================================
000113E8 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000113EA 0000                       		dc.w Obj5B_Move-Obj5B_Index
000113EC 0000                       		dc.w Obj5B_Solid-Obj5B_Index
000113EE                            ; ===========================================================================
000113EE                            
000113EE                            Obj5B_Main:				; XREF: Obj5B_Index
000113EE 5428 0024                  		addq.b	#2,$24(a0)
000113F2 7638                       		moveq	#$38,d3
000113F4 7801                       		moveq	#1,d4
000113F6 0828 0000 0022             		btst	#0,$22(a0)
000113FC 6700                       		beq.s	loc_10EDA
000113FE 763B                       		moveq	#$3B,d3
00011400 78FF                       		moveq	#-1,d4
00011402                            
00011402                            loc_10EDA:
00011402 3428 0008                  		move.w	8(a0),d2
00011406 2248                       		movea.l	a0,a1
00011408 7203                       		moveq	#3,d1
0001140A 6000                       		bra.s	Obj5B_MakeBlocks
0001140C                            ; ===========================================================================
0001140C                            
0001140C                            Obj5B_Loop:
0001140C 6100 CBCE                  		bsr.w	SingleObjLoad2
00011410 6600 0000                  		bne.w	Obj5B_Move
00011414 137C 0004 0024             		move.b	#4,$24(a1)
0001141A                            
0001141A                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
0001141A 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
0001141E 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00011426 337C 4000 0002             		move.w	#$4000,2(a1)
0001142C 137C 0004 0001             		move.b	#4,1(a1)
00011432 137C 0003 0018             		move.b	#3,$18(a1)
00011438 137C 0010 0019             		move.b	#$10,$19(a1)
0001143E 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011444 3342 0008                  		move.w	d2,8(a1)
00011448 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001144E 3368 0008 0030             		move.w	8(a0),$30(a1)
00011454 3369 000C 0032             		move.w	$C(a1),$32(a1)
0001145A 0642 0020                  		addi.w	#$20,d2
0001145E 1343 0037                  		move.b	d3,$37(a1)
00011462 2348 003C                  		move.l	a0,$3C(a1)
00011466 D604                       		add.b	d4,d3
00011468 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
0001146C                            
0001146C                            Obj5B_Move:				; XREF: Obj5B_Index
0001146C 7000                       		moveq	#0,d0
0001146E 1028 0028                  		move.b	$28(a0),d0
00011472 0240 0007                  		andi.w	#7,d0
00011476 D040                       		add.w	d0,d0
00011478 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
0001147C 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00011480                            
00011480                            Obj5B_Solid:				; XREF: Obj5B_Index
00011480 2468 003C                  		movea.l	$3C(a0),a2
00011484 7000                       		moveq	#0,d0
00011486 1028 0037                  		move.b	$37(a0),d0
0001148A 1032 0000                  		move.b	(a2,d0.w),d0
0001148E D068 0032                  		add.w	$32(a0),d0
00011492 3140 000C                  		move.w	d0,$C(a0)
00011496 7200                       		moveq	#0,d1
00011498 1228 0019                  		move.b	$19(a0),d1
0001149C 0641 000B                  		addi.w	#$B,d1
000114A0 343C 0010                  		move.w	#$10,d2
000114A4 363C 0011                  		move.w	#$11,d3
000114A8 3828 0008                  		move.w	8(a0),d4
000114AC 6100 EA62                  		bsr.w	SolidObject
000114B0 4A04                       		tst.b	d4
000114B2 6A00                       		bpl.s	loc_10F92
000114B4 1544 0036                  		move.b	d4,$36(a2)
000114B8                            
000114B8                            loc_10F92:
000114B8 0828 0003 0022             		btst	#3,$22(a0)
000114BE 6700                       		beq.s	locret_10FA0
000114C0 157C 0001 0036             		move.b	#1,$36(a2)
000114C6                            
000114C6                            locret_10FA0:
000114C6 4E75                       		rts	
000114C8                            ; ===========================================================================
000114C8 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
000114CA 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000114CC 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
000114CE 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000114D0                            ; ===========================================================================
000114D0                            
000114D0                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
000114D0 4A68 0034                  		tst.w	$34(a0)
000114D4 6600                       		bne.s	loc_10FC0
000114D6 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000114DC 6600                       		bne.s	locret_10FBE
000114DE 317C 001E 0034             		move.w	#$1E,$34(a0)
000114E4                            
000114E4                            locret_10FBE:
000114E4 4E75                       		rts	
000114E6                            ; ===========================================================================
000114E6                            
000114E6                            loc_10FC0:
000114E6 5368 0034                  		subq.w	#1,$34(a0)
000114EA 66F8                       		bne.s	locret_10FBE
000114EC 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000114F0 4E75                       		rts	
000114F2                            ; ===========================================================================
000114F2                            
000114F2                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
000114F2 4A68 0034                  		tst.w	$34(a0)
000114F6 6600                       		bne.s	loc_10FE0
000114F8 4A28 0036                  		tst.b	$36(a0)
000114FC 6A00                       		bpl.s	locret_10FDE
000114FE 317C 003C 0034             		move.w	#$3C,$34(a0)
00011504                            
00011504                            locret_10FDE:
00011504 4E75                       		rts	
00011506                            ; ===========================================================================
00011506                            
00011506                            loc_10FE0:
00011506 5368 0034                  		subq.w	#1,$34(a0)
0001150A 6600                       		bne.s	loc_10FEC
0001150C 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011510 4E75                       		rts	
00011512                            ; ===========================================================================
00011512                            
00011512                            loc_10FEC:
00011512 43E8 0038                  		lea	$38(a0),a1
00011516 3028 0034                  		move.w	$34(a0),d0
0001151A E408                       		lsr.b	#2,d0
0001151C 0200 0001                  		andi.b	#1,d0
00011520 12C0                       		move.b	d0,(a1)+
00011522 0A00 0001                  		eori.b	#1,d0
00011526 12C0                       		move.b	d0,(a1)+
00011528 0A00 0001                  		eori.b	#1,d0
0001152C 12C0                       		move.b	d0,(a1)+
0001152E 0A00 0001                  		eori.b	#1,d0
00011532 12C0                       		move.b	d0,(a1)+
00011534 4E75                       		rts	
00011536                            ; ===========================================================================
00011536                            
00011536                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00011536 43E8 0038                  		lea	$38(a0),a1
0001153A 0C11 0080                  		cmpi.b	#$80,(a1)
0001153E 6700                       		beq.s	locret_11038
00011540 5211                       		addq.b	#1,(a1)
00011542 7200                       		moveq	#0,d1
00011544 1219                       		move.b	(a1)+,d1
00011546 4841                       		swap	d1
00011548 E289                       		lsr.l	#1,d1
0001154A 2401                       		move.l	d1,d2
0001154C E289                       		lsr.l	#1,d1
0001154E 2601                       		move.l	d1,d3
00011550 D682                       		add.l	d2,d3
00011552 4841                       		swap	d1
00011554 4842                       		swap	d2
00011556 4843                       		swap	d3
00011558 12C3                       		move.b	d3,(a1)+
0001155A 12C2                       		move.b	d2,(a1)+
0001155C 12C1                       		move.b	d1,(a1)+
0001155E                            
0001155E                            locret_11038:
0001155E 4E75                       		rts	
00011560 4E75                       		rts	
00011562                            ; ===========================================================================
00011562                            ; ---------------------------------------------------------------------------
00011562                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011562                            ; ---------------------------------------------------------------------------
00011562                            Map_obj5B:
00011562                            	include "_maps\obj5B.asm"
00011562                            ; ---------------------------------------------------------------------------
00011562                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011562                            ; ---------------------------------------------------------------------------
00011562 0000                       		dc.w byte_1103E-Map_obj5B
00011564 01                         byte_1103E:	dc.b 1
00011565 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001156A                            		even
0001156A                            		even
0001156A                            
0001156A                            ; ===========================================================================
0001156A                            ; ---------------------------------------------------------------------------
0001156A                            ; Object 5C - metal girders in foreground (SLZ)
0001156A                            ; ---------------------------------------------------------------------------
0001156A                            
0001156A                            Obj5C:					; XREF: Obj_Index
0001156A 7000                       		moveq	#0,d0
0001156C 1028 0024                  		move.b	$24(a0),d0
00011570 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011574 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011578                            ; ===========================================================================
00011578 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
0001157A 0000                       		dc.w Obj5C_Display-Obj5C_Index
0001157C                            ; ===========================================================================
0001157C                            
0001157C                            Obj5C_Main:				; XREF: Obj5C_Index
0001157C 5428 0024                  		addq.b	#2,$24(a0)
00011580 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011588 317C 83CC 0002             		move.w	#$83CC,2(a0)
0001158E 117C 0010 0019             		move.b	#$10,$19(a0)
00011594                            
00011594                            Obj5C_Display:				; XREF: Obj5C_Index
00011594 2238 F700                  		move.l	($FFFFF700).w,d1
00011598 D281                       		add.l	d1,d1
0001159A 4841                       		swap	d1
0001159C 4441                       		neg.w	d1
0001159E 3141 0008                  		move.w	d1,8(a0)
000115A2 2238 F704                  		move.l	($FFFFF704).w,d1
000115A6 D281                       		add.l	d1,d1
000115A8 4841                       		swap	d1
000115AA 0241 003F                  		andi.w	#$3F,d1
000115AE 4441                       		neg.w	d1
000115B0 0641 0100                  		addi.w	#$100,d1
000115B4 3141 000A                  		move.w	d1,$A(a0)
000115B8 6000 C586                  		bra.w	DisplaySprite
000115BC                            ; ===========================================================================
000115BC                            ; ---------------------------------------------------------------------------
000115BC                            ; Sprite mappings - metal girders in foreground	(SLZ)
000115BC                            ; ---------------------------------------------------------------------------
000115BC                            Map_obj5C:
000115BC                            	include "_maps\obj5C.asm"
000115BC                            ; ---------------------------------------------------------------------------
000115BC                            ; Sprite mappings - metal girders in foreground	(SLZ)
000115BC                            ; ---------------------------------------------------------------------------
000115BC 0000                       		dc.w byte_11098-Map_obj5C
000115BE 09                         byte_11098:	dc.b 9
000115BF 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000115C4 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000115C9 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000115CE E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000115D3 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000115D8 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000115DD 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000115E2 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000115E7 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000115EC                            		even
000115EC                            		even
000115EC                            
000115EC                            ; ===========================================================================
000115EC                            ; ---------------------------------------------------------------------------
000115EC                            ; Object 1B - water surface (LZ)
000115EC                            ; ---------------------------------------------------------------------------
000115EC                            
000115EC                            Obj1B:					; XREF: Obj_Index
000115EC 7000                       		moveq	#0,d0
000115EE 1028 0024                  		move.b	$24(a0),d0
000115F2 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
000115F6 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
000115FA                            ; ===========================================================================
000115FA 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
000115FC 0000                       		dc.w Obj1B_Action-Obj1B_Index
000115FE                            ; ===========================================================================
000115FE                            
000115FE                            Obj1B_Main:				; XREF: Obj1B_Index
000115FE 5428 0024                  		addq.b	#2,$24(a0)
00011602 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
0001160A 317C C300 0002             		move.w	#$C300,2(a0)
00011610 117C 0004 0001             		move.b	#4,1(a0)
00011616 117C 0080 0019             		move.b	#$80,$19(a0)
0001161C 3168 0008 0030             		move.w	8(a0),$30(a0)
00011622                            
00011622                            Obj1B_Action:				; XREF: Obj1B_Index
00011622 3238 F700                  		move.w	($FFFFF700).w,d1
00011626 0241 FFE0                  		andi.w	#$FFE0,d1
0001162A D268 0030                  		add.w	$30(a0),d1
0001162E 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011634 6700                       		beq.s	loc_11114
00011636 0641 0020                  		addi.w	#$20,d1
0001163A                            
0001163A                            loc_11114:
0001163A 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
0001163E 3238 F646                  		move.w	($FFFFF646).w,d1
00011642 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011646 4A28 0032                  		tst.b	$32(a0)
0001164A 6600                       		bne.s	Obj1B_Animate
0001164C 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011652 6700                       		beq.s	loc_1114A	; if not, branch
00011654 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011658 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
0001165E 6000                       		bra.s	Obj1B_Display
00011660                            ; ===========================================================================
00011660                            
00011660                            Obj1B_Animate:				; XREF: loc_11114
00011660 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011664 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011666 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
0001166C 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011670                            
00011670                            loc_1114A:				; XREF: loc_11114
00011670 5328 001E                  		subq.b	#1,$1E(a0)
00011674 6A00                       		bpl.s	Obj1B_Display
00011676 117C 0007 001E             		move.b	#7,$1E(a0)
0001167C 5228 001A                  		addq.b	#1,$1A(a0)
00011680 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011686 6500                       		bcs.s	Obj1B_Display
00011688 117C 0000 001A             		move.b	#0,$1A(a0)
0001168E                            
0001168E                            Obj1B_Display:
0001168E 6000 C4B0                  		bra.w	DisplaySprite
00011692                            ; ===========================================================================
00011692                            ; ---------------------------------------------------------------------------
00011692                            ; Sprite mappings - water surface (LZ)
00011692                            ; ---------------------------------------------------------------------------
00011692                            Map_obj1B:
00011692                            	include "_maps\obj1B.asm"
00011692                            ; ---------------------------------------------------------------------------
00011692                            ; Sprite mappings - water surface (LZ)
00011692                            ; ---------------------------------------------------------------------------
00011692 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011696 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
0001169A 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
0001169E 03                         byte_11178:	dc.b 3
0001169F FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000116A4 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000116A9 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000116AE 03                         byte_11188:	dc.b 3
000116AF FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000116B4 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000116B9 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000116BE 03                         byte_11198:	dc.b 3
000116BF FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000116C4 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000116C9 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000116CE 06                         byte_111A8:	dc.b 6
000116CF FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000116D4 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
000116D9 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000116DE FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
000116E3 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000116E8 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
000116ED 06                         byte_111C7:	dc.b 6
000116EE FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000116F3 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
000116F8 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000116FD FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011702 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011707 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
0001170C 06                         byte_111E6:	dc.b 6
0001170D FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011712 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011717 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0001171C FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011721 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011726 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
0001172C 00                         		even
0001172C 00                         		even
0001172C                            
0001172C                            ; ===========================================================================
0001172C                            ; ---------------------------------------------------------------------------
0001172C                            ; Object 0B - pole that	breaks (LZ)
0001172C                            ; ---------------------------------------------------------------------------
0001172C                            
0001172C                            Obj0B:					; XREF: Obj_Index
0001172C 7000                       		moveq	#0,d0
0001172E 1028 0024                  		move.b	$24(a0),d0
00011732 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011736 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
0001173A                            ; ===========================================================================
0001173A 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
0001173C 0000                       		dc.w Obj0B_Action-Obj0B_Index
0001173E 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011740                            ; ===========================================================================
00011740                            
00011740                            Obj0B_Main:				; XREF: Obj0B_Index
00011740 5428 0024                  		addq.b	#2,$24(a0)
00011744 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
0001174C 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011752 117C 0004 0001             		move.b	#4,1(a0)
00011758 117C 0008 0019             		move.b	#8,$19(a0)
0001175E 117C 0004 0018             		move.b	#4,$18(a0)
00011764 117C 00E1 0020             		move.b	#$E1,$20(a0)
0001176A 7000                       		moveq	#0,d0
0001176C 1028 0028                  		move.b	$28(a0),d0	; get object type
00011770 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011774 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011778                            
00011778                            Obj0B_Action:				; XREF: Obj0B_Index
00011778 4A28 0032                  		tst.b	$32(a0)
0001177C 6700                       		beq.s	Obj0B_Grab
0001177E 4A68 0030                  		tst.w	$30(a0)
00011782 6700                       		beq.s	Obj0B_MoveUp
00011784 5368 0030                  		subq.w	#1,$30(a0)
00011788 6600                       		bne.s	Obj0B_MoveUp
0001178A 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011790 6000                       		bra.s	Obj0B_Release
00011792                            ; ===========================================================================
00011792                            
00011792                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011792 43F8 D000                  		lea	($FFFFD000).w,a1
00011796 3028 000C                  		move.w	$C(a0),d0
0001179A 0440 0018                  		subi.w	#$18,d0
0001179E 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
000117A4 6700                       		beq.s	Obj0B_MoveDown
000117A6 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000117AA B069 000C                  		cmp.w	$C(a1),d0
000117AE 6500                       		bcs.s	Obj0B_MoveDown
000117B0 3340 000C                  		move.w	d0,$C(a1)
000117B4                            
000117B4                            Obj0B_MoveDown:
000117B4 0640 0024                  		addi.w	#$24,d0
000117B8 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
000117BE 6700                       		beq.s	Obj0B_LetGo
000117C0 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
000117C4 B069 000C                  		cmp.w	$C(a1),d0
000117C8 6400                       		bcc.s	Obj0B_LetGo
000117CA 3340 000C                  		move.w	d0,$C(a1)
000117CE                            
000117CE                            Obj0B_LetGo:
000117CE 1038 F603                  		move.b	($FFFFF603).w,d0
000117D2 0240 0070                  		andi.w	#$70,d0
000117D6 6700                       		beq.s	Obj0B_Display
000117D8                            
000117D8                            Obj0B_Release:				; XREF: Obj0B_Action
000117D8 4228 0020                  		clr.b	$20(a0)
000117DC 5428 0024                  		addq.b	#2,$24(a0)
000117E0 4238 F7C8                  		clr.b	($FFFFF7C8).w
000117E4 4238 F7C9                  		clr.b	($FFFFF7C9).w
000117E8 4228 0032                  		clr.b	$32(a0)
000117EC 6000                       		bra.s	Obj0B_Display
000117EE                            ; ===========================================================================
000117EE                            
000117EE                            Obj0B_Grab:				; XREF: Obj0B_Action
000117EE 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
000117F2 6700                       		beq.s	Obj0B_Display	; if not, branch
000117F4 43F8 D000                  		lea	($FFFFD000).w,a1
000117F8 3028 0008                  		move.w	8(a0),d0
000117FC 0640 0014                  		addi.w	#$14,d0
00011800 B069 0008                  		cmp.w	8(a1),d0
00011804 6400                       		bcc.s	Obj0B_Display
00011806 4228 0021                  		clr.b	$21(a0)
0001180A 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011810 6400                       		bcc.s	Obj0B_Display
00011812 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011816 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
0001181A 3028 0008                  		move.w	8(a0),d0
0001181E 0640 0014                  		addi.w	#$14,d0
00011822 3340 0008                  		move.w	d0,8(a1)
00011826 08A9 0000 0022             		bclr	#0,$22(a1)
0001182C 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011832 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011838 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
0001183E 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011844                            
00011844                            Obj0B_Display:				; XREF: Obj0B_Index
00011844 6000 E3A2                  		bra.w	MarkObjGone
00011848                            ; ===========================================================================
00011848                            ; ---------------------------------------------------------------------------
00011848                            ; Sprite mappings - pole that breaks (LZ)
00011848                            ; ---------------------------------------------------------------------------
00011848                            Map_obj0B:
00011848                            	include "_maps\obj0B.asm"
00011848                            ; ---------------------------------------------------------------------------
00011848                            ; Sprite mappings - pole that breaks (LZ)
00011848                            ; ---------------------------------------------------------------------------
00011848 0000                       		dc.w byte_11326-Map_obj0B
0001184A 0000                       		dc.w byte_11331-Map_obj0B
0001184C 02                         byte_11326:	dc.b 2			; normal pole
0001184D E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011852 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011857 04                         byte_11331:	dc.b 4			; broken pole
00011858 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
0001185D F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011862 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011867 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
0001186C                            		even
0001186C                            		even
0001186C                            
0001186C                            ; ===========================================================================
0001186C                            ; ---------------------------------------------------------------------------
0001186C                            ; Object 0C - flapping door (LZ)
0001186C                            ; ---------------------------------------------------------------------------
0001186C                            
0001186C                            Obj0C:					; XREF: Obj_Index
0001186C 7000                       		moveq	#0,d0
0001186E 1028 0024                  		move.b	$24(a0),d0
00011872 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011876 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
0001187A                            ; ===========================================================================
0001187A 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
0001187C 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
0001187E                            ; ===========================================================================
0001187E                            
0001187E                            Obj0C_Main:				; XREF: Obj0C_Index
0001187E 5428 0024                  		addq.b	#2,$24(a0)
00011882 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
0001188A 317C 4328 0002             		move.w	#$4328,2(a0)
00011890 0028 0004 0001             		ori.b	#4,1(a0)
00011896 117C 0028 0019             		move.b	#$28,$19(a0)
0001189C 7000                       		moveq	#0,d0
0001189E 1028 0028                  		move.b	$28(a0),d0	; get object type
000118A2 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000118A6 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
000118AA                            
000118AA                            Obj0C_OpenClose:			; XREF: Obj0C_Index
000118AA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000118AE 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
000118B0 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
000118B6 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
000118BC 4A28 0001                  		tst.b	1(a0)
000118C0 6A00                       		bpl.s	Obj0C_Solid
000118C2 303C 00BB                  		move.w	#$BB,d0
000118C6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play door sound
000118CC                            
000118CC                            Obj0C_Solid:
000118CC 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
000118D2 6100 933C                  		bsr.w	AnimateSprite
000118D6 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
000118DA 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
000118DE 6600                       		bne.s	Obj0C_Display	; if yes, branch
000118E0 3038 D008                  		move.w	($FFFFD008).w,d0
000118E4 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
000118E8 6400                       		bcc.s	Obj0C_Display	; if yes, branch
000118EA 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
000118F0 323C 0013                  		move.w	#$13,d1
000118F4 343C 0020                  		move.w	#$20,d2
000118F8 3602                       		move.w	d2,d3
000118FA 5243                       		addq.w	#1,d3
000118FC 3828 0008                  		move.w	8(a0),d4
00011900 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
00011904                            
00011904                            Obj0C_Display:
00011904 6000 E2E2                  		bra.w	MarkObjGone
00011908                            ; ===========================================================================
00011908                            Ani_obj0C:
00011908                            	include "_anim\obj0C.asm"
00011908                            ; ---------------------------------------------------------------------------
00011908                            ; Animation script - flapping door (LZ)
00011908                            ; ---------------------------------------------------------------------------
00011908 0000                       		dc.w byte_113E6-Ani_obj0C
0001190A 0000                       		dc.w byte_113EC-Ani_obj0C
0001190C 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011912 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011918                            		even
00011918                            		even
00011918                            
00011918                            ; ---------------------------------------------------------------------------
00011918                            ; Sprite mappings - flapping door (LZ)
00011918                            ; ---------------------------------------------------------------------------
00011918                            Map_obj0C:
00011918                            	include "_maps\obj0C.asm"
00011918                            ; ---------------------------------------------------------------------------
00011918                            ; Sprite mappings - flapping door (LZ)
00011918                            ; ---------------------------------------------------------------------------
00011918 0000                       		dc.w byte_113F8-Map_obj0C
0001191A 0000                       		dc.w byte_11403-Map_obj0C
0001191C 0000                       		dc.w byte_1140E-Map_obj0C
0001191E 02                         byte_113F8:	dc.b 2
0001191F E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011924 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011929 02                         byte_11403:	dc.b 2
0001192A DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
0001192F 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011934 02                         byte_1140E:	dc.b 2
00011935 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
0001193A 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011940 00                         		even
00011940 00                         		even
00011940                            
00011940                            ; ===========================================================================
00011940                            ; ---------------------------------------------------------------------------
00011940                            ; Object 71 - invisible	solid blocks
00011940                            ; ---------------------------------------------------------------------------
00011940                            
00011940                            Obj71:					; XREF: Obj_Index
00011940 7000                       		moveq	#0,d0
00011942 1028 0024                  		move.b	$24(a0),d0
00011946 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
0001194A 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
0001194E                            ; ===========================================================================
0001194E 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011950 0000                       		dc.w Obj71_Solid-Obj71_Index
00011952                            ; ===========================================================================
00011952                            
00011952                            Obj71_Main:				; XREF: Obj71_Index
00011952 5428 0024                  		addq.b	#2,$24(a0)
00011956 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
0001195E 317C 8680 0002             		move.w	#$8680,2(a0)
00011964 0028 0004 0001             		ori.b	#4,1(a0)
0001196A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001196E 1200                       		move.b	d0,d1
00011970 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011974 0640 0010                  		addi.w	#$10,d0
00011978 E248                       		lsr.w	#1,d0
0001197A 1140 0019                  		move.b	d0,$19(a0)	; set object width
0001197E 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011982 5241                       		addq.w	#1,d1
00011984 E749                       		lsl.w	#3,d1
00011986 1141 0016                  		move.b	d1,$16(a0)	; set object height
0001198A                            
0001198A                            Obj71_Solid:				; XREF: Obj71_Index
0001198A 6100 C42E                  		bsr.w	ChkObjOnScreen
0001198E 6600                       		bne.s	Obj71_ChkDel
00011990 7200                       		moveq	#0,d1
00011992 1228 0019                  		move.b	$19(a0),d1
00011996 0641 000B                  		addi.w	#$B,d1
0001199A 7400                       		moveq	#0,d2
0001199C 1428 0016                  		move.b	$16(a0),d2
000119A0 3602                       		move.w	d2,d3
000119A2 5243                       		addq.w	#1,d3
000119A4 3828 0008                  		move.w	8(a0),d4
000119A8 6100 E5A8                  		bsr.w	SolidObject71
000119AC                            
000119AC                            Obj71_ChkDel:
000119AC 3028 0008                  		move.w	8(a0),d0
000119B0 0240 FF80                  		andi.w	#$FF80,d0
000119B4 3238 F700                  		move.w	($FFFFF700).w,d1
000119B8 0441 0080                  		subi.w	#$80,d1
000119BC 0241 FF80                  		andi.w	#$FF80,d1
000119C0 9041                       		sub.w	d1,d0
000119C2 0C40 0280                  		cmpi.w	#$280,d0
000119C6 6200                       		bhi.s	Obj71_Delete
000119C8 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
000119CC 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
000119CE 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
000119D2                            ; ===========================================================================
000119D2                            
000119D2                            Obj71_NoDisplay:
000119D2 4E75                       		rts	
000119D4                            ; ===========================================================================
000119D4                            
000119D4                            Obj71_Delete:
000119D4 4EFA C1A6                  		jmp	DeleteObject
000119D8                            ; ===========================================================================
000119D8                            ; ---------------------------------------------------------------------------
000119D8                            ; Sprite mappings - invisible solid blocks
000119D8                            ; ---------------------------------------------------------------------------
000119D8                            Map_obj71:
000119D8                            	include "_maps\obj71.asm"
000119D8                            ; ---------------------------------------------------------------------------
000119D8                            ; Sprite mappings - invisible solid blocks
000119D8                            ; ---------------------------------------------------------------------------
000119D8 0000                       		dc.w byte_114BC-Map_obj71
000119DA 0000                       		dc.w byte_114D1-Map_obj71
000119DC 0000                       		dc.w byte_114E6-Map_obj71
000119DE 04                         byte_114BC:	dc.b 4
000119DF F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
000119E4 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
000119E9 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
000119EE 0005 0018 00               		dc.b 0,	5, 0, $18, 0
000119F3 04                         byte_114D1:	dc.b 4
000119F4 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
000119F9 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
000119FE 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011A03 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011A08 04                         byte_114E6:	dc.b 4
00011A09 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011A0E E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011A13 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011A18 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011A1E 00                         		even
00011A1E 00                         		even
00011A1E                            
00011A1E                            ; ===========================================================================
00011A1E                            ; ---------------------------------------------------------------------------
00011A1E                            ; Object 5D - fans (SLZ)
00011A1E                            ; ---------------------------------------------------------------------------
00011A1E                            
00011A1E                            Obj5D:					; XREF: Obj_Index
00011A1E 7000                       		moveq	#0,d0
00011A20 1028 0024                  		move.b	$24(a0),d0
00011A24 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011A28 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011A2C                            ; ===========================================================================
00011A2C 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011A2E 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011A30                            ; ===========================================================================
00011A30                            
00011A30                            Obj5D_Main:				; XREF: Obj5D_Index
00011A30 5428 0024                  		addq.b	#2,$24(a0)
00011A34 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011A3C 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011A42 0028 0004 0001             		ori.b	#4,1(a0)
00011A48 117C 0010 0019             		move.b	#$10,$19(a0)
00011A4E 117C 0004 0018             		move.b	#4,$18(a0)
00011A54                            
00011A54                            Obj5D_Delay:				; XREF: Obj5D_Index
00011A54 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011A5A 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011A5C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011A60 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011A62 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011A68 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011A6E 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011A70 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011A76                            
00011A76                            Obj5D_Blow:
00011A76 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011A7A 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011A7E 43F8 D000                  		lea	($FFFFD000).w,a1
00011A82 3029 0008                  		move.w	8(a1),d0
00011A86 9068 0008                  		sub.w	8(a0),d0
00011A8A 0828 0000 0022             		btst	#0,$22(a0)
00011A90 6600                       		bne.s	Obj5D_ChkSonic
00011A92 4440                       		neg.w	d0
00011A94                            
00011A94                            Obj5D_ChkSonic:
00011A94 0640 0050                  		addi.w	#$50,d0
00011A98 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011A9C 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011A9E 3229 000C                  		move.w	$C(a1),d1
00011AA2 0641 0060                  		addi.w	#$60,d1
00011AA6 9268 000C                  		sub.w	$C(a0),d1
00011AAA 6500                       		bcs.s	Obj5D_Animate
00011AAC 0C41 0070                  		cmpi.w	#$70,d1
00011AB0 6400                       		bcc.s	Obj5D_Animate
00011AB2 0440 0050                  		subi.w	#$50,d0
00011AB6 6400                       		bcc.s	loc_1159A
00011AB8 4640                       		not.w	d0
00011ABA D040                       		add.w	d0,d0
00011ABC                            
00011ABC                            loc_1159A:
00011ABC 0640 0060                  		addi.w	#$60,d0
00011AC0 0828 0000 0022             		btst	#0,$22(a0)
00011AC6 6600                       		bne.s	loc_115A8
00011AC8 4440                       		neg.w	d0
00011ACA                            
00011ACA                            loc_115A8:
00011ACA 4400                       		neg.b	d0
00011ACC E840                       		asr.w	#4,d0
00011ACE 0828 0000 0028             		btst	#0,$28(a0)
00011AD4 6700                       		beq.s	Obj5D_MoveSonic
00011AD6 4440                       		neg.w	d0
00011AD8                            
00011AD8                            Obj5D_MoveSonic:
00011AD8 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011ADC                            
00011ADC                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011ADC 5328 001E                  		subq.b	#1,$1E(a0)
00011AE0 6A00                       		bpl.s	Obj5D_ChkDel
00011AE2 117C 0000 001E             		move.b	#0,$1E(a0)
00011AE8 5228 001B                  		addq.b	#1,$1B(a0)
00011AEC 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011AF2 6500                       		bcs.s	loc_115D8
00011AF4 117C 0000 001B             		move.b	#0,$1B(a0)
00011AFA                            
00011AFA                            loc_115D8:
00011AFA 7000                       		moveq	#0,d0
00011AFC 0828 0000 0028             		btst	#0,$28(a0)
00011B02 6700                       		beq.s	loc_115E4
00011B04 7002                       		moveq	#2,d0
00011B06                            
00011B06                            loc_115E4:
00011B06 D028 001B                  		add.b	$1B(a0),d0
00011B0A 1140 001A                  		move.b	d0,$1A(a0)
00011B0E                            
00011B0E                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011B0E 6100 C030                  		bsr.w	DisplaySprite
00011B12 3028 0008                  		move.w	8(a0),d0
00011B16 0240 FF80                  		andi.w	#$FF80,d0
00011B1A 3238 F700                  		move.w	($FFFFF700).w,d1
00011B1E 0441 0080                  		subi.w	#$80,d1
00011B22 0241 FF80                  		andi.w	#$FF80,d1
00011B26 9041                       		sub.w	d1,d0
00011B28 0C40 0280                  		cmpi.w	#$280,d0
00011B2C 6200 C04E                  		bhi.w	DeleteObject
00011B30 4E75                       		rts	
00011B32                            ; ===========================================================================
00011B32                            ; ---------------------------------------------------------------------------
00011B32                            ; Sprite mappings - fans (SLZ)
00011B32                            ; ---------------------------------------------------------------------------
00011B32                            Map_obj5D:
00011B32                            	include "_maps\obj5D.asm"
00011B32                            ; ---------------------------------------------------------------------------
00011B32                            ; Sprite mappings - fans (SLZ)
00011B32                            ; ---------------------------------------------------------------------------
00011B32 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011B36 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011B3A 0000                       		dc.w byte_1161A-Map_obj5D
00011B3C 02                         byte_1161A:	dc.b 2
00011B3D F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011B42 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011B47 02                         byte_11625:	dc.b 2
00011B48 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011B4D 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011B52 02                         byte_11630:	dc.b 2
00011B53 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011B58 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011B5E 00                         		even
00011B5E 00                         		even
00011B5E                            
00011B5E                            ; ===========================================================================
00011B5E                            ; ---------------------------------------------------------------------------
00011B5E                            ; Object 5E - seesaws (SLZ)
00011B5E                            ; ---------------------------------------------------------------------------
00011B5E                            
00011B5E                            Obj5E:					; XREF: Obj_Index
00011B5E 7000                       		moveq	#0,d0
00011B60 1028 0024                  		move.b	$24(a0),d0
00011B64 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011B68 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011B6C 3028 0030                  		move.w	$30(a0),d0
00011B70 0240 FF80                  		andi.w	#$FF80,d0
00011B74 3238 F700                  		move.w	($FFFFF700).w,d1
00011B78 0441 0080                  		subi.w	#$80,d1
00011B7C 0241 FF80                  		andi.w	#$FF80,d1
00011B80 9041                       		sub.w	d1,d0
00011B82 6B00 BFF8                  		bmi.w	DeleteObject
00011B86 0C40 0280                  		cmpi.w	#$280,d0
00011B8A 6200 BFF0                  		bhi.w	DeleteObject
00011B8E 6000 BFB0                  		bra.w	DisplaySprite
00011B92                            ; ===========================================================================
00011B92 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011B94 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011B96 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011B98 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011B9A 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011B9C 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011B9E                            ; ===========================================================================
00011B9E                            
00011B9E                            Obj5E_Main:				; XREF: Obj5E_Index
00011B9E 5428 0024                  		addq.b	#2,$24(a0)
00011BA2 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011BAA 317C 0374 0002             		move.w	#$374,2(a0)
00011BB0 0028 0004 0001             		ori.b	#4,1(a0)
00011BB6 117C 0004 0018             		move.b	#4,$18(a0)
00011BBC 117C 0030 0019             		move.b	#$30,$19(a0)
00011BC2 3168 0008 0030             		move.w	8(a0),$30(a0)
00011BC8 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011BCC 6600                       		bne.s	loc_116D2	; if not, branch
00011BCE 6100 C40C                  		bsr.w	SingleObjLoad2
00011BD2 6600                       		bne.s	loc_116D2
00011BD4 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011BD8 5C29 0024                  		addq.b	#6,$24(a1)
00011BDC 3368 0008 0008             		move.w	8(a0),8(a1)
00011BE2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011BE8 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011BEE 2348 003C                  		move.l	a0,$3C(a1)
00011BF2                            
00011BF2                            loc_116D2:
00011BF2 0828 0000 0022             		btst	#0,$22(a0)
00011BF8 6700                       		beq.s	loc_116E0
00011BFA 117C 0002 001A             		move.b	#2,$1A(a0)
00011C00                            
00011C00                            loc_116E0:
00011C00 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011C06                            
00011C06                            Obj5E_Slope:				; XREF: Obj5E_Index
00011C06 1228 003A                  		move.b	$3A(a0),d1
00011C0A 6100 0000                  		bsr.w	loc_11766
00011C0E 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011C14 0828 0000 001A             		btst	#0,$1A(a0)
00011C1A 6700                       		beq.s	loc_11702
00011C1C 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011C22                            
00011C22                            loc_11702:
00011C22 43F8 D000                  		lea	($FFFFD000).w,a1
00011C26 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011C2C 323C 0030                  		move.w	#$30,d1
00011C30 4EB9 0000 7940             		jsr	(SlopeObject).l
00011C36 4E75                       		rts	
00011C38                            ; ===========================================================================
00011C38                            
00011C38                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011C38 6100 0000                  		bsr.w	loc_1174A
00011C3C 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011C42 0828 0000 001A             		btst	#0,$1A(a0)
00011C48 6700                       		beq.s	loc_11730
00011C4A 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011C50                            
00011C50                            loc_11730:
00011C50 323C 0030                  		move.w	#$30,d1
00011C54 4EB9 0000 79E0             		jsr	(ExitPlatform).l
00011C5A 323C 0030                  		move.w	#$30,d1
00011C5E 3428 0008                  		move.w	8(a0),d2
00011C62 4EB9 0000 893E             		jsr	SlopeObject2
00011C68 4E75                       		rts	
00011C6A                            ; ===========================================================================
00011C6A                            
00011C6A                            loc_1174A:				; XREF: Obj5E_Slope2
00011C6A 7202                       		moveq	#2,d1
00011C6C 43F8 D000                  		lea	($FFFFD000).w,a1
00011C70 3028 0008                  		move.w	8(a0),d0
00011C74 9069 0008                  		sub.w	8(a1),d0
00011C78 6400                       		bcc.s	loc_1175E
00011C7A 4440                       		neg.w	d0
00011C7C 7200                       		moveq	#0,d1
00011C7E                            
00011C7E                            loc_1175E:
00011C7E 0C40 0008                  		cmpi.w	#8,d0
00011C82 6400                       		bcc.s	loc_11766
00011C84 7201                       		moveq	#1,d1
00011C86                            
00011C86                            loc_11766:
00011C86 1028 001A                  		move.b	$1A(a0),d0
00011C8A B001                       		cmp.b	d1,d0
00011C8C 6700                       		beq.s	locret_11790
00011C8E 6400                       		bcc.s	loc_11772
00011C90 5400                       		addq.b	#2,d0
00011C92                            
00011C92                            loc_11772:
00011C92 5300                       		subq.b	#1,d0
00011C94 1140 001A                  		move.b	d0,$1A(a0)
00011C98 1141 003A                  		move.b	d1,$3A(a0)
00011C9C 08A8 0000 0001             		bclr	#0,1(a0)
00011CA2 0828 0001 001A             		btst	#1,$1A(a0)
00011CA8 6700                       		beq.s	locret_11790
00011CAA 08E8 0000 0001             		bset	#0,1(a0)
00011CB0                            
00011CB0                            locret_11790:
00011CB0 4E75                       		rts	
00011CB2                            ; ===========================================================================
00011CB2                            
00011CB2                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011CB2 5428 0024                  		addq.b	#2,$24(a0)
00011CB6 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011CBE 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011CC4 0028 0004 0001             		ori.b	#4,1(a0)
00011CCA 117C 0004 0018             		move.b	#4,$18(a0)
00011CD0 117C 008B 0020             		move.b	#$8B,$20(a0)
00011CD6 117C 000C 0019             		move.b	#$C,$19(a0)
00011CDC 3168 0008 0030             		move.w	8(a0),$30(a0)
00011CE2 0668 0028 0008             		addi.w	#$28,8(a0)
00011CE8 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011CEE 117C 0001 001A             		move.b	#1,$1A(a0)
00011CF4 0828 0000 0022             		btst	#0,$22(a0)
00011CFA 6700                       		beq.s	Obj5E_MoveSpike
00011CFC 0468 0050 0008             		subi.w	#$50,8(a0)
00011D02 117C 0002 003A             		move.b	#2,$3A(a0)
00011D08                            
00011D08                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011D08 2268 003C                  		movea.l	$3C(a0),a1
00011D0C 7000                       		moveq	#0,d0
00011D0E 1028 003A                  		move.b	$3A(a0),d0
00011D12 9029 003A                  		sub.b	$3A(a1),d0
00011D16 6700                       		beq.s	loc_1183E
00011D18 6400                       		bcc.s	loc_117FC
00011D1A 4400                       		neg.b	d0
00011D1C                            
00011D1C                            loc_117FC:
00011D1C 323C F7E8                  		move.w	#-$818,d1
00011D20 343C FEEC                  		move.w	#-$114,d2
00011D24 0C00 0001                  		cmpi.b	#1,d0
00011D28 6700                       		beq.s	loc_11822
00011D2A 323C F510                  		move.w	#-$AF0,d1
00011D2E 343C FF34                  		move.w	#-$CC,d2
00011D32 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00011D38 6D00                       		blt.s	loc_11822
00011D3A 323C F200                  		move.w	#-$E00,d1
00011D3E 343C FF60                  		move.w	#-$A0,d2
00011D42                            
00011D42                            loc_11822:
00011D42 3141 0012                  		move.w	d1,$12(a0)
00011D46 3142 0010                  		move.w	d2,$10(a0)
00011D4A 3028 0008                  		move.w	8(a0),d0
00011D4E 9068 0030                  		sub.w	$30(a0),d0
00011D52 6400                       		bcc.s	loc_11838
00011D54 4468 0010                  		neg.w	$10(a0)
00011D58                            
00011D58                            loc_11838:
00011D58 5428 0024                  		addq.b	#2,$24(a0)
00011D5C 6000                       		bra.s	Obj5E_SpikeFall
00011D5E                            ; ===========================================================================
00011D5E                            
00011D5E                            loc_1183E:				; XREF: Obj5E_MoveSpike
00011D5E 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011D64 7000                       		moveq	#0,d0
00011D66 1029 001A                  		move.b	$1A(a1),d0
00011D6A 343C 0028                  		move.w	#$28,d2
00011D6E 3228 0008                  		move.w	8(a0),d1
00011D72 9268 0030                  		sub.w	$30(a0),d1
00011D76 6400                       		bcc.s	loc_1185C
00011D78 4442                       		neg.w	d2
00011D7A 5440                       		addq.w	#2,d0
00011D7C                            
00011D7C                            loc_1185C:
00011D7C D040                       		add.w	d0,d0
00011D7E 3228 0034                  		move.w	$34(a0),d1
00011D82 D272 0000                  		add.w	(a2,d0.w),d1
00011D86 3141 000C                  		move.w	d1,$C(a0)
00011D8A D468 0030                  		add.w	$30(a0),d2
00011D8E 3142 0008                  		move.w	d2,8(a0)
00011D92 4268 000E                  		clr.w	$E(a0)
00011D96 4268 000A                  		clr.w	$A(a0)
00011D9A 4E75                       		rts	
00011D9C                            ; ===========================================================================
00011D9C                            
00011D9C                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00011D9C 4A68 0012                  		tst.w	$12(a0)
00011DA0 6A00                       		bpl.s	loc_1189A
00011DA2 6100 BD4A                  		bsr.w	ObjectFall
00011DA6 3028 0034                  		move.w	$34(a0),d0
00011DAA 0440 002F                  		subi.w	#$2F,d0
00011DAE B068 000C                  		cmp.w	$C(a0),d0
00011DB2 6E00                       		bgt.s	locret_11898
00011DB4 6100 BD38                  		bsr.w	ObjectFall
00011DB8                            
00011DB8                            locret_11898:
00011DB8 4E75                       		rts	
00011DBA                            ; ===========================================================================
00011DBA                            
00011DBA                            loc_1189A:				; XREF: Obj5E_SpikeFall
00011DBA 6100 BD32                  		bsr.w	ObjectFall
00011DBE 2268 003C                  		movea.l	$3C(a0),a1
00011DC2 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011DC8 7000                       		moveq	#0,d0
00011DCA 1029 001A                  		move.b	$1A(a1),d0
00011DCE 3228 0008                  		move.w	8(a0),d1
00011DD2 9268 0030                  		sub.w	$30(a0),d1
00011DD6 6400                       		bcc.s	loc_118BA
00011DD8 5440                       		addq.w	#2,d0
00011DDA                            
00011DDA                            loc_118BA:
00011DDA D040                       		add.w	d0,d0
00011DDC 3228 0034                  		move.w	$34(a0),d1
00011DE0 D272 0000                  		add.w	(a2,d0.w),d1
00011DE4 B268 000C                  		cmp.w	$C(a0),d1
00011DE8 6E00                       		bgt.s	locret_11938
00011DEA 2268 003C                  		movea.l	$3C(a0),a1
00011DEE 7202                       		moveq	#2,d1
00011DF0 4A68 0010                  		tst.w	$10(a0)
00011DF4 6B00                       		bmi.s	Obj5E_Spring
00011DF6 7200                       		moveq	#0,d1
00011DF8                            
00011DF8                            Obj5E_Spring:
00011DF8 1341 003A                  		move.b	d1,$3A(a1)
00011DFC 1141 003A                  		move.b	d1,$3A(a0)
00011E00 B229 001A                  		cmp.b	$1A(a1),d1
00011E04 6700                       		beq.s	loc_1192C
00011E06 08A9 0003 0022             		bclr	#3,$22(a1)
00011E0C 6700                       		beq.s	loc_1192C
00011E0E 4229 0025                  		clr.b	$25(a1)
00011E12 137C 0002 0024             		move.b	#2,$24(a1)
00011E18 45F8 D000                  		lea	($FFFFD000).w,a2
00011E1C 3568 0012 0012             		move.w	$12(a0),$12(a2)
00011E22 446A 0012                  		neg.w	$12(a2)
00011E26 08EA 0001 0022             		bset	#1,$22(a2)
00011E2C 08AA 0003 0022             		bclr	#3,$22(a2)
00011E32 422A 003C                  		clr.b	$3C(a2)
00011E36 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00011E3C 157C 0002 0024             		move.b	#2,$24(a2)
00011E42 303C 00CC                  		move.w	#$CC,d0
00011E46 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
00011E4C                            
00011E4C                            loc_1192C:
00011E4C 4268 0010                  		clr.w	$10(a0)
00011E50 4268 0012                  		clr.w	$12(a0)
00011E54 5528 0024                  		subq.b	#2,$24(a0)
00011E58                            
00011E58                            locret_11938:
00011E58 4E75                       		rts	
00011E5A                            ; ===========================================================================
00011E5A FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00011E64                            
00011E64                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00011E94                            		even
00011E94                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00011EC4                            		even
00011EC4                            ; ---------------------------------------------------------------------------
00011EC4                            ; Sprite mappings - seesaws (SLZ)
00011EC4                            ; ---------------------------------------------------------------------------
00011EC4                            Map_obj5E:
00011EC4                            	include "_maps\obj5E.asm"
00011EC4                            ; ---------------------------------------------------------------------------
00011EC4                            ; Sprite mappings - seesaws (SLZ)
00011EC4                            ; ---------------------------------------------------------------------------
00011EC4 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011EC8 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011ECC 07                         byte_119AC:	dc.b 7
00011ECD D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00011ED2 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00011ED7 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00011EDC EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00011EE1 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00011EE6 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00011EEB FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00011EF0 04                         byte_119D0:	dc.b 4
00011EF1 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00011EF6 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00011EFB E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00011F00 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00011F06 00                         		even
00011F06 00                         		even
00011F06                            
00011F06                            ; ---------------------------------------------------------------------------
00011F06                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011F06                            ; ---------------------------------------------------------------------------
00011F06                            Map_obj5Ea:
00011F06                            	include "_maps\obj5Eballs.asm"
00011F06                            ; ---------------------------------------------------------------------------
00011F06                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011F06                            ; ---------------------------------------------------------------------------
00011F06 0000                       		dc.w byte_119EA-Map_obj5Ea
00011F08 0000                       		dc.w byte_119F0-Map_obj5Ea
00011F0A 01                         byte_119EA:	dc.b 1
00011F0B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011F10 01                         byte_119F0:	dc.b 1
00011F11 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00011F16                            		even
00011F16                            		even
00011F16                            
00011F16                            ; ===========================================================================
00011F16                            ; ---------------------------------------------------------------------------
00011F16                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00011F16                            ; ---------------------------------------------------------------------------
00011F16                            
00011F16                            Obj5F:					; XREF: Obj_Index
00011F16 7000                       		moveq	#0,d0
00011F18 1028 0024                  		move.b	$24(a0),d0
00011F1C 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00011F20 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00011F24                            ; ===========================================================================
00011F24 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00011F26 0000                       		dc.w Obj5F_Action-Obj5F_Index
00011F28 0000                       		dc.w Obj5F_Display-Obj5F_Index
00011F2A 0000                       		dc.w Obj5F_End-Obj5F_Index
00011F2C                            ; ===========================================================================
00011F2C                            
00011F2C                            Obj5F_Main:				; XREF: Obj5F_Index
00011F2C 5428 0024                  		addq.b	#2,$24(a0)
00011F30 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00011F38 317C 0400 0002             		move.w	#$400,2(a0)
00011F3E 0028 0004 0001             		ori.b	#4,1(a0)
00011F44 117C 0003 0018             		move.b	#3,$18(a0)
00011F4A 117C 000C 0019             		move.b	#$C,$19(a0)
00011F50 1028 0028                  		move.b	$28(a0),d0
00011F54 6700                       		beq.s	loc_11A3C
00011F56 1140 0024                  		move.b	d0,$24(a0)
00011F5A 4E75                       		rts	
00011F5C                            ; ===========================================================================
00011F5C                            
00011F5C                            loc_11A3C:
00011F5C 117C 009A 0020             		move.b	#$9A,$20(a0)
00011F62 0868 0000 0022             		bchg	#0,$22(a0)
00011F68                            
00011F68                            Obj5F_Action:				; XREF: Obj5F_Index
00011F68 7000                       		moveq	#0,d0
00011F6A 1028 0025                  		move.b	$25(a0),d0
00011F6E 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00011F72 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00011F76 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011F7C 6100 8C92                  		bsr.w	AnimateSprite
00011F80 6000 DC66                  		bra.w	MarkObjGone
00011F84                            ; ===========================================================================
00011F84 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00011F86 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00011F88 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00011F8A                            ; ===========================================================================
00011F8A                            
00011F8A                            Obj5F_Walk:				; XREF: Obj5F_Index2
00011F8A 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011F8E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011F92 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00011F94 5428 0025                  		addq.b	#2,$25(a0)
00011F98 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00011F9E 317C 0010 0010             		move.w	#$10,$10(a0)
00011FA4 117C 0001 001C             		move.b	#1,$1C(a0)
00011FAA 0868 0000 0022             		bchg	#0,$22(a0)
00011FB0 6700                       		beq.s	locret_11A96
00011FB2 4468 0010                  		neg.w	$10(a0)		; change direction
00011FB6                            
00011FB6                            locret_11A96:
00011FB6 4E75                       		rts	
00011FB8                            ; ===========================================================================
00011FB8                            
00011FB8                            Obj5F_Wait:				; XREF: Obj5F_Index2
00011FB8 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011FBC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011FC0 6B00                       		bmi.s	loc_11AA8
00011FC2 6100 BB56                  		bsr.w	SpeedToPos
00011FC6 4E75                       		rts	
00011FC8                            ; ===========================================================================
00011FC8                            
00011FC8                            loc_11AA8:
00011FC8 5528 0025                  		subq.b	#2,$25(a0)
00011FCC 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00011FD2 4268 0010                  		clr.w	$10(a0)		; stop walking
00011FD6 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00011FDC 4E75                       		rts	
00011FDE                            ; ===========================================================================
00011FDE                            
00011FDE                            Obj5F_Explode:				; XREF: Obj5F_Index2
00011FDE 5368 0030                  		subq.w	#1,$30(a0)
00011FE2 6A00                       		bpl.s	locret_11AD0
00011FE4 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00011FE8 117C 0000 0024             		move.b	#0,$24(a0)
00011FEE                            
00011FEE                            locret_11AD0:
00011FEE 4E75                       		rts	
00011FF0                            ; ===========================================================================
00011FF0                            
00011FF0                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00011FF0 3038 D008                  		move.w	($FFFFD008).w,d0
00011FF4 9068 0008                  		sub.w	8(a0),d0
00011FF8 6400                       		bcc.s	loc_11ADE
00011FFA 4440                       		neg.w	d0
00011FFC                            
00011FFC                            loc_11ADE:
00011FFC 0C40 0060                  		cmpi.w	#$60,d0
00012000 6400                       		bcc.s	locret_11B5E
00012002 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012006 9068 000C                  		sub.w	$C(a0),d0
0001200A 6400                       		bcc.s	Obj5F_MakeFuse
0001200C 4440                       		neg.w	d0
0001200E                            
0001200E                            Obj5F_MakeFuse:
0001200E 0C40 0060                  		cmpi.w	#$60,d0
00012012 6400                       		bcc.s	locret_11B5E
00012014 4A78 FE08                  		tst.w	($FFFFFE08).w
00012018 6600                       		bne.s	locret_11B5E
0001201A 117C 0004 0025             		move.b	#4,$25(a0)
00012020 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00012026 4268 0010                  		clr.w	$10(a0)
0001202A 117C 0002 001C             		move.b	#2,$1C(a0)
00012030 6100 BFAA                  		bsr.w	SingleObjLoad2
00012034 6600                       		bne.s	locret_11B5E
00012036 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
0001203A 3368 0008 0008             		move.w	8(a0),8(a1)
00012040 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012046 3368 000C 0034             		move.w	$C(a0),$34(a1)
0001204C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012052 137C 0004 0028             		move.b	#4,$28(a1)
00012058 137C 0003 001C             		move.b	#3,$1C(a1)
0001205E 337C 0010 0012             		move.w	#$10,$12(a1)
00012064 0828 0001 0022             		btst	#1,$22(a0)
0001206A 6700                       		beq.s	loc_11B54
0001206C 4469 0012                  		neg.w	$12(a1)
00012070                            
00012070                            loc_11B54:
00012070 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00012076 2348 003C                  		move.l	a0,$3C(a1)
0001207A                            
0001207A                            locret_11B5E:
0001207A 4E75                       		rts	
0001207C                            ; ===========================================================================
0001207C                            
0001207C                            Obj5F_Display:				; XREF: Obj5F_Index
0001207C 6100                       		bsr.s	loc_11B70
0001207E 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012084 6100 8B8A                  		bsr.w	AnimateSprite
00012088 6000 DB5E                  		bra.w	MarkObjGone
0001208C                            ; ===========================================================================
0001208C                            
0001208C                            loc_11B70:
0001208C 5368 0030                  		subq.w	#1,$30(a0)
00012090 6B00                       		bmi.s	loc_11B7C
00012092 6100 BA86                  		bsr.w	SpeedToPos
00012096 4E75                       		rts	
00012098                            ; ===========================================================================
00012098                            
00012098                            loc_11B7C:
00012098 4268 0030                  		clr.w	$30(a0)
0001209C 4228 0024                  		clr.b	$24(a0)
000120A0 3168 0034 000C             		move.w	$34(a0),$C(a0)
000120A6 7203                       		moveq	#3,d1
000120A8 2248                       		movea.l	a0,a1
000120AA 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000120B0 6000                       		bra.s	Obj5F_MakeShrap
000120B2                            ; ===========================================================================
000120B2                            
000120B2                            Obj5F_Loop:
000120B2 6100 BF28                  		bsr.w	SingleObjLoad2
000120B6 6600                       		bne.s	loc_11BCE
000120B8                            
000120B8                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000120B8 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
000120BC 3368 0008 0008             		move.w	8(a0),8(a1)
000120C2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000120C8 137C 0006 0028             		move.b	#6,$28(a1)
000120CE 137C 0004 001C             		move.b	#4,$1C(a1)
000120D4 335A 0010                  		move.w	(a2)+,$10(a1)
000120D8 335A 0012                  		move.w	(a2)+,$12(a1)
000120DC 137C 0098 0020             		move.b	#$98,$20(a1)
000120E2 08E9 0007 0001             		bset	#7,1(a1)
000120E8                            
000120E8                            loc_11BCE:
000120E8 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
000120EC                            
000120EC 117C 0006 0024             		move.b	#6,$24(a0)
000120F2                            
000120F2                            Obj5F_End:				; XREF: Obj5F_Index
000120F2 6100 BA26                  		bsr.w	SpeedToPos
000120F6 0668 0018 0012             		addi.w	#$18,$12(a0)
000120FC 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012102 6100 8B0C                  		bsr.w	AnimateSprite
00012106 4A28 0001                  		tst.b	1(a0)
0001210A 6A00 BA70                  		bpl.w	DeleteObject
0001210E 6000 BA30                  		bra.w	DisplaySprite
00012112                            ; ===========================================================================
00012112 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00012122                            
00012122                            Ani_obj5F:
00012122                            	include "_anim\obj5F.asm"
00012122                            ; ---------------------------------------------------------------------------
00012122                            ; Animation script - Bomb enemy
00012122                            ; ---------------------------------------------------------------------------
00012122 0000                       		dc.w byte_11C12-Ani_obj5F
00012124 0000                       		dc.w byte_11C16-Ani_obj5F
00012126 0000                       		dc.w byte_11C1C-Ani_obj5F
00012128 0000                       		dc.w byte_11C20-Ani_obj5F
0001212A 0000                       		dc.w byte_11C24-Ani_obj5F
0001212C 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012130 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00012136 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
0001213A 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
0001213E 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012142                            		even
00012142                            		even
00012142                            
00012142                            ; ---------------------------------------------------------------------------
00012142                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012142                            ; ---------------------------------------------------------------------------
00012142                            Map_obj5F:
00012142                            	include "_maps\obj5F.asm"
00012142                            ; ---------------------------------------------------------------------------
00012142                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012142                            ; ---------------------------------------------------------------------------
00012142 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012146 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
0001214A 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
0001214E 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00012152 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012156 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
0001215A 03                         byte_11C40:	dc.b 3
0001215B F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012160 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012165 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001216A 03                         byte_11C50:	dc.b 3
0001216B F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012170 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012175 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001217A 03                         byte_11C60:	dc.b 3
0001217B F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012180 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00012185 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001218A 03                         byte_11C70:	dc.b 3
0001218B F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012190 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00012195 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001219A 03                         byte_11C80:	dc.b 3
0001219B F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000121A0 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000121A5 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000121AA 03                         byte_11C90:	dc.b 3
000121AB F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000121B0 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000121B5 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000121BA 02                         byte_11CA0:	dc.b 2
000121BB F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000121C0 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000121C5 02                         byte_11CAB:	dc.b 2
000121C6 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000121CB 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000121D0 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
000121D1 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
000121D6 01                         byte_11CBC:	dc.b 1			; fuse
000121D7 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000121DC 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
000121DD FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000121E2 01                         byte_11CC8:	dc.b 1			; fireball
000121E3 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000121E8                            		even
000121E8                            		even
000121E8                            
000121E8                            ; ===========================================================================
000121E8                            ; ---------------------------------------------------------------------------
000121E8                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000121E8                            ; ---------------------------------------------------------------------------
000121E8                            
000121E8                            Obj60:					; XREF: Obj_Index
000121E8 7000                       		moveq	#0,d0
000121EA 1028 0024                  		move.b	$24(a0),d0
000121EE 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000121F2 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
000121F6                            ; ===========================================================================
000121F6 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
000121F8 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
000121FA 0000                       		dc.w Obj60_Display-Obj60_Index
000121FC 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
000121FE 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012200                            ; ===========================================================================
00012200                            
00012200                            Obj60_Main:				; XREF: Obj60_Index
00012200 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012208 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
0001220E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00012214 6700                       		beq.s	loc_11D02
00012216 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
0001221C                            
0001221C                            loc_11D02:
0001221C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012222 6600                       		bne.s	loc_11D10
00012224 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
0001222A                            
0001222A                            loc_11D10:
0001222A 0028 0004 0001             		ori.b	#4,1(a0)
00012230 117C 0004 0018             		move.b	#4,$18(a0)
00012236 117C 000B 0020             		move.b	#$B,$20(a0)
0001223C 117C 000C 0019             		move.b	#$C,$19(a0)
00012242 7400                       		moveq	#0,d2
00012244 45E8 0037                  		lea	$37(a0),a2
00012248 264A                       		movea.l	a2,a3
0001224A 524A                       		addq.w	#1,a2
0001224C 7203                       		moveq	#3,d1
0001224E                            
0001224E                            Obj60_MakeOrbs:
0001224E 6100 BD8C                  		bsr.w	SingleObjLoad2
00012252 6600                       		bne.s	loc_11D90
00012254 5213                       		addq.b	#1,(a3)
00012256 3A09                       		move.w	a1,d5
00012258 0445 D000                  		subi.w	#-$3000,d5
0001225C EC4D                       		lsr.w	#6,d5
0001225E 0245 007F                  		andi.w	#$7F,d5
00012262 14C5                       		move.b	d5,(a2)+
00012264 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012266 137C 0006 0024             		move.b	#6,$24(a1)
0001226C 2368 0004 0004             		move.l	4(a0),4(a1)
00012272 3368 0002 0002             		move.w	2(a0),2(a1)
00012278 0029 0004 0001             		ori.b	#4,1(a1)
0001227E 137C 0004 0018             		move.b	#4,$18(a1)
00012284 137C 0008 0019             		move.b	#8,$19(a1)
0001228A 137C 0003 001A             		move.b	#3,$1A(a1)
00012290 137C 0098 0020             		move.b	#$98,$20(a1)
00012296 1342 0026                  		move.b	d2,$26(a1)
0001229A 0602 0040                  		addi.b	#$40,d2
0001229E 2348 003C                  		move.l	a0,$3C(a1)
000122A2 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000122A6                            
000122A6                            loc_11D90:
000122A6 7001                       		moveq	#1,d0
000122A8 0828 0000 0022             		btst	#0,$22(a0)
000122AE 6700                       		beq.s	Obj60_Move
000122B0 4440                       		neg.w	d0
000122B2                            
000122B2                            Obj60_Move:
000122B2 1140 0036                  		move.b	d0,$36(a0)
000122B6 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000122BC 5428 0024                  		addq.b	#2,$24(a0)
000122C0 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
000122C6 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000122CC 6700                       		beq.s	locret_11DBC	; if not, branch
000122CE 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
000122D2                            
000122D2                            locret_11DBC:
000122D2 4E75                       		rts	
000122D4                            ; ===========================================================================
000122D4                            
000122D4                            Obj60_ChkSonic:				; XREF: Obj60_Index
000122D4 3038 D008                  		move.w	($FFFFD008).w,d0
000122D8 9068 0008                  		sub.w	8(a0),d0
000122DC 6400                       		bcc.s	loc_11DCA
000122DE 4440                       		neg.w	d0
000122E0                            
000122E0                            loc_11DCA:
000122E0 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000122E4 6400                       		bcc.s	Obj60_Animate	; if not, branch
000122E6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000122EA 9068 000C                  		sub.w	$C(a0),d0
000122EE 6400                       		bcc.s	loc_11DDC
000122F0 4440                       		neg.w	d0
000122F2                            
000122F2                            loc_11DDC:
000122F2 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000122F6 6400                       		bcc.s	Obj60_Animate	; if not, branch
000122F8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000122FC 6600                       		bne.s	Obj60_Animate	; if yes, branch
000122FE 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00012304                            
00012304                            Obj60_Animate:
00012304 43F9 0000 0000             		lea	(Ani_obj60).l,a1
0001230A 6100 8904                  		bsr.w	AnimateSprite
0001230E 6000 0000                  		bra.w	Obj60_ChkDel
00012312                            ; ===========================================================================
00012312                            
00012312                            Obj60_Display:				; XREF: Obj60_Index
00012312 6100 B806                  		bsr.w	SpeedToPos
00012316                            
00012316                            Obj60_ChkDel:				; XREF: Obj60_Animate
00012316 3028 0008                  		move.w	8(a0),d0
0001231A 0240 FF80                  		andi.w	#$FF80,d0
0001231E 3238 F700                  		move.w	($FFFFF700).w,d1
00012322 0441 0080                  		subi.w	#$80,d1
00012326 0241 FF80                  		andi.w	#$FF80,d1
0001232A 9041                       		sub.w	d1,d0
0001232C 0C40 0280                  		cmpi.w	#$280,d0
00012330 6200 0000                  		bhi.w	Obj60_ChkGone
00012334 6000 B80A                  		bra.w	DisplaySprite
00012338                            ; ===========================================================================
00012338                            
00012338                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012338 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001233C 7000                       		moveq	#0,d0
0001233E 1028 0023                  		move.b	$23(a0),d0
00012342 6700                       		beq.s	loc_11E34
00012344 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001234A                            
0001234A                            loc_11E34:
0001234A 45E8 0037                  		lea	$37(a0),a2
0001234E 7400                       		moveq	#0,d2
00012350 141A                       		move.b	(a2)+,d2
00012352 5342                       		subq.w	#1,d2
00012354 6500                       		bcs.s	Obj60_Delete
00012356                            
00012356                            loc_11E40:
00012356 7000                       		moveq	#0,d0
00012358 101A                       		move.b	(a2)+,d0
0001235A ED48                       		lsl.w	#6,d0
0001235C 0680 00FF D000             		addi.l	#$FFD000,d0
00012362 2240                       		movea.l	d0,a1
00012364 6100 B818                  		bsr.w	DeleteObject2
00012368 51CA FFEC                  		dbf	d2,loc_11E40
0001236C                            
0001236C                            Obj60_Delete:
0001236C 6000 B80E                  		bra.w	DeleteObject
00012370                            ; ===========================================================================
00012370                            
00012370                            Obj60_MoveOrb:				; XREF: Obj60_Index
00012370 2268 003C                  		movea.l	$3C(a0),a1
00012374 0C11 0060                  		cmpi.b	#$60,0(a1)
00012378 6600 B802                  		bne.w	DeleteObject
0001237C 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00012382 6600                       		bne.s	Obj60_Circle
00012384 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
0001238A 6600                       		bne.s	Obj60_Circle
0001238C 5428 0024                  		addq.b	#2,$24(a0)
00012390 5329 0037                  		subq.b	#1,$37(a1)
00012394 6600                       		bne.s	Obj60_FireOrb
00012396 5429 0024                  		addq.b	#2,$24(a1)
0001239A                            
0001239A                            Obj60_FireOrb:
0001239A 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000123A0 0829 0000 0022             		btst	#0,$22(a1)
000123A6 6700                       		beq.s	Obj60_Display2
000123A8 4468 0010                  		neg.w	$10(a0)
000123AC                            
000123AC                            Obj60_Display2:
000123AC 6000 B792                  		bra.w	DisplaySprite
000123B0                            ; ===========================================================================
000123B0                            
000123B0                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000123B0 1028 0026                  		move.b	$26(a0),d0
000123B4 4EB9 0000 2BE8             		jsr	(CalcSine).l
000123BA E841                       		asr.w	#4,d1
000123BC D269 0008                  		add.w	8(a1),d1
000123C0 3141 0008                  		move.w	d1,8(a0)
000123C4 E840                       		asr.w	#4,d0
000123C6 D069 000C                  		add.w	$C(a1),d0
000123CA 3140 000C                  		move.w	d0,$C(a0)
000123CE 1029 0036                  		move.b	$36(a1),d0
000123D2 D128 0026                  		add.b	d0,$26(a0)
000123D6 6000 B768                  		bra.w	DisplaySprite
000123DA                            ; ===========================================================================
000123DA                            
000123DA                            Obj60_ChkDel2:				; XREF: Obj60_Index
000123DA 6100 B73E                  		bsr.w	SpeedToPos
000123DE 4A28 0001                  		tst.b	1(a0)
000123E2 6A00 B798                  		bpl.w	DeleteObject
000123E6 6000 B758                  		bra.w	DisplaySprite
000123EA                            ; ===========================================================================
000123EA                            Ani_obj60:
000123EA                            	include "_anim\obj60.asm"
000123EA                            ; ---------------------------------------------------------------------------
000123EA                            ; Animation script - Orbinaut enemy
000123EA                            ; ---------------------------------------------------------------------------
000123EA 0000                       		dc.w byte_11EDA-Ani_obj60
000123EC 0000                       		dc.w byte_11EDE-Ani_obj60
000123EE 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000123F2 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
000123F8                            		even
000123F8                            		even
000123F8                            
000123F8                            ; ---------------------------------------------------------------------------
000123F8                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000123F8                            ; ---------------------------------------------------------------------------
000123F8                            Map_obj60:
000123F8                            	include "_maps\obj60.asm"
000123F8                            ; ---------------------------------------------------------------------------
000123F8                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000123F8                            ; ---------------------------------------------------------------------------
000123F8 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
000123FC 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00012400 01                         byte_11EEC:	dc.b 1
00012401 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012406 01                         byte_11EF2:	dc.b 1
00012407 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
0001240C 01                         byte_11EF8:	dc.b 1
0001240D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00012412 01                         byte_11EFE:	dc.b 1
00012413 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00012418                            		even
00012418                            		even
00012418                            
00012418                            ; ===========================================================================
00012418                            ; ---------------------------------------------------------------------------
00012418                            ; Object 16 - harpoon (LZ)
00012418                            ; ---------------------------------------------------------------------------
00012418                            
00012418                            Obj16:					; XREF: Obj_Index
00012418 7000                       		moveq	#0,d0
0001241A 1028 0024                  		move.b	$24(a0),d0
0001241E 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00012422 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00012426                            ; ===========================================================================
00012426 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00012428 0000                       		dc.w Obj16_Move-Obj16_Index
0001242A 0000                       		dc.w Obj16_Wait-Obj16_Index
0001242C                            ; ===========================================================================
0001242C                            
0001242C                            Obj16_Main:				; XREF: Obj16_Index
0001242C 5428 0024                  		addq.b	#2,$24(a0)
00012430 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00012438 317C 03CC 0002             		move.w	#$3CC,2(a0)
0001243E 0028 0004 0001             		ori.b	#4,1(a0)
00012444 117C 0004 0018             		move.b	#4,$18(a0)
0001244A 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012450 117C 0014 0019             		move.b	#$14,$19(a0)
00012456 317C 003C 0030             		move.w	#60,$30(a0)
0001245C                            
0001245C                            Obj16_Move:				; XREF: Obj16_Index
0001245C 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00012462 6100 87AC                  		bsr.w	AnimateSprite
00012466 7000                       		moveq	#0,d0
00012468 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
0001246C 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00012472 6000 D774                  		bra.w	MarkObjGone
00012476                            ; ===========================================================================
00012476 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
0001247C                            ; ===========================================================================
0001247C                            
0001247C                            Obj16_Wait:				; XREF: Obj16_Index
0001247C 5368 0030                  		subq.w	#1,$30(a0)
00012480 6A00                       		bpl.s	Obj16_ChkDel
00012482 317C 003C 0030             		move.w	#60,$30(a0)
00012488 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
0001248C 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00012492                            
00012492                            Obj16_ChkDel:
00012492 6000 D754                  		bra.w	MarkObjGone
00012496                            ; ===========================================================================
00012496                            Ani_obj16:
00012496                            	include "_anim\obj16.asm"
00012496                            ; ---------------------------------------------------------------------------
00012496                            ; Animation script - harpoon (LZ)
00012496                            ; ---------------------------------------------------------------------------
00012496 0000                       		dc.w byte_11F8A-Ani_obj16
00012498 0000                       		dc.w byte_11F8E-Ani_obj16
0001249A 0000                       		dc.w byte_11F92-Ani_obj16
0001249C 0000                       		dc.w byte_11F96-Ani_obj16
0001249E 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000124A2 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000124A6 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000124AA 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000124AE                            		even
000124AE                            		even
000124AE                            
000124AE                            ; ---------------------------------------------------------------------------
000124AE                            ; Sprite mappings - harpoon (LZ)
000124AE                            ; ---------------------------------------------------------------------------
000124AE                            Map_obj16:
000124AE                            	include "_maps\obj16.asm"
000124AE                            ; ---------------------------------------------------------------------------
000124AE                            ; Sprite mappings - harpoon (LZ)
000124AE                            ; ---------------------------------------------------------------------------
000124AE 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000124B2 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000124B6 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000124BA 01                         byte_11FA6:	dc.b 1
000124BB FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000124C0 01                         byte_11FAC:	dc.b 1
000124C1 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000124C6 02                         byte_11FB2:	dc.b 2
000124C7 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000124CC FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000124D1 01                         byte_11FBD:	dc.b 1
000124D2 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000124D7 01                         byte_11FC3:	dc.b 1
000124D8 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000124DD 02                         byte_11FC9:	dc.b 2
000124DE D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000124E3 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000124E8                            		even
000124E8                            		even
000124E8                            
000124E8                            ; ===========================================================================
000124E8                            ; ---------------------------------------------------------------------------
000124E8                            ; Object 61 - blocks (LZ)
000124E8                            ; ---------------------------------------------------------------------------
000124E8                            
000124E8                            Obj61:					; XREF: Obj_Index
000124E8 7000                       		moveq	#0,d0
000124EA 1028 0024                  		move.b	$24(a0),d0
000124EE 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
000124F2 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
000124F6                            ; ===========================================================================
000124F6 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
000124F8 0000                       		dc.w Obj61_Action-Obj61_Index
000124FA                            
000124FA 1010                       Obj61_Var:	dc.b $10, $10		; width, height
000124FC 200C                       		dc.b $20, $C
000124FE 1010                       		dc.b $10, $10
00012500 1010                       		dc.b $10, $10
00012502                            ; ===========================================================================
00012502                            
00012502                            Obj61_Main:				; XREF: Obj61_Index
00012502 5428 0024                  		addq.b	#2,$24(a0)
00012506 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
0001250E 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012514 117C 0004 0001             		move.b	#4,1(a0)
0001251A 117C 0003 0018             		move.b	#3,$18(a0)
00012520 7000                       		moveq	#0,d0
00012522 1028 0028                  		move.b	$28(a0),d0
00012526 E648                       		lsr.w	#3,d0
00012528 0240 000E                  		andi.w	#$E,d0
0001252C 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012530 115A 0019                  		move.b	(a2)+,$19(a0)
00012534 1152 0016                  		move.b	(a2),$16(a0)
00012538 E248                       		lsr.w	#1,d0
0001253A 1140 001A                  		move.b	d0,$1A(a0)
0001253E 3168 0008 0034             		move.w	8(a0),$34(a0)
00012544 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001254A 1028 0028                  		move.b	$28(a0),d0
0001254E 0200 000F                  		andi.b	#$F,d0
00012552 6700                       		beq.s	Obj61_Action
00012554 0C00 0007                  		cmpi.b	#7,d0
00012558 6700                       		beq.s	Obj61_Action
0001255A 117C 0001 0038             		move.b	#1,$38(a0)
00012560                            
00012560                            Obj61_Action:				; XREF: Obj61_Index
00012560 3F28 0008                  		move.w	8(a0),-(sp)
00012564 7000                       		moveq	#0,d0
00012566 1028 0028                  		move.b	$28(a0),d0
0001256A 0240 000F                  		andi.w	#$F,d0
0001256E D040                       		add.w	d0,d0
00012570 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012574 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012578 381F                       		move.w	(sp)+,d4
0001257A 4A28 0001                  		tst.b	1(a0)
0001257E 6A00                       		bpl.s	Obj61_ChkDel
00012580 7200                       		moveq	#0,d1
00012582 1228 0019                  		move.b	$19(a0),d1
00012586 0641 000B                  		addi.w	#$B,d1
0001258A 7400                       		moveq	#0,d2
0001258C 1428 0016                  		move.b	$16(a0),d2
00012590 3602                       		move.w	d2,d3
00012592 5243                       		addq.w	#1,d3
00012594 6100 D97A                  		bsr.w	SolidObject
00012598 1144 003F                  		move.b	d4,$3F(a0)
0001259C 6100 0000                  		bsr.w	loc_12180
000125A0                            
000125A0                            Obj61_ChkDel:
000125A0 3028 0034                  		move.w	$34(a0),d0
000125A4 0240 FF80                  		andi.w	#$FF80,d0
000125A8 3238 F700                  		move.w	($FFFFF700).w,d1
000125AC 0441 0080                  		subi.w	#$80,d1
000125B0 0241 FF80                  		andi.w	#$FF80,d1
000125B4 9041                       		sub.w	d1,d0
000125B6 0C40 0280                  		cmpi.w	#$280,d0
000125BA 6200 B5C0                  		bhi.w	DeleteObject
000125BE 6000 B580                  		bra.w	DisplaySprite
000125C2                            ; ===========================================================================
000125C2 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000125C6 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000125CA 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
000125CE 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
000125D2                            ; ===========================================================================
000125D2                            
000125D2                            Obj61_Type00:				; XREF: Obj61_TypeIndex
000125D2 4E75                       		rts	
000125D4                            ; ===========================================================================
000125D4                            
000125D4                            Obj61_Type01:				; XREF: Obj61_TypeIndex
000125D4 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
000125D8 6600                       		bne.s	loc_120D6	; if yes, branch
000125DA 0828 0003 0022             		btst	#3,$22(a0)
000125E0 6700                       		beq.s	locret_120D4
000125E2 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
000125E8                            
000125E8                            locret_120D4:
000125E8 4E75                       		rts	
000125EA                            ; ===========================================================================
000125EA                            
000125EA                            loc_120D6:
000125EA 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
000125EE 66F8                       		bne.s	locret_120D4	; if time remains, branch
000125F0 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000125F4 4228 0038                  		clr.b	$38(a0)
000125F8 4E75                       		rts	
000125FA                            ; ===========================================================================
000125FA                            
000125FA                            Obj61_Type02:				; XREF: Obj61_TypeIndex
000125FA 6100 B51E                  		bsr.w	SpeedToPos
000125FE 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012602 6100 0000                  		bsr.w	ObjHitFloor
00012606 4A41                       		tst.w	d1
00012608 6A00 0000                  		bpl.w	locret_12106
0001260C 5241                       		addq.w	#1,d1
0001260E D368 000C                  		add.w	d1,$C(a0)
00012612 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012616 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001261A                            
0001261A                            locret_12106:
0001261A 4E75                       		rts	
0001261C                            ; ===========================================================================
0001261C                            
0001261C                            Obj61_Type04:				; XREF: Obj61_TypeIndex
0001261C 6100 B4FC                  		bsr.w	SpeedToPos
00012620 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012624 6100 0000                  		bsr.w	ObjHitCeiling
00012628 4A41                       		tst.w	d1
0001262A 6A00 0000                  		bpl.w	locret_12126
0001262E 9368 000C                  		sub.w	d1,$C(a0)
00012632 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012636 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001263A                            
0001263A                            locret_12126:
0001263A 4E75                       		rts	
0001263C                            ; ===========================================================================
0001263C                            
0001263C                            Obj61_Type05:				; XREF: Obj61_TypeIndex
0001263C 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012642 6600                       		bne.s	locret_12138	; if not, branch
00012644 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012648 4228 0038                  		clr.b	$38(a0)
0001264C                            
0001264C                            locret_12138:
0001264C 4E75                       		rts	
0001264E                            ; ===========================================================================
0001264E                            
0001264E                            Obj61_Type07:				; XREF: Obj61_TypeIndex
0001264E 3038 F646                  		move.w	($FFFFF646).w,d0
00012652 9068 000C                  		sub.w	$C(a0),d0
00012656 6700                       		beq.s	locret_1217E
00012658 6400                       		bcc.s	loc_12162
0001265A 0C40 FFFE                  		cmpi.w	#-2,d0
0001265E 6C00                       		bge.s	loc_1214E
00012660 70FE                       		moveq	#-2,d0
00012662                            
00012662                            loc_1214E:
00012662 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012666 6100 0000                  		bsr.w	ObjHitCeiling
0001266A 4A41                       		tst.w	d1
0001266C 6A00 0000                  		bpl.w	locret_12160
00012670 9368 000C                  		sub.w	d1,$C(a0)
00012674                            
00012674                            locret_12160:
00012674 4E75                       		rts	
00012676                            ; ===========================================================================
00012676                            
00012676                            loc_12162:				; XREF: Obj61_Type07
00012676 0C40 0002                  		cmpi.w	#2,d0
0001267A 6F00                       		ble.s	loc_1216A
0001267C 7002                       		moveq	#2,d0
0001267E                            
0001267E                            loc_1216A:
0001267E D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012682 6100 0000                  		bsr.w	ObjHitFloor
00012686 4A41                       		tst.w	d1
00012688 6A00 0000                  		bpl.w	locret_1217E
0001268C 5241                       		addq.w	#1,d1
0001268E D368 000C                  		add.w	d1,$C(a0)
00012692                            
00012692                            locret_1217E:
00012692 4E75                       		rts	
00012694                            ; ===========================================================================
00012694                            
00012694                            loc_12180:				; XREF: Obj61_Action
00012694 4A28 0038                  		tst.b	$38(a0)
00012698 6700                       		beq.s	locret_121C0
0001269A 0828 0003 0022             		btst	#3,$22(a0)
000126A0 6600                       		bne.s	loc_1219A
000126A2 4A28 003E                  		tst.b	$3E(a0)
000126A6 6700                       		beq.s	locret_121C0
000126A8 5928 003E                  		subq.b	#4,$3E(a0)
000126AC 6000                       		bra.s	loc_121A6
000126AE                            ; ===========================================================================
000126AE                            
000126AE                            loc_1219A:
000126AE 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000126B4 6700                       		beq.s	locret_121C0
000126B6 5828 003E                  		addq.b	#4,$3E(a0)
000126BA                            
000126BA                            loc_121A6:
000126BA 1028 003E                  		move.b	$3E(a0),d0
000126BE 4EB9 0000 2BE8             		jsr	(CalcSine).l
000126C4 323C 0400                  		move.w	#$400,d1
000126C8 C1C1                       		muls.w	d1,d0
000126CA 4840                       		swap	d0
000126CC D068 0030                  		add.w	$30(a0),d0
000126D0 3140 000C                  		move.w	d0,$C(a0)
000126D4                            
000126D4                            locret_121C0:
000126D4 4E75                       		rts	
000126D6                            ; ===========================================================================
000126D6                            ; ---------------------------------------------------------------------------
000126D6                            ; Sprite mappings - blocks (LZ)
000126D6                            ; ---------------------------------------------------------------------------
000126D6                            Map_obj61:
000126D6                            	include "_maps\obj61.asm"
000126D6                            ; ---------------------------------------------------------------------------
000126D6                            ; Sprite mappings - blocks (LZ)
000126D6                            ; ---------------------------------------------------------------------------
000126D6 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
000126DA 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
000126DE 01                         byte_121CA:	dc.b 1
000126DF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000126E4 02                         byte_121D0:	dc.b 2
000126E5 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
000126EA F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
000126EF 01                         byte_121DB:	dc.b 1
000126F0 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
000126F5 01                         byte_121E1:	dc.b 1
000126F6 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
000126FC 00                         		even
000126FC 00                         		even
000126FC                            
000126FC                            ; ===========================================================================
000126FC                            ; ---------------------------------------------------------------------------
000126FC                            ; Object 62 - gargoyle head (LZ)
000126FC                            ; ---------------------------------------------------------------------------
000126FC                            
000126FC                            Obj62:					; XREF: Obj_Index
000126FC 7000                       		moveq	#0,d0
000126FE 1028 0024                  		move.b	$24(a0),d0
00012702 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012706 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
0001270A 6000 D4DC                  		bra.w	MarkObjGone
0001270E                            ; ===========================================================================
0001270E 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012710 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012712 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012714 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012716                            
00012716 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
0001271E                            ; ===========================================================================
0001271E                            
0001271E                            Obj62_Main:				; XREF: Obj62_Index
0001271E 5428 0024                  		addq.b	#2,$24(a0)
00012722 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
0001272A 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012730 0028 0004 0001             		ori.b	#4,1(a0)
00012736 117C 0003 0018             		move.b	#3,$18(a0)
0001273C 117C 0010 0019             		move.b	#$10,$19(a0)
00012742 1028 0028                  		move.b	$28(a0),d0	; get object type
00012746 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001274A 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012750 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012756 0228 000F 0028             		andi.b	#$F,$28(a0)
0001275C                            
0001275C                            Obj62_MakeFire:				; XREF: Obj62_Index
0001275C 5328 001E                  		subq.b	#1,$1E(a0)
00012760 6600                       		bne.s	Obj62_NoFire
00012762 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012768 6100 B650                  		bsr.w	ChkObjOnScreen
0001276C 6600                       		bne.s	Obj62_NoFire
0001276E 6100 B856                  		bsr.w	SingleObjLoad
00012772 6600                       		bne.s	Obj62_NoFire
00012774 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012778 5829 0024                  		addq.b	#4,$24(a1)
0001277C 3368 0008 0008             		move.w	8(a0),8(a1)
00012782 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012788 1368 0001 0001             		move.b	1(a0),1(a1)
0001278E 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012794                            
00012794                            Obj62_NoFire:
00012794 4E75                       		rts	
00012796                            ; ===========================================================================
00012796                            
00012796                            Obj62_FireBall:				; XREF: Obj62_Index
00012796 5428 0024                  		addq.b	#2,$24(a0)
0001279A 117C 0008 0016             		move.b	#8,$16(a0)
000127A0 117C 0008 0017             		move.b	#8,$17(a0)
000127A6 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000127AE 317C 02E9 0002             		move.w	#$2E9,2(a0)
000127B4 0028 0004 0001             		ori.b	#4,1(a0)
000127BA 117C 0004 0018             		move.b	#4,$18(a0)
000127C0 117C 0098 0020             		move.b	#$98,$20(a0)
000127C6 117C 0008 0019             		move.b	#8,$19(a0)
000127CC 117C 0002 001A             		move.b	#2,$1A(a0)
000127D2 5068 000C                  		addq.w	#8,$C(a0)
000127D6 317C 0200 0010             		move.w	#$200,$10(a0)
000127DC 0828 0000 0022             		btst	#0,$22(a0)
000127E2 6600                       		bne.s	Obj62_Sound
000127E4 4468 0010                  		neg.w	$10(a0)
000127E8                            
000127E8                            Obj62_Sound:
000127E8 303C 00AE                  		move.w	#$AE,d0
000127EC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava ball sound
000127F2                            
000127F2                            Obj62_AniFire:				; XREF: Obj62_Index
000127F2 1038 FE05                  		move.b	($FFFFFE05).w,d0
000127F6 0200 0007                  		andi.b	#7,d0
000127FA 6600                       		bne.s	Obj62_StopFire
000127FC 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012802                            
00012802                            Obj62_StopFire:
00012802 6100 B316                  		bsr.w	SpeedToPos
00012806 0828 0000 0022             		btst	#0,$22(a0)
0001280C 6600                       		bne.s	Obj62_StopFire2
0001280E 76F8                       		moveq	#-8,d3
00012810 6100 0000                  		bsr.w	ObjHitWallLeft
00012814 4A41                       		tst.w	d1
00012816 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
0001281A 4E75                       		rts	
0001281C                            ; ===========================================================================
0001281C                            
0001281C                            Obj62_StopFire2:
0001281C 7608                       		moveq	#8,d3
0001281E 6100 0000                  		bsr.w	ObjHitWallRight
00012822 4A41                       		tst.w	d1
00012824 6B00 B356                  		bmi.w	DeleteObject
00012828 4E75                       		rts	
0001282A                            ; ===========================================================================
0001282A                            ; ---------------------------------------------------------------------------
0001282A                            ; Sprite mappings - gargoyle head (LZ)
0001282A                            ; ---------------------------------------------------------------------------
0001282A                            Map_obj62:
0001282A                            	include "_maps\obj62.asm"
0001282A                            ; ---------------------------------------------------------------------------
0001282A                            ; Sprite mappings - gargoyle head (LZ)
0001282A                            ; ---------------------------------------------------------------------------
0001282A 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
0001282E 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012832 03                         byte_12320:	dc.b 3
00012833 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012838 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
0001283D 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012842 01                         byte_12330:	dc.b 1
00012843 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012848 01                         byte_12336:	dc.b 1
00012849 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
0001284E                            		even
0001284E                            		even
0001284E                            
0001284E                            ; ===========================================================================
0001284E                            ; ---------------------------------------------------------------------------
0001284E                            ; Object 63 - platforms	on a conveyor belt (LZ)
0001284E                            ; ---------------------------------------------------------------------------
0001284E                            
0001284E                            Obj63:					; XREF: Obj_Index
0001284E 7000                       		moveq	#0,d0
00012850 1028 0024                  		move.b	$24(a0),d0
00012854 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012858 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
0001285C 3028 0030                  		move.w	$30(a0),d0
00012860 0240 FF80                  		andi.w	#$FF80,d0
00012864 3238 F700                  		move.w	($FFFFF700).w,d1
00012868 0441 0080                  		subi.w	#$80,d1
0001286C 0241 FF80                  		andi.w	#$FF80,d1
00012870 9041                       		sub.w	d1,d0
00012872 0C40 0280                  		cmpi.w	#$280,d0
00012876 6200                       		bhi.s	loc_1236A
00012878                            
00012878                            Obj63_Display:				; XREF: loc_1236A
00012878 6000 B2C6                  		bra.w	DisplaySprite
0001287C                            ; ===========================================================================
0001287C                            
0001287C                            loc_1236A:				; XREF: Obj63
0001287C 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012882 6600                       		bne.s	loc_12378
00012884 0C40 FF80                  		cmpi.w	#-$80,d0
00012888 64EE                       		bcc.s	Obj63_Display
0001288A                            
0001288A                            loc_12378:
0001288A 1028 002F                  		move.b	$2F(a0),d0
0001288E 6A00 B2EC                  		bpl.w	DeleteObject
00012892 0240 007F                  		andi.w	#$7F,d0
00012896 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001289A 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000128A0 6000 B2DA                  		bra.w	DeleteObject
000128A4                            ; ===========================================================================
000128A4 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
000128A6 0000                       		dc.w loc_124B2-Obj63_Index
000128A8 0000                       		dc.w loc_124C2-Obj63_Index
000128AA 0000                       		dc.w loc_124DE-Obj63_Index
000128AC                            ; ===========================================================================
000128AC                            
000128AC                            Obj63_Main:				; XREF: Obj63_Index
000128AC 1028 0028                  		move.b	$28(a0),d0
000128B0 6B00 0000                  		bmi.w	loc_12460
000128B4 5428 0024                  		addq.b	#2,$24(a0)
000128B8 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
000128C0 317C 43F6 0002             		move.w	#$43F6,2(a0)
000128C6 0028 0004 0001             		ori.b	#4,1(a0)
000128CC 117C 0010 0019             		move.b	#$10,$19(a0)
000128D2 117C 0004 0018             		move.b	#4,$18(a0)
000128D8 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
000128DE 6600                       		bne.s	loc_123E2
000128E0 5828 0024                  		addq.b	#4,$24(a0)
000128E4 317C 03F6 0002             		move.w	#$3F6,2(a0)
000128EA 117C 0001 0018             		move.b	#1,$18(a0)
000128F0 6000 0000                  		bra.w	loc_124DE
000128F4                            ; ===========================================================================
000128F4                            
000128F4                            loc_123E2:
000128F4 117C 0004 001A             		move.b	#4,$1A(a0)
000128FA 7000                       		moveq	#0,d0
000128FC 1028 0028                  		move.b	$28(a0),d0
00012900 3200                       		move.w	d0,d1
00012902 E648                       		lsr.w	#3,d0
00012904 0240 001E                  		andi.w	#$1E,d0
00012908 45FA 0000                  		lea	Obj63_Data(pc),a2
0001290C D4F2 0000                  		adda.w	(a2,d0.w),a2
00012910 315A 0038                  		move.w	(a2)+,$38(a0)
00012914 315A 0030                  		move.w	(a2)+,$30(a0)
00012918 214A 003C                  		move.l	a2,$3C(a0)
0001291C 0241 000F                  		andi.w	#$F,d1
00012920 E549                       		lsl.w	#2,d1
00012922 1141 0038                  		move.b	d1,$38(a0)
00012926 117C 0004 003A             		move.b	#4,$3A(a0)
0001292C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012930 6700                       		beq.s	loc_1244C
00012932 117C 0001 003B             		move.b	#1,$3B(a0)
00012938 4428 003A                  		neg.b	$3A(a0)
0001293C 7200                       		moveq	#0,d1
0001293E 1228 0038                  		move.b	$38(a0),d1
00012942 D228 003A                  		add.b	$3A(a0),d1
00012946 B228 0039                  		cmp.b	$39(a0),d1
0001294A 6500                       		bcs.s	loc_12448
0001294C 1001                       		move.b	d1,d0
0001294E 7200                       		moveq	#0,d1
00012950 4A00                       		tst.b	d0
00012952 6A00                       		bpl.s	loc_12448
00012954 1228 0039                  		move.b	$39(a0),d1
00012958 5901                       		subq.b	#4,d1
0001295A                            
0001295A                            loc_12448:
0001295A 1141 0038                  		move.b	d1,$38(a0)
0001295E                            
0001295E                            loc_1244C:
0001295E 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012964 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001296A 6100 0000                  		bsr.w	Obj63_ChangeDir
0001296E 6000 0000                  		bra.w	loc_124B2
00012972                            ; ===========================================================================
00012972                            
00012972                            loc_12460:				; XREF: Obj63_Main
00012972 1140 002F                  		move.b	d0,$2F(a0)
00012976 0240 007F                  		andi.w	#$7F,d0
0001297A 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001297E 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012984 6600 B1F6                  		bne.w	DeleteObject
00012988 D040                       		add.w	d0,d0
0001298A 0240 001E                  		andi.w	#$1E,d0
0001298E 0640 0070                  		addi.w	#$70,d0
00012992 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012998 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001299C 321A                       		move.w	(a2)+,d1
0001299E 2248                       		movea.l	a0,a1
000129A0 6000                       		bra.s	Obj63_MakePtfms
000129A2                            ; ===========================================================================
000129A2                            
000129A2                            Obj63_Loop:
000129A2 6100 B622                  		bsr.w	SingleObjLoad
000129A6 6600                       		bne.s	loc_124AA
000129A8                            
000129A8                            Obj63_MakePtfms:			; XREF: loc_12460
000129A8 12BC 0063                  		move.b	#$63,0(a1)
000129AC 335A 0008                  		move.w	(a2)+,8(a1)
000129B0 335A 000C                  		move.w	(a2)+,$C(a1)
000129B4 301A                       		move.w	(a2)+,d0
000129B6 1340 0028                  		move.b	d0,$28(a1)
000129BA                            
000129BA                            loc_124AA:
000129BA 51C9 FFE6                  		dbf	d1,Obj63_Loop
000129BE                            
000129BE 588F                       		addq.l	#4,sp
000129C0 4E75                       		rts	
000129C2                            ; ===========================================================================
000129C2                            
000129C2                            loc_124B2:				; XREF: Obj63_Index
000129C2 7200                       		moveq	#0,d1
000129C4 1228 0019                  		move.b	$19(a0),d1
000129C8 4EB9 0000 786C             		jsr	(PlatformObject).l
000129CE 6000 0000                  		bra.w	sub_12502
000129D2                            ; ===========================================================================
000129D2                            
000129D2                            loc_124C2:				; XREF: Obj63_Index
000129D2 7200                       		moveq	#0,d1
000129D4 1228 0019                  		move.b	$19(a0),d1
000129D8 4EB9 0000 79E0             		jsr	(ExitPlatform).l
000129DE 3F28 0008                  		move.w	8(a0),-(sp)
000129E2 6100 0000                  		bsr.w	sub_12502
000129E6 341F                       		move.w	(sp)+,d2
000129E8 4EF9 0000 7F4A             		jmp	(MvSonicOnPtfm2).l
000129EE                            ; ===========================================================================
000129EE                            
000129EE                            loc_124DE:				; XREF: Obj63_Index
000129EE 3038 FE04                  		move.w	($FFFFFE04).w,d0
000129F2 0240 0003                  		andi.w	#3,d0
000129F6 6600                       		bne.s	loc_124FC
000129F8 7201                       		moveq	#1,d1
000129FA 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000129FE 6700                       		beq.s	loc_124F2
00012A00 4401                       		neg.b	d1
00012A02                            
00012A02                            loc_124F2:
00012A02 D328 001A                  		add.b	d1,$1A(a0)
00012A06 0228 0003 001A             		andi.b	#3,$1A(a0)
00012A0C                            
00012A0C                            loc_124FC:
00012A0C 588F                       		addq.l	#4,sp
00012A0E 6000 D1D8                  		bra.w	MarkObjGone
00012A12                            
00012A12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012A12                            
00012A12                            
00012A12                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012A12 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012A16 6700                       		beq.s	loc_12520
00012A18 4A28 003B                  		tst.b	$3B(a0)
00012A1C 6600                       		bne.s	loc_12520
00012A1E 117C 0001 003B             		move.b	#1,$3B(a0)
00012A24 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012A2A 4428 003A                  		neg.b	$3A(a0)
00012A2E 6000                       		bra.s	loc_12534
00012A30                            ; ===========================================================================
00012A30                            
00012A30                            loc_12520:
00012A30 3028 0008                  		move.w	8(a0),d0
00012A34 B068 0034                  		cmp.w	$34(a0),d0
00012A38 6600                       		bne.s	loc_1256A
00012A3A 3028 000C                  		move.w	$C(a0),d0
00012A3E B068 0036                  		cmp.w	$36(a0),d0
00012A42 6600                       		bne.s	loc_1256A
00012A44                            
00012A44                            loc_12534:
00012A44 7200                       		moveq	#0,d1
00012A46 1228 0038                  		move.b	$38(a0),d1
00012A4A D228 003A                  		add.b	$3A(a0),d1
00012A4E B228 0039                  		cmp.b	$39(a0),d1
00012A52 6500                       		bcs.s	loc_12552
00012A54 1001                       		move.b	d1,d0
00012A56 7200                       		moveq	#0,d1
00012A58 4A00                       		tst.b	d0
00012A5A 6A00                       		bpl.s	loc_12552
00012A5C 1228 0039                  		move.b	$39(a0),d1
00012A60 5901                       		subq.b	#4,d1
00012A62                            
00012A62                            loc_12552:
00012A62 1141 0038                  		move.b	d1,$38(a0)
00012A66 2268 003C                  		movea.l	$3C(a0),a1
00012A6A 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012A70 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012A76 6100 0000                  		bsr.w	Obj63_ChangeDir
00012A7A                            
00012A7A                            loc_1256A:
00012A7A 6100 B09E                  		bsr.w	SpeedToPos
00012A7E 4E75                       		rts	
00012A80                            ; End of function sub_12502
00012A80                            
00012A80                            
00012A80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012A80                            
00012A80                            
00012A80                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012A80 7000                       		moveq	#0,d0
00012A82 343C FF00                  		move.w	#-$100,d2
00012A86 3028 0008                  		move.w	8(a0),d0
00012A8A 9068 0034                  		sub.w	$34(a0),d0
00012A8E 6400                       		bcc.s	loc_12584
00012A90 4440                       		neg.w	d0
00012A92 4442                       		neg.w	d2
00012A94                            
00012A94                            loc_12584:
00012A94 7200                       		moveq	#0,d1
00012A96 363C FF00                  		move.w	#-$100,d3
00012A9A 3228 000C                  		move.w	$C(a0),d1
00012A9E 9268 0036                  		sub.w	$36(a0),d1
00012AA2 6400                       		bcc.s	loc_12598
00012AA4 4441                       		neg.w	d1
00012AA6 4443                       		neg.w	d3
00012AA8                            
00012AA8                            loc_12598:
00012AA8 B240                       		cmp.w	d0,d1
00012AAA 6500                       		bcs.s	loc_125C2
00012AAC 3028 0008                  		move.w	8(a0),d0
00012AB0 9068 0034                  		sub.w	$34(a0),d0
00012AB4 6700                       		beq.s	loc_125AE
00012AB6 48C0                       		ext.l	d0
00012AB8 E180                       		asl.l	#8,d0
00012ABA 81C1                       		divs.w	d1,d0
00012ABC 4440                       		neg.w	d0
00012ABE                            
00012ABE                            loc_125AE:
00012ABE 3140 0010                  		move.w	d0,$10(a0)
00012AC2 3143 0012                  		move.w	d3,$12(a0)
00012AC6 4840                       		swap	d0
00012AC8 3140 000A                  		move.w	d0,$A(a0)
00012ACC 4268 000E                  		clr.w	$E(a0)
00012AD0 4E75                       		rts	
00012AD2                            ; ===========================================================================
00012AD2                            
00012AD2                            loc_125C2:				; XREF: Obj63_ChangeDir
00012AD2 3228 000C                  		move.w	$C(a0),d1
00012AD6 9268 0036                  		sub.w	$36(a0),d1
00012ADA 6700                       		beq.s	loc_125D4
00012ADC 48C1                       		ext.l	d1
00012ADE E181                       		asl.l	#8,d1
00012AE0 83C0                       		divs.w	d0,d1
00012AE2 4441                       		neg.w	d1
00012AE4                            
00012AE4                            loc_125D4:
00012AE4 3141 0012                  		move.w	d1,$12(a0)
00012AE8 3142 0010                  		move.w	d2,$10(a0)
00012AEC 4841                       		swap	d1
00012AEE 3141 000E                  		move.w	d1,$E(a0)
00012AF2 4268 000A                  		clr.w	$A(a0)
00012AF6 4E75                       		rts	
00012AF8                            ; End of function Obj63_ChangeDir
00012AF8                            
00012AF8                            ; ===========================================================================
00012AF8 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012AFA 0000                       		dc.w word_12610-Obj63_Data
00012AFC 0000                       		dc.w word_12628-Obj63_Data
00012AFE 0000                       		dc.w word_1263C-Obj63_Data
00012B00 0000                       		dc.w word_12650-Obj63_Data
00012B02 0000                       		dc.w word_12668-Obj63_Data
00012B04 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012B14 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012B20 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012B30 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012B38 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012B4C 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012B60 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012B78 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012B8C                            
00012B8C                            ; ---------------------------------------------------------------------------
00012B8C                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012B8C                            ; ---------------------------------------------------------------------------
00012B8C                            Map_obj63:
00012B8C                            	include "_maps\obj63.asm"
00012B8C                            ; ---------------------------------------------------------------------------
00012B8C                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012B8C                            ; ---------------------------------------------------------------------------
00012B8C 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012B90 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012B94 0000                       		dc.w byte_1269E-Map_obj63
00012B96 01                         byte_12686:	dc.b 1
00012B97 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012B9C 01                         byte_1268C:	dc.b 1
00012B9D F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012BA2 01                         byte_12692:	dc.b 1
00012BA3 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012BA8 01                         byte_12698:	dc.b 1
00012BA9 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012BAE 01                         byte_1269E:	dc.b 1
00012BAF F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012BB4                            		even
00012BB4                            		even
00012BB4                            
00012BB4                            ; ===========================================================================
00012BB4                            ; ---------------------------------------------------------------------------
00012BB4                            ; Object 64 - bubbles (LZ)
00012BB4                            ; ---------------------------------------------------------------------------
00012BB4                            
00012BB4                            Obj64:					; XREF: Obj_Index
00012BB4 7000                       		moveq	#0,d0
00012BB6 1028 0024                  		move.b	$24(a0),d0
00012BBA 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012BBE 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012BC2                            ; ===========================================================================
00012BC2 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012BC4 0000                       		dc.w Obj64_Animate-Obj64_Index
00012BC6 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012BC8 0000                       		dc.w Obj64_Display2-Obj64_Index
00012BCA 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012BCC 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012BCE                            ; ===========================================================================
00012BCE                            
00012BCE                            Obj64_Main:				; XREF: Obj64_Index
00012BCE 5428 0024                  		addq.b	#2,$24(a0)
00012BD2 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012BDA 317C 8348 0002             		move.w	#$8348,2(a0)
00012BE0 117C 0084 0001             		move.b	#$84,1(a0)
00012BE6 117C 0010 0019             		move.b	#$10,$19(a0)
00012BEC 117C 0001 0018             		move.b	#1,$18(a0)
00012BF2 1028 0028                  		move.b	$28(a0),d0	; get object type
00012BF6 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012BF8 5028 0024                  		addq.b	#8,$24(a0)
00012BFC 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012C00 1140 0032                  		move.b	d0,$32(a0)
00012C04 1140 0033                  		move.b	d0,$33(a0)
00012C08 117C 0006 001C             		move.b	#6,$1C(a0)
00012C0E 6000 0000                  		bra.w	Obj64_BblMaker
00012C12                            ; ===========================================================================
00012C12                            
00012C12                            Obj64_Bubble:				; XREF: Obj64_Main
00012C12 1140 001C                  		move.b	d0,$1C(a0)
00012C16 3168 0008 0030             		move.w	8(a0),$30(a0)
00012C1C 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012C22 4EB9 0000 2BC2             		jsr	(RandomNumber).l
00012C28 1140 0026                  		move.b	d0,$26(a0)
00012C2C                            
00012C2C                            Obj64_Animate:				; XREF: Obj64_Index
00012C2C 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012C32 4EB9 0000 AC10             		jsr	AnimateSprite
00012C38 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012C3E 6600                       		bne.s	Obj64_ChkWater
00012C40 117C 0001 002E             		move.b	#1,$2E(a0)
00012C46                            
00012C46                            Obj64_ChkWater:				; XREF: Obj64_Index
00012C46 3038 F646                  		move.w	($FFFFF646).w,d0
00012C4A B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012C4E 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012C50                            
00012C50                            Obj64_Burst:				; XREF: Obj64_Wobble
00012C50 117C 0006 0024             		move.b	#6,$24(a0)
00012C56 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012C5A 6000 0000                  		bra.w	Obj64_Display2
00012C5E                            ; ===========================================================================
00012C5E                            
00012C5E                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012C5E 1028 0026                  		move.b	$26(a0),d0
00012C62 5228 0026                  		addq.b	#1,$26(a0)
00012C66 0240 007F                  		andi.w	#$7F,d0
00012C6A 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012C70 1031 0000                  		move.b	(a1,d0.w),d0
00012C74 4880                       		ext.w	d0
00012C76 D068 0030                  		add.w	$30(a0),d0
00012C7A 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012C7E 4A28 002E                  		tst.b	$2E(a0)
00012C82 6700                       		beq.s	Obj64_Display
00012C84 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012C88 6700                       		beq.s	Obj64_Display	; if not, branch
00012C8A                            
00012C8A 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012C8E 303C 00AD                  		move.w	#$AD,d0
00012C92 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012C98 43F8 D000                  		lea	($FFFFD000).w,a1
00012C9C 4269 0010                  		clr.w	$10(a1)
00012CA0 4269 0012                  		clr.w	$12(a1)
00012CA4 4269 0014                  		clr.w	$14(a1)
00012CA8 137C 0015 001C             		move.b	#$15,$1C(a1)
00012CAE 337C 0023 003E             		move.w	#$23,$3E(a1)
00012CB4 137C 0000 003C             		move.b	#0,$3C(a1)
00012CBA 08A9 0005 0022             		bclr	#5,$22(a1)
00012CC0 08A9 0004 0022             		bclr	#4,$22(a1)
00012CC6 0829 0002 0022             		btst	#2,$22(a1)
00012CCC 6700 FF82                  		beq.w	Obj64_Burst
00012CD0 08A9 0002 0022             		bclr	#2,$22(a1)
00012CD6 137C 0013 0016             		move.b	#$13,$16(a1)
00012CDC 137C 0009 0017             		move.b	#9,$17(a1)
00012CE2 5B69 000C                  		subq.w	#5,$C(a1)
00012CE6 6000 FF68                  		bra.w	Obj64_Burst
00012CEA                            ; ===========================================================================
00012CEA                            
00012CEA                            Obj64_Display:				; XREF: Obj64_Wobble
00012CEA 6100 AE2E                  		bsr.w	SpeedToPos
00012CEE 4A28 0001                  		tst.b	1(a0)
00012CF2 6A00                       		bpl.s	Obj64_Delete
00012CF4 4EFA AE4A                  		jmp	DisplaySprite
00012CF8                            ; ===========================================================================
00012CF8                            
00012CF8                            Obj64_Delete:
00012CF8 4EFA AE82                  		jmp	DeleteObject
00012CFC                            ; ===========================================================================
00012CFC                            
00012CFC                            Obj64_Display2:				; XREF: Obj64_Index
00012CFC 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012D02 4EB9 0000 AC10             		jsr	AnimateSprite
00012D08 4A28 0001                  		tst.b	1(a0)
00012D0C 6A00                       		bpl.s	Obj64_Delete2
00012D0E 4EFA AE30                  		jmp	DisplaySprite
00012D12                            ; ===========================================================================
00012D12                            
00012D12                            Obj64_Delete2:
00012D12 4EFA AE68                  		jmp	DeleteObject
00012D16                            ; ===========================================================================
00012D16                            
00012D16                            Obj64_Delete3:				; XREF: Obj64_Index
00012D16 6000 AE64                  		bra.w	DeleteObject
00012D1A                            ; ===========================================================================
00012D1A                            
00012D1A                            Obj64_BblMaker:				; XREF: Obj64_Index
00012D1A 4A68 0036                  		tst.w	$36(a0)
00012D1E 6600                       		bne.s	loc_12874
00012D20 3038 F646                  		move.w	($FFFFF646).w,d0
00012D24 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012D28 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012D2C 4A28 0001                  		tst.b	1(a0)
00012D30 6A00 0000                  		bpl.w	Obj64_ChkDel
00012D34 5368 0038                  		subq.w	#1,$38(a0)
00012D38 6A00 0000                  		bpl.w	loc_12914
00012D3C 317C 0001 0036             		move.w	#1,$36(a0)
00012D42                            
00012D42                            loc_1283A:
00012D42 4EB9 0000 2BC2             		jsr	(RandomNumber).l
00012D48 3200                       		move.w	d0,d1
00012D4A 0240 0007                  		andi.w	#7,d0
00012D4E 0C40 0006                  		cmpi.w	#6,d0
00012D52 64EE                       		bcc.s	loc_1283A
00012D54                            
00012D54 1140 0034                  		move.b	d0,$34(a0)
00012D58 0241 000C                  		andi.w	#$C,d1
00012D5C 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00012D62 D2C1                       		adda.w	d1,a1
00012D64 2149 003C                  		move.l	a1,$3C(a0)
00012D68 5328 0032                  		subq.b	#1,$32(a0)
00012D6C 6A00                       		bpl.s	loc_12872
00012D6E 1168 0033 0032             		move.b	$33(a0),$32(a0)
00012D74 08E8 0007 0036             		bset	#7,$36(a0)
00012D7A                            
00012D7A                            loc_12872:
00012D7A 6000                       		bra.s	loc_1287C
00012D7C                            ; ===========================================================================
00012D7C                            
00012D7C                            loc_12874:				; XREF: Obj64_BblMaker
00012D7C 5368 0038                  		subq.w	#1,$38(a0)
00012D80 6A00 0000                  		bpl.w	loc_12914
00012D84                            
00012D84                            loc_1287C:
00012D84 4EB9 0000 2BC2             		jsr	(RandomNumber).l
00012D8A 0240 001F                  		andi.w	#$1F,d0
00012D8E 3140 0038                  		move.w	d0,$38(a0)
00012D92 6100 B232                  		bsr.w	SingleObjLoad
00012D96 6600                       		bne.s	loc_128F8
00012D98 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00012D9C 3368 0008 0008             		move.w	8(a0),8(a1)
00012DA2 4EB9 0000 2BC2             		jsr	(RandomNumber).l
00012DA8 0240 000F                  		andi.w	#$F,d0
00012DAC 5140                       		subq.w	#8,d0
00012DAE D169 0008                  		add.w	d0,8(a1)
00012DB2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012DB8 7000                       		moveq	#0,d0
00012DBA 1028 0034                  		move.b	$34(a0),d0
00012DBE 2468 003C                  		movea.l	$3C(a0),a2
00012DC2 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00012DC8 0828 0007 0036             		btst	#7,$36(a0)
00012DCE 6700                       		beq.s	loc_128F8
00012DD0 4EB9 0000 2BC2             		jsr	(RandomNumber).l
00012DD6 0240 0003                  		andi.w	#3,d0
00012DDA 6600                       		bne.s	loc_128E4
00012DDC 08E8 0006 0036             		bset	#6,$36(a0)
00012DE2 6600                       		bne.s	loc_128F8
00012DE4 137C 0002 0028             		move.b	#2,$28(a1)
00012DEA                            
00012DEA                            loc_128E4:
00012DEA 4A28 0034                  		tst.b	$34(a0)
00012DEE 6600                       		bne.s	loc_128F8
00012DF0 08E8 0006 0036             		bset	#6,$36(a0)
00012DF6 6600                       		bne.s	loc_128F8
00012DF8 137C 0002 0028             		move.b	#2,$28(a1)
00012DFE                            
00012DFE                            loc_128F8:
00012DFE 5328 0034                  		subq.b	#1,$34(a0)
00012E02 6A00                       		bpl.s	loc_12914
00012E04 4EB9 0000 2BC2             		jsr	(RandomNumber).l
00012E0A 0240 007F                  		andi.w	#$7F,d0
00012E0E 0640 0080                  		addi.w	#$80,d0
00012E12 D168 0038                  		add.w	d0,$38(a0)
00012E16 4268 0036                  		clr.w	$36(a0)
00012E1A                            
00012E1A                            loc_12914:
00012E1A 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012E20 4EB9 0000 AC10             		jsr	AnimateSprite
00012E26                            
00012E26                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00012E26 3028 0008                  		move.w	8(a0),d0
00012E2A 0240 FF80                  		andi.w	#$FF80,d0
00012E2E 3238 F700                  		move.w	($FFFFF700).w,d1
00012E32 0441 0080                  		subi.w	#$80,d1
00012E36 0241 FF80                  		andi.w	#$FF80,d1
00012E3A 9041                       		sub.w	d1,d0
00012E3C 0C40 0280                  		cmpi.w	#$280,d0
00012E40 6200 AD3A                  		bhi.w	DeleteObject
00012E44 3038 F646                  		move.w	($FFFFF646).w,d0
00012E48 B068 000C                  		cmp.w	$C(a0),d0
00012E4C 6500 ACF2                  		bcs.w	DisplaySprite
00012E50 4E75                       		rts	
00012E52                            ; ===========================================================================
00012E52                            ; bubble production sequence
00012E52                            
00012E52                            ; 0 = small bubble, 1 =	large bubble
00012E52                            
00012E52 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00012E64                            
00012E64                            ; ===========================================================================
00012E64                            
00012E64                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00012E64 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012E68 6B00                       		bmi.s	loc_12998
00012E6A 43F8 D000                  		lea	($FFFFD000).w,a1
00012E6E 3029 0008                  		move.w	8(a1),d0
00012E72 3228 0008                  		move.w	8(a0),d1
00012E76 0441 0010                  		subi.w	#$10,d1
00012E7A B240                       		cmp.w	d0,d1
00012E7C 6400                       		bcc.s	loc_12998
00012E7E 0641 0020                  		addi.w	#$20,d1
00012E82 B240                       		cmp.w	d0,d1
00012E84 6500                       		bcs.s	loc_12998
00012E86 3029 000C                  		move.w	$C(a1),d0
00012E8A 3228 000C                  		move.w	$C(a0),d1
00012E8E B240                       		cmp.w	d0,d1
00012E90 6400                       		bcc.s	loc_12998
00012E92 0641 0010                  		addi.w	#$10,d1
00012E96 B240                       		cmp.w	d0,d1
00012E98 6500                       		bcs.s	loc_12998
00012E9A 7001                       		moveq	#1,d0
00012E9C 4E75                       		rts	
00012E9E                            ; ===========================================================================
00012E9E                            
00012E9E                            loc_12998:
00012E9E 7000                       		moveq	#0,d0
00012EA0 4E75                       		rts	
00012EA2                            ; ===========================================================================
00012EA2                            Ani_obj64:
00012EA2                            	include "_anim\obj64.asm"
00012EA2                            ; ---------------------------------------------------------------------------
00012EA2                            ; Animation script - bubbles (LZ)
00012EA2                            ; ---------------------------------------------------------------------------
00012EA2 0000                       		dc.w byte_129AA-Ani_obj64
00012EA4 0000                       		dc.w byte_129B0-Ani_obj64
00012EA6 0000                       		dc.w byte_129B6-Ani_obj64
00012EA8 0000                       		dc.w byte_129BE-Ani_obj64
00012EAA 0000                       		dc.w byte_129BE-Ani_obj64
00012EAC 0000                       		dc.w byte_129C0-Ani_obj64
00012EAE 0000                       		dc.w byte_129C6-Ani_obj64
00012EB0 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00012EB6 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00012EBC 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00012EC4 04FC                       byte_129BE:	dc.b 4,	$FC
00012EC6 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00012ECC 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00012ED2 00                         		even
00012ED2 00                         		even
00012ED2                            
00012ED2                            ; ---------------------------------------------------------------------------
00012ED2                            ; Sprite mappings - bubbles (LZ)
00012ED2                            ; ---------------------------------------------------------------------------
00012ED2                            Map_obj64:
00012ED2                            	include "_maps\obj64.asm"
00012ED2                            ; ---------------------------------------------------------------------------
00012ED2                            ; Sprite mappings - bubbles (LZ)
00012ED2                            ; ---------------------------------------------------------------------------
00012ED2 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00012ED6 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00012EDA 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00012EDE 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00012EE2 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00012EE6 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00012EEA 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00012EEE 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00012EF2 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00012EF6 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00012EFA 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00012EFE 0000                       		dc.w byte_12A9C-Map_obj64
00012F00 01                         byte_129FA:	dc.b 1
00012F01 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00012F06 01                         byte_12A00:	dc.b 1
00012F07 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00012F0C 01                         byte_12A06:	dc.b 1
00012F0D FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00012F12 01                         byte_12A0C:	dc.b 1
00012F13 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00012F18 01                         byte_12A12:	dc.b 1
00012F19 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00012F1E 01                         byte_12A18:	dc.b 1
00012F1F F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00012F24 01                         byte_12A1E:	dc.b 1
00012F25 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00012F2A 04                         byte_12A24:	dc.b 4
00012F2B F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00012F30 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00012F35 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00012F3A 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00012F3F 04                         byte_12A39:	dc.b 4
00012F40 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00012F45 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00012F4A 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00012F4F 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00012F54 01                         byte_12A4E:	dc.b 1
00012F55 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00012F5A 01                         byte_12A54:	dc.b 1
00012F5B F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00012F60 01                         byte_12A5A:	dc.b 1
00012F61 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00012F66 01                         byte_12A60:	dc.b 1
00012F67 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00012F6C 01                         byte_12A66:	dc.b 1
00012F6D F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00012F72 01                         byte_12A6C:	dc.b 1
00012F73 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00012F78 01                         byte_12A72:	dc.b 1
00012F79 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00012F7E 01                         byte_12A78:	dc.b 1
00012F7F F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00012F84 01                         byte_12A7E:	dc.b 1
00012F85 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00012F8A 01                         byte_12A84:	dc.b 1
00012F8B F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00012F90 01                         byte_12A8A:	dc.b 1
00012F91 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00012F96 01                         byte_12A90:	dc.b 1
00012F97 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00012F9C 01                         byte_12A96:	dc.b 1
00012F9D F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00012FA2 00                         byte_12A9C:	dc.b 0
00012FA4 00                         		even
00012FA4 00                         		even
00012FA4                            
00012FA4                            ; ===========================================================================
00012FA4                            ; ---------------------------------------------------------------------------
00012FA4                            ; Object 65 - waterfalls (LZ)
00012FA4                            ; ---------------------------------------------------------------------------
00012FA4                            
00012FA4                            Obj65:					; XREF: Obj_Index
00012FA4 7000                       		moveq	#0,d0
00012FA6 1028 0024                  		move.b	$24(a0),d0
00012FAA 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00012FAE 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00012FB2                            ; ===========================================================================
00012FB2 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00012FB4 0000                       		dc.w Obj65_Animate-Obj65_Index
00012FB6 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00012FB8 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00012FBA 0000                       		dc.w loc_12B36-Obj65_Index
00012FBC                            ; ===========================================================================
00012FBC                            
00012FBC                            Obj65_Main:				; XREF: Obj65_Index
00012FBC 5828 0024                  		addq.b	#4,$24(a0)
00012FC0 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00012FC8 317C 4259 0002             		move.w	#$4259,2(a0)
00012FCE 0028 0004 0001             		ori.b	#4,1(a0)
00012FD4 117C 0018 0019             		move.b	#$18,$19(a0)
00012FDA 117C 0001 0018             		move.b	#1,$18(a0)
00012FE0 1028 0028                  		move.b	$28(a0),d0	; get object type
00012FE4 6A00                       		bpl.s	loc_12AE6
00012FE6 08E8 0007 0002             		bset	#7,2(a0)
00012FEC                            
00012FEC                            loc_12AE6:
00012FEC 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00012FF0 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00012FF4 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00012FF8 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00012FFA 4228 0018                  		clr.b	$18(a0)
00012FFE 5528 0024                  		subq.b	#2,$24(a0)
00013002 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00013008 6700                       		beq.s	loc_12B0A	; if not, branch
0001300A 117C 0006 0024             		move.b	#6,$24(a0)
00013010                            
00013010                            loc_12B0A:
00013010 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00013016 6700                       		beq.s	Obj65_Animate	; if not, branch
00013018 117C 0008 0024             		move.b	#8,$24(a0)
0001301E                            
0001301E                            Obj65_Animate:				; XREF: Obj65_Index
0001301E 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00013024 4EB9 0000 AC10             		jsr	AnimateSprite
0001302A                            
0001302A                            Obj65_ChkDel:				; XREF: Obj65_Index
0001302A 6000 CBBC                  		bra.w	MarkObjGone
0001302E                            ; ===========================================================================
0001302E                            
0001302E                            Obj65_FixHeight:			; XREF: Obj65_Index
0001302E 3038 F646                  		move.w	($FFFFF646).w,d0
00013032 0440 0010                  		subi.w	#$10,d0
00013036 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
0001303A 60E2                       		bra.s	Obj65_Animate
0001303C                            ; ===========================================================================
0001303C                            
0001303C                            loc_12B36:				; XREF: Obj65_Index
0001303C 08A8 0007 0002             		bclr	#7,2(a0)
00013042 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013048 6600                       		bne.s	Obj65_Animate2
0001304A 08E8 0007 0002             		bset	#7,2(a0)
00013050                            
00013050                            Obj65_Animate2:
00013050 60CC                       		bra.s	Obj65_Animate
00013052                            ; ===========================================================================
00013052                            Ani_obj65:
00013052                            	include "_anim\obj65.asm"
00013052                            ; ---------------------------------------------------------------------------
00013052                            ; Animation script - waterfall (LZ)
00013052                            ; ---------------------------------------------------------------------------
00013052 0000                       		dc.w byte_12B4E-Ani_obj65
00013054 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
0001305A 00                         		even
0001305A 00                         		even
0001305A                            
0001305A                            ; ---------------------------------------------------------------------------
0001305A                            ; Sprite mappings - waterfalls (LZ)
0001305A                            ; ---------------------------------------------------------------------------
0001305A                            Map_obj65:
0001305A                            	include "_maps\obj65.asm"
0001305A                            ; ---------------------------------------------------------------------------
0001305A                            ; Sprite mappings - waterfalls (LZ)
0001305A                            ; ---------------------------------------------------------------------------
0001305A 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
0001305E 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013062 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013066 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
0001306A 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
0001306E 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00013072 01                         byte_12B6C:	dc.b 1
00013073 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00013078 02                         byte_12B72:	dc.b 2
00013079 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
0001307E 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00013083 02                         byte_12B7D:	dc.b 2
00013084 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013089 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001308E 01                         byte_12B88:	dc.b 1
0001308F F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00013094 02                         byte_12B8E:	dc.b 2
00013095 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001309A 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001309F 01                         byte_12B99:	dc.b 1
000130A0 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
000130A5 01                         byte_12B9F:	dc.b 1
000130A6 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
000130AB 01                         byte_12BA5:	dc.b 1
000130AC F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
000130B1 02                         byte_12BAB:	dc.b 2
000130B2 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
000130B7 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
000130BC 02                         byte_12BB6:	dc.b 2
000130BD F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
000130C2 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
000130C7 02                         byte_12BC1:	dc.b 2
000130C8 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
000130CD F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
000130D2 02                         byte_12BCC:	dc.b 2
000130D3 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
000130D8 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
000130DE 00                         		even
000130DE 00                         		even
000130DE                            
000130DE                            ; ===========================================================================
000130DE                            ; ---------------------------------------------------------------------------
000130DE                            ; Object 01 - Sonic
000130DE                            ; ---------------------------------------------------------------------------
000130DE                            
000130DE                            Obj01:					; XREF: Obj_Index
000130DE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000130E2 6700                       		beq.s	Obj01_Normal	; if not, branch
000130E4 4EF9 0000 0000             		jmp	DebugMode
000130EA                            ; ===========================================================================
000130EA                            
000130EA                            Obj01_Normal:
000130EA 7000                       		moveq	#0,d0
000130EC 1028 0024                  		move.b	$24(a0),d0
000130F0 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
000130F4 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
000130F8                            ; ===========================================================================
000130F8 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
000130FA 0000                       		dc.w Obj01_Control-Obj01_Index
000130FC 0000                       		dc.w Obj01_Hurt-Obj01_Index
000130FE 0000                       		dc.w Obj01_Death-Obj01_Index
00013100 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00013102                            ; ===========================================================================
00013102                            
00013102                            Obj01_Main:				; XREF: Obj01_Index
00013102 5428 0024                  		addq.b	#2,$24(a0)
00013106 117C 0013 0016             		move.b	#$13,$16(a0)
0001310C 117C 0009 0017             		move.b	#9,$17(a0)
00013112 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001311A 317C 0780 0002             		move.w	#$780,2(a0)
00013120 117C 0002 0018             		move.b	#2,$18(a0)
00013126 117C 0018 0019             		move.b	#$18,$19(a0)
0001312C 117C 0004 0001             		move.b	#4,1(a0)
00013132 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00013138 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
0001313E 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00013144                            
00013144                            Obj01_Control:				; XREF: Obj01_Index
00013144 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00013148 6700                       		beq.s	loc_12C58	; if not, branch
0001314A 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013150 6700                       		beq.s	loc_12C58	; if not, branch
00013152 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00013158 4238 F7CC                  		clr.b	($FFFFF7CC).w
0001315C 4E75                       		rts	
0001315E                            ; ===========================================================================
0001315E                            
0001315E                            loc_12C58:
0001315E 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00013162 6600                       		bne.s	loc_12C64	; if yes, branch
00013164 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
0001316A                            
0001316A                            loc_12C64:
0001316A 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00013170 6600                       		bne.s	loc_12C7E	; if yes, branch
00013172 7000                       		moveq	#0,d0
00013174 1028 0022                  		move.b	$22(a0),d0
00013178 0240 0006                  		andi.w	#6,d0
0001317C 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00013180 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00013184                            
00013184                            loc_12C7E:
00013184 6100                       		bsr.s	Sonic_Display
00013186 6100 0000                  		bsr.w	Sonic_RecordPos
0001318A 6100 0000                  		bsr.w	Sonic_Water
0001318E 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00013194 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
0001319A 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001319E 6700                       		beq.s	loc_12CA6
000131A0 4A28 001C                  		tst.b	$1C(a0)
000131A4 6600                       		bne.s	loc_12CA6
000131A6 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
000131AC                            
000131AC                            loc_12CA6:
000131AC 6100 0000                  		bsr.w	Sonic_Animate
000131B0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000131B4 6B00                       		bmi.s	loc_12CB6
000131B6 4EB9 0000 0000             		jsr	TouchResponse
000131BC                            
000131BC                            loc_12CB6:
000131BC 6100 0000                  		bsr.w	Sonic_Loops
000131C0 6100 0000                  		bsr.w	LoadSonicDynPLC
000131C4 4E75                       		rts	
000131C6                            ; ===========================================================================
000131C6 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
000131C8 0000                       		dc.w Obj01_MdJump-Obj01_Modes
000131CA 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
000131CC 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
000131CE                            ; ---------------------------------------------------------------------------
000131CE                            ; Music	to play	after invincibility wears off
000131CE                            ; ---------------------------------------------------------------------------
000131CE                            ; ===========================================================================
000131CE                            
000131CE                            Sonic_Display:				; XREF: loc_12C7E
000131CE 3028 0030                  		move.w	$30(a0),d0
000131D2 6700                       		beq.s	Obj01_Display
000131D4 5368 0030                  		subq.w	#1,$30(a0)
000131D8 E648                       		lsr.w	#3,d0
000131DA 6400                       		bcc.s	Obj01_ChkInvin
000131DC                            
000131DC                            Obj01_Display:
000131DC 4EBA A962                  		jsr	DisplaySprite
000131E0                            
000131E0                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
000131E0                             
000131E0                            Obj01_ChkInvin:
000131E0 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000131E4 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
000131E8 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
000131EC 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
000131F0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
000131F4 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
000131F8 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000131FC 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013200 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00013206 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
0001320A 7000                       		moveq	#0,d0
0001320C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013210                             
00013210 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00013216 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
00013218 43F9 0000 3A72             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0001321E 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013220                             
00013220                            Obj01_GetBgm2:
00013220 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00013226 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00013228 43F9 0000 3A7A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0001322E 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013230                             
00013230                            Obj01_GetBgm3:
00013230 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00013236 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013238 43F9 0000 3A80             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
0001323E 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013240                             
00013240                            Obj01_GetBgm4:
00013240 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00013246 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00013248 43F9 0000 3A86             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0001324E                             
0001324E                            Obj01_PlayMusic:
0001324E 1031 0000                  		move.b	(a1,d0.w),d0
00013252 4EB9 0000 15B6             		jsr	(PlaySound).l	; play normal music
00013258                             
00013258                            ; NineKode ends here.
00013258                            
00013258                            Obj01_RmvInvin:
00013258 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
0001325E                            
0001325E                            Obj01_ChkShoes:
0001325E 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00013262 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00013264 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00013268 6700                       		beq.s	Obj01_ExitChk
0001326A 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
0001326E 6600                       		bne.s	Obj01_ExitChk
00013270 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013276 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
0001327C 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013282 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00013288 303C 00E3                  		move.w	#$E3,d0
0001328C 4EF9 0000 15B6             		jmp	(PlaySound).l	; run music at normal speed
00013292                            ; ===========================================================================
00013292                            
00013292                            Obj01_ExitChk:
00013292 4E75                       		rts	
00013294                            
00013294                            ; ---------------------------------------------------------------------------
00013294                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00013294                            ; ---------------------------------------------------------------------------
00013294                            
00013294                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013294                            
00013294                            
00013294                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00013294 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00013298 43F8 CB00                  		lea	($FFFFCB00).w,a1
0001329C 43F1 0000                  		lea	(a1,d0.w),a1
000132A0 32E8 0008                  		move.w	8(a0),(a1)+
000132A4 32E8 000C                  		move.w	$C(a0),(a1)+
000132A8 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000132AC 4E75                       		rts	
000132AE                            ; End of function Sonic_RecordPos
000132AE                            
000132AE                            ; ---------------------------------------------------------------------------
000132AE                            ; Subroutine for Sonic when he's underwater
000132AE                            ; ---------------------------------------------------------------------------
000132AE                            
000132AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000132AE                            
000132AE                            
000132AE                            Sonic_Water:				; XREF: loc_12C7E
000132AE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000132B4 6700                       		beq.s	Obj01_InWater	; if yes, branch
000132B6                            
000132B6                            locret_12D80:
000132B6 4E75                       		rts	
000132B8                            ; ===========================================================================
000132B8                            
000132B8                            Obj01_InWater:
000132B8 3038 F646                  		move.w	($FFFFF646).w,d0
000132BC B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
000132C0 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
000132C2 08E8 0006 0022             		bset	#6,$22(a0)
000132C8 66EC                       		bne.s	locret_12D80
000132CA 6100 0000                  		bsr.w	ResumeMusic
000132CE 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
000132D4 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
000132DA 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
000132E0 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
000132E6 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
000132EC E0E8 0010                  		asr	$10(a0)
000132F0 E0E8 0012                  		asr	$12(a0)
000132F4 E0E8 0012                  		asr	$12(a0)
000132F8 67BC                       		beq.s	locret_12D80
000132FA 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013300 303C 00AA                  		move.w	#$AA,d0
00013304 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play splash sound
0001330A                            ; ===========================================================================
0001330A                            
0001330A                            Obj01_OutWater:
0001330A 08A8 0006 0022             		bclr	#6,$22(a0)
00013310 67A4                       		beq.s	locret_12D80
00013312 6100 0000                  		bsr.w	ResumeMusic
00013316 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
0001331C 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013322 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013328 E1E8 0012                  		asl	$12(a0)
0001332C 6700 FF88                  		beq.w	locret_12D80
00013330 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013336 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
0001333C 6E00                       		bgt.s	loc_12E0E
0001333E 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00013344                            
00013344                            loc_12E0E:
00013344 303C 00AA                  		move.w	#$AA,d0
00013348 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play splash sound
0001334E                            ; End of function Sonic_Water
0001334E                            
0001334E                            ; ===========================================================================
0001334E                            ; ---------------------------------------------------------------------------
0001334E                            ; Modes	for controlling	Sonic
0001334E                            ; ---------------------------------------------------------------------------
0001334E                            
0001334E                            Obj01_MdNormal:				; XREF: Obj01_Modes
0001334E 6100 0000                  		bsr.w	Sonic_Jump
00013352 6100 0000                  		bsr.w	Sonic_SlopeResist
00013356 6100 0000                  		bsr.w	Sonic_Move
0001335A 6100 0000                  		bsr.w	Sonic_Roll
0001335E 6100 0000                  		bsr.w	Sonic_LevelBound
00013362 4EBA A7B6                  		jsr	SpeedToPos
00013366 6100 0000                  		bsr.w	Sonic_AnglePos
0001336A 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001336E 4E75                       		rts	
00013370                            ; ===========================================================================
00013370                            
00013370                            Obj01_MdJump:				; XREF: Obj01_Modes
00013370 6100 0000                  		bsr.w	Sonic_JumpHeight
00013374 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013378 6100 0000                  		bsr.w	Sonic_LevelBound
0001337C 4EBA A770                  		jsr	ObjectFall
00013380 0828 0006 0022             		btst	#6,$22(a0)
00013386 6700                       		beq.s	loc_12E5C
00013388 0468 0028 0012             		subi.w	#$28,$12(a0)
0001338E                            
0001338E                            loc_12E5C:
0001338E 6100 0000                  		bsr.w	Sonic_JumpAngle
00013392 6100 0000                  		bsr.w	Sonic_Floor
00013396 4E75                       		rts	
00013398                            ; ===========================================================================
00013398                            
00013398                            Obj01_MdRoll:				; XREF: Obj01_Modes
00013398 6100 0000                  		bsr.w	Sonic_Jump
0001339C 6100 0000                  		bsr.w	Sonic_RollRepel
000133A0 6100 0000                  		bsr.w	Sonic_RollSpeed
000133A4 6100 0000                  		bsr.w	Sonic_LevelBound
000133A8 4EBA A770                  		jsr	SpeedToPos
000133AC 6100 0000                  		bsr.w	Sonic_AnglePos
000133B0 6100 0000                  		bsr.w	Sonic_SlopeRepel
000133B4 4E75                       		rts	
000133B6                            ; ===========================================================================
000133B6                            
000133B6                            Obj01_MdJump2:				; XREF: Obj01_Modes
000133B6 6100 0000                  		bsr.w	Sonic_JumpHeight
000133BA 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000133BE 6100 0000                  		bsr.w	Sonic_LevelBound
000133C2 6100 0000                  		bsr.w	Sonic_AirUnroll
000133C6 4EBA A726                  		jsr	ObjectFall
000133CA 0828 0006 0022             		btst	#6,$22(a0)
000133D0 6700                       		beq.s	loc_12EA6
000133D2 0468 0028 0012             		subi.w	#$28,$12(a0)
000133D8                            
000133D8                            loc_12EA6:
000133D8 6100 0000                  		bsr.w	Sonic_JumpAngle
000133DC 6100 0000                  		bsr.w	Sonic_Floor
000133E0 4E75                       		rts	
000133E2                            ; ---------------------------------------------------------------------------
000133E2                            ; Subroutine to	make Sonic walk/run
000133E2                            ; ---------------------------------------------------------------------------
000133E2                            
000133E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000133E2                            
000133E2                            
000133E2                            Sonic_Move:				; XREF: Obj01_MdNormal
000133E2 3C38 F760                  		move.w	($FFFFF760).w,d6
000133E6 3A38 F762                  		move.w	($FFFFF762).w,d5
000133EA 3838 F764                  		move.w	($FFFFF764).w,d4
000133EE 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000133F2 6600 0000                  		bne.w	loc_12FEE
000133F6 4A68 003E                  		tst.w	$3E(a0)
000133FA 6600 0000                  		bne.w	Obj01_ResetScr
000133FE 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013404 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00013406 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001340C 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
0001340E 6100 0000                  		bsr.w	Sonic_MoveLeft
00013412                            
00013412                            Obj01_NotLeft:
00013412 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013418 6700                       		beq.s	Obj01_NotRight	; if not, branch
0001341A 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013420 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
00013422 6100 0000                  		bsr.w	Sonic_MoveLeft
00013426 6000                       		bra.s	Obj01_NotRight
00013428                            
00013428                            Obj01_MoveRight:
00013428 6100 0000                  		bsr.w	Sonic_MoveRight
0001342C                            
0001342C                            Obj01_NotRight:
0001342C 1028 0026                  		move.b	$26(a0),d0
00013430 0600 0020                  		addi.b	#$20,d0
00013434 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013438 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001343C 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013440 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013444 08A8 0005 0022             		bclr	#5,$22(a0)
0001344A 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013450 0828 0003 0022             		btst	#3,$22(a0)
00013456 6700                       		beq.s	Sonic_Balance
00013458 7000                       		moveq	#0,d0
0001345A 1028 003D                  		move.b	$3D(a0),d0
0001345E ED48                       		lsl.w	#6,d0
00013460 43F8 D000                  		lea	($FFFFD000).w,a1
00013464 43F1 0000                  		lea	(a1,d0.w),a1
00013468 4A29 0022                  		tst.b	$22(a1)
0001346C 6B00                       		bmi.s	Sonic_LookUp
0001346E 7200                       		moveq	#0,d1
00013470 1229 0019                  		move.b	$19(a1),d1
00013474 3401                       		move.w	d1,d2
00013476 D442                       		add.w	d2,d2
00013478 5942                       		subq.w	#4,d2
0001347A D268 0008                  		add.w	8(a0),d1
0001347E 9269 0008                  		sub.w	8(a1),d1
00013482 0C41 0004                  		cmpi.w	#4,d1
00013486 6D00                       		blt.s	loc_12F6A
00013488 B242                       		cmp.w	d2,d1
0001348A 6C00                       		bge.s	loc_12F5A
0001348C 6000                       		bra.s	Sonic_LookUp
0001348E                            ; ===========================================================================
0001348E                            
0001348E                            Sonic_Balance:
0001348E 4EB9 0000 0000             		jsr	ObjHitFloor
00013494 0C41 000C                  		cmpi.w	#$C,d1
00013498 6D00                       		blt.s	Sonic_LookUp
0001349A 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000134A0 6600                       		bne.s	loc_12F62
000134A2                            
000134A2                            loc_12F5A:
000134A2 08A8 0000 0022             		bclr	#0,$22(a0)
000134A8 6000                       		bra.s	loc_12F70
000134AA                            ; ===========================================================================
000134AA                            
000134AA                            loc_12F62:
000134AA 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000134B0 6600                       		bne.s	Sonic_LookUp
000134B2                            
000134B2                            loc_12F6A:
000134B2 08E8 0000 0022             		bset	#0,$22(a0)
000134B8                            
000134B8                            loc_12F70:
000134B8 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
000134BE 6000                       		bra.s	Obj01_ResetScr
000134C0                            ; ===========================================================================
000134C0                            
000134C0                            Sonic_LookUp:
000134C0 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
000134C6 6700                       		beq.s	Sonic_Duck	; if not, branch
000134C8 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
000134CE 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000134D4 6700                       		beq.s	loc_12FC2
000134D6 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000134DA 6000                       		bra.s	loc_12FC2
000134DC                            ; ===========================================================================
000134DC                            
000134DC                            Sonic_Duck:
000134DC 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000134E2 6700                       		beq.s	Obj01_ResetScr	; if not, branch
000134E4 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000134EA 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000134F0 6700                       		beq.s	loc_12FC2
000134F2 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000134F6 6000                       		bra.s	loc_12FC2
000134F8                            ; ===========================================================================
000134F8                            
000134F8                            Obj01_ResetScr:
000134F8 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000134FE 6700                       		beq.s	loc_12FC2	; if yes, branch
00013500 6400                       		bcc.s	loc_12FBE
00013502 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013506                            
00013506                            loc_12FBE:
00013506 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
0001350A                            
0001350A                            loc_12FC2:
0001350A 1038 F602                  		move.b	($FFFFF602).w,d0
0001350E 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013512 6600                       		bne.s	loc_12FEE	; if yes, branch
00013514 3028 0014                  		move.w	$14(a0),d0
00013518 6700                       		beq.s	loc_12FEE
0001351A 6B00                       		bmi.s	loc_12FE2
0001351C 9045                       		sub.w	d5,d0
0001351E 6400                       		bcc.s	loc_12FDC
00013520 303C 0000                  		move.w	#0,d0
00013524                            
00013524                            loc_12FDC:
00013524 3140 0014                  		move.w	d0,$14(a0)
00013528 6000                       		bra.s	loc_12FEE
0001352A                            ; ===========================================================================
0001352A                            
0001352A                            loc_12FE2:
0001352A D045                       		add.w	d5,d0
0001352C 6400                       		bcc.s	loc_12FEA
0001352E 303C 0000                  		move.w	#0,d0
00013532                            
00013532                            loc_12FEA:
00013532 3140 0014                  		move.w	d0,$14(a0)
00013536                            
00013536                            loc_12FEE:
00013536 1028 0026                  		move.b	$26(a0),d0
0001353A 4EB9 0000 2BE8             		jsr	(CalcSine).l
00013540 C3E8 0014                  		muls.w	$14(a0),d1
00013544 E081                       		asr.l	#8,d1
00013546 3141 0010                  		move.w	d1,$10(a0)
0001354A C1E8 0014                  		muls.w	$14(a0),d0
0001354E E080                       		asr.l	#8,d0
00013550 3140 0012                  		move.w	d0,$12(a0)
00013554                            
00013554                            loc_1300C:
00013554 1028 0026                  		move.b	$26(a0),d0
00013558 0600 0040                  		addi.b	#$40,d0
0001355C 6B00                       		bmi.s	locret_1307C
0001355E 123C 0040                  		move.b	#$40,d1
00013562 4A68 0014                  		tst.w	$14(a0)
00013566 6700                       		beq.s	locret_1307C
00013568 6B00                       		bmi.s	loc_13024
0001356A 4441                       		neg.w	d1
0001356C                            
0001356C                            loc_13024:
0001356C 1028 0026                  		move.b	$26(a0),d0
00013570 D001                       		add.b	d1,d0
00013572 3F00                       		move.w	d0,-(sp)
00013574 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013578 301F                       		move.w	(sp)+,d0
0001357A 4A41                       		tst.w	d1
0001357C 6A00                       		bpl.s	locret_1307C
0001357E E141                       		asl.w	#8,d1
00013580 0600 0020                  		addi.b	#$20,d0
00013584 0200 00C0                  		andi.b	#$C0,d0
00013588 6700                       		beq.s	loc_13078
0001358A 0C00 0040                  		cmpi.b	#$40,d0
0001358E 6700                       		beq.s	loc_13066
00013590 0C00 0080                  		cmpi.b	#$80,d0
00013594 6700                       		beq.s	loc_13060
00013596 D368 0010                  		add.w	d1,$10(a0)
0001359A 08E8 0005 0022             		bset	#5,$22(a0)
000135A0 317C 0000 0014             		move.w	#0,$14(a0)
000135A6 4E75                       		rts	
000135A8                            ; ===========================================================================
000135A8                            
000135A8                            loc_13060:
000135A8 9368 0012                  		sub.w	d1,$12(a0)
000135AC 4E75                       		rts	
000135AE                            ; ===========================================================================
000135AE                            
000135AE                            loc_13066:
000135AE 9368 0010                  		sub.w	d1,$10(a0)
000135B2 08E8 0005 0022             		bset	#5,$22(a0)
000135B8 317C 0000 0014             		move.w	#0,$14(a0)
000135BE 4E75                       		rts	
000135C0                            ; ===========================================================================
000135C0                            
000135C0                            loc_13078:
000135C0 D368 0012                  		add.w	d1,$12(a0)
000135C4                            
000135C4                            locret_1307C:
000135C4 4E75                       		rts	
000135C6                            ; End of function Sonic_Move
000135C6                            
000135C6                            
000135C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000135C6                            
000135C6                            
000135C6                            Sonic_MoveLeft:				; XREF: Sonic_Move
000135C6 3028 0014                  		move.w	$14(a0),d0
000135CA 6700                       		beq.s	loc_13086
000135CC 6A00                       		bpl.s	loc_130B2
000135CE                            
000135CE                            loc_13086:
000135CE 08E8 0000 0022             		bset	#0,$22(a0)
000135D4 6600                       		bne.s	loc_1309A
000135D6 08A8 0005 0022             		bclr	#5,$22(a0)
000135DC 117C 0001 001D             		move.b	#1,$1D(a0)
000135E2                            
000135E2                            loc_1309A:
000135E2 9045                       		sub.w	d5,d0
000135E4 3206                       		move.w	d6,d1
000135E6 4441                       		neg.w	d1
000135E8 B041                       		cmp.w	d1,d0
000135EA 6E00                       		bgt.s	loc_130A6
000135EC 3001                       		move.w	d1,d0
000135EE                            
000135EE                            loc_130A6:
000135EE 3140 0014                  		move.w	d0,$14(a0)
000135F2 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000135F8 4E75                       		rts	
000135FA                            ; ===========================================================================
000135FA                            
000135FA                            loc_130B2:				; XREF: Sonic_MoveLeft
000135FA 9044                       		sub.w	d4,d0
000135FC 6400                       		bcc.s	loc_130BA
000135FE 303C FF80                  		move.w	#-$80,d0
00013602                            
00013602                            loc_130BA:
00013602 3140 0014                  		move.w	d0,$14(a0)
00013606 1028 0026                  		move.b	$26(a0),d0
0001360A 0600 0020                  		addi.b	#$20,d0
0001360E 0200 00C0                  		andi.b	#$C0,d0
00013612 6600                       		bne.s	locret_130E8
00013614 0C40 0400                  		cmpi.w	#$400,d0
00013618 6D00                       		blt.s	locret_130E8
0001361A 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013620 08A8 0000 0022             		bclr	#0,$22(a0)
00013626 303C 00A4                  		move.w	#$A4,d0
0001362A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stopping sound
00013630                            
00013630                            locret_130E8:
00013630 4E75                       		rts	
00013632                            ; End of function Sonic_MoveLeft
00013632                            
00013632                            
00013632                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013632                            
00013632                            
00013632                            Sonic_MoveRight:			; XREF: Sonic_Move
00013632 3028 0014                  		move.w	$14(a0),d0
00013636 6B00                       		bmi.s	loc_13118
00013638 08A8 0000 0022             		bclr	#0,$22(a0)
0001363E 6700                       		beq.s	loc_13104
00013640 08A8 0005 0022             		bclr	#5,$22(a0)
00013646 117C 0001 001D             		move.b	#1,$1D(a0)
0001364C                            
0001364C                            loc_13104:
0001364C D045                       		add.w	d5,d0
0001364E B046                       		cmp.w	d6,d0
00013650 6D00                       		blt.s	loc_1310C
00013652 3006                       		move.w	d6,d0
00013654                            
00013654                            loc_1310C:
00013654 3140 0014                  		move.w	d0,$14(a0)
00013658 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001365E 4E75                       		rts	
00013660                            ; ===========================================================================
00013660                            
00013660                            loc_13118:				; XREF: Sonic_MoveRight
00013660 D044                       		add.w	d4,d0
00013662 6400                       		bcc.s	loc_13120
00013664 303C 0080                  		move.w	#$80,d0
00013668                            
00013668                            loc_13120:
00013668 3140 0014                  		move.w	d0,$14(a0)
0001366C 1028 0026                  		move.b	$26(a0),d0
00013670 0600 0020                  		addi.b	#$20,d0
00013674 0200 00C0                  		andi.b	#$C0,d0
00013678 6600                       		bne.s	locret_1314E
0001367A 0C40 FC00                  		cmpi.w	#-$400,d0
0001367E 6E00                       		bgt.s	locret_1314E
00013680 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013686 08E8 0000 0022             		bset	#0,$22(a0)
0001368C 303C 00A4                  		move.w	#$A4,d0
00013690 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stopping sound
00013696                            
00013696                            locret_1314E:
00013696 4E75                       		rts	
00013698                            ; End of function Sonic_MoveRight
00013698                            
00013698                            ; ---------------------------------------------------------------------------
00013698                            ; Subroutine to	change Sonic's speed as he rolls
00013698                            ; ---------------------------------------------------------------------------
00013698                            
00013698                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013698                            
00013698                            
00013698                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013698 3C38 F760                  		move.w	($FFFFF760).w,d6
0001369C E346                       		asl.w	#1,d6
0001369E 3A38 F762                  		move.w	($FFFFF762).w,d5
000136A2 E245                       		asr.w	#1,d5
000136A4 3838 F764                  		move.w	($FFFFF764).w,d4
000136A8 E444                       		asr.w	#2,d4
000136AA 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000136AE 6600 0000                  		bne.w	loc_131CC
000136B2 4A68 003E                  		tst.w	$3E(a0)
000136B6 6600                       		bne.s	loc_13188
000136B8 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000136BE 6700                       		beq.s	loc_1317C	; if not, branch
000136C0 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000136C6 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
000136C8 6100 0000                  		bsr.w	Sonic_RollLeft
000136CC                            
000136CC                            loc_1317C:
000136CC 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000136D2 6700                       		beq.s	loc_13188	; if not, branch
000136D4 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000136DA 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
000136DC 6100 0000                  		bsr.w	Sonic_RollLeft
000136E0 6000                       		bra.s	loc_13188
000136E2                            
000136E2                            SonicRS_RollRight:
000136E2 6100 0000                  		bsr.w	Sonic_RollRight
000136E6                            
000136E6                            loc_13188:
000136E6 3028 0014                  		move.w	$14(a0),d0
000136EA 6700                       		beq.s	loc_131AA
000136EC 6B00                       		bmi.s	loc_1319E
000136EE 9045                       		sub.w	d5,d0
000136F0 6400                       		bcc.s	loc_13198
000136F2 303C 0000                  		move.w	#0,d0
000136F6                            
000136F6                            loc_13198:
000136F6 3140 0014                  		move.w	d0,$14(a0)
000136FA 6000                       		bra.s	loc_131AA
000136FC                            ; ===========================================================================
000136FC                            
000136FC                            loc_1319E:				; XREF: Sonic_RollSpeed
000136FC D045                       		add.w	d5,d0
000136FE 6400                       		bcc.s	loc_131A6
00013700 303C 0000                  		move.w	#0,d0
00013704                            
00013704                            loc_131A6:
00013704 3140 0014                  		move.w	d0,$14(a0)
00013708                            
00013708                            loc_131AA:
00013708 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
0001370C 6600                       		bne.s	loc_131CC	; if yes, branch
0001370E 08A8 0002 0022             		bclr	#2,$22(a0)
00013714 117C 0013 0016             		move.b	#$13,$16(a0)
0001371A 117C 0009 0017             		move.b	#9,$17(a0)
00013720 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013726 5B68 000C                  		subq.w	#5,$C(a0)
0001372A                            
0001372A                            loc_131CC:
0001372A 1028 0026                  		move.b	$26(a0),d0
0001372E 4EB9 0000 2BE8             		jsr	(CalcSine).l
00013734 C1E8 0014                  		muls.w	$14(a0),d0
00013738 E080                       		asr.l	#8,d0
0001373A 3140 0012                  		move.w	d0,$12(a0)
0001373E C3E8 0014                  		muls.w	$14(a0),d1
00013742 E081                       		asr.l	#8,d1
00013744 0C41 1000                  		cmpi.w	#$1000,d1
00013748 6F00                       		ble.s	loc_131F0
0001374A 323C 1000                  		move.w	#$1000,d1
0001374E                            
0001374E                            loc_131F0:
0001374E 0C41 F000                  		cmpi.w	#-$1000,d1
00013752 6C00                       		bge.s	loc_131FA
00013754 323C F000                  		move.w	#-$1000,d1
00013758                            
00013758                            loc_131FA:
00013758 3141 0010                  		move.w	d1,$10(a0)
0001375C 6000 FDF6                  		bra.w	loc_1300C
00013760                            ; End of function Sonic_RollSpeed
00013760                            
00013760                            
00013760                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013760                            
00013760                            
00013760                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013760 3028 0014                  		move.w	$14(a0),d0
00013764 6700                       		beq.s	loc_1320A
00013766 6A00                       		bpl.s	loc_13218
00013768                            
00013768                            loc_1320A:
00013768 08E8 0000 0022             		bset	#0,$22(a0)
0001376E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013774 4E75                       		rts	
00013776                            ; ===========================================================================
00013776                            
00013776                            loc_13218:
00013776 9044                       		sub.w	d4,d0
00013778 6400                       		bcc.s	loc_13220
0001377A 303C FF80                  		move.w	#-$80,d0
0001377E                            
0001377E                            loc_13220:
0001377E 3140 0014                  		move.w	d0,$14(a0)
00013782 4E75                       		rts	
00013784                            ; End of function Sonic_RollLeft
00013784                            
00013784                            
00013784                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013784                            
00013784                            
00013784                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013784 3028 0014                  		move.w	$14(a0),d0
00013788 6B00                       		bmi.s	loc_1323A
0001378A 08A8 0000 0022             		bclr	#0,$22(a0)
00013790 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013796 4E75                       		rts	
00013798                            ; ===========================================================================
00013798                            
00013798                            loc_1323A:
00013798 D044                       		add.w	d4,d0
0001379A 6400                       		bcc.s	loc_13242
0001379C 303C 0080                  		move.w	#$80,d0
000137A0                            
000137A0                            loc_13242:
000137A0 3140 0014                  		move.w	d0,$14(a0)
000137A4 4E75                       		rts	
000137A6                            ; End of function Sonic_RollRight
000137A6                            
000137A6                            Sonic_AirUnroll:
000137A6                            		
000137A6 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
000137AA 6600                       		bne.s	@timer
000137AC 1038 F605                  		move.b	($FFFFF605).w,d0
000137B0 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
000137B4 6700                       		beq.s	@end	; if not, branch
000137B6 08A8 0002 0022             		bclr	#2,$22(a0)
000137BC 117C 0013 0016             		move.b	#$13,$16(a0)
000137C2 117C 0009 0017             		move.b	#9,$17(a0)
000137C8 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
000137CE 2028 0010                  		move.l	$10(a0),d0
000137D2 D080                       		add.l	d0,d0
000137D4 2140 0010                  		move.l	d0,$10(a0)
000137D8 5B68 000C                  		subq.w	#5,$C(a0)
000137DC                            	@end:
000137DC 4E75                       		rts
000137DE                            	@timer:
000137DE 5328 003A                  		subq.b	#1,$3A(a0)
000137E2 4E75                       		rts
000137E4                            
000137E4                            ; ---------------------------------------------------------------------------
000137E4                            ; Subroutine to	change Sonic's direction while jumping
000137E4                            ; ---------------------------------------------------------------------------
000137E4                            
000137E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137E4                            
000137E4                            
000137E4                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
000137E4 3C38 F760                  		move.w	($FFFFF760).w,d6
000137E8 3A38 F762                  		move.w	($FFFFF762).w,d5
000137EC E345                       		asl.w	#1,d5
000137EE 0828 0004 0022             		btst	#4,$22(a0)
000137F4 6600                       		bne.s	Obj01_ResetScr2
000137F6 3028 0010                  		move.w	$10(a0),d0
000137FA 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013800 6700                       		beq.s	loc_13278	; if not, branch
00013802 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013808 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
0001380A 6100 0000                  		bsr.w	SonicCJD_JumpLeft
0001380E 6E00                       		bgt.s	loc_13278
00013810 3001                       		move.w	d1,d0
00013812                            
00013812                            loc_13278:
00013812 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013818 6700                       		beq.s	Obj01_JumpMove	; if not, branch
0001381A 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013820 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013822 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013826 6E00                       		bgt.s	Obj01_JumpMove
00013828 3001                       		move.w	d1,d0
0001382A 6000                       		bra.s	Obj01_JumpMove
0001382C                            
0001382C                            SonicCJD_JumpLeft:
0001382C 08E8 0000 0022             		bset	#0,$22(a0)
00013832 9045                       		sub.w	d5,d0
00013834 3206                       		move.w	d6,d1
00013836 4441                       		neg.w	d1
00013838 B041                       		cmp.w	d1,d0
0001383A                            		; bgt.s	loc_13278
0001383A                            		; move.w	d1,d0
0001383A 4E75                       		rts
0001383C                            
0001383C                            SonicCJD_JumpRight:
0001383C 08A8 0000 0022             		bclr	#0,$22(a0)
00013842 D045                       		add.w	d5,d0
00013844 B046                       		cmp.w	d6,d0
00013846 6D00                       		blt.s	Obj01_JumpMove
00013848 3006                       		move.w	d6,d0
0001384A                            
0001384A                            Obj01_JumpMove:
0001384A 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
0001384E                            
0001384E                            Obj01_ResetScr2:
0001384E 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013854 6700                       		beq.s	loc_132A4	; if yes, branch
00013856 6400                       		bcc.s	loc_132A0
00013858 5878 F73E                  		addq.w	#4,($FFFFF73E).w
0001385C                            
0001385C                            loc_132A0:
0001385C 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013860                            
00013860                            loc_132A4:
00013860 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013866 6500                       		bcs.s	locret_132D2	; if yes, branch
00013868 3028 0010                  		move.w	$10(a0),d0
0001386C 3200                       		move.w	d0,d1
0001386E EA41                       		asr.w	#5,d1
00013870 6700                       		beq.s	locret_132D2
00013872 6B00                       		bmi.s	loc_132C6
00013874 9041                       		sub.w	d1,d0
00013876 6400                       		bcc.s	loc_132C0
00013878 303C 0000                  		move.w	#0,d0
0001387C                            
0001387C                            loc_132C0:
0001387C 3140 0010                  		move.w	d0,$10(a0)
00013880 4E75                       		rts	
00013882                            ; ===========================================================================
00013882                            
00013882                            loc_132C6:
00013882 9041                       		sub.w	d1,d0
00013884 6500                       		bcs.s	loc_132CE
00013886 303C 0000                  		move.w	#0,d0
0001388A                            
0001388A                            loc_132CE:
0001388A 3140 0010                  		move.w	d0,$10(a0)
0001388E                            
0001388E                            locret_132D2:
0001388E 4E75                       		rts	
00013890                            ; End of function Sonic_ChgJumpDir
00013890                            
00013890                            ; ===========================================================================
00013890                            ; ---------------------------------------------------------------------------
00013890                            ; Unused subroutine to squash Sonic
00013890                            ; ---------------------------------------------------------------------------
00013890 1028 0026                  		move.b	$26(a0),d0
00013894 0600 0020                  		addi.b	#$20,d0
00013898 0200 00C0                  		andi.b	#$C0,d0
0001389C 6600                       		bne.s	locret_13302
0001389E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000138A2 4A41                       		tst.w	d1
000138A4 6A00                       		bpl.s	locret_13302
000138A6 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
000138AC 317C 0000 0010             		move.w	#0,$10(a0)
000138B2 317C 0000 0012             		move.w	#0,$12(a0)
000138B8 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
000138BE                            
000138BE                            locret_13302:
000138BE 4E75                       		rts	
000138C0                            ; ---------------------------------------------------------------------------
000138C0                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
000138C0                            ; ---------------------------------------------------------------------------
000138C0                            
000138C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138C0                            
000138C0                            
000138C0                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
000138C0 2228 0008                  		move.l	8(a0),d1
000138C4 3028 0010                  		move.w	$10(a0),d0
000138C8 48C0                       		ext.l	d0
000138CA E180                       		asl.l	#8,d0
000138CC D280                       		add.l	d0,d1
000138CE 4841                       		swap	d1
000138D0 3038 F728                  		move.w	($FFFFF728).w,d0
000138D4 0640 0010                  		addi.w	#$10,d0
000138D8 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000138DA 6200                       		bhi.s	Boundary_Sides	; if yes, branch
000138DC 3038 F72A                  		move.w	($FFFFF72A).w,d0
000138E0 0640 0128                  		addi.w	#$128,d0
000138E4 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000138E8 6600                       		bne.s	loc_13332
000138EA 0640 0040                  		addi.w	#$40,d0
000138EE                            
000138EE                            loc_13332:
000138EE B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000138F0 6300                       		bls.s	Boundary_Sides	; if yes, branch
000138F2                            
000138F2                            loc_13336:
000138F2 3038 F72E                  		move.w	($FFFFF72E).w,d0
000138F6 0640 00E0                  		addi.w	#$E0,d0
000138FA B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
000138FE 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013900 4E75                       		rts	
00013902                            ; ===========================================================================
00013902                            
00013902                            Boundary_Bottom:
00013902 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013908 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
0001390C 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013912 6500 0000                  		bcs.w	KillSonic
00013916 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0001391A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013920 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013926 4E75                       		rts	
00013928                            ; ===========================================================================
00013928                            
00013928                            Boundary_Sides:
00013928 3140 0008                  		move.w	d0,8(a0)
0001392C 317C 0000 000A             		move.w	#0,$A(a0)
00013932 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013938 317C 0000 0014             		move.w	#0,$14(a0)
0001393E 60B2                       		bra.s	loc_13336
00013940                            ; End of function Sonic_LevelBound
00013940                            
00013940                            ; ---------------------------------------------------------------------------
00013940                            ; Subroutine allowing Sonic to roll when he's moving
00013940                            ; ---------------------------------------------------------------------------
00013940                            
00013940                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013940                            
00013940                            
00013940                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013940 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013944 6600                       		bne.s	Obj01_NoRoll
00013946 3028 0014                  		move.w	$14(a0),d0
0001394A 6A00                       		bpl.s	loc_13392
0001394C 4440                       		neg.w	d0
0001394E                            
0001394E                            loc_13392:
0001394E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013952 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013954 1038 F602                  		move.b	($FFFFF602).w,d0
00013958 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
0001395C 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
0001395E 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013964 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013966                            
00013966                            Obj01_NoRoll:
00013966 4E75                       		rts	
00013968                            ; ===========================================================================
00013968                            
00013968                            Obj01_ChkRoll:
00013968 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
0001396E 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013970 4E75                       		rts	
00013972                            ; ===========================================================================
00013972                            
00013972                            Obj01_DoRoll:
00013972 08E8 0002 0022             		bset	#2,$22(a0)
00013978 117C 000E 0016             		move.b	#$E,$16(a0)
0001397E 117C 0007 0017             		move.b	#7,$17(a0)
00013984 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
0001398A 5A68 000C                  		addq.w	#5,$C(a0)
0001398E 303C 00BE                  		move.w	#$BE,d0
00013992 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rolling sound
00013998 4A68 0014                  		tst.w	$14(a0)
0001399C 6600                       		bne.s	locret_133E8
0001399E 317C 0200 0014             		move.w	#$200,$14(a0)
000139A4                            
000139A4                            locret_133E8:
000139A4 4E75                       		rts	
000139A6                            ; End of function Sonic_Roll
000139A6                            
000139A6                            ; ---------------------------------------------------------------------------
000139A6                            ; Subroutine allowing Sonic to jump
000139A6                            ; ---------------------------------------------------------------------------
000139A6                            
000139A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139A6                            
000139A6                            
000139A6                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000139A6 1038 F603                  		move.b	($FFFFF603).w,d0
000139AA 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000139AE 6700 0000                  		beq.w	locret_1348E	; if not, branch
000139B2 7000                       		moveq	#0,d0
000139B4 1028 0026                  		move.b	$26(a0),d0
000139B8 0600 0080                  		addi.b	#$80,d0
000139BC 6100 0000                  		bsr.w	sub_14D48
000139C0 0C41 0006                  		cmpi.w	#6,d1
000139C4 6D00 0000                  		blt.w	locret_1348E
000139C8 343C 0680                  		move.w	#$680,d2
000139CC 0828 0006 0022             		btst	#6,$22(a0)
000139D2 6700                       		beq.s	loc_1341C
000139D4 343C 0380                  		move.w	#$380,d2
000139D8                            
000139D8                            loc_1341C:
000139D8 7000                       		moveq	#0,d0
000139DA 1028 0026                  		move.b	$26(a0),d0
000139DE 0400 0040                  		subi.b	#$40,d0
000139E2 4EB9 0000 2BE8             		jsr	(CalcSine).l
000139E8 C3C2                       		muls.w	d2,d1
000139EA E081                       		asr.l	#8,d1
000139EC D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
000139F0 C1C2                       		muls.w	d2,d0
000139F2 E080                       		asr.l	#8,d0
000139F4 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
000139F8 08E8 0001 0022             		bset	#1,$22(a0)
000139FE 08A8 0005 0022             		bclr	#5,$22(a0)
00013A04 588F                       		addq.l	#4,sp
00013A06 117C 0001 003C             		move.b	#1,$3C(a0)
00013A0C 4228 0038                  		clr.b	$38(a0)
00013A10 303C 00A0                  		move.w	#$A0,d0
00013A14 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play jumping sound
00013A1A 117C 0013 0016             		move.b	#$13,$16(a0)
00013A20 117C 0009 0017             		move.b	#9,$17(a0)
00013A26 0828 0002 0022             		btst	#2,$22(a0)
00013A2C 6600                       		bne.s	loc_13490
00013A2E 117C 000E 0016             		move.b	#$E,$16(a0)
00013A34 117C 0007 0017             		move.b	#7,$17(a0)
00013A3A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013A40 08E8 0002 0022             		bset	#2,$22(a0)
00013A46 5A68 000C                  		addq.w	#5,$C(a0)
00013A4A 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013A50                            
00013A50                            locret_1348E:
00013A50 4E75                       		rts	
00013A52                            ; ===========================================================================
00013A52                            
00013A52                            loc_13490:
00013A52 08E8 0004 0022             		bset	#4,$22(a0)
00013A58 4E75                       		rts	
00013A5A                            ; End of function Sonic_Jump
00013A5A                            
00013A5A                            
00013A5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A5A                            
00013A5A                            
00013A5A                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013A5A 4A28 003C                  		tst.b	$3C(a0)
00013A5E 6700                       		beq.s	loc_134C4
00013A60 323C FC00                  		move.w	#-$400,d1
00013A64 0828 0006 0022             		btst	#6,$22(a0)
00013A6A 6700                       		beq.s	loc_134AE
00013A6C 323C FE00                  		move.w	#-$200,d1
00013A70                            
00013A70                            loc_134AE:
00013A70 B268 0012                  		cmp.w	$12(a0),d1
00013A74 6F00                       		ble.s	locret_134C2
00013A76 1038 F602                  		move.b	($FFFFF602).w,d0
00013A7A 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013A7E 6600                       		bne.s	locret_134C2	; if yes, branch
00013A80 3141 0012                  		move.w	d1,$12(a0)
00013A84                            
00013A84                            locret_134C2:
00013A84 4E75                       		rts	
00013A86                            ; ===========================================================================
00013A86                            
00013A86                            loc_134C4:
00013A86 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013A8C 6C00                       		bge.s	locret_134D2
00013A8E 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013A94                            
00013A94                            locret_134D2:
00013A94 4E75                       		rts	
00013A96                            ; End of function Sonic_JumpHeight
00013A96                            
00013A96                            ; ---------------------------------------------------------------------------
00013A96                            ; Subroutine to	slow Sonic walking up a	slope
00013A96                            ; ---------------------------------------------------------------------------
00013A96                            
00013A96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A96                            
00013A96                            
00013A96                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013A96 1028 0026                  		move.b	$26(a0),d0
00013A9A 0600 0060                  		addi.b	#$60,d0
00013A9E 0C00 00C0                  		cmpi.b	#$C0,d0
00013AA2 6400                       		bcc.s	locret_13508
00013AA4 1028 0026                  		move.b	$26(a0),d0
00013AA8 4EB9 0000 2BE8             		jsr	(CalcSine).l
00013AAE C1FC 0020                  		muls.w	#$20,d0
00013AB2 E080                       		asr.l	#8,d0
00013AB4 4A68 0014                  		tst.w	$14(a0)
00013AB8 6700                       		beq.s	locret_13508
00013ABA 6B00                       		bmi.s	loc_13504
00013ABC 4A40                       		tst.w	d0
00013ABE 6700                       		beq.s	locret_13502
00013AC0 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013AC4                            
00013AC4                            locret_13502:
00013AC4 4E75                       		rts	
00013AC6                            ; ===========================================================================
00013AC6                            
00013AC6                            loc_13504:
00013AC6 D168 0014                  		add.w	d0,$14(a0)
00013ACA                            
00013ACA                            locret_13508:
00013ACA 4E75                       		rts	
00013ACC                            ; End of function Sonic_SlopeResist
00013ACC                            
00013ACC                            ; ---------------------------------------------------------------------------
00013ACC                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013ACC                            ; ---------------------------------------------------------------------------
00013ACC                            
00013ACC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013ACC                            
00013ACC                            
00013ACC                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013ACC 1028 0026                  		move.b	$26(a0),d0
00013AD0 0600 0060                  		addi.b	#$60,d0
00013AD4 0C00 00C0                  		cmpi.b	#-$40,d0
00013AD8 6400                       		bcc.s	locret_13544
00013ADA 1028 0026                  		move.b	$26(a0),d0
00013ADE 4EB9 0000 2BE8             		jsr	(CalcSine).l
00013AE4 C1FC 0050                  		muls.w	#$50,d0
00013AE8 E080                       		asr.l	#8,d0
00013AEA 4A68 0014                  		tst.w	$14(a0)
00013AEE 6B00                       		bmi.s	loc_1353A
00013AF0 4A40                       		tst.w	d0
00013AF2 6A00                       		bpl.s	loc_13534
00013AF4 E480                       		asr.l	#2,d0
00013AF6                            
00013AF6                            loc_13534:
00013AF6 D168 0014                  		add.w	d0,$14(a0)
00013AFA 4E75                       		rts	
00013AFC                            ; ===========================================================================
00013AFC                            
00013AFC                            loc_1353A:
00013AFC 4A40                       		tst.w	d0
00013AFE 6B00                       		bmi.s	loc_13540
00013B00 E480                       		asr.l	#2,d0
00013B02                            
00013B02                            loc_13540:
00013B02 D168 0014                  		add.w	d0,$14(a0)
00013B06                            
00013B06                            locret_13544:
00013B06 4E75                       		rts	
00013B08                            ; End of function Sonic_RollRepel
00013B08                            
00013B08                            ; ---------------------------------------------------------------------------
00013B08                            ; Subroutine to	push Sonic down	a slope
00013B08                            ; ---------------------------------------------------------------------------
00013B08                            
00013B08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B08                            
00013B08                            
00013B08                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013B08 4E71                       		nop	
00013B0A 4A28 0038                  		tst.b	$38(a0)
00013B0E 6600                       		bne.s	locret_13580
00013B10 4A68 003E                  		tst.w	$3E(a0)
00013B14 6600                       		bne.s	loc_13582
00013B16 1028 0026                  		move.b	$26(a0),d0
00013B1A 0600 0020                  		addi.b	#$20,d0
00013B1E 0200 00C0                  		andi.b	#$C0,d0
00013B22 6700                       		beq.s	locret_13580
00013B24 3028 0014                  		move.w	$14(a0),d0
00013B28 6A00                       		bpl.s	loc_1356A
00013B2A 4440                       		neg.w	d0
00013B2C                            
00013B2C                            loc_1356A:
00013B2C 0C40 0280                  		cmpi.w	#$280,d0
00013B30 6400                       		bcc.s	locret_13580
00013B32 4268 0014                  		clr.w	$14(a0)
00013B36 08E8 0001 0022             		bset	#1,$22(a0)
00013B3C 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013B42                            
00013B42                            locret_13580:
00013B42 4E75                       		rts	
00013B44                            ; ===========================================================================
00013B44                            
00013B44                            loc_13582:
00013B44 5368 003E                  		subq.w	#1,$3E(a0)
00013B48 4E75                       		rts	
00013B4A                            ; End of function Sonic_SlopeRepel
00013B4A                            
00013B4A                            ; ---------------------------------------------------------------------------
00013B4A                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013B4A                            ; ---------------------------------------------------------------------------
00013B4A                            
00013B4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B4A                            
00013B4A                            
00013B4A                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013B4A 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013B4E 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013B50 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013B52                            
00013B52 5400                       		addq.b	#2,d0		; increase angle
00013B54 6400                       		bcc.s	loc_13596
00013B56 7000                       		moveq	#0,d0
00013B58                            
00013B58                            loc_13596:
00013B58 6000                       		bra.s	loc_1359E
00013B5A                            ; ===========================================================================
00013B5A                            
00013B5A                            loc_13598:
00013B5A 5500                       		subq.b	#2,d0		; decrease angle
00013B5C 6400                       		bcc.s	loc_1359E
00013B5E 7000                       		moveq	#0,d0
00013B60                            
00013B60                            loc_1359E:
00013B60 1140 0026                  		move.b	d0,$26(a0)
00013B64                            
00013B64                            locret_135A2:
00013B64 4E75                       		rts	
00013B66                            ; End of function Sonic_JumpAngle
00013B66                            
00013B66                            ; ---------------------------------------------------------------------------
00013B66                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013B66                            ; ---------------------------------------------------------------------------
00013B66                            
00013B66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B66                            
00013B66                            
00013B66                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013B66 3228 0010                  		move.w	$10(a0),d1
00013B6A 3428 0012                  		move.w	$12(a0),d2
00013B6E 4EB9 0000 2EB6             		jsr	(CalcAngle).l
00013B74 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013B78 0400 0020                  		subi.b	#$20,d0
00013B7C 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013B80 0200 00C0                  		andi.b	#$C0,d0
00013B84 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013B88 0C00 0040                  		cmpi.b	#$40,d0
00013B8C 6700 0000                  		beq.w	loc_13680
00013B90 0C00 0080                  		cmpi.b	#$80,d0
00013B94 6700 0000                  		beq.w	loc_136E2
00013B98 0C00 00C0                  		cmpi.b	#-$40,d0
00013B9C 6700 0000                  		beq.w	loc_1373E
00013BA0 6100 0000                  		bsr.w	Sonic_HitWall
00013BA4 4A41                       		tst.w	d1
00013BA6 6A00                       		bpl.s	loc_135F0
00013BA8 9368 0008                  		sub.w	d1,8(a0)
00013BAC 317C 0000 0010             		move.w	#0,$10(a0)
00013BB2                            
00013BB2                            loc_135F0:
00013BB2 6100 0000                  		bsr.w	sub_14EB4
00013BB6 4A41                       		tst.w	d1
00013BB8 6A00                       		bpl.s	loc_13602
00013BBA D368 0008                  		add.w	d1,8(a0)
00013BBE 317C 0000 0010             		move.w	#0,$10(a0)
00013BC4                            
00013BC4                            loc_13602:
00013BC4 6100 0000                  		bsr.w	Sonic_HitFloor
00013BC8 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013BCC 4A41                       		tst.w	d1
00013BCE 6A00                       		bpl.s	locret_1367E
00013BD0 1428 0012                  		move.b	$12(a0),d2
00013BD4 5002                       		addq.b	#8,d2
00013BD6 4402                       		neg.b	d2
00013BD8 B202                       		cmp.b	d2,d1
00013BDA 6C00                       		bge.s	loc_1361E
00013BDC B002                       		cmp.b	d2,d0
00013BDE 6D00                       		blt.s	locret_1367E
00013BE0                            
00013BE0                            loc_1361E:
00013BE0 D368 000C                  		add.w	d1,$C(a0)
00013BE4 1143 0026                  		move.b	d3,$26(a0)
00013BE8 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013BEC 117C 0000 001C             		move.b	#0,$1C(a0)
00013BF2 1003                       		move.b	d3,d0
00013BF4 0600 0020                  		addi.b	#$20,d0
00013BF8 0200 0040                  		andi.b	#$40,d0
00013BFC 6600                       		bne.s	loc_1365C
00013BFE 1003                       		move.b	d3,d0
00013C00 0600 0010                  		addi.b	#$10,d0
00013C04 0200 0020                  		andi.b	#$20,d0
00013C08 6700                       		beq.s	loc_1364E
00013C0A E0E8 0012                  		asr	$12(a0)
00013C0E 6000                       		bra.s	loc_13670
00013C10                            ; ===========================================================================
00013C10                            
00013C10                            loc_1364E:
00013C10 317C 0000 0012             		move.w	#0,$12(a0)
00013C16 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013C1C 4E75                       		rts	
00013C1E                            ; ===========================================================================
00013C1E                            
00013C1E                            loc_1365C:
00013C1E 317C 0000 0010             		move.w	#0,$10(a0)
00013C24 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013C2A 6F00                       		ble.s	loc_13670
00013C2C 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013C32                            
00013C32                            loc_13670:
00013C32 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013C38 4A03                       		tst.b	d3
00013C3A 6A00                       		bpl.s	locret_1367E
00013C3C 4468 0014                  		neg.w	$14(a0)
00013C40                            
00013C40                            locret_1367E:
00013C40 4E75                       		rts	
00013C42                            ; ===========================================================================
00013C42                            
00013C42                            loc_13680:
00013C42 6100 0000                  		bsr.w	Sonic_HitWall
00013C46 4A41                       		tst.w	d1
00013C48 6A00                       		bpl.s	loc_1369A
00013C4A 9368 0008                  		sub.w	d1,8(a0)
00013C4E 317C 0000 0010             		move.w	#0,$10(a0)
00013C54 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013C5A 4E75                       		rts	
00013C5C                            ; ===========================================================================
00013C5C                            
00013C5C                            loc_1369A:
00013C5C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013C60 4A41                       		tst.w	d1
00013C62 6A00                       		bpl.s	loc_136B4
00013C64 9368 000C                  		sub.w	d1,$C(a0)
00013C68 4A68 0012                  		tst.w	$12(a0)
00013C6C 6A00                       		bpl.s	locret_136B2
00013C6E 317C 0000 0012             		move.w	#0,$12(a0)
00013C74                            
00013C74                            locret_136B2:
00013C74 4E75                       		rts	
00013C76                            ; ===========================================================================
00013C76                            
00013C76                            loc_136B4:
00013C76 4A68 0012                  		tst.w	$12(a0)
00013C7A 6B00                       		bmi.s	locret_136E0
00013C7C 6100 0000                  		bsr.w	Sonic_HitFloor
00013C80 4A41                       		tst.w	d1
00013C82 6A00                       		bpl.s	locret_136E0
00013C84 D368 000C                  		add.w	d1,$C(a0)
00013C88 1143 0026                  		move.b	d3,$26(a0)
00013C8C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013C90 117C 0000 001C             		move.b	#0,$1C(a0)
00013C96 317C 0000 0012             		move.w	#0,$12(a0)
00013C9C 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013CA2                            
00013CA2                            locret_136E0:
00013CA2 4E75                       		rts	
00013CA4                            ; ===========================================================================
00013CA4                            
00013CA4                            loc_136E2:
00013CA4 6100 0000                  		bsr.w	Sonic_HitWall
00013CA8 4A41                       		tst.w	d1
00013CAA 6A00                       		bpl.s	loc_136F4
00013CAC 9368 0008                  		sub.w	d1,8(a0)
00013CB0 317C 0000 0010             		move.w	#0,$10(a0)
00013CB6                            
00013CB6                            loc_136F4:
00013CB6 6100 0000                  		bsr.w	sub_14EB4
00013CBA 4A41                       		tst.w	d1
00013CBC 6A00                       		bpl.s	loc_13706
00013CBE D368 0008                  		add.w	d1,8(a0)
00013CC2 317C 0000 0010             		move.w	#0,$10(a0)
00013CC8                            
00013CC8                            loc_13706:
00013CC8 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013CCC 4A41                       		tst.w	d1
00013CCE 6A00                       		bpl.s	locret_1373C
00013CD0 9368 000C                  		sub.w	d1,$C(a0)
00013CD4 1003                       		move.b	d3,d0
00013CD6 0600 0020                  		addi.b	#$20,d0
00013CDA 0200 0040                  		andi.b	#$40,d0
00013CDE 6600                       		bne.s	loc_13726
00013CE0 317C 0000 0012             		move.w	#0,$12(a0)
00013CE6 4E75                       		rts	
00013CE8                            ; ===========================================================================
00013CE8                            
00013CE8                            loc_13726:
00013CE8 1143 0026                  		move.b	d3,$26(a0)
00013CEC 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013CF0 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013CF6 4A03                       		tst.b	d3
00013CF8 6A00                       		bpl.s	locret_1373C
00013CFA 4468 0014                  		neg.w	$14(a0)
00013CFE                            
00013CFE                            locret_1373C:
00013CFE 4E75                       		rts	
00013D00                            ; ===========================================================================
00013D00                            
00013D00                            loc_1373E:
00013D00 6100 0000                  		bsr.w	sub_14EB4
00013D04 4A41                       		tst.w	d1
00013D06 6A00                       		bpl.s	loc_13758
00013D08 D368 0008                  		add.w	d1,8(a0)
00013D0C 317C 0000 0010             		move.w	#0,$10(a0)
00013D12 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013D18 4E75                       		rts	
00013D1A                            ; ===========================================================================
00013D1A                            
00013D1A                            loc_13758:
00013D1A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013D1E 4A41                       		tst.w	d1
00013D20 6A00                       		bpl.s	loc_13772
00013D22 9368 000C                  		sub.w	d1,$C(a0)
00013D26 4A68 0012                  		tst.w	$12(a0)
00013D2A 6A00                       		bpl.s	locret_13770
00013D2C 317C 0000 0012             		move.w	#0,$12(a0)
00013D32                            
00013D32                            locret_13770:
00013D32 4E75                       		rts	
00013D34                            ; ===========================================================================
00013D34                            
00013D34                            loc_13772:
00013D34 4A68 0012                  		tst.w	$12(a0)
00013D38 6B00                       		bmi.s	locret_1379E
00013D3A 6100 0000                  		bsr.w	Sonic_HitFloor
00013D3E 4A41                       		tst.w	d1
00013D40 6A00                       		bpl.s	locret_1379E
00013D42 D368 000C                  		add.w	d1,$C(a0)
00013D46 1143 0026                  		move.b	d3,$26(a0)
00013D4A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013D4E 117C 0000 001C             		move.b	#0,$1C(a0)
00013D54 317C 0000 0012             		move.w	#0,$12(a0)
00013D5A 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013D60                            
00013D60                            locret_1379E:
00013D60 4E75                       		rts	
00013D62                            ; End of function Sonic_Floor
00013D62                            
00013D62                            ; ---------------------------------------------------------------------------
00013D62                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00013D62                            ; ---------------------------------------------------------------------------
00013D62                            
00013D62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D62                            
00013D62                            
00013D62                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00013D62 0828 0004 0022             		btst	#4,$22(a0)
00013D68 6700                       		beq.s	loc_137AE
00013D6A 4E71                       		nop	
00013D6C 4E71                       		nop	
00013D6E 4E71                       		nop	
00013D70                            
00013D70                            loc_137AE:
00013D70 08A8 0005 0022             		bclr	#5,$22(a0)
00013D76 08A8 0001 0022             		bclr	#1,$22(a0)
00013D7C 08A8 0004 0022             		bclr	#4,$22(a0)
00013D82 0828 0002 0022             		btst	#2,$22(a0)
00013D88 6700                       		beq.s	loc_137E4
00013D8A 08A8 0002 0022             		bclr	#2,$22(a0)
00013D90 117C 0013 0016             		move.b	#$13,$16(a0)
00013D96 117C 0009 0017             		move.b	#9,$17(a0)
00013D9C 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00013DA2 5B68 000C                  		subq.w	#5,$C(a0)
00013DA6                            
00013DA6                            loc_137E4:
00013DA6 117C 0000 003C             		move.b	#0,$3C(a0)
00013DAC 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00013DB2 4E75                       		rts	
00013DB4                            ; End of function Sonic_ResetOnFloor
00013DB4                            
00013DB4                            ; ===========================================================================
00013DB4                            ; ---------------------------------------------------------------------------
00013DB4                            ; Sonic	when he	gets hurt
00013DB4                            ; ---------------------------------------------------------------------------
00013DB4                            
00013DB4                            Obj01_Hurt:				; XREF: Obj01_Index
00013DB4 4EBA 9D64                  		jsr	SpeedToPos
00013DB8 0668 0030 0012             		addi.w	#$30,$12(a0)
00013DBE 0828 0006 0022             		btst	#6,$22(a0)
00013DC4 6700                       		beq.s	loc_1380C
00013DC6 0468 0020 0012             		subi.w	#$20,$12(a0)
00013DCC                            
00013DCC                            loc_1380C:
00013DCC 6100 0000                  		bsr.w	Sonic_HurtStop
00013DD0 6100 FAEE                  		bsr.w	Sonic_LevelBound
00013DD4 6100 F4BE                  		bsr.w	Sonic_RecordPos
00013DD8 6100 0000                  		bsr.w	Sonic_Animate
00013DDC 6100 0000                  		bsr.w	LoadSonicDynPLC
00013DE0 4EFA 9D5E                  		jmp	DisplaySprite
00013DE4                            
00013DE4                            ; ---------------------------------------------------------------------------
00013DE4                            ; Subroutine to	stop Sonic falling after he's been hurt
00013DE4                            ; ---------------------------------------------------------------------------
00013DE4                            
00013DE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DE4                            
00013DE4                            
00013DE4                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00013DE4 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013DE8 0640 00E0                  		addi.w	#$E0,d0
00013DEC B068 000C                  		cmp.w	$C(a0),d0
00013DF0 6500 0000                  		bcs.w	KillSonic
00013DF4 6100 FD70                  		bsr.w	Sonic_Floor
00013DF8 0828 0001 0022             		btst	#1,$22(a0)
00013DFE 6600                       		bne.s	locret_13860
00013E00 7000                       		moveq	#0,d0
00013E02 3140 0012                  		move.w	d0,$12(a0)
00013E06 3140 0010                  		move.w	d0,$10(a0)
00013E0A 3140 0014                  		move.w	d0,$14(a0)
00013E0E 117C 0000 001C             		move.b	#0,$1C(a0)
00013E14 5528 0024                  		subq.b	#2,$24(a0)
00013E18 317C 0078 0030             		move.w	#$78,$30(a0)
00013E1E                            
00013E1E                            locret_13860:
00013E1E 4E75                       		rts	
00013E20                            ; End of function Sonic_HurtStop
00013E20                            
00013E20                            ; ===========================================================================
00013E20                            ; ---------------------------------------------------------------------------
00013E20                            ; Sonic	when he	dies
00013E20                            ; ---------------------------------------------------------------------------
00013E20                            
00013E20                            Obj01_Death:				; XREF: Obj01_Index
00013E20 6100 0000                  		bsr.w	GameOver
00013E24 4EBA 9CC8                  		jsr	ObjectFall
00013E28 6100 F46A                  		bsr.w	Sonic_RecordPos
00013E2C 6100 0000                  		bsr.w	Sonic_Animate
00013E30 6100 0000                  		bsr.w	LoadSonicDynPLC
00013E34 4EFA 9D0A                  		jmp	DisplaySprite
00013E38                            
00013E38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E38                            
00013E38                            
00013E38                            GameOver:				; XREF: Obj01_Death
00013E38 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013E3C 0640 0100                  		addi.w	#$100,d0
00013E40 B068 000C                  		cmp.w	$C(a0),d0
00013E44 6400 0000                  		bcc.w	locret_13900
00013E48 317C FFC8 0012             		move.w	#-$38,$12(a0)
00013E4E 5428 0024                  		addq.b	#2,$24(a0)
00013E52 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00013E56 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00013E5A 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00013E5E 6600                       		bne.s	loc_138D4
00013E60 317C 0000 003A             		move.w	#0,$3A(a0)
00013E66 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00013E6C 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013E72 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00013E78 4238 FE1A                  		clr.b	($FFFFFE1A).w
00013E7C                            
00013E7C                            loc_138C2:
00013E7C 303C 008F                  		move.w	#$8F,d0
00013E80 4EB9 0000 15B6             		jsr	(PlaySound).l	; play game over music
00013E86 7003                       		moveq	#3,d0
00013E88 4EF9 0000 17A0             		jmp	(LoadPLC).l	; load game over patterns
00013E8E                            ; ===========================================================================
00013E8E                            
00013E8E                            loc_138D4:
00013E8E 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00013E94 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00013E98 6700                       		beq.s	locret_13900	; if not, branch
00013E9A 317C 0000 003A             		move.w	#0,$3A(a0)
00013EA0 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00013EA6 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013EAC 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00013EB2 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00013EB8 60C2                       		bra.s	loc_138C2
00013EBA                            ; ===========================================================================
00013EBA                            
00013EBA                            locret_13900:
00013EBA 4E75                       		rts	
00013EBC                            ; End of function GameOver
00013EBC                            
00013EBC                            ; ===========================================================================
00013EBC                            ; ---------------------------------------------------------------------------
00013EBC                            ; Sonic	when the level is restarted
00013EBC                            ; ---------------------------------------------------------------------------
00013EBC                            
00013EBC                            Obj01_ResetLevel:			; XREF: Obj01_Index
00013EBC 4A68 003A                  		tst.w	$3A(a0)
00013EC0 6700                       		beq.s	locret_13914
00013EC2 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00013EC6 6600                       		bne.s	locret_13914
00013EC8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013ECE                            
00013ECE                            locret_13914:
00013ECE 4E75                       		rts	
00013ED0                            
00013ED0                            ; ---------------------------------------------------------------------------
00013ED0                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00013ED0                            ; ---------------------------------------------------------------------------
00013ED0                            
00013ED0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013ED0                            
00013ED0                            
00013ED0                            Sonic_Loops:				; XREF: Obj01_Control
00013ED0 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00013ED6 6700                       		beq.s	loc_13926	; if yes, branch
00013ED8 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00013EDC 6600 0000                  		bne.w	locret_139C2	; if not, branch
00013EE0                            
00013EE0                            loc_13926:
00013EE0 3028 000C                  		move.w	$C(a0),d0
00013EE4 E248                       		lsr.w	#1,d0
00013EE6 0240 0380                  		andi.w	#$380,d0
00013EEA 1228 0008                  		move.b	8(a0),d1
00013EEE 0241 007F                  		andi.w	#$7F,d1
00013EF2 D041                       		add.w	d1,d0
00013EF4 43F8 A400                  		lea	($FFFFA400).w,a1
00013EF8 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00013EFC B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00013F00 6700 FA66                  		beq.w	Obj01_ChkRoll
00013F04 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00013F08 6700 FA5E                  		beq.w	Obj01_ChkRoll
00013F0C B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00013F10 6700                       		beq.s	loc_13976
00013F12 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00013F16 6700                       		beq.s	loc_13966
00013F18 08A8 0006 0001             		bclr	#6,1(a0)
00013F1E 4E75                       		rts	
00013F20                            ; ===========================================================================
00013F20                            
00013F20                            loc_13966:
00013F20 0828 0001 0022             		btst	#1,$22(a0)
00013F26 6700                       		beq.s	loc_13976
00013F28 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013F2E 4E75                       		rts	
00013F30                            ; ===========================================================================
00013F30                            
00013F30                            loc_13976:
00013F30 3428 0008                  		move.w	8(a0),d2
00013F34 0C02 002C                  		cmpi.b	#$2C,d2
00013F38 6400                       		bcc.s	loc_13988
00013F3A 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013F40 4E75                       		rts	
00013F42                            ; ===========================================================================
00013F42                            
00013F42                            loc_13988:
00013F42 0C02 00E0                  		cmpi.b	#-$20,d2
00013F46 6500                       		bcs.s	loc_13996
00013F48 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013F4E 4E75                       		rts	
00013F50                            ; ===========================================================================
00013F50                            
00013F50                            loc_13996:
00013F50 0828 0006 0001             		btst	#6,1(a0)
00013F56 6600                       		bne.s	loc_139B2
00013F58 1228 0026                  		move.b	$26(a0),d1
00013F5C 6700                       		beq.s	locret_139C2
00013F5E 0C01 0080                  		cmpi.b	#-$80,d1
00013F62 6200                       		bhi.s	locret_139C2
00013F64 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013F6A 4E75                       		rts	
00013F6C                            ; ===========================================================================
00013F6C                            
00013F6C                            loc_139B2:
00013F6C 1228 0026                  		move.b	$26(a0),d1
00013F70 0C01 0080                  		cmpi.b	#-$80,d1
00013F74 6300                       		bls.s	locret_139C2
00013F76 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013F7C                            
00013F7C                            locret_139C2:
00013F7C 4E75                       		rts	
00013F7E                            ; End of function Sonic_Loops
00013F7E                            
00013F7E                            ; ---------------------------------------------------------------------------
00013F7E                            ; Subroutine to	animate	Sonic's sprites
00013F7E                            ; ---------------------------------------------------------------------------
00013F7E                            
00013F7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F7E                            
00013F7E                            
00013F7E                            Sonic_Animate:				; XREF: Obj01_Control; et al
00013F7E 43F9 0000 0000             		lea	(SonicAniData).l,a1
00013F84 7000                       		moveq	#0,d0
00013F86 1028 001C                  		move.b	$1C(a0),d0
00013F8A B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00013F8E 6700                       		beq.s	SAnim_Do	; if not, branch
00013F90 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00013F94 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00013F9A 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00013FA0                            
00013FA0                            SAnim_Do:
00013FA0 D040                       		add.w	d0,d0
00013FA2 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00013FA6 1011                       		move.b	(a1),d0
00013FA8 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00013FAA 1228 0022                  		move.b	$22(a0),d1
00013FAE 0201 0001                  		andi.b	#1,d1
00013FB2 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013FB8 8328 0001                  		or.b	d1,1(a0)
00013FBC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00013FC0 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00013FC2 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00013FC6                            
00013FC6                            SAnim_Do2:
00013FC6 7200                       		moveq	#0,d1
00013FC8 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00013FCC 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00013FD0 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00013FD2                            
00013FD2                            SAnim_Next:
00013FD2 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00013FD6 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00013FDA                            
00013FDA                            SAnim_Delay:
00013FDA 4E75                       		rts	
00013FDC                            ; ===========================================================================
00013FDC                            
00013FDC                            SAnim_End_FF:
00013FDC 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00013FDE 6600                       		bne.s	SAnim_End_FE	; if not, branch
00013FE0 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00013FE6 1029 0001                  		move.b	1(a1),d0	; read sprite number
00013FEA 60E6                       		bra.s	SAnim_Next
00013FEC                            ; ===========================================================================
00013FEC                            
00013FEC                            SAnim_End_FE:
00013FEC 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00013FEE 6600                       		bne.s	SAnim_End_FD	; if not, branch
00013FF0 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00013FF4 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00013FF8 9200                       		sub.b	d0,d1
00013FFA 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00013FFE 60D2                       		bra.s	SAnim_Next
00014000                            ; ===========================================================================
00014000                            
00014000                            SAnim_End_FD:
00014000 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00014002 6600                       		bne.s	SAnim_End	; if not, branch
00014004 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0001400A                            
0001400A                            SAnim_End:
0001400A 4E75                       		rts	
0001400C                            ; ===========================================================================
0001400C                            
0001400C                            SAnim_WalkRun:				; XREF: SAnim_Do
0001400C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014010 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00014012 5200                       		addq.b	#1,d0		; is animation walking/running?
00014014 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00014018 7200                       		moveq	#0,d1
0001401A 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001401E 1428 0022                  		move.b	$22(a0),d2
00014022 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00014026 6600                       		bne.s	loc_13A70	; if yes, branch
00014028 4600                       		not.b	d0		; reverse angle
0001402A                            
0001402A                            loc_13A70:
0001402A 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
0001402E 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00014030 7203                       		moveq	#3,d1
00014032                            
00014032                            loc_13A78:
00014032 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014038 B302                       		eor.b	d1,d2
0001403A 8528 0001                  		or.b	d2,1(a0)
0001403E 0828 0005 0022             		btst	#5,$22(a0)
00014044 6600 0000                  		bne.w	SAnim_Push
00014048 E808                       		lsr.b	#4,d0		; divide angle by $10
0001404A 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
0001404E 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014052 6A00                       		bpl.s	loc_13A9C
00014054 4442                       		neg.w	d2
00014056                            
00014056                            loc_13A9C:
00014056 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
0001405C 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00014060 6400                       		bcc.s	loc_13AB4	; if yes, branch
00014062 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00014068 1200                       		move.b	d0,d1
0001406A E209                       		lsr.b	#1,d1
0001406C D001                       		add.b	d1,d0
0001406E                            
0001406E                            loc_13AB4:
0001406E D000                       		add.b	d0,d0
00014070 1600                       		move.b	d0,d3
00014072 4442                       		neg.w	d2
00014074 0642 0800                  		addi.w	#$800,d2
00014078 6A00                       		bpl.s	loc_13AC2
0001407A 7400                       		moveq	#0,d2
0001407C                            
0001407C                            loc_13AC2:
0001407C E04A                       		lsr.w	#8,d2
0001407E 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014082 6100 FF42                  		bsr.w	SAnim_Do2
00014086 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
0001408A 4E75                       		rts	
0001408C                            ; ===========================================================================
0001408C                            
0001408C                            SAnim_RollJump:				; XREF: SAnim_WalkRun
0001408C 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
0001408E 6600                       		bne.s	SAnim_Push	; if not, branch
00014090 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014094 6A00                       		bpl.s	loc_13ADE
00014096 4442                       		neg.w	d2
00014098                            
00014098                            loc_13ADE:
00014098 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
0001409E 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000140A2 6400                       		bcc.s	loc_13AF0	; if yes, branch
000140A4 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000140AA                            
000140AA                            loc_13AF0:
000140AA 4442                       		neg.w	d2
000140AC 0642 0400                  		addi.w	#$400,d2
000140B0 6A00                       		bpl.s	loc_13AFA
000140B2 7400                       		moveq	#0,d2
000140B4                            
000140B4                            loc_13AFA:
000140B4 E04A                       		lsr.w	#8,d2
000140B6 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000140BA 1228 0022                  		move.b	$22(a0),d1
000140BE 0201 0001                  		andi.b	#1,d1
000140C2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000140C8 8328 0001                  		or.b	d1,1(a0)
000140CC 6000 FEF8                  		bra.w	SAnim_Do2
000140D0                            ; ===========================================================================
000140D0                            
000140D0                            SAnim_Push:				; XREF: SAnim_RollJump
000140D0 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000140D4 6B00                       		bmi.s	loc_13B1E
000140D6 4442                       		neg.w	d2
000140D8                            
000140D8                            loc_13B1E:
000140D8 0642 0800                  		addi.w	#$800,d2
000140DC 6A00                       		bpl.s	loc_13B26
000140DE 7400                       		moveq	#0,d2
000140E0                            
000140E0                            loc_13B26:
000140E0 EC4A                       		lsr.w	#6,d2
000140E2 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000140E6 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000140EC 1228 0022                  		move.b	$22(a0),d1
000140F0 0201 0001                  		andi.b	#1,d1
000140F4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000140FA 8328 0001                  		or.b	d1,1(a0)
000140FE 6000 FEC6                  		bra.w	SAnim_Do2
00014102                            ; End of function Sonic_Animate
00014102                            
00014102                            ; ===========================================================================
00014102                            SonicAniData:
00014102                            	include "_anim\Sonic.asm"
00014102                            ; ---------------------------------------------------------------------------
00014102                            ; Animation script - Sonic
00014102                            ; ---------------------------------------------------------------------------
00014102 0000                       		dc.w SonAni_Walk-SonicAniData
00014104 0000                       		dc.w SonAni_Run-SonicAniData
00014106 0000                       		dc.w SonAni_Roll-SonicAniData
00014108 0000                       		dc.w SonAni_Roll2-SonicAniData
0001410A 0000                       		dc.w SonAni_Push-SonicAniData
0001410C 0000                       		dc.w SonAni_Wait-SonicAniData
0001410E 0000                       		dc.w SonAni_Balance-SonicAniData
00014110 0000                       		dc.w SonAni_LookUp-SonicAniData
00014112 0000                       		dc.w SonAni_Duck-SonicAniData
00014114 0000                       		dc.w SonAni_Warp1-SonicAniData
00014116 0000                       		dc.w SonAni_Warp2-SonicAniData
00014118 0000                       		dc.w SonAni_Warp3-SonicAniData
0001411A 0000                       		dc.w SonAni_Warp4-SonicAniData
0001411C 0000                       		dc.w SonAni_Stop-SonicAniData
0001411E 0000                       		dc.w SonAni_Float1-SonicAniData
00014120 0000                       		dc.w SonAni_Float2-SonicAniData
00014122 0000                       		dc.w SonAni_Spring-SonicAniData
00014124 0000                       		dc.w SonAni_LZHang-SonicAniData
00014126 0000                       		dc.w SonAni_Leap1-SonicAniData
00014128 0000                       		dc.w SonAni_Leap2-SonicAniData
0001412A 0000                       		dc.w SonAni_Surf-SonicAniData
0001412C 0000                       		dc.w SonAni_Bubble-SonicAniData
0001412E 0000                       		dc.w SonAni_Death1-SonicAniData
00014130 0000                       		dc.w SonAni_Drown-SonicAniData
00014132 0000                       		dc.w SonAni_Death2-SonicAniData
00014134 0000                       		dc.w SonAni_Shrink-SonicAniData
00014136 0000                       		dc.w SonAni_Hurt-SonicAniData
00014138 0000                       		dc.w SonAni_LZSlide-SonicAniData
0001413A 0000                       		dc.w SonAni_Blank-SonicAniData
0001413C 0000                       		dc.w SonAni_Float3-SonicAniData
0001413E 0000                       		dc.w SonAni_Float4-SonicAniData
00014140 FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
0001414A FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00014152 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
0001415A FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00014162 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
0001416A 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00014180 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
00014184 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00014188 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
0001418C 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00014190 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00014194 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00014198 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
0001419C 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
000141A0 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
000141A4 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
000141AC 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
000141B0 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
000141B4 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
000141BA 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
000141C0 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
000141C4 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
000141CC 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
000141D0 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
000141D4 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
000141D8 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
000141E2 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
000141E6 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
000141EA 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
000141EE 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
000141F6 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
000141FA                            		even
000141FA                            		even
000141FA                            
000141FA                            ; ---------------------------------------------------------------------------
000141FA                            ; Sonic	pattern	loading	subroutine
000141FA                            ; ---------------------------------------------------------------------------
000141FA                            
000141FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000141FA                            
000141FA                            
000141FA                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
000141FA 7000                       		moveq	#0,d0
000141FC 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00014200 B038 F766                  		cmp.b	($FFFFF766).w,d0
00014204 6700                       		beq.s	locret_13C96
00014206 11C0 F766                  		move.b	d0,($FFFFF766).w
0001420A 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00014210 D040                       		add.w	d0,d0
00014212 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014216 7200                       		moveq	#0,d1
00014218 121A                       		move.b	(a2)+,d1	; read "number of entries" value
0001421A 5301                       		subq.b	#1,d1
0001421C 6B00                       		bmi.s	locret_13C96
0001421E 47F8 C800                  		lea	($FFFFC800).w,a3
00014222 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00014228                            
00014228                            SPLC_ReadEntry:
00014228 7400                       		moveq	#0,d2
0001422A 141A                       		move.b	(a2)+,d2
0001422C 3002                       		move.w	d2,d0
0001422E E808                       		lsr.b	#4,d0
00014230 E14A                       		lsl.w	#8,d2
00014232 141A                       		move.b	(a2)+,d2
00014234 EB4A                       		lsl.w	#5,d2
00014236 43F9 0000 0000             		lea	(Art_Sonic).l,a1
0001423C D3C2                       		adda.l	d2,a1
0001423E                            
0001423E                            SPLC_LoadTile:
0001423E 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00014242 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
00014246 47EB 0020                  		lea	$20(a3),a3	; next tile
0001424A 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
0001424E                            
0001424E 51C9 FFD8                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00014252                            
00014252                            locret_13C96:
00014252 4E75                       		rts	
00014254                            ; End of function LoadSonicDynPLC
00014254                            
00014254                            ; ===========================================================================
00014254                            ; ---------------------------------------------------------------------------
00014254                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00014254                            ; ---------------------------------------------------------------------------
00014254                            
00014254                            Obj0A:					; XREF: Obj_Index
00014254 7000                       		moveq	#0,d0
00014256 1028 0024                  		move.b	$24(a0),d0
0001425A 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
0001425E 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00014262                            ; ===========================================================================
00014262 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00014266 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
0001426A 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
0001426E 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00014272 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00014274                            ; ===========================================================================
00014274                            
00014274                            Obj0A_Main:				; XREF: Obj0A_Index
00014274 5428 0024                  		addq.b	#2,$24(a0)
00014278 217C 0001 2ED2 0004        		move.l	#Map_obj64,4(a0)
00014280 317C 8348 0002             		move.w	#$8348,2(a0)
00014286 117C 0084 0001             		move.b	#$84,1(a0)
0001428C 117C 0010 0019             		move.b	#$10,$19(a0)
00014292 117C 0001 0018             		move.b	#1,$18(a0)
00014298 1028 0028                  		move.b	$28(a0),d0
0001429C 6A00                       		bpl.s	loc_13D00
0001429E 5028 0024                  		addq.b	#8,$24(a0)
000142A2 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
000142AA 317C 0440 0002             		move.w	#$440,2(a0)
000142B0 0240 007F                  		andi.w	#$7F,d0
000142B4 1140 0033                  		move.b	d0,$33(a0)
000142B8 6000 0000                  		bra.w	Obj0A_Countdown
000142BC                            ; ===========================================================================
000142BC                            
000142BC                            loc_13D00:
000142BC 1140 001C                  		move.b	d0,$1C(a0)
000142C0 3168 0008 0030             		move.w	8(a0),$30(a0)
000142C6 317C FF78 0012             		move.w	#-$88,$12(a0)
000142CC                            
000142CC                            Obj0A_Animate:				; XREF: Obj0A_Index
000142CC 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000142D2 4EB9 0000 AC10             		jsr	AnimateSprite
000142D8                            
000142D8                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000142D8 3038 F646                  		move.w	($FFFFF646).w,d0
000142DC B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000142E0 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000142E2 117C 0006 0024             		move.b	#6,$24(a0)
000142E8 5E28 001C                  		addq.b	#7,$1C(a0)
000142EC 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
000142F2 6700                       		beq.s	Obj0A_Display
000142F4 6000                       		bra.s	Obj0A_Display
000142F6                            ; ===========================================================================
000142F6                            
000142F6                            Obj0A_Wobble:
000142F6 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000142FA 6700                       		beq.s	loc_13D44
000142FC 5868 0030                  		addq.w	#4,$30(a0)
00014300                            
00014300                            loc_13D44:
00014300 1028 0026                  		move.b	$26(a0),d0
00014304 5228 0026                  		addq.b	#1,$26(a0)
00014308 0240 007F                  		andi.w	#$7F,d0
0001430C 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014312 1031 0000                  		move.b	(a1,d0.w),d0
00014316 4880                       		ext.w	d0
00014318 D068 0030                  		add.w	$30(a0),d0
0001431C 3140 0008                  		move.w	d0,8(a0)
00014320 6100                       		bsr.s	Obj0A_ShowNumber
00014322 4EBA 97F6                  		jsr	SpeedToPos
00014326 4A28 0001                  		tst.b	1(a0)
0001432A 6A00                       		bpl.s	Obj0A_Delete
0001432C 4EFA 9812                  		jmp	DisplaySprite
00014330                            ; ===========================================================================
00014330                            
00014330                            Obj0A_Delete:
00014330 4EFA 984A                  		jmp	DeleteObject
00014334                            ; ===========================================================================
00014334                            
00014334                            Obj0A_Display:				; XREF: Obj0A_Index
00014334 6100                       		bsr.s	Obj0A_ShowNumber
00014336 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001433C 4EB9 0000 AC10             		jsr	AnimateSprite
00014342 4EFA 97FC                  		jmp	DisplaySprite
00014346                            ; ===========================================================================
00014346                            
00014346                            Obj0A_Delete2:				; XREF: Obj0A_Index
00014346 4EFA 9834                  		jmp	DeleteObject
0001434A                            ; ===========================================================================
0001434A                            
0001434A                            Obj0A_AirLeft:				; XREF: Obj0A_Index
0001434A 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00014350 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00014352 5368 0038                  		subq.w	#1,$38(a0)
00014356 6600                       		bne.s	Obj0A_Display2
00014358 117C 000E 0024             		move.b	#$E,$24(a0)
0001435E 5E28 001C                  		addq.b	#7,$1C(a0)
00014362 60D0                       		bra.s	Obj0A_Display
00014364                            ; ===========================================================================
00014364                            
00014364                            Obj0A_Display2:
00014364 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001436A 4EB9 0000 AC10             		jsr	AnimateSprite
00014370 4A28 0001                  		tst.b	1(a0)
00014374 6A00                       		bpl.s	Obj0A_Delete3
00014376 4EFA 97C8                  		jmp	DisplaySprite
0001437A                            ; ===========================================================================
0001437A                            
0001437A                            Obj0A_Delete3:
0001437A 4EFA 9800                  		jmp	DeleteObject
0001437E                            ; ===========================================================================
0001437E                            
0001437E                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
0001437E 4A68 0038                  		tst.w	$38(a0)
00014382 6700                       		beq.s	locret_13E1A
00014384 5368 0038                  		subq.w	#1,$38(a0)
00014388 6600                       		bne.s	locret_13E1A
0001438A 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00014390 6400                       		bcc.s	locret_13E1A
00014392 317C 000F 0038             		move.w	#$F,$38(a0)
00014398 4268 0012                  		clr.w	$12(a0)
0001439C 117C 0080 0001             		move.b	#$80,1(a0)
000143A2 3028 0008                  		move.w	8(a0),d0
000143A6 9078 F700                  		sub.w	($FFFFF700).w,d0
000143AA 0640 0080                  		addi.w	#$80,d0
000143AE 3140 0008                  		move.w	d0,8(a0)
000143B2 3028 000C                  		move.w	$C(a0),d0
000143B6 9078 F704                  		sub.w	($FFFFF704).w,d0
000143BA 0640 0080                  		addi.w	#$80,d0
000143BE 3140 000A                  		move.w	d0,$A(a0)
000143C2 117C 000C 0024             		move.b	#$C,$24(a0)
000143C8                            
000143C8                            locret_13E1A:
000143C8 4E75                       		rts	
000143CA                            ; ===========================================================================
000143CA                            Obj0A_WobbleData:
000143CA 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000143DB 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
000143EC 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
000143FD 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
0001440D FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001441A FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014427 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014434 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00014441 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
0001444A                            ; ===========================================================================
0001444A                            
0001444A                            Obj0A_Countdown:			; XREF: Obj0A_Index
0001444A 4A68 002C                  		tst.w	$2C(a0)
0001444E 6600 0000                  		bne.w	loc_13F86
00014452 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00014458 6400 0000                  		bcc.w	locret_1408C
0001445C 0838 0006 D022             		btst	#6,($FFFFD022).w
00014462 6700 0000                  		beq.w	locret_1408C
00014466 5368 0038                  		subq.w	#1,$38(a0)
0001446A 6A00 0000                  		bpl.w	loc_13FAC
0001446E 317C 003B 0038             		move.w	#59,$38(a0)
00014474 317C 0001 0036             		move.w	#1,$36(a0)
0001447A 4EB9 0000 2BC2             		jsr	(RandomNumber).l
00014480 0240 0001                  		andi.w	#1,d0
00014484 1140 0034                  		move.b	d0,$34(a0)
00014488 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
0001448C 0C40 0019                  		cmpi.w	#$19,d0
00014490 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00014492 0C40 0014                  		cmpi.w	#$14,d0
00014496 6700                       		beq.s	Obj0A_WarnSound
00014498 0C40 000F                  		cmpi.w	#$F,d0
0001449C 6700                       		beq.s	Obj0A_WarnSound
0001449E 0C40 000C                  		cmpi.w	#$C,d0
000144A2 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
000144A4 6600                       		bne.s	loc_13F02
000144A6 303C 0092                  		move.w	#$92,d0
000144AA 4EB9 0000 15B6             		jsr	(PlaySound).l	; play countdown music
000144B0                            
000144B0                            loc_13F02:
000144B0 5328 0032                  		subq.b	#1,$32(a0)
000144B4 6A00                       		bpl.s	Obj0A_ReduceAir
000144B6 1168 0033 0032             		move.b	$33(a0),$32(a0)
000144BC 08E8 0007 0036             		bset	#7,$36(a0)
000144C2 6000                       		bra.s	Obj0A_ReduceAir
000144C4                            ; ===========================================================================
000144C4                            
000144C4                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000144C4 303C 00C2                  		move.w	#$C2,d0
000144C8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000144CE                            
000144CE                            Obj0A_ReduceAir:
000144CE 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000144D2 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000144D6 6100 0000                  		bsr.w	ResumeMusic
000144DA 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000144E0 303C 00B2                  		move.w	#$B2,d0
000144E4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play drowning sound
000144EA 117C 000A 0034             		move.b	#$A,$34(a0)
000144F0 317C 0001 0036             		move.w	#1,$36(a0)
000144F6 317C 0078 002C             		move.w	#$78,$2C(a0)
000144FC 2F08                       		move.l	a0,-(sp)
000144FE 41F8 D000                  		lea	($FFFFD000).w,a0
00014502 6100 F85E                  		bsr.w	Sonic_ResetOnFloor
00014506 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
0001450C 08E8 0001 0022             		bset	#1,$22(a0)
00014512 08E8 0007 0002             		bset	#7,2(a0)
00014518 317C 0000 0012             		move.w	#0,$12(a0)
0001451E 317C 0000 0010             		move.w	#0,$10(a0)
00014524 317C 0000 0014             		move.w	#0,$14(a0)
0001452A 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014530 205F                       		movea.l	(sp)+,a0
00014532 4E75                       		rts	
00014534                            ; ===========================================================================
00014534                            
00014534                            loc_13F86:
00014534 5368 002C                  		subq.w	#1,$2C(a0)
00014538 6600                       		bne.s	loc_13F94
0001453A 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014540 4E75                       		rts	
00014542                            ; ===========================================================================
00014542                            
00014542                            loc_13F94:
00014542 2F08                       		move.l	a0,-(sp)
00014544 41F8 D000                  		lea	($FFFFD000).w,a0
00014548 4EBA 95D0                  		jsr	SpeedToPos
0001454C 0668 0010 0012             		addi.w	#$10,$12(a0)
00014552 205F                       		movea.l	(sp)+,a0
00014554 6000                       		bra.s	loc_13FAC
00014556                            ; ===========================================================================
00014556                            
00014556                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014556 6000                       		bra.s	Obj0A_MakeItem
00014558                            ; ===========================================================================
00014558                            
00014558                            loc_13FAC:
00014558 4A68 0036                  		tst.w	$36(a0)
0001455C 6700 0000                  		beq.w	locret_1408C
00014560 5368 003A                  		subq.w	#1,$3A(a0)
00014564 6A00 0000                  		bpl.w	locret_1408C
00014568                            
00014568                            Obj0A_MakeItem:
00014568 4EB9 0000 2BC2             		jsr	(RandomNumber).l
0001456E 0240 000F                  		andi.w	#$F,d0
00014572 3140 003A                  		move.w	d0,$3A(a0)
00014576 4EBA 9A4E                  		jsr	SingleObjLoad
0001457A 6600 0000                  		bne.w	locret_1408C
0001457E 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014582 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014588 7006                       		moveq	#6,d0
0001458A 0838 0000 D022             		btst	#0,($FFFFD022).w
00014590 6700                       		beq.s	loc_13FF2
00014592 4440                       		neg.w	d0
00014594 137C 0040 0026             		move.b	#$40,$26(a1)
0001459A                            
0001459A                            loc_13FF2:
0001459A D169 0008                  		add.w	d0,8(a1)
0001459E 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
000145A4 137C 0006 0028             		move.b	#6,$28(a1)
000145AA 4A68 002C                  		tst.w	$2C(a0)
000145AE 6700 0000                  		beq.w	loc_1403E
000145B2 0268 0007 003A             		andi.w	#7,$3A(a0)
000145B8 0668 0000 003A             		addi.w	#0,$3A(a0)
000145BE 3038 D00C                  		move.w	($FFFFD00C).w,d0
000145C2 0440 000C                  		subi.w	#$C,d0
000145C6 3340 000C                  		move.w	d0,$C(a1)
000145CA 4EB9 0000 2BC2             		jsr	(RandomNumber).l
000145D0 1340 0026                  		move.b	d0,$26(a1)
000145D4 3038 FE04                  		move.w	($FFFFFE04).w,d0
000145D8 0200 0003                  		andi.b	#3,d0
000145DC 6600                       		bne.s	loc_14082
000145DE 137C 000E 0028             		move.b	#$E,$28(a1)
000145E4 6000                       		bra.s	loc_14082
000145E6                            ; ===========================================================================
000145E6                            
000145E6                            loc_1403E:
000145E6 0828 0007 0036             		btst	#7,$36(a0)
000145EC 6700                       		beq.s	loc_14082
000145EE 3438 FE14                  		move.w	($FFFFFE14).w,d2
000145F2 E24A                       		lsr.w	#1,d2
000145F4 4EB9 0000 2BC2             		jsr	(RandomNumber).l
000145FA 0240 0003                  		andi.w	#3,d0
000145FE 6600                       		bne.s	loc_1406A
00014600 08E8 0006 0036             		bset	#6,$36(a0)
00014606 6600                       		bne.s	loc_14082
00014608 1342 0028                  		move.b	d2,$28(a1)
0001460C 337C 001C 0038             		move.w	#$1C,$38(a1)
00014612                            
00014612                            loc_1406A:
00014612 4A28 0034                  		tst.b	$34(a0)
00014616 6600                       		bne.s	loc_14082
00014618 08E8 0006 0036             		bset	#6,$36(a0)
0001461E 6600                       		bne.s	loc_14082
00014620 1342 0028                  		move.b	d2,$28(a1)
00014624 337C 001C 0038             		move.w	#$1C,$38(a1)
0001462A                            
0001462A                            loc_14082:
0001462A 5328 0034                  		subq.b	#1,$34(a0)
0001462E 6A00                       		bpl.s	locret_1408C
00014630 4268 0036                  		clr.w	$36(a0)
00014634                            
00014634                            locret_1408C:
00014634 4E75                       		rts	
00014636                            
00014636                            ; ---------------------------------------------------------------------------
00014636                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00014636                            ; ---------------------------------------------------------------------------
00014636                            
00014636                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014636                            
00014636                            
00014636                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00014636 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001463C                             
0001463C                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
0001463C                             
0001463C 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014640                             
00014640 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00014646 6600                       		bne.s	Air_GetBgm2	; if not, branch
00014648 43F9 0000 3A72             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0001464E 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014650                             
00014650                            Air_GetBgm2:
00014650 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00014656 6600                       		bne.s	Air_GetBgm3	; if not, branch
00014658 43F9 0000 3A7A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0001465E 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014660                             
00014660                            Air_GetBgm3:
00014660 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00014666 6600                       		bne.s	Air_GetBgm4	; if not, branch
00014668 43F9 0000 3A80             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
0001466E 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014670                             
00014670                            Air_GetBgm4:
00014670 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00014676 6600                       		bne.s	Air_PlayMusic	; if not, branch
00014678 43F9 0000 3A86             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0001467E                             
0001467E                            Air_PlayMusic:
0001467E 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00014682                             
00014682                            loc_140A6:
00014682 4EB9 0000 15B6             		jsr	(PlaySound).l
00014688                             
00014688                            ; NineKode ends here
00014688                            
00014688                            loc_140AC:
00014688 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0001468E 4238 D372                  		clr.b	($FFFFD372).w
00014692 4E75                       		rts	
00014694                            ; End of function ResumeMusic
00014694                            
00014694                            ; ===========================================================================
00014694                            Ani_obj0A:
00014694                            	include "_anim\obj0A.asm"
00014694                            ; ---------------------------------------------------------------------------
00014694                            ; Animation script - countdown numbers and bubbles (LZ)
00014694                            ; ---------------------------------------------------------------------------
00014694 0000                       		dc.w byte_140D6-Ani_obj0A
00014696 0000                       		dc.w byte_140E0-Ani_obj0A
00014698 0000                       		dc.w byte_140EA-Ani_obj0A
0001469A 0000                       		dc.w byte_140F4-Ani_obj0A
0001469C 0000                       		dc.w byte_140FE-Ani_obj0A
0001469E 0000                       		dc.w byte_14108-Ani_obj0A
000146A0 0000                       		dc.w byte_14112-Ani_obj0A
000146A2 0000                       		dc.w byte_14118-Ani_obj0A
000146A4 0000                       		dc.w byte_14120-Ani_obj0A
000146A6 0000                       		dc.w byte_14128-Ani_obj0A
000146A8 0000                       		dc.w byte_14130-Ani_obj0A
000146AA 0000                       		dc.w byte_14138-Ani_obj0A
000146AC 0000                       		dc.w byte_14140-Ani_obj0A
000146AE 0000                       		dc.w byte_14148-Ani_obj0A
000146B0 0000                       		dc.w byte_1414A-Ani_obj0A
000146B2 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
000146BC 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
000146C6 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
000146D0 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
000146DA 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
000146E4 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
000146EE 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
000146F4 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
000146FC 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014704 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
0001470C 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014714 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
0001471C 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014724 0EFC                       byte_14148:	dc.b $E, $FC
00014726 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
0001472C                            		even
0001472C                            		even
0001472C                            
0001472C                            ; ---------------------------------------------------------------------------
0001472C                            ; Sprite mappings - drowning countdown numbers (LZ)
0001472C                            ; ---------------------------------------------------------------------------
0001472C                            Map_obj0A:
0001472C                            	include "_maps\obj0A.asm"
0001472C                            ; ---------------------------------------------------------------------------
0001472C                            ; Sprite mappings - drowning countdown numbers (LZ)
0001472C                            ; ---------------------------------------------------------------------------
0001472C 0000                       		dc.w byte_14152-Map_obj0A
0001472E 01                         byte_14152:	dc.b 1
0001472F E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014734                            		even
00014734                            		even
00014734                            
00014734                            ; ===========================================================================
00014734                            ; ---------------------------------------------------------------------------
00014734                            ; Object 38 - shield and invincibility stars
00014734                            ; ---------------------------------------------------------------------------
00014734                            
00014734                            Obj38:					; XREF: Obj_Index
00014734 7000                       		moveq	#0,d0
00014736 1028 0024                  		move.b	$24(a0),d0
0001473A 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
0001473E 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014742                            ; ===========================================================================
00014742 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014744 0000                       		dc.w Obj38_Shield-Obj38_Index
00014746 0000                       		dc.w Obj38_Stars-Obj38_Index
00014748                            ; ===========================================================================
00014748                            
00014748                            Obj38_Main:				; XREF: Obj38_Index
00014748 5428 0024                  		addq.b	#2,$24(a0)
0001474C 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014754 117C 0004 0001             		move.b	#4,1(a0)
0001475A 117C 0001 0018             		move.b	#1,$18(a0)
00014760 117C 0010 0019             		move.b	#$10,$19(a0)
00014766 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
0001476A 6600                       		bne.s	Obj38_DoStars	; if not, branch
0001476C 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014772 4E75                       		rts	
00014774                            ; ===========================================================================
00014774                            
00014774                            Obj38_DoStars:
00014774 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014778 317C 055C 0002             		move.w	#$55C,2(a0)
0001477E 4E75                       		rts	
00014780                            ; ===========================================================================
00014780                            
00014780                            Obj38_Shield:				; XREF: Obj38_Index
00014780 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014784 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014786 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
0001478A 6700                       		beq.s	Obj38_Delete	; if not, branch
0001478C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014792 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014798 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001479E 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000147A4 4EB9 0000 AC10             		jsr	AnimateSprite
000147AA 4EFA 9394                  		jmp	DisplaySprite
000147AE                            ; ===========================================================================
000147AE                            
000147AE                            Obj38_RmvShield:
000147AE 4E75                       		rts	
000147B0                            ; ===========================================================================
000147B0                            
000147B0                            Obj38_Delete:
000147B0 4EFA 93CA                  		jmp	DeleteObject
000147B4                            ; ===========================================================================
000147B4                            
000147B4                            Obj38_Stars:				; XREF: Obj38_Index
000147B4 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000147B8 6700                       		beq.s	Obj38_Delete2	; if not, branch
000147BA 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000147BE 1228 001C                  		move.b	$1C(a0),d1
000147C2 5301                       		subq.b	#1,d1
000147C4 6000                       		bra.s	Obj38_StarTrail
000147C6                            ; ===========================================================================
000147C6 E909                       		lsl.b	#4,d1
000147C8 5801                       		addq.b	#4,d1
000147CA 9001                       		sub.b	d1,d0
000147CC 1228 0030                  		move.b	$30(a0),d1
000147D0 9001                       		sub.b	d1,d0
000147D2 5801                       		addq.b	#4,d1
000147D4 0201 000F                  		andi.b	#$F,d1
000147D8 1141 0030                  		move.b	d1,$30(a0)
000147DC 6000                       		bra.s	Obj38_StarTrail2a
000147DE                            ; ===========================================================================
000147DE                            
000147DE                            Obj38_StarTrail:			; XREF: Obj38_Stars
000147DE E709                       		lsl.b	#3,d1
000147E0 1401                       		move.b	d1,d2
000147E2 D201                       		add.b	d1,d1
000147E4 D202                       		add.b	d2,d1
000147E6 5801                       		addq.b	#4,d1
000147E8 9001                       		sub.b	d1,d0
000147EA 1228 0030                  		move.b	$30(a0),d1
000147EE 9001                       		sub.b	d1,d0
000147F0 5801                       		addq.b	#4,d1
000147F2 0C01 0018                  		cmpi.b	#$18,d1
000147F6 6500                       		bcs.s	Obj38_StarTrail2
000147F8 7200                       		moveq	#0,d1
000147FA                            
000147FA                            Obj38_StarTrail2:
000147FA 1141 0030                  		move.b	d1,$30(a0)
000147FE                            
000147FE                            Obj38_StarTrail2a:
000147FE 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014802 43F1 0000                  		lea	(a1,d0.w),a1
00014806 3159 0008                  		move.w	(a1)+,8(a0)
0001480A 3159 000C                  		move.w	(a1)+,$C(a0)
0001480E 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014814 43F9 0000 0000             		lea	(Ani_obj38).l,a1
0001481A 4EB9 0000 AC10             		jsr	AnimateSprite
00014820 4EFA 931E                  		jmp	DisplaySprite
00014824                            ; ===========================================================================
00014824                            
00014824                            Obj38_Delete2:				; XREF: Obj38_Stars
00014824 4EFA 9356                  		jmp	DeleteObject
00014828                            ; ===========================================================================
00014828                            ; ---------------------------------------------------------------------------
00014828                            ; Object 4A - special stage entry from beta
00014828                            ; ---------------------------------------------------------------------------
00014828                            
00014828                            Obj4A:					; XREF: Obj_Index
00014828 7000                       		moveq	#0,d0
0001482A 1028 0024                  		move.b	$24(a0),d0
0001482E 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014832 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014836                            ; ===========================================================================
00014836 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014838 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
0001483A 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
0001483C                            ; ===========================================================================
0001483C                            
0001483C                            Obj4A_Main:				; XREF: Obj4A_Index
0001483C 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014840 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014842 4E75                       		rts	
00014844                            ; ===========================================================================
00014844                            
00014844                            Obj4A_Main2:
00014844 5428 0024                  		addq.b	#2,$24(a0)
00014848 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014850 117C 0004 0001             		move.b	#4,1(a0)
00014856 117C 0001 0018             		move.b	#1,$18(a0)
0001485C 117C 0038 0019             		move.b	#$38,$19(a0)
00014862 317C 0541 0002             		move.w	#$541,2(a0)
00014868 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
0001486E                            
0001486E                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
0001486E 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014874 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001487A 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014880 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014886 4EB9 0000 AC10             		jsr	AnimateSprite
0001488C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014892 6600                       		bne.s	Obj4A_Display
00014894 4A38 D000                  		tst.b	($FFFFD000).w
00014898 6700                       		beq.s	Obj4A_Display
0001489A 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
000148A0 303C 00A8                  		move.w	#$A8,d0
000148A4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
000148AA                            
000148AA                            Obj4A_Display:
000148AA 4EFA 9294                  		jmp	DisplaySprite
000148AE                            ; ===========================================================================
000148AE                            
000148AE                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
000148AE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000148B2 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
000148B4 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000148BA 4EFA 92C0                  		jmp	DeleteObject
000148BE                            ; ===========================================================================
000148BE                            
000148BE                            Obj4A_Wait:
000148BE 4E75                       		rts	
000148C0                            ; ===========================================================================
000148C0                            ; ---------------------------------------------------------------------------
000148C0                            ; Object 08 - water splash (LZ)
000148C0                            ; ---------------------------------------------------------------------------
000148C0                            
000148C0                            Obj08:					; XREF: Obj_Index
000148C0 7000                       		moveq	#0,d0
000148C2 1028 0024                  		move.b	$24(a0),d0
000148C6 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
000148CA 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
000148CE                            ; ===========================================================================
000148CE 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
000148D0 0000                       		dc.w Obj08_Display-Obj08_Index
000148D2 0000                       		dc.w Obj08_Delete-Obj08_Index
000148D4                            ; ===========================================================================
000148D4                            
000148D4                            Obj08_Main:				; XREF: Obj08_Index
000148D4 5428 0024                  		addq.b	#2,$24(a0)
000148D8 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
000148E0 0028 0004 0001             		ori.b	#4,1(a0)
000148E6 117C 0001 0018             		move.b	#1,$18(a0)
000148EC 117C 0010 0019             		move.b	#$10,$19(a0)
000148F2 317C 4259 0002             		move.w	#$4259,2(a0)
000148F8 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
000148FE                            
000148FE                            Obj08_Display:				; XREF: Obj08_Index
000148FE 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014904 43F9 0000 0000             		lea	(Ani_obj08).l,a1
0001490A 4EB9 0000 AC10             		jsr	AnimateSprite
00014910 4EFA 922E                  		jmp	DisplaySprite
00014914                            ; ===========================================================================
00014914                            
00014914                            Obj08_Delete:				; XREF: Obj08_Index
00014914 4EFA 9266                  		jmp	DeleteObject	; delete when animation	is complete
00014918                            ; ===========================================================================
00014918                            Ani_obj38:
00014918                            	include "_anim\obj38.asm"
00014918                            ; ---------------------------------------------------------------------------
00014918                            ; Animation script - shield and invincibility stars
00014918                            ; ---------------------------------------------------------------------------
00014918 0000                       		dc.w byte_14356-Ani_obj38
0001491A 0000                       		dc.w byte_1435E-Ani_obj38
0001491C 0000                       		dc.w byte_14364-Ani_obj38
0001491E 0000                       		dc.w byte_1437E-Ani_obj38
00014920 0000                       		dc.w byte_14398-Ani_obj38
00014922 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
0001492A 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014930 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014941 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
0001494A 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
0001495B 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014964 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014975 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
0001497E                            		even
0001497E                            		even
0001497E                            
0001497E                            ; ---------------------------------------------------------------------------
0001497E                            ; Sprite mappings - shield and invincibility stars
0001497E                            ; ---------------------------------------------------------------------------
0001497E                            Map_obj38:
0001497E                            	include "_maps\obj38.asm"
0001497E                            ; ---------------------------------------------------------------------------
0001497E                            ; Sprite mappings - shield and invincibility stars
0001497E                            ; ---------------------------------------------------------------------------
0001497E 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014982 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014986 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
0001498A 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
0001498E 04                         byte_143C2:	dc.b 4
0001498F E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014994 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014999 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
0001499E 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
000149A3 04                         byte_143D7:	dc.b 4
000149A4 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
000149A9 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
000149AE 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
000149B3 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
000149B8 04                         byte_143EC:	dc.b 4
000149B9 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000149BE E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000149C3 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000149C8 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000149CD 04                         byte_14401:	dc.b 4
000149CE E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000149D3 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000149D8 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000149DD 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000149E2 04                         byte_14416:	dc.b 4
000149E3 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000149E8 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000149ED 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000149F2 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
000149F7 04                         byte_1442B:	dc.b 4
000149F8 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000149FD E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014A02 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014A07 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014A0C 04                         byte_14440:	dc.b 4
00014A0D E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014A12 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014A17 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014A1C 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014A22 00                         		even
00014A22 00                         		even
00014A22                            
00014A22                            Ani_obj4A:
00014A22                            	include "_anim\obj4A.asm"
00014A22                            ; ---------------------------------------------------------------------------
00014A22                            ; Animation script - special stage entry effect from beta
00014A22                            ; ---------------------------------------------------------------------------
00014A22 0000                       		dc.w byte_14458-Ani_obj4A
00014A24 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014A38                            		even
00014A38                            		even
00014A38                            
00014A38                            ; ---------------------------------------------------------------------------
00014A38                            ; Sprite mappings - special stage entry	from beta
00014A38                            ; ---------------------------------------------------------------------------
00014A38                            Map_obj4A:
00014A38                            	include "_maps\obj4A.asm"
00014A38                            ; ---------------------------------------------------------------------------
00014A38                            ; Sprite mappings - special stage entry	from beta
00014A38                            ; ---------------------------------------------------------------------------
00014A38 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014A3C 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014A40 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014A44 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014A48 03                         byte_1447C:	dc.b 3
00014A49 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014A4E 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014A53 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014A58 03                         byte_1448C:	dc.b 3
00014A59 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014A5E 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014A63 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014A68 05                         byte_1449C:	dc.b 5
00014A69 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014A6E EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014A73 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014A78 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014A7D 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014A82 09                         byte_144B6:	dc.b 9
00014A83 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014A88 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014A8D 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014A92 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014A97 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014A9C F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014AA1 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014AA6 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014AAB F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014AB0 12                         byte_144E4:	dc.b $12
00014AB1 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014AB6 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014ABB F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014AC0 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014AC5 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014ACA 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014ACF 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014AD4 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014AD9 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014ADE 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014AE3 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014AE8 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014AED F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014AF2 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014AF7 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014AFC F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014B01 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014B06 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014B0B 11                         byte_1453F:	dc.b $11
00014B0C F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014B11 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014B16 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014B1B 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014B20 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014B25 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014B2A 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014B2F F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014B34 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014B39 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014B3E 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014B43 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014B48 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014B4D 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014B52 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014B57 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014B5C 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014B61 09                         byte_14595:	dc.b 9
00014B62 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014B67 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014B6C 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014B71 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014B76 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014B7B FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014B80 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014B85 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014B8A 04                         		dc.b 4
00014B8B 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014B90                            		even
00014B90                            		even
00014B90                            
00014B90                            Ani_obj08:
00014B90                            	include "_anim\obj08.asm"
00014B90                            ; ---------------------------------------------------------------------------
00014B90                            ; Animation script - water splash (LZ)
00014B90                            ; ---------------------------------------------------------------------------
00014B90 0000                       		dc.w byte_145C6-Ani_obj08
00014B92 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014B98                            		even
00014B98                            		even
00014B98                            
00014B98                            ; ---------------------------------------------------------------------------
00014B98                            ; Sprite mappings - water splash (LZ)
00014B98                            ; ---------------------------------------------------------------------------
00014B98                            Map_obj08:
00014B98                            	include "_maps\obj08.asm"
00014B98                            ; ---------------------------------------------------------------------------
00014B98                            ; Sprite mappings - water splash (LZ)
00014B98                            ; ---------------------------------------------------------------------------
00014B98 0000                       		dc.w byte_145D2-Map_obj08
00014B9A 0000                       		dc.w byte_145DD-Map_obj08
00014B9C 0000                       		dc.w byte_145E8-Map_obj08
00014B9E 02                         byte_145D2:	dc.b 2
00014B9F F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014BA4 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014BA9 02                         byte_145DD:	dc.b 2
00014BAA E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014BAF EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014BB4 01                         byte_145E8:	dc.b 1
00014BB5 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014BBA                            		even
00014BBA                            		even
00014BBA                            
00014BBA                            ; ---------------------------------------------------------------------------
00014BBA                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014BBA                            ; ---------------------------------------------------------------------------
00014BBA                            
00014BBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BBA                            
00014BBA                            
00014BBA                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014BBA 0828 0003 0022             		btst	#3,$22(a0)
00014BC0 6700                       		beq.s	loc_14602
00014BC2 7000                       		moveq	#0,d0
00014BC4 11C0 F768                  		move.b	d0,($FFFFF768).w
00014BC8 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014BCC 4E75                       		rts	
00014BCE                            ; ===========================================================================
00014BCE                            
00014BCE                            loc_14602:
00014BCE 7003                       		moveq	#3,d0
00014BD0 11C0 F768                  		move.b	d0,($FFFFF768).w
00014BD4 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014BD8 1028 0026                  		move.b	$26(a0),d0
00014BDC 0600 0020                  		addi.b	#$20,d0
00014BE0 6A00                       		bpl.s	loc_14624
00014BE2 1028 0026                  		move.b	$26(a0),d0
00014BE6 6A00                       		bpl.s	loc_1461E
00014BE8 5300                       		subq.b	#1,d0
00014BEA                            
00014BEA                            loc_1461E:
00014BEA 0600 0020                  		addi.b	#$20,d0
00014BEE 6000                       		bra.s	loc_14630
00014BF0                            ; ===========================================================================
00014BF0                            
00014BF0                            loc_14624:
00014BF0 1028 0026                  		move.b	$26(a0),d0
00014BF4 6A00                       		bpl.s	loc_1462C
00014BF6 5200                       		addq.b	#1,d0
00014BF8                            
00014BF8                            loc_1462C:
00014BF8 0600 001F                  		addi.b	#$1F,d0
00014BFC                            
00014BFC                            loc_14630:
00014BFC 0200 00C0                  		andi.b	#$C0,d0
00014C00 0C00 0040                  		cmpi.b	#$40,d0
00014C04 6700 0000                  		beq.w	Sonic_WalkVertL
00014C08 0C00 0080                  		cmpi.b	#$80,d0
00014C0C 6700 0000                  		beq.w	Sonic_WalkCeiling
00014C10 0C00 00C0                  		cmpi.b	#$C0,d0
00014C14 6700 0000                  		beq.w	Sonic_WalkVertR
00014C18 3428 000C                  		move.w	$C(a0),d2
00014C1C 3628 0008                  		move.w	8(a0),d3
00014C20 7000                       		moveq	#0,d0
00014C22 1028 0016                  		move.b	$16(a0),d0
00014C26 4880                       		ext.w	d0
00014C28 D440                       		add.w	d0,d2
00014C2A 1028 0017                  		move.b	$17(a0),d0
00014C2E 4880                       		ext.w	d0
00014C30 D640                       		add.w	d0,d3
00014C32 49F8 F768                  		lea	($FFFFF768).w,a4
00014C36 367C 0010                  		movea.w	#$10,a3
00014C3A 3C3C 0000                  		move.w	#0,d6
00014C3E 7A0D                       		moveq	#$D,d5
00014C40 6100 0000                  		bsr.w	FindFloor
00014C44 3F01                       		move.w	d1,-(sp)
00014C46 3428 000C                  		move.w	$C(a0),d2
00014C4A 3628 0008                  		move.w	8(a0),d3
00014C4E 7000                       		moveq	#0,d0
00014C50 1028 0016                  		move.b	$16(a0),d0
00014C54 4880                       		ext.w	d0
00014C56 D440                       		add.w	d0,d2
00014C58 1028 0017                  		move.b	$17(a0),d0
00014C5C 4880                       		ext.w	d0
00014C5E 4440                       		neg.w	d0
00014C60 D640                       		add.w	d0,d3
00014C62 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014C66 367C 0010                  		movea.w	#$10,a3
00014C6A 3C3C 0000                  		move.w	#0,d6
00014C6E 7A0D                       		moveq	#$D,d5
00014C70 6100 0000                  		bsr.w	FindFloor
00014C74 301F                       		move.w	(sp)+,d0
00014C76 6100 0000                  		bsr.w	Sonic_Angle
00014C7A 4A41                       		tst.w	d1
00014C7C 6700                       		beq.s	locret_146BE
00014C7E 6A00                       		bpl.s	loc_146C0
00014C80 0C41 FFF2                  		cmpi.w	#-$E,d1
00014C84 6D00                       		blt.s	locret_146E6
00014C86 D368 000C                  		add.w	d1,$C(a0)
00014C8A                            
00014C8A                            locret_146BE:
00014C8A 4E75                       		rts	
00014C8C                            ; ===========================================================================
00014C8C                            
00014C8C                            loc_146C0:
00014C8C 0C41 000E                  		cmpi.w	#$E,d1
00014C90 6E00                       		bgt.s	loc_146CC
00014C92                            
00014C92                            loc_146C6:
00014C92 D368 000C                  		add.w	d1,$C(a0)
00014C96 4E75                       		rts	
00014C98                            ; ===========================================================================
00014C98                            
00014C98                            loc_146CC:
00014C98 4A28 0038                  		tst.b	$38(a0)
00014C9C 66F4                       		bne.s	loc_146C6
00014C9E 08E8 0001 0022             		bset	#1,$22(a0)
00014CA4 08A8 0005 0022             		bclr	#5,$22(a0)
00014CAA 117C 0001 001D             		move.b	#1,$1D(a0)
00014CB0 4E75                       		rts	
00014CB2                            ; ===========================================================================
00014CB2                            
00014CB2                            locret_146E6:
00014CB2 4E75                       		rts	
00014CB4                            ; End of function Sonic_AnglePos
00014CB4                            
00014CB4                            ; ===========================================================================
00014CB4 2428 0008                  		move.l	8(a0),d2
00014CB8 3028 0010                  		move.w	$10(a0),d0
00014CBC 48C0                       		ext.l	d0
00014CBE E180                       		asl.l	#8,d0
00014CC0 9480                       		sub.l	d0,d2
00014CC2 2142 0008                  		move.l	d2,8(a0)
00014CC6 303C 0038                  		move.w	#$38,d0
00014CCA 48C0                       		ext.l	d0
00014CCC E180                       		asl.l	#8,d0
00014CCE 9680                       		sub.l	d0,d3
00014CD0 2143 000C                  		move.l	d3,$C(a0)
00014CD4 4E75                       		rts	
00014CD6                            ; ===========================================================================
00014CD6                            
00014CD6                            locret_1470A:
00014CD6 4E75                       		rts	
00014CD8                            ; ===========================================================================
00014CD8 2628 000C                  		move.l	$C(a0),d3
00014CDC 3028 0012                  		move.w	$12(a0),d0
00014CE0 0440 0038                  		subi.w	#$38,d0
00014CE4 3140 0012                  		move.w	d0,$12(a0)
00014CE8 48C0                       		ext.l	d0
00014CEA E180                       		asl.l	#8,d0
00014CEC 9680                       		sub.l	d0,d3
00014CEE 2143 000C                  		move.l	d3,$C(a0)
00014CF2 4E75                       		rts	
00014CF4 4E75                       		rts	
00014CF6                            ; ===========================================================================
00014CF6 2428 0008                  		move.l	8(a0),d2
00014CFA 2628 000C                  		move.l	$C(a0),d3
00014CFE 3028 0010                  		move.w	$10(a0),d0
00014D02 48C0                       		ext.l	d0
00014D04 E180                       		asl.l	#8,d0
00014D06 9480                       		sub.l	d0,d2
00014D08 3028 0012                  		move.w	$12(a0),d0
00014D0C 48C0                       		ext.l	d0
00014D0E E180                       		asl.l	#8,d0
00014D10 9680                       		sub.l	d0,d3
00014D12 2142 0008                  		move.l	d2,8(a0)
00014D16 2143 000C                  		move.l	d3,$C(a0)
00014D1A 4E75                       		rts	
00014D1C                            
00014D1C                            ; ---------------------------------------------------------------------------
00014D1C                            ; Subroutine to	change Sonic's angle as he walks along the floor
00014D1C                            ; ---------------------------------------------------------------------------
00014D1C                            
00014D1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D1C                            
00014D1C                            
00014D1C                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00014D1C 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014D20 B240                       		cmp.w	d0,d1
00014D22 6F00                       		ble.s	loc_1475E
00014D24 1438 F768                  		move.b	($FFFFF768).w,d2
00014D28 3200                       		move.w	d0,d1
00014D2A                            
00014D2A                            loc_1475E:
00014D2A 0802 0000                  		btst	#0,d2
00014D2E 6600                       		bne.s	loc_1476A
00014D30 1142 0026                  		move.b	d2,$26(a0)
00014D34 4E75                       		rts	
00014D36                            ; ===========================================================================
00014D36                            
00014D36                            loc_1476A:
00014D36 1428 0026                  		move.b	$26(a0),d2
00014D3A 0602 0020                  		addi.b	#$20,d2
00014D3E 0202 00C0                  		andi.b	#$C0,d2
00014D42 1142 0026                  		move.b	d2,$26(a0)
00014D46 4E75                       		rts	
00014D48                            ; End of function Sonic_Angle
00014D48                            
00014D48                            ; ---------------------------------------------------------------------------
00014D48                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00014D48                            ; ---------------------------------------------------------------------------
00014D48                            
00014D48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D48                            
00014D48                            
00014D48                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00014D48 3428 000C                  		move.w	$C(a0),d2
00014D4C 3628 0008                  		move.w	8(a0),d3
00014D50 7000                       		moveq	#0,d0
00014D52 1028 0017                  		move.b	$17(a0),d0
00014D56 4880                       		ext.w	d0
00014D58 4440                       		neg.w	d0
00014D5A D440                       		add.w	d0,d2
00014D5C 1028 0016                  		move.b	$16(a0),d0
00014D60 4880                       		ext.w	d0
00014D62 D640                       		add.w	d0,d3
00014D64 49F8 F768                  		lea	($FFFFF768).w,a4
00014D68 367C 0010                  		movea.w	#$10,a3
00014D6C 3C3C 0000                  		move.w	#0,d6
00014D70 7A0D                       		moveq	#$D,d5
00014D72 6100 0000                  		bsr.w	FindWall
00014D76 3F01                       		move.w	d1,-(sp)
00014D78 3428 000C                  		move.w	$C(a0),d2
00014D7C 3628 0008                  		move.w	8(a0),d3
00014D80 7000                       		moveq	#0,d0
00014D82 1028 0017                  		move.b	$17(a0),d0
00014D86 4880                       		ext.w	d0
00014D88 D440                       		add.w	d0,d2
00014D8A 1028 0016                  		move.b	$16(a0),d0
00014D8E 4880                       		ext.w	d0
00014D90 D640                       		add.w	d0,d3
00014D92 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014D96 367C 0010                  		movea.w	#$10,a3
00014D9A 3C3C 0000                  		move.w	#0,d6
00014D9E 7A0D                       		moveq	#$D,d5
00014DA0 6100 0000                  		bsr.w	FindWall
00014DA4 301F                       		move.w	(sp)+,d0
00014DA6 6100 FF74                  		bsr.w	Sonic_Angle
00014DAA 4A41                       		tst.w	d1
00014DAC 6700                       		beq.s	locret_147F0
00014DAE 6A00                       		bpl.s	loc_147F2
00014DB0 0C41 FFF2                  		cmpi.w	#-$E,d1
00014DB4 6D00 FF20                  		blt.w	locret_1470A
00014DB8 D368 0008                  		add.w	d1,8(a0)
00014DBC                            
00014DBC                            locret_147F0:
00014DBC 4E75                       		rts	
00014DBE                            ; ===========================================================================
00014DBE                            
00014DBE                            loc_147F2:
00014DBE 0C41 000E                  		cmpi.w	#$E,d1
00014DC2 6E00                       		bgt.s	loc_147FE
00014DC4                            
00014DC4                            loc_147F8:
00014DC4 D368 0008                  		add.w	d1,8(a0)
00014DC8 4E75                       		rts	
00014DCA                            ; ===========================================================================
00014DCA                            
00014DCA                            loc_147FE:
00014DCA 4A28 0038                  		tst.b	$38(a0)
00014DCE 66F4                       		bne.s	loc_147F8
00014DD0 08E8 0001 0022             		bset	#1,$22(a0)
00014DD6 08A8 0005 0022             		bclr	#5,$22(a0)
00014DDC 117C 0001 001D             		move.b	#1,$1D(a0)
00014DE2 4E75                       		rts	
00014DE4                            ; End of function Sonic_WalkVertR
00014DE4                            
00014DE4                            ; ---------------------------------------------------------------------------
00014DE4                            ; Subroutine allowing Sonic to walk upside-down
00014DE4                            ; ---------------------------------------------------------------------------
00014DE4                            
00014DE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DE4                            
00014DE4                            
00014DE4                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00014DE4 3428 000C                  		move.w	$C(a0),d2
00014DE8 3628 0008                  		move.w	8(a0),d3
00014DEC 7000                       		moveq	#0,d0
00014DEE 1028 0016                  		move.b	$16(a0),d0
00014DF2 4880                       		ext.w	d0
00014DF4 9440                       		sub.w	d0,d2
00014DF6 0A42 000F                  		eori.w	#$F,d2
00014DFA 1028 0017                  		move.b	$17(a0),d0
00014DFE 4880                       		ext.w	d0
00014E00 D640                       		add.w	d0,d3
00014E02 49F8 F768                  		lea	($FFFFF768).w,a4
00014E06 367C FFF0                  		movea.w	#-$10,a3
00014E0A 3C3C 1000                  		move.w	#$1000,d6
00014E0E 7A0D                       		moveq	#$D,d5
00014E10 6100 0000                  		bsr.w	FindFloor
00014E14 3F01                       		move.w	d1,-(sp)
00014E16 3428 000C                  		move.w	$C(a0),d2
00014E1A 3628 0008                  		move.w	8(a0),d3
00014E1E 7000                       		moveq	#0,d0
00014E20 1028 0016                  		move.b	$16(a0),d0
00014E24 4880                       		ext.w	d0
00014E26 9440                       		sub.w	d0,d2
00014E28 0A42 000F                  		eori.w	#$F,d2
00014E2C 1028 0017                  		move.b	$17(a0),d0
00014E30 4880                       		ext.w	d0
00014E32 9640                       		sub.w	d0,d3
00014E34 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014E38 367C FFF0                  		movea.w	#-$10,a3
00014E3C 3C3C 1000                  		move.w	#$1000,d6
00014E40 7A0D                       		moveq	#$D,d5
00014E42 6100 0000                  		bsr.w	FindFloor
00014E46 301F                       		move.w	(sp)+,d0
00014E48 6100 FED2                  		bsr.w	Sonic_Angle
00014E4C 4A41                       		tst.w	d1
00014E4E 6700                       		beq.s	locret_14892
00014E50 6A00                       		bpl.s	loc_14894
00014E52 0C41 FFF2                  		cmpi.w	#-$E,d1
00014E56 6D00 FE5A                  		blt.w	locret_146E6
00014E5A 9368 000C                  		sub.w	d1,$C(a0)
00014E5E                            
00014E5E                            locret_14892:
00014E5E 4E75                       		rts	
00014E60                            ; ===========================================================================
00014E60                            
00014E60                            loc_14894:
00014E60 0C41 000E                  		cmpi.w	#$E,d1
00014E64 6E00                       		bgt.s	loc_148A0
00014E66                            
00014E66                            loc_1489A:
00014E66 9368 000C                  		sub.w	d1,$C(a0)
00014E6A 4E75                       		rts	
00014E6C                            ; ===========================================================================
00014E6C                            
00014E6C                            loc_148A0:
00014E6C 4A28 0038                  		tst.b	$38(a0)
00014E70 66F4                       		bne.s	loc_1489A
00014E72 08E8 0001 0022             		bset	#1,$22(a0)
00014E78 08A8 0005 0022             		bclr	#5,$22(a0)
00014E7E 117C 0001 001D             		move.b	#1,$1D(a0)
00014E84 4E75                       		rts	
00014E86                            ; End of function Sonic_WalkCeiling
00014E86                            
00014E86                            ; ---------------------------------------------------------------------------
00014E86                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00014E86                            ; ---------------------------------------------------------------------------
00014E86                            
00014E86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E86                            
00014E86                            
00014E86                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00014E86 3428 000C                  		move.w	$C(a0),d2
00014E8A 3628 0008                  		move.w	8(a0),d3
00014E8E 7000                       		moveq	#0,d0
00014E90 1028 0017                  		move.b	$17(a0),d0
00014E94 4880                       		ext.w	d0
00014E96 9440                       		sub.w	d0,d2
00014E98 1028 0016                  		move.b	$16(a0),d0
00014E9C 4880                       		ext.w	d0
00014E9E 9640                       		sub.w	d0,d3
00014EA0 0A43 000F                  		eori.w	#$F,d3
00014EA4 49F8 F768                  		lea	($FFFFF768).w,a4
00014EA8 367C FFF0                  		movea.w	#-$10,a3
00014EAC 3C3C 0800                  		move.w	#$800,d6
00014EB0 7A0D                       		moveq	#$D,d5
00014EB2 6100 0000                  		bsr.w	FindWall
00014EB6 3F01                       		move.w	d1,-(sp)
00014EB8 3428 000C                  		move.w	$C(a0),d2
00014EBC 3628 0008                  		move.w	8(a0),d3
00014EC0 7000                       		moveq	#0,d0
00014EC2 1028 0017                  		move.b	$17(a0),d0
00014EC6 4880                       		ext.w	d0
00014EC8 D440                       		add.w	d0,d2
00014ECA 1028 0016                  		move.b	$16(a0),d0
00014ECE 4880                       		ext.w	d0
00014ED0 9640                       		sub.w	d0,d3
00014ED2 0A43 000F                  		eori.w	#$F,d3
00014ED6 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014EDA 367C FFF0                  		movea.w	#-$10,a3
00014EDE 3C3C 0800                  		move.w	#$800,d6
00014EE2 7A0D                       		moveq	#$D,d5
00014EE4 6100 0000                  		bsr.w	FindWall
00014EE8 301F                       		move.w	(sp)+,d0
00014EEA 6100 FE30                  		bsr.w	Sonic_Angle
00014EEE 4A41                       		tst.w	d1
00014EF0 6700                       		beq.s	locret_14934
00014EF2 6A00                       		bpl.s	loc_14936
00014EF4 0C41 FFF2                  		cmpi.w	#-$E,d1
00014EF8 6D00 FDDC                  		blt.w	locret_1470A
00014EFC 9368 0008                  		sub.w	d1,8(a0)
00014F00                            
00014F00                            locret_14934:
00014F00 4E75                       		rts	
00014F02                            ; ===========================================================================
00014F02                            
00014F02                            loc_14936:
00014F02 0C41 000E                  		cmpi.w	#$E,d1
00014F06 6E00                       		bgt.s	loc_14942
00014F08                            
00014F08                            loc_1493C:
00014F08 9368 0008                  		sub.w	d1,8(a0)
00014F0C 4E75                       		rts	
00014F0E                            ; ===========================================================================
00014F0E                            
00014F0E                            loc_14942:
00014F0E 4A28 0038                  		tst.b	$38(a0)
00014F12 66F4                       		bne.s	loc_1493C
00014F14 08E8 0001 0022             		bset	#1,$22(a0)
00014F1A 08A8 0005 0022             		bclr	#5,$22(a0)
00014F20 117C 0001 001D             		move.b	#1,$1D(a0)
00014F26 4E75                       		rts	
00014F28                            ; End of function Sonic_WalkVertL
00014F28                            
00014F28                            ; ---------------------------------------------------------------------------
00014F28                            ; Subroutine to	find which tile	the object is standing on
00014F28                            ; ---------------------------------------------------------------------------
00014F28                            
00014F28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F28                            
00014F28                            
00014F28                            Floor_ChkTile:				; XREF: FindFloor; et al
00014F28 3002                       		move.w	d2,d0
00014F2A E248                       		lsr.w	#1,d0
00014F2C 0240 0380                  		andi.w	#$380,d0
00014F30 3203                       		move.w	d3,d1
00014F32 E049                       		lsr.w	#8,d1
00014F34 0241 007F                  		andi.w	#$7F,d1
00014F38 D041                       		add.w	d1,d0
00014F3A 72FF                       		moveq	#-1,d1
00014F3C 43F8 A400                  		lea	($FFFFA400).w,a1
00014F40 1231 0000                  		move.b	(a1,d0.w),d1
00014F44 6700                       		beq.s	loc_14996
00014F46 6B00                       		bmi.s	loc_1499A
00014F48 5301                       		subq.b	#1,d1
00014F4A 4881                       		ext.w	d1
00014F4C EE59                       		ror.w	#7,d1
00014F4E 3002                       		move.w	d2,d0
00014F50 D040                       		add.w	d0,d0
00014F52 0240 01E0                  		andi.w	#$1E0,d0
00014F56 D240                       		add.w	d0,d1
00014F58 3003                       		move.w	d3,d0
00014F5A E648                       		lsr.w	#3,d0
00014F5C 0240 001E                  		andi.w	#$1E,d0
00014F60 D240                       		add.w	d0,d1
00014F62                            
00014F62                            loc_14996:
00014F62 2241                       		movea.l	d1,a1
00014F64 4E75                       		rts	
00014F66                            ; ===========================================================================
00014F66                            
00014F66                            loc_1499A:
00014F66 0241 007F                  		andi.w	#$7F,d1
00014F6A 0828 0006 0001             		btst	#6,1(a0)
00014F70 6700                       		beq.s	loc_149B2
00014F72 5241                       		addq.w	#1,d1
00014F74 0C41 0029                  		cmpi.w	#$29,d1
00014F78 6600                       		bne.s	loc_149B2
00014F7A 323C 0051                  		move.w	#$51,d1
00014F7E                            
00014F7E                            loc_149B2:
00014F7E 5301                       		subq.b	#1,d1
00014F80 EE59                       		ror.w	#7,d1
00014F82 3002                       		move.w	d2,d0
00014F84 D040                       		add.w	d0,d0
00014F86 0240 01E0                  		andi.w	#$1E0,d0
00014F8A D240                       		add.w	d0,d1
00014F8C 3003                       		move.w	d3,d0
00014F8E E648                       		lsr.w	#3,d0
00014F90 0240 001E                  		andi.w	#$1E,d0
00014F94 D240                       		add.w	d0,d1
00014F96 2241                       		movea.l	d1,a1
00014F98 4E75                       		rts	
00014F9A                            ; End of function Floor_ChkTile
00014F9A                            
00014F9A                            
00014F9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F9A                            
00014F9A                            
00014F9A                            FindFloor:				; XREF: Sonic_AnglePos; et al
00014F9A 618C                       		bsr.s	Floor_ChkTile
00014F9C 3011                       		move.w	(a1),d0
00014F9E 3800                       		move.w	d0,d4
00014FA0 0240 07FF                  		andi.w	#$7FF,d0
00014FA4 6700                       		beq.s	loc_149DE
00014FA6 0B04                       		btst	d5,d4
00014FA8 6600                       		bne.s	loc_149EC
00014FAA                            
00014FAA                            loc_149DE:
00014FAA D44B                       		add.w	a3,d2
00014FAC 6100 0000                  		bsr.w	FindFloor2
00014FB0 944B                       		sub.w	a3,d2
00014FB2 0641 0010                  		addi.w	#$10,d1
00014FB6 4E75                       		rts	
00014FB8                            ; ===========================================================================
00014FB8                            
00014FB8                            loc_149EC:
00014FB8 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00014FBC 1032 0000                  		move.b	(a2,d0.w),d0
00014FC0 0240 00FF                  		andi.w	#$FF,d0
00014FC4 67E4                       		beq.s	loc_149DE
00014FC6 45F9 0000 0000             		lea	(AngleMap).l,a2
00014FCC 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014FD0 E948                       		lsl.w	#4,d0
00014FD2 3203                       		move.w	d3,d1
00014FD4 0804 000B                  		btst	#$B,d4
00014FD8 6700                       		beq.s	loc_14A12
00014FDA 4641                       		not.w	d1
00014FDC 4414                       		neg.b	(a4)
00014FDE                            
00014FDE                            loc_14A12:
00014FDE 0804 000C                  		btst	#$C,d4
00014FE2 6700                       		beq.s	loc_14A22
00014FE4 0614 0040                  		addi.b	#$40,(a4)
00014FE8 4414                       		neg.b	(a4)
00014FEA 0414 0040                  		subi.b	#$40,(a4)
00014FEE                            
00014FEE                            loc_14A22:
00014FEE 0241 000F                  		andi.w	#$F,d1
00014FF2 D240                       		add.w	d0,d1
00014FF4 45F9 0000 0000             		lea	(CollArray1).l,a2
00014FFA 1032 1000                  		move.b	(a2,d1.w),d0
00014FFE 4880                       		ext.w	d0
00015000 BD44                       		eor.w	d6,d4
00015002 0804 000C                  		btst	#$C,d4
00015006 6700                       		beq.s	loc_14A3E
00015008 4440                       		neg.w	d0
0001500A                            
0001500A                            loc_14A3E:
0001500A 4A40                       		tst.w	d0
0001500C 679C                       		beq.s	loc_149DE
0001500E 6B00                       		bmi.s	loc_14A5A
00015010 0C00 0010                  		cmpi.b	#$10,d0
00015014 6700                       		beq.s	loc_14A66
00015016 3202                       		move.w	d2,d1
00015018 0241 000F                  		andi.w	#$F,d1
0001501C D041                       		add.w	d1,d0
0001501E 323C 000F                  		move.w	#$F,d1
00015022 9240                       		sub.w	d0,d1
00015024 4E75                       		rts	
00015026                            ; ===========================================================================
00015026                            
00015026                            loc_14A5A:
00015026 3202                       		move.w	d2,d1
00015028 0241 000F                  		andi.w	#$F,d1
0001502C D041                       		add.w	d1,d0
0001502E 6A00 FF7A                  		bpl.w	loc_149DE
00015032                            
00015032                            loc_14A66:
00015032 944B                       		sub.w	a3,d2
00015034 6100 0000                  		bsr.w	FindFloor2
00015038 D44B                       		add.w	a3,d2
0001503A 0441 0010                  		subi.w	#$10,d1
0001503E 4E75                       		rts	
00015040                            ; End of function FindFloor
00015040                            
00015040                            
00015040                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015040                            
00015040                            
00015040                            FindFloor2:				; XREF: FindFloor
00015040 6100 FEE6                  		bsr.w	Floor_ChkTile
00015044 3011                       		move.w	(a1),d0
00015046 3800                       		move.w	d0,d4
00015048 0240 07FF                  		andi.w	#$7FF,d0
0001504C 6700                       		beq.s	loc_14A86
0001504E 0B04                       		btst	d5,d4
00015050 6600                       		bne.s	loc_14A94
00015052                            
00015052                            loc_14A86:
00015052 323C 000F                  		move.w	#$F,d1
00015056 3002                       		move.w	d2,d0
00015058 0240 000F                  		andi.w	#$F,d0
0001505C 9240                       		sub.w	d0,d1
0001505E 4E75                       		rts	
00015060                            ; ===========================================================================
00015060                            
00015060                            loc_14A94:
00015060 2478 F796                  		movea.l	($FFFFF796).w,a2
00015064 1032 0000                  		move.b	(a2,d0.w),d0
00015068 0240 00FF                  		andi.w	#$FF,d0
0001506C 67E4                       		beq.s	loc_14A86
0001506E 45F9 0000 0000             		lea	(AngleMap).l,a2
00015074 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015078 E948                       		lsl.w	#4,d0
0001507A 3203                       		move.w	d3,d1
0001507C 0804 000B                  		btst	#$B,d4
00015080 6700                       		beq.s	loc_14ABA
00015082 4641                       		not.w	d1
00015084 4414                       		neg.b	(a4)
00015086                            
00015086                            loc_14ABA:
00015086 0804 000C                  		btst	#$C,d4
0001508A 6700                       		beq.s	loc_14ACA
0001508C 0614 0040                  		addi.b	#$40,(a4)
00015090 4414                       		neg.b	(a4)
00015092 0414 0040                  		subi.b	#$40,(a4)
00015096                            
00015096                            loc_14ACA:
00015096 0241 000F                  		andi.w	#$F,d1
0001509A D240                       		add.w	d0,d1
0001509C 45F9 0000 0000             		lea	(CollArray1).l,a2
000150A2 1032 1000                  		move.b	(a2,d1.w),d0
000150A6 4880                       		ext.w	d0
000150A8 BD44                       		eor.w	d6,d4
000150AA 0804 000C                  		btst	#$C,d4
000150AE 6700                       		beq.s	loc_14AE6
000150B0 4440                       		neg.w	d0
000150B2                            
000150B2                            loc_14AE6:
000150B2 4A40                       		tst.w	d0
000150B4 679C                       		beq.s	loc_14A86
000150B6 6B00                       		bmi.s	loc_14AFC
000150B8 3202                       		move.w	d2,d1
000150BA 0241 000F                  		andi.w	#$F,d1
000150BE D041                       		add.w	d1,d0
000150C0 323C 000F                  		move.w	#$F,d1
000150C4 9240                       		sub.w	d0,d1
000150C6 4E75                       		rts	
000150C8                            ; ===========================================================================
000150C8                            
000150C8                            loc_14AFC:
000150C8 3202                       		move.w	d2,d1
000150CA 0241 000F                  		andi.w	#$F,d1
000150CE D041                       		add.w	d1,d0
000150D0 6A00 FF80                  		bpl.w	loc_14A86
000150D4 4641                       		not.w	d1
000150D6 4E75                       		rts	
000150D8                            ; End of function FindFloor2
000150D8                            
000150D8                            
000150D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150D8                            
000150D8                            
000150D8                            FindWall:				; XREF: Sonic_WalkVertR; et al
000150D8 6100 FE4E                  		bsr.w	Floor_ChkTile
000150DC 3011                       		move.w	(a1),d0
000150DE 3800                       		move.w	d0,d4
000150E0 0240 07FF                  		andi.w	#$7FF,d0
000150E4 6700                       		beq.s	loc_14B1E
000150E6 0B04                       		btst	d5,d4
000150E8 6600                       		bne.s	loc_14B2C
000150EA                            
000150EA                            loc_14B1E:
000150EA D64B                       		add.w	a3,d3
000150EC 6100 0000                  		bsr.w	FindWall2
000150F0 964B                       		sub.w	a3,d3
000150F2 0641 0010                  		addi.w	#$10,d1
000150F6 4E75                       		rts	
000150F8                            ; ===========================================================================
000150F8                            
000150F8                            loc_14B2C:
000150F8 2478 F796                  		movea.l	($FFFFF796).w,a2
000150FC 1032 0000                  		move.b	(a2,d0.w),d0
00015100 0240 00FF                  		andi.w	#$FF,d0
00015104 67E4                       		beq.s	loc_14B1E
00015106 45F9 0000 0000             		lea	(AngleMap).l,a2
0001510C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015110 E948                       		lsl.w	#4,d0
00015112 3202                       		move.w	d2,d1
00015114 0804 000C                  		btst	#$C,d4
00015118 6700                       		beq.s	loc_14B5A
0001511A 4641                       		not.w	d1
0001511C 0614 0040                  		addi.b	#$40,(a4)
00015120 4414                       		neg.b	(a4)
00015122 0414 0040                  		subi.b	#$40,(a4)
00015126                            
00015126                            loc_14B5A:
00015126 0804 000B                  		btst	#$B,d4
0001512A 6700                       		beq.s	loc_14B62
0001512C 4414                       		neg.b	(a4)
0001512E                            
0001512E                            loc_14B62:
0001512E 0241 000F                  		andi.w	#$F,d1
00015132 D240                       		add.w	d0,d1
00015134 45F9 0000 0000             		lea	(CollArray2).l,a2
0001513A 1032 1000                  		move.b	(a2,d1.w),d0
0001513E 4880                       		ext.w	d0
00015140 BD44                       		eor.w	d6,d4
00015142 0804 000B                  		btst	#$B,d4
00015146 6700                       		beq.s	loc_14B7E
00015148 4440                       		neg.w	d0
0001514A                            
0001514A                            loc_14B7E:
0001514A 4A40                       		tst.w	d0
0001514C 679C                       		beq.s	loc_14B1E
0001514E 6B00                       		bmi.s	loc_14B9A
00015150 0C00 0010                  		cmpi.b	#$10,d0
00015154 6700                       		beq.s	loc_14BA6
00015156 3203                       		move.w	d3,d1
00015158 0241 000F                  		andi.w	#$F,d1
0001515C D041                       		add.w	d1,d0
0001515E 323C 000F                  		move.w	#$F,d1
00015162 9240                       		sub.w	d0,d1
00015164 4E75                       		rts	
00015166                            ; ===========================================================================
00015166                            
00015166                            loc_14B9A:
00015166 3203                       		move.w	d3,d1
00015168 0241 000F                  		andi.w	#$F,d1
0001516C D041                       		add.w	d1,d0
0001516E 6A00 FF7A                  		bpl.w	loc_14B1E
00015172                            
00015172                            loc_14BA6:
00015172 964B                       		sub.w	a3,d3
00015174 6100 0000                  		bsr.w	FindWall2
00015178 D64B                       		add.w	a3,d3
0001517A 0441 0010                  		subi.w	#$10,d1
0001517E 4E75                       		rts	
00015180                            ; End of function FindWall
00015180                            
00015180                            
00015180                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015180                            
00015180                            
00015180                            FindWall2:				; XREF: FindWall
00015180 6100 FDA6                  		bsr.w	Floor_ChkTile
00015184 3011                       		move.w	(a1),d0
00015186 3800                       		move.w	d0,d4
00015188 0240 07FF                  		andi.w	#$7FF,d0
0001518C 6700                       		beq.s	loc_14BC6
0001518E 0B04                       		btst	d5,d4
00015190 6600                       		bne.s	loc_14BD4
00015192                            
00015192                            loc_14BC6:
00015192 323C 000F                  		move.w	#$F,d1
00015196 3003                       		move.w	d3,d0
00015198 0240 000F                  		andi.w	#$F,d0
0001519C 9240                       		sub.w	d0,d1
0001519E 4E75                       		rts	
000151A0                            ; ===========================================================================
000151A0                            
000151A0                            loc_14BD4:
000151A0 2478 F796                  		movea.l	($FFFFF796).w,a2
000151A4 1032 0000                  		move.b	(a2,d0.w),d0
000151A8 0240 00FF                  		andi.w	#$FF,d0
000151AC 67E4                       		beq.s	loc_14BC6
000151AE 45F9 0000 0000             		lea	(AngleMap).l,a2
000151B4 18B2 0000                  		move.b	(a2,d0.w),(a4)
000151B8 E948                       		lsl.w	#4,d0
000151BA 3202                       		move.w	d2,d1
000151BC 0804 000C                  		btst	#$C,d4
000151C0 6700                       		beq.s	loc_14C02
000151C2 4641                       		not.w	d1
000151C4 0614 0040                  		addi.b	#$40,(a4)
000151C8 4414                       		neg.b	(a4)
000151CA 0414 0040                  		subi.b	#$40,(a4)
000151CE                            
000151CE                            loc_14C02:
000151CE 0804 000B                  		btst	#$B,d4
000151D2 6700                       		beq.s	loc_14C0A
000151D4 4414                       		neg.b	(a4)
000151D6                            
000151D6                            loc_14C0A:
000151D6 0241 000F                  		andi.w	#$F,d1
000151DA D240                       		add.w	d0,d1
000151DC 45F9 0000 0000             		lea	(CollArray2).l,a2
000151E2 1032 1000                  		move.b	(a2,d1.w),d0
000151E6 4880                       		ext.w	d0
000151E8 BD44                       		eor.w	d6,d4
000151EA 0804 000B                  		btst	#$B,d4
000151EE 6700                       		beq.s	loc_14C26
000151F0 4440                       		neg.w	d0
000151F2                            
000151F2                            loc_14C26:
000151F2 4A40                       		tst.w	d0
000151F4 679C                       		beq.s	loc_14BC6
000151F6 6B00                       		bmi.s	loc_14C3C
000151F8 3203                       		move.w	d3,d1
000151FA 0241 000F                  		andi.w	#$F,d1
000151FE D041                       		add.w	d1,d0
00015200 323C 000F                  		move.w	#$F,d1
00015204 9240                       		sub.w	d0,d1
00015206 4E75                       		rts	
00015208                            ; ===========================================================================
00015208                            
00015208                            loc_14C3C:
00015208 3203                       		move.w	d3,d1
0001520A 0241 000F                  		andi.w	#$F,d1
0001520E D041                       		add.w	d1,d0
00015210 6A00 FF80                  		bpl.w	loc_14BC6
00015214 4641                       		not.w	d1
00015216 4E75                       		rts	
00015218                            ; End of function FindWall2
00015218                            
00015218                            ; ---------------------------------------------------------------------------
00015218                            ; Unused floor/wall subroutine - logs something	to do with collision
00015218                            ; ---------------------------------------------------------------------------
00015218                            
00015218                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015218                            
00015218                            
00015218                            FloorLog_Unk:				; XREF: Level
00015218 4E75                       		rts	
0001521A                            
0001521A 43F9 0000 0000             		lea	(CollArray1).l,a1
00015220 45F9 0000 0000             		lea	(CollArray1).l,a2
00015226 363C 00FF                  		move.w	#$FF,d3
0001522A                            
0001522A                            loc_14C5E:
0001522A 7A10                       		moveq	#$10,d5
0001522C 343C 000F                  		move.w	#$F,d2
00015230                            
00015230                            loc_14C64:
00015230 7800                       		moveq	#0,d4
00015232 323C 000F                  		move.w	#$F,d1
00015236                            
00015236                            loc_14C6A:
00015236 3019                       		move.w	(a1)+,d0
00015238 EAA8                       		lsr.l	d5,d0
0001523A D944                       		addx.w	d4,d4
0001523C 51C9 FFF8                  		dbf	d1,loc_14C6A
00015240                            
00015240 34C4                       		move.w	d4,(a2)+
00015242 92FC 0020                  		suba.w	#$20,a1
00015246 5345                       		subq.w	#1,d5
00015248 51CA FFE6                  		dbf	d2,loc_14C64
0001524C                            
0001524C D2FC 0020                  		adda.w	#$20,a1
00015250 51CB FFD8                  		dbf	d3,loc_14C5E
00015254                            
00015254 43F9 0000 0000             		lea	(CollArray1).l,a1
0001525A 45F9 0000 0000             		lea	(CollArray2).l,a2
00015260 6100                       		bsr.s	FloorLog_Unk2
00015262 43F9 0000 0000             		lea	(CollArray1).l,a1
00015268 45F9 0000 0000             		lea	(CollArray1).l,a2
0001526E                            
0001526E                            ; End of function FloorLog_Unk
0001526E                            
0001526E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001526E                            
0001526E                            
0001526E                            FloorLog_Unk2:				; XREF: FloorLog_Unk
0001526E 363C 0FFF                  		move.w	#$FFF,d3
00015272                            
00015272                            loc_14CA6:
00015272 7400                       		moveq	#0,d2
00015274 323C 000F                  		move.w	#$F,d1
00015278 3019                       		move.w	(a1)+,d0
0001527A 6700                       		beq.s	loc_14CD4
0001527C 6B00                       		bmi.s	loc_14CBE
0001527E                            
0001527E                            loc_14CB2:
0001527E E248                       		lsr.w	#1,d0
00015280 6400                       		bcc.s	loc_14CB8
00015282 5202                       		addq.b	#1,d2
00015284                            
00015284                            loc_14CB8:
00015284 51C9 FFF8                  		dbf	d1,loc_14CB2
00015288                            
00015288 6000                       		bra.s	loc_14CD6
0001528A                            ; ===========================================================================
0001528A                            
0001528A                            loc_14CBE:
0001528A 0C40 FFFF                  		cmpi.w	#-1,d0
0001528E 6700                       		beq.s	loc_14CD0
00015290                            
00015290                            loc_14CC4:
00015290 E348                       		lsl.w	#1,d0
00015292 6400                       		bcc.s	loc_14CCA
00015294 5302                       		subq.b	#1,d2
00015296                            
00015296                            loc_14CCA:
00015296 51C9 FFF8                  		dbf	d1,loc_14CC4
0001529A                            
0001529A 6000                       		bra.s	loc_14CD6
0001529C                            ; ===========================================================================
0001529C                            
0001529C                            loc_14CD0:
0001529C 303C 0010                  		move.w	#$10,d0
000152A0                            
000152A0                            loc_14CD4:
000152A0 3400                       		move.w	d0,d2
000152A2                            
000152A2                            loc_14CD6:
000152A2 14C2                       		move.b	d2,(a2)+
000152A4 51CB FFCC                  		dbf	d3,loc_14CA6
000152A8                            
000152A8 4E75                       		rts	
000152AA                            
000152AA                            ; End of function FloorLog_Unk2
000152AA                            
000152AA                            
000152AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152AA                            
000152AA                            
000152AA                            Sonic_WalkSpeed:			; XREF: Sonic_Move
000152AA 2628 0008                  		move.l	8(a0),d3
000152AE 2428 000C                  		move.l	$C(a0),d2
000152B2 3228 0010                  		move.w	$10(a0),d1
000152B6 48C1                       		ext.l	d1
000152B8 E181                       		asl.l	#8,d1
000152BA D681                       		add.l	d1,d3
000152BC 3228 0012                  		move.w	$12(a0),d1
000152C0 48C1                       		ext.l	d1
000152C2 E181                       		asl.l	#8,d1
000152C4 D481                       		add.l	d1,d2
000152C6 4842                       		swap	d2
000152C8 4843                       		swap	d3
000152CA 11C0 F768                  		move.b	d0,($FFFFF768).w
000152CE 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000152D2 1200                       		move.b	d0,d1
000152D4 0600 0020                  		addi.b	#$20,d0
000152D8 6A00                       		bpl.s	loc_14D1A
000152DA 1001                       		move.b	d1,d0
000152DC 6A00                       		bpl.s	loc_14D14
000152DE 5300                       		subq.b	#1,d0
000152E0                            
000152E0                            loc_14D14:
000152E0 0600 0020                  		addi.b	#$20,d0
000152E4 6000                       		bra.s	loc_14D24
000152E6                            ; ===========================================================================
000152E6                            
000152E6                            loc_14D1A:
000152E6 1001                       		move.b	d1,d0
000152E8 6A00                       		bpl.s	loc_14D20
000152EA 5200                       		addq.b	#1,d0
000152EC                            
000152EC                            loc_14D20:
000152EC 0600 001F                  		addi.b	#$1F,d0
000152F0                            
000152F0                            loc_14D24:
000152F0 0200 00C0                  		andi.b	#$C0,d0
000152F4 6700 0000                  		beq.w	loc_14DF0
000152F8 0C00 0080                  		cmpi.b	#$80,d0
000152FC 6700 0000                  		beq.w	loc_14F7C
00015300 0201 0038                  		andi.b	#$38,d1
00015304 6600                       		bne.s	loc_14D3C
00015306 5042                       		addq.w	#8,d2
00015308                            
00015308                            loc_14D3C:
00015308 0C00 0040                  		cmpi.b	#$40,d0
0001530C 6700 0000                  		beq.w	loc_1504A
00015310 6000 0000                  		bra.w	loc_14EBC
00015314                            
00015314                            ; End of function Sonic_WalkSpeed
00015314                            
00015314                            
00015314                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015314                            
00015314                            
00015314                            sub_14D48:				; XREF: Sonic_Jump
00015314 11C0 F768                  		move.b	d0,($FFFFF768).w
00015318 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001531C 0600 0020                  		addi.b	#$20,d0
00015320 0200 00C0                  		andi.b	#$C0,d0
00015324 0C00 0040                  		cmpi.b	#$40,d0
00015328 6700 0000                  		beq.w	loc_14FD6
0001532C 0C00 0080                  		cmpi.b	#$80,d0
00015330 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00015334 0C00 00C0                  		cmpi.b	#$C0,d0
00015338 6700 0000                  		beq.w	sub_14E50
0001533C                            
0001533C                            ; End of function sub_14D48
0001533C                            
0001533C                            ; ---------------------------------------------------------------------------
0001533C                            ; Subroutine to	make Sonic land	on the floor after jumping
0001533C                            ; ---------------------------------------------------------------------------
0001533C                            
0001533C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001533C                            
0001533C                            
0001533C                            Sonic_HitFloor:				; XREF: Sonic_Floor
0001533C 3428 000C                  		move.w	$C(a0),d2
00015340 3628 0008                  		move.w	8(a0),d3
00015344 7000                       		moveq	#0,d0
00015346 1028 0016                  		move.b	$16(a0),d0
0001534A 4880                       		ext.w	d0
0001534C D440                       		add.w	d0,d2
0001534E 1028 0017                  		move.b	$17(a0),d0
00015352 4880                       		ext.w	d0
00015354 D640                       		add.w	d0,d3
00015356 49F8 F768                  		lea	($FFFFF768).w,a4
0001535A 367C 0010                  		movea.w	#$10,a3
0001535E 3C3C 0000                  		move.w	#0,d6
00015362 7A0D                       		moveq	#$D,d5
00015364 6100 FC34                  		bsr.w	FindFloor
00015368 3F01                       		move.w	d1,-(sp)
0001536A 3428 000C                  		move.w	$C(a0),d2
0001536E 3628 0008                  		move.w	8(a0),d3
00015372 7000                       		moveq	#0,d0
00015374 1028 0016                  		move.b	$16(a0),d0
00015378 4880                       		ext.w	d0
0001537A D440                       		add.w	d0,d2
0001537C 1028 0017                  		move.b	$17(a0),d0
00015380 4880                       		ext.w	d0
00015382 9640                       		sub.w	d0,d3
00015384 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015388 367C 0010                  		movea.w	#$10,a3
0001538C 3C3C 0000                  		move.w	#0,d6
00015390 7A0D                       		moveq	#$D,d5
00015392 6100 FC06                  		bsr.w	FindFloor
00015396 301F                       		move.w	(sp)+,d0
00015398 143C 0000                  		move.b	#0,d2
0001539C                            
0001539C                            loc_14DD0:
0001539C 1638 F76A                  		move.b	($FFFFF76A).w,d3
000153A0 B240                       		cmp.w	d0,d1
000153A2 6F00                       		ble.s	loc_14DDE
000153A4 1638 F768                  		move.b	($FFFFF768).w,d3
000153A8 C141                       		exg	d0,d1
000153AA                            
000153AA                            loc_14DDE:
000153AA 0803 0000                  		btst	#0,d3
000153AE 6700                       		beq.s	locret_14DE6
000153B0 1602                       		move.b	d2,d3
000153B2                            
000153B2                            locret_14DE6:
000153B2 4E75                       		rts	
000153B4                            
000153B4                            ; End of function Sonic_HitFloor
000153B4                            
000153B4                            ; ===========================================================================
000153B4 3428 000C                  		move.w	$C(a0),d2
000153B8 3628 0008                  		move.w	8(a0),d3
000153BC                            
000153BC                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000153BC 0642 000A                  		addi.w	#$A,d2
000153C0 49F8 F768                  		lea	($FFFFF768).w,a4
000153C4 367C 0010                  		movea.w	#$10,a3
000153C8 3C3C 0000                  		move.w	#0,d6
000153CC 7A0E                       		moveq	#$E,d5
000153CE 6100 FBCA                  		bsr.w	FindFloor
000153D2 143C 0000                  		move.b	#0,d2
000153D6                            
000153D6                            loc_14E0A:				; XREF: sub_14EB4
000153D6 1638 F768                  		move.b	($FFFFF768).w,d3
000153DA 0803 0000                  		btst	#0,d3
000153DE 6700                       		beq.s	locret_14E16
000153E0 1602                       		move.b	d2,d3
000153E2                            
000153E2                            locret_14E16:
000153E2 4E75                       		rts	
000153E4                            
000153E4                            ; ---------------------------------------------------------------------------
000153E4                            ; Subroutine allowing objects to interact with the floor
000153E4                            ; ---------------------------------------------------------------------------
000153E4                            
000153E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153E4                            
000153E4                            
000153E4                            ObjHitFloor:
000153E4 3628 0008                  		move.w	8(a0),d3
000153E8                            
000153E8                            ; End of function ObjHitFloor
000153E8                            
000153E8                            
000153E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153E8                            
000153E8                            
000153E8                            ObjHitFloor2:
000153E8 3428 000C                  		move.w	$C(a0),d2
000153EC 7000                       		moveq	#0,d0
000153EE 1028 0016                  		move.b	$16(a0),d0
000153F2 4880                       		ext.w	d0
000153F4 D440                       		add.w	d0,d2
000153F6 49F8 F768                  		lea	($FFFFF768).w,a4
000153FA 18BC 0000                  		move.b	#0,(a4)
000153FE 367C 0010                  		movea.w	#$10,a3
00015402 3C3C 0000                  		move.w	#0,d6
00015406 7A0D                       		moveq	#$D,d5
00015408 6100 FB90                  		bsr.w	FindFloor
0001540C 1638 F768                  		move.b	($FFFFF768).w,d3
00015410 0803 0000                  		btst	#0,d3
00015414 6700                       		beq.s	locret_14E4E
00015416 163C 0000                  		move.b	#0,d3
0001541A                            
0001541A                            locret_14E4E:
0001541A 4E75                       		rts	
0001541C                            ; End of function ObjHitFloor2
0001541C                            
0001541C                            
0001541C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001541C                            
0001541C                            
0001541C                            sub_14E50:				; XREF: sub_14D48
0001541C 3428 000C                  		move.w	$C(a0),d2
00015420 3628 0008                  		move.w	8(a0),d3
00015424 7000                       		moveq	#0,d0
00015426 1028 0017                  		move.b	$17(a0),d0
0001542A 4880                       		ext.w	d0
0001542C 9440                       		sub.w	d0,d2
0001542E 1028 0016                  		move.b	$16(a0),d0
00015432 4880                       		ext.w	d0
00015434 D640                       		add.w	d0,d3
00015436 49F8 F768                  		lea	($FFFFF768).w,a4
0001543A 367C 0010                  		movea.w	#$10,a3
0001543E 3C3C 0000                  		move.w	#0,d6
00015442 7A0E                       		moveq	#$E,d5
00015444 6100 FC92                  		bsr.w	FindWall
00015448 3F01                       		move.w	d1,-(sp)
0001544A 3428 000C                  		move.w	$C(a0),d2
0001544E 3628 0008                  		move.w	8(a0),d3
00015452 7000                       		moveq	#0,d0
00015454 1028 0017                  		move.b	$17(a0),d0
00015458 4880                       		ext.w	d0
0001545A D440                       		add.w	d0,d2
0001545C 1028 0016                  		move.b	$16(a0),d0
00015460 4880                       		ext.w	d0
00015462 D640                       		add.w	d0,d3
00015464 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015468 367C 0010                  		movea.w	#$10,a3
0001546C 3C3C 0000                  		move.w	#0,d6
00015470 7A0E                       		moveq	#$E,d5
00015472 6100 FC64                  		bsr.w	FindWall
00015476 301F                       		move.w	(sp)+,d0
00015478 143C 00C0                  		move.b	#-$40,d2
0001547C 6000 FF1E                  		bra.w	loc_14DD0
00015480                            
00015480                            ; End of function sub_14E50
00015480                            
00015480                            
00015480                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015480                            
00015480                            
00015480                            sub_14EB4:				; XREF: Sonic_Floor
00015480 3428 000C                  		move.w	$C(a0),d2
00015484 3628 0008                  		move.w	8(a0),d3
00015488                            
00015488                            loc_14EBC:
00015488 0643 000A                  		addi.w	#$A,d3
0001548C 49F8 F768                  		lea	($FFFFF768).w,a4
00015490 367C 0010                  		movea.w	#$10,a3
00015494 3C3C 0000                  		move.w	#0,d6
00015498 7A0E                       		moveq	#$E,d5
0001549A 6100 FC3C                  		bsr.w	FindWall
0001549E 143C 00C0                  		move.b	#-$40,d2
000154A2 6000 FF32                  		bra.w	loc_14E0A
000154A6                            
000154A6                            ; End of function sub_14EB4
000154A6                            
000154A6                            ; ---------------------------------------------------------------------------
000154A6                            ; Subroutine to	detect when an object hits a wall to its right
000154A6                            ; ---------------------------------------------------------------------------
000154A6                            
000154A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154A6                            
000154A6                            
000154A6                            ObjHitWallRight:
000154A6 D668 0008                  		add.w	8(a0),d3
000154AA 3428 000C                  		move.w	$C(a0),d2
000154AE 49F8 F768                  		lea	($FFFFF768).w,a4
000154B2 18BC 0000                  		move.b	#0,(a4)
000154B6 367C 0010                  		movea.w	#$10,a3
000154BA 3C3C 0000                  		move.w	#0,d6
000154BE 7A0E                       		moveq	#$E,d5
000154C0 6100 FC16                  		bsr.w	FindWall
000154C4 1638 F768                  		move.b	($FFFFF768).w,d3
000154C8 0803 0000                  		btst	#0,d3
000154CC 6700                       		beq.s	locret_14F06
000154CE 163C 00C0                  		move.b	#-$40,d3
000154D2                            
000154D2                            locret_14F06:
000154D2 4E75                       		rts	
000154D4                            
000154D4                            ; End of function ObjHitWallRight
000154D4                            
000154D4                            ; ---------------------------------------------------------------------------
000154D4                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000154D4                            ; touches them
000154D4                            ; ---------------------------------------------------------------------------
000154D4                            
000154D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154D4                            
000154D4                            
000154D4                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000154D4 3428 000C                  		move.w	$C(a0),d2
000154D8 3628 0008                  		move.w	8(a0),d3
000154DC 7000                       		moveq	#0,d0
000154DE 1028 0016                  		move.b	$16(a0),d0
000154E2 4880                       		ext.w	d0
000154E4 9440                       		sub.w	d0,d2
000154E6 0A42 000F                  		eori.w	#$F,d2
000154EA 1028 0017                  		move.b	$17(a0),d0
000154EE 4880                       		ext.w	d0
000154F0 D640                       		add.w	d0,d3
000154F2 49F8 F768                  		lea	($FFFFF768).w,a4
000154F6 367C FFF0                  		movea.w	#-$10,a3
000154FA 3C3C 1000                  		move.w	#$1000,d6
000154FE 7A0E                       		moveq	#$E,d5
00015500 6100 FA98                  		bsr.w	FindFloor
00015504 3F01                       		move.w	d1,-(sp)
00015506 3428 000C                  		move.w	$C(a0),d2
0001550A 3628 0008                  		move.w	8(a0),d3
0001550E 7000                       		moveq	#0,d0
00015510 1028 0016                  		move.b	$16(a0),d0
00015514 4880                       		ext.w	d0
00015516 9440                       		sub.w	d0,d2
00015518 0A42 000F                  		eori.w	#$F,d2
0001551C 1028 0017                  		move.b	$17(a0),d0
00015520 4880                       		ext.w	d0
00015522 9640                       		sub.w	d0,d3
00015524 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015528 367C FFF0                  		movea.w	#-$10,a3
0001552C 3C3C 1000                  		move.w	#$1000,d6
00015530 7A0E                       		moveq	#$E,d5
00015532 6100 FA66                  		bsr.w	FindFloor
00015536 301F                       		move.w	(sp)+,d0
00015538 143C 0080                  		move.b	#-$80,d2
0001553C 6000 FE5E                  		bra.w	loc_14DD0
00015540                            ; End of function Sonic_DontRunOnWalls
00015540                            
00015540                            ; ===========================================================================
00015540 3428 000C                  		move.w	$C(a0),d2
00015544 3628 0008                  		move.w	8(a0),d3
00015548                            
00015548                            loc_14F7C:
00015548 0442 000A                  		subi.w	#$A,d2
0001554C 0A42 000F                  		eori.w	#$F,d2
00015550 49F8 F768                  		lea	($FFFFF768).w,a4
00015554 367C FFF0                  		movea.w	#-$10,a3
00015558 3C3C 1000                  		move.w	#$1000,d6
0001555C 7A0E                       		moveq	#$E,d5
0001555E 6100 FA3A                  		bsr.w	FindFloor
00015562 143C 0080                  		move.b	#-$80,d2
00015566 6000 FE6E                  		bra.w	loc_14E0A
0001556A                            
0001556A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001556A                            
0001556A                            
0001556A                            ObjHitCeiling:
0001556A 3428 000C                  		move.w	$C(a0),d2
0001556E 3628 0008                  		move.w	8(a0),d3
00015572 7000                       		moveq	#0,d0
00015574 1028 0016                  		move.b	$16(a0),d0
00015578 4880                       		ext.w	d0
0001557A 9440                       		sub.w	d0,d2
0001557C 0A42 000F                  		eori.w	#$F,d2
00015580 49F8 F768                  		lea	($FFFFF768).w,a4
00015584 367C FFF0                  		movea.w	#-$10,a3
00015588 3C3C 1000                  		move.w	#$1000,d6
0001558C 7A0E                       		moveq	#$E,d5
0001558E 6100 FA0A                  		bsr.w	FindFloor
00015592 1638 F768                  		move.b	($FFFFF768).w,d3
00015596 0803 0000                  		btst	#0,d3
0001559A 6700                       		beq.s	locret_14FD4
0001559C 163C 0080                  		move.b	#-$80,d3
000155A0                            
000155A0                            locret_14FD4:
000155A0 4E75                       		rts	
000155A2                            ; End of function ObjHitCeiling
000155A2                            
000155A2                            ; ===========================================================================
000155A2                            
000155A2                            loc_14FD6:				; XREF: sub_14D48
000155A2 3428 000C                  		move.w	$C(a0),d2
000155A6 3628 0008                  		move.w	8(a0),d3
000155AA 7000                       		moveq	#0,d0
000155AC 1028 0017                  		move.b	$17(a0),d0
000155B0 4880                       		ext.w	d0
000155B2 9440                       		sub.w	d0,d2
000155B4 1028 0016                  		move.b	$16(a0),d0
000155B8 4880                       		ext.w	d0
000155BA 9640                       		sub.w	d0,d3
000155BC 0A43 000F                  		eori.w	#$F,d3
000155C0 49F8 F768                  		lea	($FFFFF768).w,a4
000155C4 367C FFF0                  		movea.w	#-$10,a3
000155C8 3C3C 0800                  		move.w	#$800,d6
000155CC 7A0E                       		moveq	#$E,d5
000155CE 6100 FB08                  		bsr.w	FindWall
000155D2 3F01                       		move.w	d1,-(sp)
000155D4 3428 000C                  		move.w	$C(a0),d2
000155D8 3628 0008                  		move.w	8(a0),d3
000155DC 7000                       		moveq	#0,d0
000155DE 1028 0017                  		move.b	$17(a0),d0
000155E2 4880                       		ext.w	d0
000155E4 D440                       		add.w	d0,d2
000155E6 1028 0016                  		move.b	$16(a0),d0
000155EA 4880                       		ext.w	d0
000155EC 9640                       		sub.w	d0,d3
000155EE 0A43 000F                  		eori.w	#$F,d3
000155F2 49F8 F76A                  		lea	($FFFFF76A).w,a4
000155F6 367C FFF0                  		movea.w	#-$10,a3
000155FA 3C3C 0800                  		move.w	#$800,d6
000155FE 7A0E                       		moveq	#$E,d5
00015600 6100 FAD6                  		bsr.w	FindWall
00015604 301F                       		move.w	(sp)+,d0
00015606 143C 0040                  		move.b	#$40,d2
0001560A 6000 FD90                  		bra.w	loc_14DD0
0001560E                            
0001560E                            ; ---------------------------------------------------------------------------
0001560E                            ; Subroutine to	stop Sonic when	he jumps at a wall
0001560E                            ; ---------------------------------------------------------------------------
0001560E                            
0001560E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001560E                            
0001560E                            
0001560E                            Sonic_HitWall:				; XREF: Sonic_Floor
0001560E 3428 000C                  		move.w	$C(a0),d2
00015612 3628 0008                  		move.w	8(a0),d3
00015616                            
00015616                            loc_1504A:
00015616 0443 000A                  		subi.w	#$A,d3
0001561A 0A43 000F                  		eori.w	#$F,d3
0001561E 49F8 F768                  		lea	($FFFFF768).w,a4
00015622 367C FFF0                  		movea.w	#-$10,a3
00015626 3C3C 0800                  		move.w	#$800,d6
0001562A 7A0E                       		moveq	#$E,d5
0001562C 6100 FAAA                  		bsr.w	FindWall
00015630 143C 0040                  		move.b	#$40,d2
00015634 6000 FDA0                  		bra.w	loc_14E0A
00015638                            ; End of function Sonic_HitWall
00015638                            
00015638                            ; ---------------------------------------------------------------------------
00015638                            ; Subroutine to	detect when an object hits a wall to its left
00015638                            ; ---------------------------------------------------------------------------
00015638                            
00015638                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015638                            
00015638                            
00015638                            ObjHitWallLeft:
00015638 D668 0008                  		add.w	8(a0),d3
0001563C 3428 000C                  		move.w	$C(a0),d2
00015640 49F8 F768                  		lea	($FFFFF768).w,a4
00015644 18BC 0000                  		move.b	#0,(a4)
00015648 367C FFF0                  		movea.w	#-$10,a3
0001564C 3C3C 0800                  		move.w	#$800,d6
00015650 7A0E                       		moveq	#$E,d5
00015652 6100 FA84                  		bsr.w	FindWall
00015656 1638 F768                  		move.b	($FFFFF768).w,d3
0001565A 0803 0000                  		btst	#0,d3
0001565E 6700                       		beq.s	locret_15098
00015660 163C 0040                  		move.b	#$40,d3
00015664                            
00015664                            locret_15098:
00015664 4E75                       		rts	
00015666                            ; End of function ObjHitWallLeft
00015666                            
00015666                            ; ===========================================================================
00015666                            ; ---------------------------------------------------------------------------
00015666                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015666                            ; ---------------------------------------------------------------------------
00015666                            
00015666                            Obj66:					; XREF: Obj_Index
00015666 7000                       		moveq	#0,d0
00015668 1028 0024                  		move.b	$24(a0),d0
0001566C 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015670 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015674                            ; ===========================================================================
00015674 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015676 0000                       		dc.w Obj66_Action-Obj66_Index
00015678 0000                       		dc.w Obj66_Display-Obj66_Index
0001567A 0000                       		dc.w Obj66_Release-Obj66_Index
0001567C                            ; ===========================================================================
0001567C                            
0001567C                            Obj66_Main:				; XREF: Obj66_Index
0001567C 5428 0024                  		addq.b	#2,$24(a0)
00015680 323C 0001                  		move.w	#1,d1
00015684 2248                       		movea.l	a0,a1
00015686 6000                       		bra.s	Obj66_MakeItem
00015688                            ; ===========================================================================
00015688                            
00015688                            Obj66_Loop:
00015688 6100 893C                  		bsr.w	SingleObjLoad
0001568C 6600                       		bne.s	loc_150FE
0001568E 12BC 0066                  		move.b	#$66,0(a1)
00015692 5829 0024                  		addq.b	#4,$24(a1)
00015696 3368 0008 0008             		move.w	8(a0),8(a1)
0001569C 3368 000C 000C             		move.w	$C(a0),$C(a1)
000156A2 137C 0003 0018             		move.b	#3,$18(a1)
000156A8 137C 0010 001A             		move.b	#$10,$1A(a1)
000156AE                            
000156AE                            Obj66_MakeItem:				; XREF: Obj66_Main
000156AE 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
000156B6 337C 4348 0002             		move.w	#$4348,2(a1)
000156BC 0029 0004 0001             		ori.b	#4,1(a1)
000156C2 137C 0038 0019             		move.b	#$38,$19(a1)
000156C8                            
000156C8                            loc_150FE:
000156C8 51C9 FFBE                  		dbf	d1,Obj66_Loop
000156CC                            
000156CC 117C 0030 0019             		move.b	#$30,$19(a0)
000156D2 117C 0004 0018             		move.b	#4,$18(a0)
000156D8 317C 003C 0030             		move.w	#$3C,$30(a0)
000156DE 117C 0001 0034             		move.b	#1,$34(a0)
000156E4 1168 0028 0038             		move.b	$28(a0),$38(a0)
000156EA                            
000156EA                            Obj66_Action:				; XREF: Obj66_Index
000156EA 6100 0000                  		bsr.w	Obj66_ChkSwitch
000156EE 4A28 0001                  		tst.b	1(a0)
000156F2 6A00 0000                  		bpl.w	Obj66_Display
000156F6 323C 0030                  		move.w	#$30,d1
000156FA 3401                       		move.w	d1,d2
000156FC 3602                       		move.w	d2,d3
000156FE 5243                       		addq.w	#1,d3
00015700 3828 0008                  		move.w	8(a0),d4
00015704 6100 A80A                  		bsr.w	SolidObject
00015708 0828 0005 0022             		btst	#5,$22(a0)
0001570E 6700 0000                  		beq.w	Obj66_Display
00015712 43F8 D000                  		lea	($FFFFD000).w,a1
00015716 720E                       		moveq	#$E,d1
00015718 3029 0008                  		move.w	8(a1),d0
0001571C B068 0008                  		cmp.w	8(a0),d0
00015720 6500                       		bcs.s	Obj66_GrabSonic
00015722 7207                       		moveq	#7,d1
00015724                            
00015724                            Obj66_GrabSonic:
00015724 B228 001A                  		cmp.b	$1A(a0),d1
00015728 6600                       		bne.s	Obj66_Display
0001572A 1141 0032                  		move.b	d1,$32(a0)
0001572E 5828 0024                  		addq.b	#4,$24(a0)
00015732 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015738 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
0001573E 337C 0800 0014             		move.w	#$800,$14(a1)
00015744 337C 0000 0010             		move.w	#0,$10(a1)
0001574A 337C 0000 0012             		move.w	#0,$12(a1)
00015750 08A8 0005 0022             		bclr	#5,$22(a0)
00015756 08A9 0005 0022             		bclr	#5,$22(a1)
0001575C 08E9 0001 0022             		bset	#1,$22(a1)
00015762 3429 0008                  		move.w	8(a1),d2
00015766 3629 000C                  		move.w	$C(a1),d3
0001576A 6100 0000                  		bsr.w	Obj66_ChgPos
0001576E D569 0008                  		add.w	d2,8(a1)
00015772 D769 000C                  		add.w	d3,$C(a1)
00015776 E0E9 0008                  		asr	8(a1)
0001577A E0E9 000C                  		asr	$C(a1)
0001577E                            
0001577E                            Obj66_Display:				; XREF: Obj66_Index
0001577E 6000 A468                  		bra.w	MarkObjGone
00015782                            ; ===========================================================================
00015782                            
00015782                            Obj66_Release:				; XREF: Obj66_Index
00015782 1028 001A                  		move.b	$1A(a0),d0
00015786 0C00 0004                  		cmpi.b	#4,d0
0001578A 6700                       		beq.s	loc_151C8
0001578C 0C00 0007                  		cmpi.b	#7,d0
00015790 6600                       		bne.s	loc_151F8
00015792                            
00015792                            loc_151C8:
00015792 B028 0032                  		cmp.b	$32(a0),d0
00015796 6700                       		beq.s	loc_151F8
00015798 43F8 D000                  		lea	($FFFFD000).w,a1
0001579C 337C 0000 0010             		move.w	#0,$10(a1)
000157A2 337C 0800 0012             		move.w	#$800,$12(a1)
000157A8 0C00 0004                  		cmpi.b	#4,d0
000157AC 6700                       		beq.s	loc_151F0
000157AE 337C 0800 0010             		move.w	#$800,$10(a1)
000157B4 337C 0800 0012             		move.w	#$800,$12(a1)
000157BA                            
000157BA                            loc_151F0:
000157BA 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
000157BE 5928 0024                  		subq.b	#4,$24(a0)
000157C2                            
000157C2                            loc_151F8:
000157C2 6100                       		bsr.s	Obj66_ChkSwitch
000157C4 6100                       		bsr.s	Obj66_ChgPos
000157C6 6000 A420                  		bra.w	MarkObjGone
000157CA                            
000157CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157CA                            
000157CA                            
000157CA                            Obj66_ChkSwitch:			; XREF: Obj66_Action
000157CA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000157CE 7000                       		moveq	#0,d0
000157D0 1028 0038                  		move.b	$38(a0),d0
000157D4 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000157DA 6700                       		beq.s	loc_15224	; if not, branch
000157DC 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
000157E0 6600                       		bne.s	Obj66_Animate	; if yes, branch
000157E2 4428 0034                  		neg.b	$34(a0)
000157E6 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
000157EC 6000                       		bra.s	Obj66_Animate
000157EE                            ; ===========================================================================
000157EE                            
000157EE                            loc_15224:
000157EE 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
000157F2                            
000157F2                            Obj66_Animate:
000157F2 5328 001E                  		subq.b	#1,$1E(a0)
000157F6 6A00                       		bpl.s	locret_15246
000157F8 117C 0007 001E             		move.b	#7,$1E(a0)
000157FE 1228 0034                  		move.b	$34(a0),d1
00015802 1028 001A                  		move.b	$1A(a0),d0
00015806 D001                       		add.b	d1,d0
00015808 0200 000F                  		andi.b	#$F,d0
0001580C 1140 001A                  		move.b	d0,$1A(a0)
00015810                            
00015810                            locret_15246:
00015810 4E75                       		rts	
00015812                            ; End of function Obj66_ChkSwitch
00015812                            
00015812                            
00015812                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015812                            
00015812                            
00015812                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015812 43F8 D000                  		lea	($FFFFD000).w,a1
00015816 7000                       		moveq	#0,d0
00015818 1028 001A                  		move.b	$1A(a0),d0
0001581C D040                       		add.w	d0,d0
0001581E 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015822 101A                       		move.b	(a2)+,d0
00015824 4880                       		ext.w	d0
00015826 D068 0008                  		add.w	8(a0),d0
0001582A 3340 0008                  		move.w	d0,8(a1)
0001582E 101A                       		move.b	(a2)+,d0
00015830 4880                       		ext.w	d0
00015832 D068 000C                  		add.w	$C(a0),d0
00015836 3340 000C                  		move.w	d0,$C(a1)
0001583A 4E75                       		rts	
0001583C                            ; End of function Obj66_ChgPos
0001583C                            
0001583C                            ; ===========================================================================
0001583C E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015840 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015844 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015848 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
0001584C 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015850 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015854 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015858 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
0001585C                            ; ---------------------------------------------------------------------------
0001585C                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001585C                            ; ---------------------------------------------------------------------------
0001585C                            Map_obj66:
0001585C                            	include "_maps\obj66.asm"
0001585C                            ; ---------------------------------------------------------------------------
0001585C                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001585C                            ; ---------------------------------------------------------------------------
0001585C 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015860 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015864 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015868 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
0001586C 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015870 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015874 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015878 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
0001587C 0000                       		dc.w byte_154A4-Map_obj66
0001587E 06                         byte_152B4:	dc.b 6
0001587F E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015884 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015889 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
0001588E E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015893 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015898 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
0001589D 06                         byte_152D3:	dc.b 6
0001589E F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000158A3 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000158A8 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000158AD F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000158B2 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000158B7 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000158BC 06                         byte_152F2:	dc.b 6
000158BD 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000158C2 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000158C7 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000158CC 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000158D1 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
000158D6 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
000158DB 06                         byte_15311:	dc.b 6
000158DC 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
000158E1 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
000158E6 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
000158EB 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
000158F0 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
000158F5 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
000158FA 06                         byte_15330:	dc.b 6
000158FB 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015900 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015905 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
0001590A 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
0001590F 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015914 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015919 06                         byte_1534F:	dc.b 6
0001591A 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
0001591F 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015924 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015929 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
0001592E 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015933 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015938 06                         byte_1536E:	dc.b 6
00015939 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
0001593E 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015943 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015948 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
0001594D 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015952 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015957 06                         byte_1538D:	dc.b 6
00015958 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
0001595D F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015962 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015967 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
0001596C 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015971 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015976 06                         byte_153AC:	dc.b 6
00015977 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
0001597C 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015981 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015986 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
0001598B 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015990 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015995 06                         byte_153CB:	dc.b 6
00015996 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
0001599B E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000159A0 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000159A5 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000159AA F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000159AF F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000159B4 06                         byte_153EA:	dc.b 6
000159B5 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000159BA E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000159BF D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000159C4 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
000159C9 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
000159CE E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
000159D3 06                         byte_15409:	dc.b 6
000159D4 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
000159D9 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
000159DE CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
000159E3 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
000159E8 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
000159ED E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
000159F2 06                         byte_15428:	dc.b 6
000159F3 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
000159F8 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
000159FD C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015A02 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015A07 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015A0C E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015A11 06                         byte_15447:	dc.b 6
00015A12 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015A17 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015A1C CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015A21 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015A26 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015A2B E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015A30 06                         byte_15466:	dc.b 6
00015A31 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015A36 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015A3B D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015A40 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015A45 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015A4A E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015A4F 06                         byte_15485:	dc.b 6
00015A50 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015A55 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015A5A DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015A5F DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015A64 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015A69 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015A6E 0C                         byte_154A4:	dc.b $C
00015A6F C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015A74 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015A79 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015A7E C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015A83 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015A88 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015A8D 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015A92 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015A97 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015A9C 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015AA1 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015AA6 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015AAC 00                         		even
00015AAC 00                         		even
00015AAC                            
00015AAC                            ; ===========================================================================
00015AAC                            ; ---------------------------------------------------------------------------
00015AAC                            ; Object 67 - disc that	you run	around (SBZ)
00015AAC                            ; ---------------------------------------------------------------------------
00015AAC                            
00015AAC                            Obj67:					; XREF: Obj_Index
00015AAC 7000                       		moveq	#0,d0
00015AAE 1028 0024                  		move.b	$24(a0),d0
00015AB2 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015AB6 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015ABA                            ; ===========================================================================
00015ABA 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015ABC 0000                       		dc.w Obj67_Action-Obj67_Index
00015ABE                            ; ===========================================================================
00015ABE                            
00015ABE                            Obj67_Main:				; XREF: Obj67_Index
00015ABE 5428 0024                  		addq.b	#2,$24(a0)
00015AC2 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015ACA 317C C344 0002             		move.w	#$C344,2(a0)
00015AD0 117C 0004 0001             		move.b	#4,1(a0)
00015AD6 117C 0004 0018             		move.b	#4,$18(a0)
00015ADC 117C 0008 0019             		move.b	#8,$19(a0)
00015AE2 3168 0008 0032             		move.w	8(a0),$32(a0)
00015AE8 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015AEE 117C 0018 0034             		move.b	#$18,$34(a0)
00015AF4 117C 0048 0038             		move.b	#$48,$38(a0)
00015AFA 1228 0028                  		move.b	$28(a0),d1	; get object type
00015AFE 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015B02 6700                       		beq.s	loc_15546
00015B04 117C 0010 0034             		move.b	#$10,$34(a0)
00015B0A 117C 0038 0038             		move.b	#$38,$38(a0)
00015B10                            
00015B10                            loc_15546:
00015B10 1228 0028                  		move.b	$28(a0),d1	; get object type
00015B14 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015B18 4881                       		ext.w	d1
00015B1A E741                       		asl.w	#3,d1
00015B1C 3141 0036                  		move.w	d1,$36(a0)
00015B20 1028 0022                  		move.b	$22(a0),d0
00015B24 E418                       		ror.b	#2,d0
00015B26 0200 00C0                  		andi.b	#-$40,d0
00015B2A 1140 0026                  		move.b	d0,$26(a0)
00015B2E                            
00015B2E                            Obj67_Action:				; XREF: Obj67_Index
00015B2E 6100 0000                  		bsr.w	Obj67_MoveSonic
00015B32 6100 0000                  		bsr.w	Obj67_MoveSpot
00015B36 6000 0000                  		bra.w	Obj67_ChkDel
00015B3A                            ; ===========================================================================
00015B3A                            
00015B3A                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015B3A 7400                       		moveq	#0,d2
00015B3C 1428 0038                  		move.b	$38(a0),d2
00015B40 3602                       		move.w	d2,d3
00015B42 D643                       		add.w	d3,d3
00015B44 43F8 D000                  		lea	($FFFFD000).w,a1
00015B48 3029 0008                  		move.w	8(a1),d0
00015B4C 9068 0032                  		sub.w	$32(a0),d0
00015B50 D042                       		add.w	d2,d0
00015B52 B043                       		cmp.w	d3,d0
00015B54 6400                       		bcc.s	loc_155A8
00015B56 3229 000C                  		move.w	$C(a1),d1
00015B5A 9268 0030                  		sub.w	$30(a0),d1
00015B5E D242                       		add.w	d2,d1
00015B60 B243                       		cmp.w	d3,d1
00015B62 6400                       		bcc.s	loc_155A8
00015B64 0829 0001 0022             		btst	#1,$22(a1)
00015B6A 6700                       		beq.s	loc_155B8
00015B6C 4228 003A                  		clr.b	$3A(a0)
00015B70 4E75                       		rts	
00015B72                            ; ===========================================================================
00015B72                            
00015B72                            loc_155A8:
00015B72 4A28 003A                  		tst.b	$3A(a0)
00015B76 6700                       		beq.s	locret_155B6
00015B78 4229 0038                  		clr.b	$38(a1)
00015B7C 4228 003A                  		clr.b	$3A(a0)
00015B80                            
00015B80                            locret_155B6:
00015B80 4E75                       		rts	
00015B82                            ; ===========================================================================
00015B82                            
00015B82                            loc_155B8:
00015B82 4A28 003A                  		tst.b	$3A(a0)
00015B86 6600                       		bne.s	loc_155E2
00015B88 117C 0001 003A             		move.b	#1,$3A(a0)
00015B8E 0829 0002 0022             		btst	#2,$22(a1)
00015B94 6600                       		bne.s	loc_155D0
00015B96 4229 001C                  		clr.b	$1C(a1)
00015B9A                            
00015B9A                            loc_155D0:
00015B9A 08A9 0005 0022             		bclr	#5,$22(a1)
00015BA0 137C 0001 001D             		move.b	#1,$1D(a1)
00015BA6 137C 0001 0038             		move.b	#1,$38(a1)
00015BAC                            
00015BAC                            loc_155E2:
00015BAC 3029 0014                  		move.w	$14(a1),d0
00015BB0 4A68 0036                  		tst.w	$36(a0)
00015BB4 6A00                       		bpl.s	loc_15608
00015BB6 0C40 FC00                  		cmpi.w	#-$400,d0
00015BBA 6F00                       		ble.s	loc_155FA
00015BBC 337C FC00 0014             		move.w	#-$400,$14(a1)
00015BC2 4E75                       		rts	
00015BC4                            ; ===========================================================================
00015BC4                            
00015BC4                            loc_155FA:
00015BC4 0C40 F100                  		cmpi.w	#-$F00,d0
00015BC8 6C00                       		bge.s	locret_15606
00015BCA 337C F100 0014             		move.w	#-$F00,$14(a1)
00015BD0                            
00015BD0                            locret_15606:
00015BD0 4E75                       		rts	
00015BD2                            ; ===========================================================================
00015BD2                            
00015BD2                            loc_15608:
00015BD2 0C40 0400                  		cmpi.w	#$400,d0
00015BD6 6C00                       		bge.s	loc_15616
00015BD8 337C 0400 0014             		move.w	#$400,$14(a1)
00015BDE 4E75                       		rts	
00015BE0                            ; ===========================================================================
00015BE0                            
00015BE0                            loc_15616:
00015BE0 0C40 0F00                  		cmpi.w	#$F00,d0
00015BE4 6F00                       		ble.s	locret_15622
00015BE6 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015BEC                            
00015BEC                            locret_15622:
00015BEC 4E75                       		rts	
00015BEE                            ; ===========================================================================
00015BEE                            
00015BEE                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015BEE 3028 0036                  		move.w	$36(a0),d0
00015BF2 D168 0026                  		add.w	d0,$26(a0)
00015BF6 1028 0026                  		move.b	$26(a0),d0
00015BFA 4EB9 0000 2BE8             		jsr	(CalcSine).l
00015C00 3428 0030                  		move.w	$30(a0),d2
00015C04 3628 0032                  		move.w	$32(a0),d3
00015C08 7800                       		moveq	#0,d4
00015C0A 1828 0034                  		move.b	$34(a0),d4
00015C0E E14C                       		lsl.w	#8,d4
00015C10 2A04                       		move.l	d4,d5
00015C12 C9C0                       		muls.w	d0,d4
00015C14 4844                       		swap	d4
00015C16 CBC1                       		muls.w	d1,d5
00015C18 4845                       		swap	d5
00015C1A D842                       		add.w	d2,d4
00015C1C DA43                       		add.w	d3,d5
00015C1E 3144 000C                  		move.w	d4,$C(a0)
00015C22 3145 0008                  		move.w	d5,8(a0)
00015C26 4E75                       		rts	
00015C28                            ; ===========================================================================
00015C28                            
00015C28                            Obj67_ChkDel:				; XREF: Obj67_Action
00015C28 3028 0032                  		move.w	$32(a0),d0
00015C2C 0240 FF80                  		andi.w	#-$80,d0
00015C30 3238 F700                  		move.w	($FFFFF700).w,d1
00015C34 0441 0080                  		subi.w	#$80,d1
00015C38 0241 FF80                  		andi.w	#-$80,d1
00015C3C 9041                       		sub.w	d1,d0
00015C3E 0C40 0280                  		cmpi.w	#$280,d0
00015C42 6200                       		bhi.s	Obj67_Delete
00015C44 4EF9 0000 DB40             		jmp	DisplaySprite
00015C4A                            ; ===========================================================================
00015C4A                            
00015C4A                            Obj67_Delete:
00015C4A 4EF9 0000 DB7C             		jmp	DeleteObject
00015C50                            ; ===========================================================================
00015C50                            ; ---------------------------------------------------------------------------
00015C50                            ; Sprite mappings - disc that you run around (SBZ)
00015C50                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015C50                            ; part of the level tiles.)
00015C50                            ; ---------------------------------------------------------------------------
00015C50                            Map_obj67:
00015C50                            	include "_maps\obj67.asm"
00015C50                            ; ---------------------------------------------------------------------------
00015C50                            ; Sprite mappings - disc that you run around (SBZ)
00015C50                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015C50                            ; part of the level tiles.)
00015C50                            ; ---------------------------------------------------------------------------
00015C50 0000                       		dc.w byte_15688-Map_obj67
00015C52 01                         byte_15688:	dc.b 1
00015C53 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015C58                            		even
00015C58                            		even
00015C58                            
00015C58                            ; ===========================================================================
00015C58                            ; ---------------------------------------------------------------------------
00015C58                            ; Object 68 - conveyor belts (SBZ)
00015C58                            ; ---------------------------------------------------------------------------
00015C58                            
00015C58                            Obj68:					; XREF: Obj_Index
00015C58 7000                       		moveq	#0,d0
00015C5A 1028 0024                  		move.b	$24(a0),d0
00015C5E 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015C62 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015C66                            ; ===========================================================================
00015C66 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015C68 0000                       		dc.w Obj68_Action-Obj68_Index
00015C6A                            ; ===========================================================================
00015C6A                            
00015C6A                            Obj68_Main:				; XREF: Obj68_Index
00015C6A 5428 0024                  		addq.b	#2,$24(a0)
00015C6E 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015C74 1228 0028                  		move.b	$28(a0),d1	; get object type
00015C78 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015C7C 6700                       		beq.s	loc_156BA	; if zero, branch
00015C7E 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015C84                            
00015C84                            loc_156BA:
00015C84 1228 0028                  		move.b	$28(a0),d1	; get object type
00015C88 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015C8C 4881                       		ext.w	d1
00015C8E E841                       		asr.w	#4,d1
00015C90 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015C94                            
00015C94                            Obj68_Action:				; XREF: Obj68_Index
00015C94 6100                       		bsr.s	Obj68_MoveSonic
00015C96 3028 0008                  		move.w	8(a0),d0
00015C9A 0240 FF80                  		andi.w	#$FF80,d0
00015C9E 3238 F700                  		move.w	($FFFFF700).w,d1
00015CA2 0441 0080                  		subi.w	#$80,d1
00015CA6 0241 FF80                  		andi.w	#$FF80,d1
00015CAA 9041                       		sub.w	d1,d0
00015CAC 0C40 0280                  		cmpi.w	#$280,d0
00015CB0 6200                       		bhi.s	Obj68_Delete
00015CB2 4E75                       		rts	
00015CB4                            ; ===========================================================================
00015CB4                            
00015CB4                            Obj68_Delete:
00015CB4 4EF9 0000 DB7C             		jmp	DeleteObject
00015CBA                            ; ===========================================================================
00015CBA                            
00015CBA                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015CBA 7400                       		moveq	#0,d2
00015CBC 1428 0038                  		move.b	$38(a0),d2
00015CC0 3602                       		move.w	d2,d3
00015CC2 D643                       		add.w	d3,d3
00015CC4 43F8 D000                  		lea	($FFFFD000).w,a1
00015CC8 3029 0008                  		move.w	8(a1),d0
00015CCC 9068 0008                  		sub.w	8(a0),d0
00015CD0 D042                       		add.w	d2,d0
00015CD2 B043                       		cmp.w	d3,d0
00015CD4 6400                       		bcc.s	locret_1572E
00015CD6 3229 000C                  		move.w	$C(a1),d1
00015CDA 9268 000C                  		sub.w	$C(a0),d1
00015CDE 0641 0030                  		addi.w	#$30,d1
00015CE2 0C41 0030                  		cmpi.w	#$30,d1
00015CE6 6400                       		bcc.s	locret_1572E
00015CE8 0829 0001 0022             		btst	#1,$22(a1)
00015CEE 6600                       		bne.s	locret_1572E
00015CF0 3028 0036                  		move.w	$36(a0),d0
00015CF4 D169 0008                  		add.w	d0,8(a1)
00015CF8                            
00015CF8                            locret_1572E:
00015CF8 4E75                       		rts	
00015CFA                            
00015CFA                            ; ===========================================================================
00015CFA                            ; ---------------------------------------------------------------------------
00015CFA                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00015CFA                            ; ---------------------------------------------------------------------------
00015CFA                            
00015CFA                            Obj69:					; XREF: Obj_Index
00015CFA 7000                       		moveq	#0,d0
00015CFC 1028 0024                  		move.b	$24(a0),d0
00015D00 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015D04 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00015D08                            ; ===========================================================================
00015D08 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00015D0A 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00015D0C 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015D0E                            ; ===========================================================================
00015D0E                            
00015D0E                            Obj69_Main:				; XREF: Obj69_Index
00015D0E 5428 0024                  		addq.b	#2,$24(a0)
00015D12 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00015D1A 317C 4492 0002             		move.w	#$4492,2(a0)
00015D20 0028 0004 0001             		ori.b	#4,1(a0)
00015D26 117C 0080 0019             		move.b	#$80,$19(a0)
00015D2C 7000                       		moveq	#0,d0
00015D2E 1028 0028                  		move.b	$28(a0),d0
00015D32 0240 000F                  		andi.w	#$F,d0
00015D36 C0FC 003C                  		mulu.w	#$3C,d0
00015D3A 3140 0032                  		move.w	d0,$32(a0)
00015D3E 4A28 0028                  		tst.b	$28(a0)
00015D42 6A00                       		bpl.s	Obj69_Trapdoor
00015D44 5428 0024                  		addq.b	#2,$24(a0)
00015D48 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00015D50 317C 04DF 0002             		move.w	#$4DF,2(a0)
00015D56 117C 0010 0019             		move.b	#$10,$19(a0)
00015D5C 117C 0002 001C             		move.b	#2,$1C(a0)
00015D62 7000                       		moveq	#0,d0
00015D64 1028 0028                  		move.b	$28(a0),d0	; get object type
00015D68 3200                       		move.w	d0,d1
00015D6A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015D6E C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00015D72 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00015D76 3140 0032                  		move.w	d0,$32(a0)
00015D7A 0241 0070                  		andi.w	#$70,d1
00015D7E 0641 0010                  		addi.w	#$10,d1
00015D82 E549                       		lsl.w	#2,d1
00015D84 5341                       		subq.w	#1,d1
00015D86 3141 0036                  		move.w	d1,$36(a0)
00015D8A 6000                       		bra.s	Obj69_Spinner
00015D8C                            ; ===========================================================================
00015D8C                            
00015D8C                            Obj69_Trapdoor:				; XREF: Obj69_Index
00015D8C 5368 0030                  		subq.w	#1,$30(a0)
00015D90 6A00                       		bpl.s	Obj69_Animate
00015D92 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015D98 0868 0000 001C             		bchg	#0,$1C(a0)
00015D9E 4A28 0001                  		tst.b	1(a0)
00015DA2 6A00                       		bpl.s	Obj69_Animate
00015DA4 303C 00BB                  		move.w	#$BB,d0
00015DA8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play door sound
00015DAE                            
00015DAE                            Obj69_Animate:
00015DAE 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015DB4 4EB9 0000 AC10             		jsr	AnimateSprite
00015DBA 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00015DBE 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00015DC0 323C 004B                  		move.w	#$4B,d1
00015DC4 343C 000C                  		move.w	#$C,d2
00015DC8 3602                       		move.w	d2,d3
00015DCA 5243                       		addq.w	#1,d3
00015DCC 3828 0008                  		move.w	8(a0),d4
00015DD0 6100 A13E                  		bsr.w	SolidObject
00015DD4 6000 9E12                  		bra.w	MarkObjGone
00015DD8                            ; ===========================================================================
00015DD8                            
00015DD8                            Obj69_NotSolid:
00015DD8 0828 0003 0022             		btst	#3,$22(a0)
00015DDE 6700                       		beq.s	Obj69_Display
00015DE0 43F8 D000                  		lea	($FFFFD000).w,a1
00015DE4 08A9 0003 0022             		bclr	#3,$22(a1)
00015DEA 08A8 0003 0022             		bclr	#3,$22(a0)
00015DF0 4228 0025                  		clr.b	$25(a0)
00015DF4                            
00015DF4                            Obj69_Display:
00015DF4 6000 9DF2                  		bra.w	MarkObjGone
00015DF8                            ; ===========================================================================
00015DF8                            
00015DF8                            Obj69_Spinner:				; XREF: Obj69_Index
00015DF8 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015DFC C068 0036                  		and.w	$36(a0),d0
00015E00 6600                       		bne.s	Obj69_Delay
00015E02 117C 0001 0034             		move.b	#1,$34(a0)
00015E08                            
00015E08                            Obj69_Delay:
00015E08 4A28 0034                  		tst.b	$34(a0)
00015E0C 6700                       		beq.s	Obj69_Animate2
00015E0E 5368 0030                  		subq.w	#1,$30(a0)
00015E12 6A00                       		bpl.s	Obj69_Animate2
00015E14 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015E1A 4228 0034                  		clr.b	$34(a0)
00015E1E 0868 0000 001C             		bchg	#0,$1C(a0)
00015E24                            
00015E24                            Obj69_Animate2:
00015E24 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015E2A 4EB9 0000 AC10             		jsr	AnimateSprite
00015E30 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00015E34 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00015E36 323C 001B                  		move.w	#$1B,d1
00015E3A 343C 0007                  		move.w	#7,d2
00015E3E 3602                       		move.w	d2,d3
00015E40 5243                       		addq.w	#1,d3
00015E42 3828 0008                  		move.w	8(a0),d4
00015E46 6100 A0C8                  		bsr.w	SolidObject
00015E4A 6000 9D9C                  		bra.w	MarkObjGone
00015E4E                            ; ===========================================================================
00015E4E                            
00015E4E                            Obj69_NotSolid2:
00015E4E 0828 0003 0022             		btst	#3,$22(a0)
00015E54 6700                       		beq.s	Obj69_Display2
00015E56 43F8 D000                  		lea	($FFFFD000).w,a1
00015E5A 08A9 0003 0022             		bclr	#3,$22(a1)
00015E60 08A8 0003 0022             		bclr	#3,$22(a0)
00015E66 4228 0025                  		clr.b	$25(a0)
00015E6A                            
00015E6A                            Obj69_Display2:
00015E6A 6000 9D7C                  		bra.w	MarkObjGone
00015E6E                            ; ===========================================================================
00015E6E                            Ani_obj69:
00015E6E                            	include "_anim\obj69.asm"
00015E6E                            ; ---------------------------------------------------------------------------
00015E6E                            ; Animation script - trapdoor (SBZ)
00015E6E                            ; ---------------------------------------------------------------------------
00015E6E 0000                       		dc.w byte_158AC-Ani_obj69
00015E70 0000                       		dc.w byte_158B2-Ani_obj69
00015E72 0000                       		dc.w byte_158B8-Ani_obj69
00015E74 0000                       		dc.w byte_158CC-Ani_obj69
00015E76 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00015E7C 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00015E82 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015E8F 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015E96 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015EA3 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015EAA                            		even
00015EAA                            		even
00015EAA                            
00015EAA                            ; ---------------------------------------------------------------------------
00015EAA                            ; Sprite mappings - trapdoor (SBZ)
00015EAA                            ; ---------------------------------------------------------------------------
00015EAA                            Map_obj69:
00015EAA                            	include "_maps\obj69.asm"
00015EAA                            ; ---------------------------------------------------------------------------
00015EAA                            ; Sprite mappings - trapdoor (SBZ)
00015EAA                            ; ---------------------------------------------------------------------------
00015EAA 0000                       		dc.w byte_158E6-Map_obj69
00015EAC 0000                       		dc.w byte_158FB-Map_obj69
00015EAE 0000                       		dc.w byte_15924-Map_obj69
00015EB0 04                         byte_158E6:	dc.b 4
00015EB1 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00015EB6 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00015EBB F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00015EC0 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00015EC5 08                         byte_158FB:	dc.b 8
00015EC6 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00015ECB 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00015ED0 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00015ED5 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00015EDA F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00015EDF 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00015EE4 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00015EE9 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00015EEE 04                         byte_15924:	dc.b 4
00015EEF 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00015EF4 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00015EF9 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00015EFE 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00015F04 00                         		even
00015F04 00                         		even
00015F04                            
00015F04                            ; ---------------------------------------------------------------------------
00015F04                            ; Sprite mappings - spinning platforms (SBZ)
00015F04                            ; ---------------------------------------------------------------------------
00015F04                            Map_obj69a:
00015F04                            	include "_maps\obj69a.asm"
00015F04                            ; ---------------------------------------------------------------------------
00015F04                            ; Sprite mappings - spinning platforms (SBZ)
00015F04                            ; ---------------------------------------------------------------------------
00015F04 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00015F08 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00015F0C 0000                       		dc.w byte_15970-Map_obj69a
00015F0E 02                         byte_15944:	dc.b 2
00015F0F F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00015F14 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00015F19 02                         byte_1594F:	dc.b 2
00015F1A F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00015F1F 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00015F24 02                         byte_1595A:	dc.b 2
00015F25 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00015F2A 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00015F2F 02                         byte_15965:	dc.b 2
00015F30 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00015F35 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00015F3A 02                         byte_15970:	dc.b 2
00015F3B F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00015F40 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00015F46 00                         		even
00015F46 00                         		even
00015F46                            
00015F46                            ; ===========================================================================
00015F46                            ; ---------------------------------------------------------------------------
00015F46                            ; Object 6A - ground saws and pizza cutters (SBZ)
00015F46                            ; ---------------------------------------------------------------------------
00015F46                            
00015F46                            Obj6A:					; XREF: Obj_Index
00015F46 7000                       		moveq	#0,d0
00015F48 1028 0024                  		move.b	$24(a0),d0
00015F4C 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00015F50 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00015F54                            ; ===========================================================================
00015F54 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00015F56 0000                       		dc.w Obj6A_Action-Obj6A_Index
00015F58                            ; ===========================================================================
00015F58                            
00015F58                            Obj6A_Main:				; XREF: Obj6A_Index
00015F58 5428 0024                  		addq.b	#2,$24(a0)
00015F5C 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00015F64 317C 43B5 0002             		move.w	#$43B5,2(a0)
00015F6A 117C 0004 0001             		move.b	#4,1(a0)
00015F70 117C 0004 0018             		move.b	#4,$18(a0)
00015F76 117C 0020 0019             		move.b	#$20,$19(a0)
00015F7C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015F82 3168 000C 0038             		move.w	$C(a0),$38(a0)
00015F88 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00015F8E 6400                       		bcc.s	Obj6A_Action
00015F90 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015F96                            
00015F96                            Obj6A_Action:				; XREF: Obj6A_Index
00015F96 7000                       		moveq	#0,d0
00015F98 1028 0028                  		move.b	$28(a0),d0
00015F9C 0240 0007                  		andi.w	#7,d0
00015FA0 D040                       		add.w	d0,d0
00015FA2 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00015FA6 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00015FAA 3028 003A                  		move.w	$3A(a0),d0
00015FAE 0240 FF80                  		andi.w	#$FF80,d0
00015FB2 3238 F700                  		move.w	($FFFFF700).w,d1
00015FB6 0441 0080                  		subi.w	#$80,d1
00015FBA 0241 FF80                  		andi.w	#$FF80,d1
00015FBE 9041                       		sub.w	d1,d0
00015FC0 0C40 0280                  		cmpi.w	#$280,d0
00015FC4 6200                       		bhi.s	Obj6A_Delete
00015FC6 4EF9 0000 DB40             		jmp	DisplaySprite
00015FCC                            ; ===========================================================================
00015FCC                            
00015FCC                            Obj6A_Delete:
00015FCC 4EF9 0000 DB7C             		jmp	DeleteObject
00015FD2                            ; ===========================================================================
00015FD2 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00015FD6 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00015FDA 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00015FDC                            ; ===========================================================================
00015FDC                            
00015FDC                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00015FDC 4E75                       		rts	
00015FDE                            ; ===========================================================================
00015FDE                            
00015FDE                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00015FDE 323C 0060                  		move.w	#$60,d1
00015FE2 7000                       		moveq	#0,d0
00015FE4 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00015FE8 0828 0000 0022             		btst	#0,$22(a0)
00015FEE 6700                       		beq.s	Obj6A_Animate01
00015FF0 4440                       		neg.w	d0
00015FF2 D041                       		add.w	d1,d0
00015FF4                            
00015FF4                            Obj6A_Animate01:
00015FF4 3228 003A                  		move.w	$3A(a0),d1
00015FF8 9240                       		sub.w	d0,d1
00015FFA 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00015FFE 5328 001E                  		subq.b	#1,$1E(a0)
00016002 6A00                       		bpl.s	loc_15A46
00016004 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
0001600A 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016010                            
00016010                            loc_15A46:
00016010 4A28 0001                  		tst.b	1(a0)
00016014 6A00                       		bpl.s	locret_15A60
00016016 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001601A 0240 000F                  		andi.w	#$F,d0
0001601E 6600                       		bne.s	locret_15A60
00016020 303C 00B0                  		move.w	#$B0,d0
00016024 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
0001602A                            
0001602A                            locret_15A60:
0001602A 4E75                       		rts	
0001602C                            ; ===========================================================================
0001602C                            
0001602C                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
0001602C 323C 0030                  		move.w	#$30,d1
00016030 7000                       		moveq	#0,d0
00016032 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016036 0828 0000 0022             		btst	#0,$22(a0)
0001603C 6700                       		beq.s	Obj6A_Animate02
0001603E 4440                       		neg.w	d0
00016040 0640 0080                  		addi.w	#$80,d0
00016044                            
00016044                            Obj6A_Animate02:
00016044 3228 0038                  		move.w	$38(a0),d1
00016048 9240                       		sub.w	d0,d1
0001604A 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
0001604E 5328 001E                  		subq.b	#1,$1E(a0)
00016052 6A00                       		bpl.s	loc_15A96
00016054 117C 0002 001E             		move.b	#2,$1E(a0)
0001605A 0868 0000 001A             		bchg	#0,$1A(a0)
00016060                            
00016060                            loc_15A96:
00016060 4A28 0001                  		tst.b	1(a0)
00016064 6A00                       		bpl.s	locret_15AB0
00016066 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001606A 0C00 0018                  		cmpi.b	#$18,d0
0001606E 6600                       		bne.s	locret_15AB0
00016070 303C 00B0                  		move.w	#$B0,d0
00016074 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
0001607A                            
0001607A                            locret_15AB0:
0001607A 4E75                       		rts	
0001607C                            ; ===========================================================================
0001607C                            
0001607C                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
0001607C 4A28 003D                  		tst.b	$3D(a0)
00016080 6600                       		bne.s	Obj6A_Animate03
00016082 3038 D008                  		move.w	($FFFFD008).w,d0
00016086 0440 00C0                  		subi.w	#$C0,d0
0001608A 6500                       		bcs.s	loc_15B02
0001608C 9068 0008                  		sub.w	8(a0),d0
00016090 6500                       		bcs.s	loc_15B02
00016092 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016096 0440 0080                  		subi.w	#$80,d0
0001609A B068 000C                  		cmp.w	$C(a0),d0
0001609E 6400                       		bcc.s	locret_15B04
000160A0 0640 0100                  		addi.w	#$100,d0
000160A4 B068 000C                  		cmp.w	$C(a0),d0
000160A8 6500                       		bcs.s	locret_15B04
000160AA 117C 0001 003D             		move.b	#1,$3D(a0)
000160B0 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000160B6 117C 00A2 0020             		move.b	#$A2,$20(a0)
000160BC 117C 0002 001A             		move.b	#2,$1A(a0)
000160C2 303C 00B0                  		move.w	#$B0,d0
000160C6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
000160CC                            
000160CC                            loc_15B02:
000160CC 588F                       		addq.l	#4,sp
000160CE                            
000160CE                            locret_15B04:
000160CE 4E75                       		rts	
000160D0                            ; ===========================================================================
000160D0                            
000160D0                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000160D0 4EB9 0000 DB1A             		jsr	SpeedToPos
000160D6 3168 0008 003A             		move.w	8(a0),$3A(a0)
000160DC 5328 001E                  		subq.b	#1,$1E(a0)
000160E0 6A00                       		bpl.s	locret_15B24
000160E2 117C 0002 001E             		move.b	#2,$1E(a0)
000160E8 0868 0000 001A             		bchg	#0,$1A(a0)
000160EE                            
000160EE                            locret_15B24:
000160EE 4E75                       		rts	
000160F0                            ; ===========================================================================
000160F0                            
000160F0                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
000160F0 4A28 003D                  		tst.b	$3D(a0)
000160F4 6600                       		bne.s	Obj6A_Animate04
000160F6 3038 D008                  		move.w	($FFFFD008).w,d0
000160FA 0640 00E0                  		addi.w	#$E0,d0
000160FE 9068 0008                  		sub.w	8(a0),d0
00016102 6400                       		bcc.s	loc_15B74
00016104 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016108 0440 0080                  		subi.w	#$80,d0
0001610C B068 000C                  		cmp.w	$C(a0),d0
00016110 6400                       		bcc.s	locret_15B76
00016112 0640 0100                  		addi.w	#$100,d0
00016116 B068 000C                  		cmp.w	$C(a0),d0
0001611A 6500                       		bcs.s	locret_15B76
0001611C 117C 0001 003D             		move.b	#1,$3D(a0)
00016122 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00016128 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001612E 117C 0002 001A             		move.b	#2,$1A(a0)
00016134 303C 00B0                  		move.w	#$B0,d0
00016138 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
0001613E                            
0001613E                            loc_15B74:
0001613E 588F                       		addq.l	#4,sp
00016140                            
00016140                            locret_15B76:
00016140 4E75                       		rts	
00016142                            ; ===========================================================================
00016142                            
00016142                            Obj6A_Animate04:
00016142 4EB9 0000 DB1A             		jsr	SpeedToPos
00016148 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001614E 5328 001E                  		subq.b	#1,$1E(a0)
00016152 6A00                       		bpl.s	locret_15B96
00016154 117C 0002 001E             		move.b	#2,$1E(a0)
0001615A 0868 0000 001A             		bchg	#0,$1A(a0)
00016160                            
00016160                            locret_15B96:
00016160 4E75                       		rts	
00016162                            ; ===========================================================================
00016162                            ; ---------------------------------------------------------------------------
00016162                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016162                            ; ---------------------------------------------------------------------------
00016162                            Map_obj6A:
00016162                            	include "_maps\obj6A.asm"
00016162                            ; ---------------------------------------------------------------------------
00016162                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016162                            ; ---------------------------------------------------------------------------
00016162 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00016166 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
0001616A 07                         byte_15BA0:	dc.b 7
0001616B C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016170 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016175 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001617A E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001617F E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016184 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016189 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001618E 07                         byte_15BC4:	dc.b 7
0001618F C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016194 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016199 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001619E E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000161A3 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000161A8 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000161AD 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000161B2 04                         byte_15BE8:	dc.b 4
000161B3 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000161B8 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000161BD 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000161C2 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000161C7 04                         byte_15BFD:	dc.b 4
000161C8 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000161CD E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000161D2 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000161D7 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000161DC                            		even
000161DC                            		even
000161DC                            
000161DC                            ; ===========================================================================
000161DC                            ; ---------------------------------------------------------------------------
000161DC                            ; Object 6B - stomper (SBZ)
000161DC                            ; ---------------------------------------------------------------------------
000161DC                            
000161DC                            Obj6B:					; XREF: Obj_Index
000161DC 7000                       		moveq	#0,d0
000161DE 1028 0024                  		move.b	$24(a0),d0
000161E2 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
000161E6 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
000161EA                            ; ===========================================================================
000161EA 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
000161EC 0000                       		dc.w Obj6B_Action-Obj6B_Index
000161EE                            
000161EE 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
000161F2 1C20 3803                  		dc.b  $1C, $20,	$38,   3
000161F6 1C20 4004                  		dc.b  $1C, $20,	$40,   4
000161FA 1C20 6004                  		dc.b  $1C, $20,	$60,   4
000161FE 8040 0005                  		dc.b  $80, $40,	  0,   5
00016202                            ; ===========================================================================
00016202                            
00016202                            Obj6B_Main:				; XREF: Obj6B_Index
00016202 5428 0024                  		addq.b	#2,$24(a0)
00016206 7000                       		moveq	#0,d0
00016208 1028 0028                  		move.b	$28(a0),d0
0001620C E448                       		lsr.w	#2,d0
0001620E 0240 001C                  		andi.w	#$1C,d0
00016212 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00016216 115B 0019                  		move.b	(a3)+,$19(a0)
0001621A 115B 0016                  		move.b	(a3)+,$16(a0)
0001621E E448                       		lsr.w	#2,d0
00016220 1140 001A                  		move.b	d0,$1A(a0)
00016224 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
0001622C 317C 22C0 0002             		move.w	#$22C0,2(a0)
00016232 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00016238 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
0001623A 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00016240 6700                       		beq.s	Obj6B_SBZ3
00016242                            
00016242                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00016242 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016246 7000                       		moveq	#0,d0
00016248 1028 0023                  		move.b	$23(a0),d0
0001624C 6700                       		beq.s	Obj6B_Delete
0001624E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016254                            
00016254                            Obj6B_Delete:
00016254 4EF9 0000 DB7C             		jmp	DeleteObject
0001625A                            ; ===========================================================================
0001625A                            
0001625A                            Obj6B_SBZ3:				; XREF: Obj6B_Main
0001625A 317C 41F0 0002             		move.w	#$41F0,2(a0)
00016260 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00016266 6600                       		bne.s	Obj6B_SBZ12
00016268 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001626C 7000                       		moveq	#0,d0
0001626E 1028 0023                  		move.b	$23(a0),d0
00016272 6700                       		beq.s	Obj6B_SBZ12
00016274 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001627A 6700                       		beq.s	Obj6B_SBZ12
0001627C 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016280 60C0                       		bra.s	Obj6B_ChkGone
00016282                            ; ===========================================================================
00016282                            
00016282                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00016282 0028 0004 0001             		ori.b	#4,1(a0)
00016288 117C 0004 0018             		move.b	#4,$18(a0)
0001628E 3168 0008 0034             		move.w	8(a0),$34(a0)
00016294 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001629A 7000                       		moveq	#0,d0
0001629C 101B                       		move.b	(a3)+,d0
0001629E 3140 003C                  		move.w	d0,$3C(a0)
000162A2 7000                       		moveq	#0,d0
000162A4 1028 0028                  		move.b	$28(a0),d0
000162A8 6A00                       		bpl.s	Obj6B_Action
000162AA 0200 000F                  		andi.b	#$F,d0
000162AE 1140 003E                  		move.b	d0,$3E(a0)
000162B2 1153 0028                  		move.b	(a3),$28(a0)
000162B6 0C13 0005                  		cmpi.b	#5,(a3)
000162BA 6600                       		bne.s	Obj6B_ChkGone2
000162BC 08E8 0004 0001             		bset	#4,1(a0)
000162C2                            
000162C2                            Obj6B_ChkGone2:
000162C2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000162C6 7000                       		moveq	#0,d0
000162C8 1028 0023                  		move.b	$23(a0),d0
000162CC 6700                       		beq.s	Obj6B_Action
000162CE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000162D4                            
000162D4                            Obj6B_Action:				; XREF: Obj6B_Index
000162D4 3F28 0008                  		move.w	8(a0),-(sp)
000162D8 7000                       		moveq	#0,d0
000162DA 1028 0028                  		move.b	$28(a0),d0
000162DE 0240 000F                  		andi.w	#$F,d0
000162E2 D040                       		add.w	d0,d0
000162E4 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
000162E8 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
000162EC 381F                       		move.w	(sp)+,d4
000162EE 4A28 0001                  		tst.b	1(a0)
000162F2 6A00                       		bpl.s	Obj6B_ChkDel
000162F4 7200                       		moveq	#0,d1
000162F6 1228 0019                  		move.b	$19(a0),d1
000162FA 0641 000B                  		addi.w	#$B,d1
000162FE 7400                       		moveq	#0,d2
00016300 1428 0016                  		move.b	$16(a0),d2
00016304 3602                       		move.w	d2,d3
00016306 5243                       		addq.w	#1,d3
00016308 6100 9C06                  		bsr.w	SolidObject
0001630C                            
0001630C                            Obj6B_ChkDel:
0001630C 3028 0034                  		move.w	$34(a0),d0
00016310 0240 FF80                  		andi.w	#$FF80,d0
00016314 3238 F700                  		move.w	($FFFFF700).w,d1
00016318 0441 0080                  		subi.w	#$80,d1
0001631C 0241 FF80                  		andi.w	#$FF80,d1
00016320 9041                       		sub.w	d1,d0
00016322 0C40 0280                  		cmpi.w	#$280,d0
00016326 6200                       		bhi.s	loc_15D64
00016328 4EF9 0000 DB40             		jmp	DisplaySprite
0001632E                            ; ===========================================================================
0001632E                            
0001632E                            loc_15D64:
0001632E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00016334 6600                       		bne.s	Obj6B_Delete2
00016336 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001633A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001633E 7000                       		moveq	#0,d0
00016340 1028 0023                  		move.b	$23(a0),d0
00016344 6700                       		beq.s	Obj6B_Delete2
00016346 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001634C                            
0001634C                            Obj6B_Delete2:
0001634C 4EF9 0000 DB7C             		jmp	DeleteObject
00016352                            ; ===========================================================================
00016352 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00016356 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
0001635A 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
0001635E                            ; ===========================================================================
0001635E                            
0001635E                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
0001635E 4E75                       		rts	
00016360                            ; ===========================================================================
00016360                            
00016360                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00016360 4A28 0038                  		tst.b	$38(a0)
00016364 6600                       		bne.s	loc_15DB4
00016366 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001636A 7000                       		moveq	#0,d0
0001636C 1028 003E                  		move.b	$3E(a0),d0
00016370 0832 0000 0000             		btst	#0,(a2,d0.w)
00016376 6700                       		beq.s	loc_15DC2
00016378 117C 0001 0038             		move.b	#1,$38(a0)
0001637E                            
0001637E                            loc_15DB4:
0001637E 3028 003C                  		move.w	$3C(a0),d0
00016382 B068 003A                  		cmp.w	$3A(a0),d0
00016386 6700                       		beq.s	loc_15DE0
00016388 5468 003A                  		addq.w	#2,$3A(a0)
0001638C                            
0001638C                            loc_15DC2:
0001638C 3028 003A                  		move.w	$3A(a0),d0
00016390 0828 0000 0022             		btst	#0,$22(a0)
00016396 6700                       		beq.s	loc_15DD4
00016398 4440                       		neg.w	d0
0001639A 0640 0080                  		addi.w	#$80,d0
0001639E                            
0001639E                            loc_15DD4:
0001639E 3228 0034                  		move.w	$34(a0),d1
000163A2 9240                       		sub.w	d0,d1
000163A4 3141 0008                  		move.w	d1,8(a0)
000163A8 4E75                       		rts	
000163AA                            ; ===========================================================================
000163AA                            
000163AA                            loc_15DE0:
000163AA 5228 0028                  		addq.b	#1,$28(a0)
000163AE 317C 00B4 0036             		move.w	#$B4,$36(a0)
000163B4 4228 0038                  		clr.b	$38(a0)
000163B8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000163BC 7000                       		moveq	#0,d0
000163BE 1028 0023                  		move.b	$23(a0),d0
000163C2 67C8                       		beq.s	loc_15DC2
000163C4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000163CA 60C0                       		bra.s	loc_15DC2
000163CC                            ; ===========================================================================
000163CC                            
000163CC                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000163CC 4A28 0038                  		tst.b	$38(a0)
000163D0 6600                       		bne.s	loc_15E14
000163D2 5368 0036                  		subq.w	#1,$36(a0)
000163D6 6600                       		bne.s	loc_15E1E
000163D8 117C 0001 0038             		move.b	#1,$38(a0)
000163DE                            
000163DE                            loc_15E14:
000163DE 4A68 003A                  		tst.w	$3A(a0)
000163E2 6700                       		beq.s	loc_15E3C
000163E4 5568 003A                  		subq.w	#2,$3A(a0)
000163E8                            
000163E8                            loc_15E1E:
000163E8 3028 003A                  		move.w	$3A(a0),d0
000163EC 0828 0000 0022             		btst	#0,$22(a0)
000163F2 6700                       		beq.s	loc_15E30
000163F4 4440                       		neg.w	d0
000163F6 0640 0080                  		addi.w	#$80,d0
000163FA                            
000163FA                            loc_15E30:
000163FA 3228 0034                  		move.w	$34(a0),d1
000163FE 9240                       		sub.w	d0,d1
00016400 3141 0008                  		move.w	d1,8(a0)
00016404 4E75                       		rts	
00016406                            ; ===========================================================================
00016406                            
00016406                            loc_15E3C:
00016406 5328 0028                  		subq.b	#1,$28(a0)
0001640A 4228 0038                  		clr.b	$38(a0)
0001640E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016412 7000                       		moveq	#0,d0
00016414 1028 0023                  		move.b	$23(a0),d0
00016418 67CE                       		beq.s	loc_15E1E
0001641A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00016420 60C6                       		bra.s	loc_15E1E
00016422                            ; ===========================================================================
00016422                            
00016422                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00016422 4A28 0038                  		tst.b	$38(a0)
00016426 6600                       		bne.s	loc_15E7C
00016428 4A68 003A                  		tst.w	$3A(a0)
0001642C 6700                       		beq.s	loc_15E6A
0001642E 5368 003A                  		subq.w	#1,$3A(a0)
00016432 6000                       		bra.s	loc_15E8E
00016434                            ; ===========================================================================
00016434                            
00016434                            loc_15E6A:
00016434 5368 0036                  		subq.w	#1,$36(a0)
00016438 6A00                       		bpl.s	loc_15E8E
0001643A 317C 003C 0036             		move.w	#$3C,$36(a0)
00016440 117C 0001 0038             		move.b	#1,$38(a0)
00016446                            
00016446                            loc_15E7C:
00016446 5068 003A                  		addq.w	#8,$3A(a0)
0001644A 3028 003A                  		move.w	$3A(a0),d0
0001644E B068 003C                  		cmp.w	$3C(a0),d0
00016452 6600                       		bne.s	loc_15E8E
00016454 4228 0038                  		clr.b	$38(a0)
00016458                            
00016458                            loc_15E8E:
00016458 3028 003A                  		move.w	$3A(a0),d0
0001645C 0828 0000 0022             		btst	#0,$22(a0)
00016462 6700                       		beq.s	loc_15EA0
00016464 4440                       		neg.w	d0
00016466 0640 0038                  		addi.w	#$38,d0
0001646A                            
0001646A                            loc_15EA0:
0001646A 3228 0030                  		move.w	$30(a0),d1
0001646E D240                       		add.w	d0,d1
00016470 3141 000C                  		move.w	d1,$C(a0)
00016474 4E75                       		rts	
00016476                            ; ===========================================================================
00016476                            
00016476                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00016476 4A28 0038                  		tst.b	$38(a0)
0001647A 6600                       		bne.s	loc_15ED0
0001647C 4A68 003A                  		tst.w	$3A(a0)
00016480 6700                       		beq.s	loc_15EBE
00016482 5168 003A                  		subq.w	#8,$3A(a0)
00016486 6000                       		bra.s	loc_15EF0
00016488                            ; ===========================================================================
00016488                            
00016488                            loc_15EBE:
00016488 5368 0036                  		subq.w	#1,$36(a0)
0001648C 6A00                       		bpl.s	loc_15EF0
0001648E 317C 003C 0036             		move.w	#$3C,$36(a0)
00016494 117C 0001 0038             		move.b	#1,$38(a0)
0001649A                            
0001649A                            loc_15ED0:
0001649A 3028 003A                  		move.w	$3A(a0),d0
0001649E B068 003C                  		cmp.w	$3C(a0),d0
000164A2 6700                       		beq.s	loc_15EE0
000164A4 5068 003A                  		addq.w	#8,$3A(a0)
000164A8 6000                       		bra.s	loc_15EF0
000164AA                            ; ===========================================================================
000164AA                            
000164AA                            loc_15EE0:
000164AA 5368 0036                  		subq.w	#1,$36(a0)
000164AE 6A00                       		bpl.s	loc_15EF0
000164B0 317C 003C 0036             		move.w	#$3C,$36(a0)
000164B6 4228 0038                  		clr.b	$38(a0)
000164BA                            
000164BA                            loc_15EF0:
000164BA 3028 003A                  		move.w	$3A(a0),d0
000164BE 0828 0000 0022             		btst	#0,$22(a0)
000164C4 6700                       		beq.s	loc_15F02
000164C6 4440                       		neg.w	d0
000164C8 0640 0038                  		addi.w	#$38,d0
000164CC                            
000164CC                            loc_15F02:
000164CC 3228 0030                  		move.w	$30(a0),d1
000164D0 D240                       		add.w	d0,d1
000164D2 3141 000C                  		move.w	d1,$C(a0)
000164D6 4E75                       		rts	
000164D8                            ; ===========================================================================
000164D8                            
000164D8                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000164D8 4A28 0038                  		tst.b	$38(a0)
000164DC 6600                       		bne.s	loc_15F3E
000164DE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000164E2 7000                       		moveq	#0,d0
000164E4 1028 003E                  		move.b	$3E(a0),d0
000164E8 0832 0000 0000             		btst	#0,(a2,d0.w)
000164EE 6700                       		beq.s	locret_15F5C
000164F0 117C 0001 0038             		move.b	#1,$38(a0)
000164F6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000164FA 7000                       		moveq	#0,d0
000164FC 1028 0023                  		move.b	$23(a0),d0
00016500 6700                       		beq.s	loc_15F3E
00016502 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016508                            
00016508                            loc_15F3E:
00016508 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016510 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00016518 3168 0008 0034             		move.w	8(a0),$34(a0)
0001651E 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016524 6700                       		beq.s	loc_15F5E
00016526                            
00016526                            locret_15F5C:
00016526 4E75                       		rts	
00016528                            ; ===========================================================================
00016528                            
00016528                            loc_15F5E:
00016528 4228 0028                  		clr.b	$28(a0)
0001652C 4228 0038                  		clr.b	$38(a0)
00016530 4E75                       		rts	
00016532                            ; ===========================================================================
00016532                            ; ---------------------------------------------------------------------------
00016532                            ; Sprite mappings - stomper and	platforms (SBZ)
00016532                            ; ---------------------------------------------------------------------------
00016532                            Map_obj6B:
00016532                            	include "_maps\obj6B.asm"
00016532                            ; ---------------------------------------------------------------------------
00016532                            ; Sprite mappings - stomper and	platforms (SBZ)
00016532                            ; ---------------------------------------------------------------------------
00016532 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00016536 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
0001653A 0000                       		dc.w byte_15FB0-Map_obj6B
0001653C 04                         byte_15F72:	dc.b 4
0001653D F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016542 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016547 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
0001654C F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016551 08                         byte_15F87:	dc.b 8
00016552 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016557 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
0001655C E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016561 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016566 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
0001656B 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016570 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016575 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
0001657A 0E                         byte_15FB0:	dc.b $E
0001657B C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016580 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016585 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
0001658A C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
0001658F C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016594 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016599 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
0001659E C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000165A3 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000165A8 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000165AD E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000165B2 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000165B7 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000165BC 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000165C2 00                         		even
000165C2 00                         		even
000165C2                            
000165C2                            ; ===========================================================================
000165C2                            ; ---------------------------------------------------------------------------
000165C2                            ; Object 6C - vanishing	platforms (SBZ)
000165C2                            ; ---------------------------------------------------------------------------
000165C2                            
000165C2                            Obj6C:					; XREF: Obj_Index
000165C2 7000                       		moveq	#0,d0
000165C4 1028 0024                  		move.b	$24(a0),d0
000165C8 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000165CC 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000165D0                            ; ===========================================================================
000165D0 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000165D2 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000165D4 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000165D6 0000                       		dc.w loc_16068-Obj6C_Index
000165D8                            ; ===========================================================================
000165D8                            
000165D8                            Obj6C_Main:				; XREF: Obj6C_Index
000165D8 5C28 0024                  		addq.b	#6,$24(a0)
000165DC 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
000165E4 317C 44C3 0002             		move.w	#$44C3,2(a0)
000165EA 0028 0004 0001             		ori.b	#4,1(a0)
000165F0 117C 0010 0019             		move.b	#$10,$19(a0)
000165F6 117C 0004 0018             		move.b	#4,$18(a0)
000165FC 7000                       		moveq	#0,d0
000165FE 1028 0028                  		move.b	$28(a0),d0	; get object type
00016602 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016606 5240                       		addq.w	#1,d0		; add 1
00016608 EF48                       		lsl.w	#7,d0		; multiply by $80
0001660A 3200                       		move.w	d0,d1
0001660C 5340                       		subq.w	#1,d0
0001660E 3140 0030                  		move.w	d0,$30(a0)
00016612 3140 0032                  		move.w	d0,$32(a0)
00016616 7000                       		moveq	#0,d0
00016618 1028 0028                  		move.b	$28(a0),d0	; get object type
0001661C 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016620 0641 0080                  		addi.w	#$80,d1
00016624 C0C1                       		mulu.w	d1,d0
00016626 E088                       		lsr.l	#8,d0
00016628 3140 0036                  		move.w	d0,$36(a0)
0001662C 5341                       		subq.w	#1,d1
0001662E 3141 0038                  		move.w	d1,$38(a0)
00016632                            
00016632                            loc_16068:				; XREF: Obj6C_Index
00016632 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016636 9068 0036                  		sub.w	$36(a0),d0
0001663A C068 0038                  		and.w	$38(a0),d0
0001663E 6600                       		bne.s	Obj6C_Animate
00016640 5928 0024                  		subq.b	#4,$24(a0)
00016644 6000                       		bra.s	Obj6C_Vanish
00016646                            ; ===========================================================================
00016646                            
00016646                            Obj6C_Animate:
00016646 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001664C 4EB9 0000 AC10             		jsr	AnimateSprite
00016652 6000 9594                  		bra.w	MarkObjGone
00016656                            ; ===========================================================================
00016656                            
00016656                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016656 5368 0030                  		subq.w	#1,$30(a0)
0001665A 6A00                       		bpl.s	loc_160AA
0001665C 317C 007F 0030             		move.w	#127,$30(a0)
00016662 4A28 001C                  		tst.b	$1C(a0)
00016666 6700                       		beq.s	loc_160A4
00016668 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001666E                            
0001666E                            loc_160A4:
0001666E 0868 0000 001C             		bchg	#0,$1C(a0)
00016674                            
00016674                            loc_160AA:
00016674 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001667A 4EB9 0000 AC10             		jsr	AnimateSprite
00016680 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016686 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016688 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0001668E 6600                       		bne.s	loc_160D6
00016690 7200                       		moveq	#0,d1
00016692 1228 0019                  		move.b	$19(a0),d1
00016696 4EB9 0000 786C             		jsr	(PlatformObject).l
0001669C 6000 954A                  		bra.w	MarkObjGone
000166A0                            ; ===========================================================================
000166A0                            
000166A0                            loc_160D6:
000166A0 7200                       		moveq	#0,d1
000166A2 1228 0019                  		move.b	$19(a0),d1
000166A6 4EB9 0000 79E0             		jsr	(ExitPlatform).l
000166AC 3428 0008                  		move.w	8(a0),d2
000166B0 4EB9 0000 7F4A             		jsr	(MvSonicOnPtfm2).l
000166B6 6000 9530                  		bra.w	MarkObjGone
000166BA                            ; ===========================================================================
000166BA                            
000166BA                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
000166BA 0828 0003 0022             		btst	#3,$22(a0)
000166C0 6700                       		beq.s	Obj6C_Display
000166C2 43F8 D000                  		lea	($FFFFD000).w,a1
000166C6 08A9 0003 0022             		bclr	#3,$22(a1)
000166CC 08A8 0003 0022             		bclr	#3,$22(a0)
000166D2 117C 0002 0024             		move.b	#2,$24(a0)
000166D8 4228 0025                  		clr.b	$25(a0)
000166DC                            
000166DC                            Obj6C_Display:
000166DC 6000 950A                  		bra.w	MarkObjGone
000166E0                            ; ===========================================================================
000166E0                            Ani_obj6C:
000166E0                            	include "_anim\obj6C.asm"
000166E0                            ; ---------------------------------------------------------------------------
000166E0                            ; Animation script - vanishing platforms (SBZ)
000166E0                            ; ---------------------------------------------------------------------------
000166E0 0000                       		dc.w byte_1611A-Ani_obj6C
000166E2 0000                       		dc.w byte_16122-Ani_obj6C
000166E4 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
000166EC 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
000166F4                            		even
000166F4                            		even
000166F4                            
000166F4                            ; ---------------------------------------------------------------------------
000166F4                            ; Sprite mappings - vanishing platforms	(SBZ)
000166F4                            ; ---------------------------------------------------------------------------
000166F4                            Map_obj6C:
000166F4                            	include "_maps\obj6C.asm"
000166F4                            ; ---------------------------------------------------------------------------
000166F4                            ; Sprite mappings - vanishing platforms	(SBZ)
000166F4                            ; ---------------------------------------------------------------------------
000166F4 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
000166F8 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
000166FC 01                         byte_16132:	dc.b 1
000166FD F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016702 01                         byte_16138:	dc.b 1
00016703 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016708 01                         byte_1613E:	dc.b 1
00016709 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
0001670E 00                         byte_16144:	dc.b 0
00016710 00                         		even
00016710 00                         		even
00016710                            
00016710                            ; ===========================================================================
00016710                            ; ---------------------------------------------------------------------------
00016710                            ; Object 6E - electrocution orbs (SBZ)
00016710                            ; ---------------------------------------------------------------------------
00016710                            
00016710                            Obj6E:					; XREF: Obj_Index
00016710 7000                       		moveq	#0,d0
00016712 1028 0024                  		move.b	$24(a0),d0
00016716 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
0001671A 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
0001671E                            ; ===========================================================================
0001671E 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016720 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016722                            ; ===========================================================================
00016722                            
00016722                            Obj6E_Main:				; XREF: Obj6E_Index
00016722 5428 0024                  		addq.b	#2,$24(a0)
00016726 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
0001672E 317C 047E 0002             		move.w	#$47E,2(a0)
00016734 0028 0004 0001             		ori.b	#4,1(a0)
0001673A 117C 0028 0019             		move.b	#$28,$19(a0)
00016740 7000                       		moveq	#0,d0
00016742 1028 0028                  		move.b	$28(a0),d0	; read object type
00016746 E948                       		lsl.w	#4,d0		; multiply by $10
00016748 5340                       		subq.w	#1,d0
0001674A 3140 0034                  		move.w	d0,$34(a0)
0001674E                            
0001674E                            Obj6E_Shock:				; XREF: Obj6E_Index
0001674E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016752 C068 0034                  		and.w	$34(a0),d0
00016756 6600                       		bne.s	Obj6E_Animate
00016758 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
0001675E 4A28 0001                  		tst.b	1(a0)
00016762 6A00                       		bpl.s	Obj6E_Animate
00016764 303C 00B1                  		move.w	#$B1,d0
00016768 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play electricity sound
0001676E                            
0001676E                            Obj6E_Animate:
0001676E 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016774 4EB9 0000 AC10             		jsr	AnimateSprite
0001677A 117C 0000 0020             		move.b	#0,$20(a0)
00016780 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016786 6600                       		bne.s	Obj6E_Display	; if not, branch
00016788 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
0001678E                            
0001678E                            Obj6E_Display:
0001678E 6000 9458                  		bra.w	MarkObjGone
00016792                            ; ===========================================================================
00016792                            Ani_obj6E:
00016792                            	include "_anim\obj6E.asm"
00016792                            ; ---------------------------------------------------------------------------
00016792                            ; Animation script - electrocution orbs (SBZ)
00016792                            ; ---------------------------------------------------------------------------
00016792 0000                       		dc.w byte_161CC-Ani_obj6E
00016794 0000                       		dc.w byte_161D0-Ani_obj6E
00016796 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
0001679A 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
000167AA                            		even
000167AA                            		even
000167AA                            
000167AA                            ; ---------------------------------------------------------------------------
000167AA                            ; Sprite mappings - electrocution orbs (SBZ)
000167AA                            ; ---------------------------------------------------------------------------
000167AA                            Map_obj6E:
000167AA                            	include "_maps\obj6E.asm"
000167AA                            Map_26ed:
000167AA 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
000167AC 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
000167AE 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
000167B0 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
000167B2 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
000167B4 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
000167B6 01                         Map_26ed_C: 	dc.b $1
000167B7 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
000167BC 02                         Map_26ed_12: 	dc.b $2
000167BD F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000167C2 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000167C7 06                         Map_26ed_1D: 	dc.b $6
000167C8 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000167CD 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000167D2 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
000167D7 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
000167DC F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
000167E1 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
000167E6 08                         Map_26ed_3C: 	dc.b $8
000167E7 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000167EC 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000167F1 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
000167F6 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
000167FB F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016800 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016805 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
0001680A F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
0001680F 06                         Map_26ed_65: 	dc.b $6
00016810 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016815 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
0001681A F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
0001681F F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016824 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016829 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
0001682E 04                         Map_26ed_84: 	dc.b $4
0001682F F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016834 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016839 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
0001683E F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016844 00                         	even
00016844 00                         	even
00016844                            
00016844                            ; ===========================================================================
00016844                            ; ---------------------------------------------------------------------------
00016844                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016844                            ; ---------------------------------------------------------------------------
00016844                            
00016844                            Obj6F:					; XREF: Obj_Index
00016844 7000                       		moveq	#0,d0
00016846 1028 0024                  		move.b	$24(a0),d0
0001684A 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
0001684E 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016852 3028 0030                  		move.w	$30(a0),d0
00016856 0240 FF80                  		andi.w	#$FF80,d0
0001685A 3238 F700                  		move.w	($FFFFF700).w,d1
0001685E 0441 0080                  		subi.w	#$80,d1
00016862 0241 FF80                  		andi.w	#$FF80,d1
00016866 9041                       		sub.w	d1,d0
00016868 0C40 0280                  		cmpi.w	#$280,d0
0001686C 6200                       		bhi.s	loc_1629A
0001686E                            
0001686E                            Obj6F_Display:
0001686E 4EF9 0000 DB40             		jmp	DisplaySprite
00016874                            ; ===========================================================================
00016874                            
00016874                            loc_1629A:
00016874 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
0001687A 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
0001687C 0C40 FF80                  		cmpi.w	#-$80,d0
00016880 64EC                       		bcc.s	Obj6F_Display
00016882                            
00016882                            Obj6F_Act1or2:
00016882 1028 002F                  		move.b	$2F(a0),d0
00016886 6A00                       		bpl.s	Obj6F_Delete
00016888 0240 007F                  		andi.w	#$7F,d0
0001688C 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016890 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016896                            
00016896                            Obj6F_Delete:
00016896 4EF9 0000 DB7C             		jmp	DeleteObject
0001689C                            ; ===========================================================================
0001689C 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
0001689E 0000                       		dc.w loc_163D8-Obj6F_Index
000168A0                            ; ===========================================================================
000168A0                            
000168A0                            Obj6F_Main:				; XREF: Obj6F_Index
000168A0 1028 0028                  		move.b	$28(a0),d0
000168A4 6B00 0000                  		bmi.w	loc_16380
000168A8 5428 0024                  		addq.b	#2,$24(a0)
000168AC 217C 0001 5F04 0004        		move.l	#Map_obj69a,4(a0)
000168B4 317C 04DF 0002             		move.w	#$4DF,2(a0)
000168BA 117C 0010 0019             		move.b	#$10,$19(a0)
000168C0 0028 0004 0001             		ori.b	#4,1(a0)
000168C6 117C 0004 0018             		move.b	#4,$18(a0)
000168CC 7000                       		moveq	#0,d0
000168CE 1028 0028                  		move.b	$28(a0),d0
000168D2 3200                       		move.w	d0,d1
000168D4 E648                       		lsr.w	#3,d0
000168D6 0240 001E                  		andi.w	#$1E,d0
000168DA 45FA 0000                  		lea	off_164A6(pc),a2
000168DE D4F2 0000                  		adda.w	(a2,d0.w),a2
000168E2 315A 0038                  		move.w	(a2)+,$38(a0)
000168E6 315A 0030                  		move.w	(a2)+,$30(a0)
000168EA 214A 003C                  		move.l	a2,$3C(a0)
000168EE 0241 000F                  		andi.w	#$F,d1
000168F2 E549                       		lsl.w	#2,d1
000168F4 1141 0038                  		move.b	d1,$38(a0)
000168F8 117C 0004 003A             		move.b	#4,$3A(a0)
000168FE 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016902 6700                       		beq.s	loc_16356
00016904 117C 0001 003B             		move.b	#1,$3B(a0)
0001690A 4428 003A                  		neg.b	$3A(a0)
0001690E 7200                       		moveq	#0,d1
00016910 1228 0038                  		move.b	$38(a0),d1
00016914 D228 003A                  		add.b	$3A(a0),d1
00016918 B228 0039                  		cmp.b	$39(a0),d1
0001691C 6500                       		bcs.s	loc_16352
0001691E 1001                       		move.b	d1,d0
00016920 7200                       		moveq	#0,d1
00016922 4A00                       		tst.b	d0
00016924 6A00                       		bpl.s	loc_16352
00016926 1228 0039                  		move.b	$39(a0),d1
0001692A 5901                       		subq.b	#4,d1
0001692C                            
0001692C                            loc_16352:
0001692C 1141 0038                  		move.b	d1,$38(a0)
00016930                            
00016930                            loc_16356:
00016930 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016936 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
0001693C 4A41                       		tst.w	d1
0001693E 6600                       		bne.s	loc_1636C
00016940 117C 0001 001C             		move.b	#1,$1C(a0)
00016946                            
00016946                            loc_1636C:
00016946 0C41 0008                  		cmpi.w	#8,d1
0001694A 6600                       		bne.s	loc_16378
0001694C 117C 0000 001C             		move.b	#0,$1C(a0)
00016952                            
00016952                            loc_16378:
00016952 6100 C12C                  		bsr.w	Obj63_ChangeDir
00016956 6000 0000                  		bra.w	loc_163D8
0001695A                            ; ===========================================================================
0001695A                            
0001695A                            loc_16380:				; XREF: Obj6F_Main
0001695A 1140 002F                  		move.b	d0,$2F(a0)
0001695E 0240 007F                  		andi.w	#$7F,d0
00016962 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016966 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001696C 6700                       		beq.s	loc_1639A
0001696E 4EF9 0000 DB7C             		jmp	DeleteObject
00016974                            ; ===========================================================================
00016974                            
00016974                            loc_1639A:
00016974 D040                       		add.w	d0,d0
00016976 0240 001E                  		andi.w	#$1E,d0
0001697A 0640 0080                  		addi.w	#$80,d0
0001697E 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016984 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016988 321A                       		move.w	(a2)+,d1
0001698A 2248                       		movea.l	a0,a1
0001698C 6000                       		bra.s	Obj6F_LoadPform
0001698E                            ; ===========================================================================
0001698E                            
0001698E                            Obj6F_Loop:
0001698E 4EB9 0000 DFC6             		jsr	SingleObjLoad
00016994 6600                       		bne.s	loc_163D0
00016996                            
00016996                            Obj6F_LoadPform:			; XREF: loc_1639A
00016996 12BC 006F                  		move.b	#$6F,0(a1)
0001699A 335A 0008                  		move.w	(a2)+,8(a1)
0001699E 335A 000C                  		move.w	(a2)+,$C(a1)
000169A2 301A                       		move.w	(a2)+,d0
000169A4 1340 0028                  		move.b	d0,$28(a1)
000169A8                            
000169A8                            loc_163D0:
000169A8 51C9 FFE4                  		dbf	d1,Obj6F_Loop
000169AC                            
000169AC 588F                       		addq.l	#4,sp
000169AE 4E75                       		rts	
000169B0                            ; ===========================================================================
000169B0                            
000169B0                            loc_163D8:				; XREF: Obj6F_Index
000169B0 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
000169B6 4EB9 0000 AC10             		jsr	AnimateSprite
000169BC 4A28 001A                  		tst.b	$1A(a0)
000169C0 6600                       		bne.s	loc_16404
000169C2 3F28 0008                  		move.w	8(a0),-(sp)
000169C6 6100 0000                  		bsr.w	loc_16424
000169CA 323C 001B                  		move.w	#$1B,d1
000169CE 343C 0007                  		move.w	#7,d2
000169D2 3602                       		move.w	d2,d3
000169D4 5243                       		addq.w	#1,d3
000169D6 381F                       		move.w	(sp)+,d4
000169D8 6000 9536                  		bra.w	SolidObject
000169DC                            ; ===========================================================================
000169DC                            
000169DC                            loc_16404:
000169DC 0828 0003 0022             		btst	#3,$22(a0)
000169E2 6700                       		beq.s	loc_16420
000169E4 43F8 D000                  		lea	($FFFFD000).w,a1
000169E8 08A9 0003 0022             		bclr	#3,$22(a1)
000169EE 08A8 0003 0022             		bclr	#3,$22(a0)
000169F4 4228 0025                  		clr.b	$25(a0)
000169F8                            
000169F8                            loc_16420:
000169F8 6000 0002                  		bra.w	*+4
000169FC                            
000169FC                            loc_16424:
000169FC 3028 0008                  		move.w	8(a0),d0
00016A00 B068 0034                  		cmp.w	$34(a0),d0
00016A04 6600                       		bne.s	loc_16484
00016A06 3028 000C                  		move.w	$C(a0),d0
00016A0A B068 0036                  		cmp.w	$36(a0),d0
00016A0E 6600                       		bne.s	loc_16484
00016A10 7200                       		moveq	#0,d1
00016A12 1228 0038                  		move.b	$38(a0),d1
00016A16 D228 003A                  		add.b	$3A(a0),d1
00016A1A B228 0039                  		cmp.b	$39(a0),d1
00016A1E 6500                       		bcs.s	loc_16456
00016A20 1001                       		move.b	d1,d0
00016A22 7200                       		moveq	#0,d1
00016A24 4A00                       		tst.b	d0
00016A26 6A00                       		bpl.s	loc_16456
00016A28 1228 0039                  		move.b	$39(a0),d1
00016A2C 5901                       		subq.b	#4,d1
00016A2E                            
00016A2E                            loc_16456:
00016A2E 1141 0038                  		move.b	d1,$38(a0)
00016A32 2268 003C                  		movea.l	$3C(a0),a1
00016A36 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016A3C 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016A42 4A41                       		tst.w	d1
00016A44 6600                       		bne.s	loc_16474
00016A46 117C 0001 001C             		move.b	#1,$1C(a0)
00016A4C                            
00016A4C                            loc_16474:
00016A4C 0C41 0008                  		cmpi.w	#8,d1
00016A50 6600                       		bne.s	loc_16480
00016A52 117C 0000 001C             		move.b	#0,$1C(a0)
00016A58                            
00016A58                            loc_16480:
00016A58 6100 C026                  		bsr.w	Obj63_ChangeDir
00016A5C                            
00016A5C                            loc_16484:
00016A5C 4EF9 0000 DB1A             		jmp	SpeedToPos
00016A62                            ; ===========================================================================
00016A62                            Ani_obj6F:
00016A62                            	include "_anim\obj6F.asm"
00016A62                            ; ---------------------------------------------------------------------------
00016A62                            ; Animation script - platform on conveyor belt (SBZ)
00016A62                            ; ---------------------------------------------------------------------------
00016A62 0000                       		dc.w byte_1648E-Ani_obj6F
00016A64 0000                       		dc.w byte_164A2-Ani_obj6F
00016A66 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016A73 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016A7A 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016A7E 00                         		even
00016A7E 00                         		even
00016A7E                            
00016A7E 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016A84 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016A8A 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016A9E 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016AB2 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016AC6 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016ADA 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016AEE 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016B02                            ; ===========================================================================
00016B02                            ; ---------------------------------------------------------------------------
00016B02                            ; Object 70 - large girder block (SBZ)
00016B02                            ; ---------------------------------------------------------------------------
00016B02                            
00016B02                            Obj70:					; XREF: Obj_Index
00016B02 7000                       		moveq	#0,d0
00016B04 1028 0024                  		move.b	$24(a0),d0
00016B08 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016B0C 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016B10                            ; ===========================================================================
00016B10 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016B12 0000                       		dc.w Obj70_Action-Obj70_Index
00016B14                            ; ===========================================================================
00016B14                            
00016B14                            Obj70_Main:				; XREF: Obj70_Index
00016B14 5428 0024                  		addq.b	#2,$24(a0)
00016B18 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016B20 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016B26 0028 0004 0001             		ori.b	#4,1(a0)
00016B2C 117C 0004 0018             		move.b	#4,$18(a0)
00016B32 117C 0060 0019             		move.b	#$60,$19(a0)
00016B38 117C 0018 0016             		move.b	#$18,$16(a0)
00016B3E 3168 0008 0032             		move.w	8(a0),$32(a0)
00016B44 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016B4A 6100 0000                  		bsr.w	Obj70_Move2
00016B4E                            
00016B4E                            Obj70_Action:				; XREF: Obj70_Index
00016B4E 3F28 0008                  		move.w	8(a0),-(sp)
00016B52 4A68 003A                  		tst.w	$3A(a0)
00016B56 6700                       		beq.s	Obj70_Move
00016B58 5368 003A                  		subq.w	#1,$3A(a0)
00016B5C 6600                       		bne.s	Obj70_Solid
00016B5E                            
00016B5E                            Obj70_Move:
00016B5E 4EB9 0000 DB1A             		jsr	SpeedToPos
00016B64 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016B68 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016B6A 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016B6E                            
00016B6E                            Obj70_Solid:
00016B6E 381F                       		move.w	(sp)+,d4
00016B70 4A28 0001                  		tst.b	1(a0)
00016B74 6A00                       		bpl.s	Obj70_ChkDel
00016B76 7200                       		moveq	#0,d1
00016B78 1228 0019                  		move.b	$19(a0),d1
00016B7C 0641 000B                  		addi.w	#$B,d1
00016B80 7400                       		moveq	#0,d2
00016B82 1428 0016                  		move.b	$16(a0),d2
00016B86 3602                       		move.w	d2,d3
00016B88 5243                       		addq.w	#1,d3
00016B8A 6100 9384                  		bsr.w	SolidObject
00016B8E                            
00016B8E                            Obj70_ChkDel:
00016B8E 3028 0032                  		move.w	$32(a0),d0
00016B92 0240 FF80                  		andi.w	#$FF80,d0
00016B96 3238 F700                  		move.w	($FFFFF700).w,d1
00016B9A 0441 0080                  		subi.w	#$80,d1
00016B9E 0241 FF80                  		andi.w	#$FF80,d1
00016BA2 9041                       		sub.w	d1,d0
00016BA4 0C40 0280                  		cmpi.w	#$280,d0
00016BA8 6200                       		bhi.s	Obj70_Delete
00016BAA 4EF9 0000 DB40             		jmp	DisplaySprite
00016BB0                            ; ===========================================================================
00016BB0                            
00016BB0                            Obj70_Delete:
00016BB0 4EF9 0000 DB7C             		jmp	DeleteObject
00016BB6                            ; ===========================================================================
00016BB6                            
00016BB6                            Obj70_Move2:				; XREF: Obj70_Main
00016BB6 1028 0038                  		move.b	$38(a0),d0
00016BBA 0240 0018                  		andi.w	#$18,d0
00016BBE 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016BC4 43F1 0000                  		lea	(a1,d0.w),a1
00016BC8 3159 0010                  		move.w	(a1)+,$10(a0)
00016BCC 3159 0012                  		move.w	(a1)+,$12(a0)
00016BD0 3159 0034                  		move.w	(a1)+,$34(a0)
00016BD4 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016BD8 317C 0007 003A             		move.w	#7,$3A(a0)
00016BDE 4E75                       		rts	
00016BE0                            ; ===========================================================================
00016BE0 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016BE8 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016BF0 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016BF8 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016C00                            ; ---------------------------------------------------------------------------
00016C00                            ; Sprite mappings - large girder block (SBZ)
00016C00                            ; ---------------------------------------------------------------------------
00016C00                            Map_obj70:
00016C00                            	include "_maps\obj70.asm"
00016C00                            ; ---------------------------------------------------------------------------
00016C00                            ; Sprite mappings - large girder block (SBZ)
00016C00                            ; ---------------------------------------------------------------------------
00016C00 0000                       		dc.w byte_1662A-Map_obj70
00016C02 0C                         byte_1662A:	dc.b $C
00016C03 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016C08 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016C0D E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016C12 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016C17 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016C1C 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016C21 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016C26 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016C2B E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016C30 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016C35 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016C3A 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016C40 00                         		even
00016C40 00                         		even
00016C40                            
00016C40                            ; ===========================================================================
00016C40                            ; ---------------------------------------------------------------------------
00016C40                            ; Object 72 - teleporter (SBZ)
00016C40                            ; ---------------------------------------------------------------------------
00016C40                            
00016C40                            Obj72:					; XREF: Obj_Index
00016C40 7000                       		moveq	#0,d0
00016C42 1028 0024                  		move.b	$24(a0),d0
00016C46 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016C4A 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016C4E 3028 0008                  		move.w	8(a0),d0
00016C52 0240 FF80                  		andi.w	#$FF80,d0
00016C56 3238 F700                  		move.w	($FFFFF700).w,d1
00016C5A 0441 0080                  		subi.w	#$80,d1
00016C5E 0241 FF80                  		andi.w	#$FF80,d1
00016C62 9041                       		sub.w	d1,d0
00016C64 0C40 0280                  		cmpi.w	#$280,d0
00016C68 6200                       		bhi.s	Obj72_Delete
00016C6A 4E75                       		rts	
00016C6C                            ; ===========================================================================
00016C6C                            
00016C6C                            Obj72_Delete:
00016C6C 4EF9 0000 DB7C             		jmp	DeleteObject
00016C72                            ; ===========================================================================
00016C72 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016C74 0000                       		dc.w loc_166C8-Obj72_Index
00016C76 0000                       		dc.w loc_1675E-Obj72_Index
00016C78 0000                       		dc.w loc_16798-Obj72_Index
00016C7A                            ; ===========================================================================
00016C7A                            
00016C7A                            Obj72_Main:				; XREF: Obj72_Index
00016C7A 5428 0024                  		addq.b	#2,$24(a0)
00016C7E 1028 0028                  		move.b	$28(a0),d0
00016C82 D040                       		add.w	d0,d0
00016C84 0240 001E                  		andi.w	#$1E,d0
00016C88 45FA 0000                  		lea	Obj72_Data(pc),a2
00016C8C D4F2 0000                  		adda.w	(a2,d0.w),a2
00016C90 315A 003A                  		move.w	(a2)+,$3A(a0)
00016C94 214A 003C                  		move.l	a2,$3C(a0)
00016C98 315A 0036                  		move.w	(a2)+,$36(a0)
00016C9C 315A 0038                  		move.w	(a2)+,$38(a0)
00016CA0                            
00016CA0                            loc_166C8:				; XREF: Obj72_Index
00016CA0 43F8 D000                  		lea	($FFFFD000).w,a1
00016CA4 3029 0008                  		move.w	8(a1),d0
00016CA8 9068 0008                  		sub.w	8(a0),d0
00016CAC 0828 0000 0022             		btst	#0,$22(a0)
00016CB2 6700                       		beq.s	loc_166E0
00016CB4 0640 000F                  		addi.w	#$F,d0
00016CB8                            
00016CB8                            loc_166E0:
00016CB8 0C40 0010                  		cmpi.w	#$10,d0
00016CBC 6400                       		bcc.s	locret_1675C
00016CBE 3229 000C                  		move.w	$C(a1),d1
00016CC2 9268 000C                  		sub.w	$C(a0),d1
00016CC6 0641 0020                  		addi.w	#$20,d1
00016CCA 0C41 0040                  		cmpi.w	#$40,d1
00016CCE 6400                       		bcc.s	locret_1675C
00016CD0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016CD4 6600                       		bne.s	locret_1675C
00016CD6 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00016CDC 6600                       		bne.s	loc_1670E
00016CDE 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016CE4 6500                       		bcs.s	locret_1675C
00016CE6                            
00016CE6                            loc_1670E:
00016CE6 5428 0024                  		addq.b	#2,$24(a0)
00016CEA 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016CF0 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00016CF6 337C 0800 0014             		move.w	#$800,$14(a1)
00016CFC 337C 0000 0010             		move.w	#0,$10(a1)
00016D02 337C 0000 0012             		move.w	#0,$12(a1)
00016D08 08A8 0005 0022             		bclr	#5,$22(a0)
00016D0E 08A9 0005 0022             		bclr	#5,$22(a1)
00016D14 08E9 0001 0022             		bset	#1,$22(a1)
00016D1A 3368 0008 0008             		move.w	8(a0),8(a1)
00016D20 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016D26 4228 0032                  		clr.b	$32(a0)
00016D2A 303C 00BE                  		move.w	#$BE,d0
00016D2E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00016D34                            
00016D34                            locret_1675C:
00016D34 4E75                       		rts	
00016D36                            ; ===========================================================================
00016D36                            
00016D36                            loc_1675E:				; XREF: Obj72_Index
00016D36 43F8 D000                  		lea	($FFFFD000).w,a1
00016D3A 1028 0032                  		move.b	$32(a0),d0
00016D3E 5428 0032                  		addq.b	#2,$32(a0)
00016D42 4EB9 0000 2BE8             		jsr	(CalcSine).l
00016D48 EA40                       		asr.w	#5,d0
00016D4A 3428 000C                  		move.w	$C(a0),d2
00016D4E 9440                       		sub.w	d0,d2
00016D50 3342 000C                  		move.w	d2,$C(a1)
00016D54 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00016D5A 6600                       		bne.s	locret_16796
00016D5C 6100 0000                  		bsr.w	sub_1681C
00016D60 5428 0024                  		addq.b	#2,$24(a0)
00016D64 303C 00BC                  		move.w	#$BC,d0
00016D68 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play teleport sound
00016D6E                            
00016D6E                            locret_16796:
00016D6E 4E75                       		rts	
00016D70                            ; ===========================================================================
00016D70                            
00016D70                            loc_16798:				; XREF: Obj72_Index
00016D70 588F                       		addq.l	#4,sp
00016D72 43F8 D000                  		lea	($FFFFD000).w,a1
00016D76 5328 002E                  		subq.b	#1,$2E(a0)
00016D7A 6A00                       		bpl.s	loc_167DA
00016D7C 3368 0036 0008             		move.w	$36(a0),8(a1)
00016D82 3368 0038 000C             		move.w	$38(a0),$C(a1)
00016D88 7200                       		moveq	#0,d1
00016D8A 1228 003A                  		move.b	$3A(a0),d1
00016D8E 5801                       		addq.b	#4,d1
00016D90 B228 003B                  		cmp.b	$3B(a0),d1
00016D94 6500                       		bcs.s	loc_167C2
00016D96 7200                       		moveq	#0,d1
00016D98 6000                       		bra.s	loc_16800
00016D9A                            ; ===========================================================================
00016D9A                            
00016D9A                            loc_167C2:
00016D9A 1141 003A                  		move.b	d1,$3A(a0)
00016D9E 2468 003C                  		movea.l	$3C(a0),a2
00016DA2 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00016DA8 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00016DAE 6000 0000                  		bra.w	sub_1681C
00016DB2                            ; ===========================================================================
00016DB2                            
00016DB2                            loc_167DA:
00016DB2 2429 0008                  		move.l	8(a1),d2
00016DB6 2629 000C                  		move.l	$C(a1),d3
00016DBA 3029 0010                  		move.w	$10(a1),d0
00016DBE 48C0                       		ext.l	d0
00016DC0 E180                       		asl.l	#8,d0
00016DC2 D480                       		add.l	d0,d2
00016DC4 3029 0012                  		move.w	$12(a1),d0
00016DC8 48C0                       		ext.l	d0
00016DCA E180                       		asl.l	#8,d0
00016DCC D680                       		add.l	d0,d3
00016DCE 2342 0008                  		move.l	d2,8(a1)
00016DD2 2343 000C                  		move.l	d3,$C(a1)
00016DD6 4E75                       		rts	
00016DD8                            ; ===========================================================================
00016DD8                            
00016DD8                            loc_16800:
00016DD8 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00016DDE 4228 0024                  		clr.b	$24(a0)
00016DE2 4238 F7C8                  		clr.b	($FFFFF7C8).w
00016DE6 337C 0000 0010             		move.w	#0,$10(a1)
00016DEC 337C 0200 0012             		move.w	#$200,$12(a1)
00016DF2 4E75                       		rts	
00016DF4                            
00016DF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016DF4                            
00016DF4                            
00016DF4                            sub_1681C:
00016DF4 7000                       		moveq	#0,d0
00016DF6 343C 1000                  		move.w	#$1000,d2
00016DFA 3028 0036                  		move.w	$36(a0),d0
00016DFE 9069 0008                  		sub.w	8(a1),d0
00016E02 6C00                       		bge.s	loc_16830
00016E04 4440                       		neg.w	d0
00016E06 4442                       		neg.w	d2
00016E08                            
00016E08                            loc_16830:
00016E08 7200                       		moveq	#0,d1
00016E0A 363C 1000                  		move.w	#$1000,d3
00016E0E 3228 0038                  		move.w	$38(a0),d1
00016E12 9269 000C                  		sub.w	$C(a1),d1
00016E16 6C00                       		bge.s	loc_16844
00016E18 4441                       		neg.w	d1
00016E1A 4443                       		neg.w	d3
00016E1C                            
00016E1C                            loc_16844:
00016E1C B240                       		cmp.w	d0,d1
00016E1E 6500                       		bcs.s	loc_1687A
00016E20 7200                       		moveq	#0,d1
00016E22 3228 0038                  		move.w	$38(a0),d1
00016E26 9269 000C                  		sub.w	$C(a1),d1
00016E2A 4841                       		swap	d1
00016E2C 83C3                       		divs.w	d3,d1
00016E2E 7000                       		moveq	#0,d0
00016E30 3028 0036                  		move.w	$36(a0),d0
00016E34 9069 0008                  		sub.w	8(a1),d0
00016E38 6700                       		beq.s	loc_16866
00016E3A 4840                       		swap	d0
00016E3C 81C1                       		divs.w	d1,d0
00016E3E                            
00016E3E                            loc_16866:
00016E3E 3340 0010                  		move.w	d0,$10(a1)
00016E42 3343 0012                  		move.w	d3,$12(a1)
00016E46 4A41                       		tst.w	d1
00016E48 6A00                       		bpl.s	loc_16874
00016E4A 4441                       		neg.w	d1
00016E4C                            
00016E4C                            loc_16874:
00016E4C 3141 002E                  		move.w	d1,$2E(a0)
00016E50 4E75                       		rts	
00016E52                            ; ===========================================================================
00016E52                            
00016E52                            loc_1687A:
00016E52 7000                       		moveq	#0,d0
00016E54 3028 0036                  		move.w	$36(a0),d0
00016E58 9069 0008                  		sub.w	8(a1),d0
00016E5C 4840                       		swap	d0
00016E5E 81C2                       		divs.w	d2,d0
00016E60 7200                       		moveq	#0,d1
00016E62 3228 0038                  		move.w	$38(a0),d1
00016E66 9269 000C                  		sub.w	$C(a1),d1
00016E6A 6700                       		beq.s	loc_16898
00016E6C 4841                       		swap	d1
00016E6E 83C0                       		divs.w	d0,d1
00016E70                            
00016E70                            loc_16898:
00016E70 3341 0012                  		move.w	d1,$12(a1)
00016E74 3342 0010                  		move.w	d2,$10(a1)
00016E78 4A40                       		tst.w	d0
00016E7A 6A00                       		bpl.s	loc_168A6
00016E7C 4440                       		neg.w	d0
00016E7E                            
00016E7E                            loc_168A6:
00016E7E 3140 002E                  		move.w	d0,$2E(a0)
00016E82 4E75                       		rts	
00016E84                            ; End of function sub_1681C
00016E84                            
00016E84                            ; ===========================================================================
00016E84 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00016E8A 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00016E90 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00016E94 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00016E9A 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00016EA0 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00016EA6 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00016EAC 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00016EB2 0884 0298 0894             		dc.w $884, $298, $894
00016EB8 0270 0894 0190             		dc.w $270, $894, $190
00016EBE 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00016EC4 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00016ECA 1184 0498 1158             		dc.w $1184, $498, $1158
00016ED0 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00016ED6 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00016EDC 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00016EE2 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00016EE8 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00016EEE 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00016EF4 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00016EFA 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00016F00 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00016F06 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00016F0C                            ; ===========================================================================
00016F0C                            ; ---------------------------------------------------------------------------
00016F0C                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00016F0C                            ; ---------------------------------------------------------------------------
00016F0C                            
00016F0C                            Obj78:					; XREF: Obj_Index
00016F0C 7000                       		moveq	#0,d0
00016F0E 1028 0024                  		move.b	$24(a0),d0
00016F12 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00016F16 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00016F1A                            ; ===========================================================================
00016F1A 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00016F1C 0000                       		dc.w Obj78_Action-Obj78_Index
00016F1E 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016F20 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00016F22 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016F24 0000                       		dc.w Obj78_Delete-Obj78_Index
00016F26 0000                       		dc.w loc_16CC0-Obj78_Index
00016F28                            ; ===========================================================================
00016F28                            
00016F28                            locret_16950:
00016F28 4E75                       		rts	
00016F2A                            ; ===========================================================================
00016F2A                            
00016F2A                            Obj78_Main:				; XREF: Obj78_Index
00016F2A 117C 0007 0016             		move.b	#7,$16(a0)
00016F30 117C 0008 0017             		move.b	#8,$17(a0)
00016F36 4EB9 0000 DAEE             		jsr	ObjectFall
00016F3C 4EBA E4A6                  		jsr	ObjHitFloor
00016F40 4A41                       		tst.w	d1
00016F42 6AE4                       		bpl.s	locret_16950
00016F44 D368 000C                  		add.w	d1,$C(a0)
00016F48 4268 0012                  		clr.w	$12(a0)
00016F4C 5428 0024                  		addq.b	#2,$24(a0)
00016F50 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00016F58 317C 22B0 0002             		move.w	#$22B0,2(a0)
00016F5E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00016F64 6700                       		beq.s	loc_16996
00016F66 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00016F6C                            
00016F6C                            loc_16996:
00016F6C 0228 0003 0001             		andi.b	#3,1(a0)
00016F72 0028 0004 0001             		ori.b	#4,1(a0)
00016F78 1168 0001 0022             		move.b	1(a0),$22(a0)
00016F7E 117C 0004 0018             		move.b	#4,$18(a0)
00016F84 117C 0008 0019             		move.b	#8,$19(a0)
00016F8A 117C 000B 0020             		move.b	#$B,$20(a0)
00016F90 3428 0008                  		move.w	8(a0),d2
00016F94 7A0C                       		moveq	#$C,d5
00016F96 0828 0000 0022             		btst	#0,$22(a0)
00016F9C 6700                       		beq.s	loc_169CA
00016F9E 4445                       		neg.w	d5
00016FA0                            
00016FA0                            loc_169CA:
00016FA0 1C3C 0004                  		move.b	#4,d6
00016FA4 7600                       		moveq	#0,d3
00016FA6 7804                       		moveq	#4,d4
00016FA8 2448                       		movea.l	a0,a2
00016FAA 7202                       		moveq	#2,d1
00016FAC                            
00016FAC                            Obj78_LoadBody:
00016FAC 4EB9 0000 DFDC             		jsr	SingleObjLoad2
00016FB2 6600                       		bne.s	Obj78_QuitLoad
00016FB4 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00016FB8 1346 0024                  		move.b	d6,$24(a1)
00016FBC 5406                       		addq.b	#2,d6
00016FBE 2368 0004 0004             		move.l	4(a0),4(a1)
00016FC4 3368 0002 0002             		move.w	2(a0),2(a1)
00016FCA 137C 0005 0018             		move.b	#5,$18(a1)
00016FD0 137C 0008 0019             		move.b	#8,$19(a1)
00016FD6 137C 00CB 0020             		move.b	#$CB,$20(a1)
00016FDC D445                       		add.w	d5,d2
00016FDE 3342 0008                  		move.w	d2,8(a1)
00016FE2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016FE8 1368 0022 0022             		move.b	$22(a0),$22(a1)
00016FEE 1368 0022 0001             		move.b	$22(a0),1(a1)
00016FF4 137C 0008 001A             		move.b	#8,$1A(a1)
00016FFA 234A 003C                  		move.l	a2,$3C(a1)
00016FFE 1344 003C                  		move.b	d4,$3C(a1)
00017002 5804                       		addq.b	#4,d4
00017004 2449                       		movea.l	a1,a2
00017006                            
00017006                            Obj78_QuitLoad:
00017006 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
0001700A                            
0001700A 117C 0007 002A             		move.b	#7,$2A(a0)
00017010 4228 003C                  		clr.b	$3C(a0)
00017014                            
00017014                            Obj78_Action:				; XREF: Obj78_Index
00017014 4A28 0022                  		tst.b	$22(a0)
00017018 6B00 0000                  		bmi.w	loc_16C96
0001701C 7000                       		moveq	#0,d0
0001701E 1028 0025                  		move.b	$25(a0),d0
00017022 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00017026 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
0001702A 1228 002B                  		move.b	$2B(a0),d1
0001702E 6A00                       		bpl.s	Obj78_Display
00017030 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017036 1028 0026                  		move.b	$26(a0),d0
0001703A 0240 007F                  		andi.w	#$7F,d0
0001703E 5828 0026                  		addq.b	#4,$26(a0)
00017042 1031 0000                  		move.b	(a1,d0.w),d0
00017046 6A00                       		bpl.s	Obj78_AniHead
00017048 08A8 0007 002B             		bclr	#7,$2B(a0)
0001704E 6000                       		bra.s	Obj78_Display
00017050                            ; ===========================================================================
00017050                            
00017050                            Obj78_AniHead:
00017050 0201 0010                  		andi.b	#$10,d1
00017054 D001                       		add.b	d1,d0
00017056 1140 001A                  		move.b	d0,$1A(a0)
0001705A                            
0001705A                            Obj78_Display:
0001705A 3028 0008                  		move.w	8(a0),d0
0001705E 0240 FF80                  		andi.w	#$FF80,d0
00017062 3238 F700                  		move.w	($FFFFF700).w,d1
00017066 0441 0080                  		subi.w	#$80,d1
0001706A 0241 FF80                  		andi.w	#$FF80,d1
0001706E 9041                       		sub.w	d1,d0
00017070 0C40 0280                  		cmpi.w	#$280,d0
00017074 6200 0000                  		bhi.w	Obj78_ChkGone
00017078 4EF9 0000 DB40             		jmp	DisplaySprite
0001707E                            ; ===========================================================================
0001707E                            
0001707E                            Obj78_ChkGone:
0001707E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017082 7000                       		moveq	#0,d0
00017084 1028 0023                  		move.b	$23(a0),d0
00017088 6700                       		beq.s	loc_16ABC
0001708A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017090                            
00017090                            loc_16ABC:
00017090 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00017096 4E75                       		rts	
00017098                            ; ===========================================================================
00017098                            
00017098                            Obj78_Delete:				; XREF: Obj78_Index
00017098 4EF9 0000 DB7C             		jmp	DeleteObject
0001709E                            ; ===========================================================================
0001709E 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
000170A0 0000                       		dc.w loc_16B02-Obj78_Index2
000170A2                            ; ===========================================================================
000170A2                            
000170A2                            Obj78_Move:				; XREF: Obj78_Index2
000170A2 5328 002A                  		subq.b	#1,$2A(a0)
000170A6 6B00                       		bmi.s	Obj78_Move2
000170A8 4E75                       		rts	
000170AA                            ; ===========================================================================
000170AA                            
000170AA                            Obj78_Move2:
000170AA 5428 0025                  		addq.b	#2,$25(a0)
000170AE 117C 0010 002A             		move.b	#$10,$2A(a0)
000170B4 317C FF40 0010             		move.w	#-$C0,$10(a0)
000170BA 317C 0040 0014             		move.w	#$40,$14(a0)
000170C0 0868 0004 002B             		bchg	#4,$2B(a0)
000170C6 6600                       		bne.s	loc_16AFC
000170C8 4268 0010                  		clr.w	$10(a0)
000170CC 4468 0014                  		neg.w	$14(a0)
000170D0                            
000170D0                            loc_16AFC:
000170D0 08E8 0007 002B             		bset	#7,$2B(a0)
000170D6                            
000170D6                            loc_16B02:				; XREF: Obj78_Index2
000170D6 5328 002A                  		subq.b	#1,$2A(a0)
000170DA 6B00                       		bmi.s	loc_16B5E
000170DC 2F28 0008                  		move.l	8(a0),-(sp)
000170E0 2428 0008                  		move.l	8(a0),d2
000170E4 3028 0010                  		move.w	$10(a0),d0
000170E8 0828 0000 0022             		btst	#0,$22(a0)
000170EE 6700                       		beq.s	loc_16B1E
000170F0 4440                       		neg.w	d0
000170F2                            
000170F2                            loc_16B1E:
000170F2 48C0                       		ext.l	d0
000170F4 E180                       		asl.l	#8,d0
000170F6 D480                       		add.l	d0,d2
000170F8 2142 0008                  		move.l	d2,8(a0)
000170FC 4EBA E2E6                  		jsr	ObjHitFloor
00017100 241F                       		move.l	(sp)+,d2
00017102 0C41 FFF8                  		cmpi.w	#-8,d1
00017106 6D00                       		blt.s	loc_16B70
00017108 0C41 000C                  		cmpi.w	#$C,d1
0001710C 6C00                       		bge.s	loc_16B70
0001710E D368 000C                  		add.w	d1,$C(a0)
00017112 4842                       		swap	d2
00017114 B468 0008                  		cmp.w	8(a0),d2
00017118 6700                       		beq.s	locret_16B5C
0001711A 7000                       		moveq	#0,d0
0001711C 1028 003C                  		move.b	$3C(a0),d0
00017120 5228 003C                  		addq.b	#1,$3C(a0)
00017124 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001712A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001712E                            
0001712E                            locret_16B5C:
0001712E 4E75                       		rts	
00017130                            ; ===========================================================================
00017130                            
00017130                            loc_16B5E:
00017130 5528 0025                  		subq.b	#2,$25(a0)
00017134 117C 0007 002A             		move.b	#7,$2A(a0)
0001713A 317C 0000 0010             		move.w	#0,$10(a0)
00017140 4E75                       		rts	
00017142                            ; ===========================================================================
00017142                            
00017142                            loc_16B70:
00017142 2142 0008                  		move.l	d2,8(a0)
00017146 0868 0000 0022             		bchg	#0,$22(a0)
0001714C 1168 0022 0001             		move.b	$22(a0),1(a0)
00017152 7000                       		moveq	#0,d0
00017154 1028 003C                  		move.b	$3C(a0),d0
00017158 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
0001715E 5228 003C                  		addq.b	#1,$3C(a0)
00017162 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017168 4E75                       		rts	
0001716A                            ; ===========================================================================
0001716A                            
0001716A                            Obj78_BodySeg2:				; XREF: Obj78_Index
0001716A 2268 003C                  		movea.l	$3C(a0),a1
0001716E 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017174 6A00                       		bpl.s	Obj78_BodySeg1
00017176 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001717C 1028 0026                  		move.b	$26(a0),d0
00017180 0240 007F                  		andi.w	#$7F,d0
00017184 5828 0026                  		addq.b	#4,$26(a0)
00017188 4A31 0004                  		tst.b	4(a1,d0.w)
0001718C 6A00                       		bpl.s	Obj78_AniBody
0001718E 5828 0026                  		addq.b	#4,$26(a0)
00017192                            
00017192                            Obj78_AniBody:
00017192 1031 0000                  		move.b	(a1,d0.w),d0
00017196 5000                       		addq.b	#8,d0
00017198 1140 001A                  		move.b	d0,$1A(a0)
0001719C                            
0001719C                            Obj78_BodySeg1:				; XREF: Obj78_Index
0001719C 2268 003C                  		movea.l	$3C(a0),a1
000171A0 4A28 0022                  		tst.b	$22(a0)
000171A4 6B00 0000                  		bmi.w	loc_16C90
000171A8 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000171AE 1169 0025 0025             		move.b	$25(a1),$25(a0)
000171B4 6700 0000                  		beq.w	loc_16C64
000171B8 3169 0014 0014             		move.w	$14(a1),$14(a0)
000171BE 3029 0010                  		move.w	$10(a1),d0
000171C2 D069 0014                  		add.w	$14(a1),d0
000171C6 3140 0010                  		move.w	d0,$10(a0)
000171CA 2428 0008                  		move.l	8(a0),d2
000171CE 2602                       		move.l	d2,d3
000171D0 3028 0010                  		move.w	$10(a0),d0
000171D4 0828 0000 0022             		btst	#0,$22(a0)
000171DA 6700                       		beq.s	loc_16C0C
000171DC 4440                       		neg.w	d0
000171DE                            
000171DE                            loc_16C0C:
000171DE 48C0                       		ext.l	d0
000171E0 E180                       		asl.l	#8,d0
000171E2 D480                       		add.l	d0,d2
000171E4 2142 0008                  		move.l	d2,8(a0)
000171E8 4843                       		swap	d3
000171EA B668 0008                  		cmp.w	8(a0),d3
000171EE 6700                       		beq.s	loc_16C64
000171F0 7000                       		moveq	#0,d0
000171F2 1028 003C                  		move.b	$3C(a0),d0
000171F6 1231 002C                  		move.b	$2C(a1,d0.w),d1
000171FA 0C01 0080                  		cmpi.b	#-$80,d1
000171FE 6600                       		bne.s	loc_16C50
00017200 4843                       		swap	d3
00017202 2143 0008                  		move.l	d3,8(a0)
00017206 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001720A 0868 0000 0022             		bchg	#0,$22(a0)
00017210 1168 0022 0001             		move.b	$22(a0),1(a0)
00017216 5228 003C                  		addq.b	#1,$3C(a0)
0001721A 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017220 6000                       		bra.s	loc_16C64
00017222                            ; ===========================================================================
00017222                            
00017222                            loc_16C50:
00017222 4881                       		ext.w	d1
00017224 D368 000C                  		add.w	d1,$C(a0)
00017228 5228 003C                  		addq.b	#1,$3C(a0)
0001722C 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017232 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017236                            
00017236                            loc_16C64:
00017236 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
0001723C 6700                       		beq.s	loc_16C90
0001723E 0C11 0027                  		cmpi.b	#$27,0(a1)
00017242 6700                       		beq.s	loc_16C7C
00017244 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
0001724A 6600                       		bne.s	loc_16C82
0001724C                            
0001724C                            loc_16C7C:
0001724C 117C 000A 0024             		move.b	#$A,$24(a0)
00017252                            
00017252                            loc_16C82:
00017252 4EF9 0000 DB40             		jmp	DisplaySprite
00017258                            
00017258                            ; ===========================================================================
00017258 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00017260                            ; ===========================================================================
00017260                            
00017260                            loc_16C90:
00017260 08E9 0007 0022             		bset	#7,$22(a1)
00017266                            
00017266                            loc_16C96:
00017266 7000                       		moveq	#0,d0
00017268 1028 0024                  		move.b	$24(a0),d0
0001726C 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00017270 0828 0000 0022             		btst	#0,$22(a0)
00017276 6700                       		beq.s	loc_16CAA
00017278 4440                       		neg.w	d0
0001727A                            
0001727A                            loc_16CAA:
0001727A 3140 0010                  		move.w	d0,$10(a0)
0001727E 317C FC00 0012             		move.w	#-$400,$12(a0)
00017284 117C 000C 0024             		move.b	#$C,$24(a0)
0001728A 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00017290                            
00017290                            loc_16CC0:				; XREF: Obj78_Index
00017290 4EB9 0000 DAEE             		jsr	ObjectFall
00017296 4A68 0012                  		tst.w	$12(a0)
0001729A 6B00                       		bmi.s	loc_16CE0
0001729C 4EBA E146                  		jsr	ObjHitFloor
000172A0 4A41                       		tst.w	d1
000172A2 6A00                       		bpl.s	loc_16CE0
000172A4 D368 000C                  		add.w	d1,$C(a0)
000172A8 317C FC00 0012             		move.w	#-$400,$12(a0)
000172AE                            
000172AE                            loc_16CE0:
000172AE 4A28 0001                  		tst.b	1(a0)
000172B2 6A00 FDCA                  		bpl.w	Obj78_ChkGone
000172B6 4EF9 0000 DB40             		jmp	DisplaySprite
000172BC                            ; ===========================================================================
000172BC                            Ani_obj78:
000172BC                            	include "_anim\obj78.asm"
000172BC                            ; ---------------------------------------------------------------------------
000172BC                            ; Animation script - Caterkiller enemy (uses non-standard format)
000172BC                            ; ---------------------------------------------------------------------------
000172BC 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000172CC 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
000172DC 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
000172EC 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
000172FC 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
0001730C 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
0001731C 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
0001732C 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
0001733C                            	even
0001733C                            	even
0001733C                            
0001733C                            ; ---------------------------------------------------------------------------
0001733C                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001733C                            ; ---------------------------------------------------------------------------
0001733C                            Map_obj78:
0001733C                            	include "_maps\obj78.asm"
0001733C                            ; ---------------------------------------------------------------------------
0001733C                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001733C                            ; ---------------------------------------------------------------------------
0001733C 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00017340 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00017344 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00017348 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
0001734C 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00017350 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00017354 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00017358 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
0001735C 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00017360 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00017364 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00017368 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
0001736C 01                         byte_16D9E:	dc.b 1
0001736D F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00017372 01                         byte_16DA4:	dc.b 1
00017373 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00017378 01                         byte_16DAA:	dc.b 1
00017379 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
0001737E 01                         byte_16DB0:	dc.b 1
0001737F EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00017384 01                         byte_16DB6:	dc.b 1
00017385 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
0001738A 01                         byte_16DBC:	dc.b 1
0001738B ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00017390 01                         byte_16DC2:	dc.b 1
00017391 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00017396 01                         byte_16DC8:	dc.b 1
00017397 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
0001739C 01                         byte_16DCE:	dc.b 1
0001739D F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000173A2 01                         byte_16DD4:	dc.b 1
000173A3 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
000173A8 01                         byte_16DDA:	dc.b 1
000173A9 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
000173AE 01                         byte_16DE0:	dc.b 1
000173AF F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000173B4 01                         byte_16DE6:	dc.b 1
000173B5 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000173BA 01                         byte_16DEC:	dc.b 1
000173BB F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000173C0 01                         byte_16DF2:	dc.b 1
000173C1 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000173C6 01                         byte_16DF8:	dc.b 1
000173C7 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000173CC 01                         byte_16DFE:	dc.b 1
000173CD F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000173D2 01                         byte_16E04:	dc.b 1
000173D3 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000173D8 01                         byte_16E0A:	dc.b 1
000173D9 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000173DE 01                         byte_16E10:	dc.b 1
000173DF EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
000173E4 01                         byte_16E16:	dc.b 1
000173E5 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
000173EA 01                         byte_16E1C:	dc.b 1
000173EB ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
000173F0 01                         byte_16E22:	dc.b 1
000173F1 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
000173F6 01                         byte_16E28:	dc.b 1
000173F7 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
000173FC                            		even
000173FC                            		even
000173FC                            
000173FC                            ; ===========================================================================
000173FC                            ; ---------------------------------------------------------------------------
000173FC                            ; Object 79 - lamppost
000173FC                            ; ---------------------------------------------------------------------------
000173FC                            
000173FC                            Obj79:					; XREF: Obj_Index
000173FC 7000                       		moveq	#0,d0
000173FE 1028 0024                  		move.b	$24(a0),d0
00017402 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00017406 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
0001740A 4EFA 87DC                  		jmp	MarkObjGone
0001740E                            ; ===========================================================================
0001740E 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017410 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00017412 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00017414 0000                       		dc.w Obj79_Twirl-Obj79_Index
00017416                            ; ===========================================================================
00017416                            
00017416                            Obj79_Main:				; XREF: Obj79_Index
00017416 5428 0024                  		addq.b	#2,$24(a0)
0001741A 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00017422 317C 07A0 0002             		move.w	#$7A0,2(a0)
00017428 117C 0004 0001             		move.b	#4,1(a0)
0001742E 117C 0008 0019             		move.b	#8,$19(a0)
00017434 117C 0005 0018             		move.b	#5,$18(a0)
0001743A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001743E 7000                       		moveq	#0,d0
00017440 1028 0023                  		move.b	$23(a0),d0
00017444 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001744A 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017450 6600                       		bne.s	Obj79_RedLamp
00017452 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017456 0201 007F                  		andi.b	#$7F,d1
0001745A 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
0001745E 0202 007F                  		andi.b	#$7F,d2
00017462 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00017464 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00017466                            
00017466                            Obj79_RedLamp:
00017466 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001746C 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00017472 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00017478 4E75                       		rts	
0001747A                            ; ===========================================================================
0001747A                            
0001747A                            Obj79_BlueLamp:				; XREF: Obj79_Index
0001747A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001747E 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00017482 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017486 6B00 0000                  		bmi.w	locret_16F90
0001748A 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001748E 0201 007F                  		andi.b	#$7F,d1
00017492 1428 0028                  		move.b	$28(a0),d2
00017496 0202 007F                  		andi.b	#$7F,d2
0001749A B202                       		cmp.b	d2,d1
0001749C 6500                       		bcs.s	Obj79_HitLamp
0001749E 45F8 FC00                  		lea	($FFFFFC00).w,a2
000174A2 7000                       		moveq	#0,d0
000174A4 1028 0023                  		move.b	$23(a0),d0
000174A8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000174AE 117C 0004 0024             		move.b	#4,$24(a0)
000174B4 117C 0003 001A             		move.b	#3,$1A(a0)
000174BA 6000 0000                  		bra.w	locret_16F90
000174BE                            ; ===========================================================================
000174BE                            
000174BE                            Obj79_HitLamp:
000174BE 3038 D008                  		move.w	($FFFFD008).w,d0
000174C2 9068 0008                  		sub.w	8(a0),d0
000174C6 5040                       		addq.w	#8,d0
000174C8 0C40 0010                  		cmpi.w	#$10,d0
000174CC 6400 0000                  		bcc.w	locret_16F90
000174D0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000174D4 9068 000C                  		sub.w	$C(a0),d0
000174D8 0640 0040                  		addi.w	#$40,d0
000174DC 0C40 0068                  		cmpi.w	#$68,d0
000174E0 6400                       		bcc.s	locret_16F90
000174E2 303C 00A1                  		move.w	#$A1,d0
000174E6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lamppost sound
000174EC 5428 0024                  		addq.b	#2,$24(a0)
000174F0 4EB9 0000 DFC6             		jsr	SingleObjLoad
000174F6 6600                       		bne.s	loc_16F76
000174F8 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
000174FC 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017502 3368 0008 0030             		move.w	8(a0),$30(a1)
00017508 3368 000C 0032             		move.w	$C(a0),$32(a1)
0001750E 0469 0018 0032             		subi.w	#$18,$32(a1)
00017514 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
0001751C 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017522 137C 0004 0001             		move.b	#4,1(a1)
00017528 137C 0008 0019             		move.b	#8,$19(a1)
0001752E 137C 0004 0018             		move.b	#4,$18(a1)
00017534 137C 0002 001A             		move.b	#2,$1A(a1)
0001753A 337C 0020 0036             		move.w	#$20,$36(a1)
00017540                            
00017540                            loc_16F76:
00017540 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00017546 6100 0000                  		bsr.w	Obj79_StoreInfo
0001754A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001754E 7000                       		moveq	#0,d0
00017550 1028 0023                  		move.b	$23(a0),d0
00017554 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001755A                            
0001755A                            locret_16F90:
0001755A 4E75                       		rts	
0001755C                            ; ===========================================================================
0001755C                            
0001755C                            Obj79_AfterHit:				; XREF: Obj79_Index
0001755C 4E75                       		rts	
0001755E                            ; ===========================================================================
0001755E                            
0001755E                            Obj79_Twirl:				; XREF: Obj79_Index
0001755E 5368 0036                  		subq.w	#1,$36(a0)
00017562 6A00                       		bpl.s	loc_16FA0
00017564 117C 0004 0024             		move.b	#4,$24(a0)
0001756A                            
0001756A                            loc_16FA0:
0001756A 1028 0026                  		move.b	$26(a0),d0
0001756E 0428 0010 0026             		subi.b	#$10,$26(a0)
00017574 0400 0040                  		subi.b	#$40,d0
00017578 4EB9 0000 2BE8             		jsr	(CalcSine).l
0001757E C3FC 0C00                  		muls.w	#$C00,d1
00017582 4841                       		swap	d1
00017584 D268 0030                  		add.w	$30(a0),d1
00017588 3141 0008                  		move.w	d1,8(a0)
0001758C C1FC 0C00                  		muls.w	#$C00,d0
00017590 4840                       		swap	d0
00017592 D068 0032                  		add.w	$32(a0),d0
00017596 3140 000C                  		move.w	d0,$C(a0)
0001759A 4E75                       		rts	
0001759C                            ; ===========================================================================
0001759C                            ; ---------------------------------------------------------------------------
0001759C                            ; Subroutine to	store information when you hit a lamppost
0001759C                            ; ---------------------------------------------------------------------------
0001759C                            
0001759C                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
0001759C 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
000175A2 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
000175A8 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
000175AE 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000175B4 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000175BA 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
000175C0 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
000175C6 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000175CC 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
000175D2 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
000175D8 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
000175DE 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
000175E4 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
000175EA 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
000175F0 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
000175F6 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
000175FC 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017602 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017608 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
0001760E 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017614 4E75                       		rts	
00017616                            
00017616                            ; ---------------------------------------------------------------------------
00017616                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00017616                            ; ---------------------------------------------------------------------------
00017616                            
00017616                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017616                            
00017616                            
00017616                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00017616 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
0001761C 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017622 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017628 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
0001762E 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017634 4278 FE20                  		clr.w	($FFFFFE20).w
00017638 4238 FE1B                  		clr.b	($FFFFFE1B).w
0001763C 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017642 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00017648 5338 FE24                  		subq.b	#1,($FFFFFE24).w
0001764C 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017652 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017658 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
0001765E 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017664 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
0001766A 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017670 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017676 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
0001767C 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017682 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017688 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
0001768E 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017694 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001769A 6600                       		bne.s	loc_170E4
0001769C 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
000176A2 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000176A8 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000176AE                            
000176AE                            loc_170E4:
000176AE 4A38 FE30                  		tst.b	($FFFFFE30).w
000176B2 6A00                       		bpl.s	locret_170F6
000176B4 3038 FE32                  		move.w	($FFFFFE32).w,d0
000176B8 0440 00A0                  		subi.w	#$A0,d0
000176BC 31C0 F728                  		move.w	d0,($FFFFF728).w
000176C0                            
000176C0                            locret_170F6:
000176C0 4E75                       		rts	
000176C2                            ; End of function Obj79_LoadInfo
000176C2                            
000176C2                            ; ===========================================================================
000176C2                            ; ---------------------------------------------------------------------------
000176C2                            ; Sprite mappings - lamppost
000176C2                            ; ---------------------------------------------------------------------------
000176C2                            Map_obj79:
000176C2                            	include "_maps\obj79.asm"
000176C2                            ; ---------------------------------------------------------------------------
000176C2                            ; Sprite mappings - lamppost
000176C2                            ; ---------------------------------------------------------------------------
000176C2 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
000176C6 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
000176CA 06                         byte_17100:	dc.b 6
000176CB E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000176D0 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000176D5 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000176DA F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000176DF D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
000176E4 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
000176E9 04                         byte_1711F:	dc.b 4
000176EA E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000176EF E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000176F4 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000176F9 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000176FE 02                         byte_17134:	dc.b 2
000176FF F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017704 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017709 06                         byte_1713F:	dc.b 6
0001770A E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001770F E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017714 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017719 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001771E D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017723 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017728                            		even
00017728                            		even
00017728                            
00017728                            ; ===========================================================================
00017728                            ; ---------------------------------------------------------------------------
00017728                            ; Object 7D - hidden points at the end of a level
00017728                            ; ---------------------------------------------------------------------------
00017728                            
00017728                            Obj7D:					; XREF: Obj_Index
00017728 7000                       		moveq	#0,d0
0001772A 1028 0024                  		move.b	$24(a0),d0
0001772E 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017732 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017736                            ; ===========================================================================
00017736 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017738 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
0001773A                            ; ===========================================================================
0001773A                            
0001773A                            Obj7D_Main:				; XREF: Obj7D_Index
0001773A 7410                       		moveq	#$10,d2
0001773C 3602                       		move.w	d2,d3
0001773E D643                       		add.w	d3,d3
00017740 43F8 D000                  		lea	($FFFFD000).w,a1
00017744 3029 0008                  		move.w	8(a1),d0
00017748 9068 0008                  		sub.w	8(a0),d0
0001774C D042                       		add.w	d2,d0
0001774E B043                       		cmp.w	d3,d0
00017750 6400                       		bcc.s	Obj7D_ChkDel
00017752 3229 000C                  		move.w	$C(a1),d1
00017756 9268 000C                  		sub.w	$C(a0),d1
0001775A D242                       		add.w	d2,d1
0001775C B243                       		cmp.w	d3,d1
0001775E 6400                       		bcc.s	Obj7D_ChkDel
00017760 4A78 FE08                  		tst.w	($FFFFFE08).w
00017764 6600                       		bne.s	Obj7D_ChkDel
00017766 4A38 F7CD                  		tst.b	($FFFFF7CD).w
0001776A 6600                       		bne.s	Obj7D_ChkDel
0001776C 5428 0024                  		addq.b	#2,$24(a0)
00017770 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017778 317C 84B6 0002             		move.w	#$84B6,2(a0)
0001777E 0028 0004 0001             		ori.b	#4,1(a0)
00017784 117C 0000 0018             		move.b	#0,$18(a0)
0001778A 117C 0010 0019             		move.b	#$10,$19(a0)
00017790 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017796 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
0001779C 303C 00C9                  		move.w	#$C9,d0
000177A0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play bonus sound
000177A6 7000                       		moveq	#0,d0
000177A8 1028 0028                  		move.b	$28(a0),d0
000177AC D040                       		add.w	d0,d0
000177AE 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
000177B2 4EB9 0000 0000             		jsr	AddPoints
000177B8                            
000177B8                            Obj7D_ChkDel:
000177B8 3028 0008                  		move.w	8(a0),d0
000177BC 0240 FF80                  		andi.w	#$FF80,d0
000177C0 3238 F700                  		move.w	($FFFFF700).w,d1
000177C4 0441 0080                  		subi.w	#$80,d1
000177C8 0241 FF80                  		andi.w	#$FF80,d1
000177CC 9041                       		sub.w	d1,d0
000177CE 0C40 0280                  		cmpi.w	#$280,d0
000177D2 6200                       		bhi.s	Obj7D_Delete
000177D4 4E75                       		rts	
000177D6                            ; ===========================================================================
000177D6                            
000177D6                            Obj7D_Delete:
000177D6 4EF9 0000 DB7C             		jmp	DeleteObject
000177DC                            ; ===========================================================================
000177DC 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
000177DE 03E8                       		dc.w 1000
000177E0 0064                       		dc.w 100
000177E2 0001                       		dc.w 1
000177E4                            ; ===========================================================================
000177E4                            
000177E4                            Obj7D_DelayDel:				; XREF: Obj7D_Index
000177E4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
000177E8 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
000177EA 3028 0008                  		move.w	8(a0),d0
000177EE 0240 FF80                  		andi.w	#-$80,d0
000177F2 3238 F700                  		move.w	($FFFFF700).w,d1
000177F6 0441 0080                  		subi.w	#$80,d1
000177FA 0241 FF80                  		andi.w	#-$80,d1
000177FE 9041                       		sub.w	d1,d0
00017800 0C40 0280                  		cmpi.w	#$280,d0
00017804 6200                       		bhi.s	Obj7D_Delete2
00017806 4EF9 0000 DB40             		jmp	DisplaySprite
0001780C                            ; ===========================================================================
0001780C                            
0001780C                            Obj7D_Delete2:
0001780C 4EF9 0000 DB7C             		jmp	DeleteObject
00017812                            ; ===========================================================================
00017812                            ; ---------------------------------------------------------------------------
00017812                            ; Sprite mappings - hidden points at the end of	a level
00017812                            ; ---------------------------------------------------------------------------
00017812                            Map_obj7D:
00017812                            	include "_maps\obj7D.asm"
00017812                            ; ---------------------------------------------------------------------------
00017812                            ; Sprite mappings - hidden points at the end of	a level
00017812                            ; ---------------------------------------------------------------------------
00017812 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017816 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
0001781A 00                         byte_17250:	dc.b 0
0001781B 01                         byte_17251:	dc.b 1
0001781C F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017821 01                         byte_17257:	dc.b 1
00017822 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017827 01                         byte_1725D:	dc.b 1
00017828 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001782E 00                         		even
0001782E 00                         		even
0001782E                            
0001782E                            ; ===========================================================================
0001782E                            ; ---------------------------------------------------------------------------
0001782E                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001782E                            ; ---------------------------------------------------------------------------
0001782E                            
0001782E                            Obj8A:					; XREF: Obj_Index
0001782E 7000                       		moveq	#0,d0
00017830 1028 0024                  		move.b	$24(a0),d0
00017834 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017838 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
0001783C                            ; ===========================================================================
0001783C 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
0001783E 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017840                            ; ===========================================================================
00017840                            
00017840                            Obj8A_Main:				; XREF: Obj8A_Index
00017840 5428 0024                  		addq.b	#2,$24(a0)
00017844 317C 0120 0008             		move.w	#$120,8(a0)
0001784A 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017850 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017858 317C 05A0 0002             		move.w	#$5A0,2(a0)
0001785E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017862 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017866 117C 0000 0001             		move.b	#0,1(a0)
0001786C 117C 0000 0018             		move.b	#0,$18(a0)
00017872 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017878 6600                       		bne.s	Obj8A_Display	; if not, branch
0001787A 317C 00A6 0002             		move.w	#$A6,2(a0)
00017880 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017886 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
0001788A 6700                       		beq.s	Obj8A_Display	; if not, branch
0001788C 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017892 6600                       		bne.s	Obj8A_Display	; if not, branch
00017894 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
0001789A 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
000178A0 4EF9 0000 DB7C             		jmp	DeleteObject
000178A6                            ; ===========================================================================
000178A6                            
000178A6                            Obj8A_Display:				; XREF: Obj8A_Index
000178A6 4EF9 0000 DB40             		jmp	DisplaySprite
000178AC                            ; ===========================================================================
000178AC                            ; ---------------------------------------------------------------------------
000178AC                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000178AC                            ; ---------------------------------------------------------------------------
000178AC                            Map_obj8A:
000178AC                            	include "_maps\obj8A.asm"
000178AC                            ; --------------------------------------------------------------------------------
000178AC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000178AC                            ; --------------------------------------------------------------------------------
000178AC                            
000178AC                            SME_MD8yg:	
000178AC 0000 0000                  		dc.w SME_MD8yg_16-SME_MD8yg, SME_MD8yg_5D-SME_MD8yg	
000178B0 0000 0000                  		dc.w SME_MD8yg_AE-SME_MD8yg, SME_MD8yg_E1-SME_MD8yg	
000178B4 0000 0000                  		dc.w SME_MD8yg_15A-SME_MD8yg, SME_MD8yg_1BF-SME_MD8yg	
000178B8 0000 0000                  		dc.w SME_MD8yg_242-SME_MD8yg, SME_MD8yg_2B6-SME_MD8yg	
000178BC 0000 0000                  		dc.w SME_MD8yg_352-SME_MD8yg, SME_MD8yg_39E-SME_MD8yg	
000178C0 0000                       		dc.w SME_MD8yg_3C7-SME_MD8yg	
000178C2 0E                         SME_MD8yg_16:	dc.b $E	
000178C3 F805 802E 88               		dc.b $F8, 5, $80, $2E, $88	
000178C8 F805 8026 98               		dc.b $F8, 5, $80, $26, $98	
000178CD F805 801A A8               		dc.b $F8, 5, $80, $1A, $A8	
000178D2 F801 8046 B8               		dc.b $F8, 1, $80, $46, $B8	
000178D7 F805 801E C0               		dc.b $F8, 5, $80, $1E, $C0	
000178DC F805 803E D8               		dc.b $F8, 5, $80, $3E, $D8	
000178E1 F805 800E E8               		dc.b $F8, 5, $80, $E, $E8	
000178E6 F805 8004 F8               		dc.b $F8, 5, $80, 4, $F8	
000178EB F809 8008 08               		dc.b $F8, 9, $80, 8, 8	
000178F0 F805 802E 28               		dc.b $F8, 5, $80, $2E, $28	
000178F5 F805 803E 38               		dc.b $F8, 5, $80, $3E, $38	
000178FA F805 8004 48               		dc.b $F8, 5, $80, 4, $48	
000178FF F805 805C 58               		dc.b $F8, 5, $80, $5C, $58	
00017904 F805 805C 68               		dc.b $F8, 5, $80, $5C, $68	
00017909 10                         SME_MD8yg_5D:	dc.b $10	
0001790A D805 0000 80               		dc.b $D8, 5, 0, 0, $80	
0001790F D805 0004 90               		dc.b $D8, 5, 0, 4, $90	
00017914 D809 0008 A0               		dc.b $D8, 9, 0, 8, $A0	
00017919 D805 000E B4               		dc.b $D8, 5, 0, $E, $B4	
0001791E D805 0012 D0               		dc.b $D8, 5, 0, $12, $D0	
00017923 D805 0016 E0               		dc.b $D8, 5, 0, $16, $E0	
00017928 D805 0004 F0               		dc.b $D8, 5, 0, 4, $F0	
0001792D D805 001A 00               		dc.b $D8, 5, 0, $1A, 0	
00017932 0805 001E C8               		dc.b 8, 5, 0, $1E, $C8	
00017937 0805 0004 D8               		dc.b 8, 5, 0, 4, $D8	
0001793C 0805 0022 E8               		dc.b 8, 5, 0, $22, $E8	
00017941 0805 0026 F8               		dc.b 8, 5, 0, $26, $F8	
00017946 0805 0016 08               		dc.b 8, 5, 0, $16, 8	
0001794B 0805 002A 20               		dc.b 8, 5, 0, $2A, $20	
00017950 0805 0004 30               		dc.b 8, 5, 0, 4, $30	
00017955 0805 002E 44               		dc.b 8, 5, 0, $2E, $44	
0001795A 0A                         SME_MD8yg_AE:	dc.b $A	
0001795B D805 0012 80               		dc.b $D8, 5, 0, $12, $80	
00017960 D805 0022 90               		dc.b $D8, 5, 0, $22, $90	
00017965 D805 0026 A0               		dc.b $D8, 5, 0, $26, $A0	
0001796A D805 0000 B0               		dc.b $D8, 5, 0, 0, $B0	
0001796F D805 0022 C0               		dc.b $D8, 5, 0, $22, $C0	
00017974 D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0	
00017979 D809 0008 E0               		dc.b $D8, 9, 0, 8, $E0	
0001797E 0805 002A E8               		dc.b 8, 5, 0, $2A, $E8	
00017983 0805 0032 F8               		dc.b 8, 5, 0, $32, $F8	
00017988 0805 0036 08               		dc.b 8, 5, 0, $36, 8	
0001798D 18                         SME_MD8yg_E1:	dc.b $18	
0001798E D805 001E 88               		dc.b $D8, 5, 0, $1E, $88	
00017993 D805 003A 98               		dc.b $D8, 5, 0, $3A, $98	
00017998 D805 0004 A8               		dc.b $D8, 5, 0, 4, $A8	
0001799D D805 0022 B8               		dc.b $D8, 5, 0, $22, $B8	
000179A2 D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
000179A7 D805 001E D8               		dc.b $D8, 5, 0, $1E, $D8	
000179AC D805 003E E8               		dc.b $D8, 5, 0, $3E, $E8	
000179B1 D805 000E F8               		dc.b $D8, 5, 0, $E, $F8	
000179B6 D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
000179BB D805 0042 20               		dc.b $D8, 5, 0, $42, $20	
000179C0 D805 000E 30               		dc.b $D8, 5, 0, $E, $30	
000179C5 D805 002E 40               		dc.b $D8, 5, 0, $2E, $40	
000179CA D801 0046 50               		dc.b $D8, 1, 0, $46, $50	
000179CF D805 0000 58               		dc.b $D8, 5, 0, 0, $58	
000179D4 D805 001A 68               		dc.b $D8, 5, 0, $1A, $68	
000179D9 0805 0048 C0               		dc.b 8, 5, 0, $48, $C0	
000179DE 0801 0046 D0               		dc.b 8, 1, 0, $46, $D0	
000179E3 0805 0000 D8               		dc.b 8, 5, 0, 0, $D8	
000179E8 0801 0046 E8               		dc.b 8, 1, 0, $46, $E8	
000179ED 0805 002E F0               		dc.b 8, 5, 0, $2E, $F0	
000179F2 0805 0016 00               		dc.b 8, 5, 0, $16, 0	
000179F7 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
000179FC 0805 001A 20               		dc.b 8, 5, 0, $1A, $20	
00017A01 0805 0042 30               		dc.b 8, 5, 0, $42, $30	
00017A06 14                         SME_MD8yg_15A:	dc.b $14	
00017A07 D005 0042 A0               		dc.b $D0, 5, 0, $42, $A0	
00017A0C D005 000E B0               		dc.b $D0, 5, 0, $E, $B0	
00017A11 D005 002E C0               		dc.b $D0, 5, 0, $2E, $C0	
00017A16 D001 0046 D0               		dc.b $D0, 1, 0, $46, $D0	
00017A1B D005 0000 D8               		dc.b $D0, 5, 0, 0, $D8	
00017A20 D005 001A E8               		dc.b $D0, 5, 0, $1A, $E8	
00017A25 0005 004C E8               		dc.b 0, 5, 0, $4C, $E8	
00017A2A 0001 0046 F8               		dc.b 0, 1, 0, $46, $F8	
00017A2F 0005 001A 04               		dc.b 0, 5, 0, $1A, 4	
00017A34 0005 002A 14               		dc.b 0, 5, 0, $2A, $14	
00017A39 0005 0004 24               		dc.b 0, 5, 0, 4, $24	
00017A3E 2005 0012 D0               		dc.b $20, 5, 0, $12, $D0	
00017A43 2005 003A E0               		dc.b $20, 5, 0, $3A, $E0	
00017A48 2005 000E F0               		dc.b $20, 5, 0, $E, $F0	
00017A4D 2005 001A 00               		dc.b $20, 5, 0, $1A, 0	
00017A52 2001 0046 10               		dc.b $20, 1, 0, $46, $10	
00017A57 2005 0050 18               		dc.b $20, 5, 0, $50, $18	
00017A5C 2005 0022 30               		dc.b $20, 5, 0, $22, $30	
00017A61 2001 0046 40               		dc.b $20, 1, 0, $46, $40	
00017A66 2005 000E 48               		dc.b $20, 5, 0, $E, $48	
00017A6B 1A                         SME_MD8yg_1BF:	dc.b $1A	
00017A6C D805 002E 98               		dc.b $D8, 5, 0, $2E, $98	
00017A71 D805 0026 A8               		dc.b $D8, 5, 0, $26, $A8	
00017A76 D805 0032 B8               		dc.b $D8, 5, 0, $32, $B8	
00017A7B D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	
00017A80 D805 0054 D8               		dc.b $D8, 5, 0, $54, $D8	
00017A85 D805 0012 F8               		dc.b $D8, 5, 0, $12, $F8	
00017A8A D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
00017A8F D805 0026 18               		dc.b $D8, 5, 0, $26, $18	
00017A94 D805 0042 28               		dc.b $D8, 5, 0, $42, $28	
00017A99 D805 0032 38               		dc.b $D8, 5, 0, $32, $38	
00017A9E D805 001E 48               		dc.b $D8, 5, 0, $1E, $48	
00017AA3 D805 000E 58               		dc.b $D8, 5, 0, $E, $58	
00017AA8 0809 0008 88               		dc.b 8, 9, 0, 8, $88	
00017AAD 0805 0004 9C               		dc.b 8, 5, 0, 4, $9C	
00017AB2 0805 002E AC               		dc.b 8, 5, 0, $2E, $AC	
00017AB7 0805 0004 BC               		dc.b 8, 5, 0, 4, $BC	
00017ABC 0805 003E CC               		dc.b 8, 5, 0, $3E, $CC	
00017AC1 0805 0026 DC               		dc.b 8, 5, 0, $26, $DC	
00017AC6 0805 001A F8               		dc.b 8, 5, 0, $1A, $F8	
00017ACB 0805 0004 08               		dc.b 8, 5, 0, 4, 8	
00017AD0 0805 0058 18               		dc.b 8, 5, 0, $58, $18	
00017AD5 0805 0004 28               		dc.b 8, 5, 0, 4, $28	
00017ADA 0809 0008 38               		dc.b 8, 9, 0, 8, $38	
00017ADF 0805 0032 4C               		dc.b 8, 5, 0, $32, $4C	
00017AE4 0805 0022 5C               		dc.b 8, 5, 0, $22, $5C	
00017AE9 0805 0004 6C               		dc.b 8, 5, 0, 4, $6C	
00017AEE 17                         SME_MD8yg_242:	dc.b $17	
00017AEF D005 002E 98               		dc.b $D0, 5, 0, $2E, $98	
00017AF4 D005 0026 A8               		dc.b $D0, 5, 0, $26, $A8	
00017AF9 D005 0032 B8               		dc.b $D0, 5, 0, $32, $B8	
00017AFE D005 001A C8               		dc.b $D0, 5, 0, $1A, $C8	
00017B03 D005 0054 D8               		dc.b $D0, 5, 0, $54, $D8	
00017B08 D005 0012 F8               		dc.b $D0, 5, 0, $12, $F8	
00017B0D D005 0022 08               		dc.b $D0, 5, 0, $22, 8	
00017B12 D005 0026 18               		dc.b $D0, 5, 0, $26, $18	
00017B17 D005 0000 28               		dc.b $D0, 5, 0, 0, $28	
00017B1C D005 0022 38               		dc.b $D0, 5, 0, $22, $38	
00017B21 D005 0004 48               		dc.b $D0, 5, 0, 4, $48	
00017B26 D009 0008 58               		dc.b $D0, 9, 0, 8, $58	
00017B2B 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017B30 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017B35 0009 0008 E8               		dc.b 0, 9, 0, 8, $E8	
00017B3A 0001 0046 FC               		dc.b 0, 1, 0, $46, $FC	
00017B3F 0005 003E 04               		dc.b 0, 5, 0, $3E, 4	
00017B44 0005 0004 14               		dc.b 0, 5, 0, 4, $14	
00017B49 2009 0008 D0               		dc.b $20, 9, 0, 8, $D0	
00017B4E 2005 0004 E4               		dc.b $20, 5, 0, 4, $E4	
00017B53 2005 001E F4               		dc.b $20, 5, 0, $1E, $F4	
00017B58 2005 0058 04               		dc.b $20, 5, 0, $58, 4	
00017B5D 2005 002A 14               		dc.b $20, 5, 0, $2A, $14	
00017B62 1F                         SME_MD8yg_2B6:	dc.b $1F	
00017B63 D805 002E 80               		dc.b $D8, 5, 0, $2E, $80	
00017B68 D805 0012 90               		dc.b $D8, 5, 0, $12, $90	
00017B6D D805 000E A0               		dc.b $D8, 5, 0, $E, $A0	
00017B72 D805 001E B0               		dc.b $D8, 5, 0, $1E, $B0	
00017B77 D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	
00017B7C D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
00017B81 D805 0016 D8               		dc.b $D8, 5, 0, $16, $D8	
00017B86 D805 003E F8               		dc.b $D8, 5, 0, $3E, $F8	
00017B8B D805 003A 08               		dc.b $D8, 5, 0, $3A, 8	
00017B90 D805 0004 18               		dc.b $D8, 5, 0, 4, $18	
00017B95 D805 001A 28               		dc.b $D8, 5, 0, $1A, $28	
00017B9A D805 0058 38               		dc.b $D8, 5, 0, $58, $38	
00017B9F D805 002E 48               		dc.b $D8, 5, 0, $2E, $48	
00017BA4 0005 005C B0               		dc.b 0, 5, 0, $5C, $B0	
00017BA9 0005 0032 C0               		dc.b 0, 5, 0, $32, $C0	
00017BAE 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017BB3 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017BB8 0005 0026 E8               		dc.b 0, 5, 0, $26, $E8	
00017BBD 0009 0008 00               		dc.b 0, 9, 0, 8, 0	
00017BC2 0001 0046 14               		dc.b 0, 1, 0, $46, $14	
00017BC7 0005 001A 1C               		dc.b 0, 5, 0, $1A, $1C	
00017BCC 0005 000E 2C               		dc.b 0, 5, 0, $E, $2C	
00017BD1 0005 0000 3C               		dc.b 0, 5, 0, 0, $3C	
00017BD6 0001 0046 4C               		dc.b 0, 1, 0, $46, $4C	
00017BDB 0005 002E 54               		dc.b 0, 5, 0, $2E, $54	
00017BE0 0005 003A 64               		dc.b 0, 5, 0, $3A, $64	
00017BE5 0001 0046 74               		dc.b 0, 1, 0, $46, $74	
00017BEA 2005 0012 F8               		dc.b $20, 5, 0, $12, $F8	
00017BEF 2005 0004 08               		dc.b $20, 5, 0, 4, 8	
00017BF4 2005 0012 18               		dc.b $20, 5, 0, $12, $18	
00017BF9 2005 0004 28               		dc.b $20, 5, 0, 4, $28	
00017BFE 0F                         SME_MD8yg_352:	dc.b $F	
00017BFF F805 0012 80               		dc.b $F8, 5, 0, $12, $80	
00017C04 F805 0022 90               		dc.b $F8, 5, 0, $22, $90	
00017C09 F805 000E A0               		dc.b $F8, 5, 0, $E, $A0	
00017C0E F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	
00017C13 F805 000E C0               		dc.b $F8, 5, 0, $E, $C0	
00017C18 F805 001A D0               		dc.b $F8, 5, 0, $1A, $D0	
00017C1D F805 003E E0               		dc.b $F8, 5, 0, $3E, $E0	
00017C22 F805 000E F0               		dc.b $F8, 5, 0, $E, $F0	
00017C27 F805 0042 00               		dc.b $F8, 5, 0, $42, 0	
00017C2C F805 0048 18               		dc.b $F8, 5, 0, $48, $18	
00017C31 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	
00017C36 F805 002E 40               		dc.b $F8, 5, 0, $2E, $40	
00017C3B F805 000E 50               		dc.b $F8, 5, 0, $E, $50	
00017C40 F805 0000 60               		dc.b $F8, 5, 0, 0, $60	
00017C45 F805 0004 70               		dc.b $F8, 5, 0, 4, $70	
00017C4A 08                         SME_MD8yg_39E:	dc.b 8	
00017C4B 3005 003E C0               		dc.b $30, 5, 0, $3E, $C0	
00017C50 3005 0022 D0               		dc.b $30, 5, 0, $22, $D0	
00017C55 3005 002A E0               		dc.b $30, 5, 0, $2A, $E0	
00017C5A 3005 0004 F8               		dc.b $30, 5, 0, 4, $F8	
00017C5F 3005 0000 08               		dc.b $30, 5, 0, 0, 8	
00017C64 3005 0004 18               		dc.b $30, 5, 0, 4, $18	
00017C69 3001 0046 28               		dc.b $30, 1, 0, $46, $28	
00017C6E 3005 001A 30               		dc.b $30, 5, 0, $1A, $30	
00017C73 17                         SME_MD8yg_3C7:	dc.b $17	
00017C74 E805 002E B4               		dc.b $E8, 5, 0, $2E, $B4	
00017C79 D805 0026 C4               		dc.b $D8, 5, 0, $26, $C4	
00017C7E E801 0046 44               		dc.b $E8, 1, 0, $46, $44	
00017C83 E805 001E 4C               		dc.b $E8, 5, 0, $1E, $4C	
00017C88 D805 003E 34               		dc.b $D8, 5, 0, $3E, $34	
00017C8D D805 000E 1C               		dc.b $D8, 5, 0, $E, $1C	
00017C92 D805 0004 FC               		dc.b $D8, 5, 0, 4, $FC	
00017C97 E809 0008 0C               		dc.b $E8, 9, 0, 8, $C	
00017C9C D805 002A B4               		dc.b $D8, 5, 0, $2A, $B4	
00017CA1 D805 0032 D4               		dc.b $D8, 5, 0, $32, $D4	
00017CA6 D805 103A EC               		dc.b $D8, 5, $10, $3A, $EC	
00017CAB D805 0032 0C               		dc.b $D8, 5, 0, $32, $C	
00017CB0 D805 003A 44               		dc.b $D8, 5, 0, $3A, $44	
00017CB5 E805 0004 C4               		dc.b $E8, 5, 0, 4, $C4	
00017CBA E805 0032 24               		dc.b $E8, 5, 0, $32, $24	
00017CBF E809 0008 D4               		dc.b $E8, 9, 0, 8, $D4	
00017CC4 E805 000E EC               		dc.b $E8, 5, 0, $E, $EC	
00017CC9 E805 002E 34               		dc.b $E8, 5, 0, $2E, $34	
00017CCE F805 001E D4               		dc.b $F8, 5, 0, $1E, $D4	
00017CD3 F805 0004 E4               		dc.b $F8, 5, 0, 4, $E4	
00017CD8 F805 0042 F4               		dc.b $F8, 5, 0, $42, $F4	
00017CDD D805 000E 54               		dc.b $D8, 5, 0, $E, $54	
00017CE2 F805 000E 04               		dc.b $F8, 5, 0, $E, 4	
00017CE8 00                         		even
00017CE8 00                         		even
00017CE8                            
00017CE8                            ; ===========================================================================
00017CE8                            ; ---------------------------------------------------------------------------
00017CE8                            ; Object 3D - matthew boss - modified by GK89
00017CE8                            ; ---------------------------------------------------------------------------
00017CE8                            
00017CE8                            Obj3D:					; XREF: Obj_Index
00017CE8 7000                       		moveq	#0,d0
00017CEA 1028 0024                  		move.b	$24(a0),d0
00017CEE 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017CF2 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00017CF6                            ; ===========================================================================
00017CF6 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00017CF8 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00017CFA 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00017CFC 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00017CFE                            
00017CFE 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00017D00 0401                       		dc.b 4,	1
00017D02 0607                       		dc.b 6,	7
00017D04                            ; ===========================================================================
00017D04                            
00017D04                            Obj3D_Main:				; XREF: Obj3D_Index
00017D04 45F9 0001 7CFE             		lea	(Obj3D_ObjData).l,a2
00017D0A 2248                       		movea.l	a0,a1
00017D0C 7202                       		moveq	#2,d1
00017D0E 6000                       		bra.s	Obj3D_LoadBoss
00017D10                            ; ===========================================================================
00017D10                            
00017D10                            Obj3D_Loop:
00017D10 4EB9 0000 DFDC             		jsr	SingleObjLoad2
00017D16 6600                       		bne.s	loc_17772
00017D18                            
00017D18                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00017D18 135A 0024                  		move.b	(a2)+,$24(a1)
00017D1C 12BC 003D                  		move.b	#$3D,0(a1)
00017D20 3368 0008 0008             		move.w	8(a0),8(a1)
00017D26 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017D2C 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00017D34 337C 0400 0002             		move.w	#$400,2(a1)
00017D3A 137C 0004 0001             		move.b	#4,1(a1)
00017D40 137C 0020 0019             		move.b	#$20,$19(a1)
00017D46 137C 0003 0018             		move.b	#3,$18(a1)
00017D4C 135A 001C                  		move.b	(a2)+,$1C(a1)
00017D50 2348 0034                  		move.l	a0,$34(a1)
00017D54 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00017D58                            
00017D58                            loc_17772:
00017D58 3168 0008 0030             		move.w	8(a0),$30(a0)
00017D5E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017D64 117C 000F 0020             		move.b	#$F,$20(a0)
00017D6A 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
00017D70                            
00017D70                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00017D70 7000                       		moveq	#0,d0
00017D72 1028 0025                  		move.b	$25(a0),d0
00017D76 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00017D7A 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00017D7E 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017D84 4EB9 0000 AC10             		jsr	AnimateSprite
00017D8A 1028 0022                  		move.b	$22(a0),d0
00017D8E 0200 0003                  		andi.b	#3,d0
00017D92 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017D98 8128 0001                  		or.b	d0,1(a0)
00017D9C 4EF9 0000 DB40             		jmp	DisplaySprite
00017DA2                            ; ===========================================================================
00017DA2 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00017DA4 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00017DA6 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00017DA8 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00017DAA 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00017DAC 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00017DAE 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00017DB0                            ; ===========================================================================
00017DB0                            
00017DB0                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00017DB0 4EB9 0000 0000             		jsr    Obj3D_ShipMove
00017DB6 6100 0000                  		bsr.w	BossMove
00017DBA 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00017DC0 6600                       		bne.s	loc_177E6
00017DC2 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00017DC8 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00017DCC                            
00017DCC                            loc_177E6:
00017DCC 1028 003F                  		move.b	$3F(a0),d0
00017DD0 4EB9 0000 2BE8             		jsr	(CalcSine).l
00017DD6 EC40                       		asr.w	#6,d0
00017DD8 D068 0038                  		add.w	$38(a0),d0
00017DDC 3140 000C                  		move.w	d0,$C(a0)
00017DE0 3168 0030 0008             		move.w	$30(a0),8(a0)
00017DE6 5428 003F                  		addq.b	#2,$3F(a0)
00017DEA 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00017DF0 6400                       		bcc.s	locret_1784A
00017DF2 4A28 0022                  		tst.b	$22(a0)
00017DF6 6B00                       		bmi.s	loc_1784C
00017DF8 4A28 0020                  		tst.b	$20(a0)
00017DFC 6600                       		bne.s	locret_1784A
00017DFE 4A28 003E                  		tst.b	$3E(a0)
00017E02 6600                       		bne.s	Obj3D_ShipFlash
00017E04 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00017E0A 303C 00AC                  		move.w	#$AC,d0
00017E0E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00017E14                            
00017E14                            Obj3D_ShipFlash:
00017E14 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00017E18 7000                       		moveq	#0,d0		; move 0 (black) to d0
00017E1A 4A51                       		tst.w	(a1)
00017E1C 6600                       		bne.s	loc_1783C
00017E1E 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00017E22                            
00017E22                            loc_1783C:
00017E22 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00017E24 5328 003E                  		subq.b	#1,$3E(a0)
00017E28 6600                       		bne.s	locret_1784A
00017E2A 117C 000F 0020             		move.b	#$F,$20(a0)
00017E30                            
00017E30                            locret_1784A:
00017E30 4E75                       		rts	
00017E32                            ; ===========================================================================
00017E32                            
00017E32                            loc_1784C:				; XREF: loc_177E6
00017E32 7064                       		moveq	#100,d0
00017E34 6100 0000                  		bsr.w	AddPoints
00017E38 117C 0008 0025             		move.b	#8,$25(a0)
00017E3E 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00017E44 4E75                       		rts	
00017E46                            
00017E46                            ; ---------------------------------------------------------------------------
00017E46                            ; Defeated boss	subroutine
00017E46                            ; ---------------------------------------------------------------------------
00017E46                            
00017E46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E46                            
00017E46                            
00017E46                            BossDefeated:
00017E46 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00017E4A 0200 0007                  		andi.b	#7,d0
00017E4E 6600                       		bne.s	locret_178A2
00017E50 4EB9 0000 DFC6             		jsr	SingleObjLoad
00017E56 6600                       		bne.s	locret_178A2
00017E58 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00017E5C 3368 0008 0008             		move.w	8(a0),8(a1)
00017E62 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017E68 4EB9 0000 2BC2             		jsr	(RandomNumber).l
00017E6E 3200                       		move.w	d0,d1
00017E70 7200                       		moveq	#0,d1
00017E72 1200                       		move.b	d0,d1
00017E74 E409                       		lsr.b	#2,d1
00017E76 0441 0020                  		subi.w	#$20,d1
00017E7A D369 0008                  		add.w	d1,8(a1)
00017E7E E048                       		lsr.w	#8,d0
00017E80 E608                       		lsr.b	#3,d0
00017E82 D169 000C                  		add.w	d0,$C(a1)
00017E86                            
00017E86                            locret_178A2:
00017E86 4E75                       		rts	
00017E88                            ; End of function BossDefeated
00017E88                            
00017E88                            ; ---------------------------------------------------------------------------
00017E88                            ; Subroutine to	move a boss
00017E88                            ; ---------------------------------------------------------------------------
00017E88                            
00017E88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E88                            
00017E88                            
00017E88                            BossMove:
00017E88 2428 0030                  		move.l	$30(a0),d2
00017E8C 2628 0038                  		move.l	$38(a0),d3
00017E90 3028 0010                  		move.w	$10(a0),d0
00017E94 48C0                       		ext.l	d0
00017E96 E180                       		asl.l	#8,d0
00017E98 D480                       		add.l	d0,d2
00017E9A 3028 0012                  		move.w	$12(a0),d0
00017E9E 48C0                       		ext.l	d0
00017EA0 E180                       		asl.l	#8,d0
00017EA2 D680                       		add.l	d0,d3
00017EA4 2142 0030                  		move.l	d2,$30(a0)
00017EA8 2143 0038                  		move.l	d3,$38(a0)
00017EAC 4E75                       		rts	
00017EAE                            ; End of function BossMove
00017EAE                            
00017EAE                            ; ===========================================================================
00017EAE                            
00017EAE                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
00017EAE 6100 FFD8                  		bsr.w	BossMove
00017EB2 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017EB8 6600                       		bne.s	loc_17916
00017EBA 317C 0000 0010             		move.w	#0,$10(a0)
00017EC0 317C 0000 0012             		move.w	#0,$12(a0)
00017EC6 5428 0025                  		addq.b	#2,$25(a0)
00017ECA 4EB9 0000 DFDC             		jsr	SingleObjLoad2
00017ED0 6600                       		bne.s	loc_17910
00017ED2 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00017ED6 3368 0030 0008             		move.w	$30(a0),8(a1)
00017EDC 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017EE2 2348 0034                  		move.l	a0,$34(a1)
00017EE6                            
00017EE6                            loc_17910:
00017EE6 317C 0077 003C             		move.w	#$77,$3C(a0)
00017EEC                            
00017EEC                            loc_17916:
00017EEC 6000 FEDE                  		bra.w	loc_177E6
00017EF0                            ; ===========================================================================
00017EF0                            
00017EF0                            Obj3D_ShipMove:				; XREF:  sonic follow move
00017EF0 5368 003C                  		subq.w	#1,$3C(a0)
00017EF4 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
00017EFA 5428 0025                  		addq.b	#2,$25(a0)
00017EFE 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017F04 3038 D008                  		move.w	($FFFFD008).w,d0	 
00017F08 9068 0008                  		sub.w	8(a0),d0		 
00017F0C 6A00                       		bpl.s	Obj3D_left			 
00017F0E 08A8 0000 0022             		bclr	#0,$22(a0)		 
00017F14 6000                       		bra.s	Obj3D_right		 
00017F16 08A8 0005 0022             		bclr	#5,$22(a0)
00017F1C 4EB9 0000 0000              		jsr     loc_17950
00017F22 4E75                       		rts
00017F24                            ; ===========================================================================
00017F24                            
00017F24                            Obj3D_right:
00017F24 317C FF00 0010             		move.w	#-$100,$10(a0)	
00017F2A 4E75                       		Rts
00017F2C                            
00017F2C                            Obj3D_left:
00017F2C 317C 0100 0010             		move.w	#$100,$10(a0)	 
00017F32 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
00017F38 6600                       		bne.s	RTSboss  	; if not, branch
00017F3A 0868 0000 0022              		bchg	#0,$22(a0)
00017F40                            
00017F40                            RTSboss:	    
00017F40 4E75                       		rts
00017F42                             ; ===========================================================================
00017F42                            
00017F42                            Obj3D_UpStuff:
00017F42 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
00017F46 9068 000C                  		sub.w	$C(a0),d0		 
00017F4A 6A00                       		bpl.s	Obj3D_down			 
00017F4C 6000                        		bra.s	Obj3D_up		 
00017F4E 08A8 0005 0022             		bclr	#5,$22(a0)
00017F54                             
00017F54                            Obj3D_up:		
00017F54 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
00017F5A 4E75                        	    rts
00017F5C                            
00017F5C                            Obj3D_down:
00017F5C 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
00017F62                            
00017F62                            loc_17950:
00017F62 6000 FE68                  		bra.w	loc_177E6
00017F66                            ; ===========================================================================
00017F66                            
00017F66                            loc_17954:				; XREF: Obj3D_ShipIndex
00017F66 5368 003C                  		subq.w	#1,$3C(a0)
00017F6A 6B00                       		bmi.s	loc_17960
00017F6C 6100 FF1A                  		bsr.w	BossMove
00017F70 6000                       		bra.s	loc_17976
00017F72                            ; ===========================================================================
00017F72                            
00017F72                            loc_17960:
00017F72 0868 0000 0022             		bchg	#0,$22(a0)
00017F78 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017F7E 5528 0025                  		subq.b	#2,$25(a0)
00017F82 317C 0000 0010             		move.w	#0,$10(a0)
00017F88                            
00017F88                            loc_17976:
00017F88 6000 FE42                  		bra.w	loc_177E6
00017F8C                            ; ===========================================================================
00017F8C                            
00017F8C                            loc_1797A:				; XREF: Obj3D_ShipIndex
00017F8C 5368 003C                  		subq.w	#1,$3C(a0)
00017F90 6B00                       		bmi.s	loc_17984
00017F92 6000 FEB2                  		bra.w	BossDefeated
00017F96                            ; ===========================================================================
00017F96                            
00017F96                            loc_17984:
00017F96 08E8 0000 0022             		bset	#0,$22(a0)
00017F9C 08A8 0007 0022             		bclr	#7,$22(a0)
00017FA2 4268 0010                  		clr.w	$10(a0)
00017FA6 5428 0025                  		addq.b	#2,$25(a0)
00017FAA 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00017FB0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00017FB4 6600                       		bne.s	locret_179AA
00017FB6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00017FBC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00017FC2 6000 FE82                  		bra.w	BossDefeated
00017FC6                            
00017FC6                            locret_179AA:
00017FC6 4E75                       		rts	
00017FC8                            ; ===========================================================================
00017FC8                            
00017FC8                            loc_179AC:				; XREF: Obj3D_ShipIndex
00017FC8 4EB9 0000 DAEE             		jsr ObjectFall		
00017FCE 5268 003C                  		addq.w	#1,$3C(a0)
00017FD2 6700                       		beq.s	loc_179BC
00017FD4 6A00                       		bpl.s	loc_179C2
00017FD6 6000                       		bra.s	loc_179EE
00017FD8                            ; ===========================================================================
00017FD8                            
00017FD8                            loc_179BC:
00017FD8 4268 0012                  		clr.w	$12(a0)
00017FDC 6000                       		bra.s	loc_179EE
00017FDE                            ; ===========================================================================
00017FDE                            
00017FDE                            loc_179C2:
00017FDE 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00017FE4 6500                       		bcs.s	loc_179DA
00017FE6 6700                       		beq.s	loc_179E0
00017FE8 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00017FEE 6500                       		bcs.s	loc_179EE
00017FF0 5428 0025                  		addq.b	#2,$25(a0)
00017FF4 6000                       		bra.s	loc_179EE
00017FF6                            ; ===========================================================================
00017FF6                            
00017FF6                            loc_179DA:
00017FF6 5168 0012                  		subq.w	#8,$12(a0)
00017FFA 6000                       		bra.s	loc_179EE
00017FFC 6000 FE48                  		bra.w	BossDefeated
00018000                            ; ===========================================================================
00018000                            
00018000                            loc_179E0:
00018000 4268 0012                  		clr.w	$12(a0)
00018004 303C 0081                  		move.w	#$81,d0
00018008 4EB9 0000 15B6             		jsr	(PlaySound).l	; play GHZ music
0001800E                            
0001800E                            loc_179EE:
0001800E 6100 FE78                  		bsr.w	BossMove
00018012 6000 FDB8                  		bra.w	loc_177E6
00018016                            ; ===========================================================================
00018016                            
00018016                            loc_179F6:				; XREF: Obj3D_ShipIndex
00018016 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
0001801C 6700                       		beq.s	loc_17A10
0001801E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018022 6000                       		bra.s	loc_17A16
00018024                            ; ===========================================================================
00018024                            
00018024                            loc_17A10:
00018024 4A28 0001                  		tst.b	1(a0)
00018028 6A00                       		bpl.s	Obj3D_ShipDel
0001802A                            
0001802A                            loc_17A16:
0001802A 6100 FE5C                  		bsr.w	BossMove
0001802E 6000 FD9C                  		bra.w	loc_177E6
00018032                            ; ===========================================================================
00018032                            
00018032                            Obj3D_ShipDel:
00018032 4EF9 0000 DB7C             		jmp	DeleteObject
00018038                            ; ===========================================================================
00018038                            
00018038                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00018038 7000                       		moveq	#0,d0
0001803A 7201                       		moveq	#1,d1
0001803C 2268 0034                  		movea.l	$34(a0),a1
00018040 1029 0025                  		move.b	$25(a1),d0
00018044 5900                       		subq.b	#4,d0
00018046 6600                       		bne.s	loc_17A3E
00018048 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001804E 6600                       		bne.s	loc_17A46
00018050 7204                       		moveq	#4,d1
00018052                            
00018052                            loc_17A3E:
00018052 5D00                       		subq.b	#6,d0
00018054 6B00                       		bmi.s	loc_17A46
00018056 720A                       		moveq	#$A,d1
00018058 6000                       		bra.s	loc_17A5A
0001805A                            ; ===========================================================================
0001805A                            
0001805A                            loc_17A46:
0001805A 4A29 0020                  		tst.b	$20(a1)
0001805E 6600                       		bne.s	loc_17A50
00018060 7205                       		moveq	#5,d1
00018062 6000                       		bra.s	loc_17A5A
00018064                            ; ===========================================================================
00018064                            
00018064                            loc_17A50:
00018064 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001806A 6500                       		bcs.s	loc_17A5A
0001806C 7204                       		moveq	#4,d1
0001806E                            
0001806E                            loc_17A5A:
0001806E 1141 001C                  		move.b	d1,$1C(a0)
00018072 5500                       		subq.b	#2,d0
00018074 6600                       		bne.s	Obj3D_FaceDisp
00018076 117C 0006 001C             		move.b	#6,$1C(a0)
0001807C 4A28 0001                  		tst.b	1(a0)
00018080 6A00                       		bpl.s	Obj3D_FaceDel
00018082                            
00018082                            Obj3D_FaceDisp:
00018082 6000                       		bra.s	Obj3D_Display
00018084                            ; ===========================================================================
00018084                            
00018084                            Obj3D_FaceDel:
00018084 4EF9 0000 DB7C             		jmp	DeleteObject
0001808A                            ; ===========================================================================
0001808A                            
0001808A                            Obj3D_FlameMain:			; XREF: Obj3D_Index
0001808A 117C 0007 001C             		move.b	#7,$1C(a0)
00018090 2268 0034                  		movea.l	$34(a0),a1
00018094 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
0001809A 6600                       		bne.s	loc_17A96
0001809C 117C 000B 001C             		move.b	#$B,$1C(a0)
000180A2 4A28 0001                  		tst.b	1(a0)
000180A6 6A00                       		bpl.s	Obj3D_FlameDel
000180A8 6000                       		bra.s	Obj3D_FlameDisp
000180AA                            ; ===========================================================================
000180AA                            
000180AA                            loc_17A96:
000180AA 3029 0010                  		move.w	$10(a1),d0
000180AE 6700                       		beq.s	Obj3D_FlameDisp
000180B0 117C 0008 001C             		move.b	#8,$1C(a0)
000180B6                            
000180B6                            Obj3D_FlameDisp:
000180B6 6000                       		bra.s	Obj3D_Display
000180B8                            ; ===========================================================================
000180B8                            
000180B8                            Obj3D_FlameDel:
000180B8 4EF9 0000 DB7C             		jmp	DeleteObject
000180BE                            ; ===========================================================================
000180BE                            
000180BE                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000180BE 2268 0034                  		movea.l	$34(a0),a1
000180C2 3169 0008 0008             		move.w	8(a1),8(a0)
000180C8 3169 000C 000C             		move.w	$C(a1),$C(a0)
000180CE 1169 0022 0022             		move.b	$22(a1),$22(a0)
000180D4 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000180DA 4EB9 0000 AC10             		jsr	AnimateSprite
000180E0 1028 0022                  		move.b	$22(a0),d0
000180E4 0200 0003                  		andi.b	#3,d0
000180E8 0228 00FC 0001             		andi.b	#$FC,1(a0)
000180EE 8128 0001                  		or.b	d0,1(a0)
000180F2 4EF9 0000 DB40             		jmp	DisplaySprite
000180F8                            ; ===========================================================================
000180F8                            ; ---------------------------------------------------------------------------
000180F8                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
000180F8                            ; ---------------------------------------------------------------------------
000180F8                            
000180F8                            Obj48:					; XREF: Obj_Index
000180F8 7000                       		moveq	#0,d0
000180FA 1028 0024                  		move.b	$24(a0),d0
000180FE 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00018102 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00018106                            ; ===========================================================================
00018106 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00018108 0000                       		dc.w Obj48_Base-Obj48_Index
0001810A 0000                       		dc.w Obj48_Display2-Obj48_Index
0001810C 0000                       		dc.w loc_17C68-Obj48_Index
0001810E 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018110                            ; ===========================================================================
00018110                            
00018110                            Obj48_Main:				; XREF: Obj48_Index
00018110 5428 0024                  		addq.b	#2,$24(a0)
00018114 317C 4080 0026             		move.w	#$4080,$26(a0)
0001811A 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018120 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00018128 317C 046C 0002             		move.w	#$46C,2(a0)
0001812E 45E8 0028                  		lea	$28(a0),a2
00018132 14FC 0000                  		move.b	#0,(a2)+
00018136 7205                       		moveq	#5,d1
00018138 2248                       		movea.l	a0,a1
0001813A 6000                       		bra.s	loc_17B60
0001813C                            ; ===========================================================================
0001813C                            
0001813C                            Obj48_MakeLinks:
0001813C 4EB9 0000 DFDC             		jsr	SingleObjLoad2
00018142 6600                       		bne.s	Obj48_MakeBall
00018144 3368 0008 0008             		move.w	8(a0),8(a1)
0001814A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018150 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00018154 137C 0006 0024             		move.b	#6,$24(a1)
0001815A 237C 0000 8064 0004        		move.l	#Map_obj15,4(a1)
00018162 337C 0380 0002             		move.w	#$380,2(a1)
00018168 137C 0001 001A             		move.b	#1,$1A(a1)
0001816E 5228 0028                  		addq.b	#1,$28(a0)
00018172                            
00018172                            loc_17B60:				; XREF: Obj48_Main
00018172 3A09                       		move.w	a1,d5
00018174 0445 D000                  		subi.w	#$D000,d5
00018178 EC4D                       		lsr.w	#6,d5
0001817A 0245 007F                  		andi.w	#$7F,d5
0001817E 14C5                       		move.b	d5,(a2)+
00018180 137C 0004 0001             		move.b	#4,1(a1)
00018186 137C 0008 0019             		move.b	#8,$19(a1)
0001818C 137C 0006 0018             		move.b	#6,$18(a1)
00018192 2368 0034 0034             		move.l	$34(a0),$34(a1)
00018198 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
0001819C                            
0001819C                            Obj48_MakeBall:
0001819C 137C 0008 0024             		move.b	#8,$24(a1)
000181A2 237C 0000 85C2 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000181AA 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
000181B0 137C 0001 001A             		move.b	#1,$1A(a1)
000181B6 137C 0005 0018             		move.b	#5,$18(a1)
000181BC 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000181C2 4E75                       		rts	
000181C4                            ; ===========================================================================
000181C4                            
000181C4 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
000181CA                            
000181CA                            ; ===========================================================================
000181CA                            
000181CA                            Obj48_Base:				; XREF: Obj48_Index
000181CA 47F9 0001 81C4             		lea	(Obj48_PosData).l,a3
000181D0 45E8 0028                  		lea	$28(a0),a2
000181D4 7C00                       		moveq	#0,d6
000181D6 1C1A                       		move.b	(a2)+,d6
000181D8                            
000181D8                            loc_17BC6:
000181D8 7800                       		moveq	#0,d4
000181DA 181A                       		move.b	(a2)+,d4
000181DC ED4C                       		lsl.w	#6,d4
000181DE 0684 00FF D000             		addi.l	#$FFD000,d4
000181E4 2244                       		movea.l	d4,a1
000181E6 101B                       		move.b	(a3)+,d0
000181E8 B029 003C                  		cmp.b	$3C(a1),d0
000181EC 6700                       		beq.s	loc_17BE0
000181EE 5229 003C                  		addq.b	#1,$3C(a1)
000181F2                            
000181F2                            loc_17BE0:
000181F2 51CE FFE4                  		dbf	d6,loc_17BC6
000181F6                            
000181F6 B029 003C                  		cmp.b	$3C(a1),d0
000181FA 6600                       		bne.s	loc_17BFA
000181FC 2268 0034                  		movea.l	$34(a0),a1
00018200 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00018206 6600                       		bne.s	loc_17BFA
00018208 5428 0024                  		addq.b	#2,$24(a0)
0001820C                            
0001820C                            loc_17BFA:
0001820C 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018212 6700                       		beq.s	Obj48_Display
00018214 5268 0032                  		addq.w	#1,$32(a0)
00018218                            
00018218                            Obj48_Display:
00018218 6100 0000                  		bsr.w	sub_17C2A
0001821C 1028 0026                  		move.b	$26(a0),d0
00018220 4EB9 0000 7FD6             		jsr	(Obj15_Move2).l
00018226 4EF9 0000 DB40             		jmp	DisplaySprite
0001822C                            ; ===========================================================================
0001822C                            
0001822C                            Obj48_Display2:				; XREF: Obj48_Index
0001822C 6100 0000                  		bsr.w	sub_17C2A
00018230 4EB9 0000 7F96             		jsr	(Obj48_Move).l
00018236 4EF9 0000 DB40             		jmp	DisplaySprite
0001823C                            
0001823C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001823C                            
0001823C                            
0001823C                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
0001823C 2268 0034                  		movea.l	$34(a0),a1
00018240 0628 0020 001B             		addi.b	#$20,$1B(a0)
00018246 6400                       		bcc.s	loc_17C3C
00018248 0868 0000 001A             		bchg	#0,$1A(a0)
0001824E                            
0001824E                            loc_17C3C:
0001824E 3169 0008 003A             		move.w	8(a1),$3A(a0)
00018254 3029 000C                  		move.w	$C(a1),d0
00018258 D068 0032                  		add.w	$32(a0),d0
0001825C 3140 0038                  		move.w	d0,$38(a0)
00018260 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018266 4A29 0022                  		tst.b	$22(a1)
0001826A 6A00                       		bpl.s	locret_17C66
0001826C 10BC 003F                  		move.b	#$3F,0(a0)
00018270 117C 0000 0024             		move.b	#0,$24(a0)
00018276                            
00018276                            locret_17C66:
00018276 4E75                       		rts	
00018278                            ; End of function sub_17C2A
00018278                            
00018278                            ; ===========================================================================
00018278                            
00018278                            loc_17C68:				; XREF: Obj48_Index
00018278 2268 0034                  		movea.l	$34(a0),a1
0001827C 4A29 0022                  		tst.b	$22(a1)
00018280 6A00                       		bpl.s	Obj48_Display3
00018282 10BC 003F                  		move.b	#$3F,0(a0)
00018286 117C 0000 0024             		move.b	#0,$24(a0)
0001828C                            
0001828C                            Obj48_Display3:
0001828C 4EF9 0000 DB40             		jmp	DisplaySprite
00018292                            ; ===========================================================================
00018292                            
00018292                            Obj48_ChkVanish:			; XREF: Obj48_Index
00018292 7000                       		moveq	#0,d0
00018294 4A28 001A                  		tst.b	$1A(a0)
00018298 6600                       		bne.s	Obj48_Vanish
0001829A 5200                       		addq.b	#1,d0
0001829C                            
0001829C                            Obj48_Vanish:
0001829C 1140 001A                  		move.b	d0,$1A(a0)
000182A0 2268 0034                  		movea.l	$34(a0),a1
000182A4 4A29 0022                  		tst.b	$22(a1)
000182A8 6A00                       		bpl.s	Obj48_Display4
000182AA 117C 0000 0020             		move.b	#0,$20(a0)
000182B0 6100 FB94                  		bsr.w	BossDefeated
000182B4 5328 003C                  		subq.b	#1,$3C(a0)
000182B8 6A00                       		bpl.s	Obj48_Display4
000182BA 10BC 003F                  		move.b	#$3F,(a0)
000182BE 117C 0000 0024             		move.b	#0,$24(a0)
000182C4                            
000182C4                            Obj48_Display4:
000182C4 4EF9 0000 DB40             		jmp	DisplaySprite
000182CA                            ; ===========================================================================
000182CA                            Ani_Eggman:
000182CA                            	include "_anim\Eggman.asm"
000182CA                            ; ---------------------------------------------------------------------------
000182CA                            ; Animation script - Eggman (bosses)
000182CA                            ; ---------------------------------------------------------------------------
000182CA 0000                       		dc.w byte_17CD4-Ani_Eggman
000182CC 0000                       		dc.w byte_17CD8-Ani_Eggman
000182CE 0000                       		dc.w byte_17CDC-Ani_Eggman
000182D0 0000                       		dc.w byte_17CE0-Ani_Eggman
000182D2 0000                       		dc.w byte_17CE4-Ani_Eggman
000182D4 0000                       		dc.w byte_17CE8-Ani_Eggman
000182D6 0000                       		dc.w byte_17CEC-Ani_Eggman
000182D8 0000                       		dc.w byte_17CF0-Ani_Eggman
000182DA 0000                       		dc.w byte_17CF4-Ani_Eggman
000182DC 0000                       		dc.w byte_17CF8-Ani_Eggman
000182DE 0000                       		dc.w byte_17CFC-Ani_Eggman
000182E0 0000                       		dc.w byte_17D00-Ani_Eggman
000182E2 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
000182E6 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
000182EA 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
000182EE 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
000182F2 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
000182F6 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
000182FA 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
000182FE 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018302 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00018306 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
0001830A 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
0001830E 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
0001831A                            		even
0001831A                            		even
0001831A                            
0001831A                            ; ---------------------------------------------------------------------------
0001831A                            ; Sprite mappings - Eggman (boss levels)
0001831A                            ; ---------------------------------------------------------------------------
0001831A                            Map_Eggman:
0001831A                            	include "_maps\Eggman.asm"
0001831A                            Map_dc7e:
0001831A 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
0001831C 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
0001831E 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00018320 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
00018322 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
00018324 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
00018326 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
00018328 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
0001832A 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
0001832C 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
0001832E 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00018330 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
00018332 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
00018334 06                         Map_dc7e_1A: 	dc.b $6
00018335 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
0001833A EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
0001833F FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
00018344 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00018349 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
0001834E 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00018353 02                         Map_dc7e_39: 	dc.b $2
00018354 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018359 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
0001835E 02                         Map_dc7e_44: 	dc.b $2
0001835F E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018364 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018369 03                         Map_dc7e_4F: 	dc.b $3
0001836A E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
0001836F EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
00018374 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
00018379 03                         Map_dc7e_5F: 	dc.b $3
0001837A E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
0001837F EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
00018384 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
00018389 03                         Map_dc7e_6F: 	dc.b $3
0001838A E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
0001838F EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018394 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018399 03                         Map_dc7e_7F: 	dc.b $3
0001839A E404 0064 04               	dc.b $E4, $4, $0, $64, $4
0001839F E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000183A4 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000183A9 04                         Map_dc7e_8F: 	dc.b $4
000183AA E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
000183AF E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000183B4 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000183B9 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000183BE 01                         Map_dc7e_A4: 	dc.b $1
000183BF 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
000183C4 01                         Map_dc7e_AA: 	dc.b $1
000183C5 0405 0031 22               	dc.b $4, $5, $0, $31, $22
000183CA 00                         Map_dc7e_B0: 	dc.b $0
000183CB 02                         Map_dc7e_B1: 	dc.b $2
000183CC 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
000183D1 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
000183D6 02                         Map_dc7e_BC: 	dc.b $2
000183D7 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
000183DC 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
000183E2 00                         	even
000183E2 00                         	even
000183E2                            
000183E2                            ; ---------------------------------------------------------------------------
000183E2                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000183E2                            ; ---------------------------------------------------------------------------
000183E2                            Map_BossItems:
000183E2                            	include "_maps\Boss items.asm"
000183E2                            ; ---------------------------------------------------------------------------
000183E2                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000183E2                            ; ---------------------------------------------------------------------------
000183E2 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
000183E6 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
000183EA 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
000183EE 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
000183F2 01                         byte_17DE4:	dc.b 1
000183F3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000183F8 02                         byte_17DEA:	dc.b 2
000183F9 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
000183FE F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018403 00                         		dc.b 0
00018404 01                         byte_17DF6:	dc.b 1
00018405 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
0001840A 01                         byte_17DFC:	dc.b 1
0001840B 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018410 01                         byte_17E02:	dc.b 1
00018411 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00018416 04                         byte_17E08:	dc.b 4
00018417 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
0001841C F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018421 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00018426 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001842B 00                         		dc.b 0
0001842C 02                         byte_17E1E:	dc.b 2
0001842D 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00018432 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00018437 00                         		dc.b 0
00018438 02                         byte_17E2A:	dc.b 2
00018439 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
0001843E 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00018444 00                         		even
00018444 00                         		even
00018444                            
00018444                            ; ===========================================================================
00018444                            ; ---------------------------------------------------------------------------
00018444                            ; Object 77 - Eggman (LZ)
00018444                            ; ---------------------------------------------------------------------------
00018444                            
00018444                            Obj77:					; XREF: Obj_Index
00018444 7000                       		moveq	#0,d0
00018446 1028 0024                  		move.b	$24(a0),d0
0001844A 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001844E 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00018452                            ; ===========================================================================
00018452 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00018454 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00018456 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00018458 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001845A                            
0001845A 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001845C 0401                       		dc.b 4,	1
0001845E 0607                       		dc.b 6,	7
00018460                            ; ===========================================================================
00018460                            
00018460                            Obj77_Main:				; XREF: Obj77_Index
00018460 317C 1E10 0008             		move.w	#$1E10,8(a0)
00018466 317C 05C0 000C             		move.w	#$5C0,$C(a0)
0001846C 3168 0008 0030             		move.w	8(a0),$30(a0)
00018472 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018478 117C 000F 0020             		move.b	#$F,$20(a0)
0001847E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018484 117C 0004 0018             		move.b	#4,$18(a0)
0001848A 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001848E 2248                       		movea.l	a0,a1
00018490 7202                       		moveq	#2,d1
00018492 6000                       		bra.s	Obj77_LoadBoss
00018494                            ; ===========================================================================
00018494                            
00018494                            Obj77_Loop:
00018494 4EB9 0000 DFDC             		jsr	SingleObjLoad2
0001849A 6600                       		bne.s	Obj77_ShipMain
0001849C 12BC 0077                  		move.b	#$77,0(a1)
000184A0 3368 0008 0008             		move.w	8(a0),8(a1)
000184A6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000184AC                            
000184AC                            Obj77_LoadBoss:				; XREF: Obj77_Main
000184AC 08A8 0000 0022             		bclr	#0,$22(a0)
000184B2 4229 0025                  		clr.b	$25(a1)
000184B6 135A 0024                  		move.b	(a2)+,$24(a1)
000184BA 135A 001C                  		move.b	(a2)+,$1C(a1)
000184BE 1368 0018 0018             		move.b	$18(a0),$18(a1)
000184C4 237C 0001 831A 0004        		move.l	#Map_Eggman,4(a1)
000184CC 337C 0400 0002             		move.w	#$400,2(a1)
000184D2 137C 0004 0001             		move.b	#4,1(a1)
000184D8 137C 0020 0019             		move.b	#$20,$19(a1)
000184DE 2348 0034                  		move.l	a0,$34(a1)
000184E2 51C9 FFB0                  		dbf	d1,Obj77_Loop
000184E6                            
000184E6                            Obj77_ShipMain:
000184E6 43F8 D000                  		lea	($FFFFD000).w,a1
000184EA 7000                       		moveq	#0,d0
000184EC 1028 0025                  		move.b	$25(a0),d0
000184F0 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
000184F4 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
000184F8 43F9 0001 82CA             		lea	(Ani_Eggman).l,a1
000184FE 4EB9 0000 AC10             		jsr	AnimateSprite
00018504 7003                       		moveq	#3,d0
00018506 C028 0022                  		and.b	$22(a0),d0
0001850A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018510 8128 0001                  		or.b	d0,1(a0)
00018514 4EF9 0000 DB40             		jmp	DisplaySprite
0001851A                            ; ===========================================================================
0001851A 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001851E 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00018522 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
00018526 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001852A                            ; ===========================================================================
0001852A                            
0001852A                            loc_17F1E:				; XREF: Obj77_ShipIndex
0001852A 3029 0008                  		move.w	8(a1),d0
0001852E 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00018532 6500                       		bcs.s	loc_17F38
00018534 317C FE80 0012             		move.w	#-$180,$12(a0)
0001853A 317C 0060 0010             		move.w	#$60,$10(a0)
00018540 5428 0025                  		addq.b	#2,$25(a0)
00018544                            
00018544                            loc_17F38:
00018544 6100 F942                  		bsr.w	BossMove
00018548 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001854E 3168 0030 0008             		move.w	$30(a0),8(a0)
00018554                            
00018554                            loc_17F48:
00018554 4A28 003D                  		tst.b	$3D(a0)
00018558 6600                       		bne.s	loc_17F8E
0001855A 4A28 0022                  		tst.b	$22(a0)
0001855E 6B00                       		bmi.s	loc_17F92
00018560 4A28 0020                  		tst.b	$20(a0)
00018564 6600                       		bne.s	locret_17F8C
00018566 4A28 003E                  		tst.b	$3E(a0)
0001856A 6600                       		bne.s	loc_17F70
0001856C 117C 0020 003E             		move.b	#$20,$3E(a0)
00018572 303C 00AC                  		move.w	#$AC,d0
00018576 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001857C                            
0001857C                            loc_17F70:
0001857C 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018580 7000                       		moveq	#0,d0
00018582 4A51                       		tst.w	(a1)
00018584 6600                       		bne.s	loc_17F7E
00018586 303C 0EEE                  		move.w	#$EEE,d0
0001858A                            
0001858A                            loc_17F7E:
0001858A 3280                       		move.w	d0,(a1)
0001858C 5328 003E                  		subq.b	#1,$3E(a0)
00018590 6600                       		bne.s	locret_17F8C
00018592 117C 000F 0020             		move.b	#$F,$20(a0)
00018598                            
00018598                            locret_17F8C:
00018598 4E75                       		rts	
0001859A                            ; ===========================================================================
0001859A                            
0001859A                            loc_17F8E:				; XREF: loc_17F48
0001859A 6000 F8AA                  		bra.w	BossDefeated
0001859E                            ; ===========================================================================
0001859E                            
0001859E                            loc_17F92:				; XREF: loc_17F48
0001859E 7064                       		moveq	#100,d0
000185A0 6100 0000                  		bsr.w	AddPoints
000185A4 117C 00FF 003D             		move.b	#-1,$3D(a0)
000185AA 4E75                       		rts	
000185AC                            ; ===========================================================================
000185AC                            
000185AC                            loc_17FA0:				; XREF: Obj77_ShipIndex
000185AC 70FE                       		moveq	#-2,d0
000185AE 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
000185B4 6500                       		bcs.s	loc_17FB6
000185B6 317C 1E48 0030             		move.w	#$1E48,$30(a0)
000185BC 4268 0010                  		clr.w	$10(a0)
000185C0 5240                       		addq.w	#1,d0
000185C2                            
000185C2                            loc_17FB6:
000185C2 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
000185C8 6E00                       		bgt.s	loc_17FCA
000185CA 317C 0500 0038             		move.w	#$500,$38(a0)
000185D0 4268 0012                  		clr.w	$12(a0)
000185D4 5240                       		addq.w	#1,d0
000185D6                            
000185D6                            loc_17FCA:
000185D6 6600                       		bne.s	loc_17FDC
000185D8 317C 0140 0010             		move.w	#$140,$10(a0)
000185DE 317C FE00 0012             		move.w	#-$200,$12(a0)
000185E4 5428 0025                  		addq.b	#2,$25(a0)
000185E8                            
000185E8                            loc_17FDC:
000185E8 6000 FF5A                  		bra.w	loc_17F38
000185EC                            ; ===========================================================================
000185EC                            
000185EC                            loc_17FE0:				; XREF: Obj77_ShipIndex
000185EC 70FE                       		moveq	#-2,d0
000185EE 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
000185F4 6500                       		bcs.s	loc_17FF6
000185F6 317C 1E70 0030             		move.w	#$1E70,$30(a0)
000185FC 4268 0010                  		clr.w	$10(a0)
00018600 5240                       		addq.w	#1,d0
00018602                            
00018602                            loc_17FF6:
00018602 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
00018608 6E00                       		bgt.s	loc_1800A
0001860A 317C 04C0 0038             		move.w	#$4C0,$38(a0)
00018610 4268 0012                  		clr.w	$12(a0)
00018614 5240                       		addq.w	#1,d0
00018616                            
00018616                            loc_1800A:
00018616 6600                       		bne.s	loc_1801A
00018618 317C FE80 0012             		move.w	#-$180,$12(a0)
0001861E 5428 0025                  		addq.b	#2,$25(a0)
00018622 4228 003F                  		clr.b	$3F(a0)
00018626                            
00018626                            loc_1801A:
00018626 6000 FF1C                  		bra.w	loc_17F38
0001862A                            ; ===========================================================================
0001862A                            
0001862A                            loc_1801E:				; XREF: Obj77_ShipIndex
0001862A 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
00018630 6E00                       		bgt.s	loc_1804E
00018632 317C 0100 0038             		move.w	#$100,$38(a0)
00018638 317C 0140 0010             		move.w	#$140,$10(a0)
0001863E 317C FF80 0012             		move.w	#-$80,$12(a0)
00018644 4A28 003D                  		tst.b	$3D(a0)
00018648 6700                       		beq.s	loc_18046
0001864A E1E8 0010                  		asl	$10(a0)
0001864E E1E8 0012                  		asl	$12(a0)
00018652                            
00018652                            loc_18046:
00018652 5428 0025                  		addq.b	#2,$25(a0)
00018656 6000 FEEC                  		bra.w	loc_17F38
0001865A                            ; ===========================================================================
0001865A                            
0001865A                            loc_1804E:
0001865A 08E8 0000 0022             		bset	#0,$22(a0)
00018660 5428 003F                  		addq.b	#2,$3F(a0)
00018664 1028 003F                  		move.b	$3F(a0),d0
00018668 4EB9 0000 2BE8             		jsr	(CalcSine).l
0001866E 4A41                       		tst.w	d1
00018670 6A00                       		bpl.s	loc_1806C
00018672 08A8 0000 0022             		bclr	#0,$22(a0)
00018678                            
00018678                            loc_1806C:
00018678 E840                       		asr.w	#4,d0
0001867A 4840                       		swap	d0
0001867C 4240                       		clr.w	d0
0001867E D0A8 0030                  		add.l	$30(a0),d0
00018682 4840                       		swap	d0
00018684 3140 0008                  		move.w	d0,8(a0)
00018688 3028 0012                  		move.w	$12(a0),d0
0001868C 3238 D00C                  		move.w	($FFFFD00C).w,d1
00018690 9268 000C                  		sub.w	$C(a0),d1
00018694 6500                       		bcs.s	loc_180A2
00018696 0441 0048                  		subi.w	#$48,d1
0001869A 6500                       		bcs.s	loc_180A2
0001869C E240                       		asr.w	#1,d0
0001869E 0441 0028                  		subi.w	#$28,d1
000186A2 6500                       		bcs.s	loc_180A2
000186A4 E240                       		asr.w	#1,d0
000186A6 0441 0028                  		subi.w	#$28,d1
000186AA 6500                       		bcs.s	loc_180A2
000186AC 7000                       		moveq	#0,d0
000186AE                            
000186AE                            loc_180A2:
000186AE 48C0                       		ext.l	d0
000186B0 E180                       		asl.l	#8,d0
000186B2 4A28 003D                  		tst.b	$3D(a0)
000186B6 6700                       		beq.s	loc_180AE
000186B8 D080                       		add.l	d0,d0
000186BA                            
000186BA                            loc_180AE:
000186BA D1A8 0038                  		add.l	d0,$38(a0)
000186BE 3168 0038 000C             		move.w	$38(a0),$C(a0)
000186C4 6000 FE8E                  		bra.w	loc_17F48
000186C8                            ; ===========================================================================
000186C8                            
000186C8                            loc_180BC:				; XREF: Obj77_ShipIndex
000186C8 70FE                       		moveq	#-2,d0
000186CA 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
000186D0 6500                       		bcs.s	loc_180D2
000186D2 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
000186D8 4268 0010                  		clr.w	$10(a0)
000186DC 5240                       		addq.w	#1,d0
000186DE                            
000186DE                            loc_180D2:
000186DE 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
000186E4 6E00                       		bgt.s	loc_180E6
000186E6 317C 00C0 0038             		move.w	#$C0,$38(a0)
000186EC 4268 0012                  		clr.w	$12(a0)
000186F0 5240                       		addq.w	#1,d0
000186F2                            
000186F2                            loc_180E6:
000186F2 6600                       		bne.s	loc_180F2
000186F4 5428 0025                  		addq.b	#2,$25(a0)
000186F8 08A8 0000 0022             		bclr	#0,$22(a0)
000186FE                            
000186FE                            loc_180F2:
000186FE 6000 FE44                  		bra.w	loc_17F38
00018702                            ; ===========================================================================
00018702                            
00018702                            loc_180F6:				; XREF: Obj77_ShipIndex
00018702 4A28 003D                  		tst.b	$3D(a0)
00018706 6600                       		bne.s	loc_18112
00018708 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
0001870E 6D00                       		blt.s	loc_18126
00018710 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
00018716 6E00                       		bgt.s	loc_18126
00018718 117C 0032 003C             		move.b	#$32,$3C(a0)
0001871E                            
0001871E                            loc_18112:
0001871E 303C 0082                  		move.w	#$82,d0
00018722 4EB9 0000 15B6             		jsr	(PlaySound).l	; play LZ music
00018728 08E8 0000 0022             		bset	#0,$22(a0)
0001872E 5428 0025                  		addq.b	#2,$25(a0)
00018732                            
00018732                            loc_18126:
00018732 6000 FE10                  		bra.w	loc_17F38
00018736                            ; ===========================================================================
00018736                            
00018736                            loc_1812A:				; XREF: Obj77_ShipIndex
00018736 4A28 003D                  		tst.b	$3D(a0)
0001873A 6600                       		bne.s	loc_18136
0001873C 5328 003C                  		subq.b	#1,$3C(a0)
00018740 6600                       		bne.s	loc_1814E
00018742                            
00018742                            loc_18136:
00018742 4228 003C                  		clr.b	$3C(a0)
00018746 317C 0400 0010             		move.w	#$400,$10(a0)
0001874C 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018752 4228 003D                  		clr.b	$3D(a0)
00018756 5428 0025                  		addq.b	#2,$25(a0)
0001875A                            
0001875A                            loc_1814E:
0001875A 6000 FDE8                  		bra.w	loc_17F38
0001875E                            ; ===========================================================================
0001875E                            
0001875E                            loc_18152:				; XREF: Obj77_ShipIndex
0001875E 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
00018764 6400                       		bcc.s	loc_18160
00018766 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001876A 6000                       		bra.s	loc_18166
0001876C                            ; ===========================================================================
0001876C                            
0001876C                            loc_18160:
0001876C 4A28 0001                  		tst.b	1(a0)
00018770 6A00                       		bpl.s	Obj77_ShipDel
00018772                            
00018772                            loc_18166:
00018772 6000 FDD0                  		bra.w	loc_17F38
00018776                            ; ===========================================================================
00018776                            
00018776                            Obj77_ShipDel:
00018776 4EF9 0000 DB7C             		jmp	DeleteObject
0001877C                            ; ===========================================================================
0001877C                            
0001877C                            Obj77_FaceMain:				; XREF: Obj77_Index
0001877C 2268 0034                  		movea.l	$34(a0),a1
00018780 1011                       		move.b	(a1),d0
00018782 B010                       		cmp.b	(a0),d0
00018784 6600                       		bne.s	Obj77_FaceDel
00018786 7000                       		moveq	#0,d0
00018788 1029 0025                  		move.b	$25(a1),d0
0001878C 7201                       		moveq	#1,d1
0001878E 4A28 003D                  		tst.b	$3D(a0)
00018792 6700                       		beq.s	loc_1818C
00018794 720A                       		moveq	#$A,d1
00018796 6000                       		bra.s	loc_181A0
00018798                            ; ===========================================================================
00018798                            
00018798                            loc_1818C:
00018798 4A29 0020                  		tst.b	$20(a1)
0001879C 6600                       		bne.s	loc_18196
0001879E 7205                       		moveq	#5,d1
000187A0 6000                       		bra.s	loc_181A0
000187A2                            ; ===========================================================================
000187A2                            
000187A2                            loc_18196:
000187A2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000187A8 6500                       		bcs.s	loc_181A0
000187AA 7204                       		moveq	#4,d1
000187AC                            
000187AC                            loc_181A0:
000187AC 1141 001C                  		move.b	d1,$1C(a0)
000187B0 0C00 000E                  		cmpi.b	#$E,d0
000187B4 6600                       		bne.s	loc_181B6
000187B6 117C 0006 001C             		move.b	#6,$1C(a0)
000187BC 4A28 0001                  		tst.b	1(a0)
000187C0 6A00                       		bpl.s	Obj77_FaceDel
000187C2                            
000187C2                            loc_181B6:
000187C2 6000                       		bra.s	Obj77_Display
000187C4                            ; ===========================================================================
000187C4                            
000187C4                            Obj77_FaceDel:
000187C4 4EF9 0000 DB7C             		jmp	DeleteObject
000187CA                            ; ===========================================================================
000187CA                            
000187CA                            Obj77_FlameMain:			; XREF: Obj77_Index
000187CA 117C 0007 001C             		move.b	#7,$1C(a0)
000187D0 2268 0034                  		movea.l	$34(a0),a1
000187D4 1011                       		move.b	(a1),d0
000187D6 B010                       		cmp.b	(a0),d0
000187D8 6600                       		bne.s	Obj77_FlameDel
000187DA 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
000187E0 6600                       		bne.s	loc_181F0
000187E2 117C 000B 001C             		move.b	#$B,$1C(a0)
000187E8 4A28 0001                  		tst.b	1(a0)
000187EC 6A00                       		bpl.s	Obj77_FlameDel
000187EE 6000                       		bra.s	loc_181F0
000187F0                            ; ===========================================================================
000187F0 4A69 0010                  		tst.w	$10(a1)
000187F4 6700                       		beq.s	loc_181F0
000187F6 117C 0008 001C             		move.b	#8,$1C(a0)
000187FC                            
000187FC                            loc_181F0:
000187FC 6000                       		bra.s	Obj77_Display
000187FE                            ; ===========================================================================
000187FE                            
000187FE                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
000187FE 4EF9 0000 DB7C             		jmp	DeleteObject
00018804                            ; ===========================================================================
00018804                            
00018804                            Obj77_Display:
00018804 43F9 0001 82CA             		lea	(Ani_Eggman).l,a1
0001880A 4EB9 0000 AC10             		jsr	AnimateSprite
00018810 2268 0034                  		movea.l	$34(a0),a1
00018814 3169 0008 0008             		move.w	8(a1),8(a0)
0001881A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018820 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018826 7003                       		moveq	#3,d0
00018828 C028 0022                  		and.b	$22(a0),d0
0001882C 0228 00FC 0001             		andi.b	#-4,1(a0)
00018832 8128 0001                  		or.b	d0,1(a0)
00018836 4EF9 0000 DB40             		jmp	DisplaySprite
0001883C                            ; ===========================================================================
0001883C                            ; ---------------------------------------------------------------------------
0001883C                            ; Object 73 - Eggman (MZ)
0001883C                            ; ---------------------------------------------------------------------------
0001883C                            
0001883C                            Obj73:					; XREF: Obj_Index
0001883C 7000                       		moveq	#0,d0
0001883E 1028 0024                  		move.b	$24(a0),d0
00018842 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018846 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001884A                            ; ===========================================================================
0001884A 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001884C 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001884E 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018850 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018852 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018854                            
00018854 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018857 0401 04                    		dc.b 4,	1, 4
0001885A 0607 04                    		dc.b 6,	7, 4
0001885D 0800 03                    		dc.b 8,	0, 3
00018860                            ; ===========================================================================
00018860                            
00018860                            Obj73_Main:				; XREF: Obj73_Index
00018860 3168 0008 0030             		move.w	8(a0),$30(a0)
00018866 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001886C 117C 000F 0020             		move.b	#$F,$20(a0)
00018872 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018878 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001887C 2248                       		movea.l	a0,a1
0001887E 7203                       		moveq	#3,d1
00018880 6000                       		bra.s	Obj73_LoadBoss
00018882                            ; ===========================================================================
00018882                            
00018882                            Obj73_Loop:
00018882 4EB9 0000 DFDC             		jsr	SingleObjLoad2
00018888 6600                       		bne.s	Obj73_ShipMain
0001888A 12BC 0073                  		move.b	#$73,0(a1)
0001888E 3368 0008 0008             		move.w	8(a0),8(a1)
00018894 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001889A                            
0001889A                            Obj73_LoadBoss:				; XREF: Obj73_Main
0001889A 08A8 0000 0022             		bclr	#0,$22(a0)
000188A0 4229 0025                  		clr.b	$25(a1)
000188A4 135A 0024                  		move.b	(a2)+,$24(a1)
000188A8 135A 001C                  		move.b	(a2)+,$1C(a1)
000188AC 135A 0018                  		move.b	(a2)+,$18(a1)
000188B0 237C 0001 831A 0004        		move.l	#Map_Eggman,4(a1)
000188B8 337C 0400 0002             		move.w	#$400,2(a1)
000188BE 137C 0004 0001             		move.b	#4,1(a1)
000188C4 137C 0020 0019             		move.b	#$20,$19(a1)
000188CA 2348 0034                  		move.l	a0,$34(a1)
000188CE 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
000188D2                            
000188D2                            Obj73_ShipMain:
000188D2 7000                       		moveq	#0,d0
000188D4 1028 0025                  		move.b	$25(a0),d0
000188D8 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
000188DC 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
000188E0 43F9 0001 82CA             		lea	(Ani_Eggman).l,a1
000188E6 4EB9 0000 AC10             		jsr	AnimateSprite
000188EC 7003                       		moveq	#3,d0
000188EE C028 0022                  		and.b	$22(a0),d0
000188F2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000188F8 8128 0001                  		or.b	d0,1(a0)
000188FC 4EF9 0000 DB40             		jmp	DisplaySprite
00018902                            ; ===========================================================================
00018902 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018904 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018906 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018908 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001890A 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001890C                            ; ===========================================================================
0001890C                            
0001890C                            loc_18302:				; XREF: Obj73_ShipIndex
0001890C 1028 003F                  		move.b	$3F(a0),d0
00018910 5428 003F                  		addq.b	#2,$3F(a0)
00018914 4EB9 0000 2BE8             		jsr	(CalcSine).l
0001891A E440                       		asr.w	#2,d0
0001891C 3140 0012                  		move.w	d0,$12(a0)
00018920 317C FF00 0010             		move.w	#-$100,$10(a0)
00018926 6100 F560                  		bsr.w	BossMove
0001892A 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018930 6600                       		bne.s	loc_18334
00018932 5428 0025                  		addq.b	#2,$25(a0)
00018936 4228 0028                  		clr.b	$28(a0)
0001893A 42A8 0010                  		clr.l	$10(a0)
0001893E                            
0001893E                            loc_18334:
0001893E 4EB9 0000 2BC2             		jsr	(RandomNumber).l
00018944 1140 0034                  		move.b	d0,$34(a0)
00018948                            
00018948                            loc_1833E:
00018948 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001894E 3168 0030 0008             		move.w	$30(a0),8(a0)
00018954 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0001895A 6400                       		bcc.s	locret_18390
0001895C 4A28 0022                  		tst.b	$22(a0)
00018960 6B00                       		bmi.s	loc_18392
00018962 4A28 0020                  		tst.b	$20(a0)
00018966 6600                       		bne.s	locret_18390
00018968 4A28 003E                  		tst.b	$3E(a0)
0001896C 6600                       		bne.s	loc_18374
0001896E 117C 0028 003E             		move.b	#$28,$3E(a0)
00018974 303C 00AC                  		move.w	#$AC,d0
00018978 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001897E                            
0001897E                            loc_18374:
0001897E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018982 7000                       		moveq	#0,d0
00018984 4A51                       		tst.w	(a1)
00018986 6600                       		bne.s	loc_18382
00018988 303C 0EEE                  		move.w	#$EEE,d0
0001898C                            
0001898C                            loc_18382:
0001898C 3280                       		move.w	d0,(a1)
0001898E 5328 003E                  		subq.b	#1,$3E(a0)
00018992 6600                       		bne.s	locret_18390
00018994 117C 000F 0020             		move.b	#$F,$20(a0)
0001899A                            
0001899A                            locret_18390:
0001899A 4E75                       		rts	
0001899C                            ; ===========================================================================
0001899C                            
0001899C                            loc_18392:				; XREF: loc_1833E
0001899C 7064                       		moveq	#100,d0
0001899E 6100 0000                  		bsr.w	AddPoints
000189A2 117C 0004 0025             		move.b	#4,$25(a0)
000189A8 317C 00B4 003C             		move.w	#$B4,$3C(a0)
000189AE 4268 0010                  		clr.w	$10(a0)
000189B2 4E75                       		rts	
000189B4                            ; ===========================================================================
000189B4                            
000189B4                            loc_183AA:				; XREF: Obj73_ShipIndex
000189B4 7000                       		moveq	#0,d0
000189B6 1028 0028                  		move.b	$28(a0),d0
000189BA 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
000189BE 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
000189C2 0228 0006 0028             		andi.b	#6,$28(a0)
000189C8 6000 FF7E                  		bra.w	loc_1833E
000189CC                            ; ===========================================================================
000189CC 0000                       off_183C2:	dc.w loc_183CA-off_183C2
000189CE 0000                       		dc.w Obj73_MakeLava2-off_183C2
000189D0 0000                       		dc.w loc_183CA-off_183C2
000189D2 0000                       		dc.w Obj73_MakeLava2-off_183C2
000189D4                            ; ===========================================================================
000189D4                            
000189D4                            loc_183CA:				; XREF: off_183C2
000189D4 4A68 0010                  		tst.w	$10(a0)
000189D8 6600                       		bne.s	loc_183FE
000189DA 7040                       		moveq	#$40,d0
000189DC 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
000189E2 6700                       		beq.s	loc_183E6
000189E4 6500                       		bcs.s	loc_183DE
000189E6 4440                       		neg.w	d0
000189E8                            
000189E8                            loc_183DE:
000189E8 3140 0012                  		move.w	d0,$12(a0)
000189EC 6000 F49A                  		bra.w	BossMove
000189F0                            ; ===========================================================================
000189F0                            
000189F0                            loc_183E6:
000189F0 317C 0200 0010             		move.w	#$200,$10(a0)
000189F6 317C 0100 0012             		move.w	#$100,$12(a0)
000189FC 0828 0000 0022             		btst	#0,$22(a0)
00018A02 6600                       		bne.s	loc_183FE
00018A04 4468 0010                  		neg.w	$10(a0)
00018A08                            
00018A08                            loc_183FE:
00018A08 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018A0E 6400                       		bcc.s	Obj73_MakeLava
00018A10 6100 F476                  		bsr.w	BossMove
00018A14 5968 0012                  		subq.w	#4,$12(a0)
00018A18                            
00018A18                            Obj73_MakeLava:
00018A18 5328 0034                  		subq.b	#1,$34(a0)
00018A1C 6400                       		bcc.s	loc_1845C
00018A1E 4EB9 0000 DFC6             		jsr	SingleObjLoad
00018A24 6600                       		bne.s	loc_1844A
00018A26 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018A2A 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018A30 4EB9 0000 2BC2             		jsr	(RandomNumber).l
00018A36 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018A3C 80FC 0050                  		divu.w	#$50,d0
00018A40 4840                       		swap	d0
00018A42 0640 1878                  		addi.w	#$1878,d0
00018A46 3340 0008                  		move.w	d0,8(a1)
00018A4A EE09                       		lsr.b	#7,d1
00018A4C 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018A52                            
00018A52                            loc_1844A:
00018A52 4EB9 0000 2BC2             		jsr	(RandomNumber).l
00018A58 0200 001F                  		andi.b	#$1F,d0
00018A5C 0600 0040                  		addi.b	#$40,d0
00018A60 1140 0034                  		move.b	d0,$34(a0)
00018A64                            
00018A64                            loc_1845C:
00018A64 0828 0000 0022             		btst	#0,$22(a0)
00018A6A 6700                       		beq.s	loc_18474
00018A6C 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018A72 6D00                       		blt.s	locret_1849C
00018A74 317C 1910 0030             		move.w	#$1910,$30(a0)
00018A7A 6000                       		bra.s	loc_18482
00018A7C                            ; ===========================================================================
00018A7C                            
00018A7C                            loc_18474:
00018A7C 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018A82 6E00                       		bgt.s	locret_1849C
00018A84 317C 1830 0030             		move.w	#$1830,$30(a0)
00018A8A                            
00018A8A                            loc_18482:
00018A8A 4268 0010                  		clr.w	$10(a0)
00018A8E 317C FE80 0012             		move.w	#-$180,$12(a0)
00018A94 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018A9A 6400                       		bcc.s	loc_18498
00018A9C 4468 0012                  		neg.w	$12(a0)
00018AA0                            
00018AA0                            loc_18498:
00018AA0 5428 0028                  		addq.b	#2,$28(a0)
00018AA4                            
00018AA4                            locret_1849C:
00018AA4 4E75                       		rts	
00018AA6                            ; ===========================================================================
00018AA6                            
00018AA6                            Obj73_MakeLava2:			; XREF: off_183C2
00018AA6 6100 F3E0                  		bsr.w	BossMove
00018AAA 3028 0038                  		move.w	$38(a0),d0
00018AAE 0440 022C                  		subi.w	#$22C,d0
00018AB2 6E00                       		bgt.s	locret_184F4
00018AB4 303C 022C                  		move.w	#$22C,d0
00018AB8 4A68 0012                  		tst.w	$12(a0)
00018ABC 6700                       		beq.s	loc_184EA
00018ABE 4268 0012                  		clr.w	$12(a0)
00018AC2 317C 0050 003C             		move.w	#$50,$3C(a0)
00018AC8 0868 0000 0022             		bchg	#0,$22(a0)
00018ACE 4EB9 0000 DFC6             		jsr	SingleObjLoad
00018AD4 6600                       		bne.s	loc_184EA
00018AD6 3368 0030 0008             		move.w	$30(a0),8(a1)
00018ADC 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018AE2 0669 0018 000C             		addi.w	#$18,$C(a1)
00018AE8 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018AEC 137C 0001 0028             		move.b	#1,$28(a1)
00018AF2                            
00018AF2                            loc_184EA:
00018AF2 5368 003C                  		subq.w	#1,$3C(a0)
00018AF6 6600                       		bne.s	locret_184F4
00018AF8 5428 0028                  		addq.b	#2,$28(a0)
00018AFC                            
00018AFC                            locret_184F4:
00018AFC 4E75                       		rts	
00018AFE                            ; ===========================================================================
00018AFE                            
00018AFE                            loc_184F6:				; XREF: Obj73_ShipIndex
00018AFE 5368 003C                  		subq.w	#1,$3C(a0)
00018B02 6B00                       		bmi.s	loc_18500
00018B04 6000 F340                  		bra.w	BossDefeated
00018B08                            ; ===========================================================================
00018B08                            
00018B08                            loc_18500:
00018B08 08E8 0000 0022             		bset	#0,$22(a0)
00018B0E 08A8 0007 0022             		bclr	#7,$22(a0)
00018B14 4268 0010                  		clr.w	$10(a0)
00018B18 5428 0025                  		addq.b	#2,$25(a0)
00018B1C 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018B22 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018B26 6600                       		bne.s	locret_1852A
00018B28 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018B2E 4268 0012                  		clr.w	$12(a0)
00018B32                            
00018B32                            locret_1852A:
00018B32 4E75                       		rts	
00018B34                            ; ===========================================================================
00018B34                            
00018B34                            loc_1852C:				; XREF: Obj73_ShipIndex
00018B34 5268 003C                  		addq.w	#1,$3C(a0)
00018B38 6700                       		beq.s	loc_18544
00018B3A 6A00                       		bpl.s	loc_1854E
00018B3C 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018B42 6400                       		bcc.s	loc_18544
00018B44 0668 0018 0012             		addi.w	#$18,$12(a0)
00018B4A 6000                       		bra.s	loc_1857A
00018B4C                            ; ===========================================================================
00018B4C                            
00018B4C                            loc_18544:
00018B4C 4268 0012                  		clr.w	$12(a0)
00018B50 4268 003C                  		clr.w	$3C(a0)
00018B54 6000                       		bra.s	loc_1857A
00018B56                            ; ===========================================================================
00018B56                            
00018B56                            loc_1854E:
00018B56 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018B5C 6500                       		bcs.s	loc_18566
00018B5E 6700                       		beq.s	loc_1856C
00018B60 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018B66 6500                       		bcs.s	loc_1857A
00018B68 5428 0025                  		addq.b	#2,$25(a0)
00018B6C 6000                       		bra.s	loc_1857A
00018B6E                            ; ===========================================================================
00018B6E                            
00018B6E                            loc_18566:
00018B6E 5168 0012                  		subq.w	#8,$12(a0)
00018B72 6000                       		bra.s	loc_1857A
00018B74                            ; ===========================================================================
00018B74                            
00018B74                            loc_1856C:
00018B74 4268 0012                  		clr.w	$12(a0)
00018B78 303C 0083                  		move.w	#$83,d0
00018B7C 4EB9 0000 15B6             		jsr	(PlaySound).l	; play MZ music
00018B82                            
00018B82                            loc_1857A:
00018B82 6100 F304                  		bsr.w	BossMove
00018B86 6000 FDC0                  		bra.w	loc_1833E
00018B8A                            ; ===========================================================================
00018B8A                            
00018B8A                            loc_18582:				; XREF: Obj73_ShipIndex
00018B8A 317C 0500 0010             		move.w	#$500,$10(a0)
00018B90 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018B96 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018B9C 6400                       		bcc.s	loc_1859C
00018B9E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018BA2 6000                       		bra.s	loc_185A2
00018BA4                            ; ===========================================================================
00018BA4                            
00018BA4                            loc_1859C:
00018BA4 4A28 0001                  		tst.b	1(a0)
00018BA8 6A00                       		bpl.s	Obj73_ShipDel
00018BAA                            
00018BAA                            loc_185A2:
00018BAA 6100 F2DC                  		bsr.w	BossMove
00018BAE 6000 FD98                  		bra.w	loc_1833E
00018BB2                            ; ===========================================================================
00018BB2                            
00018BB2                            Obj73_ShipDel:
00018BB2 4EF9 0000 DB7C             		jmp	DeleteObject
00018BB8                            ; ===========================================================================
00018BB8                            
00018BB8                            Obj73_FaceMain:				; XREF: Obj73_Index
00018BB8 7000                       		moveq	#0,d0
00018BBA 7201                       		moveq	#1,d1
00018BBC 2268 0034                  		movea.l	$34(a0),a1
00018BC0 1029 0025                  		move.b	$25(a1),d0
00018BC4 5540                       		subq.w	#2,d0
00018BC6 6600                       		bne.s	loc_185D2
00018BC8 0829 0001 0028             		btst	#1,$28(a1)
00018BCE 6700                       		beq.s	loc_185DA
00018BD0 4A69 0012                  		tst.w	$12(a1)
00018BD4 6600                       		bne.s	loc_185DA
00018BD6 7204                       		moveq	#4,d1
00018BD8 6000                       		bra.s	loc_185EE
00018BDA                            ; ===========================================================================
00018BDA                            
00018BDA                            loc_185D2:
00018BDA 5500                       		subq.b	#2,d0
00018BDC 6B00                       		bmi.s	loc_185DA
00018BDE 720A                       		moveq	#$A,d1
00018BE0 6000                       		bra.s	loc_185EE
00018BE2                            ; ===========================================================================
00018BE2                            
00018BE2                            loc_185DA:
00018BE2 4A29 0020                  		tst.b	$20(a1)
00018BE6 6600                       		bne.s	loc_185E4
00018BE8 7205                       		moveq	#5,d1
00018BEA 6000                       		bra.s	loc_185EE
00018BEC                            ; ===========================================================================
00018BEC                            
00018BEC                            loc_185E4:
00018BEC 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018BF2 6500                       		bcs.s	loc_185EE
00018BF4 7204                       		moveq	#4,d1
00018BF6                            
00018BF6                            loc_185EE:
00018BF6 1141 001C                  		move.b	d1,$1C(a0)
00018BFA 5900                       		subq.b	#4,d0
00018BFC 6600                       		bne.s	loc_18602
00018BFE 117C 0006 001C             		move.b	#6,$1C(a0)
00018C04 4A28 0001                  		tst.b	1(a0)
00018C08 6A00                       		bpl.s	Obj73_FaceDel
00018C0A                            
00018C0A                            loc_18602:
00018C0A 6000                       		bra.s	Obj73_Display
00018C0C                            ; ===========================================================================
00018C0C                            
00018C0C                            Obj73_FaceDel:
00018C0C 4EF9 0000 DB7C             		jmp	DeleteObject
00018C12                            ; ===========================================================================
00018C12                            
00018C12                            Obj73_FlameMain:			; XREF: Obj73_Index
00018C12 117C 0007 001C             		move.b	#7,$1C(a0)
00018C18 2268 0034                  		movea.l	$34(a0),a1
00018C1C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018C22 6D00                       		blt.s	loc_1862A
00018C24 117C 000B 001C             		move.b	#$B,$1C(a0)
00018C2A 4A28 0001                  		tst.b	1(a0)
00018C2E 6A00                       		bpl.s	Obj73_FlameDel
00018C30 6000                       		bra.s	loc_18636
00018C32                            ; ===========================================================================
00018C32                            
00018C32                            loc_1862A:
00018C32 4A69 0010                  		tst.w	$10(a1)
00018C36 6700                       		beq.s	loc_18636
00018C38 117C 0008 001C             		move.b	#8,$1C(a0)
00018C3E                            
00018C3E                            loc_18636:
00018C3E 6000                       		bra.s	Obj73_Display
00018C40                            ; ===========================================================================
00018C40                            
00018C40                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018C40 4EF9 0000 DB7C             		jmp	DeleteObject
00018C46                            ; ===========================================================================
00018C46                            
00018C46                            Obj73_Display:
00018C46 43F9 0001 82CA             		lea	(Ani_Eggman).l,a1
00018C4C 4EB9 0000 AC10             		jsr	AnimateSprite
00018C52                            
00018C52                            loc_1864A:
00018C52 2268 0034                  		movea.l	$34(a0),a1
00018C56 3169 0008 0008             		move.w	8(a1),8(a0)
00018C5C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018C62 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018C68 7003                       		moveq	#3,d0
00018C6A C028 0022                  		and.b	$22(a0),d0
00018C6E 0228 00FC 0001             		andi.b	#-4,1(a0)
00018C74 8128 0001                  		or.b	d0,1(a0)
00018C78 4EF9 0000 DB40             		jmp	DisplaySprite
00018C7E                            ; ===========================================================================
00018C7E                            
00018C7E                            Obj73_TubeMain:				; XREF: Obj73_Index
00018C7E 2268 0034                  		movea.l	$34(a0),a1
00018C82 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018C88 6600                       		bne.s	loc_18688
00018C8A 4A28 0001                  		tst.b	1(a0)
00018C8E 6A00                       		bpl.s	Obj73_TubeDel
00018C90                            
00018C90                            loc_18688:
00018C90 217C 0001 83E2 0004        		move.l	#Map_BossItems,4(a0)
00018C98 317C 246C 0002             		move.w	#$246C,2(a0)
00018C9E 117C 0004 001A             		move.b	#4,$1A(a0)
00018CA4 60AC                       		bra.s	loc_1864A
00018CA6                            ; ===========================================================================
00018CA6                            
00018CA6                            Obj73_TubeDel:
00018CA6 4EF9 0000 DB7C             		jmp	DeleteObject
00018CAC                            ; ===========================================================================
00018CAC                            ; ---------------------------------------------------------------------------
00018CAC                            ; Object 74 - lava that	Eggman drops (MZ)
00018CAC                            ; ---------------------------------------------------------------------------
00018CAC                            
00018CAC                            Obj74:					; XREF: Obj_Index
00018CAC 7000                       		moveq	#0,d0
00018CAE 1028 0024                  		move.b	$24(a0),d0
00018CB2 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018CB6 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018CBA 4EF9 0000 DB40             		jmp	DisplaySprite
00018CC0                            ; ===========================================================================
00018CC0 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018CC2 0000                       		dc.w Obj74_Action-Obj74_Index
00018CC4 0000                       		dc.w loc_18886-Obj74_Index
00018CC6 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018CC8                            ; ===========================================================================
00018CC8                            
00018CC8                            Obj74_Main:				; XREF: Obj74_Index
00018CC8 117C 0008 0016             		move.b	#8,$16(a0)
00018CCE 117C 0008 0017             		move.b	#8,$17(a0)
00018CD4 217C 0000 B804 0004        		move.l	#Map_obj14,4(a0)
00018CDC 317C 0345 0002             		move.w	#$345,2(a0)
00018CE2 117C 0004 0001             		move.b	#4,1(a0)
00018CE8 117C 0005 0018             		move.b	#5,$18(a0)
00018CEE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018CF4 117C 0008 0019             		move.b	#8,$19(a0)
00018CFA 5428 0024                  		addq.b	#2,$24(a0)
00018CFE 4A28 0028                  		tst.b	$28(a0)
00018D02 6600                       		bne.s	loc_1870A
00018D04 117C 008B 0020             		move.b	#$8B,$20(a0)
00018D0A 5428 0024                  		addq.b	#2,$24(a0)
00018D0E 6000 0000                  		bra.w	loc_18886
00018D12                            ; ===========================================================================
00018D12                            
00018D12                            loc_1870A:
00018D12 117C 001E 0029             		move.b	#$1E,$29(a0)
00018D18 303C 00AE                  		move.w	#$AE,d0
00018D1C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava sound
00018D22                            
00018D22                            Obj74_Action:				; XREF: Obj74_Index
00018D22 7000                       		moveq	#0,d0
00018D24 1028 0025                  		move.b	$25(a0),d0
00018D28 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00018D2C 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018D30 4EB9 0000 DB1A             		jsr	SpeedToPos
00018D36 43F9 0000 E9FA             		lea	(Ani_obj14).l,a1
00018D3C 4EB9 0000 AC10             		jsr	AnimateSprite
00018D42 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00018D48 6200                       		bhi.s	Obj74_Delete
00018D4A 4E75                       		rts	
00018D4C                            ; ===========================================================================
00018D4C                            
00018D4C                            Obj74_Delete:
00018D4C 4EF9 0000 DB7C             		jmp	DeleteObject
00018D52                            ; ===========================================================================
00018D52 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018D54 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00018D56 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00018D58 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00018D5A                            ; ===========================================================================
00018D5A                            
00018D5A                            Obj74_Drop:				; XREF: Obj74_Index2
00018D5A 08E8 0001 0022             		bset	#1,$22(a0)
00018D60 5328 0029                  		subq.b	#1,$29(a0)
00018D64 6A00                       		bpl.s	locret_18780
00018D66 117C 008B 0020             		move.b	#$8B,$20(a0)
00018D6C 4228 0028                  		clr.b	$28(a0)
00018D70 0668 0018 0012             		addi.w	#$18,$12(a0)
00018D76 08A8 0001 0022             		bclr	#1,$22(a0)
00018D7C 6100 C666                  		bsr.w	ObjHitFloor
00018D80 4A41                       		tst.w	d1
00018D82 6A00                       		bpl.s	locret_18780
00018D84 5428 0025                  		addq.b	#2,$25(a0)
00018D88                            
00018D88                            locret_18780:
00018D88 4E75                       		rts	
00018D8A                            ; ===========================================================================
00018D8A                            
00018D8A                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00018D8A 5568 000C                  		subq.w	#2,$C(a0)
00018D8E 08E8 0007 0002             		bset	#7,2(a0)
00018D94 317C 00A0 0010             		move.w	#$A0,$10(a0)
00018D9A 4268 0012                  		clr.w	$12(a0)
00018D9E 3168 0008 0030             		move.w	8(a0),$30(a0)
00018DA4 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018DAA 117C 0003 0029             		move.b	#3,$29(a0)
00018DB0 4EB9 0000 DFDC             		jsr	SingleObjLoad2
00018DB6 6600                       		bne.s	loc_187CA
00018DB8 47D1                       		lea	(a1),a3
00018DBA 45D0                       		lea	(a0),a2
00018DBC 7003                       		moveq	#3,d0
00018DBE                            
00018DBE                            Obj74_Loop:
00018DBE 26DA                       		move.l	(a2)+,(a3)+
00018DC0 26DA                       		move.l	(a2)+,(a3)+
00018DC2 26DA                       		move.l	(a2)+,(a3)+
00018DC4 26DA                       		move.l	(a2)+,(a3)+
00018DC6 51C8 FFF6                  		dbf	d0,Obj74_Loop
00018DCA                            
00018DCA 4469 0010                  		neg.w	$10(a1)
00018DCE 5429 0025                  		addq.b	#2,$25(a1)
00018DD2                            
00018DD2                            loc_187CA:
00018DD2 5428 0025                  		addq.b	#2,$25(a0)
00018DD6 4E75                       		rts	
00018DD8                            
00018DD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018DD8                            
00018DD8                            
00018DD8                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00018DD8 4EB9 0000 DFDC             		jsr	SingleObjLoad2
00018DDE 6600                       		bne.s	locret_187EE
00018DE0 3368 0008 0008             		move.w	8(a0),8(a1)
00018DE6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018DEC 12BC 0074                  		move.b	#$74,(a1)
00018DF0 337C 0067 0028             		move.w	#$67,$28(a1)
00018DF6                            
00018DF6                            locret_187EE:
00018DF6 4E75                       		rts	
00018DF8                            ; End of function Obj74_Duplicate2
00018DF8                            
00018DF8                            ; ===========================================================================
00018DF8                            
00018DF8                            Obj74_Duplicate:			; XREF: Obj74_Index2
00018DF8 6100 C5EA                  		bsr.w	ObjHitFloor
00018DFC 4A41                       		tst.w	d1
00018DFE 6A00                       		bpl.s	loc_18826
00018E00 3028 0008                  		move.w	8(a0),d0
00018E04 0C40 1940                  		cmpi.w	#$1940,d0
00018E08 6E00                       		bgt.s	loc_1882C
00018E0A 3228 0030                  		move.w	$30(a0),d1
00018E0E B240                       		cmp.w	d0,d1
00018E10 6700                       		beq.s	loc_1881E
00018E12 0240 0010                  		andi.w	#$10,d0
00018E16 0241 0010                  		andi.w	#$10,d1
00018E1A B240                       		cmp.w	d0,d1
00018E1C 6700                       		beq.s	loc_1881E
00018E1E 61B8                       		bsr.s	Obj74_Duplicate2
00018E20 3168 0008 0032             		move.w	8(a0),$32(a0)
00018E26                            
00018E26                            loc_1881E:
00018E26 3168 0008 0030             		move.w	8(a0),$30(a0)
00018E2C 4E75                       		rts	
00018E2E                            ; ===========================================================================
00018E2E                            
00018E2E                            loc_18826:
00018E2E 5428 0025                  		addq.b	#2,$25(a0)
00018E32 4E75                       		rts	
00018E34                            ; ===========================================================================
00018E34                            
00018E34                            loc_1882C:
00018E34 5428 0024                  		addq.b	#2,$24(a0)
00018E38 4E75                       		rts	
00018E3A                            ; ===========================================================================
00018E3A                            
00018E3A                            Obj74_FallEdge:				; XREF: Obj74_Index2
00018E3A 08A8 0001 0022             		bclr	#1,$22(a0)
00018E40 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00018E46 3028 0008                  		move.w	8(a0),d0
00018E4A 9068 0032                  		sub.w	$32(a0),d0
00018E4E 6A00                       		bpl.s	loc_1884A
00018E50 4440                       		neg.w	d0
00018E52                            
00018E52                            loc_1884A:
00018E52 0C40 0012                  		cmpi.w	#$12,d0
00018E56 6600                       		bne.s	loc_18856
00018E58 08A8 0007 0002             		bclr	#7,2(a0)
00018E5E                            
00018E5E                            loc_18856:
00018E5E 6100 C584                  		bsr.w	ObjHitFloor
00018E62 4A41                       		tst.w	d1
00018E64 6A00                       		bpl.s	locret_1887E
00018E66 5328 0029                  		subq.b	#1,$29(a0)
00018E6A 6700                       		beq.s	Obj74_Delete2
00018E6C 4268 0012                  		clr.w	$12(a0)
00018E70 3168 0032 0008             		move.w	$32(a0),8(a0)
00018E76 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018E7C 08E8 0007 0002             		bset	#7,2(a0)
00018E82 5528 0025                  		subq.b	#2,$25(a0)
00018E86                            
00018E86                            locret_1887E:
00018E86 4E75                       		rts	
00018E88                            ; ===========================================================================
00018E88                            
00018E88                            Obj74_Delete2:
00018E88 4EF9 0000 DB7C             		jmp	DeleteObject
00018E8E                            ; ===========================================================================
00018E8E                            
00018E8E                            loc_18886:				; XREF: Obj74_Index
00018E8E 08E8 0007 0002             		bset	#7,2(a0)
00018E94 5328 0029                  		subq.b	#1,$29(a0)
00018E98 6600                       		bne.s	Obj74_Animate
00018E9A 117C 0001 001C             		move.b	#1,$1C(a0)
00018EA0 5968 000C                  		subq.w	#4,$C(a0)
00018EA4 4228 0020                  		clr.b	$20(a0)
00018EA8                            
00018EA8                            Obj74_Animate:
00018EA8 43F9 0000 E9FA             		lea	(Ani_obj14).l,a1
00018EAE 4EF9 0000 AC10             		jmp	AnimateSprite
00018EB4                            ; ===========================================================================
00018EB4                            
00018EB4                            Obj74_Delete3:				; XREF: Obj74_Index
00018EB4 4EF9 0000 DB7C             		jmp	DeleteObject
00018EBA                            ; ===========================================================================
00018EBA                            
00018EBA                            Obj7A_Delete:
00018EBA 4EF9 0000 DB7C             		jmp	DeleteObject
00018EC0                            ; ===========================================================================
00018EC0                            ; ---------------------------------------------------------------------------
00018EC0                            ; Object 7A - Eggman (SLZ)
00018EC0                            ; ---------------------------------------------------------------------------
00018EC0                            
00018EC0                            Obj7A:					; XREF: Obj_Index
00018EC0 7000                       		moveq	#0,d0
00018EC2 1028 0024                  		move.b	$24(a0),d0
00018EC6 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00018ECA 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00018ECE                            ; ===========================================================================
00018ECE 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00018ED0 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00018ED2 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00018ED4 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00018ED6 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00018ED8                            
00018ED8 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018EDB 0401 04                    		dc.b 4,	1, 4
00018EDE 0607 04                    		dc.b 6,	7, 4
00018EE1 0800 03                    		dc.b 8,	0, 3
00018EE4                            ; ===========================================================================
00018EE4                            
00018EE4                            Obj7A_Main:				; XREF: Obj7A_Index
00018EE4 317C 2188 0008             		move.w	#$2188,8(a0)
00018EEA 317C 0228 000C             		move.w	#$228,$C(a0)
00018EF0 3168 0008 0030             		move.w	8(a0),$30(a0)
00018EF6 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018EFC 117C 000F 0020             		move.b	#$F,$20(a0)
00018F02 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018F08 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00018F0C 2248                       		movea.l	a0,a1
00018F0E 7203                       		moveq	#3,d1
00018F10 6000                       		bra.s	Obj7A_LoadBoss
00018F12                            ; ===========================================================================
00018F12                            
00018F12                            Obj7A_Loop:
00018F12 4EB9 0000 DFDC             		jsr	SingleObjLoad2
00018F18 6600                       		bne.s	loc_1895C
00018F1A 12BC 007A                  		move.b	#$7A,0(a1)
00018F1E 3368 0008 0008             		move.w	8(a0),8(a1)
00018F24 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018F2A                            
00018F2A                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00018F2A 08A8 0000 0022             		bclr	#0,$22(a0)
00018F30 4229 0025                  		clr.b	$25(a1)
00018F34 135A 0024                  		move.b	(a2)+,$24(a1)
00018F38 135A 001C                  		move.b	(a2)+,$1C(a1)
00018F3C 135A 0018                  		move.b	(a2)+,$18(a1)
00018F40 237C 0001 831A 0004        		move.l	#Map_Eggman,4(a1)
00018F48 337C 0400 0002             		move.w	#$400,2(a1)
00018F4E 137C 0004 0001             		move.b	#4,1(a1)
00018F54 137C 0020 0019             		move.b	#$20,$19(a1)
00018F5A 2348 0034                  		move.l	a0,$34(a1)
00018F5E 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00018F62                            
00018F62                            loc_1895C:
00018F62 43F8 D040                  		lea	($FFFFD040).w,a1
00018F66 45E8 002A                  		lea	$2A(a0),a2
00018F6A 705E                       		moveq	#$5E,d0
00018F6C 723E                       		moveq	#$3E,d1
00018F6E                            
00018F6E                            loc_18968:
00018F6E B011                       		cmp.b	(a1),d0
00018F70 6600                       		bne.s	loc_18974
00018F72 4A29 0028                  		tst.b	$28(a1)
00018F76 6700                       		beq.s	loc_18974
00018F78 34C9                       		move.w	a1,(a2)+
00018F7A                            
00018F7A                            loc_18974:
00018F7A D2FC 0040                  		adda.w	#$40,a1
00018F7E 51C9 FFEE                  		dbf	d1,loc_18968
00018F82                            
00018F82                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00018F82 7000                       		moveq	#0,d0
00018F84 1028 0025                  		move.b	$25(a0),d0
00018F88 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00018F8C 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00018F90 43F9 0001 82CA             		lea	(Ani_Eggman).l,a1
00018F96 4EB9 0000 AC10             		jsr	AnimateSprite
00018F9C 7003                       		moveq	#3,d0
00018F9E C028 0022                  		and.b	$22(a0),d0
00018FA2 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018FA8 8128 0001                  		or.b	d0,1(a0)
00018FAC 4EF9 0000 DB40             		jmp	DisplaySprite
00018FB2                            ; ===========================================================================
00018FB2 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00018FB4 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00018FB6 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00018FB8 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00018FBA 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00018FBC 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00018FBE                            ; ===========================================================================
00018FBE                            
00018FBE                            loc_189B8:				; XREF: Obj7A_ShipIndex
00018FBE 317C FF00 0010             		move.w	#-$100,$10(a0)
00018FC4 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00018FCA 6400                       		bcc.s	loc_189CA
00018FCC 5428 0025                  		addq.b	#2,$25(a0)
00018FD0                            
00018FD0                            loc_189CA:
00018FD0 6100 EEB6                  		bsr.w	BossMove
00018FD4 1028 003F                  		move.b	$3F(a0),d0
00018FD8 5428 003F                  		addq.b	#2,$3F(a0)
00018FDC 4EB9 0000 2BE8             		jsr	(CalcSine).l
00018FE2 EC40                       		asr.w	#6,d0
00018FE4 D068 0038                  		add.w	$38(a0),d0
00018FE8 3140 000C                  		move.w	d0,$C(a0)
00018FEC 3168 0030 0008             		move.w	$30(a0),8(a0)
00018FF2 6000                       		bra.s	loc_189FE
00018FF4                            ; ===========================================================================
00018FF4                            
00018FF4                            loc_189EE:
00018FF4 6100 EE92                  		bsr.w	BossMove
00018FF8 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018FFE 3168 0030 0008             		move.w	$30(a0),8(a0)
00019004                            
00019004                            loc_189FE:
00019004 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001900A 6400                       		bcc.s	locret_18A44
0001900C 4A28 0022                  		tst.b	$22(a0)
00019010 6B00                       		bmi.s	loc_18A46
00019012 4A28 0020                  		tst.b	$20(a0)
00019016 6600                       		bne.s	locret_18A44
00019018 4A28 003E                  		tst.b	$3E(a0)
0001901C 6600                       		bne.s	loc_18A28
0001901E 117C 0020 003E             		move.b	#$20,$3E(a0)
00019024 303C 00AC                  		move.w	#$AC,d0
00019028 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001902E                            
0001902E                            loc_18A28:
0001902E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019032 7000                       		moveq	#0,d0
00019034 4A51                       		tst.w	(a1)
00019036 6600                       		bne.s	loc_18A36
00019038 303C 0EEE                  		move.w	#$EEE,d0
0001903C                            
0001903C                            loc_18A36:
0001903C 3280                       		move.w	d0,(a1)
0001903E 5328 003E                  		subq.b	#1,$3E(a0)
00019042 6600                       		bne.s	locret_18A44
00019044 117C 000F 0020             		move.b	#$F,$20(a0)
0001904A                            
0001904A                            locret_18A44:
0001904A 4E75                       		rts	
0001904C                            ; ===========================================================================
0001904C                            
0001904C                            loc_18A46:
0001904C 7064                       		moveq	#100,d0
0001904E 6100 0000                  		bsr.w	AddPoints
00019052 117C 0006 0025             		move.b	#6,$25(a0)
00019058 117C 0078 003C             		move.b	#$78,$3C(a0)
0001905E 4268 0010                  		clr.w	$10(a0)
00019062 4E75                       		rts	
00019064                            ; ===========================================================================
00019064                            
00019064                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00019064 3028 0030                  		move.w	$30(a0),d0
00019068 317C 0200 0010             		move.w	#$200,$10(a0)
0001906E 0828 0000 0022             		btst	#0,$22(a0)
00019074 6600                       		bne.s	loc_18A7C
00019076 4468 0010                  		neg.w	$10(a0)
0001907A 0C40 2008                  		cmpi.w	#$2008,d0
0001907E 6E00                       		bgt.s	loc_18A88
00019080 6000                       		bra.s	loc_18A82
00019082                            ; ===========================================================================
00019082                            
00019082                            loc_18A7C:
00019082 0C40 2138                  		cmpi.w	#$2138,d0
00019086 6D00                       		blt.s	loc_18A88
00019088                            
00019088                            loc_18A82:
00019088 0868 0000 0022             		bchg	#0,$22(a0)
0001908E                            
0001908E                            loc_18A88:
0001908E 3028 0008                  		move.w	8(a0),d0
00019092 72FF                       		moveq	#-1,d1
00019094 7402                       		moveq	#2,d2
00019096 45E8 002A                  		lea	$2A(a0),a2
0001909A 7828                       		moveq	#$28,d4
0001909C 4A68 0010                  		tst.w	$10(a0)
000190A0 6A00                       		bpl.s	loc_18A9E
000190A2 4444                       		neg.w	d4
000190A4                            
000190A4                            loc_18A9E:
000190A4 321A                       		move.w	(a2)+,d1
000190A6 2641                       		movea.l	d1,a3
000190A8 082B 0003 0022             		btst	#3,$22(a3)
000190AE 6600                       		bne.s	loc_18AB4
000190B0 362B 0008                  		move.w	8(a3),d3
000190B4 D644                       		add.w	d4,d3
000190B6 9640                       		sub.w	d0,d3
000190B8 6700                       		beq.s	loc_18AC0
000190BA                            
000190BA                            loc_18AB4:
000190BA 51CA FFE8                  		dbf	d2,loc_18A9E
000190BE                            
000190BE 1142 0028                  		move.b	d2,$28(a0)
000190C2 6000 FF0C                  		bra.w	loc_189CA
000190C6                            ; ===========================================================================
000190C6                            
000190C6                            loc_18AC0:
000190C6 1142 0028                  		move.b	d2,$28(a0)
000190CA 5428 0025                  		addq.b	#2,$25(a0)
000190CE 117C 0028 003C             		move.b	#$28,$3C(a0)
000190D4 6000 FEFA                  		bra.w	loc_189CA
000190D8                            ; ===========================================================================
000190D8                            
000190D8                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000190D8 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000190DE 6600                       		bne.s	loc_18B36
000190E0 70FF                       		moveq	#-1,d0
000190E2 1028 0028                  		move.b	$28(a0),d0
000190E6 4880                       		ext.w	d0
000190E8 6B00                       		bmi.s	loc_18B40
000190EA 5540                       		subq.w	#2,d0
000190EC 4440                       		neg.w	d0
000190EE D040                       		add.w	d0,d0
000190F0 43E8 002A                  		lea	$2A(a0),a1
000190F4 3031 0000                  		move.w	(a1,d0.w),d0
000190F8 2440                       		movea.l	d0,a2
000190FA 43F8 D040                  		lea	($FFFFD040).w,a1
000190FE 723E                       		moveq	#$3E,d1
00019100                            
00019100                            loc_18AFA:
00019100 B0A9 003C                  		cmp.l	$3C(a1),d0
00019104 6700                       		beq.s	loc_18B40
00019106 D2FC 0040                  		adda.w	#$40,a1
0001910A 51C9 FFF4                  		dbf	d1,loc_18AFA
0001910E                            
0001910E 2F08                       		move.l	a0,-(sp)
00019110 41D2                       		lea	(a2),a0
00019112 4EB9 0000 DFDC             		jsr	SingleObjLoad2
00019118 205F                       		movea.l	(sp)+,a0
0001911A 6600                       		bne.s	loc_18B40
0001911C 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019120 3368 0008 0008             		move.w	8(a0),8(a1)
00019126 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001912C 0669 0020 000C             		addi.w	#$20,$C(a1)
00019132 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019138 234A 003C                  		move.l	a2,$3C(a1)
0001913C                            
0001913C                            loc_18B36:
0001913C 5328 003C                  		subq.b	#1,$3C(a0)
00019140 6700                       		beq.s	loc_18B40
00019142 6000 FEC0                  		bra.w	loc_189FE
00019146                            ; ===========================================================================
00019146                            
00019146                            loc_18B40:
00019146 5528 0025                  		subq.b	#2,$25(a0)
0001914A 6000 FE84                  		bra.w	loc_189CA
0001914E                            ; ===========================================================================
0001914E                            
0001914E                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001914E 5328 003C                  		subq.b	#1,$3C(a0)
00019152 6B00                       		bmi.s	loc_18B52
00019154 6000 ECF0                  		bra.w	BossDefeated
00019158                            ; ===========================================================================
00019158                            
00019158                            loc_18B52:
00019158 5428 0025                  		addq.b	#2,$25(a0)
0001915C 4268 0012                  		clr.w	$12(a0)
00019160 08E8 0000 0022             		bset	#0,$22(a0)
00019166 08A8 0007 0022             		bclr	#7,$22(a0)
0001916C 4268 0010                  		clr.w	$10(a0)
00019170 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00019176 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001917A 6600                       		bne.s	loc_18B7C
0001917C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019182                            
00019182                            loc_18B7C:
00019182 6000 FE80                  		bra.w	loc_189FE
00019186                            ; ===========================================================================
00019186                            
00019186                            loc_18B80:				; XREF: Obj7A_ShipIndex
00019186 5228 003C                  		addq.b	#1,$3C(a0)
0001918A 6700                       		beq.s	loc_18B90
0001918C 6A00                       		bpl.s	loc_18B96
0001918E 0668 0018 0012             		addi.w	#$18,$12(a0)
00019194 6000                       		bra.s	loc_18BC2
00019196                            ; ===========================================================================
00019196                            
00019196                            loc_18B90:
00019196 4268 0012                  		clr.w	$12(a0)
0001919A 6000                       		bra.s	loc_18BC2
0001919C                            ; ===========================================================================
0001919C                            
0001919C                            loc_18B96:
0001919C 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
000191A2 6500                       		bcs.s	loc_18BAE
000191A4 6700                       		beq.s	loc_18BB4
000191A6 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
000191AC 6500                       		bcs.s	loc_18BC2
000191AE 5428 0025                  		addq.b	#2,$25(a0)
000191B2 6000                       		bra.s	loc_18BC2
000191B4                            ; ===========================================================================
000191B4                            
000191B4                            loc_18BAE:
000191B4 5168 0012                  		subq.w	#8,$12(a0)
000191B8 6000                       		bra.s	loc_18BC2
000191BA                            ; ===========================================================================
000191BA                            
000191BA                            loc_18BB4:
000191BA 4268 0012                  		clr.w	$12(a0)
000191BE 303C 0084                  		move.w	#$84,d0
000191C2 4EB9 0000 15B6             		jsr	(PlaySound).l	; play SLZ music
000191C8                            
000191C8                            loc_18BC2:
000191C8 6000 FE2A                  		bra.w	loc_189EE
000191CC                            ; ===========================================================================
000191CC                            
000191CC                            loc_18BC6:				; XREF: Obj7A_ShipIndex
000191CC 317C 0400 0010             		move.w	#$400,$10(a0)
000191D2 317C FFC0 0012             		move.w	#-$40,$12(a0)
000191D8 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000191DE 6400                       		bcc.s	loc_18BE0
000191E0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000191E4 6000                       		bra.s	loc_18BE8
000191E6                            ; ===========================================================================
000191E6                            
000191E6                            loc_18BE0:
000191E6 4A28 0001                  		tst.b	1(a0)
000191EA 6A00 FCCE                  		bpl.w	Obj7A_Delete
000191EE                            
000191EE                            loc_18BE8:
000191EE 6100 EC98                  		bsr.w	BossMove
000191F2 6000 FDDC                  		bra.w	loc_189CA
000191F6                            ; ===========================================================================
000191F6                            
000191F6                            Obj7A_FaceMain:				; XREF: Obj7A_Index
000191F6 7000                       		moveq	#0,d0
000191F8 7201                       		moveq	#1,d1
000191FA 2268 0034                  		movea.l	$34(a0),a1
000191FE 1029 0025                  		move.b	$25(a1),d0
00019202 0C00 0006                  		cmpi.b	#6,d0
00019206 6B00                       		bmi.s	loc_18C06
00019208 720A                       		moveq	#$A,d1
0001920A 6000                       		bra.s	loc_18C1A
0001920C                            ; ===========================================================================
0001920C                            
0001920C                            loc_18C06:
0001920C 4A29 0020                  		tst.b	$20(a1)
00019210 6600                       		bne.s	loc_18C10
00019212 7205                       		moveq	#5,d1
00019214 6000                       		bra.s	loc_18C1A
00019216                            ; ===========================================================================
00019216                            
00019216                            loc_18C10:
00019216 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001921C 6500                       		bcs.s	loc_18C1A
0001921E 7204                       		moveq	#4,d1
00019220                            
00019220                            loc_18C1A:
00019220 1141 001C                  		move.b	d1,$1C(a0)
00019224 0C00 000A                  		cmpi.b	#$A,d0
00019228 6600                       		bne.s	loc_18C32
0001922A 117C 0006 001C             		move.b	#6,$1C(a0)
00019230 4A28 0001                  		tst.b	1(a0)
00019234 6A00 FC84                  		bpl.w	Obj7A_Delete
00019238                            
00019238                            loc_18C32:
00019238 6000                       		bra.s	loc_18C6C
0001923A                            ; ===========================================================================
0001923A                            
0001923A                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001923A 117C 0008 001C             		move.b	#8,$1C(a0)
00019240 2268 0034                  		movea.l	$34(a0),a1
00019244 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001924A 6600                       		bne.s	loc_18C56
0001924C 4A28 0001                  		tst.b	1(a0)
00019250 6A00 FC68                  		bpl.w	Obj7A_Delete
00019254 117C 000B 001C             		move.b	#$B,$1C(a0)
0001925A 6000                       		bra.s	loc_18C6C
0001925C                            ; ===========================================================================
0001925C                            
0001925C                            loc_18C56:
0001925C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019262 6E00                       		bgt.s	loc_18C6C
00019264 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001926A 6D00                       		blt.s	loc_18C6C
0001926C 117C 0007 001C             		move.b	#7,$1C(a0)
00019272                            
00019272                            loc_18C6C:
00019272 43F9 0001 82CA             		lea	(Ani_Eggman).l,a1
00019278 4EB9 0000 AC10             		jsr	AnimateSprite
0001927E                            
0001927E                            loc_18C78:
0001927E 2268 0034                  		movea.l	$34(a0),a1
00019282 3169 0008 0008             		move.w	8(a1),8(a0)
00019288 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001928E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019294 7003                       		moveq	#3,d0
00019296 C028 0022                  		and.b	$22(a0),d0
0001929A 0228 00FC 0001             		andi.b	#-4,1(a0)
000192A0 8128 0001                  		or.b	d0,1(a0)
000192A4 4EF9 0000 DB40             		jmp	DisplaySprite
000192AA                            ; ===========================================================================
000192AA                            
000192AA                            Obj7A_TubeMain:				; XREF: Obj7A_Index
000192AA 2268 0034                  		movea.l	$34(a0),a1
000192AE 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000192B4 6600                       		bne.s	loc_18CB8
000192B6 4A28 0001                  		tst.b	1(a0)
000192BA 6A00 FBFE                  		bpl.w	Obj7A_Delete
000192BE                            
000192BE                            loc_18CB8:
000192BE 217C 0001 83E2 0004        		move.l	#Map_BossItems,4(a0)
000192C6 317C 246C 0002             		move.w	#$246C,2(a0)
000192CC 117C 0003 001A             		move.b	#3,$1A(a0)
000192D2 60AA                       		bra.s	loc_18C78
000192D4                            ; ===========================================================================
000192D4                            ; ---------------------------------------------------------------------------
000192D4                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
000192D4                            ; ---------------------------------------------------------------------------
000192D4                            
000192D4                            Obj7B:					; XREF: Obj_Index
000192D4 7000                       		moveq	#0,d0
000192D6 1028 0024                  		move.b	$24(a0),d0
000192DA 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
000192DE 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
000192E2 3028 0030                  		move.w	$30(a0),d0
000192E6 0240 FF80                  		andi.w	#$FF80,d0
000192EA 3238 F700                  		move.w	($FFFFF700).w,d1
000192EE 0441 0080                  		subi.w	#$80,d1
000192F2 0241 FF80                  		andi.w	#$FF80,d1
000192F6 9041                       		sub.w	d1,d0
000192F8 6B00 FBC0                  		bmi.w	Obj7A_Delete
000192FC 0C40 0280                  		cmpi.w	#$280,d0
00019300 6200 FBB8                  		bhi.w	Obj7A_Delete
00019304 4EF9 0000 DB40             		jmp	DisplaySprite
0001930A                            ; ===========================================================================
0001930A 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001930C 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001930E 0000                       		dc.w loc_18DC6-Obj7B_Index
00019310 0000                       		dc.w loc_18EAA-Obj7B_Index
00019312 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00019314 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00019316                            ; ===========================================================================
00019316                            
00019316                            Obj7B_Main:				; XREF: Obj7B_Index
00019316 217C 0001 1F06 0004        		move.l	#Map_obj5Ea,4(a0)
0001931E 317C 0518 0002             		move.w	#$518,2(a0)
00019324 117C 0001 001A             		move.b	#1,$1A(a0)
0001932A 0028 0004 0001             		ori.b	#4,1(a0)
00019330 117C 0004 0018             		move.b	#4,$18(a0)
00019336 117C 008B 0020             		move.b	#$8B,$20(a0)
0001933C 117C 000C 0019             		move.b	#$C,$19(a0)
00019342 2268 003C                  		movea.l	$3C(a0),a1
00019346 3169 0008 0030             		move.w	8(a1),$30(a0)
0001934C 3169 000C 0034             		move.w	$C(a1),$34(a0)
00019352 08E8 0000 0022             		bset	#0,$22(a0)
00019358 3028 0008                  		move.w	8(a0),d0
0001935C B069 0008                  		cmp.w	8(a1),d0
00019360 6E00                       		bgt.s	loc_18D68
00019362 08A8 0000 0022             		bclr	#0,$22(a0)
00019368 117C 0002 003A             		move.b	#2,$3A(a0)
0001936E                            
0001936E                            loc_18D68:
0001936E 5428 0024                  		addq.b	#2,$24(a0)
00019372                            
00019372                            Obj7B_Fall:				; XREF: Obj7B_Index
00019372 4EB9 0000 DAEE             		jsr	ObjectFall
00019378 2268 003C                  		movea.l	$3C(a0),a1
0001937C 45F9 0000 0000             		lea	(word_19018).l,a2
00019382 7000                       		moveq	#0,d0
00019384 1029 001A                  		move.b	$1A(a1),d0
00019388 3228 0008                  		move.w	8(a0),d1
0001938C 9268 0030                  		sub.w	$30(a0),d1
00019390 6400                       		bcc.s	loc_18D8E
00019392 5440                       		addq.w	#2,d0
00019394                            
00019394                            loc_18D8E:
00019394 D040                       		add.w	d0,d0
00019396 3228 0034                  		move.w	$34(a0),d1
0001939A D272 0000                  		add.w	(a2,d0.w),d1
0001939E B268 000C                  		cmp.w	$C(a0),d1
000193A2 6E00                       		bgt.s	locret_18DC4
000193A4 2268 003C                  		movea.l	$3C(a0),a1
000193A8 7202                       		moveq	#2,d1
000193AA 0828 0000 0022             		btst	#0,$22(a0)
000193B0 6700                       		beq.s	loc_18DAE
000193B2 7200                       		moveq	#0,d1
000193B4                            
000193B4                            loc_18DAE:
000193B4 317C 00F0 0028             		move.w	#$F0,$28(a0)
000193BA 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
000193C0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000193C6 6000 0000                  		bra.w	loc_18FA2
000193CA                            ; ===========================================================================
000193CA                            
000193CA                            locret_18DC4:
000193CA 4E75                       		rts	
000193CC                            ; ===========================================================================
000193CC                            
000193CC                            loc_18DC6:				; XREF: Obj7B_Index
000193CC 2268 003C                  		movea.l	$3C(a0),a1
000193D0 7000                       		moveq	#0,d0
000193D2 1028 003A                  		move.b	$3A(a0),d0
000193D6 9029 003A                  		sub.b	$3A(a1),d0
000193DA 6700                       		beq.s	loc_18E2A
000193DC 6400                       		bcc.s	loc_18DDA
000193DE 4400                       		neg.b	d0
000193E0                            
000193E0                            loc_18DDA:
000193E0 323C F7E8                  		move.w	#-$818,d1
000193E4 343C FEEC                  		move.w	#-$114,d2
000193E8 0C00 0001                  		cmpi.b	#1,d0
000193EC 6700                       		beq.s	loc_18E00
000193EE 323C F6A0                  		move.w	#-$960,d1
000193F2 343C FF0C                  		move.w	#-$F4,d2
000193F6 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
000193FC 6D00                       		blt.s	loc_18E00
000193FE 323C F5E0                  		move.w	#-$A20,d1
00019402 343C FF80                  		move.w	#-$80,d2
00019406                            
00019406                            loc_18E00:
00019406 3141 0012                  		move.w	d1,$12(a0)
0001940A 3142 0010                  		move.w	d2,$10(a0)
0001940E 3028 0008                  		move.w	8(a0),d0
00019412 9068 0030                  		sub.w	$30(a0),d0
00019416 6400                       		bcc.s	loc_18E16
00019418 4468 0010                  		neg.w	$10(a0)
0001941C                            
0001941C                            loc_18E16:
0001941C 117C 0001 001A             		move.b	#1,$1A(a0)
00019422 317C 0020 0028             		move.w	#$20,$28(a0)
00019428 5428 0024                  		addq.b	#2,$24(a0)
0001942C 6000 0000                  		bra.w	loc_18EAA
00019430                            ; ===========================================================================
00019430                            
00019430                            loc_18E2A:				; XREF: loc_18DC6
00019430 45F9 0000 0000             		lea	(word_19018).l,a2
00019436 7000                       		moveq	#0,d0
00019438 1029 001A                  		move.b	$1A(a1),d0
0001943C 343C 0028                  		move.w	#$28,d2
00019440 3228 0008                  		move.w	8(a0),d1
00019444 9268 0030                  		sub.w	$30(a0),d1
00019448 6400                       		bcc.s	loc_18E48
0001944A 4442                       		neg.w	d2
0001944C 5440                       		addq.w	#2,d0
0001944E                            
0001944E                            loc_18E48:
0001944E D040                       		add.w	d0,d0
00019450 3228 0034                  		move.w	$34(a0),d1
00019454 D272 0000                  		add.w	(a2,d0.w),d1
00019458 3141 000C                  		move.w	d1,$C(a0)
0001945C D468 0030                  		add.w	$30(a0),d2
00019460 3142 0008                  		move.w	d2,8(a0)
00019464 4268 000E                  		clr.w	$E(a0)
00019468 4268 000A                  		clr.w	$A(a0)
0001946C 5368 0028                  		subq.w	#1,$28(a0)
00019470 6600                       		bne.s	loc_18E7A
00019472 317C 0020 0028             		move.w	#$20,$28(a0)
00019478 117C 0008 0024             		move.b	#8,$24(a0)
0001947E 4E75                       		rts	
00019480                            ; ===========================================================================
00019480                            
00019480                            loc_18E7A:
00019480 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00019486 6600                       		bne.s	loc_18E88
00019488 117C 0005 001F             		move.b	#5,$1F(a0)
0001948E                            
0001948E                            loc_18E88:
0001948E 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00019494 6600                       		bne.s	loc_18E96
00019496 117C 0002 001F             		move.b	#2,$1F(a0)
0001949C                            
0001949C                            loc_18E96:
0001949C 5328 001E                  		subq.b	#1,$1E(a0)
000194A0 6E00                       		bgt.s	locret_18EA8
000194A2 0868 0000 001A             		bchg	#0,$1A(a0)
000194A8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000194AE                            
000194AE                            locret_18EA8:
000194AE 4E75                       		rts	
000194B0                            ; ===========================================================================
000194B0                            
000194B0                            loc_18EAA:				; XREF: Obj7B_Index
000194B0 43F8 D040                  		lea	($FFFFD040).w,a1
000194B4 707A                       		moveq	#$7A,d0
000194B6 7240                       		moveq	#$40,d1
000194B8 743E                       		moveq	#$3E,d2
000194BA                            
000194BA                            loc_18EB4:
000194BA B011                       		cmp.b	(a1),d0
000194BC 6700                       		beq.s	loc_18EC0
000194BE D2C1                       		adda.w	d1,a1
000194C0 51CA FFF8                  		dbf	d2,loc_18EB4
000194C4                            
000194C4 6000                       		bra.s	loc_18F38
000194C6                            ; ===========================================================================
000194C6                            
000194C6                            loc_18EC0:
000194C6 3029 0008                  		move.w	8(a1),d0
000194CA 3229 000C                  		move.w	$C(a1),d1
000194CE 3428 0008                  		move.w	8(a0),d2
000194D2 3628 000C                  		move.w	$C(a0),d3
000194D6 45FA 0000                  		lea	byte_19022(pc),a2
000194DA 47FA 0000                  		lea	byte_19026(pc),a3
000194DE 181A                       		move.b	(a2)+,d4
000194E0 4884                       		ext.w	d4
000194E2 D044                       		add.w	d4,d0
000194E4 181B                       		move.b	(a3)+,d4
000194E6 4884                       		ext.w	d4
000194E8 D444                       		add.w	d4,d2
000194EA B440                       		cmp.w	d0,d2
000194EC 6500                       		bcs.s	loc_18F38
000194EE 181A                       		move.b	(a2)+,d4
000194F0 4884                       		ext.w	d4
000194F2 D044                       		add.w	d4,d0
000194F4 181B                       		move.b	(a3)+,d4
000194F6 4884                       		ext.w	d4
000194F8 D444                       		add.w	d4,d2
000194FA B042                       		cmp.w	d2,d0
000194FC 6500                       		bcs.s	loc_18F38
000194FE 181A                       		move.b	(a2)+,d4
00019500 4884                       		ext.w	d4
00019502 D244                       		add.w	d4,d1
00019504 181B                       		move.b	(a3)+,d4
00019506 4884                       		ext.w	d4
00019508 D644                       		add.w	d4,d3
0001950A B641                       		cmp.w	d1,d3
0001950C 6500                       		bcs.s	loc_18F38
0001950E 181A                       		move.b	(a2)+,d4
00019510 4884                       		ext.w	d4
00019512 D244                       		add.w	d4,d1
00019514 181B                       		move.b	(a3)+,d4
00019516 4884                       		ext.w	d4
00019518 D644                       		add.w	d4,d3
0001951A B243                       		cmp.w	d3,d1
0001951C 6500                       		bcs.s	loc_18F38
0001951E 5428 0024                  		addq.b	#2,$24(a0)
00019522 4268 0028                  		clr.w	$28(a0)
00019526 4229 0020                  		clr.b	$20(a1)
0001952A 5329 0021                  		subq.b	#1,$21(a1)
0001952E 6600                       		bne.s	loc_18F38
00019530 08E9 0007 0022             		bset	#7,$22(a1)
00019536 4268 0010                  		clr.w	$10(a0)
0001953A 4268 0012                  		clr.w	$12(a0)
0001953E                            
0001953E                            loc_18F38:
0001953E 4A68 0012                  		tst.w	$12(a0)
00019542 6A00                       		bpl.s	loc_18F5C
00019544 4EB9 0000 DAEE             		jsr	ObjectFall
0001954A 3028 0034                  		move.w	$34(a0),d0
0001954E 0440 002F                  		subi.w	#$2F,d0
00019552 B068 000C                  		cmp.w	$C(a0),d0
00019556 6E00                       		bgt.s	loc_18F58
00019558 4EB9 0000 DAEE             		jsr	ObjectFall
0001955E                            
0001955E                            loc_18F58:
0001955E 6000 FF20                  		bra.w	loc_18E7A
00019562                            ; ===========================================================================
00019562                            
00019562                            loc_18F5C:
00019562 4EB9 0000 DAEE             		jsr	ObjectFall
00019568 2268 003C                  		movea.l	$3C(a0),a1
0001956C 45F9 0000 0000             		lea	(word_19018).l,a2
00019572 7000                       		moveq	#0,d0
00019574 1029 001A                  		move.b	$1A(a1),d0
00019578 3228 0008                  		move.w	8(a0),d1
0001957C 9268 0030                  		sub.w	$30(a0),d1
00019580 6400                       		bcc.s	loc_18F7E
00019582 5440                       		addq.w	#2,d0
00019584                            
00019584                            loc_18F7E:
00019584 D040                       		add.w	d0,d0
00019586 3228 0034                  		move.w	$34(a0),d1
0001958A D272 0000                  		add.w	(a2,d0.w),d1
0001958E B268 000C                  		cmp.w	$C(a0),d1
00019592 6ECA                       		bgt.s	loc_18F58
00019594 2268 003C                  		movea.l	$3C(a0),a1
00019598 7202                       		moveq	#2,d1
0001959A 4A68 0010                  		tst.w	$10(a0)
0001959E 6B00                       		bmi.s	loc_18F9C
000195A0 7200                       		moveq	#0,d1
000195A2                            
000195A2                            loc_18F9C:
000195A2 317C 0000 0028             		move.w	#0,$28(a0)
000195A8                            
000195A8                            loc_18FA2:
000195A8 1341 003A                  		move.b	d1,$3A(a1)
000195AC 1141 003A                  		move.b	d1,$3A(a0)
000195B0 B229 001A                  		cmp.b	$1A(a1),d1
000195B4 6700                       		beq.s	loc_19008
000195B6 08A9 0003 0022             		bclr	#3,$22(a1)
000195BC 6700                       		beq.s	loc_19008
000195BE 4229 0025                  		clr.b	$25(a1)
000195C2 137C 0002 0024             		move.b	#2,$24(a1)
000195C8 45F8 D000                  		lea	($FFFFD000).w,a2
000195CC 3568 0012 0012             		move.w	$12(a0),$12(a2)
000195D2 446A 0012                  		neg.w	$12(a2)
000195D6 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
000195DC 6600                       		bne.s	loc_18FDC
000195DE E0EA 0012                  		asr	$12(a2)
000195E2                            
000195E2                            loc_18FDC:
000195E2 08EA 0001 0022             		bset	#1,$22(a2)
000195E8 08AA 0003 0022             		bclr	#3,$22(a2)
000195EE 422A 003C                  		clr.b	$3C(a2)
000195F2 2F08                       		move.l	a0,-(sp)
000195F4 41D2                       		lea	(a2),a0
000195F6 4EBA A370                  		jsr	Obj01_ChkRoll
000195FA 205F                       		movea.l	(sp)+,a0
000195FC 157C 0002 0024             		move.b	#2,$24(a2)
00019602 303C 00CC                  		move.w	#$CC,d0
00019606 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001960C                            
0001960C                            loc_19008:
0001960C 4268 0010                  		clr.w	$10(a0)
00019610 4268 0012                  		clr.w	$12(a0)
00019614 5428 0024                  		addq.b	#2,$24(a0)
00019618 6000 FE66                  		bra.w	loc_18E7A
0001961C                            ; ===========================================================================
0001961C FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019626                            		even
00019626 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001962A                            		even
0001962A 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001962E                            		even
0001962E                            ; ===========================================================================
0001962E                            
0001962E                            Obj7B_Explode:				; XREF: Obj7B_Index
0001962E 10BC 003F                  		move.b	#$3F,(a0)
00019632 4228 0024                  		clr.b	$24(a0)
00019636 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001963C 6700                       		beq.s	Obj7B_MakeFrag
0001963E 4E75                       		rts	
00019640                            ; ===========================================================================
00019640                            
00019640                            Obj7B_MakeFrag:
00019640 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019646 7203                       		moveq	#3,d1
00019648 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001964C                            
0001964C                            Obj7B_Loop:
0001964C 4EB9 0000 DFC6             		jsr	SingleObjLoad
00019652 6600                       		bne.s	loc_1909A
00019654 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019658 137C 000A 0024             		move.b	#$A,$24(a1)
0001965E 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019666 137C 0003 0018             		move.b	#3,$18(a1)
0001966C 337C 0518 0002             		move.w	#$518,2(a1)
00019672 3368 0008 0008             		move.w	8(a0),8(a1)
00019678 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001967E 335A 0010                  		move.w	(a2)+,$10(a1)
00019682 335A 0012                  		move.w	(a2)+,$12(a1)
00019686 137C 0098 0020             		move.b	#$98,$20(a1)
0001968C 0029 0004 0001             		ori.b	#4,1(a1)
00019692 08E9 0007 0001             		bset	#7,1(a1)
00019698 137C 000C 0019             		move.b	#$C,$19(a1)
0001969E                            
0001969E                            loc_1909A:
0001969E 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
000196A2                            
000196A2 4E75                       		rts	
000196A4                            ; ===========================================================================
000196A4 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
000196A8 FF60 FDC0                  		dc.w $FF60, $FDC0
000196AC 0100 FCC0                  		dc.w $100, $FCC0
000196B0 00A0 FDC0                  		dc.w $A0, $FDC0
000196B4                            ; ===========================================================================
000196B4                            
000196B4                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
000196B4 4EB9 0000 DB1A             		jsr	SpeedToPos
000196BA 3168 0008 0030             		move.w	8(a0),$30(a0)
000196C0 3168 000C 0034             		move.w	$C(a0),$34(a0)
000196C6 0668 0018 0012             		addi.w	#$18,$12(a0)
000196CC 7004                       		moveq	#4,d0
000196CE C078 FE0E                  		and.w	($FFFFFE0E).w,d0
000196D2 E448                       		lsr.w	#2,d0
000196D4 1140 001A                  		move.b	d0,$1A(a0)
000196D8 4A28 0001                  		tst.b	1(a0)
000196DC 6A00 F7DC                  		bpl.w	Obj7A_Delete
000196E0 4E75                       		rts	
000196E2                            ; ===========================================================================
000196E2                            ; ---------------------------------------------------------------------------
000196E2                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000196E2                            ; ---------------------------------------------------------------------------
000196E2                            Map_obj7B:
000196E2                            	include "_maps\obj7B.asm"
000196E2                            ; ---------------------------------------------------------------------------
000196E2                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000196E2                            ; ---------------------------------------------------------------------------
000196E2 0000                       		dc.w byte_190E2-Map_obj7B
000196E4 0000                       		dc.w byte_190E8-Map_obj7B
000196E6 01                         byte_190E2:	dc.b 1
000196E7 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000196EC 01                         byte_190E8:	dc.b 1
000196ED FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000196F2                            		even
000196F2                            		even
000196F2                            
000196F2                            ; ===========================================================================
000196F2                            ; ---------------------------------------------------------------------------
000196F2                            ; Object 75 - Eggman (SYZ)
000196F2                            ; ---------------------------------------------------------------------------
000196F2                            
000196F2                            Obj75:					; XREF: Obj_Index
000196F2 7000                       		moveq	#0,d0
000196F4 1028 0024                  		move.b	$24(a0),d0
000196F8 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
000196FC 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019700                            ; ===========================================================================
00019700 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019702 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019704 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019706 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019708 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001970A                            
0001970A 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001970D 0401 05                    		dc.b 4,	1, 5
00019710 0607 05                    		dc.b 6,	7, 5
00019713 0800 05                    		dc.b 8,	0, 5
00019716                            ; ===========================================================================
00019716                            
00019716                            Obj75_Main:				; XREF: Obj75_Index
00019716 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001971C 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019722 3168 0008 0030             		move.w	8(a0),$30(a0)
00019728 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001972E 117C 000F 0020             		move.b	#$F,$20(a0)
00019734 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001973A 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001973E 2248                       		movea.l	a0,a1
00019740 7203                       		moveq	#3,d1
00019742 6000                       		bra.s	Obj75_LoadBoss
00019744                            ; ===========================================================================
00019744                            
00019744                            Obj75_Loop:
00019744 4EB9 0000 DFDC             		jsr	SingleObjLoad2
0001974A 6600                       		bne.s	Obj75_ShipMain
0001974C 12BC 0075                  		move.b	#$75,(a1)
00019750 3368 0008 0008             		move.w	8(a0),8(a1)
00019756 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001975C                            
0001975C                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001975C 08A8 0000 0022             		bclr	#0,$22(a0)
00019762 4229 0025                  		clr.b	$25(a1)
00019766 135A 0024                  		move.b	(a2)+,$24(a1)
0001976A 135A 001C                  		move.b	(a2)+,$1C(a1)
0001976E 135A 0018                  		move.b	(a2)+,$18(a1)
00019772 237C 0001 831A 0004        		move.l	#Map_Eggman,4(a1)
0001977A 337C 0400 0002             		move.w	#$400,2(a1)
00019780 137C 0004 0001             		move.b	#4,1(a1)
00019786 137C 0020 0019             		move.b	#$20,$19(a1)
0001978C 2348 0034                  		move.l	a0,$34(a1)
00019790 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019794                            
00019794                            Obj75_ShipMain:				; XREF: Obj75_Index
00019794 7000                       		moveq	#0,d0
00019796 1028 0025                  		move.b	$25(a0),d0
0001979A 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001979E 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
000197A2 43F9 0001 82CA             		lea	(Ani_Eggman).l,a1
000197A8 4EB9 0000 AC10             		jsr	AnimateSprite
000197AE 7003                       		moveq	#3,d0
000197B0 C028 0022                  		and.b	$22(a0),d0
000197B4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000197BA 8128 0001                  		or.b	d0,1(a0)
000197BE 4EF9 0000 DB40             		jmp	DisplaySprite
000197C4                            ; ===========================================================================
000197C4 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
000197C8 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
000197CC 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
000197D0                            ; ===========================================================================
000197D0                            
000197D0                            loc_191CC:				; XREF: Obj75_ShipIndex
000197D0 317C FF00 0010             		move.w	#-$100,$10(a0)
000197D6 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
000197DC 6400                       		bcc.s	loc_191DE
000197DE 5428 0025                  		addq.b	#2,$25(a0)
000197E2                            
000197E2                            loc_191DE:
000197E2 1028 003F                  		move.b	$3F(a0),d0
000197E6 5428 003F                  		addq.b	#2,$3F(a0)
000197EA 4EB9 0000 2BE8             		jsr	(CalcSine).l
000197F0 E440                       		asr.w	#2,d0
000197F2 3140 0012                  		move.w	d0,$12(a0)
000197F6                            
000197F6                            loc_191F2:
000197F6 6100 E690                  		bsr.w	BossMove
000197FA 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019800 3168 0030 0008             		move.w	$30(a0),8(a0)
00019806                            
00019806                            loc_19202:
00019806 3028 0008                  		move.w	8(a0),d0
0001980A 0440 2C00                  		subi.w	#$2C00,d0
0001980E EA48                       		lsr.w	#5,d0
00019810 1140 0034                  		move.b	d0,$34(a0)
00019814 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001981A 6400                       		bcc.s	locret_19256
0001981C 4A28 0022                  		tst.b	$22(a0)
00019820 6B00                       		bmi.s	loc_19258
00019822 4A28 0020                  		tst.b	$20(a0)
00019826 6600                       		bne.s	locret_19256
00019828 4A28 003E                  		tst.b	$3E(a0)
0001982C 6600                       		bne.s	loc_1923A
0001982E 117C 0020 003E             		move.b	#$20,$3E(a0)
00019834 303C 00AC                  		move.w	#$AC,d0
00019838 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001983E                            
0001983E                            loc_1923A:
0001983E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019842 7000                       		moveq	#0,d0
00019844 4A51                       		tst.w	(a1)
00019846 6600                       		bne.s	loc_19248
00019848 303C 0EEE                  		move.w	#$EEE,d0
0001984C                            
0001984C                            loc_19248:
0001984C 3280                       		move.w	d0,(a1)
0001984E 5328 003E                  		subq.b	#1,$3E(a0)
00019852 6600                       		bne.s	locret_19256
00019854 117C 000F 0020             		move.b	#$F,$20(a0)
0001985A                            
0001985A                            locret_19256:
0001985A 4E75                       		rts	
0001985C                            ; ===========================================================================
0001985C                            
0001985C                            loc_19258:				; XREF: loc_19202
0001985C 7064                       		moveq	#100,d0
0001985E 6100 0000                  		bsr.w	AddPoints
00019862 117C 0006 0025             		move.b	#6,$25(a0)
00019868 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001986E 4268 0010                  		clr.w	$10(a0)
00019872 4E75                       		rts	
00019874                            ; ===========================================================================
00019874                            
00019874                            loc_19270:				; XREF: Obj75_ShipIndex
00019874 3028 0030                  		move.w	$30(a0),d0
00019878 317C 0140 0010             		move.w	#$140,$10(a0)
0001987E 0828 0000 0022             		btst	#0,$22(a0)
00019884 6600                       		bne.s	loc_1928E
00019886 4468 0010                  		neg.w	$10(a0)
0001988A 0C40 2C08                  		cmpi.w	#$2C08,d0
0001988E 6E00                       		bgt.s	loc_1929E
00019890 6000                       		bra.s	loc_19294
00019892                            ; ===========================================================================
00019892                            
00019892                            loc_1928E:
00019892 0C40 2D38                  		cmpi.w	#$2D38,d0
00019896 6D00                       		blt.s	loc_1929E
00019898                            
00019898                            loc_19294:
00019898 0868 0000 0022             		bchg	#0,$22(a0)
0001989E 4228 003D                  		clr.b	$3D(a0)
000198A2                            
000198A2                            loc_1929E:
000198A2 0440 2C10                  		subi.w	#$2C10,d0
000198A6 0240 001F                  		andi.w	#$1F,d0
000198AA 0440 001F                  		subi.w	#$1F,d0
000198AE 6A00                       		bpl.s	loc_192AE
000198B0 4440                       		neg.w	d0
000198B2                            
000198B2                            loc_192AE:
000198B2 5340                       		subq.w	#1,d0
000198B4 6E00                       		bgt.s	loc_192E8
000198B6 4A28 003D                  		tst.b	$3D(a0)
000198BA 6600                       		bne.s	loc_192E8
000198BC 3238 D008                  		move.w	($FFFFD008).w,d1
000198C0 0441 2C00                  		subi.w	#$2C00,d1
000198C4 EA41                       		asr.w	#5,d1
000198C6 B228 0034                  		cmp.b	$34(a0),d1
000198CA 6600                       		bne.s	loc_192E8
000198CC 7000                       		moveq	#0,d0
000198CE 1028 0034                  		move.b	$34(a0),d0
000198D2 EB40                       		asl.w	#5,d0
000198D4 0640 2C10                  		addi.w	#$2C10,d0
000198D8 3140 0030                  		move.w	d0,$30(a0)
000198DC 6100 0000                  		bsr.w	Obj75_FindBlocks
000198E0 5428 0025                  		addq.b	#2,$25(a0)
000198E4 4268 0028                  		clr.w	$28(a0)
000198E8 4268 0010                  		clr.w	$10(a0)
000198EC                            
000198EC                            loc_192E8:
000198EC 6000 FEF4                  		bra.w	loc_191DE
000198F0                            ; ===========================================================================
000198F0                            
000198F0                            loc_192EC:				; XREF: Obj75_ShipIndex
000198F0 7000                       		moveq	#0,d0
000198F2 1028 0028                  		move.b	$28(a0),d0
000198F6 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
000198FA 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
000198FE                            ; ===========================================================================
000198FE 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019900 0000                       		dc.w loc_19348-off_192FA
00019902 0000                       		dc.w loc_1938E-off_192FA
00019904 0000                       		dc.w loc_193D0-off_192FA
00019906                            ; ===========================================================================
00019906                            
00019906                            loc_19302:				; XREF: off_192FA
00019906 317C 0180 0012             		move.w	#$180,$12(a0)
0001990C 3028 0038                  		move.w	$38(a0),d0
00019910 0C40 0556                  		cmpi.w	#$556,d0
00019914 6500                       		bcs.s	loc_19344
00019916 317C 0556 0038             		move.w	#$556,$38(a0)
0001991C 4268 003C                  		clr.w	$3C(a0)
00019920 70FF                       		moveq	#-1,d0
00019922 3028 0036                  		move.w	$36(a0),d0
00019926 6700                       		beq.s	loc_1933C
00019928 2240                       		movea.l	d0,a1
0001992A 137C 00FF 0029             		move.b	#-1,$29(a1)
00019930 117C 00FF 0029             		move.b	#-1,$29(a0)
00019936 2348 0034                  		move.l	a0,$34(a1)
0001993A 317C 0032 003C             		move.w	#$32,$3C(a0)
00019940                            
00019940                            loc_1933C:
00019940 4268 0012                  		clr.w	$12(a0)
00019944 5428 0028                  		addq.b	#2,$28(a0)
00019948                            
00019948                            loc_19344:
00019948 6000 FEAC                  		bra.w	loc_191F2
0001994C                            ; ===========================================================================
0001994C                            
0001994C                            loc_19348:				; XREF: off_192FA
0001994C 5368 003C                  		subq.w	#1,$3C(a0)
00019950 6A00                       		bpl.s	loc_19366
00019952 5428 0028                  		addq.b	#2,$28(a0)
00019956 317C F800 0012             		move.w	#-$800,$12(a0)
0001995C 4A68 0036                  		tst.w	$36(a0)
00019960 6600                       		bne.s	loc_19362
00019962 E0E8 0012                  		asr	$12(a0)
00019966                            
00019966                            loc_19362:
00019966 7000                       		moveq	#0,d0
00019968 6000                       		bra.s	loc_1937C
0001996A                            ; ===========================================================================
0001996A                            
0001996A                            loc_19366:
0001996A 7000                       		moveq	#0,d0
0001996C 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019972 6E00                       		bgt.s	loc_1937C
00019974 7002                       		moveq	#2,d0
00019976 0828 0001 003D             		btst	#1,$3D(a0)
0001997C 6700                       		beq.s	loc_1937C
0001997E 4440                       		neg.w	d0
00019980                            
00019980                            loc_1937C:
00019980 D068 0038                  		add.w	$38(a0),d0
00019984 3140 000C                  		move.w	d0,$C(a0)
00019988 3168 0030 0008             		move.w	$30(a0),8(a0)
0001998E 6000 FE76                  		bra.w	loc_19202
00019992                            ; ===========================================================================
00019992                            
00019992                            loc_1938E:				; XREF: off_192FA
00019992 303C 04DA                  		move.w	#$4DA,d0
00019996 4A68 0036                  		tst.w	$36(a0)
0001999A 6700                       		beq.s	loc_1939C
0001999C 0440 0018                  		subi.w	#$18,d0
000199A0                            
000199A0                            loc_1939C:
000199A0 B068 0038                  		cmp.w	$38(a0),d0
000199A4 6D00                       		blt.s	loc_193BE
000199A6 317C 0008 003C             		move.w	#8,$3C(a0)
000199AC 4A68 0036                  		tst.w	$36(a0)
000199B0 6700                       		beq.s	loc_193B4
000199B2 317C 002D 003C             		move.w	#$2D,$3C(a0)
000199B8                            
000199B8                            loc_193B4:
000199B8 5428 0028                  		addq.b	#2,$28(a0)
000199BC 4268 0012                  		clr.w	$12(a0)
000199C0 6000                       		bra.s	loc_193CC
000199C2                            ; ===========================================================================
000199C2                            
000199C2                            loc_193BE:
000199C2 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
000199C8 6C00                       		bge.s	loc_193CC
000199CA 0668 000C 0012             		addi.w	#$C,$12(a0)
000199D0                            
000199D0                            loc_193CC:
000199D0 6000 FE24                  		bra.w	loc_191F2
000199D4                            ; ===========================================================================
000199D4                            
000199D4                            loc_193D0:				; XREF: off_192FA
000199D4 5368 003C                  		subq.w	#1,$3C(a0)
000199D8 6E00                       		bgt.s	loc_19406
000199DA 6B00                       		bmi.s	loc_193EE
000199DC 70FF                       		moveq	#-1,d0
000199DE 3028 0036                  		move.w	$36(a0),d0
000199E2 6700                       		beq.s	loc_193E8
000199E4 2240                       		movea.l	d0,a1
000199E6 137C 000A 0029             		move.b	#$A,$29(a1)
000199EC                            
000199EC                            loc_193E8:
000199EC 4268 0036                  		clr.w	$36(a0)
000199F0 6000                       		bra.s	loc_19406
000199F2                            ; ===========================================================================
000199F2                            
000199F2                            loc_193EE:
000199F2 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
000199F8 6600                       		bne.s	loc_19406
000199FA 4228 0029                  		clr.b	$29(a0)
000199FE 5528 0025                  		subq.b	#2,$25(a0)
00019A02 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019A08 6000                       		bra.s	loc_19446
00019A0A                            ; ===========================================================================
00019A0A                            
00019A0A                            loc_19406:
00019A0A 7001                       		moveq	#1,d0
00019A0C 4A68 0036                  		tst.w	$36(a0)
00019A10 6700                       		beq.s	loc_19410
00019A12 7002                       		moveq	#2,d0
00019A14                            
00019A14                            loc_19410:
00019A14 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019A1A 6700                       		beq.s	loc_19424
00019A1C 6D00                       		blt.s	loc_1941C
00019A1E 4440                       		neg.w	d0
00019A20                            
00019A20                            loc_1941C:
00019A20 4A68 0036                  		tst.w	$36(a0)
00019A24 D168 0038                  		add.w	d0,$38(a0)
00019A28                            
00019A28                            loc_19424:
00019A28 7000                       		moveq	#0,d0
00019A2A 4A68 0036                  		tst.w	$36(a0)
00019A2E 6700                       		beq.s	loc_19438
00019A30 7002                       		moveq	#2,d0
00019A32 0828 0000 003D             		btst	#0,$3D(a0)
00019A38 6700                       		beq.s	loc_19438
00019A3A 4440                       		neg.w	d0
00019A3C                            
00019A3C                            loc_19438:
00019A3C D068 0038                  		add.w	$38(a0),d0
00019A40 3140 000C                  		move.w	d0,$C(a0)
00019A44 3168 0030 0008             		move.w	$30(a0),8(a0)
00019A4A                            
00019A4A                            loc_19446:
00019A4A 6000 FDBA                  		bra.w	loc_19202
00019A4E                            
00019A4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019A4E                            
00019A4E                            
00019A4E                            Obj75_FindBlocks:			; XREF: loc_192AE
00019A4E 4268 0036                  		clr.w	$36(a0)
00019A52 43F8 D040                  		lea	($FFFFD040).w,a1
00019A56 703E                       		moveq	#$3E,d0
00019A58 7276                       		moveq	#$76,d1
00019A5A 1428 0034                  		move.b	$34(a0),d2
00019A5E                            
00019A5E                            Obj75_FindLoop:
00019A5E B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019A60 6600                       		bne.s	loc_1946A	; if not, branch
00019A62 B429 0028                  		cmp.b	$28(a1),d2
00019A66 6600                       		bne.s	loc_1946A
00019A68 3149 0036                  		move.w	a1,$36(a0)
00019A6C 6000                       		bra.s	locret_19472
00019A6E                            ; ===========================================================================
00019A6E                            
00019A6E                            loc_1946A:
00019A6E 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019A72 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019A76                            
00019A76                            locret_19472:
00019A76 4E75                       		rts	
00019A78                            ; End of function Obj75_FindBlocks
00019A78                            
00019A78                            ; ===========================================================================
00019A78                            
00019A78                            loc_19474:				; XREF: Obj75_ShipIndex
00019A78 5368 003C                  		subq.w	#1,$3C(a0)
00019A7C 6B00                       		bmi.s	loc_1947E
00019A7E 6000 E3C6                  		bra.w	BossDefeated
00019A82                            ; ===========================================================================
00019A82                            
00019A82                            loc_1947E:
00019A82 5428 0025                  		addq.b	#2,$25(a0)
00019A86 4268 0012                  		clr.w	$12(a0)
00019A8A 08E8 0000 0022             		bset	#0,$22(a0)
00019A90 08A8 0007 0022             		bclr	#7,$22(a0)
00019A96 4268 0010                  		clr.w	$10(a0)
00019A9A 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019AA0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019AA4 6600                       		bne.s	loc_194A8
00019AA6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019AAC                            
00019AAC                            loc_194A8:
00019AAC 6000 FD58                  		bra.w	loc_19202
00019AB0                            ; ===========================================================================
00019AB0                            
00019AB0                            loc_194AC:				; XREF: Obj75_ShipIndex
00019AB0 5268 003C                  		addq.w	#1,$3C(a0)
00019AB4 6700                       		beq.s	loc_194BC
00019AB6 6A00                       		bpl.s	loc_194C2
00019AB8 0668 0018 0012             		addi.w	#$18,$12(a0)
00019ABE 6000                       		bra.s	loc_194EE
00019AC0                            ; ===========================================================================
00019AC0                            
00019AC0                            loc_194BC:
00019AC0 4268 0012                  		clr.w	$12(a0)
00019AC4 6000                       		bra.s	loc_194EE
00019AC6                            ; ===========================================================================
00019AC6                            
00019AC6                            loc_194C2:
00019AC6 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019ACC 6500                       		bcs.s	loc_194DA
00019ACE 6700                       		beq.s	loc_194E0
00019AD0 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019AD6 6500                       		bcs.s	loc_194EE
00019AD8 5428 0025                  		addq.b	#2,$25(a0)
00019ADC 6000                       		bra.s	loc_194EE
00019ADE                            ; ===========================================================================
00019ADE                            
00019ADE                            loc_194DA:
00019ADE 5168 0012                  		subq.w	#8,$12(a0)
00019AE2 6000                       		bra.s	loc_194EE
00019AE4                            ; ===========================================================================
00019AE4                            
00019AE4                            loc_194E0:
00019AE4 4268 0012                  		clr.w	$12(a0)
00019AE8 303C 0085                  		move.w	#$85,d0
00019AEC 4EB9 0000 15B6             		jsr	(PlaySound).l	; play SYZ music
00019AF2                            
00019AF2                            loc_194EE:
00019AF2 6000 FD02                  		bra.w	loc_191F2
00019AF6                            ; ===========================================================================
00019AF6                            
00019AF6                            loc_194F2:				; XREF: Obj75_ShipIndex
00019AF6 317C 0400 0010             		move.w	#$400,$10(a0)
00019AFC 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019B02 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019B08 6400                       		bcc.s	loc_1950C
00019B0A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019B0E 6000                       		bra.s	loc_19512
00019B10                            ; ===========================================================================
00019B10                            
00019B10                            loc_1950C:
00019B10 4A28 0001                  		tst.b	1(a0)
00019B14 6A00                       		bpl.s	Obj75_ShipDelete
00019B16                            
00019B16                            loc_19512:
00019B16 6100 E370                  		bsr.w	BossMove
00019B1A 6000 FCC6                  		bra.w	loc_191DE
00019B1E                            ; ===========================================================================
00019B1E                            
00019B1E                            Obj75_ShipDelete:
00019B1E 4EF9 0000 DB7C             		jmp	DeleteObject
00019B24                            ; ===========================================================================
00019B24                            
00019B24                            Obj75_FaceMain:				; XREF: Obj75_Index
00019B24 7201                       		moveq	#1,d1
00019B26 2268 0034                  		movea.l	$34(a0),a1
00019B2A 7000                       		moveq	#0,d0
00019B2C 1029 0025                  		move.b	$25(a1),d0
00019B30 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019B34 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019B38 1141 001C                  		move.b	d1,$1C(a0)
00019B3C 1010                       		move.b	(a0),d0
00019B3E B011                       		cmp.b	(a1),d0
00019B40 6600                       		bne.s	Obj75_FaceDelete
00019B42 6000                       		bra.s	loc_195BE
00019B44                            ; ===========================================================================
00019B44                            
00019B44                            Obj75_FaceDelete:
00019B44 4EF9 0000 DB7C             		jmp	DeleteObject
00019B4A                            ; ===========================================================================
00019B4A 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019B4E 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019B52 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019B56                            ; ===========================================================================
00019B56                            
00019B56                            loc_19552:				; XREF: off_19546
00019B56 720A                       		moveq	#$A,d1
00019B58 4E75                       		rts	
00019B5A                            ; ===========================================================================
00019B5A                            
00019B5A                            loc_19556:				; XREF: off_19546
00019B5A 7206                       		moveq	#6,d1
00019B5C 4E75                       		rts	
00019B5E                            ; ===========================================================================
00019B5E                            
00019B5E                            loc_1955A:				; XREF: off_19546
00019B5E 7000                       		moveq	#0,d0
00019B60 1029 0028                  		move.b	$28(a1),d0
00019B64 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019B68 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019B6C                            ; ===========================================================================
00019B6C 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019B70 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019B74                            ; ===========================================================================
00019B74                            
00019B74                            loc_19570:				; XREF: off_19568
00019B74 6000                       		bra.s	loc_19574
00019B76                            ; ===========================================================================
00019B76                            
00019B76                            loc_19572:				; XREF: off_19568
00019B76 7206                       		moveq	#6,d1
00019B78                            
00019B78                            loc_19574:				; XREF: off_19546
00019B78 4A29 0020                  		tst.b	$20(a1)
00019B7C 6600                       		bne.s	loc_1957E
00019B7E 7205                       		moveq	#5,d1
00019B80 4E75                       		rts	
00019B82                            ; ===========================================================================
00019B82                            
00019B82                            loc_1957E:
00019B82 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019B88 6500                       		bcs.s	locret_19588
00019B8A 7204                       		moveq	#4,d1
00019B8C                            
00019B8C                            locret_19588:
00019B8C 4E75                       		rts	
00019B8E                            ; ===========================================================================
00019B8E                            
00019B8E                            Obj75_FlameMain:			; XREF: Obj75_Index
00019B8E 117C 0007 001C             		move.b	#7,$1C(a0)
00019B94 2268 0034                  		movea.l	$34(a0),a1
00019B98 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019B9E 6600                       		bne.s	loc_195AA
00019BA0 117C 000B 001C             		move.b	#$B,$1C(a0)
00019BA6 4A28 0001                  		tst.b	1(a0)
00019BAA 6A00                       		bpl.s	Obj75_FlameDelete
00019BAC 6000                       		bra.s	loc_195B6
00019BAE                            ; ===========================================================================
00019BAE                            
00019BAE                            loc_195AA:
00019BAE 4A69 0010                  		tst.w	$10(a1)
00019BB2 6700                       		beq.s	loc_195B6
00019BB4 117C 0008 001C             		move.b	#8,$1C(a0)
00019BBA                            
00019BBA                            loc_195B6:
00019BBA 6000                       		bra.s	loc_195BE
00019BBC                            ; ===========================================================================
00019BBC                            
00019BBC                            Obj75_FlameDelete:
00019BBC 4EF9 0000 DB7C             		jmp	DeleteObject
00019BC2                            ; ===========================================================================
00019BC2                            
00019BC2                            loc_195BE:
00019BC2 43F9 0001 82CA             		lea	(Ani_Eggman).l,a1
00019BC8 4EB9 0000 AC10             		jsr	AnimateSprite
00019BCE 2268 0034                  		movea.l	$34(a0),a1
00019BD2 3169 0008 0008             		move.w	8(a1),8(a0)
00019BD8 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019BDE                            
00019BDE                            loc_195DA:
00019BDE 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019BE4 7003                       		moveq	#3,d0
00019BE6 C028 0022                  		and.b	$22(a0),d0
00019BEA 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019BF0 8128 0001                  		or.b	d0,1(a0)
00019BF4 4EF9 0000 DB40             		jmp	DisplaySprite
00019BFA                            ; ===========================================================================
00019BFA                            
00019BFA                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019BFA 217C 0001 83E2 0004        		move.l	#Map_BossItems,4(a0)
00019C02 317C 246C 0002             		move.w	#$246C,2(a0)
00019C08 117C 0005 001A             		move.b	#5,$1A(a0)
00019C0E 2268 0034                  		movea.l	$34(a0),a1
00019C12 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019C18 6600                       		bne.s	loc_1961C
00019C1A 4A28 0001                  		tst.b	1(a0)
00019C1E 6A00                       		bpl.s	Obj75_SpikeDelete
00019C20                            
00019C20                            loc_1961C:
00019C20 3169 0008 0008             		move.w	8(a1),8(a0)
00019C26 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019C2C 3028 003C                  		move.w	$3C(a0),d0
00019C30 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019C36 6600                       		bne.s	loc_19652
00019C38 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019C3E 6700                       		beq.s	loc_1964C
00019C40 4A29 0028                  		tst.b	$28(a1)
00019C44 6600                       		bne.s	loc_19658
00019C46 0C40 0094                  		cmpi.w	#$94,d0
00019C4A 6C00                       		bge.s	loc_19658
00019C4C 5E40                       		addq.w	#7,d0
00019C4E 6000                       		bra.s	loc_19658
00019C50                            ; ===========================================================================
00019C50                            
00019C50                            loc_1964C:
00019C50 4A69 003C                  		tst.w	$3C(a1)
00019C54 6A00                       		bpl.s	loc_19658
00019C56                            
00019C56                            loc_19652:
00019C56 4A40                       		tst.w	d0
00019C58 6F00                       		ble.s	loc_19658
00019C5A 5B40                       		subq.w	#5,d0
00019C5C                            
00019C5C                            loc_19658:
00019C5C 3140 003C                  		move.w	d0,$3C(a0)
00019C60 E440                       		asr.w	#2,d0
00019C62 D168 000C                  		add.w	d0,$C(a0)
00019C66 117C 0008 0019             		move.b	#8,$19(a0)
00019C6C 117C 000C 0016             		move.b	#$C,$16(a0)
00019C72 4228 0020                  		clr.b	$20(a0)
00019C76 2268 0034                  		movea.l	$34(a0),a1
00019C7A 4A29 0020                  		tst.b	$20(a1)
00019C7E 6700                       		beq.s	loc_19688
00019C80 4A29 0029                  		tst.b	$29(a1)
00019C84 6600                       		bne.s	loc_19688
00019C86 117C 0084 0020             		move.b	#$84,$20(a0)
00019C8C                            
00019C8C                            loc_19688:
00019C8C 6000 FF50                  		bra.w	loc_195DA
00019C90                            ; ===========================================================================
00019C90                            
00019C90                            Obj75_SpikeDelete:
00019C90 4EF9 0000 DB7C             		jmp	DeleteObject
00019C96                            ; ===========================================================================
00019C96                            ; ---------------------------------------------------------------------------
00019C96                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019C96                            ; ---------------------------------------------------------------------------
00019C96                            
00019C96                            Obj76:					; XREF: Obj_Index
00019C96 7000                       		moveq	#0,d0
00019C98 1028 0024                  		move.b	$24(a0),d0
00019C9C 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019CA0 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019CA4                            ; ===========================================================================
00019CA4 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019CA6 0000                       		dc.w Obj76_Action-Obj76_Index
00019CA8 0000                       		dc.w loc_19762-Obj76_Index
00019CAA                            ; ===========================================================================
00019CAA                            
00019CAA                            Obj76_Main:				; XREF: Obj76_Index
00019CAA 7800                       		moveq	#0,d4
00019CAC 3A3C 2C10                  		move.w	#$2C10,d5
00019CB0 7C09                       		moveq	#9,d6
00019CB2 43D0                       		lea	(a0),a1
00019CB4 6000                       		bra.s	Obj76_MakeBlock
00019CB6                            ; ===========================================================================
00019CB6                            
00019CB6                            Obj76_Loop:
00019CB6 4EB9 0000 DFC6             		jsr	SingleObjLoad
00019CBC 6600                       		bne.s	Obj76_ExitLoop
00019CBE                            
00019CBE                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019CBE 12BC 0076                  		move.b	#$76,(a1)
00019CC2 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00019CCA 337C 4000 0002             		move.w	#$4000,2(a1)
00019CD0 137C 0004 0001             		move.b	#4,1(a1)
00019CD6 137C 0010 0019             		move.b	#$10,$19(a1)
00019CDC 137C 0010 0016             		move.b	#$10,$16(a1)
00019CE2 137C 0003 0018             		move.b	#3,$18(a1)
00019CE8 3345 0008                  		move.w	d5,8(a1)	; set x-position
00019CEC 337C 0582 000C             		move.w	#$582,$C(a1)
00019CF2 3344 0028                  		move.w	d4,$28(a1)
00019CF6 0644 0101                  		addi.w	#$101,d4
00019CFA 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019CFE 5429 0024                  		addq.b	#2,$24(a1)
00019D02 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019D06                            
00019D06                            Obj76_ExitLoop:
00019D06 4E75                       		rts	
00019D08                            ; ===========================================================================
00019D08                            
00019D08                            Obj76_Action:				; XREF: Obj76_Index
00019D08 1028 0029                  		move.b	$29(a0),d0
00019D0C B028 0028                  		cmp.b	$28(a0),d0
00019D10 6700                       		beq.s	Obj76_Solid
00019D12 4A00                       		tst.b	d0
00019D14 6B00                       		bmi.s	loc_19718
00019D16                            
00019D16                            loc_19712:
00019D16 6100 0000                  		bsr.w	Obj76_Break
00019D1A 6000                       		bra.s	Obj76_Display
00019D1C                            ; ===========================================================================
00019D1C                            
00019D1C                            loc_19718:
00019D1C 2268 0034                  		movea.l	$34(a0),a1
00019D20 4A29 0021                  		tst.b	$21(a1)
00019D24 67F0                       		beq.s	loc_19712
00019D26 3169 0008 0008             		move.w	8(a1),8(a0)
00019D2C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019D32 0668 002C 000C             		addi.w	#$2C,$C(a0)
00019D38 B2C8                       		cmpa.w	a0,a1
00019D3A 6500                       		bcs.s	Obj76_Display
00019D3C 3029 0012                  		move.w	$12(a1),d0
00019D40 48C0                       		ext.l	d0
00019D42 E080                       		asr.l	#8,d0
00019D44 D168 000C                  		add.w	d0,$C(a0)
00019D48 6000                       		bra.s	Obj76_Display
00019D4A                            ; ===========================================================================
00019D4A                            
00019D4A                            Obj76_Solid:				; XREF: Obj76_Action
00019D4A 323C 001B                  		move.w	#$1B,d1
00019D4E 343C 0010                  		move.w	#$10,d2
00019D52 363C 0011                  		move.w	#$11,d3
00019D56 3828 0008                  		move.w	8(a0),d4
00019D5A 4EB9 0000 FF10             		jsr	SolidObject
00019D60                            
00019D60                            Obj76_Display:				; XREF: Obj76_Action
00019D60 4EF9 0000 DB40             		jmp	DisplaySprite
00019D66                            ; ===========================================================================
00019D66                            
00019D66                            loc_19762:				; XREF: Obj76_Index
00019D66 4A28 0001                  		tst.b	1(a0)
00019D6A 6A00                       		bpl.s	Obj76_Delete
00019D6C 4EB9 0000 DAEE             		jsr	ObjectFall
00019D72 4EF9 0000 DB40             		jmp	DisplaySprite
00019D78                            ; ===========================================================================
00019D78                            
00019D78                            Obj76_Delete:
00019D78 4EF9 0000 DB7C             		jmp	DeleteObject
00019D7E                            
00019D7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019D7E                            
00019D7E                            
00019D7E                            Obj76_Break:				; XREF: Obj76_Action
00019D7E 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019D82 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00019D86 7801                       		moveq	#1,d4
00019D88 7203                       		moveq	#3,d1
00019D8A 7438                       		moveq	#$38,d2
00019D8C 5428 0024                  		addq.b	#2,$24(a0)
00019D90 117C 0008 0019             		move.b	#8,$19(a0)
00019D96 117C 0008 0016             		move.b	#8,$16(a0)
00019D9C 43D0                       		lea	(a0),a1
00019D9E 6000                       		bra.s	Obj76_MakeFrag
00019DA0                            ; ===========================================================================
00019DA0                            
00019DA0                            Obj76_LoopFrag:
00019DA0 4EB9 0000 DFDC             		jsr	SingleObjLoad2
00019DA6 6600                       		bne.s	loc_197D4
00019DA8                            
00019DA8                            Obj76_MakeFrag:
00019DA8 45D0                       		lea	(a0),a2
00019DAA 47D1                       		lea	(a1),a3
00019DAC 7603                       		moveq	#3,d3
00019DAE                            
00019DAE                            loc_197AA:
00019DAE 26DA                       		move.l	(a2)+,(a3)+
00019DB0 26DA                       		move.l	(a2)+,(a3)+
00019DB2 26DA                       		move.l	(a2)+,(a3)+
00019DB4 26DA                       		move.l	(a2)+,(a3)+
00019DB6 51CB FFF6                  		dbf	d3,loc_197AA
00019DBA                            
00019DBA 335C 0010                  		move.w	(a4)+,$10(a1)
00019DBE 335C 0012                  		move.w	(a4)+,$12(a1)
00019DC2 361D                       		move.w	(a5)+,d3
00019DC4 D769 0008                  		add.w	d3,8(a1)
00019DC8 361D                       		move.w	(a5)+,d3
00019DCA D769 000C                  		add.w	d3,$C(a1)
00019DCE 1344 001A                  		move.b	d4,$1A(a1)
00019DD2 5244                       		addq.w	#1,d4
00019DD4 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
00019DD8                            
00019DD8                            loc_197D4:
00019DD8 303C 00CB                  		move.w	#$CB,d0
00019DDC 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play smashing sound
00019DE2                            ; End of function Obj76_Break
00019DE2                            
00019DE2                            ; ===========================================================================
00019DE2 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
00019DE6 0180 FE00                  		dc.w $180, $FE00
00019DEA FF00 FF00                  		dc.w $FF00, $FF00
00019DEE 0100 FF00                  		dc.w $100, $FF00
00019DF2 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
00019DF6 0010 0000                  		dc.w $10, 0
00019DFA 0000 0010                  		dc.w 0,	$10
00019DFE 0010 0010                  		dc.w $10, $10
00019E02                            ; ---------------------------------------------------------------------------
00019E02                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
00019E02                            ; ---------------------------------------------------------------------------
00019E02                            Map_obj76:
00019E02                            	include "_maps\obj76.asm"
00019E02                            ; ---------------------------------------------------------------------------
00019E02                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
00019E02                            ; ---------------------------------------------------------------------------
00019E02 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
00019E06 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
00019E0A 0000                       		dc.w byte_19826-Map_obj76
00019E0C 02                         byte_19808:	dc.b 2
00019E0D F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
00019E12 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
00019E17 00                         		dc.b 0
00019E18 01                         byte_19814:	dc.b 1
00019E19 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
00019E1E 01                         byte_1981A:	dc.b 1
00019E1F F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
00019E24 01                         byte_19820:	dc.b 1
00019E25 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
00019E2A 01                         byte_19826:	dc.b 1
00019E2B F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
00019E30                            		even
00019E30                            		even
00019E30                            
00019E30                            ; ===========================================================================
00019E30                            
00019E30                            loc_1982C:				; XREF: loc_19C62; loc_19C80
00019E30 4EF9 0000 DB7C             		jmp	DeleteObject
00019E36                            ; ===========================================================================
00019E36                            ; ---------------------------------------------------------------------------
00019E36                            ; Object 82 - Eggman (SBZ2)
00019E36                            ; ---------------------------------------------------------------------------
00019E36                            
00019E36                            Obj82:					; XREF: Obj_Index
00019E36 7000                       		moveq	#0,d0
00019E38 1028 0024                  		move.b	$24(a0),d0
00019E3C 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
00019E40 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
00019E44                            ; ===========================================================================
00019E44 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
00019E46 0000                       		dc.w Obj82_Eggman-Obj82_Index
00019E48 0000                       		dc.w Obj82_Switch-Obj82_Index
00019E4A                            
00019E4A 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
00019E4D 0400 03                    		dc.b 4,	0, 3
00019E50                            ; ===========================================================================
00019E50                            
00019E50                            Obj82_Main:				; XREF: Obj82_Index
00019E50 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
00019E54 317C 2160 0008             		move.w	#$2160,8(a0)
00019E5A 317C 05A4 000C             		move.w	#$5A4,$C(a0)
00019E60 117C 000F 0020             		move.b	#$F,$20(a0)
00019E66 117C 0010 0021             		move.b	#$10,$21(a0)
00019E6C 08A8 0000 0022             		bclr	#0,$22(a0)
00019E72 4228 0025                  		clr.b	$25(a0)
00019E76 115A 0024                  		move.b	(a2)+,$24(a0)
00019E7A 115A 001C                  		move.b	(a2)+,$1C(a0)
00019E7E 115A 0018                  		move.b	(a2)+,$18(a0)
00019E82 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
00019E8A 317C 0400 0002             		move.w	#$400,2(a0)
00019E90 117C 0004 0001             		move.b	#4,1(a0)
00019E96 08E8 0007 0001             		bset	#7,1(a0)
00019E9C 117C 0020 0019             		move.b	#$20,$19(a0)
00019EA2 4EB9 0000 DFDC             		jsr	SingleObjLoad2
00019EA8 6600                       		bne.s	Obj82_Eggman
00019EAA 2348 0034                  		move.l	a0,$34(a1)
00019EAE 12BC 0082                  		move.b	#$82,(a1)	; load switch object
00019EB2 337C 2130 0008             		move.w	#$2130,8(a1)
00019EB8 337C 05BC 000C             		move.w	#$5BC,$C(a1)
00019EBE 4228 0025                  		clr.b	$25(a0)
00019EC2 135A 0024                  		move.b	(a2)+,$24(a1)
00019EC6 135A 001C                  		move.b	(a2)+,$1C(a1)
00019ECA 135A 0018                  		move.b	(a2)+,$18(a1)
00019ECE 237C 0000 C334 0004        		move.l	#Map_obj32,4(a1)
00019ED6 337C 04A4 0002             		move.w	#$4A4,2(a1)
00019EDC 137C 0004 0001             		move.b	#4,1(a1)
00019EE2 08E9 0007 0001             		bset	#7,1(a1)
00019EE8 137C 0010 0019             		move.b	#$10,$19(a1)
00019EEE 137C 0000 001A             		move.b	#0,$1A(a1)
00019EF4                            
00019EF4                            Obj82_Eggman:				; XREF: Obj82_Index
00019EF4 7000                       		moveq	#0,d0
00019EF6 1028 0025                  		move.b	$25(a0),d0
00019EFA 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
00019EFE 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
00019F02 43FA 0000                  		lea	Ani_obj82(pc),a1
00019F06 4EB9 0000 AC10             		jsr	AnimateSprite
00019F0C 4EF9 0000 DB40             		jmp	DisplaySprite
00019F12                            ; ===========================================================================
00019F12 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
00019F14 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
00019F16 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
00019F18 0000                       		dc.w loc_19934-Obj82_EggIndex
00019F1A                            ; ===========================================================================
00019F1A                            
00019F1A                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
00019F1A 3028 0008                  		move.w	8(a0),d0
00019F1E 9078 D008                  		sub.w	($FFFFD008).w,d0
00019F22 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
00019F26 6400                       		bcc.s	loc_19934	; if not, branch
00019F28 5428 0025                  		addq.b	#2,$25(a0)
00019F2C 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
00019F32 117C 0001 001C             		move.b	#1,$1C(a0)
00019F38                            
00019F38                            loc_19934:				; XREF: Obj82_EggIndex
00019F38 4EF9 0000 DB1A             		jmp	SpeedToPos
00019F3E                            ; ===========================================================================
00019F3E                            
00019F3E                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
00019F3E 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
00019F42 6600                       		bne.s	loc_19954	; if time remains, branch
00019F44 5428 0025                  		addq.b	#2,$25(a0)
00019F48 117C 0002 001C             		move.b	#2,$1C(a0)
00019F4E 5868 000C                  		addq.w	#4,$C(a0)
00019F52 317C 000F 003C             		move.w	#15,$3C(a0)
00019F58                            
00019F58                            loc_19954:
00019F58 60DE                       		bra.s	loc_19934
00019F5A                            ; ===========================================================================
00019F5A                            
00019F5A                            Obj82_Leap:				; XREF: Obj82_EggIndex
00019F5A 5368 003C                  		subq.w	#1,$3C(a0)
00019F5E 6E00                       		bgt.s	loc_199D0
00019F60 6600                       		bne.s	loc_1996A
00019F62 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
00019F68 317C FC40 0012             		move.w	#-$3C0,$12(a0)
00019F6E                            
00019F6E                            loc_1996A:
00019F6E 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
00019F74 6E00                       		bgt.s	loc_19976
00019F76 4268 0010                  		clr.w	$10(a0)
00019F7A                            
00019F7A                            loc_19976:
00019F7A 0668 0024 0012             		addi.w	#$24,$12(a0)
00019F80 4A68 0012                  		tst.w	$12(a0)
00019F84 6B00                       		bmi.s	Obj82_FindBlocks
00019F86 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
00019F8C 6500                       		bcs.s	Obj82_FindBlocks
00019F8E 317C 5357 0028             		move.w	#$5357,$28(a0)
00019F94 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
00019F9A 6500                       		bcs.s	Obj82_FindBlocks
00019F9C 317C 059B 000C             		move.w	#$59B,$C(a0)
00019FA2 4268 0012                  		clr.w	$12(a0)
00019FA6                            
00019FA6                            Obj82_FindBlocks:
00019FA6 3028 0010                  		move.w	$10(a0),d0
00019FAA 8068 0012                  		or.w	$12(a0),d0
00019FAE 6600                       		bne.s	loc_199D0
00019FB0 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
00019FB4 703E                       		moveq	#$3E,d0
00019FB6 7240                       		moveq	#$40,d1
00019FB8                            
00019FB8                            Obj82_FindLoop:	
00019FB8 D2C1                       		adda.w	d1,a1		; jump to next object RAM
00019FBA 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
00019FBE 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
00019FC2                            
00019FC2 6600                       		bne.s	loc_199D0
00019FC4 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
00019FCA 5428 0025                  		addq.b	#2,$25(a0)
00019FCE 117C 0001 001C             		move.b	#1,$1C(a0)
00019FD4                            
00019FD4                            loc_199D0:
00019FD4 6000 FF62                  		bra.w	loc_19934
00019FD8                            ; ===========================================================================
00019FD8                            
00019FD8                            Obj82_Switch:				; XREF: Obj82_Index
00019FD8 7000                       		moveq	#0,d0
00019FDA 1028 0025                  		move.b	$25(a0),d0
00019FDE 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
00019FE2 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
00019FE6                            ; ===========================================================================
00019FE6 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
00019FE8 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
00019FEA                            ; ===========================================================================
00019FEA                            
00019FEA                            loc_199E6:				; XREF: Obj82_SwIndex
00019FEA 2268 0034                  		movea.l	$34(a0),a1
00019FEE 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
00019FF4 6600                       		bne.s	Obj82_SwDisplay
00019FF6 117C 0001 001A             		move.b	#1,$1A(a0)
00019FFC 5428 0025                  		addq.b	#2,$25(a0)
0001A000                            
0001A000                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A000 4EF9 0000 DB40             		jmp	DisplaySprite
0001A006                            ; ===========================================================================
0001A006                            Ani_obj82:
0001A006                            	include "_anim\obj82.asm"
0001A006                            ; ---------------------------------------------------------------------------
0001A006                            ; Animation script - Eggman (SBZ2)
0001A006                            ; ---------------------------------------------------------------------------
0001A006 0000                       		dc.w byte_19A10-Ani_obj82
0001A008 0000                       		dc.w byte_19A14-Ani_obj82
0001A00A 0000                       		dc.w byte_19A18-Ani_obj82
0001A00C 0000                       		dc.w byte_19A20-Ani_obj82
0001A00E 0000                       		dc.w byte_19A24-Ani_obj82
0001A010 0000                       		dc.w byte_19A2A-Ani_obj82
0001A012 0000                       		dc.w byte_19A30-Ani_obj82
0001A014 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A018 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A01C 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A024 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A028 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A02E 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A034 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A038                            		even
0001A038                            		even
0001A038                            
0001A038                            ; ---------------------------------------------------------------------------
0001A038                            ; Sprite mappings - Eggman (SBZ2)
0001A038                            ; ---------------------------------------------------------------------------
0001A038                            Map_obj82:
0001A038                            	include "_maps\obj82.asm"
0001A038                            ; ================================================================================
0001A038                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A038                            ; ================================================================================
0001A038                            
0001A038                            DATAA16Z12RYSAF:
0001A038 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A03C 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A040 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A044 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A048 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A04C 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A04E 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A04F FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A054 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A059 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A05E 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A05F E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A064 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A069 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A06E FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A073 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A074 E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A079 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A07E 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A083 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A088 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A089 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A08E 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A093 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A098 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A099 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A09E 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A0A3 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A0A8 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A0AD 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A0AE E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A0B3 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A0B8 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A0BD 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A0C2 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A0C3 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A0C8 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A0CD 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A0D2 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A0D7 F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A0DC F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A0E1 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A0E6 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A0E7 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A0EC E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A0F1 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A0F6 F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A0FB 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A0FC 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A101 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A106 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A10B 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A110 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A115 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A116 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A11B E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A120 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A125 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A12A E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A12F F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A134 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A139 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A13E 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A13F EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A144 F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A149 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A14E                            	even
0001A14E                            	even
0001A14E                            
0001A14E                            ; ===========================================================================
0001A14E                            ; ---------------------------------------------------------------------------
0001A14E                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A14E                            ; ---------------------------------------------------------------------------
0001A14E                            
0001A14E                            Obj83:					; XREF: Obj_Index
0001A14E 7000                       		moveq	#0,d0
0001A150 1028 0024                  		move.b	$24(a0),d0
0001A154 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A158 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A15C                            ; ===========================================================================
0001A15C 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A15E 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A160 0000                       		dc.w loc_19C36-Obj83_Index
0001A162 0000                       		dc.w loc_19C62-Obj83_Index
0001A164 0000                       		dc.w loc_19C72-Obj83_Index
0001A166 0000                       		dc.w loc_19C80-Obj83_Index
0001A168                            ; ===========================================================================
0001A168                            
0001A168                            Obj83_Main:				; XREF: Obj83_Index
0001A168 317C 2080 0008             		move.w	#$2080,8(a0)
0001A16E 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A174 117C 0080 0019             		move.b	#$80,$19(a0)
0001A17A 117C 0010 0016             		move.b	#$10,$16(a0)
0001A180 117C 0004 0001             		move.b	#4,1(a0)
0001A186 08E8 0007 0001             		bset	#7,1(a0)
0001A18C 7800                       		moveq	#0,d4
0001A18E 3A3C 2010                  		move.w	#$2010,d5
0001A192 7C07                       		moveq	#7,d6
0001A194 45E8 0030                  		lea	$30(a0),a2
0001A198                            
0001A198                            Obj83_MakeBlock:
0001A198 4EB9 0000 DFC6             		jsr	SingleObjLoad
0001A19E 6600                       		bne.s	Obj83_ExitMake
0001A1A0 34C9                       		move.w	a1,(a2)+
0001A1A2 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A1A6 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A1AE 337C 4518 0002             		move.w	#$4518,2(a1)
0001A1B4 137C 0004 0001             		move.b	#4,1(a1)
0001A1BA 137C 0010 0019             		move.b	#$10,$19(a1)
0001A1C0 137C 0010 0016             		move.b	#$10,$16(a1)
0001A1C6 137C 0003 0018             		move.b	#3,$18(a1)
0001A1CC 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A1D0 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A1D6 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A1DA 137C 0008 0024             		move.b	#8,$24(a1)
0001A1E0 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A1E4                            
0001A1E4                            Obj83_ExitMake:
0001A1E4 5428 0024                  		addq.b	#2,$24(a0)
0001A1E8 4E75                       		rts	
0001A1EA                            ; ===========================================================================
0001A1EA                            
0001A1EA                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A1EA 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A1F0 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A1F2 4228 001A                  		clr.b	$1A(a0)
0001A1F6 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A1FA                            
0001A1FA                            Obj83_Solid:
0001A1FA 7000                       		moveq	#0,d0
0001A1FC 1028 001A                  		move.b	$1A(a0),d0
0001A200 4400                       		neg.b	d0
0001A202 4880                       		ext.w	d0
0001A204 5040                       		addq.w	#8,d0
0001A206 E940                       		asl.w	#4,d0
0001A208 383C 2100                  		move.w	#$2100,d4
0001A20C 9840                       		sub.w	d0,d4
0001A20E 1140 0019                  		move.b	d0,$19(a0)
0001A212 3144 0008                  		move.w	d4,8(a0)
0001A216 720B                       		moveq	#$B,d1
0001A218 D240                       		add.w	d0,d1
0001A21A 7410                       		moveq	#$10,d2
0001A21C 7611                       		moveq	#$11,d3
0001A21E 4EF9 0000 FF10             		jmp	SolidObject
0001A224                            ; ===========================================================================
0001A224                            
0001A224                            loc_19C36:				; XREF: Obj83_Index
0001A224 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A22A 6400                       		bcc.s	Obj83_Solid2
0001A22C 70FF                       		moveq	#-1,d0
0001A22E 1028 001A                  		move.b	$1A(a0),d0
0001A232 4880                       		ext.w	d0
0001A234 D040                       		add.w	d0,d0
0001A236 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A23A 2240                       		movea.l	d0,a1
0001A23C 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A242 5228 001A                  		addq.b	#1,$1A(a0)
0001A246 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A24C 6700                       		beq.s	loc_19C62
0001A24E                            
0001A24E                            Obj83_Solid2:
0001A24E 60AA                       		bra.s	Obj83_Solid
0001A250                            ; ===========================================================================
0001A250                            
0001A250                            loc_19C62:				; XREF: Obj83_Index
0001A250 08A8 0003 0022             		bclr	#3,$22(a0)
0001A256 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A25C 6000 FBD2                  		bra.w	loc_1982C
0001A260                            ; ===========================================================================
0001A260                            
0001A260                            loc_19C72:				; XREF: Obj83_Index
0001A260 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A266 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A268 4EF9 0000 DB40             		jmp	DisplaySprite
0001A26E                            ; ===========================================================================
0001A26E                            
0001A26E                            loc_19C80:				; XREF: Obj83_Index
0001A26E 4A28 0001                  		tst.b	1(a0)
0001A272 6A00 FBBC                  		bpl.w	loc_1982C
0001A276 4EB9 0000 DAEE             		jsr	ObjectFall
0001A27C 4EF9 0000 DB40             		jmp	DisplaySprite
0001A282                            ; ===========================================================================
0001A282                            
0001A282                            Obj83_Break:				; XREF: loc_19C72
0001A282 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A286 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A28A 7801                       		moveq	#1,d4
0001A28C 7203                       		moveq	#3,d1
0001A28E 7438                       		moveq	#$38,d2
0001A290 5428 0024                  		addq.b	#2,$24(a0)
0001A294 117C 0008 0019             		move.b	#8,$19(a0)
0001A29A 117C 0008 0016             		move.b	#8,$16(a0)
0001A2A0 43D0                       		lea	(a0),a1
0001A2A2 6000                       		bra.s	Obj83_MakeFrag
0001A2A4                            ; ===========================================================================
0001A2A4                            
0001A2A4                            Obj83_LoopFrag:
0001A2A4 4EB9 0000 DFDC             		jsr	SingleObjLoad2
0001A2AA 6600                       		bne.s	Obj83_BreakSnd
0001A2AC                            
0001A2AC                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A2AC 45D0                       		lea	(a0),a2
0001A2AE 47D1                       		lea	(a1),a3
0001A2B0 7603                       		moveq	#3,d3
0001A2B2                            
0001A2B2                            loc_19CC4:
0001A2B2 26DA                       		move.l	(a2)+,(a3)+
0001A2B4 26DA                       		move.l	(a2)+,(a3)+
0001A2B6 26DA                       		move.l	(a2)+,(a3)+
0001A2B8 26DA                       		move.l	(a2)+,(a3)+
0001A2BA 51CB FFF6                  		dbf	d3,loc_19CC4
0001A2BE                            
0001A2BE 335C 0012                  		move.w	(a4)+,$12(a1)
0001A2C2 361D                       		move.w	(a5)+,d3
0001A2C4 D769 0008                  		add.w	d3,8(a1)
0001A2C8 361D                       		move.w	(a5)+,d3
0001A2CA D769 000C                  		add.w	d3,$C(a1)
0001A2CE 1344 001A                  		move.b	d4,$1A(a1)
0001A2D2 5244                       		addq.w	#1,d4
0001A2D4 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A2D8                            
0001A2D8                            Obj83_BreakSnd:
0001A2D8 303C 00CB                  		move.w	#$CB,d0
0001A2DC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A2E2 4EF9 0000 DB40             		jmp	DisplaySprite
0001A2E8                            ; ===========================================================================
0001A2E8 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A2EC 0120 00C0                  		dc.w $120, $C0
0001A2F0 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A2F4 0010 0000                  		dc.w $10, 0
0001A2F8 0000 0010                  		dc.w 0,	$10
0001A2FC 0010 0010                  		dc.w $10, $10
0001A300                            ; ---------------------------------------------------------------------------
0001A300                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A300                            ; ---------------------------------------------------------------------------
0001A300                            Map_obj83:
0001A300                            	include "_maps\obj83.asm"
0001A300                            ; ---------------------------------------------------------------------------
0001A300                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A300                            ; ---------------------------------------------------------------------------
0001A300 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A304 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A308 0000                       		dc.w byte_19D46-Map_obj83
0001A30A 01                         byte_19D1C:	dc.b 1
0001A30B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A310 02                         byte_19D22:	dc.b 2
0001A311 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A316 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A31B 00                         		dc.b 0
0001A31C 02                         byte_19D2E:	dc.b 2
0001A31D F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A322 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A327 00                         		dc.b 0
0001A328 02                         byte_19D3A:	dc.b 2
0001A329 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A32E F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A333 00                         		dc.b 0
0001A334 02                         byte_19D46:	dc.b 2
0001A335 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A33A F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A340 00                         		even
0001A340 00                         		even
0001A340                            
0001A340                            ; ===========================================================================
0001A340                            ; ---------------------------------------------------------------------------
0001A340                            ; Object 85 - Eggman (FZ)
0001A340                            ; ---------------------------------------------------------------------------
0001A340                            
0001A340                            Obj85_Delete:
0001A340 4EF9 0000 DB7C             		jmp	DeleteObject
0001A346                            ; ===========================================================================
0001A346                            
0001A346                            Obj85:					; XREF: Obj_Index
0001A346 7000                       		moveq	#0,d0
0001A348 1028 0024                  		move.b	$24(a0),d0
0001A34C 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A350 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A354                            ; ===========================================================================
0001A354 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A356 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A358 0000                       		dc.w loc_1A38E-Obj85_Index
0001A35A 0000                       		dc.w loc_1A346-Obj85_Index
0001A35C 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A35E 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A360 0000                       		dc.w loc_1A264-Obj85_Index
0001A362                            
0001A362 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A368 0001 A038                  		dc.l Map_obj82		; mappings pointer
0001A36C 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A372 0000 0000                  		dc.l Map_obj84
0001A376 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A37C 0000 0000                  		dc.l Map_FZBoss
0001A380 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A386 0001 A038                  		dc.l Map_obj82
0001A38A 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A390 0001 831A                  		dc.l Map_Eggman
0001A394 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A39A 0001 831A                  		dc.l Map_Eggman
0001A39E                            
0001A39E 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A3A3 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A3A8 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A3AD 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A3B2 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A3B7 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A3BC                            ; ===========================================================================
0001A3BC                            
0001A3BC                            Obj85_Main:				; XREF: Obj85_Index
0001A3BC 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A3C0 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A3C4 2248                       		movea.l	a0,a1
0001A3C6 7205                       		moveq	#5,d1
0001A3C8 6000                       		bra.s	Obj85_LoadBoss
0001A3CA                            ; ===========================================================================
0001A3CA                            
0001A3CA                            Obj85_Loop:
0001A3CA 4EB9 0000 DFDC             		jsr	SingleObjLoad2
0001A3D0 6600                       		bne.s	loc_19E20
0001A3D2                            
0001A3D2                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A3D2 12BC 0085                  		move.b	#$85,(a1)
0001A3D6 335A 0008                  		move.w	(a2)+,8(a1)
0001A3DA 335A 000C                  		move.w	(a2)+,$C(a1)
0001A3DE 335A 0002                  		move.w	(a2)+,2(a1)
0001A3E2 235A 0004                  		move.l	(a2)+,4(a1)
0001A3E6 135B 0024                  		move.b	(a3)+,$24(a1)
0001A3EA 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A3EE 135B 0018                  		move.b	(a3)+,$18(a1)
0001A3F2 135B 0017                  		move.b	(a3)+,$17(a1)
0001A3F6 135B 0016                  		move.b	(a3)+,$16(a1)
0001A3FA 137C 0004 0001             		move.b	#4,1(a1)
0001A400 08E8 0007 0001             		bset	#7,1(a0)
0001A406 2348 0034                  		move.l	a0,$34(a1)
0001A40A 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A40E                            
0001A40E                            loc_19E20:
0001A40E 45E8 0036                  		lea	$36(a0),a2
0001A412 4EB9 0000 DFC6             		jsr	SingleObjLoad
0001A418 6600                       		bne.s	loc_19E5A
0001A41A 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A41E 3489                       		move.w	a1,(a2)
0001A420 2348 0034                  		move.l	a0,$34(a1)
0001A424 45E8 0038                  		lea	$38(a0),a2
0001A428 7400                       		moveq	#0,d2
0001A42A 7203                       		moveq	#3,d1
0001A42C                            
0001A42C                            loc_19E3E:
0001A42C 4EB9 0000 DFDC             		jsr	SingleObjLoad2
0001A432 6600                       		bne.s	loc_19E5A
0001A434 34C9                       		move.w	a1,(a2)+
0001A436 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A43A 2348 0034                  		move.l	a0,$34(a1)
0001A43E 1342 0028                  		move.b	d2,$28(a1)
0001A442 5442                       		addq.w	#2,d2
0001A444 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A448                            
0001A448                            loc_19E5A:
0001A448 317C 0000 0034             		move.w	#0,$34(a0)
0001A44E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A454 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A45A                            
0001A45A                            Obj85_Eggman:				; XREF: Obj85_Index
0001A45A 7000                       		moveq	#0,d0
0001A45C 1028 0034                  		move.b	$34(a0),d0
0001A460 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A464 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A468 4EF9 0000 DB40             		jmp	DisplaySprite
0001A46E                            ; ===========================================================================
0001A46E 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A472 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A476 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A47A 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A47E                            ; ===========================================================================
0001A47E                            
0001A47E                            loc_19E90:				; XREF: off_19E80
0001A47E 4AB8 F680                  		tst.l	($FFFFF680).w
0001A482 6600                       		bne.s	loc_19EA2
0001A484 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A48A 6500                       		bcs.s	loc_19EA2
0001A48C 5428 0034                  		addq.b	#2,$34(a0)
0001A490                            
0001A490                            loc_19EA2:
0001A490 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A494 4E75                       		rts	
0001A496                            ; ===========================================================================
0001A496                            
0001A496                            loc_19EA8:				; XREF: off_19E80
0001A496 4A68 0030                  		tst.w	$30(a0)
0001A49A 6A00                       		bpl.s	loc_19F10
0001A49C 4268 0030                  		clr.w	$30(a0)
0001A4A0 4EB9 0000 2BC2             		jsr	(RandomNumber).l
0001A4A6 0240 000C                  		andi.w	#$C,d0
0001A4AA 3200                       		move.w	d0,d1
0001A4AC 5441                       		addq.w	#2,d1
0001A4AE 4A80                       		tst.l	d0
0001A4B0 6A00                       		bpl.s	loc_19EC6
0001A4B2 C141                       		exg	d1,d0
0001A4B4                            
0001A4B4                            loc_19EC6:
0001A4B4 43FA 0000                  		lea	word_19FD6(pc),a1
0001A4B8 3031 0000                  		move.w	(a1,d0.w),d0
0001A4BC 3231 1000                  		move.w	(a1,d1.w),d1
0001A4C0 3140 0030                  		move.w	d0,$30(a0)
0001A4C4 74FF                       		moveq	#-1,d2
0001A4C6 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A4CA 2242                       		movea.l	d2,a1
0001A4CC 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A4D2 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A4D8 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A4DC 2242                       		movea.l	d2,a1
0001A4DE 137C 0001 0029             		move.b	#1,$29(a1)
0001A4E4 337C 0000 0030             		move.w	#0,$30(a1)
0001A4EA 317C 0001 0032             		move.w	#1,$32(a0)
0001A4F0 4228 0035                  		clr.b	$35(a0)
0001A4F4 303C 00B7                  		move.w	#$B7,d0
0001A4F8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A4FE                            
0001A4FE                            loc_19F10:
0001A4FE 4A68 0032                  		tst.w	$32(a0)
0001A502 6B00 0000                  		bmi.w	loc_19FA6
0001A506 08A8 0000 0022             		bclr	#0,$22(a0)
0001A50C 3038 D008                  		move.w	($FFFFD008).w,d0
0001A510 9068 0008                  		sub.w	8(a0),d0
0001A514 6500                       		bcs.s	loc_19F2E
0001A516 08E8 0000 0022             		bset	#0,$22(a0)
0001A51C                            
0001A51C                            loc_19F2E:
0001A51C 323C 002B                  		move.w	#$2B,d1
0001A520 343C 0014                  		move.w	#$14,d2
0001A524 363C 0014                  		move.w	#$14,d3
0001A528 3828 0008                  		move.w	8(a0),d4
0001A52C 4EB9 0000 FF10             		jsr	SolidObject
0001A532 4A44                       		tst.w	d4
0001A534 6E00                       		bgt.s	loc_19F50
0001A536                            
0001A536                            loc_19F48:
0001A536 4A28 0035                  		tst.b	$35(a0)
0001A53A 6600                       		bne.s	loc_19F88
0001A53C 6000                       		bra.s	loc_19F96
0001A53E                            ; ===========================================================================
0001A53E                            
0001A53E                            loc_19F50:
0001A53E 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A542 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A548 66EC                       		bne.s	loc_19F48
0001A54A 303C 0300                  		move.w	#$300,d0
0001A54E 0828 0000 0022             		btst	#0,$22(a0)
0001A554 6600                       		bne.s	loc_19F6A
0001A556 4440                       		neg.w	d0
0001A558                            
0001A558                            loc_19F6A:
0001A558 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A55C 4A28 0035                  		tst.b	$35(a0)
0001A560 6600                       		bne.s	loc_19F88
0001A562 5328 0021                  		subq.b	#1,$21(a0)
0001A566 117C 0064 0035             		move.b	#$64,$35(a0)
0001A56C 303C 00AC                  		move.w	#$AC,d0
0001A570 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A576                            
0001A576                            loc_19F88:
0001A576 5328 0035                  		subq.b	#1,$35(a0)
0001A57A 6700                       		beq.s	loc_19F96
0001A57C 117C 0003 001C             		move.b	#3,$1C(a0)
0001A582 6000                       		bra.s	loc_19F9C
0001A584                            ; ===========================================================================
0001A584                            
0001A584                            loc_19F96:
0001A584 117C 0001 001C             		move.b	#1,$1C(a0)
0001A58A                            
0001A58A                            loc_19F9C:
0001A58A 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001A58E 4EF9 0000 AC10             		jmp	AnimateSprite
0001A594                            ; ===========================================================================
0001A594                            
0001A594                            loc_19FA6:
0001A594 4A28 0021                  		tst.b	$21(a0)
0001A598 6700                       		beq.s	loc_19FBC
0001A59A 5428 0034                  		addq.b	#2,$34(a0)
0001A59E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A5A4 4268 0032                  		clr.w	$32(a0)
0001A5A8 4E75                       		rts	
0001A5AA                            ; ===========================================================================
0001A5AA                            
0001A5AA                            loc_19FBC:
0001A5AA 117C 0006 0034             		move.b	#6,$34(a0)
0001A5B0 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A5B6 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A5BC 117C 0014 0016             		move.b	#$14,$16(a0)
0001A5C2 4E75                       		rts	
0001A5C4                            ; ===========================================================================
0001A5C4 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A5D4                            ; ===========================================================================
0001A5D4                            
0001A5D4                            loc_19FE6:				; XREF: off_19E80
0001A5D4 70FF                       		moveq	#-1,d0
0001A5D6 3028 0036                  		move.w	$36(a0),d0
0001A5DA 2240                       		movea.l	d0,a1
0001A5DC 4A68 0030                  		tst.w	$30(a0)
0001A5E0 6A00                       		bpl.s	loc_1A000
0001A5E2 4268 0030                  		clr.w	$30(a0)
0001A5E6 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A5EC 6100                       		bsr.s	loc_1A020
0001A5EE                            
0001A5EE                            loc_1A000:
0001A5EE 700F                       		moveq	#$F,d0
0001A5F0 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A5F4 6600                       		bne.s	loc_1A00A
0001A5F6 6100                       		bsr.s	loc_1A020
0001A5F8                            
0001A5F8                            loc_1A00A:
0001A5F8 4A68 0032                  		tst.w	$32(a0)
0001A5FC 6700                       		beq.s	locret_1A01E
0001A5FE 5528 0034                  		subq.b	#2,$34(a0)
0001A602 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A608 4268 0032                  		clr.w	$32(a0)
0001A60C                            
0001A60C                            locret_1A01E:
0001A60C 4E75                       		rts	
0001A60E                            ; ===========================================================================
0001A60E                            
0001A60E                            loc_1A020:
0001A60E 303C 00B1                  		move.w	#$B1,d0
0001A612 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A618                            ; ===========================================================================
0001A618                            
0001A618                            loc_1A02A:				; XREF: off_19E80
0001A618 117C 0030 0017             		move.b	#$30,$17(a0)
0001A61E 08E8 0000 0022             		bset	#0,$22(a0)
0001A624 4EB9 0000 DB1A             		jsr	SpeedToPos
0001A62A 117C 0006 001A             		move.b	#6,$1A(a0)
0001A630 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A636 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A63C 6500                       		bcs.s	loc_1A070
0001A63E 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A644 5428 0034                  		addq.b	#2,$34(a0)
0001A648 117C 0020 0017             		move.b	#$20,$17(a0)
0001A64E 317C 0100 0010             		move.w	#$100,$10(a0)
0001A654 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A65A 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A65E                            
0001A65E                            loc_1A070:
0001A65E 6000 0000                  		bra.w	loc_1A166
0001A662                            ; ===========================================================================
0001A662                            
0001A662                            loc_1A074:				; XREF: off_19E80
0001A662 08E8 0000 0022             		bset	#0,$22(a0)
0001A668 117C 0004 001C             		move.b	#4,$1C(a0)
0001A66E 4EB9 0000 DB1A             		jsr	SpeedToPos
0001A674 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A67A 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A680 6500                       		bcs.s	loc_1A09A
0001A682 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A688                            
0001A688                            loc_1A09A:
0001A688 317C 0400 0010             		move.w	#$400,$10(a0)
0001A68E 3028 0008                  		move.w	8(a0),d0
0001A692 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A696 6A00                       		bpl.s	loc_1A0B4
0001A698 317C 0500 0010             		move.w	#$500,$10(a0)
0001A69E 6000 0000                  		bra.w	loc_1A0F2
0001A6A2                            ; ===========================================================================
0001A6A2                            
0001A6A2                            loc_1A0B4:
0001A6A2 0440 0070                  		subi.w	#$70,d0
0001A6A6 6500                       		bcs.s	loc_1A0F2
0001A6A8 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A6AE 5140                       		subq.w	#8,d0
0001A6B0 6500                       		bcs.s	loc_1A0F2
0001A6B2 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A6B8 5140                       		subq.w	#8,d0
0001A6BA 6500                       		bcs.s	loc_1A0F2
0001A6BC 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A6C2 5140                       		subq.w	#8,d0
0001A6C4 6500                       		bcs.s	loc_1A0F2
0001A6C6 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A6CC 5140                       		subq.w	#8,d0
0001A6CE 6500                       		bcs.s	loc_1A0F2
0001A6D0 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A6D6 0440 0038                  		subi.w	#$38,d0
0001A6DA 6500                       		bcs.s	loc_1A0F2
0001A6DC 4268 0010                  		clr.w	$10(a0)
0001A6E0                            
0001A6E0                            loc_1A0F2:
0001A6E0 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A6E6 6500                       		bcs.s	loc_1A110
0001A6E8 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A6EE 317C 0240 0010             		move.w	#$240,$10(a0)
0001A6F4 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A6FA 5428 0034                  		addq.b	#2,$34(a0)
0001A6FE                            
0001A6FE                            loc_1A110:
0001A6FE 6000                       		bra.s	loc_1A15C
0001A700                            ; ===========================================================================
0001A700                            
0001A700                            loc_1A112:				; XREF: off_19E80
0001A700 4EB9 0000 DB1A             		jsr	SpeedToPos
0001A706 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A70C 6500                       		bcs.s	loc_1A124
0001A70E 4268 0010                  		clr.w	$10(a0)
0001A712                            
0001A712                            loc_1A124:
0001A712 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A718 4A68 0012                  		tst.w	$12(a0)
0001A71C 6B00                       		bmi.s	loc_1A142
0001A71E 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A724 6500                       		bcs.s	loc_1A142
0001A726 317C 0592 000C             		move.w	#$592,$C(a0)
0001A72C 4268 0012                  		clr.w	$12(a0)
0001A730                            
0001A730                            loc_1A142:
0001A730 3028 0010                  		move.w	$10(a0),d0
0001A734 8068 0012                  		or.w	$12(a0),d0
0001A738 6600                       		bne.s	loc_1A15C
0001A73A 5428 0034                  		addq.b	#2,$34(a0)
0001A73E 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A744 117C 0001 0021             		move.b	#1,$21(a0)
0001A74A                            
0001A74A                            loc_1A15C:
0001A74A 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001A74E 4EB9 0000 AC10             		jsr	AnimateSprite
0001A754                            
0001A754                            loc_1A166:
0001A754 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A75A 6C00                       		bge.s	loc_1A172
0001A75C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A760                            
0001A760                            loc_1A172:
0001A760 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A766 6C00                       		bge.s	locret_1A190
0001A768 323C 001B                  		move.w	#$1B,d1
0001A76C 343C 0070                  		move.w	#$70,d2
0001A770 363C 0071                  		move.w	#$71,d3
0001A774 3828 0008                  		move.w	8(a0),d4
0001A778 4EF9 0000 FF10             		jmp	SolidObject
0001A77E                            ; ===========================================================================
0001A77E                            
0001A77E                            locret_1A190:
0001A77E 4E75                       		rts	
0001A780                            ; ===========================================================================
0001A780                            
0001A780                            loc_1A192:				; XREF: off_19E80
0001A780 217C 0001 831A 0004        		move.l	#Map_Eggman,4(a0)
0001A788 317C 0400 0002             		move.w	#$400,2(a0)
0001A78E 117C 0000 001C             		move.b	#0,$1C(a0)
0001A794 08E8 0000 0022             		bset	#0,$22(a0)
0001A79A 4EB9 0000 DB1A             		jsr	SpeedToPos
0001A7A0 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A7A6 6400                       		bcc.s	loc_1A1D0
0001A7A8 317C 0180 0010             		move.w	#$180,$10(a0)
0001A7AE 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001A7B4 117C 000F 0020             		move.b	#$F,$20(a0)
0001A7BA 5428 0034                  		addq.b	#2,$34(a0)
0001A7BE                            
0001A7BE                            loc_1A1D0:
0001A7BE 6000 FF8A                  		bra.w	loc_1A15C
0001A7C2                            ; ===========================================================================
0001A7C2                            
0001A7C2                            loc_1A1D4:				; XREF: off_19E80
0001A7C2 08E8 0000 0022             		bset	#0,$22(a0)
0001A7C8 4EB9 0000 DB1A             		jsr	SpeedToPos
0001A7CE 4A68 0030                  		tst.w	$30(a0)
0001A7D2 6600                       		bne.s	loc_1A1FC
0001A7D4 4A28 0020                  		tst.b	$20(a0)
0001A7D8 6600                       		bne.s	loc_1A216
0001A7DA 317C 001E 0030             		move.w	#$1E,$30(a0)
0001A7E0 303C 00AC                  		move.w	#$AC,d0
0001A7E4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A7EA                            
0001A7EA                            loc_1A1FC:
0001A7EA 5368 0030                  		subq.w	#1,$30(a0)
0001A7EE 6600                       		bne.s	loc_1A216
0001A7F0 4A28 0022                  		tst.b	$22(a0)
0001A7F4 6A00                       		bpl.s	loc_1A210
0001A7F6 317C 0060 0012             		move.w	#$60,$12(a0)
0001A7FC 6000                       		bra.s	loc_1A216
0001A7FE                            ; ===========================================================================
0001A7FE                            
0001A7FE                            loc_1A210:
0001A7FE 117C 000F 0020             		move.b	#$F,$20(a0)
0001A804                            
0001A804                            loc_1A216:
0001A804 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001A80A 6D00                       		blt.s	loc_1A23A
0001A80C 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001A812 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001A818 4278 D014                  		clr.w	($FFFFD014).w
0001A81C 4A68 0012                  		tst.w	$12(a0)
0001A820 6A00                       		bpl.s	loc_1A248
0001A822 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001A828                            
0001A828                            loc_1A23A:
0001A828 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001A82E 6D00                       		blt.s	loc_1A248
0001A830 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001A836                            
0001A836                            loc_1A248:
0001A836 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001A83C 6500                       		bcs.s	loc_1A260
0001A83E 4A28 0001                  		tst.b	1(a0)
0001A842 6B00                       		bmi.s	loc_1A260
0001A844 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001A84A 6000 FAF4                  		bra.w	Obj85_Delete
0001A84E                            ; ===========================================================================
0001A84E                            
0001A84E                            loc_1A260:
0001A84E 6000 FEFA                  		bra.w	loc_1A15C
0001A852                            ; ===========================================================================
0001A852                            
0001A852                            loc_1A264:				; XREF: Obj85_Index
0001A852 2268 0034                  		movea.l	$34(a0),a1
0001A856 1011                       		move.b	(a1),d0
0001A858 B010                       		cmp.b	(a0),d0
0001A85A 6600 FAE4                  		bne.w	Obj85_Delete
0001A85E 117C 0007 001C             		move.b	#7,$1C(a0)
0001A864 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A86A 6C00                       		bge.s	loc_1A280
0001A86C 6000                       		bra.s	loc_1A2A6
0001A86E                            ; ===========================================================================
0001A86E                            
0001A86E                            loc_1A280:
0001A86E 4A69 0010                  		tst.w	$10(a1)
0001A872 6700                       		beq.s	loc_1A28C
0001A874 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A87A                            
0001A87A                            loc_1A28C:
0001A87A 43FA DA4E                  		lea	Ani_Eggman(pc),a1
0001A87E 4EB9 0000 AC10             		jsr	AnimateSprite
0001A884                            
0001A884                            loc_1A296:
0001A884 2268 0034                  		movea.l	$34(a0),a1
0001A888 3169 0008 0008             		move.w	8(a1),8(a0)
0001A88E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A894                            
0001A894                            loc_1A2A6:
0001A894 2268 0034                  		movea.l	$34(a0),a1
0001A898 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A89E 7003                       		moveq	#3,d0
0001A8A0 C028 0022                  		and.b	$22(a0),d0
0001A8A4 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A8AA 8128 0001                  		or.b	d0,1(a0)
0001A8AE 4EF9 0000 DB40             		jmp	DisplaySprite
0001A8B4                            ; ===========================================================================
0001A8B4                            
0001A8B4                            loc_1A2C6:				; XREF: Obj85_Index
0001A8B4 2268 0034                  		movea.l	$34(a0),a1
0001A8B8 1011                       		move.b	(a1),d0
0001A8BA B010                       		cmp.b	(a0),d0
0001A8BC 6600 FA82                  		bne.w	Obj85_Delete
0001A8C0 0CA9 0001 831A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A8C8 6700                       		beq.s	loc_1A2E4
0001A8CA 117C 000A 001A             		move.b	#$A,$1A(a0)
0001A8D0 60C2                       		bra.s	loc_1A2A6
0001A8D2                            ; ===========================================================================
0001A8D2                            
0001A8D2                            loc_1A2E4:
0001A8D2 117C 0001 001C             		move.b	#1,$1C(a0)
0001A8D8 4A29 0021                  		tst.b	$21(a1)
0001A8DC 6F00                       		ble.s	loc_1A312
0001A8DE 117C 0006 001C             		move.b	#6,$1C(a0)
0001A8E4 217C 0001 831A 0004        		move.l	#Map_Eggman,4(a0)
0001A8EC 317C 0400 0002             		move.w	#$400,2(a0)
0001A8F2 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001A8F6 4EB9 0000 AC10             		jsr	AnimateSprite
0001A8FC 6000 FF86                  		bra.w	loc_1A296
0001A900                            ; ===========================================================================
0001A900                            
0001A900                            loc_1A312:
0001A900 4A28 0001                  		tst.b	1(a0)
0001A904 6A00 FA3A                  		bpl.w	Obj85_Delete
0001A908 6100 D53C                  		bsr.w	BossDefeated
0001A90C 117C 0002 0018             		move.b	#2,$18(a0)
0001A912 117C 0000 001C             		move.b	#0,$1C(a0)
0001A918 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001A920 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001A926 43FA 0000                  		lea	Ani_obj85(pc),a1
0001A92A 4EB9 0000 AC10             		jsr	AnimateSprite
0001A930 6000 FF52                  		bra.w	loc_1A296
0001A934                            ; ===========================================================================
0001A934                            
0001A934                            loc_1A346:				; XREF: Obj85_Index
0001A934 08E8 0000 0022             		bset	#0,$22(a0)
0001A93A 2268 0034                  		movea.l	$34(a0),a1
0001A93E 0CA9 0001 831A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A946 6700                       		beq.s	loc_1A35E
0001A948 6000 FF4A                  		bra.w	loc_1A2A6
0001A94C                            ; ===========================================================================
0001A94C                            
0001A94C                            loc_1A35E:
0001A94C 3169 0008 0008             		move.w	8(a1),8(a0)
0001A952 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A958 4A28 001E                  		tst.b	$1E(a0)
0001A95C 6600                       		bne.s	loc_1A376
0001A95E 117C 0014 001E             		move.b	#$14,$1E(a0)
0001A964                            
0001A964                            loc_1A376:
0001A964 5328 001E                  		subq.b	#1,$1E(a0)
0001A968 6E00                       		bgt.s	loc_1A38A
0001A96A 5228 001A                  		addq.b	#1,$1A(a0)
0001A96E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001A974 6E00 F9CA                  		bgt.w	Obj85_Delete
0001A978                            
0001A978                            loc_1A38A:
0001A978 6000 FF0A                  		bra.w	loc_1A296
0001A97C                            ; ===========================================================================
0001A97C                            
0001A97C                            loc_1A38E:				; XREF: Obj85_Index
0001A97C 117C 000B 001A             		move.b	#$B,$1A(a0)
0001A982 3038 D008                  		move.w	($FFFFD008).w,d0
0001A986 9068 0008                  		sub.w	8(a0),d0
0001A98A 6500                       		bcs.s	loc_1A3A6
0001A98C 4A28 0001                  		tst.b	1(a0)
0001A990 6A00 F9AE                  		bpl.w	Obj85_Delete
0001A994                            
0001A994                            loc_1A3A6:
0001A994 4EF9 0000 DB40             		jmp	DisplaySprite
0001A99A                            ; ===========================================================================
0001A99A                            
0001A99A                            loc_1A3AC:				; XREF: Obj85_Index
0001A99A 117C 0000 001A             		move.b	#0,$1A(a0)
0001A9A0 08E8 0000 0022             		bset	#0,$22(a0)
0001A9A6 2268 0034                  		movea.l	$34(a0),a1
0001A9AA 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A9B0 6600                       		bne.s	loc_1A3D0
0001A9B2 0CA9 0001 831A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A9BA 6700 F984                  		beq.w	Obj85_Delete
0001A9BE                            
0001A9BE                            loc_1A3D0:
0001A9BE 6000 FED4                  		bra.w	loc_1A2A6
0001A9C2                            ; ===========================================================================
0001A9C2                            Ani_obj85:
0001A9C2                            	include "_anim\obj85.asm"
0001A9C2                            ; ---------------------------------------------------------------------------
0001A9C2                            ; Animation script - Eggman (FZ)
0001A9C2                            ; ---------------------------------------------------------------------------
0001A9C2 0000                       		dc.w byte_1A3D6-Ani_obj85
0001A9C4 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001A9C8                            		even
0001A9C8                            		even
0001A9C8                            
0001A9C8                            Map_Eggman2:
0001A9C8                            	include "_maps\Eggman2.asm"
0001A9C8                            ; ---------------------------------------------------------------------------
0001A9C8                            ; Sprite mappings - Eggman (FZ)
0001A9C8                            ; ---------------------------------------------------------------------------
0001A9C8 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001A9CA 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001A9CC 06                         byte_1A3DE:	dc.b 6
0001A9CD E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001A9D2 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001A9D7 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A9DC FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A9E1 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A9E6 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A9EB 06                         byte_1A3FD:	dc.b 6
0001A9EC E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001A9F1 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001A9F6 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A9FB FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AA00 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AA05 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AA0A                            		even
0001AA0A                            		even
0001AA0A                            
0001AA0A                            Map_FZBoss:
0001AA0A                            	include "_maps\FZ boss.asm"
0001AA0A                            ; ---------------------------------------------------------------------------
0001AA0A                            ; Sprite mappings - boss (FZ)
0001AA0A                            ; ---------------------------------------------------------------------------
0001AA0A 0000                       		dc.w byte_1A422-Map_FZBoss
0001AA0C 0000                       		dc.w byte_1A42D-Map_FZBoss
0001AA0E 0000                       		dc.w byte_1A43D-Map_FZBoss
0001AA10 02                         byte_1A422:	dc.b 2
0001AA11 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AA16 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AA1B 03                         byte_1A42D:	dc.b 3
0001AA1C 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AA21 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AA26 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AA2B 02                         byte_1A43D:	dc.b 2
0001AA2C 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AA31 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AA36                            		even
0001AA36                            		even
0001AA36                            
0001AA36                            ; ===========================================================================
0001AA36                            
0001AA36                            Obj84_Delete:
0001AA36 4EF9 0000 DB7C             		jmp	DeleteObject
0001AA3C                            ; ===========================================================================
0001AA3C                            ; ---------------------------------------------------------------------------
0001AA3C                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AA3C                            ; ---------------------------------------------------------------------------
0001AA3C                            
0001AA3C                            Obj84:					; XREF: Obj_Index
0001AA3C 7000                       		moveq	#0,d0
0001AA3E 1028 0024                  		move.b	$24(a0),d0
0001AA42 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AA46 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AA4A                            ; ===========================================================================
0001AA4A 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AA4C 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AA4E 0000                       		dc.w loc_1A57E-Obj84_Index
0001AA50                            
0001AA50 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AA54 2550 0620                  		dc.w $2550, $620
0001AA58 2490 04C0                  		dc.w $2490, $4C0
0001AA5C 2510 04C0                  		dc.w $2510, $4C0
0001AA60                            ; ===========================================================================
0001AA60                            
0001AA60                            Obj84_Main:				; XREF: Obj84_Index
0001AA60 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AA64 7000                       		moveq	#0,d0
0001AA66 1028 0028                  		move.b	$28(a0),d0
0001AA6A D040                       		add.w	d0,d0
0001AA6C D2C0                       		adda.w	d0,a1
0001AA6E 117C 0004 0001             		move.b	#4,1(a0)
0001AA74 08E8 0007 0001             		bset	#7,1(a0)
0001AA7A 08E8 0004 0001             		bset	#4,1(a0)
0001AA80 317C 0300 0002             		move.w	#$300,2(a0)
0001AA86 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AA8E 3159 0008                  		move.w	(a1)+,8(a0)
0001AA92 3151 000C                  		move.w	(a1),$C(a0)
0001AA96 3159 0038                  		move.w	(a1)+,$38(a0)
0001AA9A 117C 0020 0016             		move.b	#$20,$16(a0)
0001AAA0 117C 0060 0017             		move.b	#$60,$17(a0)
0001AAA6 117C 0020 0019             		move.b	#$20,$19(a0)
0001AAAC 117C 0060 0016             		move.b	#$60,$16(a0)
0001AAB2 117C 0003 0018             		move.b	#3,$18(a0)
0001AAB8 5428 0024                  		addq.b	#2,$24(a0)
0001AABC                            
0001AABC                            loc_1A4CE:				; XREF: Obj84_Index
0001AABC 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AAC2 6F00                       		ble.s	loc_1A4DC
0001AAC4 08E8 0001 0001             		bset	#1,1(a0)
0001AACA                            
0001AACA                            loc_1A4DC:
0001AACA 42A8 003C                  		clr.l	$3C(a0)
0001AACE 4A28 0029                  		tst.b	$29(a0)
0001AAD2 6700                       		beq.s	loc_1A4EA
0001AAD4 5428 0024                  		addq.b	#2,$24(a0)
0001AAD8                            
0001AAD8                            loc_1A4EA:
0001AAD8 2028 003C                  		move.l	$3C(a0),d0
0001AADC 2228 0038                  		move.l	$38(a0),d1
0001AAE0 D280                       		add.l	d0,d1
0001AAE2 4841                       		swap	d1
0001AAE4 3141 000C                  		move.w	d1,$C(a0)
0001AAE8 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001AAEE 6600                       		bne.s	loc_1A524
0001AAF0 4A68 0030                  		tst.w	$30(a0)
0001AAF4 6A00                       		bpl.s	loc_1A524
0001AAF6 70F6                       		moveq	#-$A,d0
0001AAF8 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AAFE 6F00                       		ble.s	loc_1A514
0001AB00 700E                       		moveq	#$E,d0
0001AB02                            
0001AB02                            loc_1A514:
0001AB02 D240                       		add.w	d0,d1
0001AB04 2268 0034                  		movea.l	$34(a0),a1
0001AB08 3341 000C                  		move.w	d1,$C(a1)
0001AB0C 3368 0008 0008             		move.w	8(a0),8(a1)
0001AB12                            
0001AB12                            loc_1A524:
0001AB12 323C 002B                  		move.w	#$2B,d1
0001AB16 343C 0060                  		move.w	#$60,d2
0001AB1A 363C 0061                  		move.w	#$61,d3
0001AB1E 3828 0008                  		move.w	8(a0),d4
0001AB22 4EB9 0000 FF10             		jsr	SolidObject
0001AB28 7000                       		moveq	#0,d0
0001AB2A 3228 003C                  		move.w	$3C(a0),d1
0001AB2E 6A00                       		bpl.s	loc_1A550
0001AB30 4441                       		neg.w	d1
0001AB32 5141                       		subq.w	#8,d1
0001AB34 6500                       		bcs.s	loc_1A55C
0001AB36 5200                       		addq.b	#1,d0
0001AB38 E841                       		asr.w	#4,d1
0001AB3A D041                       		add.w	d1,d0
0001AB3C 6000                       		bra.s	loc_1A55C
0001AB3E                            ; ===========================================================================
0001AB3E                            
0001AB3E                            loc_1A550:
0001AB3E 0441 0027                  		subi.w	#$27,d1
0001AB42 6500                       		bcs.s	loc_1A55C
0001AB44 5200                       		addq.b	#1,d0
0001AB46 E841                       		asr.w	#4,d1
0001AB48 D041                       		add.w	d1,d0
0001AB4A                            
0001AB4A                            loc_1A55C:
0001AB4A 1140 001A                  		move.b	d0,$1A(a0)
0001AB4E 3038 D008                  		move.w	($FFFFD008).w,d0
0001AB52 9068 0008                  		sub.w	8(a0),d0
0001AB56 6B00                       		bmi.s	loc_1A578
0001AB58 0440 0140                  		subi.w	#$140,d0
0001AB5C 6B00                       		bmi.s	loc_1A578
0001AB5E 4A28 0001                  		tst.b	1(a0)
0001AB62 6A00 FED2                  		bpl.w	Obj84_Delete
0001AB66                            
0001AB66                            loc_1A578:
0001AB66 4EF9 0000 DB40             		jmp	DisplaySprite
0001AB6C                            ; ===========================================================================
0001AB6C                            
0001AB6C                            loc_1A57E:				; XREF: Obj84_Index
0001AB6C 7000                       		moveq	#0,d0
0001AB6E 1028 0028                  		move.b	$28(a0),d0
0001AB72 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001AB76 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001AB7A 6000 FF5C                  		bra.w	loc_1A4EA
0001AB7E                            ; ===========================================================================
0001AB7E 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001AB80 0000                       		dc.w loc_1A598-off_1A590
0001AB82 0000                       		dc.w loc_1A604-off_1A590
0001AB84 0000                       		dc.w loc_1A604-off_1A590
0001AB86                            ; ===========================================================================
0001AB86                            
0001AB86                            loc_1A598:				; XREF: off_1A590
0001AB86 4A28 0029                  		tst.b	$29(a0)
0001AB8A 6600                       		bne.s	loc_1A5D4
0001AB8C 2268 0034                  		movea.l	$34(a0),a1
0001AB90 4A29 0021                  		tst.b	$21(a1)
0001AB94 6600                       		bne.s	loc_1A5B4
0001AB96 6100 D2AE                  		bsr.w	BossDefeated
0001AB9A 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001ABA2                            
0001ABA2                            loc_1A5B4:
0001ABA2 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001ABAA 6400                       		bcc.s	locret_1A602
0001ABAC 42A8 003C                  		clr.l	$3C(a0)
0001ABB0 2268 0034                  		movea.l	$34(a0),a1
0001ABB4 5369 0032                  		subq.w	#1,$32(a1)
0001ABB8 4269 0030                  		clr.w	$30(a1)
0001ABBC 5528 0024                  		subq.b	#2,$24(a0)
0001ABC0 4E75                       		rts	
0001ABC2                            ; ===========================================================================
0001ABC2                            
0001ABC2                            loc_1A5D4:
0001ABC2 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001ABC8 6C00                       		bge.s	loc_1A5E4
0001ABCA 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001ABD2                            
0001ABD2                            loc_1A5E4:
0001ABD2 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001ABDA 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001ABE0 6E00                       		bgt.s	locret_1A602
0001ABE2 4268 003E                  		clr.w	$3E(a0)
0001ABE6 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001ABEC 4228 0029                  		clr.b	$29(a0)
0001ABF0                            
0001ABF0                            locret_1A602:
0001ABF0 4E75                       		rts	
0001ABF2                            ; ===========================================================================
0001ABF2                            
0001ABF2                            loc_1A604:				; XREF: off_1A590
0001ABF2 08E8 0001 0001             		bset	#1,1(a0)
0001ABF8 4A28 0029                  		tst.b	$29(a0)
0001ABFC 6600                       		bne.s	loc_1A646
0001ABFE 2268 0034                  		movea.l	$34(a0),a1
0001AC02 4A29 0021                  		tst.b	$21(a1)
0001AC06 6600                       		bne.s	loc_1A626
0001AC08 6100 D23C                  		bsr.w	BossDefeated
0001AC0C 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001AC14                            
0001AC14                            loc_1A626:
0001AC14 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001AC1C 6400                       		bcc.s	locret_1A674
0001AC1E 42A8 003C                  		clr.l	$3C(a0)
0001AC22 2268 0034                  		movea.l	$34(a0),a1
0001AC26 5369 0032                  		subq.w	#1,$32(a1)
0001AC2A 4269 0030                  		clr.w	$30(a1)
0001AC2E 5528 0024                  		subq.b	#2,$24(a0)
0001AC32 4E75                       		rts	
0001AC34                            ; ===========================================================================
0001AC34                            
0001AC34                            loc_1A646:
0001AC34 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AC3A 6D00                       		blt.s	loc_1A656
0001AC3C 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AC44                            
0001AC44                            loc_1A656:
0001AC44 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AC4C 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AC52 6D00                       		blt.s	locret_1A674
0001AC54 4268 003E                  		clr.w	$3E(a0)
0001AC58 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AC5E 4228 0029                  		clr.b	$29(a0)
0001AC62                            
0001AC62                            locret_1A674:
0001AC62 4E75                       		rts	
0001AC64                            ; ===========================================================================
0001AC64                            ; ---------------------------------------------------------------------------
0001AC64                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AC64                            ; ---------------------------------------------------------------------------
0001AC64                            Map_obj84:
0001AC64                            	include "_maps\obj84.asm"
0001AC64                            ; ---------------------------------------------------------------------------
0001AC64                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AC64                            ; ---------------------------------------------------------------------------
0001AC64 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AC68 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001AC6C 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001AC70 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AC74 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AC78 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001AC7C 06                         byte_1A68E:	dc.b 6
0001AC7D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AC82 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AC87 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AC8C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AC91 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AC96 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AC9B 08                         byte_1A6AD:	dc.b 8
0001AC9C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ACA1 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ACA6 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001ACAB B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ACB0 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ACB5 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ACBA D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ACBF D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ACC4 0A                         byte_1A6D6:	dc.b $A
0001ACC5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ACCA A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ACCF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001ACD4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ACD9 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ACDE B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ACE3 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ACE8 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ACED F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001ACF2 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001ACF7 0C                         byte_1A709:	dc.b $C
0001ACF8 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ACFD A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AD02 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AD07 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AD0C B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AD11 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AD16 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AD1B D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AD20 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AD25 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AD2A 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AD2F 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AD34 0D                         byte_1A746:	dc.b $D
0001AD35 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AD3A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AD3F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AD44 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AD49 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AD4E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AD53 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AD58 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AD5D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AD62 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AD67 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AD6C 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AD71 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AD76 0E                         byte_1A788:	dc.b $E
0001AD77 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AD7C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AD81 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AD86 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AD8B B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AD90 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AD95 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AD9A D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AD9F F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001ADA4 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001ADA9 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001ADAE 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001ADB3 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001ADB8 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001ADBD 02                         byte_1A7CF:	dc.b 2
0001ADBE F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001ADC3 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001ADC8                            		even
0001ADC8                            		even
0001ADC8                            
0001ADC8                            ; ===========================================================================
0001ADC8                            ; ---------------------------------------------------------------------------
0001ADC8                            ; Object 86 - energy balls (FZ)
0001ADC8                            ; ---------------------------------------------------------------------------
0001ADC8                            
0001ADC8                            Obj86:					; XREF: Obj_Index
0001ADC8 7000                       		moveq	#0,d0
0001ADCA 1028 0024                  		move.b	$24(a0),d0
0001ADCE 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001ADD2 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001ADD6                            ; ===========================================================================
0001ADD6 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001ADD8 0000                       		dc.w Obj86_Generator-Obj86_Index
0001ADDA 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001ADDC 0000                       		dc.w loc_1A962-Obj86_Index
0001ADDE 0000                       		dc.w loc_1A982-Obj86_Index
0001ADE0                            ; ===========================================================================
0001ADE0                            
0001ADE0                            Obj86_Main:				; XREF: Obj86_Index
0001ADE0 317C 2588 0008             		move.w	#$2588,8(a0)
0001ADE6 317C 053C 000C             		move.w	#$53C,$C(a0)
0001ADEC 317C 0300 0002             		move.w	#$300,2(a0)
0001ADF2 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001ADFA 117C 0000 001C             		move.b	#0,$1C(a0)
0001AE00 117C 0003 0018             		move.b	#3,$18(a0)
0001AE06 117C 0008 0017             		move.b	#8,$17(a0)
0001AE0C 117C 0008 0016             		move.b	#8,$16(a0)
0001AE12 117C 0004 0001             		move.b	#4,1(a0)
0001AE18 08E8 0007 0001             		bset	#7,1(a0)
0001AE1E 5428 0024                  		addq.b	#2,$24(a0)
0001AE22                            
0001AE22                            Obj86_Generator:			; XREF: Obj86_Index
0001AE22 2268 0034                  		movea.l	$34(a0),a1
0001AE26 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001AE2C 6600                       		bne.s	loc_1A850
0001AE2E 10BC 003F                  		move.b	#$3F,(a0)
0001AE32 117C 0000 0024             		move.b	#0,$24(a0)
0001AE38 4EF9 0000 DB40             		jmp	DisplaySprite
0001AE3E                            ; ===========================================================================
0001AE3E                            
0001AE3E                            loc_1A850:
0001AE3E 117C 0000 001C             		move.b	#0,$1C(a0)
0001AE44 4A28 0029                  		tst.b	$29(a0)
0001AE48 6700                       		beq.s	loc_1A86C
0001AE4A 5428 0024                  		addq.b	#2,$24(a0)
0001AE4E 117C 0001 001C             		move.b	#1,$1C(a0)
0001AE54 117C 003E 0028             		move.b	#$3E,$28(a0)
0001AE5A                            
0001AE5A                            loc_1A86C:
0001AE5A 323C 0013                  		move.w	#$13,d1
0001AE5E 343C 0008                  		move.w	#8,d2
0001AE62 363C 0011                  		move.w	#$11,d3
0001AE66 3828 0008                  		move.w	8(a0),d4
0001AE6A 4EB9 0000 FF10             		jsr	SolidObject
0001AE70 3038 D008                  		move.w	($FFFFD008).w,d0
0001AE74 9068 0008                  		sub.w	8(a0),d0
0001AE78 6B00                       		bmi.s	loc_1A89A
0001AE7A 0440 0140                  		subi.w	#$140,d0
0001AE7E 6B00                       		bmi.s	loc_1A89A
0001AE80 4A28 0001                  		tst.b	1(a0)
0001AE84 6A00 FBB0                  		bpl.w	Obj84_Delete
0001AE88                            
0001AE88                            loc_1A89A:
0001AE88 43FA 0000                  		lea	Ani_obj86(pc),a1
0001AE8C 4EB9 0000 AC10             		jsr	AnimateSprite
0001AE92 4EF9 0000 DB40             		jmp	DisplaySprite
0001AE98                            ; ===========================================================================
0001AE98                            
0001AE98                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001AE98 4A28 0029                  		tst.b	$29(a0)
0001AE9C 6700 0000                  		beq.w	loc_1A954
0001AEA0 4228 0029                  		clr.b	$29(a0)
0001AEA4 D068 0030                  		add.w	$30(a0),d0
0001AEA8 0240 001E                  		andi.w	#$1E,d0
0001AEAC D4C0                       		adda.w	d0,a2
0001AEAE 5868 0030                  		addq.w	#4,$30(a0)
0001AEB2 4268 0032                  		clr.w	$32(a0)
0001AEB6 7403                       		moveq	#3,d2
0001AEB8                            
0001AEB8                            Obj86_Loop:
0001AEB8 4EB9 0000 DFDC             		jsr	SingleObjLoad2
0001AEBE 6600 0000                  		bne.w	loc_1A954
0001AEC2 12BC 0086                  		move.b	#$86,(a1)
0001AEC6 3368 0008 0008             		move.w	8(a0),8(a1)
0001AECC 337C 053C 000C             		move.w	#$53C,$C(a1)
0001AED2 137C 0008 0024             		move.b	#8,$24(a1)
0001AED8 337C 2300 0002             		move.w	#$2300,2(a1)
0001AEDE 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001AEE6 137C 000C 0016             		move.b	#$C,$16(a1)
0001AEEC 137C 000C 0017             		move.b	#$C,$17(a1)
0001AEF2 137C 0000 0020             		move.b	#0,$20(a1)
0001AEF8 137C 0003 0018             		move.b	#3,$18(a1)
0001AEFE 337C 003E 0028             		move.w	#$3E,$28(a1)
0001AF04 137C 0004 0001             		move.b	#4,1(a1)
0001AF0A 08E9 0007 0001             		bset	#7,1(a1)
0001AF10 2348 0034                  		move.l	a0,$34(a1)
0001AF14 4EB9 0000 2BC2             		jsr	(RandomNumber).l
0001AF1A 3228 0032                  		move.w	$32(a0),d1
0001AF1E C3FC FFB1                  		muls.w	#-$4F,d1
0001AF22 0641 2578                  		addi.w	#$2578,d1
0001AF26 0240 001F                  		andi.w	#$1F,d0
0001AF2A 0440 0010                  		subi.w	#$10,d0
0001AF2E D041                       		add.w	d1,d0
0001AF30 3340 0030                  		move.w	d0,$30(a1)
0001AF34 5268 0032                  		addq.w	#1,$32(a0)
0001AF38 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001AF3E 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001AF42                            
0001AF42                            loc_1A954:
0001AF42 4A68 0032                  		tst.w	$32(a0)
0001AF46 6600                       		bne.s	loc_1A95E
0001AF48 5428 0024                  		addq.b	#2,$24(a0)
0001AF4C                            
0001AF4C                            loc_1A95E:
0001AF4C 6000 FF0C                  		bra.w	loc_1A86C
0001AF50                            ; ===========================================================================
0001AF50                            
0001AF50                            loc_1A962:				; XREF: Obj86_Index
0001AF50 117C 0002 001C             		move.b	#2,$1C(a0)
0001AF56 4A68 0038                  		tst.w	$38(a0)
0001AF5A 6600                       		bne.s	loc_1A97E
0001AF5C 117C 0002 0024             		move.b	#2,$24(a0)
0001AF62 2268 0034                  		movea.l	$34(a0),a1
0001AF66 337C FFFF 0032             		move.w	#-1,$32(a1)
0001AF6C                            
0001AF6C                            loc_1A97E:
0001AF6C 6000 FEEC                  		bra.w	loc_1A86C
0001AF70                            ; ===========================================================================
0001AF70                            
0001AF70                            loc_1A982:				; XREF: Obj86_Index
0001AF70 7000                       		moveq	#0,d0
0001AF72 1028 0025                  		move.b	$25(a0),d0
0001AF76 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001AF7A 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001AF7E 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001AF82 4EB9 0000 AC10             		jsr	AnimateSprite
0001AF88 4EF9 0000 DB40             		jmp	DisplaySprite
0001AF8E                            ; ===========================================================================
0001AF8E 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001AF90 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001AF92 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001AF94                            ; ===========================================================================
0001AF94                            
0001AF94                            loc_1A9A6:				; XREF: Obj86_Index2
0001AF94 3028 0030                  		move.w	$30(a0),d0
0001AF98 9068 0008                  		sub.w	8(a0),d0
0001AF9C E940                       		asl.w	#4,d0
0001AF9E 3140 0010                  		move.w	d0,$10(a0)
0001AFA2 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AFA8 5428 0025                  		addq.b	#2,$25(a0)
0001AFAC 4E75                       		rts	
0001AFAE                            ; ===========================================================================
0001AFAE                            
0001AFAE                            loc_1A9C0:				; XREF: Obj86_Index2
0001AFAE 4A68 0010                  		tst.w	$10(a0)
0001AFB2 6700                       		beq.s	loc_1A9E6
0001AFB4 4EB9 0000 DB1A             		jsr	SpeedToPos
0001AFBA 3028 0008                  		move.w	8(a0),d0
0001AFBE 9068 0030                  		sub.w	$30(a0),d0
0001AFC2 6400                       		bcc.s	loc_1A9E6
0001AFC4 4268 0010                  		clr.w	$10(a0)
0001AFC8 D168 0008                  		add.w	d0,8(a0)
0001AFCC 2268 0034                  		movea.l	$34(a0),a1
0001AFD0 5369 0032                  		subq.w	#1,$32(a1)
0001AFD4                            
0001AFD4                            loc_1A9E6:
0001AFD4 117C 0000 001C             		move.b	#0,$1C(a0)
0001AFDA 5368 0028                  		subq.w	#1,$28(a0)
0001AFDE 6600                       		bne.s	locret_1AA1C
0001AFE0 5428 0025                  		addq.b	#2,$25(a0)
0001AFE4 117C 0001 001C             		move.b	#1,$1C(a0)
0001AFEA 117C 009A 0020             		move.b	#$9A,$20(a0)
0001AFF0 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AFF6 7000                       		moveq	#0,d0
0001AFF8 3038 D008                  		move.w	($FFFFD008).w,d0
0001AFFC 9068 0008                  		sub.w	8(a0),d0
0001B000 3140 0010                  		move.w	d0,$10(a0)
0001B004 317C 0140 0012             		move.w	#$140,$12(a0)
0001B00A                            
0001B00A                            locret_1AA1C:
0001B00A 4E75                       		rts	
0001B00C                            ; ===========================================================================
0001B00C                            
0001B00C                            loc_1AA1E:				; XREF: Obj86_Index2
0001B00C 4EB9 0000 DB1A             		jsr	SpeedToPos
0001B012 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B018 6400                       		bcc.s	loc_1AA34
0001B01A 5368 0028                  		subq.w	#1,$28(a0)
0001B01E 6700                       		beq.s	loc_1AA34
0001B020 4E75                       		rts	
0001B022                            ; ===========================================================================
0001B022                            
0001B022                            loc_1AA34:
0001B022 2268 0034                  		movea.l	$34(a0),a1
0001B026 5369 0038                  		subq.w	#1,$38(a1)
0001B02A 6000 FA0A                  		bra.w	Obj84_Delete
0001B02E                            ; ===========================================================================
0001B02E                            Ani_obj86:
0001B02E                            	include "_anim\obj86.asm"
0001B02E                            ; ---------------------------------------------------------------------------
0001B02E                            ; Animation script - energy ball launcher (FZ)
0001B02E                            ; ---------------------------------------------------------------------------
0001B02E 0000                       		dc.w byte_1AA46-Ani_obj86
0001B030 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B032 0000                       		dc.w byte_1AA50-Ani_obj86
0001B034 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B038 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B03E 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B044                            		even
0001B044                            		even
0001B044                            
0001B044                            ; ---------------------------------------------------------------------------
0001B044                            ; Sprite mappings - energy ball	launcher (FZ)
0001B044                            ; ---------------------------------------------------------------------------
0001B044                            Map_obj86:
0001B044                            	include "_maps\obj86.asm"
0001B044                            ; ---------------------------------------------------------------------------
0001B044                            ; Sprite mappings - energy ball	launcher (FZ)
0001B044                            ; ---------------------------------------------------------------------------
0001B044 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B048 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B04C 01                         byte_1AA5E:	dc.b 1
0001B04D F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B052 01                         byte_1AA64:	dc.b 1
0001B053 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B058 01                         byte_1AA6A:	dc.b 1
0001B059 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B05E 01                         byte_1AA70:	dc.b 1
0001B05F F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B064                            		even
0001B064                            		even
0001B064                            
0001B064                            Ani_obj86a:
0001B064                            	include "_anim\obj86a.asm"
0001B064                            ; ---------------------------------------------------------------------------
0001B064                            ; Animation script - energy balls (FZ)
0001B064                            ; ---------------------------------------------------------------------------
0001B064 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B066 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B068 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B077 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B086 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B08A 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B094                            		even
0001B094                            		even
0001B094                            
0001B094                            ; ---------------------------------------------------------------------------
0001B094                            ; Sprite mappings - energy balls (FZ)
0001B094                            ; ---------------------------------------------------------------------------
0001B094                            Map_obj86a:
0001B094                            	include "_maps\obj86a.asm"
0001B094                            ; ---------------------------------------------------------------------------
0001B094                            ; Sprite mappings - energy balls (FZ)
0001B094                            ; ---------------------------------------------------------------------------
0001B094 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B098 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B09C 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B0A0 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B0A4 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B0A8 0000                       		dc.w byte_1AB20-Map_obj86a
0001B0AA 02                         byte_1AABC:	dc.b 2
0001B0AB F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B0B0 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B0B5 02                         byte_1AAC7:	dc.b 2
0001B0B6 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B0BB F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B0C0 02                         byte_1AAD2:	dc.b 2
0001B0C1 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B0C6 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B0CB 02                         byte_1AADD:	dc.b 2
0001B0CC F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B0D1 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B0D6 02                         byte_1AAE8:	dc.b 2
0001B0D7 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B0DC 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B0E1 02                         byte_1AAF3:	dc.b 2
0001B0E2 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B0E7 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B0EC 01                         byte_1AAFE:	dc.b 1
0001B0ED F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B0F2 01                         byte_1AB04:	dc.b 1
0001B0F3 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B0F8 02                         byte_1AB0A:	dc.b 2
0001B0F9 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B0FE 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B103 02                         byte_1AB15:	dc.b 2
0001B104 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B109 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B10E 00                         byte_1AB20:	dc.b 0
0001B110 00                         		even
0001B110 00                         		even
0001B110                            
0001B110                            ; ===========================================================================
0001B110                            ; ---------------------------------------------------------------------------
0001B110                            ; Object 3E - prison capsule
0001B110                            ; ---------------------------------------------------------------------------
0001B110                            
0001B110                            Obj3E:					; XREF: Obj_Index
0001B110 7000                       		moveq	#0,d0
0001B112 1028 0024                  		move.b	$24(a0),d0
0001B116 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B11A 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B11E 3028 0008                  		move.w	8(a0),d0
0001B122 0240 FF80                  		andi.w	#$FF80,d0
0001B126 3238 F700                  		move.w	($FFFFF700).w,d1
0001B12A 0441 0080                  		subi.w	#$80,d1
0001B12E 0241 FF80                  		andi.w	#$FF80,d1
0001B132 9041                       		sub.w	d1,d0
0001B134 0C40 0280                  		cmpi.w	#$280,d0
0001B138 6200                       		bhi.s	Obj3E_Delete
0001B13A 4EF9 0000 DB40             		jmp	DisplaySprite
0001B140                            ; ===========================================================================
0001B140                            
0001B140                            Obj3E_Delete:
0001B140 4EF9 0000 DB7C             		jmp	DeleteObject
0001B146                            ; ===========================================================================
0001B146 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B148 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B14A 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B14C 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B14E 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B150 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B152 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B154 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B156                            
0001B156 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B15A 040C 0501                  		dc.b 4,	$C, 5, 1
0001B15E 0610 0403                  		dc.b 6,	$10, 4,	3
0001B162 0810 0305                  		dc.b 8,	$10, 3,	5
0001B166                            ; ===========================================================================
0001B166                            
0001B166                            Obj3E_Main:				; XREF: Obj3E_Index
0001B166 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B16E 317C 049D 0002             		move.w	#$49D,2(a0)
0001B174 117C 0004 0001             		move.b	#4,1(a0)
0001B17A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B180 7000                       		moveq	#0,d0
0001B182 1028 0028                  		move.b	$28(a0),d0
0001B186 E548                       		lsl.w	#2,d0
0001B188 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B18C 1159 0024                  		move.b	(a1)+,$24(a0)
0001B190 1159 0019                  		move.b	(a1)+,$19(a0)
0001B194 1159 0018                  		move.b	(a1)+,$18(a0)
0001B198 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B19C 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B1A0 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B1A2 117C 0006 0020             		move.b	#6,$20(a0)
0001B1A8 117C 0008 0021             		move.b	#8,$21(a0)
0001B1AE                            
0001B1AE                            Obj3E_Not02:
0001B1AE 4E75                       		rts	
0001B1B0                            ; ===========================================================================
0001B1B0                            
0001B1B0                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B1B0 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B1B6 6700                       		beq.s	Obj3E_ChkOpened
0001B1B8 323C 002B                  		move.w	#$2B,d1
0001B1BC 343C 0018                  		move.w	#$18,d2
0001B1C0 363C 0018                  		move.w	#$18,d3
0001B1C4 3828 0008                  		move.w	8(a0),d4
0001B1C8 4EF9 0000 FF10             		jmp	SolidObject
0001B1CE                            ; ===========================================================================
0001B1CE                            
0001B1CE                            Obj3E_ChkOpened:
0001B1CE 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B1D2 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B1D4 4228 0025                  		clr.b	$25(a0)
0001B1D8 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B1DE 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B1E4                            
0001B1E4                            Obj3E_DoOpen:
0001B1E4 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B1EA 4E75                       		rts	
0001B1EC                            ; ===========================================================================
0001B1EC                            
0001B1EC                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B1EC 323C 0017                  		move.w	#$17,d1
0001B1F0 343C 0008                  		move.w	#8,d2
0001B1F4 363C 0008                  		move.w	#8,d3
0001B1F8 3828 0008                  		move.w	8(a0),d4
0001B1FC 4EB9 0000 FF10             		jsr	SolidObject
0001B202 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B208 4EB9 0000 AC10             		jsr	AnimateSprite
0001B20E 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B214 4A28 0025                  		tst.b	$25(a0)
0001B218 6700                       		beq.s	locret_1AC60
0001B21A 5068 000C                  		addq.w	#8,$C(a0)
0001B21E 117C 000A 0024             		move.b	#$A,$24(a0)
0001B224 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B22A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B22E 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B232 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B238 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B23E 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B240 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B246 6000                       		bra.s	Obj3E_ContinueCode
0001B248                            
0001B248                            Obj3E_MoveLeft:
0001B248 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B24E                            
0001B24E                            Obj3E_ContinueCode:
0001B24E 4228 0025                  		clr.b	$25(a0)
0001B252 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B258 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B25E                            
0001B25E                            locret_1AC60:
0001B25E 4E75                       		rts	
0001B260                            ; ===========================================================================
0001B260                            
0001B260                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B260 7007                       		moveq	#7,d0
0001B262 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B266 6600                       		bne.s	loc_1ACA0
0001B268 4EB9 0000 DFC6             		jsr	SingleObjLoad
0001B26E 6600                       		bne.s	loc_1ACA0
0001B270 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B274 3368 0008 0008             		move.w	8(a0),8(a1)
0001B27A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B280 4EB9 0000 2BC2             		jsr	(RandomNumber).l
0001B286 7200                       		moveq	#0,d1
0001B288 1200                       		move.b	d0,d1
0001B28A E409                       		lsr.b	#2,d1
0001B28C 0441 0020                  		subi.w	#$20,d1
0001B290 D369 0008                  		add.w	d1,8(a1)
0001B294 E048                       		lsr.w	#8,d0
0001B296 E608                       		lsr.b	#3,d0
0001B298 D169 000C                  		add.w	d0,$C(a1)
0001B29C                            
0001B29C                            loc_1ACA0:
0001B29C 5368 001E                  		subq.w	#1,$1E(a0)
0001B2A0 6700                       		beq.s	Obj3E_MakeAnimal
0001B2A2 4E75                       		rts	
0001B2A4                            ; ===========================================================================
0001B2A4                            
0001B2A4                            Obj3E_MakeAnimal:
0001B2A4 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B2AA 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B2B0 117C 0006 001A             		move.b	#6,$1A(a0)
0001B2B6 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B2BC 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B2C2 7C07                       		moveq	#7,d6
0001B2C4 3A3C 009A                  		move.w	#$9A,d5
0001B2C8 78E4                       		moveq	#-$1C,d4
0001B2CA                            
0001B2CA                            Obj3E_Loop:
0001B2CA 4EB9 0000 DFC6             		jsr	SingleObjLoad
0001B2D0 6600                       		bne.s	locret_1ACF8
0001B2D2 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B2D6 3368 0008 0008             		move.w	8(a0),8(a1)
0001B2DC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B2E2 D969 0008                  		add.w	d4,8(a1)
0001B2E6 5E44                       		addq.w	#7,d4
0001B2E8 3345 0036                  		move.w	d5,$36(a1)
0001B2EC 5145                       		subq.w	#8,d5
0001B2EE 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B2F2                            
0001B2F2                            locret_1ACF8:
0001B2F2 4E75                       		rts	
0001B2F4                            ; ===========================================================================
0001B2F4                            
0001B2F4                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B2F4 7007                       		moveq	#7,d0
0001B2F6 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B2FA 6600                       		bne.s	loc_1AD38
0001B2FC 4EB9 0000 DFC6             		jsr	SingleObjLoad
0001B302 6600                       		bne.s	loc_1AD38
0001B304 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B308 3368 0008 0008             		move.w	8(a0),8(a1)
0001B30E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B314 4EB9 0000 2BC2             		jsr	(RandomNumber).l
0001B31A 0240 001F                  		andi.w	#$1F,d0
0001B31E 5D40                       		subq.w	#6,d0
0001B320 4A41                       		tst.w	d1
0001B322 6A00                       		bpl.s	loc_1AD2E
0001B324 4440                       		neg.w	d0
0001B326                            
0001B326                            loc_1AD2E:
0001B326 D169 0008                  		add.w	d0,8(a1)
0001B32A 337C 000C 0036             		move.w	#$C,$36(a1)
0001B330                            
0001B330                            loc_1AD38:
0001B330 5368 001E                  		subq.w	#1,$1E(a0)
0001B334 6600                       		bne.s	locret_1AD48
0001B336 5428 0024                  		addq.b	#2,$24(a0)
0001B33A 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B340                            
0001B340                            locret_1AD48:
0001B340 4E75                       		rts	
0001B342                            ; ===========================================================================
0001B342                            
0001B342                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B342 703E                       		moveq	#$3E,d0
0001B344 7228                       		moveq	#$28,d1
0001B346 7440                       		moveq	#$40,d2
0001B348 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B34C                            
0001B34C                            Obj3E_FindObj28:
0001B34C B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B34E 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B350 D2C2                       		adda.w	d2,a1		; next object RAM
0001B352 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B356                            
0001B356 4EB9 0000 F1CC             		jsr	GotThroughAct
0001B35C 4EF9 0000 DB7C             		jmp	DeleteObject
0001B362                            ; ===========================================================================
0001B362                            
0001B362                            Obj3E_Obj28Found:
0001B362 4E75                       		rts	
0001B364                            ; ===========================================================================
0001B364                            Ani_obj3E:
0001B364                            	include "_anim\obj3E.asm"
0001B364                            ; ---------------------------------------------------------------------------
0001B364                            ; Animation script - prison capsule
0001B364                            ; ---------------------------------------------------------------------------
0001B364 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B366 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B368 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B36C                            		even
0001B36C                            		even
0001B36C                            
0001B36C                            ; ---------------------------------------------------------------------------
0001B36C                            ; Sprite mappings - prison capsule
0001B36C                            ; ---------------------------------------------------------------------------
0001B36C                            Map_obj3E:
0001B36C                            	include "_maps\obj3E.asm"
0001B36C                            ; ---------------------------------------------------------------------------
0001B36C                            ; Sprite mappings - prison capsule
0001B36C                            ; ---------------------------------------------------------------------------
0001B36C 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B370 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B374 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B378 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B37A 07                         byte_1AD82:	dc.b 7
0001B37B E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B380 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B385 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B38A F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B38F F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B394 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B399 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B39E 01                         byte_1ADA6:	dc.b 1
0001B39F F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B3A4 06                         byte_1ADAC:	dc.b 6
0001B3A5 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B3AA 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B3AF 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B3B4 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B3B9 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B3BE 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B3C3 01                         byte_1ADCB:	dc.b 1
0001B3C4 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B3C9 02                         byte_1ADD1:	dc.b 2
0001B3CA E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B3CF 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B3D4 01                         byte_1ADDC:	dc.b 1
0001B3D5 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B3DA 00                         byte_1ADE2:	dc.b 0
0001B3DC 00                         		even
0001B3DC 00                         		even
0001B3DC                            
0001B3DC                            ; ---------------------------------------------------------------------------
0001B3DC                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B3DC                            ; ---------------------------------------------------------------------------
0001B3DC                            
0001B3DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B3DC                            
0001B3DC                            
0001B3DC                            TouchResponse:				; XREF: Obj01
0001B3DC 4E71                       		nop	
0001B3DE 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B3E2 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B3E6 5142                       		subq.w	#8,d2
0001B3E8 7A00                       		moveq	#0,d5
0001B3EA 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B3EE 5705                       		subq.b	#3,d5
0001B3F0 9645                       		sub.w	d5,d3
0001B3F2 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B3F8 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B3FA 0643 000C                  		addi.w	#$C,d3
0001B3FE 7A0A                       		moveq	#$A,d5
0001B400                            
0001B400                            Touch_NoDuck:
0001B400 383C 0010                  		move.w	#$10,d4
0001B404 DA45                       		add.w	d5,d5
0001B406 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B40A 3C3C 005F                  		move.w	#$5F,d6
0001B40E                            
0001B40E                            Touch_Loop:
0001B40E 4A29 0001                  		tst.b	1(a1)
0001B412 6A00                       		bpl.s	Touch_NextObj
0001B414 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B418 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B41A                            
0001B41A                            Touch_NextObj:
0001B41A 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B41E 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B422                            
0001B422 7000                       		moveq	#0,d0
0001B424 4E75                       		rts	
0001B426                            ; ===========================================================================
0001B426 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B428 0C14                       		dc.b   $C, $14
0001B42A 140C                       		dc.b  $14,  $C
0001B42C 0410                       		dc.b	4, $10
0001B42E 0C12                       		dc.b   $C, $12
0001B430 1010                       		dc.b  $10, $10
0001B432 0606                       		dc.b	6,   6
0001B434 180C                       		dc.b  $18,  $C
0001B436 0C10                       		dc.b   $C, $10
0001B438 100C                       		dc.b  $10,  $C
0001B43A 0808                       		dc.b	8,   8
0001B43C 1410                       		dc.b  $14, $10
0001B43E 1408                       		dc.b  $14,   8
0001B440 0E0E                       		dc.b   $E,  $E
0001B442 1818                       		dc.b  $18, $18
0001B444 2810                       		dc.b  $28, $10
0001B446 1018                       		dc.b  $10, $18
0001B448 0810                       		dc.b	8, $10
0001B44A 2070                       		dc.b  $20, $70
0001B44C 4020                       		dc.b  $40, $20
0001B44E 8020                       		dc.b  $80, $20
0001B450 2020                       		dc.b  $20, $20
0001B452 0808                       		dc.b	8,   8
0001B454 0404                       		dc.b	4,   4
0001B456 2008                       		dc.b  $20,   8
0001B458 0C0C                       		dc.b   $C,  $C
0001B45A 0804                       		dc.b	8,   4
0001B45C 1804                       		dc.b  $18,   4
0001B45E 2804                       		dc.b  $28,   4
0001B460 0408                       		dc.b	4,   8
0001B462 0418                       		dc.b	4, $18
0001B464 0428                       		dc.b	4, $28
0001B466 0420                       		dc.b	4, $20
0001B468 1818                       		dc.b  $18, $18
0001B46A 0C18                       		dc.b   $C, $18
0001B46C 4808                       		dc.b  $48,   8
0001B46E                            ; ===========================================================================
0001B46E                            
0001B46E                            Touch_Height:				; XREF: TouchResponse
0001B46E 0240 003F                  		andi.w	#$3F,d0
0001B472 D040                       		add.w	d0,d0
0001B474 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B478 7200                       		moveq	#0,d1
0001B47A 121A                       		move.b	(a2)+,d1
0001B47C 3029 0008                  		move.w	8(a1),d0
0001B480 9041                       		sub.w	d1,d0
0001B482 9042                       		sub.w	d2,d0
0001B484 6400                       		bcc.s	loc_1AE98
0001B486 D241                       		add.w	d1,d1
0001B488 D041                       		add.w	d1,d0
0001B48A 6500                       		bcs.s	Touch_Width
0001B48C 6000 FF8C                  		bra.w	Touch_NextObj
0001B490                            ; ===========================================================================
0001B490                            
0001B490                            loc_1AE98:
0001B490 B044                       		cmp.w	d4,d0
0001B492 6200 FF86                  		bhi.w	Touch_NextObj
0001B496                            
0001B496                            Touch_Width:
0001B496 7200                       		moveq	#0,d1
0001B498 121A                       		move.b	(a2)+,d1
0001B49A 3029 000C                  		move.w	$C(a1),d0
0001B49E 9041                       		sub.w	d1,d0
0001B4A0 9043                       		sub.w	d3,d0
0001B4A2 6400                       		bcc.s	loc_1AEB6
0001B4A4 D241                       		add.w	d1,d1
0001B4A6 D240                       		add.w	d0,d1
0001B4A8 6500                       		bcs.s	Touch_ChkValue
0001B4AA 6000 FF6E                  		bra.w	Touch_NextObj
0001B4AE                            ; ===========================================================================
0001B4AE                            
0001B4AE                            loc_1AEB6:
0001B4AE B045                       		cmp.w	d5,d0
0001B4B0 6200 FF68                  		bhi.w	Touch_NextObj
0001B4B4                            
0001B4B4                            Touch_ChkValue:
0001B4B4 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B4B8 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B4BC 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B4C0 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B4C4 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B4C8 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B4CA 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B4CE                            
0001B4CE                            ; touch	response is $40-$7F
0001B4CE                            
0001B4CE 1029 0020                  		move.b	$20(a1),d0
0001B4D2 0200 003F                  		andi.b	#$3F,d0
0001B4D6 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B4DA 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B4DC 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B4E2 6400 0000                  		bcc.w	locret_1AEF2
0001B4E6 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B4EA                            
0001B4EA                            locret_1AEF2:
0001B4EA 4E75                       		rts	
0001B4EC                            ; ===========================================================================
0001B4EC                            
0001B4EC                            Touch_Monitor:
0001B4EC 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B4F0 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B4F2 3028 000C                  		move.w	$C(a0),d0
0001B4F6 0440 0010                  		subi.w	#$10,d0
0001B4FA B069 000C                  		cmp.w	$C(a1),d0
0001B4FE 6500                       		bcs.s	locret_1AF2E
0001B500 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B504 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B50A 4A29 0025                  		tst.b	$25(a1)
0001B50E 6600                       		bne.s	locret_1AF2E
0001B510 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B514 4E75                       		rts	
0001B516                            ; ===========================================================================
0001B516                            
0001B516                            loc_1AF1E:
0001B516 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B51C 6600                       		bne.s	locret_1AF2E
0001B51E 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B522 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B526                            
0001B526                            locret_1AF2E:
0001B526 4E75                       		rts	
0001B528                            ; ===========================================================================
0001B528                            
0001B528                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B528 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B52C 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B52E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B534 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B538                            
0001B538                            loc_1AF40:
0001B538 4A29 0021                  		tst.b	$21(a1)
0001B53C 6700                       		beq.s	Touch_KillEnemy
0001B53E 4468 0010                  		neg.w	$10(a0)
0001B542 4468 0012                  		neg.w	$12(a0)
0001B546 E0E8 0010                  		asr	$10(a0)
0001B54A E0E8 0012                  		asr	$12(a0)
0001B54E 137C 0000 0020             		move.b	#0,$20(a1)
0001B554 5329 0021                  		subq.b	#1,$21(a1)
0001B558 6600                       		bne.s	locret_1AF68
0001B55A 08E9 0007 0022             		bset	#7,$22(a1)
0001B560                            
0001B560                            locret_1AF68:
0001B560 4E75                       		rts	
0001B562                            ; ===========================================================================
0001B562                            
0001B562                            Touch_KillEnemy:
0001B562 08E9 0007 0022             		bset	#7,$22(a1)
0001B568 7000                       		moveq	#0,d0
0001B56A 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B56E 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B572 0C40 0006                  		cmpi.w	#6,d0
0001B576 6500                       		bcs.s	loc_1AF82
0001B578 7006                       		moveq	#6,d0
0001B57A                            
0001B57A                            loc_1AF82:
0001B57A 3340 003E                  		move.w	d0,$3E(a1)
0001B57E 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B582 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B588 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B58A 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B58E 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B594                            
0001B594                            loc_1AF9C:
0001B594 6100 0000                  		bsr.w	AddPoints
0001B598 7400                       		moveq	#0,d2	; GMZ
0001B59A 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001B59C 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001B59E                            
0001B59E                            TouchKE_Explode:
0001B59E 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B5A2 137C 0000 0024             		move.b	#0,$24(a1)
0001B5A8 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001B5AC                            
0001B5AC                            TouchKE_NextExplosion:
0001B5AC 5802                       		addq.b	#4,d2
0001B5AE 4EB9 0000 DFC6             		jsr	SingleObjLoad
0001B5B4 6600                       		bne.s	TouchKE_NoExplosion
0001B5B6 336A 0008 0008             		move.w	8(a2),8(a1)
0001B5BC 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001B5C2 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001B5C6                            
0001B5C6                            TouchKE_NoExplosion:
0001B5C6 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001B5C8 4A68 0012                  		tst.w	$12(a0)
0001B5CC 6B00                       		bmi.s	loc_1AFC2
0001B5CE 3028 000C                  		move.w	$C(a0),d0
0001B5D2 B069 000C                  		cmp.w	$C(a1),d0
0001B5D6 6400                       		bcc.s	loc_1AFCA
0001B5D8 4468 0012                  		neg.w	$12(a0)
0001B5DC 4E75                       		rts	
0001B5DE                            ; ===========================================================================
0001B5DE                            
0001B5DE                            loc_1AFC2:
0001B5DE 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B5E4 4E75                       		rts	
0001B5E6                            ; ===========================================================================
0001B5E6                            
0001B5E6                            loc_1AFCA:
0001B5E6 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B5EC 4E75                       		rts	
0001B5EE                            ; ===========================================================================
0001B5EE 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B5F6                            ; ===========================================================================
0001B5F6                            
0001B5F6                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B5F6 08E9 0007 0022             		bset	#7,$22(a1)
0001B5FC                            
0001B5FC                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B5FC 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B600 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B602                            
0001B602                            loc_1AFE6:				; XREF: Touch_Hurt
0001B602 70FF                       		moveq	#-1,d0
0001B604 4E75                       		rts	
0001B606                            ; ===========================================================================
0001B606                            
0001B606                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B606 4E71                       		nop	
0001B608 4A68 0030                  		tst.w	$30(a0)
0001B60C 66F4                       		bne.s	loc_1AFE6
0001B60E 2449                       		movea.l	a1,a2
0001B610                            
0001B610                            ; End of function TouchResponse
0001B610                            ; continue straight to HurtSonic
0001B610                            
0001B610                            ; ---------------------------------------------------------------------------
0001B610                            ; Hurting Sonic	subroutine
0001B610                            ; ---------------------------------------------------------------------------
0001B610                            
0001B610                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B610                            
0001B610                            
0001B610                            HurtSonic:
0001B610 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B614 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B616 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B61A 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B61E 4EB9 0000 DFC6             		jsr	SingleObjLoad
0001B624 6600                       		bne.s	Hurt_Shield
0001B626 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B62A 3368 0008 0008             		move.w	8(a0),8(a1)
0001B630 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B636                            
0001B636                            Hurt_Shield:
0001B636 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B63C 117C 0004 0024             		move.b	#4,$24(a0)
0001B642 6100 871E                  		bsr.w	Sonic_ResetOnFloor
0001B646 08E8 0001 0022             		bset	#1,$22(a0)
0001B64C 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B652 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B658 0828 0006 0022             		btst	#6,$22(a0)
0001B65E 6700                       		beq.s	Hurt_Reverse
0001B660 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B666 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B66C                            
0001B66C                            Hurt_Reverse:
0001B66C 3028 0008                  		move.w	8(a0),d0
0001B670 B06A 0008                  		cmp.w	8(a2),d0
0001B674 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B676 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B67A                            
0001B67A                            Hurt_ChkSpikes:
0001B67A 317C 0000 0014             		move.w	#0,$14(a0)
0001B680 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B686 317C 0078 0030             		move.w	#$78,$30(a0)
0001B68C 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B690 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B694 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B696 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B69A 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B69C 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B6A0                            
0001B6A0                            Hurt_Sound:
0001B6A0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001B6A6 70FF                       		moveq	#-1,d0
0001B6A8 4E75                       		rts	
0001B6AA                            ; ===========================================================================
0001B6AA                            
0001B6AA                            Hurt_NoRings:
0001B6AA 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B6AE 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B6B2                            ; End of function HurtSonic
0001B6B2                            
0001B6B2                            ; ---------------------------------------------------------------------------
0001B6B2                            ; Subroutine to	kill Sonic
0001B6B2                            ; ---------------------------------------------------------------------------
0001B6B2                            
0001B6B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B6B2                            
0001B6B2                            
0001B6B2                            KillSonic:
0001B6B2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B6B6 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B6B8 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B6BE 117C 0006 0024             		move.b	#6,$24(a0)
0001B6C4 6100 869C                  		bsr.w	Sonic_ResetOnFloor
0001B6C8 08E8 0001 0022             		bset	#1,$22(a0)
0001B6CE 317C F900 0012             		move.w	#-$700,$12(a0)
0001B6D4 317C 0000 0010             		move.w	#0,$10(a0)
0001B6DA 317C 0000 0014             		move.w	#0,$14(a0)
0001B6E0 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B6E6 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B6EC 08E8 0007 0002             		bset	#7,2(a0)
0001B6F2 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B6F6 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B6FA 6600                       		bne.s	Kill_Sound
0001B6FC 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B700                            
0001B700                            Kill_Sound:
0001B700 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001B706                            
0001B706                            Kill_NoDeath:
0001B706 70FF                       		moveq	#-1,d0
0001B708 4E75                       		rts	
0001B70A                            ; End of function KillSonic
0001B70A                            
0001B70A                            
0001B70A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B70A                            
0001B70A                            
0001B70A                            Touch_Special:				; XREF: Touch_ChkValue
0001B70A 1229 0020                  		move.b	$20(a1),d1
0001B70E 0201 003F                  		andi.b	#$3F,d1
0001B712 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B716 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B718 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B71C 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B71E 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B722 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B724 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B728 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B72A 4E75                       		rts	
0001B72C                            ; ===========================================================================
0001B72C                            
0001B72C                            Touch_CatKiller:			; XREF: Touch_Special
0001B72C 6000 FEC8                  		bra.w	loc_1AFDA
0001B730                            ; ===========================================================================
0001B730                            
0001B730                            Touch_Yadrin:				; XREF: Touch_Special
0001B730 9A40                       		sub.w	d0,d5
0001B732 0C45 0008                  		cmpi.w	#8,d5
0001B736 6400                       		bcc.s	loc_1B144
0001B738 3029 0008                  		move.w	8(a1),d0
0001B73C 5940                       		subq.w	#4,d0
0001B73E 0829 0000 0022             		btst	#0,$22(a1)
0001B744 6700                       		beq.s	loc_1B130
0001B746 0440 0010                  		subi.w	#$10,d0
0001B74A                            
0001B74A                            loc_1B130:
0001B74A 9042                       		sub.w	d2,d0
0001B74C 6400                       		bcc.s	loc_1B13C
0001B74E 0640 0018                  		addi.w	#$18,d0
0001B752 6500                       		bcs.s	loc_1B140
0001B754 6000                       		bra.s	loc_1B144
0001B756                            ; ===========================================================================
0001B756                            
0001B756                            loc_1B13C:
0001B756 B044                       		cmp.w	d4,d0
0001B758 6200                       		bhi.s	loc_1B144
0001B75A                            
0001B75A                            loc_1B140:
0001B75A 6000 FEA0                  		bra.w	Touch_ChkHurt
0001B75E                            ; ===========================================================================
0001B75E                            
0001B75E                            loc_1B144:
0001B75E 6000 FDC8                  		bra.w	Touch_Enemy
0001B762                            ; ===========================================================================
0001B762                            
0001B762                            Touch_D7orE1:				; XREF: Touch_Special
0001B762 5229 0021                  		addq.b	#1,$21(a1)
0001B766 4E75                       		rts	
0001B768                            ; End of function Touch_Special
0001B768                            
0001B768                            ; ---------------------------------------------------------------------------
0001B768                            ; Subroutine to	show the special stage layout
0001B768                            ; ---------------------------------------------------------------------------
0001B768                            
0001B768                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B768                            
0001B768                            
0001B768                            SS_ShowLayout:				; XREF: SpecialStage
0001B768 6100 0000                  		bsr.w	SS_AniWallsRings
0001B76C 6100 0000                  		bsr.w	SS_AniItems
0001B770 3F05                       		move.w	d5,-(sp)
0001B772 43F8 8000                  		lea	($FFFF8000).w,a1
0001B776 1038 F780                  		move.b	($FFFFF780).w,d0
0001B77A 0200 00FC                  		andi.b	#$FC,d0
0001B77E 4EB9 0000 2BE8             		jsr	(CalcSine).l
0001B784 3800                       		move.w	d0,d4
0001B786 3A01                       		move.w	d1,d5
0001B788 C9FC 0018                  		muls.w	#$18,d4
0001B78C CBFC 0018                  		muls.w	#$18,d5
0001B790 7400                       		moveq	#0,d2
0001B792 3438 F700                  		move.w	($FFFFF700).w,d2
0001B796 84FC 0018                  		divu.w	#$18,d2
0001B79A 4842                       		swap	d2
0001B79C 4442                       		neg.w	d2
0001B79E 0642 FF4C                  		addi.w	#-$B4,d2
0001B7A2 7600                       		moveq	#0,d3
0001B7A4 3638 F704                  		move.w	($FFFFF704).w,d3
0001B7A8 86FC 0018                  		divu.w	#$18,d3
0001B7AC 4843                       		swap	d3
0001B7AE 4443                       		neg.w	d3
0001B7B0 0643 FF4C                  		addi.w	#-$B4,d3
0001B7B4 3E3C 000F                  		move.w	#$F,d7
0001B7B8                            
0001B7B8                            loc_1B19E:
0001B7B8 48A7 E000                  		movem.w	d0-d2,-(sp)
0001B7BC 48A7 C000                  		movem.w	d0-d1,-(sp)
0001B7C0 4440                       		neg.w	d0
0001B7C2 C3C2                       		muls.w	d2,d1
0001B7C4 C1C3                       		muls.w	d3,d0
0001B7C6 2C00                       		move.l	d0,d6
0001B7C8 DC81                       		add.l	d1,d6
0001B7CA 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001B7CE C1C2                       		muls.w	d2,d0
0001B7D0 C3C3                       		muls.w	d3,d1
0001B7D2 D280                       		add.l	d0,d1
0001B7D4 2406                       		move.l	d6,d2
0001B7D6 3C3C 000F                  		move.w	#$F,d6
0001B7DA                            
0001B7DA                            loc_1B1C0:
0001B7DA 2002                       		move.l	d2,d0
0001B7DC E080                       		asr.l	#8,d0
0001B7DE 32C0                       		move.w	d0,(a1)+
0001B7E0 2001                       		move.l	d1,d0
0001B7E2 E080                       		asr.l	#8,d0
0001B7E4 32C0                       		move.w	d0,(a1)+
0001B7E6 D485                       		add.l	d5,d2
0001B7E8 D284                       		add.l	d4,d1
0001B7EA 51CE FFEE                  		dbf	d6,loc_1B1C0
0001B7EE                            
0001B7EE 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001B7F2 0643 0018                  		addi.w	#$18,d3
0001B7F6 51CF FFC0                  		dbf	d7,loc_1B19E
0001B7FA                            
0001B7FA 3A1F                       		move.w	(sp)+,d5
0001B7FC 41F9 00FF 0000             		lea	($FF0000).l,a0
0001B802 7000                       		moveq	#0,d0
0001B804 3038 F704                  		move.w	($FFFFF704).w,d0
0001B808 80FC 0018                  		divu.w	#$18,d0
0001B80C C0FC 0080                  		mulu.w	#$80,d0
0001B810 D1C0                       		adda.l	d0,a0
0001B812 7000                       		moveq	#0,d0
0001B814 3038 F700                  		move.w	($FFFFF700).w,d0
0001B818 80FC 0018                  		divu.w	#$18,d0
0001B81C D0C0                       		adda.w	d0,a0
0001B81E 49F8 8000                  		lea	($FFFF8000).w,a4
0001B822 3E3C 000F                  		move.w	#$F,d7
0001B826                            
0001B826                            loc_1B20C:
0001B826 3C3C 000F                  		move.w	#$F,d6
0001B82A                            
0001B82A                            loc_1B210:
0001B82A 7000                       		moveq	#0,d0
0001B82C 1018                       		move.b	(a0)+,d0
0001B82E 6700                       		beq.s	loc_1B268
0001B830 0C00 004E                  		cmpi.b	#$4E,d0
0001B834 6200                       		bhi.s	loc_1B268
0001B836 3614                       		move.w	(a4),d3
0001B838 0643 0120                  		addi.w	#$120,d3
0001B83C 0C43 0070                  		cmpi.w	#$70,d3
0001B840 6500                       		bcs.s	loc_1B268
0001B842 0C43 01D0                  		cmpi.w	#$1D0,d3
0001B846 6400                       		bcc.s	loc_1B268
0001B848 342C 0002                  		move.w	2(a4),d2
0001B84C 0642 00F0                  		addi.w	#$F0,d2
0001B850 0C42 0070                  		cmpi.w	#$70,d2
0001B854 6500                       		bcs.s	loc_1B268
0001B856 0C42 0170                  		cmpi.w	#$170,d2
0001B85A 6400                       		bcc.s	loc_1B268
0001B85C 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001B862 E748                       		lsl.w	#3,d0
0001B864 4BF5 0000                  		lea	(a5,d0.w),a5
0001B868 225D                       		movea.l	(a5)+,a1
0001B86A 321D                       		move.w	(a5)+,d1
0001B86C D241                       		add.w	d1,d1
0001B86E D2F1 1000                  		adda.w	(a1,d1.w),a1
0001B872 365D                       		movea.w	(a5)+,a3
0001B874 7200                       		moveq	#0,d1
0001B876 1219                       		move.b	(a1)+,d1
0001B878 5301                       		subq.b	#1,d1
0001B87A 6B00                       		bmi.s	loc_1B268
0001B87C 4EB9 0000 DC9E             		jsr	sub_D762
0001B882                            
0001B882                            loc_1B268:
0001B882 584C                       		addq.w	#4,a4
0001B884 51CE FFA4                  		dbf	d6,loc_1B210
0001B888                            
0001B888 41E8 0070                  		lea	$70(a0),a0
0001B88C 51CF FF98                  		dbf	d7,loc_1B20C
0001B890                            
0001B890 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001B894 0C05 0050                  		cmpi.b	#$50,d5
0001B898 6700                       		beq.s	loc_1B288
0001B89A 24BC 0000 0000             		move.l	#0,(a2)
0001B8A0 4E75                       		rts	
0001B8A2                            ; ===========================================================================
0001B8A2                            
0001B8A2                            loc_1B288:
0001B8A2 157C 0000 FFFB             		move.b	#0,-5(a2)
0001B8A8 4E75                       		rts	
0001B8AA                            ; End of function SS_ShowLayout
0001B8AA                            
0001B8AA                            ; ---------------------------------------------------------------------------
0001B8AA                            ; Subroutine to	animate	walls and rings	in the special stage
0001B8AA                            ; ---------------------------------------------------------------------------
0001B8AA                            
0001B8AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B8AA                            
0001B8AA                            
0001B8AA                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001B8AA 43F9 00FF 400C             		lea	($FF400C).l,a1
0001B8B0 7000                       		moveq	#0,d0
0001B8B2 1038 F780                  		move.b	($FFFFF780).w,d0
0001B8B6 E408                       		lsr.b	#2,d0
0001B8B8 0240 000F                  		andi.w	#$F,d0
0001B8BC 7223                       		moveq	#$23,d1
0001B8BE                            
0001B8BE                            loc_1B2A4:
0001B8BE 3280                       		move.w	d0,(a1)
0001B8C0 5049                       		addq.w	#8,a1
0001B8C2 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001B8C6                            
0001B8C6 43F9 00FF 4005             		lea	($FF4005).l,a1
0001B8CC 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001B8D0 6A00                       		bpl.s	loc_1B2C8
0001B8D2 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001B8D8 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001B8DC 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001B8E2                            
0001B8E2                            loc_1B2C8:
0001B8E2 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001B8E8 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001B8EC 6A00                       		bpl.s	loc_1B2E4
0001B8EE 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001B8F4 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001B8F8 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001B8FE                            
0001B8FE                            loc_1B2E4:
0001B8FE 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001B902 1340 0138                  		move.b	d0,$138(a1)
0001B906 1340 0160                  		move.b	d0,$160(a1)
0001B90A 1340 0148                  		move.b	d0,$148(a1)
0001B90E 1340 0150                  		move.b	d0,$150(a1)
0001B912 1340 01D8                  		move.b	d0,$1D8(a1)
0001B916 1340 01E0                  		move.b	d0,$1E0(a1)
0001B91A 1340 01E8                  		move.b	d0,$1E8(a1)
0001B91E 1340 01F0                  		move.b	d0,$1F0(a1)
0001B922 1340 01F8                  		move.b	d0,$1F8(a1)
0001B926 1340 0200                  		move.b	d0,$200(a1)
0001B92A 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001B92E 6A00                       		bpl.s	loc_1B326
0001B930 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001B936 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001B93A 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001B940                            
0001B940                            loc_1B326:
0001B940 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001B944 1340 0168                  		move.b	d0,$168(a1)
0001B948 1340 0170                  		move.b	d0,$170(a1)
0001B94C 1340 0178                  		move.b	d0,$178(a1)
0001B950 1340 0180                  		move.b	d0,$180(a1)
0001B954 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001B958 6A00                       		bpl.s	loc_1B350
0001B95A 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001B960 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001B964 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001B96A                            
0001B96A                            loc_1B350:
0001B96A 43F9 00FF 4016             		lea	($FF4016).l,a1
0001B970 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001B976 7000                       		moveq	#0,d0
0001B978 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001B97C D040                       		add.w	d0,d0
0001B97E 41F0 0000                  		lea	(a0,d0.w),a0
0001B982 3290                       		move.w	(a0),(a1)
0001B984 3368 0002 0008             		move.w	2(a0),8(a1)
0001B98A 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B990 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B996 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B99C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B9A2 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B9A8 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B9AE D0FC 0020                  		adda.w	#$20,a0
0001B9B2 D2FC 0048                  		adda.w	#$48,a1
0001B9B6 3290                       		move.w	(a0),(a1)
0001B9B8 3368 0002 0008             		move.w	2(a0),8(a1)
0001B9BE 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B9C4 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B9CA 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B9D0 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B9D6 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B9DC 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B9E2 D0FC 0020                  		adda.w	#$20,a0
0001B9E6 D2FC 0048                  		adda.w	#$48,a1
0001B9EA 3290                       		move.w	(a0),(a1)
0001B9EC 3368 0002 0008             		move.w	2(a0),8(a1)
0001B9F2 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B9F8 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B9FE 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BA04 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BA0A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BA10 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BA16 D0FC 0020                  		adda.w	#$20,a0
0001BA1A D2FC 0048                  		adda.w	#$48,a1
0001BA1E 3290                       		move.w	(a0),(a1)
0001BA20 3368 0002 0008             		move.w	2(a0),8(a1)
0001BA26 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BA2C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BA32 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BA38 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BA3E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BA44 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BA4A D0FC 0020                  		adda.w	#$20,a0
0001BA4E D2FC 0048                  		adda.w	#$48,a1
0001BA52 4E75                       		rts	
0001BA54                            ; End of function SS_AniWallsRings
0001BA54                            
0001BA54                            ; ===========================================================================
0001BA54 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BA64 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BA74 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BA84 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BA94 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BAA4 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BAB4 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BAC4 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BAD4                            ; ---------------------------------------------------------------------------
0001BAD4                            ; Subroutine to	remove items when you collect them in the special stage
0001BAD4                            ; ---------------------------------------------------------------------------
0001BAD4                            
0001BAD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BAD4                            
0001BAD4                            
0001BAD4                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BAD4 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BADA 303C 001F                  		move.w	#$1F,d0
0001BADE                            
0001BADE                            loc_1B4C4:
0001BADE 4A12                       		tst.b	(a2)
0001BAE0 6700                       		beq.s	locret_1B4CE
0001BAE2 504A                       		addq.w	#8,a2
0001BAE4 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BAE8                            
0001BAE8                            locret_1B4CE:
0001BAE8 4E75                       		rts	
0001BAEA                            ; End of function SS_RemoveCollectedItem
0001BAEA                            
0001BAEA                            ; ---------------------------------------------------------------------------
0001BAEA                            ; Subroutine to	animate	special	stage items when you touch them
0001BAEA                            ; ---------------------------------------------------------------------------
0001BAEA                            
0001BAEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BAEA                            
0001BAEA                            
0001BAEA                            SS_AniItems:				; XREF: SS_ShowLayout
0001BAEA 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BAF0 3E3C 001F                  		move.w	#$1F,d7
0001BAF4                            
0001BAF4                            loc_1B4DA:
0001BAF4 7000                       		moveq	#0,d0
0001BAF6 1010                       		move.b	(a0),d0
0001BAF8 6700                       		beq.s	loc_1B4E8
0001BAFA E548                       		lsl.w	#2,d0
0001BAFC 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BB00 4E91                       		jsr	(a1)
0001BB02                            
0001BB02                            loc_1B4E8:
0001BB02 5048                       		addq.w	#8,a0
0001BB04                            
0001BB04                            loc_1B4EA:
0001BB04 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BB08                            
0001BB08 4E75                       		rts	
0001BB0A                            ; End of function SS_AniItems
0001BB0A                            
0001BB0A                            ; ===========================================================================
0001BB0A 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BB0E 0000 0000                  		dc.l SS_AniBumper
0001BB12 0000 0000                  		dc.l SS_Ani1Up
0001BB16 0000 0000                  		dc.l SS_AniReverse
0001BB1A 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BB1E 0000 0000                  		dc.l SS_AniGlassBlock
0001BB22                            ; ===========================================================================
0001BB22                            
0001BB22                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001BB22 5328 0002                  		subq.b	#1,2(a0)
0001BB26 6A00                       		bpl.s	locret_1B530
0001BB28 117C 0005 0002             		move.b	#5,2(a0)
0001BB2E 7000                       		moveq	#0,d0
0001BB30 1028 0003                  		move.b	3(a0),d0
0001BB34 5228 0003                  		addq.b	#1,3(a0)
0001BB38 2268 0004                  		movea.l	4(a0),a1
0001BB3C 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001BB40 1280                       		move.b	d0,(a1)
0001BB42 6600                       		bne.s	locret_1B530
0001BB44 4290                       		clr.l	(a0)
0001BB46 42A8 0004                  		clr.l	4(a0)
0001BB4A                            
0001BB4A                            locret_1B530:
0001BB4A 4E75                       		rts	
0001BB4C                            ; ===========================================================================
0001BB4C 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001BB52                            ; ===========================================================================
0001BB52                            
0001BB52                            SS_AniBumper:				; XREF: SS_AniIndex
0001BB52 5328 0002                  		subq.b	#1,2(a0)
0001BB56 6A00                       		bpl.s	locret_1B566
0001BB58 117C 0007 0002             		move.b	#7,2(a0)
0001BB5E 7000                       		moveq	#0,d0
0001BB60 1028 0003                  		move.b	3(a0),d0
0001BB64 5228 0003                  		addq.b	#1,3(a0)
0001BB68 2268 0004                  		movea.l	4(a0),a1
0001BB6C 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BB70 6600                       		bne.s	loc_1B564
0001BB72 4290                       		clr.l	(a0)
0001BB74 42A8 0004                  		clr.l	4(a0)
0001BB78 12BC 0025                  		move.b	#$25,(a1)
0001BB7C 4E75                       		rts	
0001BB7E                            ; ===========================================================================
0001BB7E                            
0001BB7E                            loc_1B564:
0001BB7E 1280                       		move.b	d0,(a1)
0001BB80                            
0001BB80                            locret_1B566:
0001BB80 4E75                       		rts	
0001BB82                            ; ===========================================================================
0001BB82 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BB88                            ; ===========================================================================
0001BB88                            
0001BB88                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BB88 5328 0002                  		subq.b	#1,2(a0)
0001BB8C 6A00                       		bpl.s	locret_1B596
0001BB8E 117C 0005 0002             		move.b	#5,2(a0)
0001BB94 7000                       		moveq	#0,d0
0001BB96 1028 0003                  		move.b	3(a0),d0
0001BB9A 5228 0003                  		addq.b	#1,3(a0)
0001BB9E 2268 0004                  		movea.l	4(a0),a1
0001BBA2 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BBA6 1280                       		move.b	d0,(a1)
0001BBA8 6600                       		bne.s	locret_1B596
0001BBAA 4290                       		clr.l	(a0)
0001BBAC 42A8 0004                  		clr.l	4(a0)
0001BBB0                            
0001BBB0                            locret_1B596:
0001BBB0 4E75                       		rts	
0001BBB2                            ; ===========================================================================
0001BBB2 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BBB8                            ; ===========================================================================
0001BBB8                            
0001BBB8                            SS_AniReverse:				; XREF: SS_AniIndex
0001BBB8 5328 0002                  		subq.b	#1,2(a0)
0001BBBC 6A00                       		bpl.s	locret_1B5CC
0001BBBE 117C 0007 0002             		move.b	#7,2(a0)
0001BBC4 7000                       		moveq	#0,d0
0001BBC6 1028 0003                  		move.b	3(a0),d0
0001BBCA 5228 0003                  		addq.b	#1,3(a0)
0001BBCE 2268 0004                  		movea.l	4(a0),a1
0001BBD2 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BBD6 6600                       		bne.s	loc_1B5CA
0001BBD8 4290                       		clr.l	(a0)
0001BBDA 42A8 0004                  		clr.l	4(a0)
0001BBDE 12BC 002B                  		move.b	#$2B,(a1)
0001BBE2 4E75                       		rts	
0001BBE4                            ; ===========================================================================
0001BBE4                            
0001BBE4                            loc_1B5CA:
0001BBE4 1280                       		move.b	d0,(a1)
0001BBE6                            
0001BBE6                            locret_1B5CC:
0001BBE6 4E75                       		rts	
0001BBE8                            ; ===========================================================================
0001BBE8 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BBEE                            ; ===========================================================================
0001BBEE                            
0001BBEE                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BBEE 5328 0002                  		subq.b	#1,2(a0)
0001BBF2 6A00                       		bpl.s	locret_1B60C
0001BBF4 117C 0005 0002             		move.b	#5,2(a0)
0001BBFA 7000                       		moveq	#0,d0
0001BBFC 1028 0003                  		move.b	3(a0),d0
0001BC00 5228 0003                  		addq.b	#1,3(a0)
0001BC04 2268 0004                  		movea.l	4(a0),a1
0001BC08 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BC0C 1280                       		move.b	d0,(a1)
0001BC0E 6600                       		bne.s	locret_1B60C
0001BC10 4290                       		clr.l	(a0)
0001BC12 42A8 0004                  		clr.l	4(a0)
0001BC16 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BC1C 303C 00A8                  		move.w	#$A8,d0
0001BC20 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BC26                            
0001BC26                            locret_1B60C:
0001BC26 4E75                       		rts	
0001BC28                            ; ===========================================================================
0001BC28 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BC2E                            ; ===========================================================================
0001BC2E                            
0001BC2E                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BC2E 5328 0002                  		subq.b	#1,2(a0)
0001BC32 6A00                       		bpl.s	locret_1B640
0001BC34 117C 0001 0002             		move.b	#1,2(a0)
0001BC3A 7000                       		moveq	#0,d0
0001BC3C 1028 0003                  		move.b	3(a0),d0
0001BC40 5228 0003                  		addq.b	#1,3(a0)
0001BC44 2268 0004                  		movea.l	4(a0),a1
0001BC48 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BC4C 1280                       		move.b	d0,(a1)
0001BC4E 6600                       		bne.s	locret_1B640
0001BC50 12A8 0004                  		move.b	4(a0),(a1)
0001BC54 4290                       		clr.l	(a0)
0001BC56 42A8 0004                  		clr.l	4(a0)
0001BC5A                            
0001BC5A                            locret_1B640:
0001BC5A 4E75                       		rts	
0001BC5C                            ; ===========================================================================
0001BC5C 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BC66                            ; ---------------------------------------------------------------------------
0001BC66                            ; Special stage	layout pointers
0001BC66                            ; ---------------------------------------------------------------------------
0001BC66                            SS_LayoutIndex:
0001BC66                            	include "_inc\Special stage layout pointers.asm"
0001BC66                            ; ---------------------------------------------------------------------------
0001BC66                            ; Special stage	layout pointers
0001BC66                            ; ---------------------------------------------------------------------------
0001BC66 0000 0000                  	dc.l SS_1
0001BC6A 0000 0000                  	dc.l SS_2
0001BC6E 0000 0000                  	dc.l SS_3
0001BC72 0000 0000                  	dc.l SS_4
0001BC76 0000 0000                  	dc.l SS_5
0001BC7A 0000 0000                  	dc.l SS_6
0001BC7E                            	even
0001BC7E                            	even
0001BC7E                            
0001BC7E                            ; ---------------------------------------------------------------------------
0001BC7E                            ; Special stage	start locations
0001BC7E                            ; ---------------------------------------------------------------------------
0001BC7E                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BC96                            		even
0001BC96                            
0001BC96                            ; ---------------------------------------------------------------------------
0001BC96                            ; Subroutine to	load special stage layout
0001BC96                            ; ---------------------------------------------------------------------------
0001BC96                            
0001BC96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC96                            
0001BC96                            
0001BC96                            SS_Load:				; XREF: SpecialStage
0001BC96 7000                       		moveq	#0,d0
0001BC98 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BC9C 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BCA0 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BCA6 6500                       		bcs.s	SS_ChkEmldNum
0001BCA8 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BCAE                            
0001BCAE                            SS_ChkEmldNum:
0001BCAE 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BCB4 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BCB6 7200                       		moveq	#0,d1
0001BCB8 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001BCBC 5301                       		subq.b	#1,d1
0001BCBE 6500                       		bcs.s	SS_LoadData
0001BCC0 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001BCC4                            
0001BCC4                            SS_ChkEmldLoop:	
0001BCC4 B033 1000                  		cmp.b	(a3,d1.w),d0
0001BCC8 6600                       		bne.s	SS_ChkEmldRepeat
0001BCCA 60CA                       		bra.s	SS_Load
0001BCCC                            ; ===========================================================================
0001BCCC                            
0001BCCC                            SS_ChkEmldRepeat:
0001BCCC 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BCD0                            
0001BCD0                            SS_LoadData:
0001BCD0 E548                       		lsl.w	#2,d0
0001BCD2 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BCD6 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001BCDA 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001BCDE 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BCE2 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BCE8 303C 0000                  		move.w	#0,d0
0001BCEC 4EB9 0000 193E             		jsr	(EniDec).l
0001BCF2 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BCF8 303C 0FFF                  		move.w	#$FFF,d0
0001BCFC                            
0001BCFC                            SS_ClrRAM3:
0001BCFC 4299                       		clr.l	(a1)+
0001BCFE 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001BD02                            
0001BD02 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BD08 41F9 00FF 4000             		lea	($FF4000).l,a0
0001BD0E 723F                       		moveq	#$3F,d1
0001BD10                            
0001BD10                            loc_1B6F6:
0001BD10 743F                       		moveq	#$3F,d2
0001BD12                            
0001BD12                            loc_1B6F8:
0001BD12 12D8                       		move.b	(a0)+,(a1)+
0001BD14 51CA FFFC                  		dbf	d2,loc_1B6F8
0001BD18                            
0001BD18 43E9 0040                  		lea	$40(a1),a1
0001BD1C 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001BD20                            
0001BD20 43F9 00FF 4008             		lea	($FF4008).l,a1
0001BD26 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001BD2C 724D                       		moveq	#$4D,d1
0001BD2E                            
0001BD2E                            loc_1B714:
0001BD2E 22D8                       		move.l	(a0)+,(a1)+
0001BD30 32FC 0000                  		move.w	#0,(a1)+
0001BD34 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001BD3A 32D8                       		move.w	(a0)+,(a1)+
0001BD3C 51C9 FFF0                  		dbf	d1,loc_1B714
0001BD40                            
0001BD40 43F9 00FF 4400             		lea	($FF4400).l,a1
0001BD46 323C 003F                  		move.w	#$3F,d1
0001BD4A                            
0001BD4A                            loc_1B730:
0001BD4A                            
0001BD4A 4299                       		clr.l	(a1)+
0001BD4C 51C9 FFFC                  		dbf	d1,loc_1B730
0001BD50                            
0001BD50 4E75                       		rts	
0001BD52                            ; End of function SS_Load
0001BD52                            
0001BD52                            ; ===========================================================================
0001BD52                            ; ---------------------------------------------------------------------------
0001BD52                            ; Special stage	mappings and VRAM pointers
0001BD52                            ; ---------------------------------------------------------------------------
0001BD52                            SS_MapIndex:
0001BD52                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001BD52                            ; ---------------------------------------------------------------------------
0001BD52                            ; Special stage	mappings and VRAM pointers
0001BD52                            ; ---------------------------------------------------------------------------
0001BD52 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001BD56 0142                       	dc.w $142		; VRAM setting
0001BD58 0000 0000                  	dc.l Map_SSWalls
0001BD5C 0142                       	dc.w $142
0001BD5E 0000 0000                  	dc.l Map_SSWalls
0001BD62 0142                       	dc.w $142
0001BD64 0000 0000                  	dc.l Map_SSWalls
0001BD68 0142                       	dc.w $142
0001BD6A 0000 0000                  	dc.l Map_SSWalls
0001BD6E 0142                       	dc.w $142
0001BD70 0000 0000                  	dc.l Map_SSWalls
0001BD74 0142                       	dc.w $142
0001BD76 0000 0000                  	dc.l Map_SSWalls
0001BD7A 0142                       	dc.w $142
0001BD7C 0000 0000                  	dc.l Map_SSWalls
0001BD80 0142                       	dc.w $142
0001BD82 0000 0000                  	dc.l Map_SSWalls
0001BD86 0142                       	dc.w $142
0001BD88 0000 0000                  	dc.l Map_SSWalls
0001BD8C 2142                       	dc.w $2142
0001BD8E 0000 0000                  	dc.l Map_SSWalls
0001BD92 2142                       	dc.w $2142
0001BD94 0000 0000                  	dc.l Map_SSWalls
0001BD98 2142                       	dc.w $2142
0001BD9A 0000 0000                  	dc.l Map_SSWalls
0001BD9E 2142                       	dc.w $2142
0001BDA0 0000 0000                  	dc.l Map_SSWalls
0001BDA4 2142                       	dc.w $2142
0001BDA6 0000 0000                  	dc.l Map_SSWalls
0001BDAA 2142                       	dc.w $2142
0001BDAC 0000 0000                  	dc.l Map_SSWalls
0001BDB0 2142                       	dc.w $2142
0001BDB2 0000 0000                  	dc.l Map_SSWalls
0001BDB6 2142                       	dc.w $2142
0001BDB8 0000 0000                  	dc.l Map_SSWalls
0001BDBC 2142                       	dc.w $2142
0001BDBE 0000 0000                  	dc.l Map_SSWalls
0001BDC2 4142                       	dc.w $4142
0001BDC4 0000 0000                  	dc.l Map_SSWalls
0001BDC8 4142                       	dc.w $4142
0001BDCA 0000 0000                  	dc.l Map_SSWalls
0001BDCE 4142                       	dc.w $4142
0001BDD0 0000 0000                  	dc.l Map_SSWalls
0001BDD4 4142                       	dc.w $4142
0001BDD6 0000 0000                  	dc.l Map_SSWalls
0001BDDA 4142                       	dc.w $4142
0001BDDC 0000 0000                  	dc.l Map_SSWalls
0001BDE0 4142                       	dc.w $4142
0001BDE2 0000 0000                  	dc.l Map_SSWalls
0001BDE6 4142                       	dc.w $4142
0001BDE8 0000 0000                  	dc.l Map_SSWalls
0001BDEC 4142                       	dc.w $4142
0001BDEE 0000 0000                  	dc.l Map_SSWalls
0001BDF2 4142                       	dc.w $4142
0001BDF4 0000 0000                  	dc.l Map_SSWalls
0001BDF8 6142                       	dc.w $6142
0001BDFA 0000 0000                  	dc.l Map_SSWalls
0001BDFE 6142                       	dc.w $6142
0001BE00 0000 0000                  	dc.l Map_SSWalls
0001BE04 6142                       	dc.w $6142
0001BE06 0000 0000                  	dc.l Map_SSWalls
0001BE0A 6142                       	dc.w $6142
0001BE0C 0000 0000                  	dc.l Map_SSWalls
0001BE10 6142                       	dc.w $6142
0001BE12 0000 0000                  	dc.l Map_SSWalls
0001BE16 6142                       	dc.w $6142
0001BE18 0000 0000                  	dc.l Map_SSWalls
0001BE1C 6142                       	dc.w $6142
0001BE1E 0000 0000                  	dc.l Map_SSWalls
0001BE22 6142                       	dc.w $6142
0001BE24 0000 0000                  	dc.l Map_SSWalls
0001BE28 6142                       	dc.w $6142
0001BE2A 0000 F034                  	dc.l Map_obj47
0001BE2E 023B                       	dc.w $23B
0001BE30 0000 0000                  	dc.l Map_SS_R
0001BE34 0570                       	dc.w $570
0001BE36 0000 0000                  	dc.l Map_SS_R
0001BE3A 0251                       	dc.w $251
0001BE3C 0000 0000                  	dc.l Map_SS_R
0001BE40 0370                       	dc.w $370
0001BE42 0000 0000                  	dc.l Map_SS_Up
0001BE46 0263                       	dc.w $263
0001BE48 0000 0000                  	dc.l Map_SS_Down
0001BE4C 0263                       	dc.w $263
0001BE4E 0000 0000                  	dc.l Map_SS_R
0001BE52 22F0                       	dc.w $22F0
0001BE54 0000 0000                  	dc.l Map_SS_Glass
0001BE58 0470                       	dc.w $470
0001BE5A 0000 0000                  	dc.l Map_SS_Glass
0001BE5E 05F0                       	dc.w $5F0
0001BE60 0000 0000                  	dc.l Map_SS_Glass
0001BE64 65F0                       	dc.w $65F0
0001BE66 0000 0000                  	dc.l Map_SS_Glass
0001BE6A 25F0                       	dc.w $25F0
0001BE6C 0000 0000                  	dc.l Map_SS_Glass
0001BE70 45F0                       	dc.w $45F0
0001BE72 0000 0000                  	dc.l Map_SS_R
0001BE76 02F0                       	dc.w $2F0
0001BE78 0100 F034                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001BE7C 023B                       	dc.w $23B
0001BE7E 0200 F034                  	dc.l Map_obj47+$2000000
0001BE82 023B                       	dc.w $23B
0001BE84 0000 0000                  	dc.l Map_SS_R
0001BE88 0797                       	dc.w $797
0001BE8A 0000 0000                  	dc.l Map_SS_R
0001BE8E 07A0                       	dc.w $7A0
0001BE90 0000 0000                  	dc.l Map_SS_R
0001BE94 07A9                       	dc.w $7A9
0001BE96 0000 0000                  	dc.l Map_SS_R
0001BE9A 0797                       	dc.w $797
0001BE9C 0000 0000                  	dc.l Map_SS_R
0001BEA0 07A0                       	dc.w $7A0
0001BEA2 0000 0000                  	dc.l Map_SS_R
0001BEA6 07A9                       	dc.w $7A9
0001BEA8 0000 A3AE                  	dc.l Map_obj25
0001BEAC 27B2                       	dc.w $27B2
0001BEAE 0000 0000                  	dc.l Map_SS_Chaos3
0001BEB2 0770                       	dc.w $770
0001BEB4 0000 0000                  	dc.l Map_SS_Chaos3
0001BEB8 2770                       	dc.w $2770
0001BEBA 0000 0000                  	dc.l Map_SS_Chaos3
0001BEBE 4770                       	dc.w $4770
0001BEC0 0000 0000                  	dc.l Map_SS_Chaos3
0001BEC4 6770                       	dc.w $6770
0001BEC6 0000 0000                  	dc.l Map_SS_Chaos1
0001BECA 0770                       	dc.w $770
0001BECC 0000 0000                  	dc.l Map_SS_Chaos2
0001BED0 0770                       	dc.w $770
0001BED2 0000 0000                  	dc.l Map_SS_R
0001BED6 04F0                       	dc.w $4F0
0001BED8 0400 A3AE                  	dc.l Map_obj25+$4000000
0001BEDC 27B2                       	dc.w $27B2
0001BEDE 0500 A3AE                  	dc.l Map_obj25+$5000000
0001BEE2 27B2                       	dc.w $27B2
0001BEE4 0600 A3AE                  	dc.l Map_obj25+$6000000
0001BEE8 27B2                       	dc.w $27B2
0001BEEA 0700 A3AE                  	dc.l Map_obj25+$7000000
0001BEEE 27B2                       	dc.w $27B2
0001BEF0 0000 0000                  	dc.l Map_SS_Glass
0001BEF4 23F0                       	dc.w $23F0
0001BEF6 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001BEFA 23F0                       	dc.w $23F0
0001BEFC 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001BF00 23F0                       	dc.w $23F0
0001BF02 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001BF06 23F0                       	dc.w $23F0
0001BF08 0000 0000                  	dc.l Map_SS_R+$2000000
0001BF0C 04F0                       	dc.w $4F0
0001BF0E 0000 0000                  	dc.l Map_SS_Glass
0001BF12 05F0                       	dc.w $5F0
0001BF14 0000 0000                  	dc.l Map_SS_Glass
0001BF18 65F0                       	dc.w $65F0
0001BF1A 0000 0000                  	dc.l Map_SS_Glass
0001BF1E 25F0                       	dc.w $25F0
0001BF20 0000 0000                  	dc.l Map_SS_Glass
0001BF24 45F0                       	dc.w $45F0
0001BF24 45F0                       	dc.w $45F0
0001BF26                            
0001BF26                            ; ---------------------------------------------------------------------------
0001BF26                            ; Sprite mappings - special stage "R" block
0001BF26                            ; ---------------------------------------------------------------------------
0001BF26                            Map_SS_R:
0001BF26                            	include "_maps\SSRblock.asm"
0001BF26                            ; ---------------------------------------------------------------------------
0001BF26                            ; Sprite mappings - special stage "R" block
0001BF26                            ; ---------------------------------------------------------------------------
0001BF26 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001BF2A 0000                       		dc.w byte_1B91E-Map_SS_R
0001BF2C 01                         byte_1B912:	dc.b 1
0001BF2D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BF32 01                         byte_1B918:	dc.b 1
0001BF33 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BF38 00                         byte_1B91E:	dc.b 0
0001BF3A 00                         		even
0001BF3A 00                         		even
0001BF3A                            
0001BF3A                            ; ---------------------------------------------------------------------------
0001BF3A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BF3A                            ; ---------------------------------------------------------------------------
0001BF3A                            Map_SS_Glass:
0001BF3A                            	include "_maps\SSglassblock.asm"
0001BF3A                            ; ---------------------------------------------------------------------------
0001BF3A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BF3A                            ; ---------------------------------------------------------------------------
0001BF3A 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001BF3E 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001BF42 01                         byte_1B928:	dc.b 1
0001BF43 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BF48 01                         byte_1B92E:	dc.b 1
0001BF49 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001BF4E 01                         byte_1B934:	dc.b 1
0001BF4F F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001BF54 01                         byte_1B93A:	dc.b 1
0001BF55 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001BF5A                            		even
0001BF5A                            		even
0001BF5A                            
0001BF5A                            ; ---------------------------------------------------------------------------
0001BF5A                            ; Sprite mappings - special stage "UP" block
0001BF5A                            ; ---------------------------------------------------------------------------
0001BF5A                            Map_SS_Up:
0001BF5A                            	include "_maps\SSUPblock.asm"
0001BF5A                            ; ---------------------------------------------------------------------------
0001BF5A                            ; Sprite mappings - special stage "UP" block
0001BF5A                            ; ---------------------------------------------------------------------------
0001BF5A 0000                       		dc.w byte_1B944-Map_SS_Up
0001BF5C 0000                       		dc.w byte_1B94A-Map_SS_Up
0001BF5E 01                         byte_1B944:	dc.b 1
0001BF5F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BF64 01                         byte_1B94A:	dc.b 1
0001BF65 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BF6A                            		even
0001BF6A                            		even
0001BF6A                            
0001BF6A                            ; ---------------------------------------------------------------------------
0001BF6A                            ; Sprite mappings - special stage "DOWN" block
0001BF6A                            ; ---------------------------------------------------------------------------
0001BF6A                            Map_SS_Down:
0001BF6A                            	include "_maps\SSDOWNblock.asm"
0001BF6A                            ; ---------------------------------------------------------------------------
0001BF6A                            ; Sprite mappings - special stage "DOWN" block
0001BF6A                            ; ---------------------------------------------------------------------------
0001BF6A 0000                       		dc.w byte_1B954-Map_SS_Down
0001BF6C 0000                       		dc.w byte_1B95A-Map_SS_Down
0001BF6E 01                         byte_1B954:	dc.b 1
0001BF6F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BF74 01                         byte_1B95A:	dc.b 1
0001BF75 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BF7A                            		even
0001BF7A                            		even
0001BF7A                            
0001BF7A                            ; ---------------------------------------------------------------------------
0001BF7A                            ; Sprite mappings - special stage chaos	emeralds
0001BF7A                            ; ---------------------------------------------------------------------------
0001BF7A 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001BF7C 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001BF7E 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001BF80 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001BF82 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001BF84 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001BF86 01                         byte_1B96C:	dc.b 1
0001BF87 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001BF8C 01                         byte_1B972:	dc.b 1
0001BF8D F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001BF92 01                         byte_1B978:	dc.b 1
0001BF93 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001BF98 01                         byte_1B97E:	dc.b 1
0001BF99 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001BF9E                            		even
0001BF9E                            ; ===========================================================================
0001BF9E                            ; ---------------------------------------------------------------------------
0001BF9E                            ; Object 09 - Sonic (special stage)
0001BF9E                            ; ---------------------------------------------------------------------------
0001BF9E                            
0001BF9E                            Obj09:					; XREF: Obj_Index
0001BF9E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001BFA2 6700                       		beq.s	Obj09_Normal	; if not, branch
0001BFA4 6100 0000                  		bsr.w	SS_FixCamera
0001BFA8 6000 0000                  		bra.w	DebugMode
0001BFAC                            ; ===========================================================================
0001BFAC                            
0001BFAC                            Obj09_Normal:
0001BFAC 7000                       		moveq	#0,d0
0001BFAE 1028 0024                  		move.b	$24(a0),d0
0001BFB2 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001BFB6 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001BFBA                            ; ===========================================================================
0001BFBA 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001BFBC 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001BFBE 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001BFC0 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001BFC2                            ; ===========================================================================
0001BFC2                            
0001BFC2                            Obj09_Main:				; XREF: Obj09_Index
0001BFC2 5428 0024                  		addq.b	#2,$24(a0)
0001BFC6 117C 000E 0016             		move.b	#$E,$16(a0)
0001BFCC 117C 0007 0017             		move.b	#7,$17(a0)
0001BFD2 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001BFDA 317C 0780 0002             		move.w	#$780,2(a0)
0001BFE0 117C 0004 0001             		move.b	#4,1(a0)
0001BFE6 117C 0000 0018             		move.b	#0,$18(a0)
0001BFEC 117C 0002 001C             		move.b	#2,$1C(a0)
0001BFF2 08E8 0002 0022             		bset	#2,$22(a0)
0001BFF8 08E8 0001 0022             		bset	#1,$22(a0)
0001BFFE                            
0001BFFE                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001BFFE 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C002 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C004 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001C00A 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C00C 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C012                            
0001C012                            Obj09_NoDebug:
0001C012 117C 0000 0030             		move.b	#0,$30(a0)
0001C018 7000                       		moveq	#0,d0
0001C01A 1028 0022                  		move.b	$22(a0),d0
0001C01E 0240 0002                  		andi.w	#2,d0
0001C022 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C026 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C02A 4EBA 81CE                  		jsr	LoadSonicDynPLC
0001C02E 4EF9 0000 DB40             		jmp	DisplaySprite
0001C034                            ; ===========================================================================
0001C034 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C036 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C038                            ; ===========================================================================
0001C038                            
0001C038                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C038 6100 0000                  		bsr.w	Obj09_Jump
0001C03C 6100 0000                  		bsr.w	Obj09_Move
0001C040 6100 0000                  		bsr.w	Obj09_Fall
0001C044 6000                       		bra.s	Obj09_Display
0001C046                            ; ===========================================================================
0001C046                            
0001C046                            Obj09_InAir:				; XREF: Obj09_Modes
0001C046 6100 0000                  		bsr.w	nullsub_2
0001C04A 6100 0000                  		bsr.w	Obj09_Move
0001C04E 6100 0000                  		bsr.w	Obj09_Fall
0001C052                            
0001C052                            Obj09_Display:				; XREF: Obj09_OnWall
0001C052 6100 0000                  		bsr.w	Obj09_ChkItems
0001C056 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C05A 4EB9 0000 DB1A             		jsr	SpeedToPos
0001C060 6100 0000                  		bsr.w	SS_FixCamera
0001C064 3038 F780                  		move.w	($FFFFF780).w,d0
0001C068 D078 F782                  		add.w	($FFFFF782).w,d0
0001C06C 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C070 4EB9 0001 3F7E             		jsr	Sonic_Animate
0001C076 4E75                       		rts	
0001C078                            
0001C078                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C078                            
0001C078                            
0001C078                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C078 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C07E 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C080 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C084                            
0001C084                            Obj09_ChkRight:
0001C084 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C08A 6700                       		beq.s	loc_1BA78	; if not, branch
0001C08C 6100 0000                  		bsr.w	Obj09_MoveRight
0001C090                            
0001C090                            loc_1BA78:
0001C090 1038 F602                  		move.b	($FFFFF602).w,d0
0001C094 0200 000C                  		andi.b	#$C,d0
0001C098 6600                       		bne.s	loc_1BAA8
0001C09A 3028 0014                  		move.w	$14(a0),d0
0001C09E 6700                       		beq.s	loc_1BAA8
0001C0A0 6B00                       		bmi.s	loc_1BA9A
0001C0A2 0440 000C                  		subi.w	#$C,d0
0001C0A6 6400                       		bcc.s	loc_1BA94
0001C0A8 303C 0000                  		move.w	#0,d0
0001C0AC                            
0001C0AC                            loc_1BA94:
0001C0AC 3140 0014                  		move.w	d0,$14(a0)
0001C0B0 6000                       		bra.s	loc_1BAA8
0001C0B2                            ; ===========================================================================
0001C0B2                            
0001C0B2                            loc_1BA9A:
0001C0B2 0640 000C                  		addi.w	#$C,d0
0001C0B6 6400                       		bcc.s	loc_1BAA4
0001C0B8 303C 0000                  		move.w	#0,d0
0001C0BC                            
0001C0BC                            loc_1BAA4:
0001C0BC 3140 0014                  		move.w	d0,$14(a0)
0001C0C0                            
0001C0C0                            loc_1BAA8:
0001C0C0 1038 F780                  		move.b	($FFFFF780).w,d0
0001C0C4 0600 0020                  		addi.b	#$20,d0
0001C0C8 0200 00C0                  		andi.b	#$C0,d0
0001C0CC 4400                       		neg.b	d0
0001C0CE 4EB9 0000 2BE8             		jsr	(CalcSine).l
0001C0D4 C3E8 0014                  		muls.w	$14(a0),d1
0001C0D8 D3A8 0008                  		add.l	d1,8(a0)
0001C0DC C1E8 0014                  		muls.w	$14(a0),d0
0001C0E0 D1A8 000C                  		add.l	d0,$C(a0)
0001C0E4 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C0E8 2428 000C                  		move.l	$C(a0),d2
0001C0EC 2628 0008                  		move.l	8(a0),d3
0001C0F0 6100 0000                  		bsr.w	sub_1BCE8
0001C0F4 6700                       		beq.s	loc_1BAF2
0001C0F6 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C0FA 93A8 0008                  		sub.l	d1,8(a0)
0001C0FE 91A8 000C                  		sub.l	d0,$C(a0)
0001C102 317C 0000 0014             		move.w	#0,$14(a0)
0001C108 4E75                       		rts	
0001C10A                            ; ===========================================================================
0001C10A                            
0001C10A                            loc_1BAF2:
0001C10A 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C10E 4E75                       		rts	
0001C110                            ; End of function Obj09_Move
0001C110                            
0001C110                            
0001C110                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C110                            
0001C110                            
0001C110                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C110 08E8 0000 0022             		bset	#0,$22(a0)
0001C116 3028 0014                  		move.w	$14(a0),d0
0001C11A 6700                       		beq.s	loc_1BB06
0001C11C 6A00                       		bpl.s	loc_1BB1A
0001C11E                            
0001C11E                            loc_1BB06:
0001C11E 0440 000C                  		subi.w	#$C,d0
0001C122 0C40 F800                  		cmpi.w	#-$800,d0
0001C126 6E00                       		bgt.s	loc_1BB14
0001C128 303C F800                  		move.w	#-$800,d0
0001C12C                            
0001C12C                            loc_1BB14:
0001C12C 3140 0014                  		move.w	d0,$14(a0)
0001C130 4E75                       		rts	
0001C132                            ; ===========================================================================
0001C132                            
0001C132                            loc_1BB1A:
0001C132 0440 0040                  		subi.w	#$40,d0
0001C136 6400                       		bcc.s	loc_1BB22
0001C138 4E71                       		nop	
0001C13A                            
0001C13A                            loc_1BB22:
0001C13A 3140 0014                  		move.w	d0,$14(a0)
0001C13E 4E75                       		rts	
0001C140                            ; End of function Obj09_MoveLeft
0001C140                            
0001C140                            
0001C140                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C140                            
0001C140                            
0001C140                            Obj09_MoveRight:			; XREF: Obj09_Move
0001C140 08A8 0000 0022             		bclr	#0,$22(a0)
0001C146 3028 0014                  		move.w	$14(a0),d0
0001C14A 6B00                       		bmi.s	loc_1BB48
0001C14C 0640 000C                  		addi.w	#$C,d0
0001C150 0C40 0800                  		cmpi.w	#$800,d0
0001C154 6D00                       		blt.s	loc_1BB42
0001C156 303C 0800                  		move.w	#$800,d0
0001C15A                            
0001C15A                            loc_1BB42:
0001C15A 3140 0014                  		move.w	d0,$14(a0)
0001C15E 6000                       		bra.s	locret_1BB54
0001C160                            ; ===========================================================================
0001C160                            
0001C160                            loc_1BB48:
0001C160 0640 0040                  		addi.w	#$40,d0
0001C164 6400                       		bcc.s	loc_1BB50
0001C166 4E71                       		nop	
0001C168                            
0001C168                            loc_1BB50:
0001C168 3140 0014                  		move.w	d0,$14(a0)
0001C16C                            
0001C16C                            locret_1BB54:
0001C16C 4E75                       		rts	
0001C16E                            ; End of function Obj09_MoveRight
0001C16E                            
0001C16E                            
0001C16E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C16E                            
0001C16E                            
0001C16E                            Obj09_Jump:				; XREF: Obj09_OnWall
0001C16E 1038 F603                  		move.b	($FFFFF603).w,d0
0001C172 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001C176 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001C178 1038 F780                  		move.b	($FFFFF780).w,d0
0001C17C 0200 00FC                  		andi.b	#$FC,d0
0001C180 4400                       		neg.b	d0
0001C182 0400 0040                  		subi.b	#$40,d0
0001C186 4EB9 0000 2BE8             		jsr	(CalcSine).l
0001C18C C3FC 0680                  		muls.w	#$680,d1
0001C190 E081                       		asr.l	#8,d1
0001C192 3141 0010                  		move.w	d1,$10(a0)
0001C196 C1FC 0680                  		muls.w	#$680,d0
0001C19A E080                       		asr.l	#8,d0
0001C19C 3140 0012                  		move.w	d0,$12(a0)
0001C1A0 08E8 0001 0022             		bset	#1,$22(a0)
0001C1A6 303C 00A0                  		move.w	#$A0,d0
0001C1AA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play jumping sound
0001C1B0                            
0001C1B0                            Obj09_NoJump:
0001C1B0 4E75                       		rts	
0001C1B2                            ; End of function Obj09_Jump
0001C1B2                            
0001C1B2                            
0001C1B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C1B2                            
0001C1B2                            
0001C1B2                            nullsub_2:				; XREF: Obj09_InAir
0001C1B2 4E75                       		rts	
0001C1B4                            ; End of function nullsub_2
0001C1B4                            
0001C1B4                            ; ===========================================================================
0001C1B4                            ; ---------------------------------------------------------------------------
0001C1B4                            ; unused subroutine to limit Sonic's upward vertical speed
0001C1B4                            ; ---------------------------------------------------------------------------
0001C1B4 323C FC00                  		move.w	#-$400,d1
0001C1B8 B268 0012                  		cmp.w	$12(a0),d1
0001C1BC 6F00                       		ble.s	locret_1BBB4
0001C1BE 1038 F602                  		move.b	($FFFFF602).w,d0
0001C1C2 0200 0070                  		andi.b	#$70,d0
0001C1C6 6600                       		bne.s	locret_1BBB4
0001C1C8 3141 0012                  		move.w	d1,$12(a0)
0001C1CC                            
0001C1CC                            locret_1BBB4:
0001C1CC 4E75                       		rts	
0001C1CE                            ; ---------------------------------------------------------------------------
0001C1CE                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C1CE                            ; ---------------------------------------------------------------------------
0001C1CE                            
0001C1CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C1CE                            
0001C1CE                            
0001C1CE                            SS_FixCamera:				; XREF: Obj09
0001C1CE 3428 000C                  		move.w	$C(a0),d2
0001C1D2 3628 0008                  		move.w	8(a0),d3
0001C1D6 3038 F700                  		move.w	($FFFFF700).w,d0
0001C1DA 0443 00A0                  		subi.w	#$A0,d3
0001C1DE 6500                       		bcs.s	loc_1BBCE
0001C1E0 9043                       		sub.w	d3,d0
0001C1E2 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C1E6                            
0001C1E6                            loc_1BBCE:
0001C1E6 3038 F704                  		move.w	($FFFFF704).w,d0
0001C1EA 0442 0070                  		subi.w	#$70,d2
0001C1EE 6500                       		bcs.s	locret_1BBDE
0001C1F0 9042                       		sub.w	d2,d0
0001C1F2 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C1F6                            
0001C1F6                            locret_1BBDE:
0001C1F6 4E75                       		rts	
0001C1F8                            ; End of function SS_FixCamera
0001C1F8                            
0001C1F8                            ; ===========================================================================
0001C1F8                            
0001C1F8                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C1F8 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C1FE 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C204 6600                       		bne.s	loc_1BBF4
0001C206 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C20C                            
0001C20C                            loc_1BBF4:
0001C20C 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C212 6D00                       		blt.s	loc_1BC12
0001C214 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C21A 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001C220 5428 0024                  		addq.b	#2,$24(a0)
0001C224 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C22A                            
0001C22A                            loc_1BC12:
0001C22A 3038 F780                  		move.w	($FFFFF780).w,d0
0001C22E D078 F782                  		add.w	($FFFFF782).w,d0
0001C232 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C236 4EB9 0001 3F7E             		jsr	Sonic_Animate
0001C23C 4EB9 0001 41FA             		jsr	LoadSonicDynPLC
0001C242 6100 FF8A                  		bsr.w	SS_FixCamera
0001C246 4EF9 0000 DB40             		jmp	DisplaySprite
0001C24C                            ; ===========================================================================
0001C24C                            
0001C24C                            Obj09_Exit2:				; XREF: Obj09_Index
0001C24C 5368 0038                  		subq.w	#1,$38(a0)
0001C250 6600                       		bne.s	loc_1BC40
0001C252 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C258                            
0001C258                            loc_1BC40:
0001C258 4EB9 0001 3F7E             		jsr	Sonic_Animate
0001C25E 4EB9 0001 41FA             		jsr	LoadSonicDynPLC
0001C264 6100 FF68                  		bsr.w	SS_FixCamera
0001C268 4EF9 0000 DB40             		jmp	DisplaySprite
0001C26E                            
0001C26E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C26E                            
0001C26E                            
0001C26E                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C26E 2428 000C                  		move.l	$C(a0),d2
0001C272 2628 0008                  		move.l	8(a0),d3
0001C276 1038 F780                  		move.b	($FFFFF780).w,d0
0001C27A 0200 00FC                  		andi.b	#$FC,d0
0001C27E 4EB9 0000 2BE8             		jsr	(CalcSine).l
0001C284 3828 0010                  		move.w	$10(a0),d4
0001C288 48C4                       		ext.l	d4
0001C28A E184                       		asl.l	#8,d4
0001C28C C1FC 002A                  		muls.w	#$2A,d0
0001C290 D084                       		add.l	d4,d0
0001C292 3828 0012                  		move.w	$12(a0),d4
0001C296 48C4                       		ext.l	d4
0001C298 E184                       		asl.l	#8,d4
0001C29A C3FC 002A                  		muls.w	#$2A,d1
0001C29E D284                       		add.l	d4,d1
0001C2A0 D680                       		add.l	d0,d3
0001C2A2 6100 0000                  		bsr.w	sub_1BCE8
0001C2A6 6700                       		beq.s	loc_1BCB0
0001C2A8 9680                       		sub.l	d0,d3
0001C2AA 7000                       		moveq	#0,d0
0001C2AC 3140 0010                  		move.w	d0,$10(a0)
0001C2B0 08A8 0001 0022             		bclr	#1,$22(a0)
0001C2B6 D481                       		add.l	d1,d2
0001C2B8 6100 0000                  		bsr.w	sub_1BCE8
0001C2BC 6700                       		beq.s	loc_1BCC6
0001C2BE 9481                       		sub.l	d1,d2
0001C2C0 7200                       		moveq	#0,d1
0001C2C2 3141 0012                  		move.w	d1,$12(a0)
0001C2C6 4E75                       		rts	
0001C2C8                            ; ===========================================================================
0001C2C8                            
0001C2C8                            loc_1BCB0:
0001C2C8 D481                       		add.l	d1,d2
0001C2CA 6100 0000                  		bsr.w	sub_1BCE8
0001C2CE 6700                       		beq.s	loc_1BCD4
0001C2D0 9481                       		sub.l	d1,d2
0001C2D2 7200                       		moveq	#0,d1
0001C2D4 3141 0012                  		move.w	d1,$12(a0)
0001C2D8 08A8 0001 0022             		bclr	#1,$22(a0)
0001C2DE                            
0001C2DE                            loc_1BCC6:
0001C2DE E080                       		asr.l	#8,d0
0001C2E0 E081                       		asr.l	#8,d1
0001C2E2 3140 0010                  		move.w	d0,$10(a0)
0001C2E6 3141 0012                  		move.w	d1,$12(a0)
0001C2EA 4E75                       		rts	
0001C2EC                            ; ===========================================================================
0001C2EC                            
0001C2EC                            loc_1BCD4:
0001C2EC E080                       		asr.l	#8,d0
0001C2EE E081                       		asr.l	#8,d1
0001C2F0 3140 0010                  		move.w	d0,$10(a0)
0001C2F4 3141 0012                  		move.w	d1,$12(a0)
0001C2F8 08E8 0001 0022             		bset	#1,$22(a0)
0001C2FE 4E75                       		rts	
0001C300                            ; End of function Obj09_Fall
0001C300                            
0001C300                            
0001C300                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C300                            
0001C300                            
0001C300                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C300 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C306 7800                       		moveq	#0,d4
0001C308 4842                       		swap	d2
0001C30A 3802                       		move.w	d2,d4
0001C30C 4842                       		swap	d2
0001C30E 0644 0044                  		addi.w	#$44,d4
0001C312 88FC 0018                  		divu.w	#$18,d4
0001C316 C8FC 0080                  		mulu.w	#$80,d4
0001C31A D3C4                       		adda.l	d4,a1
0001C31C 7800                       		moveq	#0,d4
0001C31E 4843                       		swap	d3
0001C320 3803                       		move.w	d3,d4
0001C322 4843                       		swap	d3
0001C324 0644 0014                  		addi.w	#$14,d4
0001C328 88FC 0018                  		divu.w	#$18,d4
0001C32C D2C4                       		adda.w	d4,a1
0001C32E 7A00                       		moveq	#0,d5
0001C330 1819                       		move.b	(a1)+,d4
0001C332 6100                       		bsr.s	sub_1BD30
0001C334 1819                       		move.b	(a1)+,d4
0001C336 6100                       		bsr.s	sub_1BD30
0001C338 D2FC 007E                  		adda.w	#$7E,a1
0001C33C 1819                       		move.b	(a1)+,d4
0001C33E 6100                       		bsr.s	sub_1BD30
0001C340 1819                       		move.b	(a1)+,d4
0001C342 6100                       		bsr.s	sub_1BD30
0001C344 4A05                       		tst.b	d5
0001C346 4E75                       		rts	
0001C348                            ; End of function sub_1BCE8
0001C348                            
0001C348                            
0001C348                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C348                            
0001C348                            
0001C348                            sub_1BD30:				; XREF: sub_1BCE8
0001C348 6700                       		beq.s	locret_1BD44
0001C34A 0C04 0028                  		cmpi.b	#$28,d4
0001C34E 6700                       		beq.s	locret_1BD44
0001C350 0C04 003A                  		cmpi.b	#$3A,d4
0001C354 6500                       		bcs.s	loc_1BD46
0001C356 0C04 004B                  		cmpi.b	#$4B,d4
0001C35A 6400                       		bcc.s	loc_1BD46
0001C35C                            
0001C35C                            locret_1BD44:
0001C35C 4E75                       		rts	
0001C35E                            ; ===========================================================================
0001C35E                            
0001C35E                            loc_1BD46:
0001C35E 1144 0030                  		move.b	d4,$30(a0)
0001C362 2149 0032                  		move.l	a1,$32(a0)
0001C366 7AFF                       		moveq	#-1,d5
0001C368 4E75                       		rts	
0001C36A                            ; End of function sub_1BD30
0001C36A                            
0001C36A                            
0001C36A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C36A                            
0001C36A                            
0001C36A                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C36A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C370 7800                       		moveq	#0,d4
0001C372 3828 000C                  		move.w	$C(a0),d4
0001C376 0644 0050                  		addi.w	#$50,d4
0001C37A 88FC 0018                  		divu.w	#$18,d4
0001C37E C8FC 0080                  		mulu.w	#$80,d4
0001C382 D3C4                       		adda.l	d4,a1
0001C384 7800                       		moveq	#0,d4
0001C386 3828 0008                  		move.w	8(a0),d4
0001C38A 0644 0020                  		addi.w	#$20,d4
0001C38E 88FC 0018                  		divu.w	#$18,d4
0001C392 D2C4                       		adda.w	d4,a1
0001C394 1811                       		move.b	(a1),d4
0001C396 6600                       		bne.s	Obj09_ChkCont
0001C398 4A28 003A                  		tst.b	$3A(a0)
0001C39C 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C3A0 7800                       		moveq	#0,d4
0001C3A2 4E75                       		rts	
0001C3A4                            ; ===========================================================================
0001C3A4                            
0001C3A4                            Obj09_ChkCont:
0001C3A4 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C3A8 6600                       		bne.s	Obj09_Chk1Up
0001C3AA 6100 F728                  		bsr.w	SS_RemoveCollectedItem
0001C3AE 6600                       		bne.s	Obj09_GetCont
0001C3B0 14BC 0001                  		move.b	#1,(a2)
0001C3B4 2549 0004                  		move.l	a1,4(a2)
0001C3B8                            
0001C3B8                            Obj09_GetCont:
0001C3B8 4EB9 0000 A096             		jsr	CollectRing
0001C3BE 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C3C4 6500                       		bcs.s	Obj09_NoCont
0001C3C6 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C3CC 6600                       		bne.s	Obj09_NoCont
0001C3CE 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C3D2 303C 00BF                  		move.w	#$BF,d0
0001C3D6 4EB9 0000 15B6             		jsr	(PlaySound).l	; play extra continue sound
0001C3DC                            
0001C3DC                            Obj09_NoCont:
0001C3DC 7800                       		moveq	#0,d4
0001C3DE 4E75                       		rts	
0001C3E0                            ; ===========================================================================
0001C3E0                            
0001C3E0                            Obj09_Chk1Up:
0001C3E0 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C3E4 6600                       		bne.s	Obj09_ChkEmer
0001C3E6 6100 F6EC                  		bsr.w	SS_RemoveCollectedItem
0001C3EA 6600                       		bne.s	Obj09_Get1Up
0001C3EC 14BC 0003                  		move.b	#3,(a2)
0001C3F0 2549 0004                  		move.l	a1,4(a2)
0001C3F4                            
0001C3F4                            Obj09_Get1Up:
0001C3F4 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C3F8 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C3FC 303C 0088                  		move.w	#$88,d0
0001C400 4EB9 0000 15B6             		jsr	(PlaySound).l	; play extra life music
0001C406 7800                       		moveq	#0,d4
0001C408 4E75                       		rts	
0001C40A                            ; ===========================================================================
0001C40A                            
0001C40A                            Obj09_ChkEmer:
0001C40A 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C40E 6500                       		bcs.s	Obj09_ChkGhost
0001C410 0C04 0040                  		cmpi.b	#$40,d4
0001C414 6200                       		bhi.s	Obj09_ChkGhost
0001C416 6100 F6BC                  		bsr.w	SS_RemoveCollectedItem
0001C41A 6600                       		bne.s	Obj09_GetEmer
0001C41C 14BC 0005                  		move.b	#5,(a2)
0001C420 2549 0004                  		move.l	a1,4(a2)
0001C424                            
0001C424                            Obj09_GetEmer:
0001C424 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C42A 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C42C 0404 003B                  		subi.b	#$3B,d4
0001C430 7000                       		moveq	#0,d0
0001C432 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C436 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C43A 1584 0000                  		move.b	d4,(a2,d0.w)
0001C43E 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C442                            
0001C442                            Obj09_NoEmer:
0001C442 303C 0093                  		move.w	#$93,d0
0001C446 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play emerald music
0001C44C 7800                       		moveq	#0,d4
0001C44E 4E75                       		rts	
0001C450                            ; ===========================================================================
0001C450                            
0001C450                            Obj09_ChkGhost:
0001C450 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C454 6600                       		bne.s	Obj09_ChkGhostTag
0001C456 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C45C                            
0001C45C                            Obj09_ChkGhostTag:
0001C45C 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C460 6600                       		bne.s	Obj09_NoGhost
0001C462 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C468 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C46A 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C470                            
0001C470                            Obj09_NoGhost:
0001C470 78FF                       		moveq	#-1,d4
0001C472 4E75                       		rts	
0001C474                            ; ===========================================================================
0001C474                            
0001C474                            Obj09_MakeGhostSolid:
0001C474 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C47A 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C47C 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C482 723F                       		moveq	#$3F,d1
0001C484                            
0001C484                            Obj09_GhostLoop2:
0001C484 743F                       		moveq	#$3F,d2
0001C486                            
0001C486                            Obj09_GhostLoop:
0001C486 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C48A 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C48C 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C490                            
0001C490                            Obj09_NoReplace:
0001C490 5249                       		addq.w	#1,a1
0001C492 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C496 43E9 0040                  		lea	$40(a1),a1
0001C49A 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C49E                            
0001C49E                            Obj09_GhostNotSolid:
0001C49E 4228 003A                  		clr.b	$3A(a0)
0001C4A2 7800                       		moveq	#0,d4
0001C4A4 4E75                       		rts	
0001C4A6                            ; End of function Obj09_ChkItems
0001C4A6                            
0001C4A6                            
0001C4A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4A6                            
0001C4A6                            
0001C4A6                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C4A6 1028 0030                  		move.b	$30(a0),d0
0001C4AA 6600                       		bne.s	Obj09_ChkBumper
0001C4AC 5328 0036                  		subq.b	#1,$36(a0)
0001C4B0 6A00                       		bpl.s	loc_1BEA0
0001C4B2 117C 0000 0036             		move.b	#0,$36(a0)
0001C4B8                            
0001C4B8                            loc_1BEA0:
0001C4B8 5328 0037                  		subq.b	#1,$37(a0)
0001C4BC 6A00                       		bpl.s	locret_1BEAC
0001C4BE 117C 0000 0037             		move.b	#0,$37(a0)
0001C4C4                            
0001C4C4                            locret_1BEAC:
0001C4C4 4E75                       		rts	
0001C4C6                            ; ===========================================================================
0001C4C6                            
0001C4C6                            Obj09_ChkBumper:
0001C4C6 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C4CA 6600                       		bne.s	Obj09_GOAL
0001C4CC 2228 0032                  		move.l	$32(a0),d1
0001C4D0 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C4D6 3401                       		move.w	d1,d2
0001C4D8 0241 007F                  		andi.w	#$7F,d1
0001C4DC C2FC 0018                  		mulu.w	#$18,d1
0001C4E0 0441 0014                  		subi.w	#$14,d1
0001C4E4 EE4A                       		lsr.w	#7,d2
0001C4E6 0242 007F                  		andi.w	#$7F,d2
0001C4EA C4FC 0018                  		mulu.w	#$18,d2
0001C4EE 0442 0044                  		subi.w	#$44,d2
0001C4F2 9268 0008                  		sub.w	8(a0),d1
0001C4F6 9468 000C                  		sub.w	$C(a0),d2
0001C4FA 4EB9 0000 2EB6             		jsr	(CalcAngle).l
0001C500 4EB9 0000 2BE8             		jsr	(CalcSine).l
0001C506 C3FC F900                  		muls.w	#-$700,d1
0001C50A E081                       		asr.l	#8,d1
0001C50C 3141 0010                  		move.w	d1,$10(a0)
0001C510 C1FC F900                  		muls.w	#-$700,d0
0001C514 E080                       		asr.l	#8,d0
0001C516 3140 0012                  		move.w	d0,$12(a0)
0001C51A 08E8 0001 0022             		bset	#1,$22(a0)
0001C520 6100 F5B2                  		bsr.w	SS_RemoveCollectedItem
0001C524 6600                       		bne.s	Obj09_BumpSnd
0001C526 14BC 0002                  		move.b	#2,(a2)
0001C52A 2028 0032                  		move.l	$32(a0),d0
0001C52E 5380                       		subq.l	#1,d0
0001C530 2540 0004                  		move.l	d0,4(a2)
0001C534                            
0001C534                            Obj09_BumpSnd:
0001C534 303C 00B4                  		move.w	#$B4,d0
0001C538 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C53E                            ; ===========================================================================
0001C53E                            
0001C53E                            Obj09_GOAL:
0001C53E 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C542 6600                       		bne.s	Obj09_UPblock
0001C544 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C548 303C 00A8                  		move.w	#$A8,d0		; change item
0001C54C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C552 4E75                       		rts	
0001C554                            ; ===========================================================================
0001C554                            
0001C554                            Obj09_UPblock:
0001C554 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C558 6600                       		bne.s	Obj09_DOWNblock
0001C55A 4A28 0036                  		tst.b	$36(a0)
0001C55E 6600 0000                  		bne.w	Obj09_NoGlass
0001C562 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C568 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C56E 6700                       		beq.s	Obj09_UPsnd
0001C570 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C574 2268 0032                  		movea.l	$32(a0),a1
0001C578 5389                       		subq.l	#1,a1
0001C57A 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C57E                            
0001C57E                            Obj09_UPsnd:
0001C57E 303C 00A9                  		move.w	#$A9,d0
0001C582 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C588                            ; ===========================================================================
0001C588                            
0001C588                            Obj09_DOWNblock:
0001C588 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C58C 6600                       		bne.s	Obj09_Rblock
0001C58E 4A28 0036                  		tst.b	$36(a0)
0001C592 6600 0000                  		bne.w	Obj09_NoGlass
0001C596 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C59C 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C5A2 6600                       		bne.s	Obj09_DOWNsnd
0001C5A4 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C5A8 2268 0032                  		movea.l	$32(a0),a1
0001C5AC 5389                       		subq.l	#1,a1
0001C5AE 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C5B2                            
0001C5B2                            Obj09_DOWNsnd:
0001C5B2 303C 00A9                  		move.w	#$A9,d0
0001C5B6 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C5BC                            ; ===========================================================================
0001C5BC                            
0001C5BC                            Obj09_Rblock:
0001C5BC 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C5C0 6600                       		bne.s	Obj09_ChkGlass
0001C5C2 4A28 0037                  		tst.b	$37(a0)
0001C5C6 6600 0000                  		bne.w	Obj09_NoGlass
0001C5CA 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C5D0 6100 F502                  		bsr.w	SS_RemoveCollectedItem
0001C5D4 6600                       		bne.s	Obj09_RevStage
0001C5D6 14BC 0004                  		move.b	#4,(a2)
0001C5DA 2028 0032                  		move.l	$32(a0),d0
0001C5DE 5380                       		subq.l	#1,d0
0001C5E0 2540 0004                  		move.l	d0,4(a2)
0001C5E4                            
0001C5E4                            Obj09_RevStage:
0001C5E4 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C5E8 303C 00A9                  		move.w	#$A9,d0
0001C5EC 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play sound
0001C5F2                            ; ===========================================================================
0001C5F2                            
0001C5F2                            Obj09_ChkGlass:
0001C5F2 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C5F6 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C5F8 0C00 002E                  		cmpi.b	#$2E,d0
0001C5FC 6700                       		beq.s	Obj09_Glass
0001C5FE 0C00 002F                  		cmpi.b	#$2F,d0
0001C602 6700                       		beq.s	Obj09_Glass
0001C604 0C00 0030                  		cmpi.b	#$30,d0
0001C608 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C60A                            
0001C60A                            Obj09_Glass:
0001C60A 6100 F4C8                  		bsr.w	SS_RemoveCollectedItem
0001C60E 6600                       		bne.s	Obj09_GlassSnd
0001C610 14BC 0006                  		move.b	#6,(a2)
0001C614 2268 0032                  		movea.l	$32(a0),a1
0001C618 5389                       		subq.l	#1,a1
0001C61A 2549 0004                  		move.l	a1,4(a2)
0001C61E 1011                       		move.b	(a1),d0
0001C620 5200                       		addq.b	#1,d0		; change glass type when touched
0001C622 0C00 0030                  		cmpi.b	#$30,d0
0001C626 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C628 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C62A                            
0001C62A                            Obj09_GlassUpdate:
0001C62A 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C62E                            
0001C62E                            Obj09_GlassSnd:
0001C62E 303C 00BA                  		move.w	#$BA,d0
0001C632 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C638                            ; ===========================================================================
0001C638                            
0001C638                            Obj09_NoGlass:
0001C638 4E75                       		rts	
0001C63A                            ; End of function Obj09_ChkItems2
0001C63A                            
0001C63A                            ; ===========================================================================
0001C63A                            ; ---------------------------------------------------------------------------
0001C63A                            ; Object 10 - blank
0001C63A                            ; ---------------------------------------------------------------------------
0001C63A                            
0001C63A                            Obj10:					; XREF: Obj_Index
0001C63A 4E75                       		rts	
0001C63C                            ; ---------------------------------------------------------------------------
0001C63C                            ; Subroutine to	animate	level graphics
0001C63C                            ; ---------------------------------------------------------------------------
0001C63C                            
0001C63C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C63C                            
0001C63C                            
0001C63C                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C63C 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C640 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C642 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C648 6100 0000                  		bsr.w	AniArt_GiantRing
0001C64C 7000                       		moveq	#0,d0
0001C64E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C652 D040                       		add.w	d0,d0
0001C654 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C658 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C65C                            ; ===========================================================================
0001C65C                            
0001C65C                            AniArt_Pause:
0001C65C 4E75                       		rts	
0001C65E                            ; End of function AniArt_Load
0001C65E                            
0001C65E                            ; ===========================================================================
0001C65E 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C662 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C666 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C66A 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C66C                            ; ===========================================================================
0001C66C                            ; ---------------------------------------------------------------------------
0001C66C                            ; Animated pattern routine - Green Hill
0001C66C                            ; ---------------------------------------------------------------------------
0001C66C                            
0001C66C                            AniArt_GHZ:				; XREF: AniArt_Index
0001C66C 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C670 6A00                       		bpl.s	loc_1C08A
0001C672 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C678 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C67E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C682 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C686 0240 0001                  		andi.w	#1,d0
0001C68A 6700                       		beq.s	loc_1C078
0001C68C 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C690                            
0001C690                            loc_1C078:
0001C690 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C69A 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C69E 6000 0000                  		bra.w	LoadTiles
0001C6A2                            ; ===========================================================================
0001C6A2                            
0001C6A2                            loc_1C08A:
0001C6A2 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C6A6 6A00                       		bpl.s	loc_1C0C0
0001C6A8 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C6AE 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C6B4 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C6B8 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C6BC 0240 0001                  		andi.w	#1,d0
0001C6C0 6700                       		beq.s	loc_1C0AE
0001C6C2 43E9 0200                  		lea	$200(a1),a1
0001C6C6                            
0001C6C6                            loc_1C0AE:
0001C6C6 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C6D0 323C 000F                  		move.w	#$F,d1
0001C6D4 6000 0000                  		bra.w	LoadTiles
0001C6D8                            ; ===========================================================================
0001C6D8                            
0001C6D8                            loc_1C0C0:
0001C6D8 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C6DC 6A00                       		bpl.s	locret_1C10C
0001C6DE 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C6E4 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C6E8 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C6EC 0240 0003                  		andi.w	#3,d0
0001C6F0 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C6F4 0800 0000                  		btst	#0,d0
0001C6F8 6600                       		bne.s	loc_1C0E8
0001C6FA 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C700                            
0001C700                            loc_1C0E8:
0001C700 EF48                       		lsl.w	#7,d0
0001C702 3200                       		move.w	d0,d1
0001C704 D040                       		add.w	d0,d0
0001C706 D041                       		add.w	d1,d0
0001C708 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C712 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C718 43F1 0000                  		lea	(a1,d0.w),a1
0001C71C 323C 000B                  		move.w	#$B,d1
0001C720 6100 0000                  		bsr.w	LoadTiles
0001C724                            
0001C724                            locret_1C10C:
0001C724 4E75                       		rts	
0001C726                            ; ===========================================================================
0001C726 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C72A                            ; ===========================================================================
0001C72A                            ; ---------------------------------------------------------------------------
0001C72A                            ; Animated pattern routine - Marble
0001C72A                            ; ---------------------------------------------------------------------------
0001C72A                            
0001C72A                            AniArt_MZ:				; XREF: AniArt_Index
0001C72A 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C72E 6A00                       		bpl.s	loc_1C150
0001C730 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C736 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C73C 7000                       		moveq	#0,d0
0001C73E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C742 5200                       		addq.b	#1,d0
0001C744 0C00 0003                  		cmpi.b	#3,d0
0001C748 6600                       		bne.s	loc_1C134
0001C74A 7000                       		moveq	#0,d0
0001C74C                            
0001C74C                            loc_1C134:
0001C74C 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C750 C0FC 0100                  		mulu.w	#$100,d0
0001C754 D2C0                       		adda.w	d0,a1
0001C756 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C760 323C 0007                  		move.w	#7,d1
0001C764 6100 0000                  		bsr.w	LoadTiles
0001C768                            
0001C768                            loc_1C150:
0001C768 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C76C 6A00                       		bpl.s	loc_1C1AE
0001C76E 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C774 7000                       		moveq	#0,d0
0001C776 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C77A 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C780 EE58                       		ror.w	#7,d0
0001C782 D8C0                       		adda.w	d0,a4
0001C784 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C78E 7600                       		moveq	#0,d3
0001C790 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C794 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C798 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C79C 343C 0003                  		move.w	#3,d2
0001C7A0                            
0001C7A0                            loc_1C188:
0001C7A0 3003                       		move.w	d3,d0
0001C7A2 D040                       		add.w	d0,d0
0001C7A4 0240 001E                  		andi.w	#$1E,d0
0001C7A8 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001C7AE 3033 0000                  		move.w	(a3,d0.w),d0
0001C7B2 47F3 0000                  		lea	(a3,d0.w),a3
0001C7B6 224C                       		movea.l	a4,a1
0001C7B8 323C 001F                  		move.w	#$1F,d1
0001C7BC 4E93                       		jsr	(a3)
0001C7BE 5843                       		addq.w	#4,d3
0001C7C0 51CA FFDE                  		dbf	d2,loc_1C188
0001C7C4 4E75                       		rts	
0001C7C6                            ; ===========================================================================
0001C7C6                            
0001C7C6                            loc_1C1AE:
0001C7C6 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C7CA 6A00 0000                  		bpl.w	locret_1C1EA
0001C7CE 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C7D4 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001C7DA 7000                       		moveq	#0,d0
0001C7DC 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001C7E0 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001C7E4 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001C7EA C0FC 00C0                  		mulu.w	#$C0,d0
0001C7EE D2C0                       		adda.w	d0,a1
0001C7F0 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001C7FA 323C 0005                  		move.w	#5,d1
0001C7FE 6000 0000                  		bra.w	LoadTiles
0001C802                            ; ===========================================================================
0001C802                            
0001C802                            locret_1C1EA:
0001C802 4E75                       		rts	
0001C804                            ; ===========================================================================
0001C804                            ; ---------------------------------------------------------------------------
0001C804                            ; Animated pattern routine - Scrap Brain
0001C804                            ; ---------------------------------------------------------------------------
0001C804                            
0001C804                            AniArt_SBZ:				; XREF: AniArt_Index
0001C804 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001C808 6700                       		beq.s	loc_1C1F8
0001C80A 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001C80E 6000                       		bra.s	loc_1C250
0001C810                            ; ===========================================================================
0001C810                            
0001C810                            loc_1C1F8:
0001C810 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C814 6A00                       		bpl.s	loc_1C250
0001C816 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001C81C 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001C822 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001C82C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C830 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C834 0240 0007                  		andi.w	#7,d0
0001C838 6700                       		beq.s	loc_1C234
0001C83A 5340                       		subq.w	#1,d0
0001C83C C0FC 0180                  		mulu.w	#$180,d0
0001C840 43F1 0000                  		lea	(a1,d0.w),a1
0001C844 323C 000B                  		move.w	#$B,d1
0001C848 6000 0000                  		bra.w	LoadTiles
0001C84C                            ; ===========================================================================
0001C84C                            
0001C84C                            loc_1C234:
0001C84C 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001C852                            
0001C852                            loc_1C23A:
0001C852 323C 0005                  		move.w	#5,d1
0001C856 6100 0000                  		bsr.w	LoadTiles
0001C85A 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C860 323C 0005                  		move.w	#5,d1
0001C864 6000 0000                  		bra.w	LoadTiles
0001C868                            ; ===========================================================================
0001C868                            
0001C868                            loc_1C250:
0001C868 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001C86C 6700                       		beq.s	loc_1C25C
0001C86E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C872 6000                       		bra.s	locret_1C2A0
0001C874                            ; ===========================================================================
0001C874                            
0001C874                            loc_1C25C:
0001C874 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C878 6A00                       		bpl.s	locret_1C2A0
0001C87A 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C880 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C886 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001C890 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C894 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C898 0240 0007                  		andi.w	#7,d0
0001C89C 6700                       		beq.s	loc_1C298
0001C89E 5340                       		subq.w	#1,d0
0001C8A0 C0FC 0180                  		mulu.w	#$180,d0
0001C8A4 43F1 0000                  		lea	(a1,d0.w),a1
0001C8A8 323C 000B                  		move.w	#$B,d1
0001C8AC 6000 0000                  		bra.w	LoadTiles
0001C8B0                            ; ===========================================================================
0001C8B0                            
0001C8B0                            loc_1C298:
0001C8B0 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001C8B6 609A                       		bra.s	loc_1C23A
0001C8B8                            ; ===========================================================================
0001C8B8                            
0001C8B8                            locret_1C2A0:
0001C8B8 4E75                       		rts	
0001C8BA                            ; ===========================================================================
0001C8BA                            ; ---------------------------------------------------------------------------
0001C8BA                            ; Animated pattern routine - ending sequence
0001C8BA                            ; ---------------------------------------------------------------------------
0001C8BA                            
0001C8BA                            AniArt_Ending:				; XREF: AniArt_Index
0001C8BA 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C8BE 6A00                       		bpl.s	loc_1C2F4
0001C8C0 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C8C6 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C8CC 45F8 9400                  		lea	($FFFF9400).w,a2
0001C8D0 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C8D4 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C8D8 0240 0001                  		andi.w	#1,d0
0001C8DC 6700                       		beq.s	loc_1C2CE
0001C8DE 43E9 0200                  		lea	$200(a1),a1
0001C8E2 45EA 0200                  		lea	$200(a2),a2
0001C8E6                            
0001C8E6                            loc_1C2CE:
0001C8E6 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C8F0 323C 000F                  		move.w	#$F,d1
0001C8F4 6100 0000                  		bsr.w	LoadTiles
0001C8F8 224A                       		movea.l	a2,a1
0001C8FA 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001C904 323C 000F                  		move.w	#$F,d1
0001C908 6000 0000                  		bra.w	LoadTiles
0001C90C                            ; ===========================================================================
0001C90C                            
0001C90C                            loc_1C2F4:
0001C90C 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C910 6A00                       		bpl.s	loc_1C33C
0001C912 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C918 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C91C 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C920 0240 0007                  		andi.w	#7,d0
0001C924 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001C928 EF48                       		lsl.w	#7,d0
0001C92A 3200                       		move.w	d0,d1
0001C92C D040                       		add.w	d0,d0
0001C92E D041                       		add.w	d1,d0
0001C930 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C93A 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C940 43F1 0000                  		lea	(a1,d0.w),a1
0001C944 323C 000B                  		move.w	#$B,d1
0001C948 6000 0000                  		bra.w	LoadTiles
0001C94C                            ; ===========================================================================
0001C94C 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001C954                            ; ===========================================================================
0001C954                            
0001C954                            loc_1C33C:
0001C954 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001C958 6A00                       		bpl.s	loc_1C37A
0001C95A 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001C960 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001C964 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001C968 0240 0003                  		andi.w	#3,d0
0001C96C 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001C970 E148                       		lsl.w	#8,d0
0001C972 D040                       		add.w	d0,d0
0001C974 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001C97E 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001C982 43F1 0000                  		lea	(a1,d0.w),a1
0001C986 323C 000F                  		move.w	#$F,d1
0001C98A 6000 0000                  		bra.w	LoadTiles
0001C98E                            ; ===========================================================================
0001C98E 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001C992                            ; ===========================================================================
0001C992                            
0001C992                            loc_1C37A:
0001C992 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001C996 6A00                       		bpl.s	locret_1C3B4
0001C998 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001C99E 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001C9A2 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001C9A6 0240 0003                  		andi.w	#3,d0
0001C9AA 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001C9AE E148                       		lsl.w	#8,d0
0001C9B0 D040                       		add.w	d0,d0
0001C9B2 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001C9BC 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001C9C0 43F1 0000                  		lea	(a1,d0.w),a1
0001C9C4 323C 000F                  		move.w	#$F,d1
0001C9C8 6000 0000                  		bra.w	LoadTiles
0001C9CC                            ; ===========================================================================
0001C9CC                            
0001C9CC                            locret_1C3B4:
0001C9CC 4E75                       		rts	
0001C9CE                            ; ===========================================================================
0001C9CE                            
0001C9CE                            AniArt_none:				; XREF: AniArt_Index
0001C9CE 4E75                       		rts	
0001C9D0                            
0001C9D0                            ; ---------------------------------------------------------------------------
0001C9D0                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001C9D0                            ; ---------------------------------------------------------------------------
0001C9D0                            
0001C9D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9D0                            
0001C9D0                            
0001C9D0                            LoadTiles:
0001C9D0 2C99                       		move.l	(a1)+,(a6)
0001C9D2 2C99                       		move.l	(a1)+,(a6)
0001C9D4 2C99                       		move.l	(a1)+,(a6)
0001C9D6 2C99                       		move.l	(a1)+,(a6)
0001C9D8 2C99                       		move.l	(a1)+,(a6)
0001C9DA 2C99                       		move.l	(a1)+,(a6)
0001C9DC 2C99                       		move.l	(a1)+,(a6)
0001C9DE 2C99                       		move.l	(a1)+,(a6)
0001C9E0 51C9 FFEE                  		dbf	d1,LoadTiles
0001C9E4 4E75                       		rts	
0001C9E6                            ; End of function LoadTiles
0001C9E6                            
0001C9E6                            ; ===========================================================================
0001C9E6                            ; ---------------------------------------------------------------------------
0001C9E6                            ; Animated pattern routine - more Marble Zone
0001C9E6                            ; ---------------------------------------------------------------------------
0001C9E6 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001C9EA 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001C9EE 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001C9F2 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001C9F6 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001C9FA 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001C9FE 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CA02 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CA06                            ; ===========================================================================
0001CA06                            
0001CA06                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CA06 2C91                       		move.l	(a1),(a6)
0001CA08 43E9 0010                  		lea	$10(a1),a1
0001CA0C 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CA10 4E75                       		rts	
0001CA12                            ; ===========================================================================
0001CA12                            
0001CA12                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CA12 2029 0002                  		move.l	2(a1),d0
0001CA16 1029 0001                  		move.b	1(a1),d0
0001CA1A E098                       		ror.l	#8,d0
0001CA1C 2C80                       		move.l	d0,(a6)
0001CA1E 43E9 0010                  		lea	$10(a1),a1
0001CA22 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CA26 4E75                       		rts	
0001CA28                            ; ===========================================================================
0001CA28                            
0001CA28                            loc_1C410:				; XREF: AniArt_MZextra
0001CA28 2CA9 0002                  		move.l	2(a1),(a6)
0001CA2C 43E9 0010                  		lea	$10(a1),a1
0001CA30 51C9 FFF6                  		dbf	d1,loc_1C410
0001CA34 4E75                       		rts	
0001CA36                            ; ===========================================================================
0001CA36                            
0001CA36                            loc_1C41E:				; XREF: AniArt_MZextra
0001CA36 2029 0004                  		move.l	4(a1),d0
0001CA3A 1029 0003                  		move.b	3(a1),d0
0001CA3E E098                       		ror.l	#8,d0
0001CA40 2C80                       		move.l	d0,(a6)
0001CA42 43E9 0010                  		lea	$10(a1),a1
0001CA46 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CA4A 4E75                       		rts	
0001CA4C                            ; ===========================================================================
0001CA4C                            
0001CA4C                            loc_1C434:				; XREF: AniArt_MZextra
0001CA4C 2CA9 0004                  		move.l	4(a1),(a6)
0001CA50 43E9 0010                  		lea	$10(a1),a1
0001CA54 51C9 FFF6                  		dbf	d1,loc_1C434
0001CA58 4E75                       		rts	
0001CA5A                            ; ===========================================================================
0001CA5A                            
0001CA5A                            loc_1C442:				; XREF: AniArt_MZextra
0001CA5A 2029 0006                  		move.l	6(a1),d0
0001CA5E 1029 0005                  		move.b	5(a1),d0
0001CA62 E098                       		ror.l	#8,d0
0001CA64 2C80                       		move.l	d0,(a6)
0001CA66 43E9 0010                  		lea	$10(a1),a1
0001CA6A 51C9 FFEE                  		dbf	d1,loc_1C442
0001CA6E 4E75                       		rts	
0001CA70                            ; ===========================================================================
0001CA70                            
0001CA70                            loc_1C458:				; XREF: AniArt_MZextra
0001CA70 2CA9 0006                  		move.l	6(a1),(a6)
0001CA74 43E9 0010                  		lea	$10(a1),a1
0001CA78 51C9 FFF6                  		dbf	d1,loc_1C458
0001CA7C 4E75                       		rts	
0001CA7E                            ; ===========================================================================
0001CA7E                            
0001CA7E                            loc_1C466:				; XREF: AniArt_MZextra
0001CA7E 2029 0008                  		move.l	8(a1),d0
0001CA82 1029 0007                  		move.b	7(a1),d0
0001CA86 E098                       		ror.l	#8,d0
0001CA88 2C80                       		move.l	d0,(a6)
0001CA8A 43E9 0010                  		lea	$10(a1),a1
0001CA8E 51C9 FFEE                  		dbf	d1,loc_1C466
0001CA92 4E75                       		rts	
0001CA94                            ; ===========================================================================
0001CA94                            
0001CA94                            loc_1C47C:				; XREF: AniArt_MZextra
0001CA94 2CA9 0008                  		move.l	8(a1),(a6)
0001CA98 43E9 0010                  		lea	$10(a1),a1
0001CA9C 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CAA0 4E75                       		rts	
0001CAA2                            ; ===========================================================================
0001CAA2                            
0001CAA2                            loc_1C48A:				; XREF: AniArt_MZextra
0001CAA2 2029 000A                  		move.l	$A(a1),d0
0001CAA6 1029 0009                  		move.b	9(a1),d0
0001CAAA E098                       		ror.l	#8,d0
0001CAAC 2C80                       		move.l	d0,(a6)
0001CAAE 43E9 0010                  		lea	$10(a1),a1
0001CAB2 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CAB6 4E75                       		rts	
0001CAB8                            ; ===========================================================================
0001CAB8                            
0001CAB8                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CAB8 2CA9 000A                  		move.l	$A(a1),(a6)
0001CABC 43E9 0010                  		lea	$10(a1),a1
0001CAC0 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CAC4 4E75                       		rts	
0001CAC6                            ; ===========================================================================
0001CAC6                            
0001CAC6                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CAC6 2029 000C                  		move.l	$C(a1),d0
0001CACA 1029 000B                  		move.b	$B(a1),d0
0001CACE E098                       		ror.l	#8,d0
0001CAD0 2C80                       		move.l	d0,(a6)
0001CAD2 43E9 0010                  		lea	$10(a1),a1
0001CAD6 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CADA 4E75                       		rts	
0001CADC                            ; ===========================================================================
0001CADC                            
0001CADC                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CADC 2CA9 000C                  		move.l	$C(a1),(a6)
0001CAE0 43E9 0010                  		lea	$10(a1),a1
0001CAE4 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CAE8 4E75                       		rts	
0001CAEA                            ; ===========================================================================
0001CAEA                            
0001CAEA                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CAEA 2029 000C                  		move.l	$C(a1),d0
0001CAEE E198                       		rol.l	#8,d0
0001CAF0 1011                       		move.b	0(a1),d0
0001CAF2 2C80                       		move.l	d0,(a6)
0001CAF4 43E9 0010                  		lea	$10(a1),a1
0001CAF8 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CAFC 4E75                       		rts	
0001CAFE                            ; ===========================================================================
0001CAFE                            
0001CAFE                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CAFE 3CA9 000E                  		move.w	$E(a1),(a6)
0001CB02 3C91                       		move.w	0(a1),(a6)
0001CB04 43E9 0010                  		lea	$10(a1),a1
0001CB08 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CB0C 4E75                       		rts	
0001CB0E                            ; ===========================================================================
0001CB0E                            
0001CB0E                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CB0E 2011                       		move.l	0(a1),d0
0001CB10 1029 000F                  		move.b	$F(a1),d0
0001CB14 E098                       		ror.l	#8,d0
0001CB16 2C80                       		move.l	d0,(a6)
0001CB18 43E9 0010                  		lea	$10(a1),a1
0001CB1C 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CB20 4E75                       		rts	
0001CB22                            
0001CB22                            ; ---------------------------------------------------------------------------
0001CB22                            ; Animated pattern routine - giant ring
0001CB22                            ; ---------------------------------------------------------------------------
0001CB22                            
0001CB22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB22                            
0001CB22                            
0001CB22                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CB22 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CB26 6600                       		bne.s	loc_1C518
0001CB28 4E75                       		rts	
0001CB2A                            ; ===========================================================================
0001CB2A                            
0001CB2A                            loc_1C518:
0001CB2A 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CB30 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CB36 7000                       		moveq	#0,d0
0001CB38 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CB3C 43F1 0000                  		lea	(a1,d0.w),a1
0001CB40 0640 8000                  		addi.w	#$8000,d0
0001CB44 E588                       		lsl.l	#2,d0
0001CB46 E448                       		lsr.w	#2,d0
0001CB48 0040 4000                  		ori.w	#$4000,d0
0001CB4C 4840                       		swap	d0
0001CB4E 2D40 0004                  		move.l	d0,4(a6)
0001CB52 323C 000D                  		move.w	#$D,d1
0001CB56 6000 FE78                  		bra.w	LoadTiles
0001CB5A                            ; End of function AniArt_GiantRing
0001CB5A                            
0001CB5A                            ; ===========================================================================
0001CB5A                            ; ---------------------------------------------------------------------------
0001CB5A                            ; Object 21 - SCORE, TIME, RINGS
0001CB5A                            ; ---------------------------------------------------------------------------
0001CB5A                            
0001CB5A                            Obj21:					; XREF: Obj_Index
0001CB5A 7000                       		moveq	#0,d0
0001CB5C 1028 0024                  		move.b	$24(a0),d0
0001CB60 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CB64 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CB68                            ; ===========================================================================
0001CB68 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CB6A 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CB6C                            ; ===========================================================================
0001CB6C                            
0001CB6C                            Obj21_Main:				; XREF: Obj21_Main
0001CB6C 5428 0024                  		addq.b	#2,$24(a0)
0001CB70 317C 0090 0008             		move.w	#$90,8(a0)
0001CB76 317C 0108 000A             		move.w	#$108,$A(a0)
0001CB7C 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CB84 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CB8A 117C 0000 0001             		move.b	#0,1(a0)
0001CB90 117C 0000 0018             		move.b	#0,$18(a0)
0001CB96                            
0001CB96                            Obj21_Flash:				; XREF: Obj21_Main
0001CB96 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CB9A 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CB9C 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CBA0 4EF9 0000 DB40             		jmp	DisplaySprite
0001CBA6                            ; ===========================================================================
0001CBA6                            
0001CBA6                            Obj21_Flash2:
0001CBA6 7000                       		moveq	#0,d0
0001CBA8 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CBAE 6600                       		bne.s	Obj21_Display
0001CBB0 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CBB2 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CBB8 6600                       		bne.s	Obj21_Display	; if not, branch
0001CBBA 5440                       		addq.w	#2,d0		; make time counter flash red
0001CBBC                            
0001CBBC                            Obj21_Display:
0001CBBC 1140 001A                  		move.b	d0,$1A(a0)
0001CBC0 4EF9 0000 DB40             		jmp	DisplaySprite
0001CBC6                            ; ===========================================================================
0001CBC6                            ; ---------------------------------------------------------------------------
0001CBC6                            ; Sprite mappings - SCORE, TIME, RINGS
0001CBC6                            ; ---------------------------------------------------------------------------
0001CBC6                            Map_obj21:
0001CBC6                            	include "_maps\obj21.asm"
0001CBC6                            ; ---------------------------------------------------------------------------
0001CBC6                            ; Sprite mappings - SCORE, TIME, RINGS
0001CBC6                            ; ---------------------------------------------------------------------------
0001CBC6 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CBCA 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CBCE 0A                         byte_1C5BC:	dc.b $A
0001CBCF 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CBD4 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CBD9 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CBDE 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CBE3 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CBE8 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CBED A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CBF2 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CBF7 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CBFC 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC01 00                         		dc.b 0
0001CC02 0A                         byte_1C5F0:	dc.b $A
0001CC03 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CC08 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CC0D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CC12 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CC17 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CC1C A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CC21 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CC26 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CC2B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CC30 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC35 00                         		dc.b 0
0001CC36 0A                         byte_1C624:	dc.b $A
0001CC37 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CC3C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CC41 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CC46 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CC4B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CC50 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CC55 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CC5A A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CC5F 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CC64 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC69 00                         		dc.b 0
0001CC6A 0A                         byte_1C658:	dc.b $A
0001CC6B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CC70 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CC75 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CC7A 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CC7F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CC84 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CC89 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CC8E A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CC93 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CC98 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC9E 00                         		even
0001CC9E 00                         		even
0001CC9E                            
0001CC9E                            ; ---------------------------------------------------------------------------
0001CC9E                            ; Add points subroutine
0001CC9E                            ; ---------------------------------------------------------------------------
0001CC9E                            
0001CC9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC9E                            
0001CC9E                            
0001CC9E                            AddPoints:
0001CC9E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CCA4 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CCA8 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CCAC D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CCAE 223C 000F 423F             		move.l	#999999,d1
0001CCB4 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CCB6 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CCBA 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CCBC 2481                       		move.l	d1,(a2)
0001CCBE                            
0001CCBE                            loc_1C6AC:
0001CCBE 2013                       		move.l	(a3),d0
0001CCC0 B092                       		cmp.l	(a2),d0
0001CCC2 6500 0000                  		bcs.w	locret_1C6B6
0001CCC6 2480                       		move.l	d0,(a2)
0001CCC8                            
0001CCC8                            locret_1C6B6:
0001CCC8 4E75                       		rts	
0001CCCA                            ; End of function AddPoints
0001CCCA                            
0001CCCA                            ; ---------------------------------------------------------------------------
0001CCCA                            ; Subroutine to	update the HUD
0001CCCA                            ; ---------------------------------------------------------------------------
0001CCCA                            
0001CCCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CCCA                            
0001CCCA                            
0001CCCA                            HudUpdate:
0001CCCA 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CCCE 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CCD2 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CCD6 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CCD8 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CCDC 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CCE2 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CCE6 6100 0000                  		bsr.w	Hud_Score
0001CCEA                            
0001CCEA                            Hud_ChkRings:
0001CCEA 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CCEE 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001CCF0 6A00                       		bpl.s	loc_1C6E4
0001CCF2 6100 0000                  		bsr.w	Hud_LoadZero
0001CCF6                            
0001CCF6                            loc_1C6E4:
0001CCF6 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CCFA 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CD00 7200                       		moveq	#0,d1
0001CD02 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CD06 6100 0000                  		bsr.w	Hud_Rings
0001CD0A                            
0001CD0A                            Hud_ChkTime:
0001CD0A 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001CD0E 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001CD10 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CD14 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001CD16 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001CD1A 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001CD20 6700                       		beq.s	TimeOver	; if yes, branch
0001CD22 5221                       		addq.b	#1,-(a1)
0001CD24 0C11 003C                  		cmpi.b	#60,(a1)
0001CD28 6500                       		bcs.s	Hud_ChkLives
0001CD2A 12BC 0000                  		move.b	#0,(a1)
0001CD2E 5221                       		addq.b	#1,-(a1)
0001CD30 0C11 003C                  		cmpi.b	#60,(a1)
0001CD34 6500                       		bcs.s	loc_1C734
0001CD36 12BC 0000                  		move.b	#0,(a1)
0001CD3A 5221                       		addq.b	#1,-(a1)
0001CD3C 0C11 0009                  		cmpi.b	#9,(a1)
0001CD40 6500                       		bcs.s	loc_1C734
0001CD42 12BC 0009                  		move.b	#9,(a1)
0001CD46                            
0001CD46                            loc_1C734:
0001CD46 203C 5E40 0003             		move.l	#$5E400003,d0
0001CD4C 7200                       		moveq	#0,d1
0001CD4E 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001CD52 6100 0000                  		bsr.w	Hud_Mins
0001CD56 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001CD5C 7200                       		moveq	#0,d1
0001CD5E 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001CD62 6100 0000                  		bsr.w	Hud_Secs
0001CD66                            
0001CD66                            Hud_ChkLives:
0001CD66 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CD6A 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001CD6C 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CD70 6100 0000                  		bsr.w	Hud_Lives
0001CD74                            
0001CD74                            Hud_ChkBonus:
0001CD74 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001CD78 6700                       		beq.s	Hud_End		; if not, branch
0001CD7A 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CD7E 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001CD88 7200                       		moveq	#0,d1
0001CD8A 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CD8E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CD92 7200                       		moveq	#0,d1
0001CD94 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CD98 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CD9C                            
0001CD9C                            Hud_End:
0001CD9C 4E75                       		rts	
0001CD9E                            ; ===========================================================================
0001CD9E                            
0001CD9E                            TimeOver:				; XREF: Hud_ChkTime
0001CD9E 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001CDA2 41F8 D000                  		lea	($FFFFD000).w,a0
0001CDA6 2448                       		movea.l	a0,a2
0001CDA8 6100 E908                  		bsr.w	KillSonic
0001CDAC 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001CDB2 4E75                       		rts	
0001CDB4                            ; ===========================================================================
0001CDB4                            
0001CDB4                            HudDebug:				; XREF: HudUpdate
0001CDB4 6100 0000                  		bsr.w	HudDb_XY
0001CDB8 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CDBC 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001CDBE 6A00                       		bpl.s	HudDb_Rings
0001CDC0 6100 0000                  		bsr.w	Hud_LoadZero
0001CDC4                            
0001CDC4                            HudDb_Rings:
0001CDC4 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CDC8 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CDCE 7200                       		moveq	#0,d1
0001CDD0 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CDD4 6100 0000                  		bsr.w	Hud_Rings
0001CDD8                            
0001CDD8                            HudDb_ObjCount:
0001CDD8 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001CDDE 7200                       		moveq	#0,d1
0001CDE0 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001CDE4 6100 0000                  		bsr.w	Hud_Secs
0001CDE8 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CDEC 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001CDEE 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CDF2 6100 0000                  		bsr.w	Hud_Lives
0001CDF6                            
0001CDF6                            HudDb_ChkBonus:
0001CDF6 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001CDFA 6700                       		beq.s	HudDb_End	; if not, branch
0001CDFC 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CE00 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001CE0A 7200                       		moveq	#0,d1
0001CE0C 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CE10 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CE14 7200                       		moveq	#0,d1
0001CE16 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CE1A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CE1E                            
0001CE1E                            HudDb_End:
0001CE1E 4E75                       		rts	
0001CE20                            ; End of function HudUpdate
0001CE20                            
0001CE20                            ; ---------------------------------------------------------------------------
0001CE20                            ; Subroutine to	load "0" on the	HUD
0001CE20                            ; ---------------------------------------------------------------------------
0001CE20                            
0001CE20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE20                            
0001CE20                            
0001CE20                            Hud_LoadZero:				; XREF: HudUpdate
0001CE20 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001CE2A 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001CE2E 343C 0002                  		move.w	#2,d2
0001CE32 6000                       		bra.s	loc_1C83E
0001CE34                            ; End of function Hud_LoadZero
0001CE34                            
0001CE34                            ; ---------------------------------------------------------------------------
0001CE34                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001CE34                            ; ---------------------------------------------------------------------------
0001CE34                            
0001CE34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE34                            
0001CE34                            
0001CE34                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001CE34 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CE3A 6100 0000                  		bsr.w	Hud_Lives
0001CE3E 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001CE48 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001CE4C 343C 000E                  		move.w	#$E,d2
0001CE50                            
0001CE50                            loc_1C83E:				; XREF: Hud_LoadZero
0001CE50 43FA 0000                  		lea	Art_Hud(pc),a1
0001CE54                            
0001CE54                            loc_1C842:
0001CE54 323C 000F                  		move.w	#$F,d1
0001CE58 101A                       		move.b	(a2)+,d0
0001CE5A 6B00                       		bmi.s	loc_1C85E
0001CE5C 4880                       		ext.w	d0
0001CE5E EB48                       		lsl.w	#5,d0
0001CE60 47F1 0000                  		lea	(a1,d0.w),a3
0001CE64                            
0001CE64                            loc_1C852:
0001CE64 2C9B                       		move.l	(a3)+,(a6)
0001CE66 51C9 FFFC                  		dbf	d1,loc_1C852
0001CE6A                            
0001CE6A                            loc_1C858:
0001CE6A 51CA FFE8                  		dbf	d2,loc_1C842
0001CE6E                            
0001CE6E 4E75                       		rts	
0001CE70                            ; ===========================================================================
0001CE70                            
0001CE70                            loc_1C85E:
0001CE70 2CBC 0000 0000             		move.l	#0,(a6)
0001CE76 51C9 FFF8                  		dbf	d1,loc_1C85E
0001CE7A                            
0001CE7A 60EE                       		bra.s	loc_1C858
0001CE7C                            ; End of function Hud_Base
0001CE7C                            
0001CE7C                            ; ===========================================================================
0001CE7C 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001CE88 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001CE8C                            ; ---------------------------------------------------------------------------
0001CE8C                            ; Subroutine to	load debug mode	numbers	patterns
0001CE8C                            ; ---------------------------------------------------------------------------
0001CE8C                            
0001CE8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE8C                            
0001CE8C                            
0001CE8C                            HudDb_XY:				; XREF: HudDebug
0001CE8C 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001CE96 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001CE9A 4841                       		swap	d1
0001CE9C 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001CEA0 6100                       		bsr.s	HudDb_XY2
0001CEA2 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001CEA6 4841                       		swap	d1
0001CEA8 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001CEAC                            ; End of function HudDb_XY
0001CEAC                            
0001CEAC                            
0001CEAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEAC                            
0001CEAC                            
0001CEAC                            HudDb_XY2:
0001CEAC 7C07                       		moveq	#7,d6
0001CEAE 43F9 0000 05F0             		lea	(Art_Text).l,a1
0001CEB4                            
0001CEB4                            HudDb_XYLoop:
0001CEB4 E959                       		rol.w	#4,d1
0001CEB6 3401                       		move.w	d1,d2
0001CEB8 0242 000F                  		andi.w	#$F,d2
0001CEBC 0C42 000A                  		cmpi.w	#$A,d2
0001CEC0 6500                       		bcs.s	loc_1C8B2
0001CEC2 5E42                       		addq.w	#7,d2
0001CEC4                            
0001CEC4                            loc_1C8B2:
0001CEC4 EB4A                       		lsl.w	#5,d2
0001CEC6 47F1 2000                  		lea	(a1,d2.w),a3
0001CECA 2C9B                       		move.l	(a3)+,(a6)
0001CECC 2C9B                       		move.l	(a3)+,(a6)
0001CECE 2C9B                       		move.l	(a3)+,(a6)
0001CED0 2C9B                       		move.l	(a3)+,(a6)
0001CED2 2C9B                       		move.l	(a3)+,(a6)
0001CED4 2C9B                       		move.l	(a3)+,(a6)
0001CED6 2C9B                       		move.l	(a3)+,(a6)
0001CED8 2C9B                       		move.l	(a3)+,(a6)
0001CEDA 4841                       		swap	d1
0001CEDC 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001CEE0                            
0001CEE0 4E75                       		rts	
0001CEE2                            ; End of function HudDb_XY2
0001CEE2                            
0001CEE2                            ; ---------------------------------------------------------------------------
0001CEE2                            ; Subroutine to	load rings numbers patterns
0001CEE2                            ; ---------------------------------------------------------------------------
0001CEE2                            
0001CEE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEE2                            
0001CEE2                            
0001CEE2                            Hud_Rings:				; XREF: HudUpdate
0001CEE2 45F9 0000 0000             		lea	(Hud_100).l,a2
0001CEE8 7C02                       		moveq	#2,d6
0001CEEA 6000                       		bra.s	Hud_LoadArt
0001CEEC                            ; End of function Hud_Rings
0001CEEC                            
0001CEEC                            ; ---------------------------------------------------------------------------
0001CEEC                            ; Subroutine to	load score numbers patterns
0001CEEC                            ; ---------------------------------------------------------------------------
0001CEEC                            
0001CEEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEEC                            
0001CEEC                            
0001CEEC                            Hud_Score:				; XREF: HudUpdate
0001CEEC 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001CEF2 7C05                       		moveq	#5,d6
0001CEF4                            
0001CEF4                            Hud_LoadArt:
0001CEF4 7800                       		moveq	#0,d4
0001CEF6 43FA 0000                  		lea	Art_Hud(pc),a1
0001CEFA                            
0001CEFA                            Hud_ScoreLoop:
0001CEFA 7400                       		moveq	#0,d2
0001CEFC 261A                       		move.l	(a2)+,d3
0001CEFE                            
0001CEFE                            loc_1C8EC:
0001CEFE 9283                       		sub.l	d3,d1
0001CF00 6500                       		bcs.s	loc_1C8F4
0001CF02 5242                       		addq.w	#1,d2
0001CF04 60F8                       		bra.s	loc_1C8EC
0001CF06                            ; ===========================================================================
0001CF06                            
0001CF06                            loc_1C8F4:
0001CF06 D283                       		add.l	d3,d1
0001CF08 4A42                       		tst.w	d2
0001CF0A 6700                       		beq.s	loc_1C8FE
0001CF0C 383C 0001                  		move.w	#1,d4
0001CF10                            
0001CF10                            loc_1C8FE:
0001CF10 4A44                       		tst.w	d4
0001CF12 6700                       		beq.s	loc_1C92C
0001CF14 ED4A                       		lsl.w	#6,d2
0001CF16 2D40 0004                  		move.l	d0,4(a6)
0001CF1A 47F1 2000                  		lea	(a1,d2.w),a3
0001CF1E 2C9B                       		move.l	(a3)+,(a6)
0001CF20 2C9B                       		move.l	(a3)+,(a6)
0001CF22 2C9B                       		move.l	(a3)+,(a6)
0001CF24 2C9B                       		move.l	(a3)+,(a6)
0001CF26 2C9B                       		move.l	(a3)+,(a6)
0001CF28 2C9B                       		move.l	(a3)+,(a6)
0001CF2A 2C9B                       		move.l	(a3)+,(a6)
0001CF2C 2C9B                       		move.l	(a3)+,(a6)
0001CF2E 2C9B                       		move.l	(a3)+,(a6)
0001CF30 2C9B                       		move.l	(a3)+,(a6)
0001CF32 2C9B                       		move.l	(a3)+,(a6)
0001CF34 2C9B                       		move.l	(a3)+,(a6)
0001CF36 2C9B                       		move.l	(a3)+,(a6)
0001CF38 2C9B                       		move.l	(a3)+,(a6)
0001CF3A 2C9B                       		move.l	(a3)+,(a6)
0001CF3C 2C9B                       		move.l	(a3)+,(a6)
0001CF3E                            
0001CF3E                            loc_1C92C:
0001CF3E 0680 0040 0000             		addi.l	#$400000,d0
0001CF44 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001CF48                            
0001CF48 4E75                       		rts	
0001CF4A                            ; End of function Hud_Score
0001CF4A                            
0001CF4A                            ; ---------------------------------------------------------------------------
0001CF4A                            ; Subroutine to	load countdown numbers on the continue screen
0001CF4A                            ; ---------------------------------------------------------------------------
0001CF4A                            
0001CF4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF4A                            
0001CF4A                            
0001CF4A                            ContScrCounter:				; XREF: ContinueScreen
0001CF4A 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001CF54 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CF5A 45F9 0000 0000             		lea	(Hud_10).l,a2
0001CF60 7C01                       		moveq	#1,d6
0001CF62 7800                       		moveq	#0,d4
0001CF64 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001CF68                            
0001CF68                            ContScr_Loop:
0001CF68 7400                       		moveq	#0,d2
0001CF6A 261A                       		move.l	(a2)+,d3
0001CF6C                            
0001CF6C                            loc_1C95A:
0001CF6C 9283                       		sub.l	d3,d1
0001CF6E 6500                       		bcs.s	loc_1C962
0001CF70 5242                       		addq.w	#1,d2
0001CF72 60F8                       		bra.s	loc_1C95A
0001CF74                            ; ===========================================================================
0001CF74                            
0001CF74                            loc_1C962:
0001CF74 D283                       		add.l	d3,d1
0001CF76 ED4A                       		lsl.w	#6,d2
0001CF78 47F1 2000                  		lea	(a1,d2.w),a3
0001CF7C 2C9B                       		move.l	(a3)+,(a6)
0001CF7E 2C9B                       		move.l	(a3)+,(a6)
0001CF80 2C9B                       		move.l	(a3)+,(a6)
0001CF82 2C9B                       		move.l	(a3)+,(a6)
0001CF84 2C9B                       		move.l	(a3)+,(a6)
0001CF86 2C9B                       		move.l	(a3)+,(a6)
0001CF88 2C9B                       		move.l	(a3)+,(a6)
0001CF8A 2C9B                       		move.l	(a3)+,(a6)
0001CF8C 2C9B                       		move.l	(a3)+,(a6)
0001CF8E 2C9B                       		move.l	(a3)+,(a6)
0001CF90 2C9B                       		move.l	(a3)+,(a6)
0001CF92 2C9B                       		move.l	(a3)+,(a6)
0001CF94 2C9B                       		move.l	(a3)+,(a6)
0001CF96 2C9B                       		move.l	(a3)+,(a6)
0001CF98 2C9B                       		move.l	(a3)+,(a6)
0001CF9A 2C9B                       		move.l	(a3)+,(a6)
0001CF9C 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001CFA0                            
0001CFA0 4E75                       		rts	
0001CFA2                            ; End of function ContScrCounter
0001CFA2                            
0001CFA2                            ; ===========================================================================
0001CFA2                            ; ---------------------------------------------------------------------------
0001CFA2                            ; HUD counter sizes
0001CFA2                            ; ---------------------------------------------------------------------------
0001CFA2 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001CFA6 0000 2710                  Hud_10000:	dc.l 10000
0001CFAA 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001CFAE 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001CFB2 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001CFB6 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001CFBA                            
0001CFBA                            ; ---------------------------------------------------------------------------
0001CFBA                            ; Subroutine to	load time numbers patterns
0001CFBA                            ; ---------------------------------------------------------------------------
0001CFBA                            
0001CFBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFBA                            
0001CFBA                            
0001CFBA                            Hud_Mins:				; XREF: Hud_ChkTime
0001CFBA 45F9 0001 CFB6             		lea	(Hud_1).l,a2
0001CFC0 7C00                       		moveq	#0,d6
0001CFC2 6000                       		bra.s	loc_1C9BA
0001CFC4                            ; End of function Hud_Mins
0001CFC4                            
0001CFC4                            
0001CFC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFC4                            
0001CFC4                            
0001CFC4                            Hud_Secs:				; XREF: Hud_ChkTime
0001CFC4 45F9 0001 CFB2             		lea	(Hud_10).l,a2
0001CFCA 7C01                       		moveq	#1,d6
0001CFCC                            
0001CFCC                            loc_1C9BA:
0001CFCC 7800                       		moveq	#0,d4
0001CFCE 43FA 0000                  		lea	Art_Hud(pc),a1
0001CFD2                            
0001CFD2                            Hud_TimeLoop:
0001CFD2 7400                       		moveq	#0,d2
0001CFD4 261A                       		move.l	(a2)+,d3
0001CFD6                            
0001CFD6                            loc_1C9C4:
0001CFD6 9283                       		sub.l	d3,d1
0001CFD8 6500                       		bcs.s	loc_1C9CC
0001CFDA 5242                       		addq.w	#1,d2
0001CFDC 60F8                       		bra.s	loc_1C9C4
0001CFDE                            ; ===========================================================================
0001CFDE                            
0001CFDE                            loc_1C9CC:
0001CFDE D283                       		add.l	d3,d1
0001CFE0 4A42                       		tst.w	d2
0001CFE2 6700                       		beq.s	loc_1C9D6
0001CFE4 383C 0001                  		move.w	#1,d4
0001CFE8                            
0001CFE8                            loc_1C9D6:
0001CFE8 ED4A                       		lsl.w	#6,d2
0001CFEA 2D40 0004                  		move.l	d0,4(a6)
0001CFEE 47F1 2000                  		lea	(a1,d2.w),a3
0001CFF2 2C9B                       		move.l	(a3)+,(a6)
0001CFF4 2C9B                       		move.l	(a3)+,(a6)
0001CFF6 2C9B                       		move.l	(a3)+,(a6)
0001CFF8 2C9B                       		move.l	(a3)+,(a6)
0001CFFA 2C9B                       		move.l	(a3)+,(a6)
0001CFFC 2C9B                       		move.l	(a3)+,(a6)
0001CFFE 2C9B                       		move.l	(a3)+,(a6)
0001D000 2C9B                       		move.l	(a3)+,(a6)
0001D002 2C9B                       		move.l	(a3)+,(a6)
0001D004 2C9B                       		move.l	(a3)+,(a6)
0001D006 2C9B                       		move.l	(a3)+,(a6)
0001D008 2C9B                       		move.l	(a3)+,(a6)
0001D00A 2C9B                       		move.l	(a3)+,(a6)
0001D00C 2C9B                       		move.l	(a3)+,(a6)
0001D00E 2C9B                       		move.l	(a3)+,(a6)
0001D010 2C9B                       		move.l	(a3)+,(a6)
0001D012 0680 0040 0000             		addi.l	#$400000,d0
0001D018 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D01C                            
0001D01C 4E75                       		rts	
0001D01E                            ; End of function Hud_Secs
0001D01E                            
0001D01E                            ; ---------------------------------------------------------------------------
0001D01E                            ; Subroutine to	load time/ring bonus numbers patterns
0001D01E                            ; ---------------------------------------------------------------------------
0001D01E                            
0001D01E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D01E                            
0001D01E                            
0001D01E                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D01E 45F9 0001 CFAA             		lea	(Hud_1000).l,a2
0001D024 7C03                       		moveq	#3,d6
0001D026 7800                       		moveq	#0,d4
0001D028 43FA 0000                  		lea	Art_Hud(pc),a1
0001D02C                            
0001D02C                            Hud_BonusLoop:
0001D02C 7400                       		moveq	#0,d2
0001D02E 261A                       		move.l	(a2)+,d3
0001D030                            
0001D030                            loc_1CA1E:
0001D030 9283                       		sub.l	d3,d1
0001D032 6500                       		bcs.s	loc_1CA26
0001D034 5242                       		addq.w	#1,d2
0001D036 60F8                       		bra.s	loc_1CA1E
0001D038                            ; ===========================================================================
0001D038                            
0001D038                            loc_1CA26:
0001D038 D283                       		add.l	d3,d1
0001D03A 4A42                       		tst.w	d2
0001D03C 6700                       		beq.s	loc_1CA30
0001D03E 383C 0001                  		move.w	#1,d4
0001D042                            
0001D042                            loc_1CA30:
0001D042 4A44                       		tst.w	d4
0001D044 6700                       		beq.s	Hud_ClrBonus
0001D046 ED4A                       		lsl.w	#6,d2
0001D048 47F1 2000                  		lea	(a1,d2.w),a3
0001D04C 2C9B                       		move.l	(a3)+,(a6)
0001D04E 2C9B                       		move.l	(a3)+,(a6)
0001D050 2C9B                       		move.l	(a3)+,(a6)
0001D052 2C9B                       		move.l	(a3)+,(a6)
0001D054 2C9B                       		move.l	(a3)+,(a6)
0001D056 2C9B                       		move.l	(a3)+,(a6)
0001D058 2C9B                       		move.l	(a3)+,(a6)
0001D05A 2C9B                       		move.l	(a3)+,(a6)
0001D05C 2C9B                       		move.l	(a3)+,(a6)
0001D05E 2C9B                       		move.l	(a3)+,(a6)
0001D060 2C9B                       		move.l	(a3)+,(a6)
0001D062 2C9B                       		move.l	(a3)+,(a6)
0001D064 2C9B                       		move.l	(a3)+,(a6)
0001D066 2C9B                       		move.l	(a3)+,(a6)
0001D068 2C9B                       		move.l	(a3)+,(a6)
0001D06A 2C9B                       		move.l	(a3)+,(a6)
0001D06C                            
0001D06C                            loc_1CA5A:
0001D06C 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D070                            
0001D070 4E75                       		rts	
0001D072                            ; ===========================================================================
0001D072                            
0001D072                            Hud_ClrBonus:
0001D072 7A0F                       		moveq	#$F,d5
0001D074                            
0001D074                            Hud_ClrBonusLoop:
0001D074 2CBC 0000 0000             		move.l	#0,(a6)
0001D07A 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D07E                            
0001D07E 60EC                       		bra.s	loc_1CA5A
0001D080                            ; End of function Hud_TimeRingBonus
0001D080                            
0001D080                            ; ---------------------------------------------------------------------------
0001D080                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D080                            ; ---------------------------------------------------------------------------
0001D080                            
0001D080                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D080                            
0001D080                            
0001D080                            Hud_Lives:				; XREF: Hud_ChkLives
0001D080 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D086 7200                       		moveq	#0,d1
0001D088 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D08C 45F9 0001 CFB2             		lea	(Hud_10).l,a2
0001D092 7C01                       		moveq	#1,d6
0001D094 7800                       		moveq	#0,d4
0001D096 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D09A                            
0001D09A                            Hud_LivesLoop:
0001D09A 2D40 0004                  		move.l	d0,4(a6)
0001D09E 7400                       		moveq	#0,d2
0001D0A0 261A                       		move.l	(a2)+,d3
0001D0A2                            
0001D0A2                            loc_1CA90:
0001D0A2 9283                       		sub.l	d3,d1
0001D0A4 6500                       		bcs.s	loc_1CA98
0001D0A6 5242                       		addq.w	#1,d2
0001D0A8 60F8                       		bra.s	loc_1CA90
0001D0AA                            ; ===========================================================================
0001D0AA                            
0001D0AA                            loc_1CA98:
0001D0AA D283                       		add.l	d3,d1
0001D0AC 4A42                       		tst.w	d2
0001D0AE 6700                       		beq.s	loc_1CAA2
0001D0B0 383C 0001                  		move.w	#1,d4
0001D0B4                            
0001D0B4                            loc_1CAA2:
0001D0B4 4A44                       		tst.w	d4
0001D0B6 6700                       		beq.s	Hud_ClrLives
0001D0B8                            
0001D0B8                            loc_1CAA6:
0001D0B8 EB4A                       		lsl.w	#5,d2
0001D0BA 47F1 2000                  		lea	(a1,d2.w),a3
0001D0BE 2C9B                       		move.l	(a3)+,(a6)
0001D0C0 2C9B                       		move.l	(a3)+,(a6)
0001D0C2 2C9B                       		move.l	(a3)+,(a6)
0001D0C4 2C9B                       		move.l	(a3)+,(a6)
0001D0C6 2C9B                       		move.l	(a3)+,(a6)
0001D0C8 2C9B                       		move.l	(a3)+,(a6)
0001D0CA 2C9B                       		move.l	(a3)+,(a6)
0001D0CC 2C9B                       		move.l	(a3)+,(a6)
0001D0CE                            
0001D0CE                            loc_1CABC:
0001D0CE 0680 0040 0000             		addi.l	#$400000,d0
0001D0D4 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D0D8                            
0001D0D8 4E75                       		rts	
0001D0DA                            ; ===========================================================================
0001D0DA                            
0001D0DA                            Hud_ClrLives:
0001D0DA 4A46                       		tst.w	d6
0001D0DC 67DA                       		beq.s	loc_1CAA6
0001D0DE 7A07                       		moveq	#7,d5
0001D0E0                            
0001D0E0                            Hud_ClrLivesLoop:
0001D0E0 2CBC 0000 0000             		move.l	#0,(a6)
0001D0E6 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D0EA 60E2                       		bra.s	loc_1CABC
0001D0EC                            ; End of function Hud_Lives
0001D0EC                            
0001D0EC                            ; ===========================================================================
0001D0EC                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D3EC                            		even
0001D3EC                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D52C                            		even
0001D52C                            ; ===========================================================================
0001D52C                            ; ---------------------------------------------------------------------------
0001D52C                            ; When debug mode is currently in use
0001D52C                            ; ---------------------------------------------------------------------------
0001D52C                            
0001D52C                            DebugMode:				; XREF: Obj01; Obj09
0001D52C 7000                       		moveq	#0,d0
0001D52E 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D532 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D536 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D53A                            ; ===========================================================================
0001D53A 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D53C 0000                       		dc.w Debug_Skip-Debug_Index
0001D53E                            ; ===========================================================================
0001D53E                            
0001D53E                            Debug_Main:				; XREF: Debug_Index
0001D53E 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D542 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D548 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D54E 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D554 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D55A 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D560 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D566 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D56C 117C 0000 001A             		move.b	#0,$1A(a0)
0001D572 117C 0000 001C             		move.b	#0,$1C(a0)
0001D578 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D57E 6600                       		bne.s	Debug_Zone	; if not, branch
0001D580 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D586 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D58C 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D58E 6000                       		bra.s	Debug_UseList
0001D590                            ; ===========================================================================
0001D590                            
0001D590                            Debug_Zone:
0001D590 7000                       		moveq	#0,d0
0001D592 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D596                            
0001D596                            Debug_UseList:
0001D596 45F9 0000 0000             		lea	(DebugList).l,a2
0001D59C D040                       		add.w	d0,d0
0001D59E D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D5A2 3C1A                       		move.w	(a2)+,d6
0001D5A4 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D5A8 6200                       		bhi.s	loc_1CF9E
0001D5AA 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D5B0                            
0001D5B0                            loc_1CF9E:
0001D5B0 6100 0000                  		bsr.w	Debug_ShowItem
0001D5B4 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D5BA 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D5C0                            
0001D5C0                            Debug_Skip:				; XREF: Debug_Index
0001D5C0 7006                       		moveq	#6,d0
0001D5C2 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D5C8 6700                       		beq.s	loc_1CFBE
0001D5CA 7000                       		moveq	#0,d0
0001D5CC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D5D0                            
0001D5D0                            loc_1CFBE:
0001D5D0 45F9 0000 0000             		lea	(DebugList).l,a2
0001D5D6 D040                       		add.w	d0,d0
0001D5D8 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D5DC 3C1A                       		move.w	(a2)+,d6
0001D5DE 6100 0000                  		bsr.w	Debug_Control
0001D5E2 4EF9 0000 DB40             		jmp	DisplaySprite
0001D5E8                            
0001D5E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D5E8                            
0001D5E8                            
0001D5E8                            Debug_Control:
0001D5E8 7800                       		moveq	#0,d4
0001D5EA 323C 0001                  		move.w	#1,d1
0001D5EE 1838 F605                  		move.b	($FFFFF605).w,d4
0001D5F2 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D5F6 6600                       		bne.s	loc_1D018	; if yes, branch
0001D5F8 1038 F604                  		move.b	($FFFFF604).w,d0
0001D5FC 0240 000F                  		andi.w	#$F,d0
0001D600 6600                       		bne.s	loc_1D000
0001D602 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D608 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D60E 6000 0000                  		bra.w	Debug_BackItem
0001D612                            ; ===========================================================================
0001D612                            
0001D612                            loc_1D000:
0001D612 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D616 6600                       		bne.s	loc_1D01C
0001D618 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D61E 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D622 6600                       		bne.s	loc_1D018
0001D624 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D62A                            
0001D62A                            loc_1D018:
0001D62A 1838 F604                  		move.b	($FFFFF604).w,d4
0001D62E                            
0001D62E                            loc_1D01C:
0001D62E 7200                       		moveq	#0,d1
0001D630 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D634 5241                       		addq.w	#1,d1
0001D636 4841                       		swap	d1
0001D638 E881                       		asr.l	#4,d1
0001D63A 2428 000C                  		move.l	$C(a0),d2
0001D63E 2628 0008                  		move.l	8(a0),d3
0001D642 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D646 6700                       		beq.s	loc_1D03C	; if not, branch
0001D648 9481                       		sub.l	d1,d2
0001D64A 6400                       		bcc.s	loc_1D03C
0001D64C 7400                       		moveq	#0,d2
0001D64E                            
0001D64E                            loc_1D03C:
0001D64E 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D652 6700                       		beq.s	loc_1D052	; if not, branch
0001D654 D481                       		add.l	d1,d2
0001D656 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D65C 6500                       		bcs.s	loc_1D052
0001D65E 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D664                            
0001D664                            loc_1D052:
0001D664 0804 0002                  		btst	#2,d4
0001D668 6700                       		beq.s	loc_1D05E
0001D66A 9681                       		sub.l	d1,d3
0001D66C 6400                       		bcc.s	loc_1D05E
0001D66E 7600                       		moveq	#0,d3
0001D670                            
0001D670                            loc_1D05E:
0001D670 0804 0003                  		btst	#3,d4
0001D674 6700                       		beq.s	loc_1D066
0001D676 D681                       		add.l	d1,d3
0001D678                            
0001D678                            loc_1D066:
0001D678 2142 000C                  		move.l	d2,$C(a0)
0001D67C 2143 0008                  		move.l	d3,8(a0)
0001D680                            
0001D680                            Debug_BackItem:
0001D680 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D686 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D688 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D68E 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D690 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D694 6400                       		bcc.s	Debug_NoLoop
0001D696 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D69A 6000                       		bra.s	Debug_NoLoop
0001D69C                            ; ===========================================================================
0001D69C                            
0001D69C                            Debug_NextItem:
0001D69C 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D6A2 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D6A4 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D6A8 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D6AC 6200                       		bhi.s	Debug_NoLoop
0001D6AE 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D6B4                            
0001D6B4                            Debug_NoLoop:
0001D6B4 6000 0000                  		bra.w	Debug_ShowItem
0001D6B8                            ; ===========================================================================
0001D6B8                            
0001D6B8                            Debug_MakeItem:
0001D6B8 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D6BE 6700                       		beq.s	Debug_Exit	; if not, branch
0001D6C0 4EB9 0000 DFC6             		jsr	SingleObjLoad
0001D6C6 6600                       		bne.s	Debug_Exit
0001D6C8 3368 0008 0008             		move.w	8(a0),8(a1)
0001D6CE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D6D4 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D6D8 1368 0001 0001             		move.b	1(a0),1(a1)
0001D6DE 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D6E4 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D6EA 7000                       		moveq	#0,d0
0001D6EC 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D6F0 E748                       		lsl.w	#3,d0
0001D6F2 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D6F8 4E75                       		rts	
0001D6FA                            ; ===========================================================================
0001D6FA                            
0001D6FA                            Debug_Exit:
0001D6FA 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D700 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D702 7000                       		moveq	#0,d0
0001D704 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D708 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D710 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D716 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D71A 3140 000A                  		move.w	d0,$A(a0)
0001D71E 3140 000E                  		move.w	d0,$E(a0)
0001D722 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D728 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D72E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D734 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D736 4278 F780                  		clr.w	($FFFFF780).w
0001D73A 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D740 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D748 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D74E 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D754 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D75A 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D760                            
0001D760                            Debug_DoNothing:
0001D760 4E75                       		rts	
0001D762                            ; End of function Debug_Control
0001D762                            
0001D762                            
0001D762                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D762                            
0001D762                            
0001D762                            Debug_ShowItem:				; XREF: Debug_Main
0001D762 7000                       		moveq	#0,d0
0001D764 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D768 E748                       		lsl.w	#3,d0
0001D76A 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D770 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D776 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D77C 4E75                       		rts	
0001D77E                            ; End of function Debug_ShowItem
0001D77E                            
0001D77E                            ; ===========================================================================
0001D77E                            ; ---------------------------------------------------------------------------
0001D77E                            ; Debug	list pointers
0001D77E                            ; ---------------------------------------------------------------------------
0001D77E                            DebugList:
0001D77E                            	include "_inc\Debug list pointers.asm"
0001D77E                            ; ---------------------------------------------------------------------------
0001D77E                            ; Debug	list pointers
0001D77E                            ; ---------------------------------------------------------------------------
0001D77E 0000                       	dc.w Debug_GHZ-DebugList
0001D780 0000                       	dc.w Debug_LZ-DebugList
0001D782 0000                       	dc.w Debug_MZ-DebugList
0001D784 0000                       	dc.w Debug_SLZ-DebugList
0001D786 0000                       	dc.w Debug_SYZ-DebugList
0001D788 0000                       	dc.w Debug_SBZ-DebugList
0001D78A 0000                       	dc.w Debug_Ending-DebugList
0001D78A 0000                       	dc.w Debug_Ending-DebugList
0001D78C                            
0001D78C                            ; ---------------------------------------------------------------------------
0001D78C                            ; Debug	list - Green Hill
0001D78C                            ; ---------------------------------------------------------------------------
0001D78C                            Debug_GHZ:
0001D78C                            	include "_inc\Debug list - GHZ.asm"
0001D78C                            ; ---------------------------------------------------------------------------
0001D78C                            ; Debug	list - Green Hill
0001D78C                            ; ---------------------------------------------------------------------------
0001D78C 0010                       	dc.w $10			; number of items in list
0001D78E 2500 A3AE                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D792 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D796 2600 A9B4                  	dc.l Map_obj26+$26000000
0001D79A 0000 0680                  	dc.b 0,	0, 6, $80
0001D79E 1F00 9BA6                  	dc.l Map_obj1F+$1F000000
0001D7A2 0000 0400                  	dc.b 0,	0, 4, 0
0001D7A6 2200 9E62                  	dc.l Map_obj22+$22000000
0001D7AA 0000 0444                  	dc.b 0,	0, 4, $44
0001D7AE 2B00 B028                  	dc.l Map_obj2B+$2B000000
0001D7B2 0000 047B                  	dc.b 0,	0, 4, $7B
0001D7B6 3600 D528                  	dc.l Map_obj36+$36000000
0001D7BA 0000 051B                  	dc.b 0,	0, 5, $1B
0001D7BE 1800 8554                  	dc.l Map_obj18+$18000000
0001D7C2 0000 4000                  	dc.b 0,	0, $40,	0
0001D7C6 3B00 D64E                  	dc.l Map_obj3B+$3B000000
0001D7CA 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001D7CE 4000 FCDA                  	dc.l Map_obj40+$40000000
0001D7D2 0000 04F0                  	dc.b 0,	0, 4, $F0
0001D7D6 4100 E254                  	dc.l Map_obj41+$41000000
0001D7DA 0000 0523                  	dc.b 0,	0, 5, $23
0001D7DE 4200 E47A                  	dc.l Map_obj42+$42000000
0001D7E2 0000 249B                  	dc.b 0,	0, $24,	$9B
0001D7E6 4400 E788                  	dc.l Map_obj44+$44000000
0001D7EA 0000 434C                  	dc.b 0,	0, $43,	$4C
0001D7EE 1900 85C2                  	dc.l Map_obj48+$19000000
0001D7F2 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001D7F6 7901 76C2                  	dc.l Map_obj79+$79000000
0001D7FA 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D7FE 4B00 A3EE                  	dc.l Map_obj4B+$4B000000
0001D802 0000 2400                  	dc.b 0,	0, $24,	0
0001D806 7D01 7812                  	dc.l Map_obj7D+$7D000000
0001D80A 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001D80E                            	even
0001D80E                            	even
0001D80E                            
0001D80E                            ; ---------------------------------------------------------------------------
0001D80E                            ; Debug	list - Labyrinth
0001D80E                            ; ---------------------------------------------------------------------------
0001D80E                            Debug_LZ:
0001D80E                            	include "_inc\Debug list - LZ.asm"
0001D80E                            ; ---------------------------------------------------------------------------
0001D80E                            ; Debug	list - Labyrinth
0001D80E                            ; ---------------------------------------------------------------------------
0001D80E 0019                       	dc.w $19
0001D810 2500 A3AE                  	dc.l Map_obj25+$25000000
0001D814 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D818 2600 A9B4                  	dc.l Map_obj26+$26000000
0001D81C 0000 0680                  	dc.b 0,	0, 6, $80
0001D820 4100 E254                  	dc.l Map_obj41+$41000000
0001D824 0000 0523                  	dc.b 0,	0, 5, $23
0001D828 2C00 B0CE                  	dc.l Map_obj2C+$2C000000
0001D82C 0800 2486                  	dc.b 8,	0, $24,	$86
0001D830 2D00 B2C2                  	dc.l Map_obj2D+$2D000000
0001D834 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001D838 1601 24AE                  	dc.l Map_obj16+$16000000
0001D83C 0000 03CC                  	dc.b 0,	0, 3, $CC
0001D840 1601 24AE                  	dc.l Map_obj16+$16000000
0001D844 0203 03CC                  	dc.b 2,	3, 3, $CC
0001D848 3300 C774                  	dc.l Map_obj33+$33000000
0001D84C 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D850 3200 C334                  	dc.l Map_obj32+$32000000
0001D854 0000 0513                  	dc.b 0,	0, 5, $13
0001D858 3600 D528                  	dc.l Map_obj36+$36000000
0001D85C 0000 051B                  	dc.b 0,	0, 5, $1B
0001D860 5201 05D0                  	dc.l Map_obj52a+$52000000
0001D864 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001D868 6101 26D6                  	dc.l Map_obj61+$61000000
0001D86C 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001D870 6101 26D6                  	dc.l Map_obj61+$61000000
0001D874 1301 43E6                  	dc.b $13, 1, $43, $E6
0001D878 6101 26D6                  	dc.l Map_obj61+$61000000
0001D87C 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001D880 6201 282A                  	dc.l Map_obj62+$62000000
0001D884 0000 443E                  	dc.b 0,	0, $44,	$3E
0001D888 6101 26D6                  	dc.l Map_obj61+$61000000
0001D88C 2702 43E6                  	dc.b $27, 2, $43, $E6
0001D890 6101 26D6                  	dc.l Map_obj61+$61000000
0001D894 3003 43E6                  	dc.b $30, 3, $43, $E6
0001D898 6301 2B8C                  	dc.l Map_obj63+$63000000
0001D89C 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001D8A0 6001 23F8                  	dc.l Map_obj60+$60000000
0001D8A4 0000 0467                  	dc.b 0,	0, 4, $67
0001D8A8 6401 2ED2                  	dc.l Map_obj64+$64000000
0001D8AC 8413 8348                  	dc.b $84, $13, $83, $48
0001D8B0 6501 305A                  	dc.l Map_obj65+$65000000
0001D8B4 0202 C259                  	dc.b 2,	2, $C2,	$59
0001D8B8 6501 305A                  	dc.l Map_obj65+$65000000
0001D8BC 0909 C259                  	dc.b 9,	9, $C2,	$59
0001D8C0 0B01 1848                  	dc.l Map_obj0B+$B000000
0001D8C4 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D8C8 0C01 1918                  	dc.l Map_obj0C+$C000000
0001D8CC 0200 4328                  	dc.b 2,	0, $43,	$28
0001D8D0 7901 76C2                  	dc.l Map_obj79+$79000000
0001D8D4 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D8D8                            	even
0001D8D8                            	even
0001D8D8                            
0001D8D8                            ; ---------------------------------------------------------------------------
0001D8D8                            ; Debug	list - Marble
0001D8D8                            ; ---------------------------------------------------------------------------
0001D8D8                            Debug_MZ:
0001D8D8                            	include "_inc\Debug list - MZ.asm"
0001D8D8                            ; ---------------------------------------------------------------------------
0001D8D8                            ; Debug	list - Marble
0001D8D8                            ; ---------------------------------------------------------------------------
0001D8D8 0012                       	dc.w $12
0001D8DA 2500 A3AE                  	dc.l Map_obj25+$25000000
0001D8DE 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D8E2 2600 A9B4                  	dc.l Map_obj26+$26000000
0001D8E6 0000 0680                  	dc.b 0,	0, 6, $80
0001D8EA 2200 9E62                  	dc.l Map_obj22+$22000000
0001D8EE 0000 0444                  	dc.b 0,	0, 4, $44
0001D8F2 3600 D528                  	dc.l Map_obj36+$36000000
0001D8F6 0000 051B                  	dc.b 0,	0, 5, $1B
0001D8FA 4100 E254                  	dc.l Map_obj41+$41000000
0001D8FE 0000 0523                  	dc.b 0,	0, 5, $23
0001D902 1300 B804                  	dc.l Map_obj14+$13000000
0001D906 0000 0345                  	dc.b 0,	0, 3, $45
0001D90A 4600 EE3A                  	dc.l Map_obj46+$46000000
0001D90E 0000 4000                  	dc.b 0,	0, $40,	0
0001D912 4C00 F786                  	dc.l Map_obj4C+$4C000000
0001D916 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D91A 4E00 FA6A                  	dc.l Map_obj4E+$4E000000
0001D91E 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D922 3300 C774                  	dc.l Map_obj33+$33000000
0001D926 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D92A 5000 FE68                  	dc.l Map_obj50+$50000000
0001D92E 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D932 5101 0304                  	dc.l Map_obj51+$51000000
0001D936 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D93A 5201 057A                  	dc.l Map_obj52+$52000000
0001D93E 0000 02B8                  	dc.b 0,	0, 2, $B8
0001D942 5300 8B5A                  	dc.l Map_obj53+$53000000
0001D946 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001D94A 5400 F74C                  	dc.l Map_obj54+$54000000
0001D94E 0000 8680                  	dc.b 0,	0, $86,	$80
0001D952 5501 076E                  	dc.l Map_obj55+$55000000
0001D956 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D95A 7801 733C                  	dc.l Map_obj78+$78000000
0001D95E 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D962 7901 76C2                  	dc.l Map_obj79+$79000000
0001D966 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D96A                            	even
0001D96A                            	even
0001D96A                            
0001D96A                            ; ---------------------------------------------------------------------------
0001D96A                            ; Debug	list - Star Light
0001D96A                            ; ---------------------------------------------------------------------------
0001D96A                            Debug_SLZ:
0001D96A                            	include "_inc\Debug list - SLZ.asm"
0001D96A                            ; ---------------------------------------------------------------------------
0001D96A                            ; Debug	list - Star Light
0001D96A                            ; ---------------------------------------------------------------------------
0001D96A 000F                       	dc.w $F
0001D96C 2500 A3AE                  	dc.l Map_obj25+$25000000
0001D970 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D974 2600 A9B4                  	dc.l Map_obj26+$26000000
0001D978 0000 0680                  	dc.b 0,	0, 6, $80
0001D97C 5901 1270                  	dc.l Map_obj59+$59000000
0001D980 0000 4000                  	dc.b 0,	0, $40,	0
0001D984 5300 8B5A                  	dc.l Map_obj53+$53000000
0001D988 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001D98C 1800 85B2                  	dc.l Map_obj18b+$18000000
0001D990 0000 4000                  	dc.b 0,	0, $40,	0
0001D994 5A01 13AA                  	dc.l Map_obj5A+$5A000000
0001D998 0000 4000                  	dc.b 0,	0, $40,	0
0001D99C 5B01 1562                  	dc.l Map_obj5B+$5B000000
0001D9A0 0000 4000                  	dc.b 0,	0, $40,	0
0001D9A4 5D01 1B32                  	dc.l Map_obj5D+$5D000000
0001D9A8 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001D9AC 5E01 1EC4                  	dc.l Map_obj5E+$5E000000
0001D9B0 0000 0374                  	dc.b 0,	0, 3, $74
0001D9B4 4100 E254                  	dc.l Map_obj41+$41000000
0001D9B8 0000 0523                  	dc.b 0,	0, 5, $23
0001D9BC 1300 B804                  	dc.l Map_obj14+$13000000
0001D9C0 0000 0480                  	dc.b 0,	0, 4, $80
0001D9C4 1C00 8C6A                  	dc.l Map_obj1C+$1C000000
0001D9C8 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001D9CC 5F01 2142                  	dc.l Map_obj5F+$5F000000
0001D9D0 0000 0400                  	dc.b 0,	0, 4, 0
0001D9D4 6001 23F8                  	dc.l Map_obj60+$60000000
0001D9D8 0000 2429                  	dc.b 0,	0, $24,	$29
0001D9DC 7901 76C2                  	dc.l Map_obj79+$79000000
0001D9E0 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D9E4                            	even
0001D9E4                            	even
0001D9E4                            
0001D9E4                            ; ---------------------------------------------------------------------------
0001D9E4                            ; Debug	list - Spring Yard
0001D9E4                            ; ---------------------------------------------------------------------------
0001D9E4                            Debug_SYZ:
0001D9E4                            	include "_inc\Debug list - SYZ.asm"
0001D9E4                            ; ---------------------------------------------------------------------------
0001D9E4                            ; Debug	list - Spring Yard
0001D9E4                            ; ---------------------------------------------------------------------------
0001D9E4 000F                       	dc.w $F
0001D9E6 2500 A3AE                  	dc.l Map_obj25+$25000000
0001D9EA 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D9EE 2600 A9B4                  	dc.l Map_obj26+$26000000
0001D9F2 0000 0680                  	dc.b 0,	0, 6, $80
0001D9F6 3600 D528                  	dc.l Map_obj36+$36000000
0001D9FA 0000 051B                  	dc.b 0,	0, 5, $1B
0001D9FE 4100 E254                  	dc.l Map_obj41+$41000000
0001DA02 0000 0523                  	dc.b 0,	0, 5, $23
0001DA06 4300 E6DA                  	dc.l Map_obj43+$43000000
0001DA0A 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DA0E 1200 EEB8                  	dc.l Map_obj12+$12000000
0001DA12 0000 0000                  	dc.b 0,	0, 0, 0
0001DA16 4700 F034                  	dc.l Map_obj47+$47000000
0001DA1A 0000 0380                  	dc.b 0,	0, 3, $80
0001DA1E 1F00 9BA6                  	dc.l Map_obj1F+$1F000000
0001DA22 0000 0400                  	dc.b 0,	0, 4, 0
0001DA26 2200 9E62                  	dc.l Map_obj22+$22000000
0001DA2A 0000 0444                  	dc.b 0,	0, 4, $44
0001DA2E 5000 FE68                  	dc.l Map_obj50+$50000000
0001DA32 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DA36 1800 85A0                  	dc.l Map_obj18a+$18000000
0001DA3A 0000 4000                  	dc.b 0,	0, $40,	0
0001DA3E 5601 0C30                  	dc.l Map_obj56+$56000000
0001DA42 0000 4000                  	dc.b 0,	0, $40,	0
0001DA46 3200 C334                  	dc.l Map_obj32+$32000000
0001DA4A 0000 0513                  	dc.b 0,	0, 5, $13
0001DA4E 7801 733C                  	dc.l Map_obj78+$78000000
0001DA52 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DA56 7901 76C2                  	dc.l Map_obj79+$79000000
0001DA5A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DA5E                            	even
0001DA5E                            	even
0001DA5E                            
0001DA5E                            ; ---------------------------------------------------------------------------
0001DA5E                            ; Debug	list - Scrap Brain
0001DA5E                            ; ---------------------------------------------------------------------------
0001DA5E                            Debug_SBZ:
0001DA5E                            	include "_inc\Debug list - SBZ.asm"
0001DA5E                            ; ---------------------------------------------------------------------------
0001DA5E                            ; Debug	list - Scrap Brain
0001DA5E                            ; ---------------------------------------------------------------------------
0001DA5E 001D                       	dc.w $1D
0001DA60 2500 A3AE                  	dc.l Map_obj25+$25000000
0001DA64 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DA68 2600 A9B4                  	dc.l Map_obj26+$26000000
0001DA6C 0000 0680                  	dc.b 0,	0, 6, $80
0001DA70 5F01 2142                  	dc.l Map_obj5F+$5F000000
0001DA74 0000 0400                  	dc.b 0,	0, 4, 0
0001DA78 6001 23F8                  	dc.l Map_obj60+$60000000
0001DA7C 0000 0429                  	dc.b 0,	0, 4, $29
0001DA80 7801 733C                  	dc.l Map_obj78+$78000000
0001DA84 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DA88 1501 0FCC                  	dc.l Map_obj15b+$15000000
0001DA8C 0702 4391                  	dc.b 7,	2, $43,	$91
0001DA90 6701 5C50                  	dc.l Map_obj67+$67000000
0001DA94 E000 C344                  	dc.b $E0, 0, $C3, $44
0001DA98 5201 057A                  	dc.l Map_obj52+$52000000
0001DA9C 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DAA0 3200 C334                  	dc.l Map_obj32+$32000000
0001DAA4 0000 0513                  	dc.b 0,	0, 5, $13
0001DAA8 6901 5EAA                  	dc.l Map_obj69+$69000000
0001DAAC 0300 4492                  	dc.b 3,	0, $44,	$92
0001DAB0 6901 5F04                  	dc.l Map_obj69a+$69000000
0001DAB4 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DAB8 6A01 6162                  	dc.l Map_obj6A+$6A000000
0001DABC 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DAC0 5300 8B5A                  	dc.l Map_obj53+$53000000
0001DAC4 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DAC8 5201 057A                  	dc.l Map_obj52+$52000000
0001DACC 3903 4460                  	dc.b $39, 3, $44, $60
0001DAD0 6B01 6532                  	dc.l Map_obj6B+$6B000000
0001DAD4 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DAD8 2A00 8E00                  	dc.l Map_obj2A+$2A000000
0001DADC 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DAE0 6B01 6532                  	dc.l Map_obj6B+$6B000000
0001DAE4 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DAE8 6A01 6162                  	dc.l Map_obj6A+$6A000000
0001DAEC 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DAF0 6B01 6532                  	dc.l Map_obj6B+$6B000000
0001DAF4 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DAF8 6A01 6162                  	dc.l Map_obj6A+$6A000000
0001DAFC 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DB00 6B01 6532                  	dc.l Map_obj6B+$6B000000
0001DB04 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DB08 6C01 66F4                  	dc.l Map_obj6C+$6C000000
0001DB0C 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DB10 6D00 EB2A                  	dc.l Map_obj6D+$6D000000
0001DB14 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DB18 6D00 EB2A                  	dc.l Map_obj6D+$6D000000
0001DB1C 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DB20 6E01 67AA                  	dc.l Map_obj6E+$6E000000
0001DB24 0400 047E                  	dc.b 4,	0, 4, $7E
0001DB28 7001 6C00                  	dc.l Map_obj70+$70000000
0001DB2C 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DB30 7101 19D8                  	dc.l Map_obj71+$71000000
0001DB34 1100 8680                  	dc.b $11, 0, $86, $80
0001DB38 1E00 92BE                  	dc.l Map_obj1E+$1E000000
0001DB3C 0400 2302                  	dc.b 4,	0, $23,	2
0001DB40 7901 76C2                  	dc.l Map_obj79+$79000000
0001DB44 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DB48                            	even
0001DB48                            	even
0001DB48                            
0001DB48                            ; ---------------------------------------------------------------------------
0001DB48                            ; Debug	list - ending sequence / special stage
0001DB48                            ; ---------------------------------------------------------------------------
0001DB48                            Debug_Ending:
0001DB48                            	include "_inc\Debug list - Ending and SS.asm"
0001DB48                            ; ---------------------------------------------------------------------------
0001DB48                            ; Debug	list - ending sequence / special stage
0001DB48                            ; ---------------------------------------------------------------------------
0001DB48 000D                       	dc.w $D
0001DB4A 2500 A3AE                  	dc.l Map_obj25+$25000000
0001DB4E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DB52 4700 F034                  	dc.l Map_obj47+$47000000
0001DB56 0000 0380                  	dc.b 0,	0, 3, $80
0001DB5A 2800 98D8                  	dc.l Map_obj28a+$28000000
0001DB5E 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DB62 2800 98D8                  	dc.l Map_obj28a+$28000000
0001DB66 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DB6A 2800 98D8                  	dc.l Map_obj28a+$28000000
0001DB6E 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001DB72 2800 98C0                  	dc.l Map_obj28+$28000000
0001DB76 0D00 0553                  	dc.b $D, 0, 5, $53
0001DB7A 2800 98C0                  	dc.l Map_obj28+$28000000
0001DB7E 0E00 0553                  	dc.b $E, 0, 5, $53
0001DB82 2800 98C0                  	dc.l Map_obj28+$28000000
0001DB86 0F00 0573                  	dc.b $F, 0, 5, $73
0001DB8A 2800 98C0                  	dc.l Map_obj28+$28000000
0001DB8E 1000 0573                  	dc.b $10, 0, 5,	$73
0001DB92 2800 98D8                  	dc.l Map_obj28a+$28000000
0001DB96 1100 0585                  	dc.b $11, 0, 5,	$85
0001DB9A 2800 98F0                  	dc.l Map_obj28b+$28000000
0001DB9E 1200 0593                  	dc.b $12, 0, 5,	$93
0001DBA2 2800 98D8                  	dc.l Map_obj28a+$28000000
0001DBA6 1300 0565                  	dc.b $13, 0, 5,	$65
0001DBAA 2800 98F0                  	dc.l Map_obj28b+$28000000
0001DBAE 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DBB2                            	even
0001DBB2                            	even
0001DBB2                            
0001DBB2                            ; ---------------------------------------------------------------------------
0001DBB2                            ; Main level load blocks
0001DBB2                            ; ---------------------------------------------------------------------------
0001DBB2                            MainLoadBlocks:
0001DBB2                            	include "_inc\Main level load blocks.asm"
0001DBB2                            ; ---------------------------------------------------------------------------
0001DBB2                            ; Main level load blocks
0001DBB2                            ;
0001DBB2                            ; ===FORMAT===
0001DBB2                            ; level	patterns + (1st	PLC num	* 10^6)
0001DBB2                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DBB2                            ; 256x256 mappings
0001DBB2                            ; blank, music (unused), pal index (unused), pal index
0001DBB2                            ; ---------------------------------------------------------------------------
0001DBB2 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DBB6 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DBBA 0000 0000                  	dc.l Blk256_GHZ
0001DBBE 0081 0404                  	dc.b 0,	$81, 4,	4
0001DBC2 0000 0000                  	dc.l Nem_LZ+$6000000
0001DBC6 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DBCA 0000 0000                  	dc.l Blk256_LZ
0001DBCE 0082 0505                  	dc.b 0,	$82, 5,	5
0001DBD2 0000 0000                  	dc.l Nem_MZ+$8000000
0001DBD6 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DBDA 0000 0000                  	dc.l Blk256_MZ
0001DBDE 0083 0606                  	dc.b 0,	$83, 6,	6
0001DBE2 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DBE6 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DBEA 0000 0000                  	dc.l Blk256_SLZ
0001DBEE 0084 0707                  	dc.b 0,	$84, 7,	7
0001DBF2 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DBF6 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DBFA 0000 0000                  	dc.l Blk256_SYZ
0001DBFE 0085 0808                  	dc.b 0,	$85, 8,	8
0001DC02 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DC06 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DC0A 0000 0000                  	dc.l Blk256_SBZ
0001DC0E 0086 0909                  	dc.b 0,	$86, 9,	9
0001DC12 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DC16 0000 0000                  	dc.l Blk16_GHZ
0001DC1A 0000 0000                  	dc.l Blk256_GHZ
0001DC1E 0086 1313                  	dc.b 0,	$86, $13, $13
0001DC22                            	even
0001DC22                            	even
0001DC22                            
0001DC22                            ; ---------------------------------------------------------------------------
0001DC22                            ; Pattern load cues
0001DC22                            ; ---------------------------------------------------------------------------
0001DC22                            ArtLoadCues:
0001DC22                            	include "_inc\Pattern load cues.asm"
0001DC22                            ; ---------------------------------------------------------------------------
0001DC22                            ; Pattern load cues - index
0001DC22                            ; ---------------------------------------------------------------------------
0001DC22 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DC26 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DC2A 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DC2E 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DC32 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DC36 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DC3A 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DC3E 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DC42 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DC46 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DC4A 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DC4E 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DC52 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DC56 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DC5A 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DC5E 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DC62                            ; ---------------------------------------------------------------------------
0001DC62                            ; Pattern load cues - standard block 1
0001DC62                            ; ---------------------------------------------------------------------------
0001DC62 0004                       PLC_Main:	dc.w 4
0001DC64 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DC68 F400                       		dc.w $F400
0001DC6A 0000 0000                  		dc.l Nem_Hud		; HUD
0001DC6E D940                       		dc.w $D940
0001DC70 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DC74 FA80                       		dc.w $FA80
0001DC76 0000 0000                  		dc.l Nem_Ring		; rings
0001DC7A F640                       		dc.w $F640
0001DC7C 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DC80 F2E0                       		dc.w $F2E0
0001DC82                            ; ---------------------------------------------------------------------------
0001DC82                            ; Pattern load cues - standard block 2
0001DC82                            ; ---------------------------------------------------------------------------
0001DC82 0002                       PLC_Main2:	dc.w 2
0001DC84 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DC88 D000                       		dc.w $D000
0001DC8A 0000 0000                  		dc.l Nem_Shield		; shield
0001DC8E A820                       		dc.w $A820
0001DC90 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DC94 AB80                       		dc.w $AB80
0001DC96                            ; ---------------------------------------------------------------------------
0001DC96                            ; Pattern load cues - explosion
0001DC96                            ; ---------------------------------------------------------------------------
0001DC96 0000                       PLC_Explode:	dc.w 0
0001DC98 0000 0000                  		dc.l Nem_Explode	; explosion
0001DC9C B400                       		dc.w $B400
0001DC9E                            ; ---------------------------------------------------------------------------
0001DC9E                            ; Pattern load cues - game/time	over
0001DC9E                            ; ---------------------------------------------------------------------------
0001DC9E 0000                       PLC_GameOver:	dc.w 0
0001DCA0 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DCA4 ABC0                       		dc.w $ABC0
0001DCA6                            ; ---------------------------------------------------------------------------
0001DCA6                            ; Pattern load cues - Green Hill
0001DCA6                            ; ---------------------------------------------------------------------------
0001DCA6 000B                       PLC_GHZ:	dc.w $B
0001DCA8 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DCAC 0000                       		dc.w 0
0001DCAE 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DCB2 39A0                       		dc.w $39A0
0001DCB4 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DCB8 6B00                       		dc.w $6B00
0001DCBA 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DCBE 7A00                       		dc.w $7A00
0001DCC0 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DCC4 8000                       		dc.w $8000
0001DCC6 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DCCA 8880                       		dc.w $8880
0001DCCC 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DCD0 8F60                       		dc.w $8F60
0001DCD2 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DCD6 9360                       		dc.w $9360
0001DCD8 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DCDC 9E00                       		dc.w $9E00
0001DCDE 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DCE2 A360                       		dc.w $A360
0001DCE4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DCE8 A460                       		dc.w $A460
0001DCEA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DCEE A660                       		dc.w $A660
0001DCF0 0005                       PLC_GHZ2:	dc.w 5
0001DCF2 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DCF6 7000                       		dc.w $7000
0001DCF8 0000 0000                  		dc.l Nem_Bridge		; bridge
0001DCFC 71C0                       		dc.w $71C0
0001DCFE 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001DD02 7300                       		dc.w $7300
0001DD04 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001DD08 7540                       		dc.w $7540
0001DD0A 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001DD0E A1E0                       		dc.w $A1E0
0001DD10 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001DD14 6980                       		dc.w $6980
0001DD16                            ; ---------------------------------------------------------------------------
0001DD16                            ; Pattern load cues - Labyrinth
0001DD16                            ; ---------------------------------------------------------------------------
0001DD16 000B                       PLC_LZ:		dc.w $B
0001DD18 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001DD1C 0000                       		dc.w 0
0001DD1E 0000 0000                  		dc.l Nem_LzBlock1	; block
0001DD22 3C00                       		dc.w $3C00
0001DD24 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001DD28 3E00                       		dc.w $3E00
0001DD2A 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001DD2E 4B20                       		dc.w $4B20
0001DD30 0000 0000                  		dc.l Nem_Water		; water	surface
0001DD34 6000                       		dc.w $6000
0001DD36 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001DD3A 6200                       		dc.w $6200
0001DD3C 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001DD40 6500                       		dc.w $6500
0001DD42 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001DD46 6900                       		dc.w $6900
0001DD48 0000 0000                  		dc.l Nem_LzBlock3	; block
0001DD4C 7780                       		dc.w $7780
0001DD4E 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001DD52 7880                       		dc.w $7880
0001DD54 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001DD58 7980                       		dc.w $7980
0001DD5A 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001DD5E 94C0                       		dc.w $94C0
0001DD60 000C                       PLC_LZ2:	dc.w $C
0001DD62 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001DD66 7BC0                       		dc.w $7BC0
0001DD68 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001DD6C 7CC0                       		dc.w $7CC0
0001DD6E 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001DD72 7EC0                       		dc.w $7EC0
0001DD74 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001DD78 5D20                       		dc.w $5D20
0001DD7A 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001DD7E 8800                       		dc.w $8800
0001DD80 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001DD84 89E0                       		dc.w $89E0
0001DD86 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DD8A 8CE0                       		dc.w $8CE0
0001DD8C 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001DD90 90C0                       		dc.w $90C0
0001DD92 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DD96 A1E0                       		dc.w $A1E0
0001DD98 0000 0000                  		dc.l Nem_Cork		; cork block
0001DD9C A000                       		dc.w $A000
0001DD9E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DDA2 A360                       		dc.w $A360
0001DDA4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DDA8 A460                       		dc.w $A460
0001DDAA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DDAE A660                       		dc.w $A660
0001DDB0                            ; ---------------------------------------------------------------------------
0001DDB0                            ; Pattern load cues - Marble
0001DDB0                            ; ---------------------------------------------------------------------------
0001DDB0 0009                       PLC_MZ:		dc.w 9
0001DDB2 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001DDB6 0000                       		dc.w 0
0001DDB8 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001DDBC 6000                       		dc.w $6000
0001DDBE 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DDC2 68A0                       		dc.w $68A0
0001DDC4 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DDC8 7000                       		dc.w $7000
0001DDCA 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001DDCE 71C0                       		dc.w $71C0
0001DDD0 0000 0000                  		dc.l Nem_Lava		; lava
0001DDD4 7500                       		dc.w $7500
0001DDD6 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DDDA 8880                       		dc.w $8880
0001DDDC 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DDE0 8F60                       		dc.w $8F60
0001DDE2 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001DDE6 9700                       		dc.w $9700
0001DDE8 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DDEC 9FE0                       		dc.w $9FE0
0001DDEE 0004                       PLC_MZ2:	dc.w 4
0001DDF0 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001DDF4 A260                       		dc.w $A260
0001DDF6 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DDFA A360                       		dc.w $A360
0001DDFC 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DE00 A460                       		dc.w $A460
0001DE02 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DE06 A660                       		dc.w $A660
0001DE08 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001DE0C 5700                       		dc.w $5700
0001DE0E                            ; ---------------------------------------------------------------------------
0001DE0E                            ; Pattern load cues - Star Light
0001DE0E                            ; ---------------------------------------------------------------------------
0001DE0E 0008                       PLC_SLZ:	dc.w 8
0001DE10 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001DE14 0000                       		dc.w 0
0001DE16 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DE1A 8000                       		dc.w $8000
0001DE1C 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DE20 8520                       		dc.w $8520
0001DE22 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DE26 9000                       		dc.w $9000
0001DE28 0000 0000                  		dc.l Nem_SlzBlock	; block
0001DE2C 9C00                       		dc.w $9C00
0001DE2E 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001DE32 A260                       		dc.w $A260
0001DE34 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DE38 A360                       		dc.w $A360
0001DE3A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DE3E A460                       		dc.w $A460
0001DE40 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DE44 A660                       		dc.w $A660
0001DE46 0005                       PLC_SLZ2:	dc.w 5
0001DE48 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001DE4C 6E80                       		dc.w $6E80
0001DE4E 0000 0000                  		dc.l Nem_Fan		; fan
0001DE52 7400                       		dc.w $7400
0001DE54 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001DE58 7980                       		dc.w $7980
0001DE5A 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001DE5E 7B80                       		dc.w $7B80
0001DE60 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001DE64 9B00                       		dc.w $9B00
0001DE66 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001DE6A 9E00                       		dc.w $9E00
0001DE6C                            ; ---------------------------------------------------------------------------
0001DE6C                            ; Pattern load cues - Spring Yard
0001DE6C                            ; ---------------------------------------------------------------------------
0001DE6C 0004                       PLC_SYZ:	dc.w 4
0001DE6E 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001DE72 0000                       		dc.w 0
0001DE74 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DE78 8000                       		dc.w $8000
0001DE7A 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DE7E 8880                       		dc.w $8880
0001DE80 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DE84 8F60                       		dc.w $8F60
0001DE86 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001DE8A 9700                       		dc.w $9700
0001DE8C 0007                       PLC_SYZ2:	dc.w 7
0001DE8E 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DE92 7000                       		dc.w $7000
0001DE94 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DE98 72C0                       		dc.w $72C0
0001DE9A 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001DE9E 7740                       		dc.w $7740
0001DEA0 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DEA4 9FE0                       		dc.w $9FE0
0001DEA6 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DEAA A1E0                       		dc.w $A1E0
0001DEAC 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DEB0 A360                       		dc.w $A360
0001DEB2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DEB6 A460                       		dc.w $A460
0001DEB8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DEBC A660                       		dc.w $A660
0001DEBE                            ; ---------------------------------------------------------------------------
0001DEBE                            ; Pattern load cues - Scrap Brain
0001DEBE                            ; ---------------------------------------------------------------------------
0001DEBE 000B                       PLC_SBZ:	dc.w $B
0001DEC0 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001DEC4 0000                       		dc.w 0
0001DEC6 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001DECA 5800                       		dc.w $5800
0001DECC 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001DED0 5D00                       		dc.w $5D00
0001DED2 0000 0000                  		dc.l Nem_Girder		; girder
0001DED6 5E00                       		dc.w $5E00
0001DED8 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001DEDC 6040                       		dc.w $6040
0001DEDE 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001DEE2 6880                       		dc.w $6880
0001DEE4 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001DEE8 6900                       		dc.w $6900
0001DEEA 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DEEE 7220                       		dc.w $7220
0001DEF0 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001DEF4 76A0                       		dc.w $76A0
0001DEF6 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001DEFA 7B20                       		dc.w $7B20
0001DEFC 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DF00 7EA0                       		dc.w $7EA0
0001DF02 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001DF06 9860                       		dc.w $9860
0001DF08 000C                       PLC_SBZ2:	dc.w $C
0001DF0A 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DF0E 5600                       		dc.w $5600
0001DF10 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DF14 8000                       		dc.w $8000
0001DF16 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DF1A 8520                       		dc.w $8520
0001DF1C 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001DF20 8C00                       		dc.w $8C00
0001DF22 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001DF26 8DE0                       		dc.w $8DE0
0001DF28 0000 0000                  		dc.l Nem_Electric	; electric orb
0001DF2C 8FC0                       		dc.w $8FC0
0001DF2E 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001DF32 9240                       		dc.w $9240
0001DF34 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DF38 7F20                       		dc.w $7F20
0001DF3A 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001DF3E 9BE0                       		dc.w $9BE0
0001DF40 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DF44 A1E0                       		dc.w $A1E0
0001DF46 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DF4A A360                       		dc.w $A360
0001DF4C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DF50 A460                       		dc.w $A460
0001DF52 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DF56 A660                       		dc.w $A660
0001DF58                            ; ---------------------------------------------------------------------------
0001DF58                            ; Pattern load cues - title card
0001DF58                            ; ---------------------------------------------------------------------------
0001DF58 0000                       PLC_TitleCard:	dc.w 0
0001DF5A 0000 0000                  		dc.l Nem_TitleCard
0001DF5E B000                       		dc.w $B000
0001DF60                            ; ---------------------------------------------------------------------------
0001DF60                            ; Pattern load cues - act 3 boss
0001DF60                            ; ---------------------------------------------------------------------------
0001DF60 0005                       PLC_Boss:	dc.w 5
0001DF62 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001DF66 8000                       		dc.w $8000
0001DF68 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001DF6C 8D80                       		dc.w $8D80
0001DF6E 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001DF72 93A0                       		dc.w $93A0
0001DF74 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001DF78 A300                       		dc.w $A300
0001DF7A 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001DF7E A300                       		dc.w $A300
0001DF80 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001DF84 A540                       		dc.w $A540
0001DF86                            ; ---------------------------------------------------------------------------
0001DF86                            ; Pattern load cues - act 1/2 signpost
0001DF86                            ; ---------------------------------------------------------------------------
0001DF86 0002                       PLC_Signpost:	dc.w 2
0001DF88 0000 0000                  		dc.l Nem_SignPost	; signpost
0001DF8C D000                       		dc.w $D000
0001DF8E 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001DF92 96C0                       		dc.w $96C0
0001DF94 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001DF98 8C40                       		dc.w $8C40
0001DF9A                            ; ---------------------------------------------------------------------------
0001DF9A                            ; Pattern load cues - beta special stage warp effect
0001DF9A                            ; ---------------------------------------------------------------------------
0001DF9A 0000                       PLC_Warp:	dc.w 0
0001DF9C 0000 0000                  		dc.l Nem_Warp
0001DFA0 A820                       		dc.w $A820
0001DFA2                            ; ---------------------------------------------------------------------------
0001DFA2                            ; Pattern load cues - special stage
0001DFA2                            ; ---------------------------------------------------------------------------
0001DFA2 0010                       PLC_SpeStage:	dc.w $10
0001DFA4 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001DFA8 0000                       		dc.w 0
0001DFAA 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001DFAE 0A20                       		dc.w $A20
0001DFB0 0000 0000                  		dc.l Nem_SSWalls	; walls
0001DFB4 2840                       		dc.w $2840
0001DFB6 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DFBA 4760                       		dc.w $4760
0001DFBC 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001DFC0 4A20                       		dc.w $4A20
0001DFC2 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001DFC6 4C60                       		dc.w $4C60
0001DFC8 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001DFCC 5E00                       		dc.w $5E00
0001DFCE 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001DFD2 6E00                       		dc.w $6E00
0001DFD4 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001DFD8 7E00                       		dc.w $7E00
0001DFDA 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001DFDE 8E00                       		dc.w $8E00
0001DFE0 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001DFE4 9E00                       		dc.w $9E00
0001DFE6 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001DFEA AE00                       		dc.w $AE00
0001DFEC 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001DFF0 BE00                       		dc.w $BE00
0001DFF2 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001DFF6 EE00                       		dc.w $EE00
0001DFF8 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001DFFC F2E0                       		dc.w $F2E0
0001DFFE 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E002 F400                       		dc.w $F400
0001E004 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E008 F520                       		dc.w $F520
0001E00A 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E00E F2E0                       		dc.w $F2E0
0001E010 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E014 F400                       		dc.w $F400
0001E016 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E01A F520                       		dc.w $F520
0001E01C                            ; ---------------------------------------------------------------------------
0001E01C                            ; Pattern load cues - GHZ animals
0001E01C                            ; ---------------------------------------------------------------------------
0001E01C 0001                       PLC_GHZAnimals:	dc.w 1
0001E01E 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E022 B000                       		dc.w $B000
0001E024 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E028 B240                       		dc.w $B240
0001E02A                            ; ---------------------------------------------------------------------------
0001E02A                            ; Pattern load cues - LZ animals
0001E02A                            ; ---------------------------------------------------------------------------
0001E02A 0001                       PLC_LZAnimals:	dc.w 1
0001E02C 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E030 B000                       		dc.w $B000
0001E032 0000 0000                  		dc.l Nem_Seal		; seal
0001E036 B240                       		dc.w $B240
0001E038                            ; ---------------------------------------------------------------------------
0001E038                            ; Pattern load cues - MZ animals
0001E038                            ; ---------------------------------------------------------------------------
0001E038 0001                       PLC_MZAnimals:	dc.w 1
0001E03A 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E03E B000                       		dc.w $B000
0001E040 0000 0000                  		dc.l Nem_Seal		; seal
0001E044 B240                       		dc.w $B240
0001E046                            ; ---------------------------------------------------------------------------
0001E046                            ; Pattern load cues - SLZ animals
0001E046                            ; ---------------------------------------------------------------------------
0001E046 0001                       PLC_SLZAnimals:	dc.w 1
0001E048 0000 0000                  		dc.l Nem_Pig		; pig
0001E04C B000                       		dc.w $B000
0001E04E 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E052 B240                       		dc.w $B240
0001E054                            ; ---------------------------------------------------------------------------
0001E054                            ; Pattern load cues - SYZ animals
0001E054                            ; ---------------------------------------------------------------------------
0001E054 0001                       PLC_SYZAnimals:	dc.w 1
0001E056 0000 0000                  		dc.l Nem_Pig		; pig
0001E05A B000                       		dc.w $B000
0001E05C 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E060 B240                       		dc.w $B240
0001E062                            ; ---------------------------------------------------------------------------
0001E062                            ; Pattern load cues - SBZ animals
0001E062                            ; ---------------------------------------------------------------------------
0001E062 0001                       PLC_SBZAnimals:	dc.w 1
0001E064 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E068 B000                       		dc.w $B000
0001E06A 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E06E B240                       		dc.w $B240
0001E070                            ; ---------------------------------------------------------------------------
0001E070                            ; Pattern load cues - special stage results screen
0001E070                            ; ---------------------------------------------------------------------------
0001E070 0001                       PLC_SpeStResult:dc.w 1
0001E072 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E076 A820                       		dc.w $A820
0001E078 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E07C AA20                       		dc.w $AA20
0001E07E                            ; ---------------------------------------------------------------------------
0001E07E                            ; Pattern load cues - ending sequence
0001E07E                            ; ---------------------------------------------------------------------------
0001E07E 000E                       PLC_Ending:	dc.w $E
0001E080 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E084 0000                       		dc.w 0
0001E086 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E08A 39A0                       		dc.w $39A0
0001E08C 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E090 6B00                       		dc.w $6B00
0001E092 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E096 7400                       		dc.w $7400
0001E098 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E09C 78A0                       		dc.w $78A0
0001E09E 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E0A2 7C20                       		dc.w $7C20
0001E0A4 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E0A8 A480                       		dc.w $A480
0001E0AA 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E0AE AA60                       		dc.w $AA60
0001E0B0 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E0B4 ACA0                       		dc.w $ACA0
0001E0B6 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E0BA AE60                       		dc.w $AE60
0001E0BC 0000 0000                  		dc.l Nem_Seal		; seal
0001E0C0 B0A0                       		dc.w $B0A0
0001E0C2 0000 0000                  		dc.l Nem_Pig		; pig
0001E0C6 B260                       		dc.w $B260
0001E0C8 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E0CC B4A0                       		dc.w $B4A0
0001E0CE 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E0D2 B660                       		dc.w $B660
0001E0D4 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E0D8 B8A0                       		dc.w $B8A0
0001E0DA                            ; ---------------------------------------------------------------------------
0001E0DA                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E0DA                            ; ---------------------------------------------------------------------------
0001E0DA 0002                       PLC_TryAgain:	dc.w 2
0001E0DC 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E0E0 78A0                       		dc.w $78A0
0001E0E2 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E0E6 7C20                       		dc.w $7C20
0001E0E8 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E0EC B400                       		dc.w $B400
0001E0EE                            ; ---------------------------------------------------------------------------
0001E0EE                            ; Pattern load cues - Eggman on SBZ 2
0001E0EE                            ; ---------------------------------------------------------------------------
0001E0EE 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E0F0 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E0F4 A300                       		dc.w $A300
0001E0F6 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E0FA 8000                       		dc.w $8000
0001E0FC 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E100 9400                       		dc.w $9400
0001E102                            ; ---------------------------------------------------------------------------
0001E102                            ; Pattern load cues - final boss
0001E102                            ; ---------------------------------------------------------------------------
0001E102 0004                       PLC_FZBoss:	dc.w 4
0001E104 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E108 7400                       		dc.w $7400
0001E10A 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E10E 6000                       		dc.w $6000
0001E110 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E114 8000                       		dc.w $8000
0001E116 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E11A 8E00                       		dc.w $8E00
0001E11C 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E120 A540                       		dc.w $A540
0001E122                            		even
0001E122                            		even
0001E122                            
0001E122                            		incbin	misc\padding.bin
0001E210                            		even
0001E210                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E672                            		even
0001E672                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E76A                            		even
0001E76A                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001E87E                            		even
0001E87E                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001F88A                            		even
0001F88A                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023990                            		even
00023990                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
000239C4                            		even
000239C4                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00023A82                            		even
00023A82                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00023F2A                            		even
00023F2A                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
00023F88                            		even
00023F88                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00024B8E                            		even
00024B8E                            ; ---------------------------------------------------------------------------
00024B8E                            ; Sprite mappings - Sonic
00024B8E                            ; ---------------------------------------------------------------------------
00024B8E                            Map_Sonic:
00024B8E                            	include "_maps\Sonic.asm"
00024B8E                            Map_6d2d:
00024B8E 0000                       Map_6d2d_0: 	dc.w Map_6d2d_B8-Map_6d2d
00024B90 0000                       Map_6d2d_2: 	dc.w Map_6d2d_B9-Map_6d2d
00024B92 0000                       Map_6d2d_4: 	dc.w Map_6d2d_C4-Map_6d2d
00024B94 0000                       Map_6d2d_6: 	dc.w Map_6d2d_D4-Map_6d2d
00024B96 0000                       Map_6d2d_8: 	dc.w Map_6d2d_E4-Map_6d2d
00024B98 0000                       Map_6d2d_A: 	dc.w Map_6d2d_F4-Map_6d2d
00024B9A 0000                       Map_6d2d_C: 	dc.w Map_6d2d_104-Map_6d2d
00024B9C 0000                       Map_6d2d_E: 	dc.w Map_6d2d_119-Map_6d2d
00024B9E 0000                       Map_6d2d_10: 	dc.w Map_6d2d_124-Map_6d2d
00024BA0 0000                       Map_6d2d_12: 	dc.w Map_6d2d_12F-Map_6d2d
00024BA2 0000                       Map_6d2d_14: 	dc.w Map_6d2d_144-Map_6d2d
00024BA4 0000                       Map_6d2d_16: 	dc.w Map_6d2d_14F-Map_6d2d
00024BA6 0000                       Map_6d2d_18: 	dc.w Map_6d2d_15F-Map_6d2d
00024BA8 0000                       Map_6d2d_1A: 	dc.w Map_6d2d_179-Map_6d2d
00024BAA 0000                       Map_6d2d_1C: 	dc.w Map_6d2d_198-Map_6d2d
00024BAC 0000                       Map_6d2d_1E: 	dc.w Map_6d2d_1AD-Map_6d2d
00024BAE 0000                       Map_6d2d_20: 	dc.w Map_6d2d_1C7-Map_6d2d
00024BB0 0000                       Map_6d2d_22: 	dc.w Map_6d2d_1DC-Map_6d2d
00024BB2 0000                       Map_6d2d_24: 	dc.w Map_6d2d_1F6-Map_6d2d
00024BB4 0000                       Map_6d2d_26: 	dc.w Map_6d2d_20B-Map_6d2d
00024BB6 0000                       Map_6d2d_28: 	dc.w Map_6d2d_216-Map_6d2d
00024BB8 0000                       Map_6d2d_2A: 	dc.w Map_6d2d_221-Map_6d2d
00024BBA 0000                       Map_6d2d_2C: 	dc.w Map_6d2d_236-Map_6d2d
00024BBC 0000                       Map_6d2d_2E: 	dc.w Map_6d2d_241-Map_6d2d
00024BBE 0000                       Map_6d2d_30: 	dc.w Map_6d2d_251-Map_6d2d
00024BC0 0000                       Map_6d2d_32: 	dc.w Map_6d2d_270-Map_6d2d
00024BC2 0000                       Map_6d2d_34: 	dc.w Map_6d2d_28F-Map_6d2d
00024BC4 0000                       Map_6d2d_36: 	dc.w Map_6d2d_2A4-Map_6d2d
00024BC6 0000                       Map_6d2d_38: 	dc.w Map_6d2d_2BE-Map_6d2d
00024BC8 0000                       Map_6d2d_3A: 	dc.w Map_6d2d_2D3-Map_6d2d
00024BCA 0000                       Map_6d2d_3C: 	dc.w Map_6d2d_2ED-Map_6d2d
00024BCC 0000                       Map_6d2d_3E: 	dc.w Map_6d2d_2F8-Map_6d2d
00024BCE 0000                       Map_6d2d_40: 	dc.w Map_6d2d_303-Map_6d2d
00024BD0 0000                       Map_6d2d_42: 	dc.w Map_6d2d_30E-Map_6d2d
00024BD2 0000                       Map_6d2d_44: 	dc.w Map_6d2d_319-Map_6d2d
00024BD4 0000                       Map_6d2d_46: 	dc.w Map_6d2d_32E-Map_6d2d
00024BD6 0000                       Map_6d2d_48: 	dc.w Map_6d2d_33E-Map_6d2d
00024BD8 0000                       Map_6d2d_4A: 	dc.w Map_6d2d_353-Map_6d2d
00024BDA 0000                       Map_6d2d_4C: 	dc.w Map_6d2d_363-Map_6d2d
00024BDC 0000                       Map_6d2d_4E: 	dc.w Map_6d2d_36E-Map_6d2d
00024BDE 0000                       Map_6d2d_50: 	dc.w Map_6d2d_379-Map_6d2d
00024BE0 0000                       Map_6d2d_52: 	dc.w Map_6d2d_384-Map_6d2d
00024BE2 0000                       Map_6d2d_54: 	dc.w Map_6d2d_38F-Map_6d2d
00024BE4 0000                       Map_6d2d_56: 	dc.w Map_6d2d_3A4-Map_6d2d
00024BE6 0000                       Map_6d2d_58: 	dc.w Map_6d2d_3AF-Map_6d2d
00024BE8 0000                       Map_6d2d_5A: 	dc.w Map_6d2d_3C4-Map_6d2d
00024BEA 0000                       Map_6d2d_5C: 	dc.w Map_6d2d_3CF-Map_6d2d
00024BEC 0000                       Map_6d2d_5E: 	dc.w Map_6d2d_3D5-Map_6d2d
00024BEE 0000                       Map_6d2d_60: 	dc.w Map_6d2d_3DB-Map_6d2d
00024BF0 0000                       Map_6d2d_62: 	dc.w Map_6d2d_3E1-Map_6d2d
00024BF2 0000                       Map_6d2d_64: 	dc.w Map_6d2d_3E7-Map_6d2d
00024BF4 0000                       Map_6d2d_66: 	dc.w Map_6d2d_3ED-Map_6d2d
00024BF6 0000                       Map_6d2d_68: 	dc.w Map_6d2d_3F8-Map_6d2d
00024BF8 0000                       Map_6d2d_6A: 	dc.w Map_6d2d_3FE-Map_6d2d
00024BFA 0000                       Map_6d2d_6C: 	dc.w Map_6d2d_409-Map_6d2d
00024BFC 0000                       Map_6d2d_6E: 	dc.w Map_6d2d_40F-Map_6d2d
00024BFE 0000                       Map_6d2d_70: 	dc.w Map_6d2d_41A-Map_6d2d
00024C00 0000                       Map_6d2d_72: 	dc.w Map_6d2d_42F-Map_6d2d
00024C02 0000                       Map_6d2d_74: 	dc.w Map_6d2d_44E-Map_6d2d
00024C04 0000                       Map_6d2d_76: 	dc.w Map_6d2d_459-Map_6d2d
00024C06 0000                       Map_6d2d_78: 	dc.w Map_6d2d_464-Map_6d2d
00024C08 0000                       Map_6d2d_7A: 	dc.w Map_6d2d_479-Map_6d2d
00024C0A 0000                       Map_6d2d_7C: 	dc.w Map_6d2d_484-Map_6d2d
00024C0C 0000                       Map_6d2d_7E: 	dc.w Map_6d2d_494-Map_6d2d
00024C0E 0000                       Map_6d2d_80: 	dc.w Map_6d2d_4A9-Map_6d2d
00024C10 0000                       Map_6d2d_82: 	dc.w Map_6d2d_4B9-Map_6d2d
00024C12 0000                       Map_6d2d_84: 	dc.w Map_6d2d_4CE-Map_6d2d
00024C14 0000                       Map_6d2d_86: 	dc.w Map_6d2d_4E3-Map_6d2d
00024C16 0000                       Map_6d2d_88: 	dc.w Map_6d2d_4FD-Map_6d2d
00024C18 0000                       Map_6d2d_8A: 	dc.w Map_6d2d_517-Map_6d2d
00024C1A 0000                       Map_6d2d_8C: 	dc.w Map_6d2d_522-Map_6d2d
00024C1C 0000                       Map_6d2d_8E: 	dc.w Map_6d2d_532-Map_6d2d
00024C1E 0000                       Map_6d2d_90: 	dc.w Map_6d2d_53D-Map_6d2d
00024C20 0000                       Map_6d2d_92: 	dc.w Map_6d2d_54D-Map_6d2d
00024C22 0000                       Map_6d2d_94: 	dc.w Map_6d2d_558-Map_6d2d
00024C24 0000                       Map_6d2d_96: 	dc.w Map_6d2d_568-Map_6d2d
00024C26 0000                       Map_6d2d_98: 	dc.w Map_6d2d_578-Map_6d2d
00024C28 0000                       Map_6d2d_9A: 	dc.w Map_6d2d_592-Map_6d2d
00024C2A 0000                       Map_6d2d_9C: 	dc.w Map_6d2d_5AC-Map_6d2d
00024C2C 0000                       Map_6d2d_9E: 	dc.w Map_6d2d_5B7-Map_6d2d
00024C2E 0000                       Map_6d2d_A0: 	dc.w Map_6d2d_5C7-Map_6d2d
00024C30 0000                       Map_6d2d_A2: 	dc.w Map_6d2d_5CD-Map_6d2d
00024C32 0000                       Map_6d2d_A4: 	dc.w Map_6d2d_5D3-Map_6d2d
00024C34 0000                       Map_6d2d_A6: 	dc.w Map_6d2d_5D9-Map_6d2d
00024C36 0000                       Map_6d2d_A8: 	dc.w Map_6d2d_5EE-Map_6d2d
00024C38 0000                       Map_6d2d_AA: 	dc.w Map_6d2d_5FE-Map_6d2d
00024C3A 0000                       Map_6d2d_AC: 	dc.w Map_6d2d_60E-Map_6d2d
00024C3C 0000                       Map_6d2d_AE: 	dc.w Map_6d2d_61E-Map_6d2d
00024C3E 0000                       Map_6d2d_B0: 	dc.w Map_6d2d_629-Map_6d2d
00024C40 0000                       Map_6d2d_B2: 	dc.w Map_6d2d_634-Map_6d2d
00024C42 0000                       Map_6d2d_B4: 	dc.w Map_6d2d_644-Map_6d2d
00024C44 0000                       Map_6d2d_B6: 	dc.w Map_6d2d_64F-Map_6d2d
00024C46 00                         Map_6d2d_B8: 	dc.b $0
00024C47 02                         Map_6d2d_B9: 	dc.b $2
00024C48 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00024C4D 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00024C52 03                         Map_6d2d_C4: 	dc.b $3
00024C53 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024C58 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024C5D 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024C62 03                         Map_6d2d_D4: 	dc.b $3
00024C63 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024C68 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024C6D 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024C72 03                         Map_6d2d_E4: 	dc.b $3
00024C73 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024C78 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024C7D 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024C82 03                         Map_6d2d_F4: 	dc.b $3
00024C83 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00024C88 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00024C8D 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024C92 04                         Map_6d2d_104: 	dc.b $4
00024C93 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00024C98 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00024C9D FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00024CA2 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00024CA7 02                         Map_6d2d_119: 	dc.b $2
00024CA8 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00024CAD FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00024CB2 02                         Map_6d2d_124: 	dc.b $2
00024CB3 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00024CB8 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00024CBD 04                         Map_6d2d_12F: 	dc.b $4
00024CBE EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00024CC3 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00024CC8 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00024CCD 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00024CD2 02                         Map_6d2d_144: 	dc.b $2
00024CD3 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
00024CD8 EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00024CDD 03                         Map_6d2d_14F: 	dc.b $3
00024CDE ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00024CE3 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00024CE8 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00024CED 05                         Map_6d2d_15F: 	dc.b $5
00024CEE EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024CF3 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00024CF8 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00024CFD 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00024D02 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00024D07 06                         Map_6d2d_179: 	dc.b $6
00024D08 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024D0D EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024D12 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00024D17 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00024D1C FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00024D21 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00024D26 04                         Map_6d2d_198: 	dc.b $4
00024D27 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00024D2C ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00024D31 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00024D36 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00024D3B 05                         Map_6d2d_1AD: 	dc.b $5
00024D3C EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024D41 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00024D46 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00024D4B 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00024D50 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00024D55 04                         Map_6d2d_1C7: 	dc.b $4
00024D56 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024D5B EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024D60 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00024D65 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00024D6A 05                         Map_6d2d_1DC: 	dc.b $5
00024D6B ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00024D70 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00024D75 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00024D7A FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00024D7F 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00024D84 04                         Map_6d2d_1F6: 	dc.b $4
00024D85 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00024D8A EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00024D8F FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00024D94 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00024D99 02                         Map_6d2d_20B: 	dc.b $2
00024D9A F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00024D9F EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00024DA4 02                         Map_6d2d_216: 	dc.b $2
00024DA5 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00024DAA F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00024DAF 04                         Map_6d2d_221: 	dc.b $4
00024DB0 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
00024DB5 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00024DBA FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00024DBF 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00024DC4 02                         Map_6d2d_236: 	dc.b $2
00024DC5 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00024DCA F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00024DCF 03                         Map_6d2d_241: 	dc.b $3
00024DD0 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00024DD5 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00024DDA F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00024DDF 06                         Map_6d2d_251: 	dc.b $6
00024DE0 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00024DE5 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00024DEA F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00024DEF F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00024DF4 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00024DF9 FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00024DFE 06                         Map_6d2d_270: 	dc.b $6
00024DFF FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00024E04 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00024E09 EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00024E0E F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00024E13 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00024E18 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00024E1D 04                         Map_6d2d_28F: 	dc.b $4
00024E1E FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00024E23 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00024E28 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00024E2D 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00024E32 05                         Map_6d2d_2A4: 	dc.b $5
00024E33 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00024E38 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00024E3D F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00024E42 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00024E47 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00024E4C 04                         Map_6d2d_2BE: 	dc.b $4
00024E4D FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00024E52 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00024E57 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00024E5C 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00024E61 05                         Map_6d2d_2D3: 	dc.b $5
00024E62 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00024E67 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00024E6C F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00024E71 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00024E76 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00024E7B 02                         Map_6d2d_2ED: 	dc.b $2
00024E7C EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024E81 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024E86 02                         Map_6d2d_2F8: 	dc.b $2
00024E87 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024E8C FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024E91 02                         Map_6d2d_303: 	dc.b $2
00024E92 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024E97 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024E9C 02                         Map_6d2d_30E: 	dc.b $2
00024E9D EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024EA2 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024EA7 04                         Map_6d2d_319: 	dc.b $4
00024EA8 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024EAD EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024EB2 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024EB7 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00024EBC 03                         Map_6d2d_32E: 	dc.b $3
00024EBD EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024EC2 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024EC7 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024ECC 04                         Map_6d2d_33E: 	dc.b $4
00024ECD EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024ED2 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024ED7 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024EDC FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00024EE1 03                         Map_6d2d_353: 	dc.b $3
00024EE2 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024EE7 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024EEC FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024EF1 02                         Map_6d2d_363: 	dc.b $2
00024EF2 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024EF7 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024EFC 02                         Map_6d2d_36E: 	dc.b $2
00024EFD F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024F02 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024F07 02                         Map_6d2d_379: 	dc.b $2
00024F08 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024F0D F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024F12 02                         Map_6d2d_384: 	dc.b $2
00024F13 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024F18 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024F1D 04                         Map_6d2d_38F: 	dc.b $4
00024F1E FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00024F23 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00024F28 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024F2D 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00024F32 02                         Map_6d2d_3A4: 	dc.b $2
00024F33 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00024F38 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024F3D 04                         Map_6d2d_3AF: 	dc.b $4
00024F3E FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00024F43 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00024F48 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024F4D 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00024F52 02                         Map_6d2d_3C4: 	dc.b $2
00024F53 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00024F58 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00024F5D 01                         Map_6d2d_3CF: 	dc.b $1
00024F5E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F63 01                         Map_6d2d_3D5: 	dc.b $1
00024F64 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F69 01                         Map_6d2d_3DB: 	dc.b $1
00024F6A F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F6F 01                         Map_6d2d_3E1: 	dc.b $1
00024F70 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F75 01                         Map_6d2d_3E7: 	dc.b $1
00024F76 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F7B 02                         Map_6d2d_3ED: 	dc.b $2
00024F7C F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00024F81 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
00024F86 01                         Map_6d2d_3F8: 	dc.b $1
00024F87 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F8C 02                         Map_6d2d_3FE: 	dc.b $2
00024F8D EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00024F92 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
00024F97 01                         Map_6d2d_409: 	dc.b $1
00024F98 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024F9D 02                         Map_6d2d_40F: 	dc.b $2
00024F9E ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00024FA3 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
00024FA8 04                         Map_6d2d_41A: 	dc.b $4
00024FA9 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00024FAE FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00024FB3 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
00024FB8 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00024FBD 06                         Map_6d2d_42F: 	dc.b $6
00024FBE F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
00024FC3 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
00024FC8 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00024FCD 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
00024FD2 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
00024FD7 F400 0011 04               	dc.b $F4, $0, $0, $11, $4
00024FDC 02                         Map_6d2d_44E: 	dc.b $2
00024FDD 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
00024FE2 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
00024FE7 02                         Map_6d2d_459: 	dc.b $2
00024FE8 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
00024FED EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
00024FF2 04                         Map_6d2d_464: 	dc.b $4
00024FF3 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00024FF8 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00024FFD 0408 000C 03               	dc.b $4, $8, $0, $C, $3
00025002 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00025007 02                         Map_6d2d_479: 	dc.b $2
00025008 F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
0002500D F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00025012 03                         Map_6d2d_484: 	dc.b $3
00025013 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
00025018 FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
0002501D 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00025022 04                         Map_6d2d_494: 	dc.b $4
00025023 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00025028 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
0002502D 0408 000C 02               	dc.b $4, $8, $0, $C, $2
00025032 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00025037 03                         Map_6d2d_4A9: 	dc.b $3
00025038 E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
0002503D 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
00025042 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
00025047 04                         Map_6d2d_4B9: 	dc.b $4
00025048 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002504D 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00025052 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00025057 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
0002505C 04                         Map_6d2d_4CE: 	dc.b $4
0002505D F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00025062 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00025067 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
0002506C F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00025071 05                         Map_6d2d_4E3: 	dc.b $5
00025072 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00025077 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
0002507C 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00025081 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00025086 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
0002508B 05                         Map_6d2d_4FD: 	dc.b $5
0002508C E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00025091 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
00025096 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
0002509B 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000250A0 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000250A5 02                         Map_6d2d_517: 	dc.b $2
000250A6 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000250AB 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000250B0 03                         Map_6d2d_522: 	dc.b $3
000250B1 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000250B6 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000250BB 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000250C0 02                         Map_6d2d_532: 	dc.b $2
000250C1 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000250C6 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000250CB 03                         Map_6d2d_53D: 	dc.b $3
000250CC EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000250D1 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000250D6 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000250DB 02                         Map_6d2d_54D: 	dc.b $2
000250DC EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000250E1 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
000250E6 03                         Map_6d2d_558: 	dc.b $3
000250E7 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000250EC 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
000250F1 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
000250F6 03                         Map_6d2d_568: 	dc.b $3
000250F7 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000250FC E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025101 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00025106 05                         Map_6d2d_578: 	dc.b $5
00025107 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002510C E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025111 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025116 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
0002511B 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025120 05                         Map_6d2d_592: 	dc.b $5
00025121 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025126 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002512B F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025130 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025135 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002513A 02                         Map_6d2d_5AC: 	dc.b $2
0002513B EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025140 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00025145 03                         Map_6d2d_5B7: 	dc.b $3
00025146 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002514B F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00025150 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00025155 01                         Map_6d2d_5C7: 	dc.b $1
00025156 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
0002515B 01                         Map_6d2d_5CD: 	dc.b $1
0002515C F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
00025161 01                         Map_6d2d_5D3: 	dc.b $1
00025162 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
00025167 04                         Map_6d2d_5D9: 	dc.b $4
00025168 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
0002516D F705 0808 04               	dc.b $F7, $5, $8, $8, $4
00025172 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
00025177 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
0002517C 03                         Map_6d2d_5EE: 	dc.b $3
0002517D F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
00025182 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
00025187 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
0002518C 03                         Map_6d2d_5FE: 	dc.b $3
0002518D F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
00025192 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00025197 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
0002519C 03                         Map_6d2d_60E: 	dc.b $3
0002519D EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000251A2 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
000251A7 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
000251AC 02                         Map_6d2d_61E: 	dc.b $2
000251AD F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000251B2 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000251B7 02                         Map_6d2d_629: 	dc.b $2
000251B8 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000251BD EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000251C2 03                         Map_6d2d_634: 	dc.b $3
000251C3 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
000251C8 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
000251CD 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
000251D2 02                         Map_6d2d_644: 	dc.b $2
000251D3 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
000251D8 EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
000251DD 04                         Map_6d2d_64F: 	dc.b $4
000251DE ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
000251E3 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
000251E8 F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
000251ED 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
000251F2                            	even
000251F2                            	even
000251F2                            
000251F2                            ; ---------------------------------------------------------------------------
000251F2                            ; Uncompressed graphics	loading	array for Sonic
000251F2                            ; ---------------------------------------------------------------------------
000251F2                            SonicDynPLC:
000251F2                            	include "_inc\Sonic dynamic pattern load cues.asm"
000251F2                            DPLC_2d5b:
000251F2 0000                       DPLC_2d5b_0: 	dc.w DPLC_2d5b_B8-DPLC_2d5b
000251F4 0000                       DPLC_2d5b_2: 	dc.w DPLC_2d5b_B9-DPLC_2d5b
000251F6 0000                       DPLC_2d5b_4: 	dc.w DPLC_2d5b_BE-DPLC_2d5b
000251F8 0000                       DPLC_2d5b_6: 	dc.w DPLC_2d5b_C5-DPLC_2d5b
000251FA 0000                       DPLC_2d5b_8: 	dc.w DPLC_2d5b_CC-DPLC_2d5b
000251FC 0000                       DPLC_2d5b_A: 	dc.w DPLC_2d5b_D3-DPLC_2d5b
000251FE 0000                       DPLC_2d5b_C: 	dc.w DPLC_2d5b_DA-DPLC_2d5b
00025200 0000                       DPLC_2d5b_E: 	dc.w DPLC_2d5b_E3-DPLC_2d5b
00025202 0000                       DPLC_2d5b_10: 	dc.w DPLC_2d5b_E8-DPLC_2d5b
00025204 0000                       DPLC_2d5b_12: 	dc.w DPLC_2d5b_ED-DPLC_2d5b
00025206 0000                       DPLC_2d5b_14: 	dc.w DPLC_2d5b_F6-DPLC_2d5b
00025208 0000                       DPLC_2d5b_16: 	dc.w DPLC_2d5b_FB-DPLC_2d5b
0002520A 0000                       DPLC_2d5b_18: 	dc.w DPLC_2d5b_102-DPLC_2d5b
0002520C 0000                       DPLC_2d5b_1A: 	dc.w DPLC_2d5b_10D-DPLC_2d5b
0002520E 0000                       DPLC_2d5b_1C: 	dc.w DPLC_2d5b_11A-DPLC_2d5b
00025210 0000                       DPLC_2d5b_1E: 	dc.w DPLC_2d5b_123-DPLC_2d5b
00025212 0000                       DPLC_2d5b_20: 	dc.w DPLC_2d5b_12E-DPLC_2d5b
00025214 0000                       DPLC_2d5b_22: 	dc.w DPLC_2d5b_137-DPLC_2d5b
00025216 0000                       DPLC_2d5b_24: 	dc.w DPLC_2d5b_142-DPLC_2d5b
00025218 0000                       DPLC_2d5b_26: 	dc.w DPLC_2d5b_14B-DPLC_2d5b
0002521A 0000                       DPLC_2d5b_28: 	dc.w DPLC_2d5b_150-DPLC_2d5b
0002521C 0000                       DPLC_2d5b_2A: 	dc.w DPLC_2d5b_155-DPLC_2d5b
0002521E 0000                       DPLC_2d5b_2C: 	dc.w DPLC_2d5b_15E-DPLC_2d5b
00025220 0000                       DPLC_2d5b_2E: 	dc.w DPLC_2d5b_163-DPLC_2d5b
00025222 0000                       DPLC_2d5b_30: 	dc.w DPLC_2d5b_16A-DPLC_2d5b
00025224 0000                       DPLC_2d5b_32: 	dc.w DPLC_2d5b_177-DPLC_2d5b
00025226 0000                       DPLC_2d5b_34: 	dc.w DPLC_2d5b_184-DPLC_2d5b
00025228 0000                       DPLC_2d5b_36: 	dc.w DPLC_2d5b_18D-DPLC_2d5b
0002522A 0000                       DPLC_2d5b_38: 	dc.w DPLC_2d5b_198-DPLC_2d5b
0002522C 0000                       DPLC_2d5b_3A: 	dc.w DPLC_2d5b_1A1-DPLC_2d5b
0002522E 0000                       DPLC_2d5b_3C: 	dc.w DPLC_2d5b_1AC-DPLC_2d5b
00025230 0000                       DPLC_2d5b_3E: 	dc.w DPLC_2d5b_1B1-DPLC_2d5b
00025232 0000                       DPLC_2d5b_40: 	dc.w DPLC_2d5b_1B6-DPLC_2d5b
00025234 0000                       DPLC_2d5b_42: 	dc.w DPLC_2d5b_1BB-DPLC_2d5b
00025236 0000                       DPLC_2d5b_44: 	dc.w DPLC_2d5b_1C0-DPLC_2d5b
00025238 0000                       DPLC_2d5b_46: 	dc.w DPLC_2d5b_1C9-DPLC_2d5b
0002523A 0000                       DPLC_2d5b_48: 	dc.w DPLC_2d5b_1D0-DPLC_2d5b
0002523C 0000                       DPLC_2d5b_4A: 	dc.w DPLC_2d5b_1D9-DPLC_2d5b
0002523E 0000                       DPLC_2d5b_4C: 	dc.w DPLC_2d5b_1E0-DPLC_2d5b
00025240 0000                       DPLC_2d5b_4E: 	dc.w DPLC_2d5b_1E5-DPLC_2d5b
00025242 0000                       DPLC_2d5b_50: 	dc.w DPLC_2d5b_1EA-DPLC_2d5b
00025244 0000                       DPLC_2d5b_52: 	dc.w DPLC_2d5b_1EF-DPLC_2d5b
00025246 0000                       DPLC_2d5b_54: 	dc.w DPLC_2d5b_1F4-DPLC_2d5b
00025248 0000                       DPLC_2d5b_56: 	dc.w DPLC_2d5b_1FD-DPLC_2d5b
0002524A 0000                       DPLC_2d5b_58: 	dc.w DPLC_2d5b_202-DPLC_2d5b
0002524C 0000                       DPLC_2d5b_5A: 	dc.w DPLC_2d5b_20B-DPLC_2d5b
0002524E 0000                       DPLC_2d5b_5C: 	dc.w DPLC_2d5b_210-DPLC_2d5b
00025250 0000                       DPLC_2d5b_5E: 	dc.w DPLC_2d5b_213-DPLC_2d5b
00025252 0000                       DPLC_2d5b_60: 	dc.w DPLC_2d5b_216-DPLC_2d5b
00025254 0000                       DPLC_2d5b_62: 	dc.w DPLC_2d5b_219-DPLC_2d5b
00025256 0000                       DPLC_2d5b_64: 	dc.w DPLC_2d5b_21C-DPLC_2d5b
00025258 0000                       DPLC_2d5b_66: 	dc.w DPLC_2d5b_21F-DPLC_2d5b
0002525A 0000                       DPLC_2d5b_68: 	dc.w DPLC_2d5b_224-DPLC_2d5b
0002525C 0000                       DPLC_2d5b_6A: 	dc.w DPLC_2d5b_227-DPLC_2d5b
0002525E 0000                       DPLC_2d5b_6C: 	dc.w DPLC_2d5b_22C-DPLC_2d5b
00025260 0000                       DPLC_2d5b_6E: 	dc.w DPLC_2d5b_22F-DPLC_2d5b
00025262 0000                       DPLC_2d5b_70: 	dc.w DPLC_2d5b_234-DPLC_2d5b
00025264 0000                       DPLC_2d5b_72: 	dc.w DPLC_2d5b_23D-DPLC_2d5b
00025266 0000                       DPLC_2d5b_74: 	dc.w DPLC_2d5b_242-DPLC_2d5b
00025268 0000                       DPLC_2d5b_76: 	dc.w DPLC_2d5b_247-DPLC_2d5b
0002526A 0000                       DPLC_2d5b_78: 	dc.w DPLC_2d5b_24C-DPLC_2d5b
0002526C 0000                       DPLC_2d5b_7A: 	dc.w DPLC_2d5b_251-DPLC_2d5b
0002526E 0000                       DPLC_2d5b_7C: 	dc.w DPLC_2d5b_254-DPLC_2d5b
00025270 0000                       DPLC_2d5b_7E: 	dc.w DPLC_2d5b_25B-DPLC_2d5b
00025272 0000                       DPLC_2d5b_80: 	dc.w DPLC_2d5b_260-DPLC_2d5b
00025274 0000                       DPLC_2d5b_82: 	dc.w DPLC_2d5b_267-DPLC_2d5b
00025276 0000                       DPLC_2d5b_84: 	dc.w DPLC_2d5b_270-DPLC_2d5b
00025278 0000                       DPLC_2d5b_86: 	dc.w DPLC_2d5b_279-DPLC_2d5b
0002527A 0000                       DPLC_2d5b_88: 	dc.w DPLC_2d5b_284-DPLC_2d5b
0002527C 0000                       DPLC_2d5b_8A: 	dc.w DPLC_2d5b_28F-DPLC_2d5b
0002527E 0000                       DPLC_2d5b_8C: 	dc.w DPLC_2d5b_294-DPLC_2d5b
00025280 0000                       DPLC_2d5b_8E: 	dc.w DPLC_2d5b_29B-DPLC_2d5b
00025282 0000                       DPLC_2d5b_90: 	dc.w DPLC_2d5b_2A0-DPLC_2d5b
00025284 0000                       DPLC_2d5b_92: 	dc.w DPLC_2d5b_2A7-DPLC_2d5b
00025286 0000                       DPLC_2d5b_94: 	dc.w DPLC_2d5b_2AC-DPLC_2d5b
00025288 0000                       DPLC_2d5b_96: 	dc.w DPLC_2d5b_2B3-DPLC_2d5b
0002528A 0000                       DPLC_2d5b_98: 	dc.w DPLC_2d5b_2BA-DPLC_2d5b
0002528C 0000                       DPLC_2d5b_9A: 	dc.w DPLC_2d5b_2C5-DPLC_2d5b
0002528E 0000                       DPLC_2d5b_9C: 	dc.w DPLC_2d5b_2D0-DPLC_2d5b
00025290 0000                       DPLC_2d5b_9E: 	dc.w DPLC_2d5b_2D5-DPLC_2d5b
00025292 0000                       DPLC_2d5b_A0: 	dc.w DPLC_2d5b_2DC-DPLC_2d5b
00025294 0000                       DPLC_2d5b_A2: 	dc.w DPLC_2d5b_2DF-DPLC_2d5b
00025296 0000                       DPLC_2d5b_A4: 	dc.w DPLC_2d5b_2E2-DPLC_2d5b
00025298 0000                       DPLC_2d5b_A6: 	dc.w DPLC_2d5b_2E5-DPLC_2d5b
0002529A 0000                       DPLC_2d5b_A8: 	dc.w DPLC_2d5b_2EA-DPLC_2d5b
0002529C 0000                       DPLC_2d5b_AA: 	dc.w DPLC_2d5b_2F1-DPLC_2d5b
0002529E 0000                       DPLC_2d5b_AC: 	dc.w DPLC_2d5b_2F8-DPLC_2d5b
000252A0 0000                       DPLC_2d5b_AE: 	dc.w DPLC_2d5b_2FF-DPLC_2d5b
000252A2 0000                       DPLC_2d5b_B0: 	dc.w DPLC_2d5b_304-DPLC_2d5b
000252A4 0000                       DPLC_2d5b_B2: 	dc.w DPLC_2d5b_309-DPLC_2d5b
000252A6 0000                       DPLC_2d5b_B4: 	dc.w DPLC_2d5b_30E-DPLC_2d5b
000252A8 0000                       DPLC_2d5b_B6: 	dc.w DPLC_2d5b_313-DPLC_2d5b
000252AA 00                         DPLC_2d5b_B8: 	dc.b $0
000252AB 02                         DPLC_2d5b_B9: 	dc.b $2
000252AC F000                       	dc.b $F0, $0
000252AE 1010                       	dc.b $10, $10
000252B0 03                         DPLC_2d5b_BE: 	dc.b $3
000252B1 5012                       	dc.b $50, $12
000252B3 5018                       	dc.b $50, $18
000252B5 201E                       	dc.b $20, $1E
000252B7 03                         DPLC_2d5b_C5: 	dc.b $3
000252B8 5021                       	dc.b $50, $21
000252BA 5018                       	dc.b $50, $18
000252BC 201E                       	dc.b $20, $1E
000252BE 03                         DPLC_2d5b_CC: 	dc.b $3
000252BF 5021                       	dc.b $50, $21
000252C1 5018                       	dc.b $50, $18
000252C3 2027                       	dc.b $20, $27
000252C5 03                         DPLC_2d5b_D3: 	dc.b $3
000252C6 802A                       	dc.b $80, $2A
000252C8 2033                       	dc.b $20, $33
000252CA 2036                       	dc.b $20, $36
000252CC 04                         DPLC_2d5b_DA: 	dc.b $4
000252CD 7039                       	dc.b $70, $39
000252CF 5041                       	dc.b $50, $41
000252D1 5047                       	dc.b $50, $47
000252D3 104D                       	dc.b $10, $4D
000252D5 02                         DPLC_2d5b_E3: 	dc.b $2
000252D6 7039                       	dc.b $70, $39
000252D8 B04F                       	dc.b $B0, $4F
000252DA 02                         DPLC_2d5b_E8: 	dc.b $2
000252DB 505B                       	dc.b $50, $5B
000252DD 8061                       	dc.b $80, $61
000252DF 04                         DPLC_2d5b_ED: 	dc.b $4
000252E0 505B                       	dc.b $50, $5B
000252E2 506A                       	dc.b $50, $6A
000252E4 5070                       	dc.b $50, $70
000252E6 1076                       	dc.b $10, $76
000252E8 02                         DPLC_2d5b_F6: 	dc.b $2
000252E9 F4F0                       	dc.b $F4, $F0
000252EB 1500                       	dc.b $15, $0
000252ED 03                         DPLC_2d5b_FB: 	dc.b $3
000252EE 7039                       	dc.b $70, $39
000252F0 3078                       	dc.b $30, $78
000252F2 507C                       	dc.b $50, $7C
000252F4 05                         DPLC_2d5b_102: 	dc.b $5
000252F5 5082                       	dc.b $50, $82
000252F7 5088                       	dc.b $50, $88
000252F9 208E                       	dc.b $20, $8E
000252FB 5091                       	dc.b $50, $91
000252FD 0097                       	dc.b $0, $97
000252FF 06                         DPLC_2d5b_10D: 	dc.b $6
00025300 5082                       	dc.b $50, $82
00025302 1098                       	dc.b $10, $98
00025304 309A                       	dc.b $30, $9A
00025306 509E                       	dc.b $50, $9E
00025308 30A4                       	dc.b $30, $A4
0002530A 00A8                       	dc.b $0, $A8
0002530C 04                         DPLC_2d5b_11A: 	dc.b $4
0002530D 50A9                       	dc.b $50, $A9
0002530F 10AF                       	dc.b $10, $AF
00025311 70B1                       	dc.b $70, $B1
00025313 20B9                       	dc.b $20, $B9
00025315 05                         DPLC_2d5b_123: 	dc.b $5
00025316 50BC                       	dc.b $50, $BC
00025318 30C2                       	dc.b $30, $C2
0002531A 70C6                       	dc.b $70, $C6
0002531C 20CE                       	dc.b $20, $CE
0002531E 10D1                       	dc.b $10, $D1
00025320 04                         DPLC_2d5b_12E: 	dc.b $4
00025321 50BC                       	dc.b $50, $BC
00025323 10D3                       	dc.b $10, $D3
00025325 70D5                       	dc.b $70, $D5
00025327 20DD                       	dc.b $20, $DD
00025329 05                         DPLC_2d5b_137: 	dc.b $5
0002532A 5082                       	dc.b $50, $82
0002532C 1098                       	dc.b $10, $98
0002532E 008E                       	dc.b $0, $8E
00025330 70E0                       	dc.b $70, $E0
00025332 20E8                       	dc.b $20, $E8
00025334 04                         DPLC_2d5b_142: 	dc.b $4
00025335 70EB                       	dc.b $70, $EB
00025337 50F3                       	dc.b $50, $F3
00025339 10F9                       	dc.b $10, $F9
0002533B 50FB                       	dc.b $50, $FB
0002533D 02                         DPLC_2d5b_14B: 	dc.b $2
0002533E 70EB                       	dc.b $70, $EB
00025340 B101                       	dc.b $B1, $1
00025342 02                         DPLC_2d5b_150: 	dc.b $2
00025343 510D                       	dc.b $51, $D
00025345 8113                       	dc.b $81, $13
00025347 04                         DPLC_2d5b_155: 	dc.b $4
00025348 510D                       	dc.b $51, $D
0002534A 511C                       	dc.b $51, $1C
0002534C 1122                       	dc.b $11, $22
0002534E 5124                       	dc.b $51, $24
00025350 02                         DPLC_2d5b_15E: 	dc.b $2
00025351 510D                       	dc.b $51, $D
00025353 B12A                       	dc.b $B1, $2A
00025355 03                         DPLC_2d5b_163: 	dc.b $3
00025356 70EB                       	dc.b $70, $EB
00025358 0101                       	dc.b $1, $1
0002535A 8136                       	dc.b $81, $36
0002535C 06                         DPLC_2d5b_16A: 	dc.b $6
0002535D 513F                       	dc.b $51, $3F
0002535F 1145                       	dc.b $11, $45
00025361 1147                       	dc.b $11, $47
00025363 8149                       	dc.b $81, $49
00025365 0152                       	dc.b $1, $52
00025367 0153                       	dc.b $1, $53
00025369 06                         DPLC_2d5b_177: 	dc.b $6
0002536A 513F                       	dc.b $51, $3F
0002536C 2154                       	dc.b $21, $54
0002536E 1157                       	dc.b $11, $57
00025370 1159                       	dc.b $11, $59
00025372 815B                       	dc.b $81, $5B
00025374 0152                       	dc.b $1, $52
00025376 04                         DPLC_2d5b_184: 	dc.b $4
00025377 5164                       	dc.b $51, $64
00025379 116A                       	dc.b $11, $6A
0002537B 816C                       	dc.b $81, $6C
0002537D 1175                       	dc.b $11, $75
0002537F 05                         DPLC_2d5b_18D: 	dc.b $5
00025380 5177                       	dc.b $51, $77
00025382 217D                       	dc.b $21, $7D
00025384 1180                       	dc.b $11, $80
00025386 7182                       	dc.b $71, $82
00025388 218A                       	dc.b $21, $8A
0002538A 04                         DPLC_2d5b_198: 	dc.b $4
0002538B 5177                       	dc.b $51, $77
0002538D 118D                       	dc.b $11, $8D
0002538F 818F                       	dc.b $81, $8F
00025391 1198                       	dc.b $11, $98
00025393 05                         DPLC_2d5b_1A1: 	dc.b $5
00025394 513F                       	dc.b $51, $3F
00025396 819A                       	dc.b $81, $9A
00025398 1159                       	dc.b $11, $59
0002539A 11A3                       	dc.b $11, $A3
0002539C 0152                       	dc.b $1, $52
0002539E 02                         DPLC_2d5b_1AC: 	dc.b $2
0002539F 51A5                       	dc.b $51, $A5
000253A1 B1AB                       	dc.b $B1, $AB
000253A3 02                         DPLC_2d5b_1B1: 	dc.b $2
000253A4 505B                       	dc.b $50, $5B
000253A6 B1B7                       	dc.b $B1, $B7
000253A8 02                         DPLC_2d5b_1B6: 	dc.b $2
000253A9 51A5                       	dc.b $51, $A5
000253AB B1C3                       	dc.b $B1, $C3
000253AD 02                         DPLC_2d5b_1BB: 	dc.b $2
000253AE 505B                       	dc.b $50, $5B
000253B0 B1CF                       	dc.b $B1, $CF
000253B2 04                         DPLC_2d5b_1C0: 	dc.b $4
000253B3 51DB                       	dc.b $51, $DB
000253B5 11E1                       	dc.b $11, $E1
000253B7 B1E3                       	dc.b $B1, $E3
000253B9 01EF                       	dc.b $1, $EF
000253BB 03                         DPLC_2d5b_1C9: 	dc.b $3
000253BC 51F0                       	dc.b $51, $F0
000253BE 11F6                       	dc.b $11, $F6
000253C0 B1F8                       	dc.b $B1, $F8
000253C2 04                         DPLC_2d5b_1D0: 	dc.b $4
000253C3 51DB                       	dc.b $51, $DB
000253C5 1204                       	dc.b $12, $4
000253C7 B206                       	dc.b $B2, $6
000253C9 01EF                       	dc.b $1, $EF
000253CB 03                         DPLC_2d5b_1D9: 	dc.b $3
000253CC 51F0                       	dc.b $51, $F0
000253CE 11F6                       	dc.b $11, $F6
000253D0 B212                       	dc.b $B2, $12
000253D2 02                         DPLC_2d5b_1E0: 	dc.b $2
000253D3 521E                       	dc.b $52, $1E
000253D5 B224                       	dc.b $B2, $24
000253D7 02                         DPLC_2d5b_1E5: 	dc.b $2
000253D8 510D                       	dc.b $51, $D
000253DA B230                       	dc.b $B2, $30
000253DC 02                         DPLC_2d5b_1EA: 	dc.b $2
000253DD 521E                       	dc.b $52, $1E
000253DF B23C                       	dc.b $B2, $3C
000253E1 02                         DPLC_2d5b_1EF: 	dc.b $2
000253E2 510D                       	dc.b $51, $D
000253E4 B248                       	dc.b $B2, $48
000253E6 04                         DPLC_2d5b_1F4: 	dc.b $4
000253E7 5254                       	dc.b $52, $54
000253E9 125A                       	dc.b $12, $5A
000253EB B25C                       	dc.b $B2, $5C
000253ED 0268                       	dc.b $2, $68
000253EF 02                         DPLC_2d5b_1FD: 	dc.b $2
000253F0 7269                       	dc.b $72, $69
000253F2 B271                       	dc.b $B2, $71
000253F4 04                         DPLC_2d5b_202: 	dc.b $4
000253F5 5254                       	dc.b $52, $54
000253F7 127D                       	dc.b $12, $7D
000253F9 B27F                       	dc.b $B2, $7F
000253FB 0268                       	dc.b $2, $68
000253FD 02                         DPLC_2d5b_20B: 	dc.b $2
000253FE 7269                       	dc.b $72, $69
00025400 B28B                       	dc.b $B2, $8B
00025402 01                         DPLC_2d5b_210: 	dc.b $1
00025403 F297                       	dc.b $F2, $97
00025405 01                         DPLC_2d5b_213: 	dc.b $1
00025406 F2A7                       	dc.b $F2, $A7
00025408 01                         DPLC_2d5b_216: 	dc.b $1
00025409 F2B7                       	dc.b $F2, $B7
0002540B 01                         DPLC_2d5b_219: 	dc.b $1
0002540C F2C7                       	dc.b $F2, $C7
0002540E 01                         DPLC_2d5b_21C: 	dc.b $1
0002540F F2D7                       	dc.b $F2, $D7
00025411 02                         DPLC_2d5b_21F: 	dc.b $2
00025412 B2E7                       	dc.b $B2, $E7
00025414 22F3                       	dc.b $22, $F3
00025416 01                         DPLC_2d5b_224: 	dc.b $1
00025417 F2F6                       	dc.b $F2, $F6
00025419 02                         DPLC_2d5b_227: 	dc.b $2
0002541A B306                       	dc.b $B3, $6
0002541C 2312                       	dc.b $23, $12
0002541E 01                         DPLC_2d5b_22C: 	dc.b $1
0002541F F315                       	dc.b $F3, $15
00025421 02                         DPLC_2d5b_22F: 	dc.b $2
00025422 5325                       	dc.b $53, $25
00025424 B32B                       	dc.b $B3, $2B
00025426 04                         DPLC_2d5b_234: 	dc.b $4
00025427 5337                       	dc.b $53, $37
00025429 733D                       	dc.b $73, $3D
0002542B 1345                       	dc.b $13, $45
0002542D 0347                       	dc.b $3, $47
0002542F 02                         DPLC_2d5b_23D: 	dc.b $2
00025430 D348                       	dc.b $D3, $48
00025432 34EC                       	dc.b $34, $EC
00025434 02                         DPLC_2d5b_242: 	dc.b $2
00025435 F528                       	dc.b $F5, $28
00025437 0538                       	dc.b $5, $38
00025439 02                         DPLC_2d5b_247: 	dc.b $2
0002543A F539                       	dc.b $F5, $39
0002543C 0549                       	dc.b $5, $49
0002543E 02                         DPLC_2d5b_24C: 	dc.b $2
0002543F E356                       	dc.b $E3, $56
00025441 054A                       	dc.b $5, $4A
00025443 01                         DPLC_2d5b_251: 	dc.b $1
00025444 8365                       	dc.b $83, $65
00025446 03                         DPLC_2d5b_254: 	dc.b $3
00025447 736E                       	dc.b $73, $6E
00025449 0376                       	dc.b $3, $76
0002544B 3377                       	dc.b $33, $77
0002544D 02                         DPLC_2d5b_25B: 	dc.b $2
0002544E E37B                       	dc.b $E3, $7B
00025450 054A                       	dc.b $5, $4A
00025452 03                         DPLC_2d5b_260: 	dc.b $3
00025453 B38A                       	dc.b $B3, $8A
00025455 1396                       	dc.b $13, $96
00025457 0398                       	dc.b $3, $98
00025459 04                         DPLC_2d5b_267: 	dc.b $4
0002545A B399                       	dc.b $B3, $99
0002545C 33A5                       	dc.b $33, $A5
0002545E 03A9                       	dc.b $3, $A9
00025460 03AA                       	dc.b $3, $AA
00025462 04                         DPLC_2d5b_270: 	dc.b $4
00025463 B3AB                       	dc.b $B3, $AB
00025465 33B7                       	dc.b $33, $B7
00025467 03BB                       	dc.b $3, $BB
00025469 03BC                       	dc.b $3, $BC
0002546B 05                         DPLC_2d5b_279: 	dc.b $5
0002546C 83BD                       	dc.b $83, $BD
0002546E 13C6                       	dc.b $13, $C6
00025470 53C8                       	dc.b $53, $C8
00025472 13CE                       	dc.b $13, $CE
00025474 03D0                       	dc.b $3, $D0
00025476 05                         DPLC_2d5b_284: 	dc.b $5
00025477 83D1                       	dc.b $83, $D1
00025479 13DA                       	dc.b $13, $DA
0002547B 53C8                       	dc.b $53, $C8
0002547D 13CE                       	dc.b $13, $CE
0002547F 03D0                       	dc.b $3, $D0
00025481 02                         DPLC_2d5b_28F: 	dc.b $2
00025482 83DC                       	dc.b $83, $DC
00025484 73E5                       	dc.b $73, $E5
00025486 03                         DPLC_2d5b_294: 	dc.b $3
00025487 83ED                       	dc.b $83, $ED
00025489 23F6                       	dc.b $23, $F6
0002548B 13F9                       	dc.b $13, $F9
0002548D 02                         DPLC_2d5b_29B: 	dc.b $2
0002548E 83FB                       	dc.b $83, $FB
00025490 7404                       	dc.b $74, $4
00025492 03                         DPLC_2d5b_2A0: 	dc.b $3
00025493 83ED                       	dc.b $83, $ED
00025495 240C                       	dc.b $24, $C
00025497 140F                       	dc.b $14, $F
00025499 02                         DPLC_2d5b_2A7: 	dc.b $2
0002549A 5411                       	dc.b $54, $11
0002549C B417                       	dc.b $B4, $17
0002549E 03                         DPLC_2d5b_2AC: 	dc.b $3
0002549F 8423                       	dc.b $84, $23
000254A1 342C                       	dc.b $34, $2C
000254A3 0430                       	dc.b $4, $30
000254A5 03                         DPLC_2d5b_2B3: 	dc.b $3
000254A6 7431                       	dc.b $74, $31
000254A8 1439                       	dc.b $14, $39
000254AA B43B                       	dc.b $B4, $3B
000254AC 05                         DPLC_2d5b_2BA: 	dc.b $5
000254AD 7447                       	dc.b $74, $47
000254AF 144F                       	dc.b $14, $4F
000254B1 5451                       	dc.b $54, $51
000254B3 3457                       	dc.b $34, $57
000254B5 045B                       	dc.b $4, $5B
000254B7 05                         DPLC_2d5b_2C5: 	dc.b $5
000254B8 745C                       	dc.b $74, $5C
000254BA 144F                       	dc.b $14, $4F
000254BC 5464                       	dc.b $54, $64
000254BE 3457                       	dc.b $34, $57
000254C0 045B                       	dc.b $4, $5B
000254C2 02                         DPLC_2d5b_2D0: 	dc.b $2
000254C3 246A                       	dc.b $24, $6A
000254C5 F46D                       	dc.b $F4, $6D
000254C7 03                         DPLC_2d5b_2D5: 	dc.b $3
000254C8 247D                       	dc.b $24, $7D
000254CA B480                       	dc.b $B4, $80
000254CC 248C                       	dc.b $24, $8C
000254CE 01                         DPLC_2d5b_2DC: 	dc.b $1
000254CF B48F                       	dc.b $B4, $8F
000254D1 01                         DPLC_2d5b_2DF: 	dc.b $1
000254D2 549B                       	dc.b $54, $9B
000254D4 01                         DPLC_2d5b_2E2: 	dc.b $1
000254D5 14A1                       	dc.b $14, $A1
000254D7 02                         DPLC_2d5b_2E5: 	dc.b $2
000254D8 E356                       	dc.b $E3, $56
000254DA 054A                       	dc.b $5, $4A
000254DC 03                         DPLC_2d5b_2EA: 	dc.b $3
000254DD 736E                       	dc.b $73, $6E
000254DF 0376                       	dc.b $3, $76
000254E1 3377                       	dc.b $33, $77
000254E3 03                         DPLC_2d5b_2F1: 	dc.b $3
000254E4 B4A3                       	dc.b $B4, $A3
000254E6 14AF                       	dc.b $14, $AF
000254E8 34B1                       	dc.b $34, $B1
000254EA 03                         DPLC_2d5b_2F8: 	dc.b $3
000254EB 54B5                       	dc.b $54, $B5
000254ED B4BB                       	dc.b $B4, $BB
000254EF 1074                       	dc.b $10, $74
000254F1 02                         DPLC_2d5b_2FF: 	dc.b $2
000254F2 F4C7                       	dc.b $F4, $C7
000254F4 24D7                       	dc.b $24, $D7
000254F6 02                         DPLC_2d5b_304: 	dc.b $2
000254F7 F4DA                       	dc.b $F4, $DA
000254F9 14EA                       	dc.b $14, $EA
000254FB 02                         DPLC_2d5b_309: 	dc.b $2
000254FC F502                       	dc.b $F5, $2
000254FE 2512                       	dc.b $25, $12
00025500 02                         DPLC_2d5b_30E: 	dc.b $2
00025501 F515                       	dc.b $F5, $15
00025503 2525                       	dc.b $25, $25
00025505 02                         DPLC_2d5b_313: 	dc.b $2
00025506 F54B                       	dc.b $F5, $4B
00025508 755B                       	dc.b $75, $5B
0002550A                            	even
0002550A                            	even
0002550A                            
0002550A                            ; ---------------------------------------------------------------------------
0002550A                            ; Uncompressed graphics	- Sonic
0002550A                            ; ---------------------------------------------------------------------------
0002550A                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0003012A                            		even
0003012A                            ; ---------------------------------------------------------------------------
0003012A                            ; Compressed graphics - various
0003012A                            ; ---------------------------------------------------------------------------
0003012A                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0003022E                            		even
0003022E                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
00030268                            		even
00030268                            Nem_Shield:	incbin	artnem\shield.bin	; shield
000303FE                            		even
000303FE                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
00030546                            		even
00030546                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00030650                            		even
00030650                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
000306A2                            		even
000306A2                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
000308EA                            		even
000308EA                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00030A70                            		even
00030A70                            ; ---------------------------------------------------------------------------
00030A70                            ; Sprite mappings - walls of the special stage
00030A70                            ; ---------------------------------------------------------------------------
00030A70                            Map_SSWalls:
00030A70                            	include "_maps\SSwalls.asm"
00030A70                            ; ---------------------------------------------------------------------------
00030A70                            ; Sprite mappings - walls of the special stage
00030A70                            ; ---------------------------------------------------------------------------
00030A70 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00030A74 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
00030A78 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
00030A7C 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00030A80 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00030A84 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
00030A88 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
00030A8C 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00030A90 01                         byte_2C584:	dc.b 1
00030A91 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00030A96 01                         byte_2C58A:	dc.b 1
00030A97 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
00030A9C 01                         byte_2C590:	dc.b 1
00030A9D F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00030AA2 01                         byte_2C596:	dc.b 1
00030AA3 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00030AA8 01                         byte_2C59C:	dc.b 1
00030AA9 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00030AAE 01                         byte_2C5A2:	dc.b 1
00030AAF F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00030AB4 01                         byte_2C5A8:	dc.b 1
00030AB5 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00030ABA 01                         byte_2C5AE:	dc.b 1
00030ABB F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00030AC0 01                         byte_2C5B4:	dc.b 1
00030AC1 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00030AC6 01                         byte_2C5BA:	dc.b 1
00030AC7 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
00030ACC 01                         byte_2C5C0:	dc.b 1
00030ACD F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00030AD2 01                         byte_2C5C6:	dc.b 1
00030AD3 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00030AD8 01                         byte_2C5CC:	dc.b 1
00030AD9 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00030ADE 01                         byte_2C5D2:	dc.b 1
00030ADF F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00030AE4 01                         byte_2C5D8:	dc.b 1
00030AE5 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00030AEA 01                         byte_2C5DE:	dc.b 1
00030AEB F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00030AF0                            		even
00030AF0                            		even
00030AF0                            ; ---------------------------------------------------------------------------
00030AF0                            ; Compressed graphics - special stage
00030AF0                            ; ---------------------------------------------------------------------------
00030AF0                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
00031428                            		even
00031428                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0003155C                            		even
0003155C                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
000321EC                            		even
000321EC                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
000324EC                            		even
000324EC                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
000329E0                            		even
000329E0                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00032ACE                            		even
00032ACE                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00032B9E                            		even
00032B9E                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00032C94                            		even
00032C94                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00032CF2                            		even
00032CF2                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00032D84                            		even
00032D84                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00032E46                            		even
00032E46                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00032F14                            		even
00032F14                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00032FE0                            		even
00032FE0                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
000330A8                            		even
000330A8                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00033172                            		even
00033172                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00033242                            		even
00033242                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00033436                            		even
00033436                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0003359E                            		even
0003359E                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
0003364E                            		even
0003364E                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00033728                            		even
00033728                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
000337AC                            		even
000337AC                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
0003392A                            		even
0003392A                            ; ---------------------------------------------------------------------------
0003392A                            ; Compressed graphics - GHZ stuff
0003392A                            ; ---------------------------------------------------------------------------
0003392A                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00033974                            		even
00033974                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00033A8E                            		even
00033A8E                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00033B7A                            		even
00033B7A                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00033BC2                            		even
00033BC2                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00033D60                            		even
00033D60                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00033DDC                            		even
00033DDC                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00033FF0                            		even
00033FF0                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
0003411C                            		even
0003411C                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
0003424A                            		even
0003424A                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
000342E8                            		even
000342E8                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00034348                            		even
00034348                            ; ---------------------------------------------------------------------------
00034348                            ; Compressed graphics - LZ stuff
00034348                            ; ---------------------------------------------------------------------------
00034348                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
0003446C                            		even
0003446C                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00034C60                            		even
00034C60                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00034DE0                            		even
00034DE0                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00034F4A                            		even
00034F4A                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
000355A0                            		even
000355A0                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00035656                            		even
00035656                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
000356F8                            		even
000356F8                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00035854                            		even
00035854                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000358B8                            		even
000358B8                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00035A0A                            		even
00035A0A                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00035EEC                            		even
00035EEC                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0003605C                            		even
0003605C                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00036314                            		even
00036314                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
0003644C                            		even
0003644C                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00036576                            		even
00036576                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00036686                            		even
00036686                            ; ---------------------------------------------------------------------------
00036686                            ; Compressed graphics - MZ stuff
00036686                            ; ---------------------------------------------------------------------------
00036686                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00036914                            		even
00036914                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
000369D2                            		even
000369D2                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00036A8A                            		even
00036A8A                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00036ADE                            		even
00036ADE                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00036DBC                            		even
00036DBC                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
000376D2                            		even
000376D2                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00037836                            		even
00037836                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000378BE                            		even
000378BE                            ; ---------------------------------------------------------------------------
000378BE                            ; Compressed graphics - SLZ stuff
000378BE                            ; ---------------------------------------------------------------------------
000378BE                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00037AFA                            		even
00037AFA                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00037C40                            		even
00037C40                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00037E84                            		even
00037E84                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00037EE6                            		even
00037EE6                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00037FC8                            		even
00037FC8                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
000381AA                            		even
000381AA                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
000382B6                            		even
000382B6                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
0003835A                            		even
0003835A                            ; ---------------------------------------------------------------------------
0003835A                            ; Compressed graphics - SYZ stuff
0003835A                            ; ---------------------------------------------------------------------------
0003835A                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
000384C4                            		even
000384C4                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00038526                            		even
00038526                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00038608                            		even
00038608                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00038896                            		even
00038896                            ; ---------------------------------------------------------------------------
00038896                            ; Compressed graphics - SBZ stuff
00038896                            ; ---------------------------------------------------------------------------
00038896                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
000388EA                            		even
000388EA                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00038B86                            		even
00038B86                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00038D8A                            		even
00038D8A                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00038F28                            		even
00038F28                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00039258                            		even
00039258                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00039436                            		even
00039436                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0003948E                            		even
0003948E                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00039658 00                         		even
00039658                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
00039756                            		even
00039756                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
000398E2                            		even
000398E2                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
00039932                            		even
00039932                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003998A                            		even
0003998A                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
00039A86                            		even
00039A86                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
00039B9C                            		even
00039B9C                            ; ---------------------------------------------------------------------------
00039B9C                            ; Compressed graphics - enemies
00039B9C                            ; ---------------------------------------------------------------------------
00039B9C                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
00039F5C                            		even
00039F5C                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003A106 00                         		even
0003A106                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003A4C8 00                         		even
0003A4C8                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003A6B0                            		even
0003A6B0                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003A868 00                         		even
0003A868                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003AAD0                            		even
0003AAD0                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003AD5A                            		even
0003AD5A                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003B37E                            		even
0003B37E                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003B574                            		even
0003B574                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003BB92                            		even
0003BB92                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003BF7A                            		even
0003BF7A                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003C276                            		even
0003C276                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003C4BE                            		even
0003C4BE                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003C756                            		even
0003C756                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003C934                            		even
0003C934                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003CAC2                            		even
0003CAC2                            ; ---------------------------------------------------------------------------
0003CAC2                            ; Compressed graphics - various
0003CAC2                            ; ---------------------------------------------------------------------------
0003CAC2                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003D0D0                            		even
0003D0D0                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003D1C6                            		even
0003D1C6                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003D2CC                            		even
0003D2CC                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003D3C0                            		even
0003D3C0                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003D904                            		even
0003D904                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003DF6A                            		even
0003DF6A                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003E01A                            		even
0003E01A                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003E1AC                            		even
0003E1AC                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003E2AE                            		even
0003E2AE                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003E38A                            		even
0003E38A                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003E806                            		even
0003E806                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003E8C6                            		even
0003E8C6                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003EA3A                            		even
0003EA3A                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003ED3C                            		even
0003ED3C                            ; ---------------------------------------------------------------------------
0003ED3C                            ; Compressed graphics - continue screen
0003ED3C                            ; ---------------------------------------------------------------------------
0003ED3C                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003EFEC                            		even
0003EFEC                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003F226                            		even
0003F226                            ; ---------------------------------------------------------------------------
0003F226                            ; Compressed graphics - animals
0003F226                            ; ---------------------------------------------------------------------------
0003F226                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003F37E                            		even
0003F37E                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003F4DA                            		even
0003F4DA                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003F656                            		even
0003F656                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003F772                            		even
0003F772                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003F8A8                            		even
0003F8A8                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003F9E2                            		even
0003F9E2                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003FB3E                            		even
0003FB3E                            ; ---------------------------------------------------------------------------
0003FB3E                            ; Compressed graphics - primary patterns and block mappings
0003FB3E                            ; ---------------------------------------------------------------------------
0003FB3E                            Blk16_GHZ:	incbin	map16\ghz.bin
00040452                            		even
00040452                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00041D60                            		even
00041D60                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
000430E0                            		even
000430E0                            Blk256_GHZ:	incbin	map256\ghz.bin
000453DE                            		even
000453DE                            Blk16_LZ:	incbin	map16\lz.bin
00045B18                            		even
00045B18                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00047F1A                            		even
00047F1A                            Blk256_LZ:	incbin	map256\lz.bin
0004A89A                            		even
0004A89A                            Blk16_MZ:	incbin	map16\mz.bin
0004AFF6                            		even
0004AFF6                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004D87E                            		even
0004D87E                            Blk256_MZ:	incbin	map256\mz.bin
0004F002                            		even
0004F002                            Blk16_SLZ:	incbin	map16\slz.bin
0004F6CC                            		even
0004F6CC                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00051620                            		even
00051620                            Blk256_SLZ:	incbin	map256\slz.bin
00051C9A                            		even
00051C9A                            Blk16_SYZ:	incbin	map16\syz.bin
000528C0                            		even
000528C0                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00056E52                            		even
00056E52                            Blk256_SYZ:	incbin	map256\syz.bin
00058EAE                            		even
00058EAE                            Blk16_SBZ:	incbin	map16\sbz.bin
00059DF6                            		even
00059DF6                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005C7BA                            		even
0005C7BA                            Blk256_SBZ:	incbin	map256\sbz.bin
0005F2B0                            		even
0005F2B0                            ; ---------------------------------------------------------------------------
0005F2B0                            ; Compressed graphics - bosses and ending sequence
0005F2B0                            ; ---------------------------------------------------------------------------
0005F2B0                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0005FACA 00                         		even
0005FACA                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0005FDB4                            		even
0005FDB4                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
00060638                            		even
00060638                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0006138E 00                         		even
0006138E                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00061AF6                            		even
00061AF6                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00062076                            		even
00062076                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00062196                            		even
00062196                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00062394                            		even
00062394                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00063572                            		even
00063572                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00063EB6                            		even
00063EB6                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0006428C                            		even
0006428C                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0006481C                            		even
0006481C                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00064AA4                            		even
00064AA4                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
000650A2                            		even
000650A2                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0006532A                            		even
0006532A                            		incbin	misc\padding2.bin
0006542E                            		even
0006542E                            ; ---------------------------------------------------------------------------
0006542E                            ; Collision data
0006542E                            ; ---------------------------------------------------------------------------
0006542E                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0006552E                            		even
0006552E                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
0006652E                            		even
0006652E                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
0006752E                            		even
0006752E                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
000676E6 00                         		even
000676E6                            Col_LZ:		incbin	collide\lz.bin		; LZ index
0006784E                            		even
0006784E                            Col_MZ:		incbin	collide\mz.bin		; MZ index
000679DE                            		even
000679DE                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00067BD2                            		even
00067BD2                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00067DD8                            		even
00067DD8                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00068076                            		even
00068076                            ; ---------------------------------------------------------------------------
00068076                            ; Special layouts
00068076                            ; ---------------------------------------------------------------------------
00068076                            SS_1:		incbin	sslayout\1.bin
000682F0                            		even
000682F0                            SS_2:		incbin	sslayout\2.bin
00068702                            		even
00068702                            SS_3:		incbin	sslayout\3.bin
00068A5E                            		even
00068A5E                            SS_4:		incbin	sslayout\4.bin
00068F38                            		even
00068F38                            SS_5:		incbin	sslayout\5.bin
0006940A                            		even
0006940A                            SS_6:		incbin	sslayout\6.bin
0006971A                            		even
0006971A                            ; ---------------------------------------------------------------------------
0006971A                            ; Animated uncompressed graphics
0006971A                            ; ---------------------------------------------------------------------------
0006971A                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006991A                            		even
0006991A                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00069D1A                            		even
00069D1A                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006A19A                            		even
0006A19A                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006A49A                            		even
0006A49A                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006AA9A                            		even
0006AA9A                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006AD9A                            		even
0006AD9A                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006B81A                            		even
0006B81A                            
0006B81A                            ; ---------------------------------------------------------------------------
0006B81A                            ; Level	layout index
0006B81A                            ; ---------------------------------------------------------------------------
0006B81A 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0006B820 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0006B826 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0006B82C 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0006B832 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0006B838 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0006B83E 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0006B844 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0006B84A 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0006B850 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0006B856 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0006B85C 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0006B862 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006B868 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006B86E 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006B874 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0006B87A 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0006B880 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0006B886 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0006B88C 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0006B892 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0006B898 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0006B89E 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0006B8A4 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0006B8AA 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006B8B0 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006B8B6 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006B8BC 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006B8C2                            
0006B8C2                            Level_GHZ1:	incbin	levels\ghz1.bin
0006B9B4                            		even
0006B9B4 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0006B9B8                            Level_GHZ2:	incbin	levels\ghz2.bin
0006BA80                            		even
0006BA80 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0006BA84                            Level_GHZ3:	incbin	levels\ghz3.bin
0006BBA6                            		even
0006BBA6                            Level_GHZbg:	incbin	levels\ghzbg.bin
0006BBC8                            		even
0006BBC8 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0006BBCC 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0006BBD0                            
0006BBD0                            Level_LZ1:	incbin	levels\lz1.bin
0006BCD2                            		even
0006BCD2                            Level_LZbg:	incbin	levels\lzbg.bin
0006BDD4                            		even
0006BDD4 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0006BDD8                            Level_LZ2:	incbin	levels\lz2.bin
0006BE72                            		even
0006BE72 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0006BE76                            Level_LZ3:	incbin	levels\lz3.bin
0006BF90                            		even
0006BF90 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0006BF94                            Level_SBZ3:	incbin	levels\sbz3.bin
0006C04E                            		even
0006C04E 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0006C052                            
0006C052                            Level_MZ1:	incbin	levels\mz1.bin
0006C0F0                            		even
0006C0F0                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0006C16A                            		even
0006C16A                            Level_MZ2:	incbin	levels\mz2.bin
0006C20E                            		even
0006C20E                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0006C2A0                            		even
0006C2A0 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0006C2A4                            Level_MZ3:	incbin	levels\mz3.bin
0006C386                            		even
0006C386                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006C42A 00                         		even
0006C42A 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006C42E 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0006C432                            
0006C432                            Level_SLZ1:	incbin	levels\slz1.bin
0006C544                            		even
0006C544                            Level_SLZbg:	incbin	levels\slzbg.bin
0006C55E                            		even
0006C55E                            Level_SLZ2:	incbin	levels\slz2.bin
0006C64E                            		even
0006C64E                            Level_SLZ3:	incbin	levels\slz3.bin
0006C768                            		even
0006C768 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006C76C                            
0006C76C                            Level_SYZ1:	incbin	levels\syz1.bin
0006C828 00                         		even
0006C828                            Level_SYZbg:	incbin	levels\syzbg.bin
0006C862                            		even
0006C862 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0006C866                            Level_SYZ2:	incbin	levels\syz2.bin
0006C96A                            		even
0006C96A 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0006C96E                            Level_SYZ3:	incbin	levels\syz3.bin
0006CAC8 00                         		even
0006CAC8 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0006CACC 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0006CAD0                            
0006CAD0                            Level_SBZ1:	incbin	levels\sbz1.bin
0006CBF2                            		even
0006CBF2                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006CC30                            		even
0006CC30                            Level_SBZ2:	incbin	levels\sbz2.bin
0006CD72                            		even
0006CD72                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0006CEDC                            		even
0006CEDC 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006CEE0 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006CEE4                            Level_End:	incbin	levels\ending.bin
0006CF14 00                         		even
0006CF14 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006CF18                            
0006CF18                            ; ---------------------------------------------------------------------------
0006CF18                            ; Animated uncompressed giant ring graphics
0006CF18                            ; ---------------------------------------------------------------------------
0006CF18                            Art_BigRing:	incbin	artunc\bigring.bin
0006DB58                            		even
0006DB58                            
0006DB58                            		incbin	misc\padding3.bin
0006DBF4                            		even
0006DBF4                            
0006DBF4                            ; ---------------------------------------------------------------------------
0006DBF4                            ; Sprite locations index
0006DBF4                            ; ---------------------------------------------------------------------------
0006DBF4 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DBF8 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DBFC 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC00 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC04 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC08 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC0C 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC10 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC14 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC18 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC1C 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC20 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC24 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC28 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC2C 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC30 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC34 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC38 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC3C 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC40 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC44 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC48 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC4C 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC50 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC54 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC58 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC5C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC60 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006DC64 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006DC68 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006DC6C 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006DC70 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006DC74 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006DC78 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006DC7C 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006DC80 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006DC84 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006DC8A                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006E4D0                            		even
0006E4D0                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006E584                            		even
0006E584                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0006EFC8                            		even
0006EFC8                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0006F370                            		even
0006F370                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0006F6A6                            		even
0006F6A6                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0006FBF2                            		even
0006FBF2                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0007008A                            		even
0007008A                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000700BC                            		even
000700BC                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
000700EE                            		even
000700EE                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
00070120                            		even
00070120                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
00070152                            		even
00070152                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0007019C                            		even
0007019C                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
000701DA                            		even
000701DA                            ObjPos_MZ1:	incbin	objpos\mz1.bin
00070546                            		even
00070546                            ObjPos_MZ2:	incbin	objpos\mz2.bin
000709F0                            		even
000709F0                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00070F66                            		even
00070F66                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
00070F90                            		even
00070F90                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
000713F8                            		even
000713F8                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
000719DA                            		even
000719DA                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0007204C                            		even
0007204C                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
000725B6                            		even
000725B6                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00072BBC                            		even
00072BBC                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
000732FA                            		even
000732FA                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
000739D8                            		even
000739D8                            ObjPos_FZ:	incbin	objpos\fz.bin
000739EA                            		even
000739EA                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
00073A1C                            		even
00073A1C                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
00073A4E                            		even
00073A4E                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00073A80                            		even
00073A80                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
00073AB2                            		even
00073AB2                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00073AE4                            		even
00073AE4                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
00073B1C                            		even
00073B1C                            ObjPos_End:	incbin	objpos\ending.bin
00073C78                            		even
00073C78 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00073C7E                            ; ---------------------------------------------------------------------------
00073C7E                            		incbin	misc\padding4.bin
000742A8                            		even
000742A8                            
000742A8 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
000742AC 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
000742B0 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
000742B4 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
000742B8 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
000742BC 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
000742C0                            ; ---------------------------------------------------------------------------
000742C0                            ; PSG instruments used in music
000742C0                            ; ---------------------------------------------------------------------------
000742C0 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
000742CC 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
000742D8 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
000742E4                            PSG1:		incbin	sound\psg1.bin
000742FB                            PSG2:		incbin	sound\psg2.bin
00074302                            PSG3:		incbin	sound\psg3.bin
00074313                            PSG4:		incbin	sound\psg4.bin
0007431E                            PSG6:		incbin	sound\psg6.bin
0007432D                            PSG5:		incbin	sound\psg5.bin
00074357                            PSG7:		incbin	sound\psg7.bin
00074373                            PSG8:		incbin	sound\psg8.bin
0007439B                            PSG9:		incbin	sound\psg9.bin
000743AC                            
000743AC 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
000743B4                            ; ---------------------------------------------------------------------------
000743B4                            ; Music	Pointers
000743B4                            ; ---------------------------------------------------------------------------
000743B4 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
000743BC 0000 0000 0000 0000        		dc.l Music83, Music84
000743C4 0000 0000 0000 0000        		dc.l Music85, Music86
000743CC 0000 0000 0000 0000        		dc.l Music87, Music88
000743D4 0000 0000 0000 0000        		dc.l Music89, Music8A
000743DC 0000 0000 0000 0000        		dc.l Music8B, Music8C
000743E4 0000 0000 0000 0000        		dc.l Music8D, Music8E
000743EC 0000 0000 0000 0000        		dc.l Music8F, Music90
000743F4 0000 0000 0000 0000        		dc.l Music91, Music92
000743FC 0000 0000 0000 0000        		dc.l Music93, Music94
00074404 0000 0000 0000 0000        		dc.l Music95, Music96
0007440C 0000 0000 0000 0000        		dc.l Music97, Music98
00074414 0000 0000 0000 0000        		dc.l Music99, Music9A
0007441C 0000 0000 0000 0000        		dc.l Music9B, Music9C
00074424 0000 0000 0000 0000        		dc.l Music9D, Music9E
0007442C 0000 0000                  		dc.l Music9F
00074430                            ; ---------------------------------------------------------------------------
00074430                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
00074430                            ; ---------------------------------------------------------------------------
00074430 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
00074440 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
00074450 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
00074460 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
00074470 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
00074480 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00074490 9090 9090                  		dc.b $90, $90, $90, $90
00074494                            
00074494                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074494                            
00074494                            
00074494                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
00074494 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0007449C 4E71                       		nop	
0007449E 4E71                       		nop	
000744A0 4E71                       		nop	
000744A2                            
000744A2                            loc_71B5A:
000744A2 0839 0000 00A1 1100        		btst	#0,($A11100).l
000744AA 66F6                       		bne.s	loc_71B5A
000744AC                            
000744AC 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
000744B4 6700                       		beq.s	loc_71B82
000744B6 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000744BE 4E71                       		nop	
000744C0 4E71                       		nop	
000744C2 4E71                       		nop	
000744C4 4E71                       		nop	
000744C6 4E71                       		nop	
000744C8 60CA                       		bra.s	sub_71B4C
000744CA                            ; ===========================================================================
000744CA                            
000744CA                            loc_71B82:
000744CA 4DF9 00FF F000             		lea	($FFF000).l,a6
000744D0 422E 000E                  		clr.b	$E(a6)
000744D4 4A2E 0003                  		tst.b	3(a6)		; is music paused?
000744D8 6600 0000                  		bne.w	loc_71E50	; if yes, branch
000744DC 532E 0001                  		subq.b	#1,1(a6)
000744E0 6600                       		bne.s	loc_71B9E
000744E2 4EBA 0000                  		jsr	sub_7260C(pc)
000744E6                            
000744E6                            loc_71B9E:
000744E6 102E 0004                  		move.b	4(a6),d0
000744EA 6700                       		beq.s	loc_71BA8
000744EC 4EBA 0000                  		jsr	sub_72504(pc)
000744F0                            
000744F0                            loc_71BA8:
000744F0 4A2E 0024                  		tst.b	$24(a6)
000744F4 6700                       		beq.s	loc_71BB2
000744F6 4EBA 0000                  		jsr	sub_7267C(pc)
000744FA                            
000744FA                            loc_71BB2:
000744FA 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
000744FE 6700                       		beq.s	loc_71BBC	; if not, branch
00074500 4EBA 0000                  		jsr	Sound_Play(pc)
00074504                            
00074504                            loc_71BBC:
00074504 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007450A 6700                       		beq.s	loc_71BC8
0007450C 4EBA 0000                  		jsr	Sound_ChkValue(pc)
00074510                            
00074510                            loc_71BC8:
00074510 4BEE 0040                  		lea	$40(a6),a5
00074514 4A15                       		tst.b	(a5)
00074516 6A00                       		bpl.s	loc_71BD4
00074518 4EBA 0000                  		jsr	sub_71C4E(pc)
0007451C                            
0007451C                            loc_71BD4:
0007451C 422E 0008                  		clr.b	8(a6)
00074520 7E05                       		moveq	#5,d7
00074522                            
00074522                            loc_71BDA:
00074522 DAFC 0030                  		adda.w	#$30,a5
00074526 4A15                       		tst.b	(a5)
00074528 6A00                       		bpl.s	loc_71BE6
0007452A 4EBA 0000                  		jsr	sub_71CCA(pc)
0007452E                            
0007452E                            loc_71BE6:
0007452E 51CF FFF2                  		dbf	d7,loc_71BDA
00074532                            
00074532 7E02                       		moveq	#2,d7
00074534                            
00074534                            loc_71BEC:
00074534 DAFC 0030                  		adda.w	#$30,a5
00074538 4A15                       		tst.b	(a5)
0007453A 6A00                       		bpl.s	loc_71BF8
0007453C 4EBA 0000                  		jsr	sub_72850(pc)
00074540                            
00074540                            loc_71BF8:
00074540 51CF FFF2                  		dbf	d7,loc_71BEC
00074544                            
00074544 1D7C 0080 000E             		move.b	#$80,$E(a6)
0007454A 7E02                       		moveq	#2,d7
0007454C                            
0007454C                            loc_71C04:
0007454C DAFC 0030                  		adda.w	#$30,a5
00074550 4A15                       		tst.b	(a5)
00074552 6A00                       		bpl.s	loc_71C10
00074554 4EBA 0000                  		jsr	sub_71CCA(pc)
00074558                            
00074558                            loc_71C10:
00074558 51CF FFF2                  		dbf	d7,loc_71C04
0007455C                            
0007455C 7E02                       		moveq	#2,d7
0007455E                            
0007455E                            loc_71C16:
0007455E DAFC 0030                  		adda.w	#$30,a5
00074562 4A15                       		tst.b	(a5)
00074564 6A00                       		bpl.s	loc_71C22
00074566 4EBA 0000                  		jsr	sub_72850(pc)
0007456A                            
0007456A                            loc_71C22:
0007456A 51CF FFF2                  		dbf	d7,loc_71C16
0007456E 1D7C 0040 000E             		move.b	#$40,$E(a6)
00074574 DAFC 0030                  		adda.w	#$30,a5
00074578 4A15                       		tst.b	(a5)
0007457A 6A00                       		bpl.s	loc_71C38
0007457C 4EBA 0000                  		jsr	sub_71CCA(pc)
00074580                            
00074580                            loc_71C38:
00074580 DAFC 0030                  		adda.w	#$30,a5
00074584 4A15                       		tst.b	(a5)
00074586 6A00                       		bpl.s	loc_71C44
00074588 4EBA 0000                  		jsr	sub_72850(pc)
0007458C                            
0007458C                            loc_71C44:
0007458C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00074594 4E75                       		rts	
00074596                            ; End of function sub_71B4C
00074596                            
00074596                            
00074596                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074596                            
00074596                            
00074596                            sub_71C4E:				; XREF: sub_71B4C
00074596 532D 000E                  		subq.b	#1,$E(a5)
0007459A 6600                       		bne.s	locret_71CAA
0007459C 1D7C 0080 0008             		move.b	#$80,8(a6)
000745A2 286D 0004                  		movea.l	4(a5),a4
000745A6                            
000745A6                            loc_71C5E:
000745A6 7A00                       		moveq	#0,d5
000745A8 1A1C                       		move.b	(a4)+,d5
000745AA 0C05 00E0                  		cmpi.b	#-$20,d5
000745AE 6500                       		bcs.s	loc_71C6E
000745B0 4EBA 0000                  		jsr	sub_72A5A(pc)
000745B4 60F0                       		bra.s	loc_71C5E
000745B6                            ; ===========================================================================
000745B6                            
000745B6                            loc_71C6E:
000745B6 4A05                       		tst.b	d5
000745B8 6A00                       		bpl.s	loc_71C84
000745BA 1B45 0010                  		move.b	d5,$10(a5)
000745BE 1A1C                       		move.b	(a4)+,d5
000745C0 6A00                       		bpl.s	loc_71C84
000745C2 534C                       		subq.w	#1,a4
000745C4 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000745CA 6000                       		bra.s	loc_71C88
000745CC                            ; ===========================================================================
000745CC                            
000745CC                            loc_71C84:
000745CC 4EBA 0000                  		jsr	sub_71D40(pc)
000745D0                            
000745D0                            loc_71C88:
000745D0 2B4C 0004                  		move.l	a4,4(a5)
000745D4 0815 0002                  		btst	#2,(a5)
000745D8 6600                       		bne.s	locret_71CAA
000745DA 7000                       		moveq	#0,d0
000745DC 102D 0010                  		move.b	$10(a5),d0
000745E0 0C00 0080                  		cmpi.b	#$80,d0
000745E4 6700                       		beq.s	locret_71CAA
000745E6 0800 0003                  		btst	#3,d0
000745EA 6600                       		bne.s	loc_71CAC
000745EC 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
000745F2                            
000745F2                            locret_71CAA:
000745F2 4E75                       		rts	
000745F4                            ; ===========================================================================
000745F4                            
000745F4                            loc_71CAC:
000745F4 0400 0088                  		subi.b	#$88,d0
000745F8 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
000745FC 13C0 00A0 00EA             		move.b	d0,($A000EA).l
00074602 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0007460A 4E75                       		rts	
0007460C                            ; End of function sub_71C4E
0007460C                            
0007460C                            ; ===========================================================================
0007460C 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
00074612                            
00074612                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074612                            
00074612                            
00074612                            sub_71CCA:				; XREF: sub_71B4C
00074612 532D 000E                  		subq.b	#1,$E(a5)
00074616 6600                       		bne.s	loc_71CE0
00074618 0895 0004                  		bclr	#4,(a5)
0007461C 4EBA 0000                  		jsr	sub_71CEC(pc)
00074620 4EBA 0000                  		jsr	sub_71E18(pc)
00074624 6000 0000                  		bra.w	loc_726E2
00074628                            ; ===========================================================================
00074628                            
00074628                            loc_71CE0:
00074628 4EBA 0000                  		jsr	sub_71D9E(pc)
0007462C 4EBA 0000                  		jsr	sub_71DC6(pc)
00074630 6000 0000                  		bra.w	loc_71E24
00074634                            ; End of function sub_71CCA
00074634                            
00074634                            
00074634                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074634                            
00074634                            
00074634                            sub_71CEC:				; XREF: sub_71CCA
00074634 286D 0004                  		movea.l	4(a5),a4
00074638 0895 0001                  		bclr	#1,(a5)
0007463C                            
0007463C                            loc_71CF4:
0007463C 7A00                       		moveq	#0,d5
0007463E 1A1C                       		move.b	(a4)+,d5
00074640 0C05 00E0                  		cmpi.b	#-$20,d5
00074644 6500                       		bcs.s	loc_71D04
00074646 4EBA 0000                  		jsr	sub_72A5A(pc)
0007464A 60F0                       		bra.s	loc_71CF4
0007464C                            ; ===========================================================================
0007464C                            
0007464C                            loc_71D04:
0007464C 4EBA 0000                  		jsr	sub_726FE(pc)
00074650 4A05                       		tst.b	d5
00074652 6A00                       		bpl.s	loc_71D1A
00074654 4EBA 0000                  		jsr	sub_71D22(pc)
00074658 1A1C                       		move.b	(a4)+,d5
0007465A 6A00                       		bpl.s	loc_71D1A
0007465C 534C                       		subq.w	#1,a4
0007465E 6000 0000                  		bra.w	sub_71D60
00074662                            ; ===========================================================================
00074662                            
00074662                            loc_71D1A:
00074662 4EBA 0000                  		jsr	sub_71D40(pc)
00074666 6000 0000                  		bra.w	sub_71D60
0007466A                            ; End of function sub_71CEC
0007466A                            
0007466A                            
0007466A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007466A                            
0007466A                            
0007466A                            sub_71D22:				; XREF: sub_71CEC
0007466A 0405 0080                  		subi.b	#$80,d5
0007466E 6700                       		beq.s	loc_71D58
00074670 DA2D 0008                  		add.b	8(a5),d5
00074674 0245 007F                  		andi.w	#$7F,d5
00074678 E34D                       		lsl.w	#1,d5
0007467A 41FA 0000                  		lea	word_72790(pc),a0
0007467E 3C30 5000                  		move.w	(a0,d5.w),d6
00074682 3B46 0010                  		move.w	d6,$10(a5)
00074686 4E75                       		rts	
00074688                            ; End of function sub_71D22
00074688                            
00074688                            
00074688                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074688                            
00074688                            
00074688                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00074688 1005                       		move.b	d5,d0
0007468A 122D 0002                  		move.b	2(a5),d1
0007468E                            
0007468E                            loc_71D46:
0007468E 5301                       		subq.b	#1,d1
00074690 6700                       		beq.s	loc_71D4E
00074692 D005                       		add.b	d5,d0
00074694 60F8                       		bra.s	loc_71D46
00074696                            ; ===========================================================================
00074696                            
00074696                            loc_71D4E:
00074696 1B40 000F                  		move.b	d0,$F(a5)
0007469A 1B40 000E                  		move.b	d0,$E(a5)
0007469E 4E75                       		rts	
000746A0                            ; End of function sub_71D40
000746A0                            
000746A0                            ; ===========================================================================
000746A0                            
000746A0                            loc_71D58:				; XREF: sub_71D22
000746A0 08D5 0001                  		bset	#1,(a5)
000746A4 426D 0010                  		clr.w	$10(a5)
000746A8                            
000746A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000746A8                            
000746A8                            
000746A8                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
000746A8 2B4C 0004                  		move.l	a4,4(a5)
000746AC 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000746B2 0815 0004                  		btst	#4,(a5)
000746B6 6600                       		bne.s	locret_71D9C
000746B8 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
000746BE 422D 000C                  		clr.b	$C(a5)
000746C2 0815 0003                  		btst	#3,(a5)
000746C6 6700                       		beq.s	locret_71D9C
000746C8 206D 0014                  		movea.l	$14(a5),a0
000746CC 1B58 0018                  		move.b	(a0)+,$18(a5)
000746D0 1B58 0019                  		move.b	(a0)+,$19(a5)
000746D4 1B58 001A                  		move.b	(a0)+,$1A(a5)
000746D8 1018                       		move.b	(a0)+,d0
000746DA E208                       		lsr.b	#1,d0
000746DC 1B40 001B                  		move.b	d0,$1B(a5)
000746E0 426D 001C                  		clr.w	$1C(a5)
000746E4                            
000746E4                            locret_71D9C:
000746E4 4E75                       		rts	
000746E6                            ; End of function sub_71D60
000746E6                            
000746E6                            
000746E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000746E6                            
000746E6                            
000746E6                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
000746E6 4A2D 0012                  		tst.b	$12(a5)
000746EA 6700                       		beq.s	locret_71DC4
000746EC 532D 0012                  		subq.b	#1,$12(a5)
000746F0 6600                       		bne.s	locret_71DC4
000746F2 08D5 0001                  		bset	#1,(a5)
000746F6 4A2D 0001                  		tst.b	1(a5)
000746FA 6B00 0000                  		bmi.w	loc_71DBE
000746FE 4EBA 0000                  		jsr	sub_726FE(pc)
00074702 584F                       		addq.w	#4,sp
00074704 4E75                       		rts	
00074706                            ; ===========================================================================
00074706                            
00074706                            loc_71DBE:
00074706 4EBA 0000                  		jsr	sub_729A0(pc)
0007470A 584F                       		addq.w	#4,sp
0007470C                            
0007470C                            locret_71DC4:
0007470C 4E75                       		rts	
0007470E                            ; End of function sub_71D9E
0007470E                            
0007470E                            
0007470E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007470E                            
0007470E                            
0007470E                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0007470E 584F                       		addq.w	#4,sp
00074710 0815 0003                  		btst	#3,(a5)
00074714 6700                       		beq.s	locret_71E16
00074716 4A2D 0018                  		tst.b	$18(a5)
0007471A 6700                       		beq.s	loc_71DDA
0007471C 532D 0018                  		subq.b	#1,$18(a5)
00074720 4E75                       		rts	
00074722                            ; ===========================================================================
00074722                            
00074722                            loc_71DDA:
00074722 532D 0019                  		subq.b	#1,$19(a5)
00074726 6700                       		beq.s	loc_71DE2
00074728 4E75                       		rts	
0007472A                            ; ===========================================================================
0007472A                            
0007472A                            loc_71DE2:
0007472A 206D 0014                  		movea.l	$14(a5),a0
0007472E 1B68 0001 0019             		move.b	1(a0),$19(a5)
00074734 4A2D 001B                  		tst.b	$1B(a5)
00074738 6600                       		bne.s	loc_71DFE
0007473A 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00074740 442D 001A                  		neg.b	$1A(a5)
00074744 4E75                       		rts	
00074746                            ; ===========================================================================
00074746                            
00074746                            loc_71DFE:
00074746 532D 001B                  		subq.b	#1,$1B(a5)
0007474A 1C2D 001A                  		move.b	$1A(a5),d6
0007474E 4886                       		ext.w	d6
00074750 DC6D 001C                  		add.w	$1C(a5),d6
00074754 3B46 001C                  		move.w	d6,$1C(a5)
00074758 DC6D 0010                  		add.w	$10(a5),d6
0007475C 594F                       		subq.w	#4,sp
0007475E                            
0007475E                            locret_71E16:
0007475E 4E75                       		rts	
00074760                            ; End of function sub_71DC6
00074760                            
00074760                            
00074760                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074760                            
00074760                            
00074760                            sub_71E18:				; XREF: sub_71CCA
00074760 0815 0001                  		btst	#1,(a5)
00074764 6600                       		bne.s	locret_71E48
00074766 3C2D 0010                  		move.w	$10(a5),d6
0007476A 6700                       		beq.s	loc_71E4A
0007476C                            
0007476C                            loc_71E24:				; XREF: sub_71CCA
0007476C 102D 001E                  		move.b	$1E(a5),d0
00074770 4880                       		ext.w	d0
00074772 DC40                       		add.w	d0,d6
00074774 0815 0002                  		btst	#2,(a5)
00074778 6600                       		bne.s	locret_71E48
0007477A 3206                       		move.w	d6,d1
0007477C E049                       		lsr.w	#8,d1
0007477E 103C 00A4                  		move.b	#-$5C,d0
00074782 4EBA 0000                  		jsr	sub_72722(pc)
00074786 1206                       		move.b	d6,d1
00074788 103C 00A0                  		move.b	#-$60,d0
0007478C 4EBA 0000                  		jsr	sub_72722(pc)
00074790                            
00074790                            locret_71E48:
00074790 4E75                       		rts	
00074792                            ; ===========================================================================
00074792                            
00074792                            loc_71E4A:
00074792 08D5 0001                  		bset	#1,(a5)
00074796 4E75                       		rts	
00074798                            ; End of function sub_71E18
00074798                            
00074798                            ; ===========================================================================
00074798                            
00074798                            loc_71E50:				; XREF: sub_71B4C
00074798 6B00                       		bmi.s	loc_71E94
0007479A 0C2E 0002 0003             		cmpi.b	#2,3(a6)
000747A0 6700 0000                  		beq.w	loc_71EFE
000747A4 1D7C 0002 0003             		move.b	#2,3(a6)
000747AA 7602                       		moveq	#2,d3
000747AC 103C 00B4                  		move.b	#-$4C,d0
000747B0 7200                       		moveq	#0,d1
000747B2                            
000747B2                            loc_71E6A:
000747B2 4EBA 0000                  		jsr	sub_7272E(pc)
000747B6 4EBA 0000                  		jsr	sub_72764(pc)
000747BA 5200                       		addq.b	#1,d0
000747BC 51CB FFF4                  		dbf	d3,loc_71E6A
000747C0                            
000747C0 7602                       		moveq	#2,d3
000747C2 7028                       		moveq	#$28,d0
000747C4                            
000747C4                            loc_71E7C:
000747C4 1203                       		move.b	d3,d1
000747C6 4EBA 0000                  		jsr	sub_7272E(pc)
000747CA 5801                       		addq.b	#4,d1
000747CC 4EBA 0000                  		jsr	sub_7272E(pc)
000747D0 51CB FFF2                  		dbf	d3,loc_71E7C
000747D4                            
000747D4 4EBA 0000                  		jsr	sub_729B6(pc)
000747D8 6000 FDB2                  		bra.w	loc_71C44
000747DC                            ; ===========================================================================
000747DC                            
000747DC                            loc_71E94:				; XREF: loc_71E50
000747DC 422E 0003                  		clr.b	3(a6)
000747E0 7630                       		moveq	#$30,d3
000747E2 4BEE 0040                  		lea	$40(a6),a5
000747E6 7806                       		moveq	#6,d4
000747E8                            
000747E8                            loc_71EA0:
000747E8 0815 0007                  		btst	#7,(a5)
000747EC 6700                       		beq.s	loc_71EB8
000747EE 0815 0002                  		btst	#2,(a5)
000747F2 6600                       		bne.s	loc_71EB8
000747F4 103C 00B4                  		move.b	#-$4C,d0
000747F8 122D 000A                  		move.b	$A(a5),d1
000747FC 4EBA 0000                  		jsr	sub_72722(pc)
00074800                            
00074800                            loc_71EB8:
00074800 DAC3                       		adda.w	d3,a5
00074802 51CC FFE4                  		dbf	d4,loc_71EA0
00074806                            
00074806 4BEE 0220                  		lea	$220(a6),a5
0007480A 7802                       		moveq	#2,d4
0007480C                            
0007480C                            loc_71EC4:
0007480C 0815 0007                  		btst	#7,(a5)
00074810 6700                       		beq.s	loc_71EDC
00074812 0815 0002                  		btst	#2,(a5)
00074816 6600                       		bne.s	loc_71EDC
00074818 103C 00B4                  		move.b	#-$4C,d0
0007481C 122D 000A                  		move.b	$A(a5),d1
00074820 4EBA 0000                  		jsr	sub_72722(pc)
00074824                            
00074824                            loc_71EDC:
00074824 DAC3                       		adda.w	d3,a5
00074826 51CC FFE4                  		dbf	d4,loc_71EC4
0007482A                            
0007482A 4BEE 0340                  		lea	$340(a6),a5
0007482E 0815 0007                  		btst	#7,(a5)
00074832 6700                       		beq.s	loc_71EFE
00074834 0815 0002                  		btst	#2,(a5)
00074838 6600                       		bne.s	loc_71EFE
0007483A 103C 00B4                  		move.b	#-$4C,d0
0007483E 122D 000A                  		move.b	$A(a5),d1
00074842 4EBA 0000                  		jsr	sub_72722(pc)
00074846                            
00074846                            loc_71EFE:
00074846 6000 FD44                  		bra.w	loc_71C44
0007484A                            
0007484A                            ; ---------------------------------------------------------------------------
0007484A                            ; Subroutine to	play a sound or	music track
0007484A                            ; ---------------------------------------------------------------------------
0007484A                            
0007484A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007484A                            
0007484A                            
0007484A                            Sound_Play:				; XREF: sub_71B4C
0007484A 2079 0007 42A8             		movea.l	(Go_SoundTypes).l,a0
00074850 43EE 000A                  		lea	$A(a6),a1	; load music track number
00074854 1616                       		move.b	0(a6),d3
00074856 7802                       		moveq	#2,d4
00074858                            
00074858                            loc_71F12:
00074858 1011                       		move.b	(a1),d0		; move track number to d0
0007485A 1200                       		move.b	d0,d1
0007485C 4219                       		clr.b	(a1)+
0007485E 0400 0081                  		subi.b	#$81,d0
00074862 6500                       		bcs.s	loc_71F3E
00074864 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007486A 6700                       		beq.s	loc_71F2C
0007486C 1D41 000A                  		move.b	d1,$A(a6)
00074870 6000                       		bra.s	loc_71F3E
00074872                            ; ===========================================================================
00074872                            
00074872                            loc_71F2C:
00074872 0240 007F                  		andi.w	#$7F,d0
00074876 1430 0000                  		move.b	(a0,d0.w),d2
0007487A B403                       		cmp.b	d3,d2
0007487C 6500                       		bcs.s	loc_71F3E
0007487E 1602                       		move.b	d2,d3
00074880 1D41 0009                  		move.b	d1,9(a6)	; set music flag
00074884                            
00074884                            loc_71F3E:
00074884 51CC FFD2                  		dbf	d4,loc_71F12
00074888                            
00074888 4A03                       		tst.b	d3
0007488A 6B00                       		bmi.s	locret_71F4A
0007488C 1C83                       		move.b	d3,0(a6)
0007488E                            
0007488E                            locret_71F4A:
0007488E 4E75                       		rts	
00074890                            ; End of function Sound_Play
00074890                            
00074890                            
00074890                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074890                            
00074890                            
00074890                            Sound_ChkValue:				; XREF: sub_71B4C
00074890 7E00                       		moveq	#0,d7
00074892 1E2E 0009                  		move.b	9(a6),d7
00074896 6700 0000                  		beq.w	Sound_E4
0007489A 6A00                       		bpl.s	locret_71F8C
0007489C 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
000748A2 0C07 009F                  		cmpi.b	#$9F,d7
000748A6 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
000748AA 0C07 00A0                  		cmpi.b	#$A0,d7
000748AE 6500 0000                  		bcs.w	locret_71F8C
000748B2 0C07 00CF                  		cmpi.b	#$CF,d7
000748B6 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
000748BA 0C07 00D0                  		cmpi.b	#$D0,d7
000748BE 6500 0000                  		bcs.w	locret_71F8C
000748C2 0C07 00E0                  		cmpi.b	#$E0,d7
000748C6 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
000748CA 0C07 00E5                  		cmpi.b	#$E5,d7
000748CE 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
000748D0                            
000748D0                            locret_71F8C:
000748D0 4E75                       		rts	
000748D2                            ; ===========================================================================
000748D2                            
000748D2                            Sound_E0toE5				; XREF: Sound_ChkValue
000748D2 0407 00E0                  		subi.b	#$E0,d7
000748D6 E54F                       		lsl.w	#2,d7
000748D8 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000748DC                            ; ===========================================================================
000748DC                            
000748DC                            Sound_ExIndex:
000748DC 6000 0000                  		bra.w	Sound_E0
000748E0                            ; ===========================================================================
000748E0 6000 0000                  		bra.w	Sound_E1
000748E4                            ; ===========================================================================
000748E4 6000 0000                  		bra.w	Sound_E2
000748E8                            ; ===========================================================================
000748E8 6000 0000                  		bra.w	Sound_E3
000748EC                            ; ===========================================================================
000748EC 6000 0000                  		bra.w	Sound_E4
000748F0                            ; ===========================================================================
000748F0 6000 0000                  		bra.w	Sound_E5
000748F4                            ; ===========================================================================
000748F4                            ; ---------------------------------------------------------------------------
000748F4                            ; Play "Say-gaa" PCM sound
000748F4                            ; ---------------------------------------------------------------------------
000748F4                            
000748F4                            Sound_E1:				  
000748F4 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
000748FA 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
00074900 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00074908                            PlayPCM_Loop:	  
00074908 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007490E 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
00074912 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
00074916 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00074918 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0007491A 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0007491E 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
00074924 4EB8 1414                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
00074928 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0007492E 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
00074930 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
00074932                            return_PlayPCM: 
00074932 584F                       		addq.w	#4,sp 
00074934 4E75                       		rts
00074936                            		
00074936                            ; ---------------------------------------------------------------------------
00074936                            ; Play you are an idiot pcm sound
00074936                            ; ---------------------------------------------------------------------------
00074936                            
00074936                            Sound_E5:  
00074936 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007493C 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
00074942 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007494A                            PlayPCM_LoopE5:	  
0007494A                            
0007494A 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00074950                            		
00074950 5278 FE24                  		addq.w	#1,($FFFFFE24).w
00074954                            		
00074954 1038 FE24                  		move.b	($FFFFFE24).w,d0
00074958 0200 000F                  		andi.b	#$F,d0
0007495C 6700                       		beq.s	SfxE5SwapPalette
0007495E                            		
0007495E 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
00074962 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
00074966 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00074968 67CC                       		beq.s	Sound_E5			; If d3 = 0, we finished playing the PCM sample, DONT STOP
0007496A 60DE                       		bra.s	PlayPCM_LoopE5
0007496C                            		
0007496C                            SfxE5SwapPalette:
0007496C                            		
0007496C                            		
0007496C                            		
0007496C 4BF9 00C0 0004             		lea	($C00004).l,a5
00074972 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
00074978                            		
00074978                            		
00074978 0838 0004 FE24             		btst	#4,($FFFFFE24).w
0007497E 6700                       		beq.s	@not_black
00074980 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
00074986 6000                       		bra.s	@merge
00074988                            	@not_black:
00074988 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
0007498E                            	@merge:
0007498E 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
00074992 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
00074996 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
0007499C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000749A0                            		
000749A0 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
000749A4 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
000749A8 60A0                       		bra.s	PlayPCM_LoopE5
000749AA                            		
000749AA                            ; ===========================================================================
000749AA                            ; ---------------------------------------------------------------------------
000749AA                            ; Play music track $81-$9F
000749AA                            ; ---------------------------------------------------------------------------
000749AA                            
000749AA                            Sound_81to9F:				; XREF: Sound_ChkValue
000749AA 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
000749AE 6600                       		bne.s	loc_72024	; if not, branch
000749B0 4A2E 0027                  		tst.b	$27(a6)
000749B4 6600 0000                  		bne.w	loc_721B6
000749B8 4BEE 0040                  		lea	$40(a6),a5
000749BC 7009                       		moveq	#9,d0
000749BE                            
000749BE                            loc_71FE6:
000749BE 0895 0002                  		bclr	#2,(a5)
000749C2 DAFC 0030                  		adda.w	#$30,a5
000749C6 51C8 FFF6                  		dbf	d0,loc_71FE6
000749CA                            
000749CA 4BEE 0220                  		lea	$220(a6),a5
000749CE 7005                       		moveq	#5,d0
000749D0                            
000749D0                            loc_71FF8:
000749D0 0895 0007                  		bclr	#7,(a5)
000749D4 DAFC 0030                  		adda.w	#$30,a5
000749D8 51C8 FFF6                  		dbf	d0,loc_71FF8
000749DC 4216                       		clr.b	0(a6)
000749DE 204E                       		movea.l	a6,a0
000749E0 43EE 03A0                  		lea	$3A0(a6),a1
000749E4 303C 0087                  		move.w	#$87,d0
000749E8                            
000749E8                            loc_72012:
000749E8 22D8                       		move.l	(a0)+,(a1)+
000749EA 51C8 FFFC                  		dbf	d0,loc_72012
000749EE                            
000749EE 1D7C 0080 0027             		move.b	#$80,$27(a6)
000749F4 4216                       		clr.b	0(a6)
000749F6 6000                       		bra.s	loc_7202C
000749F8                            ; ===========================================================================
000749F8                            
000749F8                            loc_72024:
000749F8 422E 0027                  		clr.b	$27(a6)
000749FC 422E 0026                  		clr.b	$26(a6)
00074A00                            
00074A00                            loc_7202C:
00074A00 4EBA 0000                  		jsr	sub_725CA(pc)
00074A04 2879 0007 42B8             		movea.l	(off_719A0).l,a4
00074A0A 0407 0081                  		subi.b	#$81,d7
00074A0E 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00074A14 2879 0007 42B0             		movea.l	(Go_MusicIndex).l,a4
00074A1A E54F                       		lsl.w	#2,d7
00074A1C 2874 7000                  		movea.l	(a4,d7.w),a4
00074A20 7000                       		moveq	#0,d0
00074A22 3014                       		move.w	(a4),d0
00074A24 D08C                       		add.l	a4,d0
00074A26 2D40 0018                  		move.l	d0,$18(a6)
00074A2A 102C 0005                  		move.b	5(a4),d0
00074A2E 1D40 0028                  		move.b	d0,$28(a6)
00074A32 4A2E 002A                  		tst.b	$2A(a6)
00074A36 6700                       		beq.s	loc_72068
00074A38 102E 0029                  		move.b	$29(a6),d0
00074A3C                            
00074A3C                            loc_72068:
00074A3C 1D40 0002                  		move.b	d0,2(a6)
00074A40 1D40 0001                  		move.b	d0,1(a6)
00074A44 7200                       		moveq	#0,d1
00074A46 264C                       		movea.l	a4,a3
00074A48 5C4C                       		addq.w	#6,a4
00074A4A 7E00                       		moveq	#0,d7
00074A4C 1E2B 0002                  		move.b	2(a3),d7
00074A50 6700 0000                  		beq.w	loc_72114
00074A54 5307                       		subq.b	#1,d7
00074A56 123C 00C0                  		move.b	#-$40,d1
00074A5A 182B 0004                  		move.b	4(a3),d4
00074A5E 7C30                       		moveq	#$30,d6
00074A60 1A3C 0001                  		move.b	#1,d5
00074A64 43EE 0040                  		lea	$40(a6),a1
00074A68 45FA 0000                  		lea	byte_721BA(pc),a2
00074A6C                            
00074A6C                            loc_72098:
00074A6C 08D1 0007                  		bset	#7,(a1)
00074A70 135A 0001                  		move.b	(a2)+,1(a1)
00074A74 1344 0002                  		move.b	d4,2(a1)
00074A78 1346 000D                  		move.b	d6,$D(a1)
00074A7C 1341 000A                  		move.b	d1,$A(a1)
00074A80 1345 000E                  		move.b	d5,$E(a1)
00074A84 7000                       		moveq	#0,d0
00074A86 301C                       		move.w	(a4)+,d0
00074A88 D08B                       		add.l	a3,d0
00074A8A 2340 0004                  		move.l	d0,4(a1)
00074A8E 335C 0008                  		move.w	(a4)+,8(a1)
00074A92 D2C6                       		adda.w	d6,a1
00074A94 51CF FFD6                  		dbf	d7,loc_72098
00074A98 0C2B 0007 0002             		cmpi.b	#7,2(a3)
00074A9E 6600                       		bne.s	loc_720D8
00074AA0 702B                       		moveq	#$2B,d0
00074AA2 7200                       		moveq	#0,d1
00074AA4 4EBA 0000                  		jsr	sub_7272E(pc)
00074AA8 6000 0000                  		bra.w	loc_72114
00074AAC                            ; ===========================================================================
00074AAC                            
00074AAC                            loc_720D8:
00074AAC 7028                       		moveq	#$28,d0
00074AAE 7206                       		moveq	#6,d1
00074AB0 4EBA 0000                  		jsr	sub_7272E(pc)
00074AB4 103C 0042                  		move.b	#$42,d0
00074AB8 727F                       		moveq	#$7F,d1
00074ABA 4EBA 0000                  		jsr	sub_72764(pc)
00074ABE 103C 004A                  		move.b	#$4A,d0
00074AC2 727F                       		moveq	#$7F,d1
00074AC4 4EBA 0000                  		jsr	sub_72764(pc)
00074AC8 103C 0046                  		move.b	#$46,d0
00074ACC 727F                       		moveq	#$7F,d1
00074ACE 4EBA 0000                  		jsr	sub_72764(pc)
00074AD2 103C 004E                  		move.b	#$4E,d0
00074AD6 727F                       		moveq	#$7F,d1
00074AD8 4EBA 0000                  		jsr	sub_72764(pc)
00074ADC 103C 00B6                  		move.b	#-$4A,d0
00074AE0 123C 00C0                  		move.b	#-$40,d1
00074AE4 4EBA 0000                  		jsr	sub_72764(pc)
00074AE8                            
00074AE8                            loc_72114:
00074AE8 7E00                       		moveq	#0,d7
00074AEA 1E2B 0003                  		move.b	3(a3),d7
00074AEE 6700                       		beq.s	loc_72154
00074AF0 5307                       		subq.b	#1,d7
00074AF2 43EE 0190                  		lea	$190(a6),a1
00074AF6 45FA 0000                  		lea	byte_721C2(pc),a2
00074AFA                            
00074AFA                            loc_72126:
00074AFA 08D1 0007                  		bset	#7,(a1)
00074AFE 135A 0001                  		move.b	(a2)+,1(a1)
00074B02 1344 0002                  		move.b	d4,2(a1)
00074B06 1346 000D                  		move.b	d6,$D(a1)
00074B0A 1345 000E                  		move.b	d5,$E(a1)
00074B0E 7000                       		moveq	#0,d0
00074B10 301C                       		move.w	(a4)+,d0
00074B12 D08B                       		add.l	a3,d0
00074B14 2340 0004                  		move.l	d0,4(a1)
00074B18 335C 0008                  		move.w	(a4)+,8(a1)
00074B1C 101C                       		move.b	(a4)+,d0
00074B1E 135C 000B                  		move.b	(a4)+,$B(a1)
00074B22 D2C6                       		adda.w	d6,a1
00074B24 51CF FFD4                  		dbf	d7,loc_72126
00074B28                            
00074B28                            loc_72154:
00074B28 43EE 0220                  		lea	$220(a6),a1
00074B2C 7E05                       		moveq	#5,d7
00074B2E                            
00074B2E                            loc_7215A:
00074B2E 4A11                       		tst.b	(a1)
00074B30 6A00 0000                  		bpl.w	loc_7217C
00074B34 7000                       		moveq	#0,d0
00074B36 1029 0001                  		move.b	1(a1),d0
00074B3A 6B00                       		bmi.s	loc_7216E
00074B3C 5500                       		subq.b	#2,d0
00074B3E E508                       		lsl.b	#2,d0
00074B40 6000                       		bra.s	loc_72170
00074B42                            ; ===========================================================================
00074B42                            
00074B42                            loc_7216E:
00074B42 E608                       		lsr.b	#3,d0
00074B44                            
00074B44                            loc_72170:
00074B44 41FA 0000                  		lea	dword_722CC(pc),a0
00074B48 2070 0000                  		movea.l	(a0,d0.w),a0
00074B4C 08D0 0002                  		bset	#2,(a0)
00074B50                            
00074B50                            loc_7217C:
00074B50 D2C6                       		adda.w	d6,a1
00074B52 51CF FFDA                  		dbf	d7,loc_7215A
00074B56                            
00074B56 4A6E 0340                  		tst.w	$340(a6)
00074B5A 6A00                       		bpl.s	loc_7218E
00074B5C 08EE 0002 0100             		bset	#2,$100(a6)
00074B62                            
00074B62                            loc_7218E:
00074B62 4A6E 0370                  		tst.w	$370(a6)
00074B66 6A00                       		bpl.s	loc_7219A
00074B68 08EE 0002 01F0             		bset	#2,$1F0(a6)
00074B6E                            
00074B6E                            loc_7219A:
00074B6E 4BEE 0070                  		lea	$70(a6),a5
00074B72 7805                       		moveq	#5,d4
00074B74                            
00074B74                            loc_721A0:
00074B74 4EBA 0000                  		jsr	sub_726FE(pc)
00074B78 DAC6                       		adda.w	d6,a5
00074B7A 51CC FFF8                  		dbf	d4,loc_721A0
00074B7E 7802                       		moveq	#2,d4
00074B80                            
00074B80                            loc_721AC:
00074B80 4EBA 0000                  		jsr	sub_729A0(pc)
00074B84 DAC6                       		adda.w	d6,a5
00074B86 51CC FFF8                  		dbf	d4,loc_721AC
00074B8A                            
00074B8A                            loc_721B6:
00074B8A 584F                       		addq.w	#4,sp
00074B8C 4E75                       		rts	
00074B8E                            ; ===========================================================================
00074B8E 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
00074B96                            		even
00074B96 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00074B9A                            		even
00074B9A                            ; ===========================================================================
00074B9A                            ; ---------------------------------------------------------------------------
00074B9A                            ; Play normal sound effect
00074B9A                            ; ---------------------------------------------------------------------------
00074B9A                            
00074B9A                            Sound_A0toCF:				; XREF: Sound_ChkValue
00074B9A 4A2E 0027                  		tst.b	$27(a6)
00074B9E 6600 0000                  		bne.w	loc_722C6
00074BA2 4A2E 0004                  		tst.b	4(a6)
00074BA6 6600 0000                  		bne.w	loc_722C6
00074BAA 4A2E 0024                  		tst.b	$24(a6)
00074BAE 6600 0000                  		bne.w	loc_722C6
00074BB2 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
00074BB6 6600                       		bne.s	Sound_notB5	; if not, branch
00074BB8 4A2E 002B                  		tst.b	$2B(a6)
00074BBC 6600                       		bne.s	loc_721EE
00074BBE 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
00074BC2                            
00074BC2                            loc_721EE:
00074BC2 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
00074BC8                            
00074BC8                            Sound_notB5:
00074BC8 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
00074BCC 6600                       		bne.s	Sound_notA7	; if not, branch
00074BCE 4A2E 002C                  		tst.b	$2C(a6)
00074BD2 6600 0000                  		bne.w	locret_722C4
00074BD6 1D7C 0080 002C             		move.b	#$80,$2C(a6)
00074BDC                            
00074BDC                            Sound_notA7:
00074BDC 2079 0007 42B4             		movea.l	(Go_SoundIndex).l,a0
00074BE2 0407 00A0                  		subi.b	#$A0,d7
00074BE6 E54F                       		lsl.w	#2,d7
00074BE8 2670 7000                  		movea.l	(a0,d7.w),a3
00074BEC 224B                       		movea.l	a3,a1
00074BEE 7200                       		moveq	#0,d1
00074BF0 3219                       		move.w	(a1)+,d1
00074BF2 D28B                       		add.l	a3,d1
00074BF4 1A19                       		move.b	(a1)+,d5
00074BF6 1E19                       		move.b	(a1)+,d7
00074BF8 5307                       		subq.b	#1,d7
00074BFA 7C30                       		moveq	#$30,d6
00074BFC                            
00074BFC                            loc_72228:
00074BFC 7600                       		moveq	#0,d3
00074BFE 1629 0001                  		move.b	1(a1),d3
00074C02 1803                       		move.b	d3,d4
00074C04 6B00                       		bmi.s	loc_72244
00074C06 5543                       		subq.w	#2,d3
00074C08 E54B                       		lsl.w	#2,d3
00074C0A 4BFA 0000                  		lea	dword_722CC(pc),a5
00074C0E 2A75 3000                  		movea.l	(a5,d3.w),a5
00074C12 08D5 0002                  		bset	#2,(a5)
00074C16 6000                       		bra.s	loc_7226E
00074C18                            ; ===========================================================================
00074C18                            
00074C18                            loc_72244:
00074C18 E64B                       		lsr.w	#3,d3
00074C1A 4BFA 0000                  		lea	dword_722CC(pc),a5
00074C1E 2A75 3000                  		movea.l	(a5,d3.w),a5
00074C22 08D5 0002                  		bset	#2,(a5)
00074C26 0C04 00C0                  		cmpi.b	#$C0,d4
00074C2A 6600                       		bne.s	loc_7226E
00074C2C 1004                       		move.b	d4,d0
00074C2E 0000 001F                  		ori.b	#$1F,d0
00074C32 13C0 00C0 0011             		move.b	d0,($C00011).l
00074C38 0840 0005                  		bchg	#5,d0
00074C3C 13C0 00C0 0011             		move.b	d0,($C00011).l
00074C42                            
00074C42                            loc_7226E:
00074C42 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
00074C46 244D                       		movea.l	a5,a2
00074C48 700B                       		moveq	#$B,d0
00074C4A                            
00074C4A                            loc_72276:
00074C4A 429A                       		clr.l	(a2)+
00074C4C 51C8 FFFC                  		dbf	d0,loc_72276
00074C50                            
00074C50 3A99                       		move.w	(a1)+,(a5)
00074C52 1B45 0002                  		move.b	d5,2(a5)
00074C56 7000                       		moveq	#0,d0
00074C58 3019                       		move.w	(a1)+,d0
00074C5A D08B                       		add.l	a3,d0
00074C5C 2B40 0004                  		move.l	d0,4(a5)
00074C60 3B59 0008                  		move.w	(a1)+,8(a5)
00074C64 1B7C 0001 000E             		move.b	#1,$E(a5)
00074C6A 1B46 000D                  		move.b	d6,$D(a5)
00074C6E 4A04                       		tst.b	d4
00074C70 6B00                       		bmi.s	loc_722A8
00074C72 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00074C78 2B41 0020                  		move.l	d1,$20(a5)
00074C7C                            
00074C7C                            loc_722A8:
00074C7C 51CF FF7E                  		dbf	d7,loc_72228
00074C80                            
00074C80 4A2E 0250                  		tst.b	$250(a6)
00074C84 6A00                       		bpl.s	loc_722B8
00074C86 08EE 0002 0340             		bset	#2,$340(a6)
00074C8C                            
00074C8C                            loc_722B8:
00074C8C 4A2E 0310                  		tst.b	$310(a6)
00074C90 6A00                       		bpl.s	locret_722C4
00074C92 08EE 0002 0370             		bset	#2,$370(a6)
00074C98                            
00074C98                            locret_722C4:
00074C98 4E75                       		rts	
00074C9A                            ; ===========================================================================
00074C9A                            
00074C9A                            loc_722C6:
00074C9A 4216                       		clr.b	0(a6)
00074C9C 4E75                       		rts	
00074C9E                            ; ===========================================================================
00074C9E 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
00074CA2 0000 0000                  		dc.l 0
00074CA6 00FF F100                  		dc.l $FFF100
00074CAA 00FF F130                  		dc.l $FFF130
00074CAE 00FF F190                  		dc.l $FFF190
00074CB2 00FF F1C0                  		dc.l $FFF1C0
00074CB6 00FF F1F0                  		dc.l $FFF1F0
00074CBA 00FF F1F0                  		dc.l $FFF1F0
00074CBE 00FF F220                  dword_722EC:	dc.l $FFF220
00074CC2 0000 0000                  		dc.l 0
00074CC6 00FF F250                  		dc.l $FFF250
00074CCA 00FF F280                  		dc.l $FFF280
00074CCE 00FF F2B0                  		dc.l $FFF2B0
00074CD2 00FF F2E0                  		dc.l $FFF2E0
00074CD6 00FF F310                  		dc.l $FFF310
00074CDA 00FF F310                  		dc.l $FFF310
00074CDE                            ; ===========================================================================
00074CDE                            ; ---------------------------------------------------------------------------
00074CDE                            ; Play GHZ waterfall sound
00074CDE                            ; ---------------------------------------------------------------------------
00074CDE                            
00074CDE                            Sound_D0toDF:				; XREF: Sound_ChkValue
00074CDE 4A2E 0027                  		tst.b	$27(a6)
00074CE2 6600 0000                  		bne.w	locret_723C6
00074CE6 4A2E 0004                  		tst.b	4(a6)
00074CEA 6600 0000                  		bne.w	locret_723C6
00074CEE 4A2E 0024                  		tst.b	$24(a6)
00074CF2 6600 0000                  		bne.w	locret_723C6
00074CF6 2079 0007 42AC             		movea.l	(Go_SoundD0).l,a0
00074CFC 0407 00D0                  		subi.b	#$D0,d7
00074D00 E54F                       		lsl.w	#2,d7
00074D02 2670 7000                  		movea.l	(a0,d7.w),a3
00074D06 224B                       		movea.l	a3,a1
00074D08 7000                       		moveq	#0,d0
00074D0A 3019                       		move.w	(a1)+,d0
00074D0C D08B                       		add.l	a3,d0
00074D0E 2D40 0020                  		move.l	d0,$20(a6)
00074D12 1A19                       		move.b	(a1)+,d5
00074D14 1E19                       		move.b	(a1)+,d7
00074D16 5307                       		subq.b	#1,d7
00074D18 7C30                       		moveq	#$30,d6
00074D1A                            
00074D1A                            loc_72348:
00074D1A 1829 0001                  		move.b	1(a1),d4
00074D1E 6B00                       		bmi.s	loc_7235A
00074D20 08EE 0002 0100             		bset	#2,$100(a6)
00074D26 4BEE 0340                  		lea	$340(a6),a5
00074D2A 6000                       		bra.s	loc_72364
00074D2C                            ; ===========================================================================
00074D2C                            
00074D2C                            loc_7235A:
00074D2C 08EE 0002 01F0             		bset	#2,$1F0(a6)
00074D32 4BEE 0370                  		lea	$370(a6),a5
00074D36                            
00074D36                            loc_72364:
00074D36 244D                       		movea.l	a5,a2
00074D38 700B                       		moveq	#$B,d0
00074D3A                            
00074D3A                            loc_72368:
00074D3A 429A                       		clr.l	(a2)+
00074D3C 51C8 FFFC                  		dbf	d0,loc_72368
00074D40                            
00074D40 3A99                       		move.w	(a1)+,(a5)
00074D42 1B45 0002                  		move.b	d5,2(a5)
00074D46 7000                       		moveq	#0,d0
00074D48 3019                       		move.w	(a1)+,d0
00074D4A D08B                       		add.l	a3,d0
00074D4C 2B40 0004                  		move.l	d0,4(a5)
00074D50 3B59 0008                  		move.w	(a1)+,8(a5)
00074D54 1B7C 0001 000E             		move.b	#1,$E(a5)
00074D5A 1B46 000D                  		move.b	d6,$D(a5)
00074D5E 4A04                       		tst.b	d4
00074D60 6B00                       		bmi.s	loc_72396
00074D62 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00074D68                            
00074D68                            loc_72396:
00074D68 51CF FFB0                  		dbf	d7,loc_72348
00074D6C                            
00074D6C 4A2E 0250                  		tst.b	$250(a6)
00074D70 6A00                       		bpl.s	loc_723A6
00074D72 08EE 0002 0340             		bset	#2,$340(a6)
00074D78                            
00074D78                            loc_723A6:
00074D78 4A2E 0310                  		tst.b	$310(a6)
00074D7C 6A00                       		bpl.s	locret_723C6
00074D7E 08EE 0002 0370             		bset	#2,$370(a6)
00074D84 0004 001F                  		ori.b	#$1F,d4
00074D88 13C4 00C0 0011             		move.b	d4,($C00011).l
00074D8E 0844 0005                  		bchg	#5,d4
00074D92 13C4 00C0 0011             		move.b	d4,($C00011).l
00074D98                            
00074D98                            locret_723C6:
00074D98 4E75                       		rts	
00074D9A                            ; End of function Sound_ChkValue
00074D9A                            
00074D9A                            ; ===========================================================================
00074D9A 00FF F100                  		dc.l $FFF100
00074D9E 00FF F1F0                  		dc.l $FFF1F0
00074DA2 00FF F250                  		dc.l $FFF250
00074DA6 00FF F310                  		dc.l $FFF310
00074DAA 00FF F340                  		dc.l $FFF340
00074DAE 00FF F370                  		dc.l $FFF370
00074DB2                            
00074DB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074DB2                            
00074DB2                            
00074DB2                            Snd_FadeOut1:				; XREF: Sound_E0
00074DB2 4216                       		clr.b	0(a6)
00074DB4 4BEE 0220                  		lea	$220(a6),a5
00074DB8 7E05                       		moveq	#5,d7
00074DBA                            
00074DBA                            loc_723EA:
00074DBA 4A15                       		tst.b	(a5)
00074DBC 6A00 0000                  		bpl.w	loc_72472
00074DC0 0895 0007                  		bclr	#7,(a5)
00074DC4 7600                       		moveq	#0,d3
00074DC6 162D 0001                  		move.b	1(a5),d3
00074DCA 6B00                       		bmi.s	loc_7243C
00074DCC 4EBA 0000                  		jsr	sub_726FE(pc)
00074DD0 0C03 0004                  		cmpi.b	#4,d3
00074DD4 6600                       		bne.s	loc_72416
00074DD6 4A2E 0340                  		tst.b	$340(a6)
00074DDA 6A00                       		bpl.s	loc_72416
00074DDC 4BEE 0340                  		lea	$340(a6),a5
00074DE0 226E 0020                  		movea.l	$20(a6),a1
00074DE4 6000                       		bra.s	loc_72428
00074DE6                            ; ===========================================================================
00074DE6                            
00074DE6                            loc_72416:
00074DE6 5503                       		subq.b	#2,d3
00074DE8 E50B                       		lsl.b	#2,d3
00074DEA 41FA FEB2                  		lea	dword_722CC(pc),a0
00074DEE 264D                       		movea.l	a5,a3
00074DF0 2A70 3000                  		movea.l	(a0,d3.w),a5
00074DF4 226E 0018                  		movea.l	$18(a6),a1
00074DF8                            
00074DF8                            loc_72428:
00074DF8 0895 0002                  		bclr	#2,(a5)
00074DFC 08D5 0001                  		bset	#1,(a5)
00074E00 102D 000B                  		move.b	$B(a5),d0
00074E04 4EBA 0000                  		jsr	sub_72C4E(pc)
00074E08 2A4B                       		movea.l	a3,a5
00074E0A 6000                       		bra.s	loc_72472
00074E0C                            ; ===========================================================================
00074E0C                            
00074E0C                            loc_7243C:
00074E0C 4EBA 0000                  		jsr	sub_729A0(pc)
00074E10 41EE 0370                  		lea	$370(a6),a0
00074E14 0C03 00E0                  		cmpi.b	#$E0,d3
00074E18 6700                       		beq.s	loc_7245A
00074E1A 0C03 00C0                  		cmpi.b	#$C0,d3
00074E1E 6700                       		beq.s	loc_7245A
00074E20 E60B                       		lsr.b	#3,d3
00074E22 41FA FE7A                  		lea	dword_722CC(pc),a0
00074E26 2070 3000                  		movea.l	(a0,d3.w),a0
00074E2A                            
00074E2A                            loc_7245A:
00074E2A 0890 0002                  		bclr	#2,(a0)
00074E2E 08D0 0001                  		bset	#1,(a0)
00074E32 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00074E38 6600                       		bne.s	loc_72472
00074E3A 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00074E42                            
00074E42                            loc_72472:
00074E42 DAFC 0030                  		adda.w	#$30,a5
00074E46 51CF FF72                  		dbf	d7,loc_723EA
00074E4A                            
00074E4A 4E75                       		rts	
00074E4C                            ; End of function Snd_FadeOut1
00074E4C                            
00074E4C                            
00074E4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074E4C                            
00074E4C                            
00074E4C                            Snd_FadeOut2:				; XREF: Sound_E0
00074E4C 4BEE 0340                  		lea	$340(a6),a5
00074E50 4A15                       		tst.b	(a5)
00074E52 6A00                       		bpl.s	loc_724AE
00074E54 0895 0007                  		bclr	#7,(a5)
00074E58 0815 0002                  		btst	#2,(a5)
00074E5C 6600                       		bne.s	loc_724AE
00074E5E 4EBA 0000                  		jsr	loc_7270A(pc)
00074E62 4BEE 0100                  		lea	$100(a6),a5
00074E66 0895 0002                  		bclr	#2,(a5)
00074E6A 08D5 0001                  		bset	#1,(a5)
00074E6E 4A15                       		tst.b	(a5)
00074E70 6A00                       		bpl.s	loc_724AE
00074E72 226E 0018                  		movea.l	$18(a6),a1
00074E76 102D 000B                  		move.b	$B(a5),d0
00074E7A 4EBA 0000                  		jsr	sub_72C4E(pc)
00074E7E                            
00074E7E                            loc_724AE:
00074E7E 4BEE 0370                  		lea	$370(a6),a5
00074E82 4A15                       		tst.b	(a5)
00074E84 6A00                       		bpl.s	locret_724E4
00074E86 0895 0007                  		bclr	#7,(a5)
00074E8A 0815 0002                  		btst	#2,(a5)
00074E8E 6600                       		bne.s	locret_724E4
00074E90 4EBA 0000                  		jsr	loc_729A6(pc)
00074E94 4BEE 01F0                  		lea	$1F0(a6),a5
00074E98 0895 0002                  		bclr	#2,(a5)
00074E9C 08D5 0001                  		bset	#1,(a5)
00074EA0 4A15                       		tst.b	(a5)
00074EA2 6A00                       		bpl.s	locret_724E4
00074EA4 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
00074EAA 6600                       		bne.s	locret_724E4
00074EAC 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
00074EB4                            
00074EB4                            locret_724E4:
00074EB4 4E75                       		rts	
00074EB6                            ; End of function Snd_FadeOut2
00074EB6                            
00074EB6                            ; ===========================================================================
00074EB6                            ; ---------------------------------------------------------------------------
00074EB6                            ; Fade out music
00074EB6                            ; ---------------------------------------------------------------------------
00074EB6                            
00074EB6                            Sound_E0:				; XREF: Sound_ExIndex
00074EB6 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
00074EBA 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
00074EBE 1D7C 0003 0006             		move.b	#3,6(a6)
00074EC4 1D7C 0028 0004             		move.b	#$28,4(a6)
00074ECA 422E 0040                  		clr.b	$40(a6)
00074ECE 422E 002A                  		clr.b	$2A(a6)
00074ED2 4E75                       		rts	
00074ED4                            
00074ED4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074ED4                            
00074ED4                            
00074ED4                            sub_72504:				; XREF: sub_71B4C
00074ED4 102E 0006                  		move.b	6(a6),d0
00074ED8 6700                       		beq.s	loc_72510
00074EDA 532E 0006                  		subq.b	#1,6(a6)
00074EDE 4E75                       		rts	
00074EE0                            ; ===========================================================================
00074EE0                            
00074EE0                            loc_72510:
00074EE0 532E 0004                  		subq.b	#1,4(a6)
00074EE4 6700 0000                  		beq.w	Sound_E4
00074EE8 1D7C 0003 0006             		move.b	#3,6(a6)
00074EEE 4BEE 0070                  		lea	$70(a6),a5
00074EF2 7E05                       		moveq	#5,d7
00074EF4                            
00074EF4                            loc_72524:
00074EF4 4A15                       		tst.b	(a5)
00074EF6 6A00                       		bpl.s	loc_72538
00074EF8 522D 0009                  		addq.b	#1,9(a5)
00074EFC 6A00                       		bpl.s	loc_72534
00074EFE 0895 0007                  		bclr	#7,(a5)
00074F02 6000                       		bra.s	loc_72538
00074F04                            ; ===========================================================================
00074F04                            
00074F04                            loc_72534:
00074F04 4EBA 0000                  		jsr	sub_72CB4(pc)
00074F08                            
00074F08                            loc_72538:
00074F08 DAFC 0030                  		adda.w	#$30,a5
00074F0C 51CF FFE6                  		dbf	d7,loc_72524
00074F10                            
00074F10 7E02                       		moveq	#2,d7
00074F12                            
00074F12                            loc_72542:
00074F12 4A15                       		tst.b	(a5)
00074F14 6A00                       		bpl.s	loc_72560
00074F16 522D 0009                  		addq.b	#1,9(a5)
00074F1A 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00074F20 6500                       		bcs.s	loc_72558
00074F22 0895 0007                  		bclr	#7,(a5)
00074F26 6000                       		bra.s	loc_72560
00074F28                            ; ===========================================================================
00074F28                            
00074F28                            loc_72558:
00074F28 1C2D 0009                  		move.b	9(a5),d6
00074F2C 4EBA 0000                  		jsr	sub_7296A(pc)
00074F30                            
00074F30                            loc_72560:
00074F30 DAFC 0030                  		adda.w	#$30,a5
00074F34 51CF FFDC                  		dbf	d7,loc_72542
00074F38                            
00074F38 4E75                       		rts	
00074F3A                            ; End of function sub_72504
00074F3A                            
00074F3A                            
00074F3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074F3A                            
00074F3A                            
00074F3A                            sub_7256A:				; XREF: Sound_E4; sub_725CA
00074F3A 7602                       		moveq	#2,d3
00074F3C 7028                       		moveq	#$28,d0
00074F3E                            
00074F3E                            loc_7256E:
00074F3E 1203                       		move.b	d3,d1
00074F40 4EBA 0000                  		jsr	sub_7272E(pc)
00074F44 5801                       		addq.b	#4,d1
00074F46 4EBA 0000                  		jsr	sub_7272E(pc)
00074F4A 51CB FFF2                  		dbf	d3,loc_7256E
00074F4E                            
00074F4E 7040                       		moveq	#$40,d0
00074F50 727F                       		moveq	#$7F,d1
00074F52 7802                       		moveq	#2,d4
00074F54                            
00074F54                            loc_72584:
00074F54 7603                       		moveq	#3,d3
00074F56                            
00074F56                            loc_72586:
00074F56 4EBA 0000                  		jsr	sub_7272E(pc)
00074F5A 4EBA 0000                  		jsr	sub_72764(pc)
00074F5E 5840                       		addq.w	#4,d0
00074F60 51CB FFF4                  		dbf	d3,loc_72586
00074F64                            
00074F64 0400 000F                  		subi.b	#$F,d0
00074F68 51CC FFEA                  		dbf	d4,loc_72584
00074F6C                            
00074F6C 4E75                       		rts	
00074F6E                            ; End of function sub_7256A
00074F6E                            
00074F6E                            ; ===========================================================================
00074F6E                            ; ---------------------------------------------------------------------------
00074F6E                            ; Stop music
00074F6E                            ; ---------------------------------------------------------------------------
00074F6E                            
00074F6E                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
00074F6E 702B                       		moveq	#$2B,d0
00074F70 123C 0080                  		move.b	#$80,d1
00074F74 4EBA 0000                  		jsr	sub_7272E(pc)
00074F78 7027                       		moveq	#$27,d0
00074F7A 7200                       		moveq	#0,d1
00074F7C 4EBA 0000                  		jsr	sub_7272E(pc)
00074F80 204E                       		movea.l	a6,a0
00074F82 303C 00E3                  		move.w	#$E3,d0
00074F86                            
00074F86                            loc_725B6:
00074F86 4298                       		clr.l	(a0)+
00074F88 51C8 FFFC                  		dbf	d0,loc_725B6
00074F8C                            
00074F8C 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00074F92 4EBA FFA6                  		jsr	sub_7256A(pc)
00074F96 6000 0000                  		bra.w	sub_729B6
00074F9A                            
00074F9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074F9A                            
00074F9A                            
00074F9A                            sub_725CA:				; XREF: Sound_ChkValue
00074F9A 204E                       		movea.l	a6,a0
00074F9C 1216                       		move.b	0(a6),d1
00074F9E 142E 0027                  		move.b	$27(a6),d2
00074FA2 162E 002A                  		move.b	$2A(a6),d3
00074FA6 182E 0026                  		move.b	$26(a6),d4
00074FAA 3A2E 000A                  		move.w	$A(a6),d5
00074FAE 303C 0087                  		move.w	#$87,d0
00074FB2                            
00074FB2                            loc_725E4:
00074FB2 4298                       		clr.l	(a0)+
00074FB4 51C8 FFFC                  		dbf	d0,loc_725E4
00074FB8                            
00074FB8 1C81                       		move.b	d1,0(a6)
00074FBA 1D42 0027                  		move.b	d2,$27(a6)
00074FBE 1D43 002A                  		move.b	d3,$2A(a6)
00074FC2 1D44 0026                  		move.b	d4,$26(a6)
00074FC6 3D45 000A                  		move.w	d5,$A(a6)
00074FCA 1D7C 0080 0009             		move.b	#$80,9(a6)
00074FD0 4EBA FF68                  		jsr	sub_7256A(pc)
00074FD4 6000 0000                  		bra.w	sub_729B6
00074FD8                            ; End of function sub_725CA
00074FD8                            
00074FD8                            
00074FD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074FD8                            
00074FD8                            
00074FD8                            sub_7260C:				; XREF: sub_71B4C
00074FD8 1D6E 0002 0001             		move.b	2(a6),1(a6)
00074FDE 41EE 004E                  		lea	$4E(a6),a0
00074FE2 7030                       		moveq	#$30,d0
00074FE4 7209                       		moveq	#9,d1
00074FE6                            
00074FE6                            loc_7261A:
00074FE6 5210                       		addq.b	#1,(a0)
00074FE8 D0C0                       		adda.w	d0,a0
00074FEA 51C9 FFFA                  		dbf	d1,loc_7261A
00074FEE                            
00074FEE 4E75                       		rts	
00074FF0                            ; End of function sub_7260C
00074FF0                            
00074FF0                            ; ===========================================================================
00074FF0                            ; ---------------------------------------------------------------------------
00074FF0                            ; Speed	up music
00074FF0                            ; ---------------------------------------------------------------------------
00074FF0                            
00074FF0                            Sound_E2:				; XREF: Sound_ExIndex
00074FF0 4A2E 0027                  		tst.b	$27(a6)
00074FF4 6600                       		bne.s	loc_7263E
00074FF6 1D6E 0029 0002             		move.b	$29(a6),2(a6)
00074FFC 1D6E 0029 0001             		move.b	$29(a6),1(a6)
00075002 1D7C 0080 002A             		move.b	#$80,$2A(a6)
00075008 4E75                       		rts	
0007500A                            ; ===========================================================================
0007500A                            
0007500A                            loc_7263E:
0007500A 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
00075010 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
00075016 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0007501C 4E75                       		rts	
0007501E                            ; ===========================================================================
0007501E                            ; ---------------------------------------------------------------------------
0007501E                            ; Change music back to normal speed
0007501E                            ; ---------------------------------------------------------------------------
0007501E                            
0007501E                            Sound_E3:				; XREF: Sound_ExIndex
0007501E 4A2E 0027                  		tst.b	$27(a6)
00075022 6600                       		bne.s	loc_7266A
00075024 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0007502A 1D6E 0028 0001             		move.b	$28(a6),1(a6)
00075030 422E 002A                  		clr.b	$2A(a6)
00075034 4E75                       		rts	
00075036                            ; ===========================================================================
00075036                            
00075036                            loc_7266A:
00075036 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0007503C 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
00075042 422E 03CA                  		clr.b	$3CA(a6)
00075046 4E75                       		rts	
00075048                            
00075048                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075048                            
00075048                            
00075048                            sub_7267C:				; XREF: sub_71B4C
00075048 4A2E 0025                  		tst.b	$25(a6)
0007504C 6700                       		beq.s	loc_72688
0007504E 532E 0025                  		subq.b	#1,$25(a6)
00075052 4E75                       		rts	
00075054                            ; ===========================================================================
00075054                            
00075054                            loc_72688:
00075054 4A2E 0026                  		tst.b	$26(a6)
00075058 6700                       		beq.s	loc_726D6
0007505A 532E 0026                  		subq.b	#1,$26(a6)
0007505E 1D7C 0002 0025             		move.b	#2,$25(a6)
00075064 4BEE 0070                  		lea	$70(a6),a5
00075068 7E05                       		moveq	#5,d7
0007506A                            
0007506A                            loc_7269E:
0007506A 4A15                       		tst.b	(a5)
0007506C 6A00                       		bpl.s	loc_726AA
0007506E 532D 0009                  		subq.b	#1,9(a5)
00075072 4EBA 0000                  		jsr	sub_72CB4(pc)
00075076                            
00075076                            loc_726AA:
00075076 DAFC 0030                  		adda.w	#$30,a5
0007507A 51CF FFEE                  		dbf	d7,loc_7269E
0007507E 7E02                       		moveq	#2,d7
00075080                            
00075080                            loc_726B4:
00075080 4A15                       		tst.b	(a5)
00075082 6A00                       		bpl.s	loc_726CC
00075084 532D 0009                  		subq.b	#1,9(a5)
00075088 1C2D 0009                  		move.b	9(a5),d6
0007508C 0C06 0010                  		cmpi.b	#$10,d6
00075090 6500                       		bcs.s	loc_726C8
00075092 7C0F                       		moveq	#$F,d6
00075094                            
00075094                            loc_726C8:
00075094 4EBA 0000                  		jsr	sub_7296A(pc)
00075098                            
00075098                            loc_726CC:
00075098 DAFC 0030                  		adda.w	#$30,a5
0007509C 51CF FFE2                  		dbf	d7,loc_726B4
000750A0 4E75                       		rts	
000750A2                            ; ===========================================================================
000750A2                            
000750A2                            loc_726D6:
000750A2 08AE 0002 0040             		bclr	#2,$40(a6)
000750A8 422E 0024                  		clr.b	$24(a6)
000750AC 4E75                       		rts	
000750AE                            ; End of function sub_7267C
000750AE                            
000750AE                            ; ===========================================================================
000750AE                            
000750AE                            loc_726E2:				; XREF: sub_71CCA
000750AE 0815 0001                  		btst	#1,(a5)
000750B2 6600                       		bne.s	locret_726FC
000750B4 0815 0002                  		btst	#2,(a5)
000750B8 6600                       		bne.s	locret_726FC
000750BA 7028                       		moveq	#$28,d0
000750BC 122D 0001                  		move.b	1(a5),d1
000750C0 0001 00F0                  		ori.b	#-$10,d1
000750C4 6000 0000                  		bra.w	sub_7272E
000750C8                            ; ===========================================================================
000750C8                            
000750C8                            locret_726FC:
000750C8 4E75                       		rts	
000750CA                            
000750CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000750CA                            
000750CA                            
000750CA                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000750CA 0815 0004                  		btst	#4,(a5)
000750CE 6600                       		bne.s	locret_72714
000750D0 0815 0002                  		btst	#2,(a5)
000750D4 6600                       		bne.s	locret_72714
000750D6                            
000750D6                            loc_7270A:				; XREF: Snd_FadeOut2
000750D6 7028                       		moveq	#$28,d0
000750D8 122D 0001                  		move.b	1(a5),d1
000750DC 6000 0000                  		bra.w	sub_7272E
000750E0                            ; ===========================================================================
000750E0                            
000750E0                            locret_72714:
000750E0 4E75                       		rts	
000750E2                            ; End of function sub_726FE
000750E2                            
000750E2                            ; ===========================================================================
000750E2                            
000750E2                            loc_72716:				; XREF: sub_72A5A
000750E2 0815 0002                  		btst	#2,(a5)
000750E6 6600                       		bne.s	locret_72720
000750E8 6000 0000                  		bra.w	sub_72722
000750EC                            ; ===========================================================================
000750EC                            
000750EC                            locret_72720:
000750EC 4E75                       		rts	
000750EE                            
000750EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000750EE                            
000750EE                            
000750EE                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
000750EE 082D 0002 0001             		btst	#2,1(a5)
000750F4 6600                       		bne.s	loc_7275A
000750F6 D02D 0001                  		add.b	1(a5),d0
000750FA                            ; End of function sub_72722
000750FA                            
000750FA                            
000750FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000750FA                            
000750FA                            
000750FA                            sub_7272E:				; XREF: loc_71E6A
000750FA 1439 00A0 4000             		move.b	($A04000).l,d2
00075100 0802 0007                  		btst	#7,d2
00075104 66F4                       		bne.s	sub_7272E
00075106 13C0 00A0 4000             		move.b	d0,($A04000).l
0007510C 4E71                       		nop	
0007510E 4E71                       		nop	
00075110 4E71                       		nop	
00075112                            
00075112                            loc_72746:
00075112 1439 00A0 4000             		move.b	($A04000).l,d2
00075118 0802 0007                  		btst	#7,d2
0007511C 66F4                       		bne.s	loc_72746
0007511E                            
0007511E 13C1 00A0 4001             		move.b	d1,($A04001).l
00075124 4E75                       		rts	
00075126                            ; End of function sub_7272E
00075126                            
00075126                            ; ===========================================================================
00075126                            
00075126                            loc_7275A:				; XREF: sub_72722
00075126 142D 0001                  		move.b	1(a5),d2
0007512A 0882 0002                  		bclr	#2,d2
0007512E D002                       		add.b	d2,d0
00075130                            
00075130                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075130                            
00075130                            
00075130                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
00075130 1439 00A0 4000             		move.b	($A04000).l,d2
00075136 0802 0007                  		btst	#7,d2
0007513A 66F4                       		bne.s	sub_72764
0007513C 13C0 00A0 4002             		move.b	d0,($A04002).l
00075142 4E71                       		nop	
00075144 4E71                       		nop	
00075146 4E71                       		nop	
00075148                            
00075148                            loc_7277C:
00075148 1439 00A0 4000             		move.b	($A04000).l,d2
0007514E 0802 0007                  		btst	#7,d2
00075152 66F4                       		bne.s	loc_7277C
00075154                            
00075154 13C1 00A0 4003             		move.b	d1,($A04003).l
0007515A 4E75                       		rts	
0007515C                            ; End of function sub_72764
0007515C                            
0007515C                            ; ===========================================================================
0007515C 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0007516E 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00075180 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
00075190 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
000751A0 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
000751B0 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000751C0 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000751D0 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
000751E0 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
000751F0 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
00075200 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00075210 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0007521C                            
0007521C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007521C                            
0007521C                            
0007521C                            sub_72850:				; XREF: sub_71B4C
0007521C 532D 000E                  		subq.b	#1,$E(a5)
00075220 6600                       		bne.s	loc_72866
00075222 0895 0004                  		bclr	#4,(a5)
00075226 4EBA 0000                  		jsr	sub_72878(pc)
0007522A 4EBA 0000                  		jsr	sub_728DC(pc)
0007522E 6000 0000                  		bra.w	loc_7292E
00075232                            ; ===========================================================================
00075232                            
00075232                            loc_72866:
00075232 4EBA F4B2                  		jsr	sub_71D9E(pc)
00075236 4EBA 0000                  		jsr	sub_72926(pc)
0007523A 4EBA F4D2                  		jsr	sub_71DC6(pc)
0007523E 4EBA 0000                  		jsr	sub_728E2(pc)
00075242 4E75                       		rts	
00075244                            ; End of function sub_72850
00075244                            
00075244                            
00075244                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075244                            
00075244                            
00075244                            sub_72878:				; XREF: sub_72850
00075244 0895 0001                  		bclr	#1,(a5)
00075248 286D 0004                  		movea.l	4(a5),a4
0007524C                            
0007524C                            loc_72880:
0007524C 7A00                       		moveq	#0,d5
0007524E 1A1C                       		move.b	(a4)+,d5
00075250 0C05 00E0                  		cmpi.b	#$E0,d5
00075254 6500                       		bcs.s	loc_72890
00075256 4EBA 0000                  		jsr	sub_72A5A(pc)
0007525A 60F0                       		bra.s	loc_72880
0007525C                            ; ===========================================================================
0007525C                            
0007525C                            loc_72890:
0007525C 4A05                       		tst.b	d5
0007525E 6A00                       		bpl.s	loc_728A4
00075260 4EBA 0000                  		jsr	sub_728AC(pc)
00075264 1A1C                       		move.b	(a4)+,d5
00075266 4A05                       		tst.b	d5
00075268 6A00                       		bpl.s	loc_728A4
0007526A 534C                       		subq.w	#1,a4
0007526C 6000 F43A                  		bra.w	sub_71D60
00075270                            ; ===========================================================================
00075270                            
00075270                            loc_728A4:
00075270 4EBA F416                  		jsr	sub_71D40(pc)
00075274 6000 F432                  		bra.w	sub_71D60
00075278                            ; End of function sub_72878
00075278                            
00075278                            
00075278                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075278                            
00075278                            
00075278                            sub_728AC:				; XREF: sub_72878
00075278 0405 0081                  		subi.b	#$81,d5
0007527C 6500                       		bcs.s	loc_728CA
0007527E DA2D 0008                  		add.b	8(a5),d5
00075282 0245 007F                  		andi.w	#$7F,d5
00075286 E34D                       		lsl.w	#1,d5
00075288 41FA 0000                  		lea	word_729CE(pc),a0
0007528C 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00075292 6000 F414                  		bra.w	sub_71D60
00075296                            ; ===========================================================================
00075296                            
00075296                            loc_728CA:
00075296 08D5 0001                  		bset	#1,(a5)
0007529A 3B7C FFFF 0010             		move.w	#-1,$10(a5)
000752A0 4EBA F406                  		jsr	sub_71D60(pc)
000752A4 6000 0000                  		bra.w	sub_729A0
000752A8                            ; End of function sub_728AC
000752A8                            
000752A8                            
000752A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000752A8                            
000752A8                            
000752A8                            sub_728DC:				; XREF: sub_72850
000752A8 3C2D 0010                  		move.w	$10(a5),d6
000752AC 6B00                       		bmi.s	loc_72920
000752AE                            ; End of function sub_728DC
000752AE                            
000752AE                            
000752AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000752AE                            
000752AE                            
000752AE                            sub_728E2:				; XREF: sub_72850
000752AE 102D 001E                  		move.b	$1E(a5),d0
000752B2 4880                       		ext.w	d0
000752B4 DC40                       		add.w	d0,d6
000752B6 0815 0002                  		btst	#2,(a5)
000752BA 6600                       		bne.s	locret_7291E
000752BC 0815 0001                  		btst	#1,(a5)
000752C0 6600                       		bne.s	locret_7291E
000752C2 102D 0001                  		move.b	1(a5),d0
000752C6 0C00 00E0                  		cmpi.b	#$E0,d0
000752CA 6600                       		bne.s	loc_72904
000752CC 103C 00C0                  		move.b	#$C0,d0
000752D0                            
000752D0                            loc_72904:
000752D0 3206                       		move.w	d6,d1
000752D2 0201 000F                  		andi.b	#$F,d1
000752D6 8001                       		or.b	d1,d0
000752D8 E84E                       		lsr.w	#4,d6
000752DA 0206 003F                  		andi.b	#$3F,d6
000752DE 13C0 00C0 0011             		move.b	d0,($C00011).l
000752E4 13C6 00C0 0011             		move.b	d6,($C00011).l
000752EA                            
000752EA                            locret_7291E:
000752EA 4E75                       		rts	
000752EC                            ; End of function sub_728E2
000752EC                            
000752EC                            ; ===========================================================================
000752EC                            
000752EC                            loc_72920:				; XREF: sub_728DC
000752EC 08D5 0001                  		bset	#1,(a5)
000752F0 4E75                       		rts	
000752F2                            
000752F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000752F2                            
000752F2                            
000752F2                            sub_72926:				; XREF: sub_72850
000752F2 4A2D 000B                  		tst.b	$B(a5)
000752F6 6700 0000                  		beq.w	locret_7298A
000752FA                            
000752FA                            loc_7292E:				; XREF: sub_72850
000752FA 1C2D 0009                  		move.b	9(a5),d6
000752FE 7000                       		moveq	#0,d0
00075300 102D 000B                  		move.b	$B(a5),d0
00075304 6700                       		beq.s	sub_7296A
00075306 2079 0007 42BC             		movea.l	(Go_PSGIndex).l,a0
0007530C 5340                       		subq.w	#1,d0
0007530E E548                       		lsl.w	#2,d0
00075310 2070 0000                  		movea.l	(a0,d0.w),a0
00075314 102D 000C                  		move.b	$C(a5),d0
00075318 1030 0000                  		move.b	(a0,d0.w),d0
0007531C 522D 000C                  		addq.b	#1,$C(a5)
00075320 0800 0007                  		btst	#7,d0
00075324 6700                       		beq.s	loc_72960
00075326 0C00 0080                  		cmpi.b	#$80,d0
0007532A 6700                       		beq.s	loc_7299A
0007532C                            
0007532C                            loc_72960:
0007532C DC40                       		add.w	d0,d6
0007532E 0C06 0010                  		cmpi.b	#$10,d6
00075332 6500                       		bcs.s	sub_7296A
00075334 7C0F                       		moveq	#$F,d6
00075336                            ; End of function sub_72926
00075336                            
00075336                            
00075336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075336                            
00075336                            
00075336                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00075336 0815 0001                  		btst	#1,(a5)
0007533A 6600                       		bne.s	locret_7298A
0007533C 0815 0002                  		btst	#2,(a5)
00075340 6600                       		bne.s	locret_7298A
00075342 0815 0004                  		btst	#4,(a5)
00075346 6600                       		bne.s	loc_7298C
00075348                            
00075348                            loc_7297C:
00075348 8C2D 0001                  		or.b	1(a5),d6
0007534C 0606 0010                  		addi.b	#$10,d6
00075350 13C6 00C0 0011             		move.b	d6,($C00011).l
00075356                            
00075356                            locret_7298A:
00075356 4E75                       		rts	
00075358                            ; ===========================================================================
00075358                            
00075358                            loc_7298C:
00075358 4A2D 0013                  		tst.b	$13(a5)
0007535C 67EA                       		beq.s	loc_7297C
0007535E 4A2D 0012                  		tst.b	$12(a5)
00075362 66E4                       		bne.s	loc_7297C
00075364 4E75                       		rts	
00075366                            ; End of function sub_7296A
00075366                            
00075366                            ; ===========================================================================
00075366                            
00075366                            loc_7299A:				; XREF: sub_72926
00075366 532D 000C                  		subq.b	#1,$C(a5)
0007536A 4E75                       		rts	
0007536C                            
0007536C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007536C                            
0007536C                            
0007536C                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0007536C 0815 0002                  		btst	#2,(a5)
00075370 6600                       		bne.s	locret_729B4
00075372                            
00075372                            loc_729A6:				; XREF: Snd_FadeOut2
00075372 102D 0001                  		move.b	1(a5),d0
00075376 0000 001F                  		ori.b	#$1F,d0
0007537A 13C0 00C0 0011             		move.b	d0,($C00011).l
00075380                            
00075380                            locret_729B4:
00075380 4E75                       		rts	
00075382                            ; End of function sub_729A0
00075382                            
00075382                            
00075382                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075382                            
00075382                            
00075382                            sub_729B6:				; XREF: loc_71E7C
00075382 41F9 00C0 0011             		lea	($C00011).l,a0
00075388 10BC 009F                  		move.b	#$9F,(a0)
0007538C 10BC 00BF                  		move.b	#$BF,(a0)
00075390 10BC 00DF                  		move.b	#$DF,(a0)
00075394 10BC 00FF                  		move.b	#$FF,(a0)
00075398 4E75                       		rts	
0007539A                            ; End of function sub_729B6
0007539A                            
0007539A                            ; ===========================================================================
0007539A 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
000753AC 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
000753BE 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
000753D2 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
000753E6 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
000753FA 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0007540E 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00075422 0011 0000                  		dc.w $11, 0
00075426                            
00075426                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075426                            
00075426                            
00075426                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00075426 0445 00E0                  		subi.w	#$E0,d5
0007542A E54D                       		lsl.w	#2,d5
0007542C 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00075430                            ; End of function sub_72A5A
00075430                            
00075430                            ; ===========================================================================
00075430                            
00075430                            loc_72A64:
00075430 6000 0000                  		bra.w	loc_72ACC
00075434                            ; ===========================================================================
00075434 6000 0000                  		bra.w	loc_72AEC
00075438                            ; ===========================================================================
00075438 6000 0000                  		bra.w	loc_72AF2
0007543C                            ; ===========================================================================
0007543C 6000 0000                  		bra.w	loc_72AF8
00075440                            ; ===========================================================================
00075440 6000 0000                  		bra.w	loc_72B14
00075444                            ; ===========================================================================
00075444 6000 0000                  		bra.w	loc_72B9E
00075448                            ; ===========================================================================
00075448 6000 0000                  		bra.w	loc_72BA4
0007544C                            ; ===========================================================================
0007544C 6000 0000                  		bra.w	loc_72BAE
00075450                            ; ===========================================================================
00075450 6000 0000                  		bra.w	loc_72BB4
00075454                            ; ===========================================================================
00075454 6000 0000                  		bra.w	loc_72BBE
00075458                            ; ===========================================================================
00075458 6000 0000                  		bra.w	loc_72BC6
0007545C                            ; ===========================================================================
0007545C 6000 0000                  		bra.w	loc_72BD0
00075460                            ; ===========================================================================
00075460 6000 0000                  		bra.w	loc_72BE6
00075464                            ; ===========================================================================
00075464 6000 0000                  		bra.w	loc_72BEE
00075468                            ; ===========================================================================
00075468 6000 0000                  		bra.w	loc_72BF4
0007546C                            ; ===========================================================================
0007546C 6000 0000                  		bra.w	loc_72C26
00075470                            ; ===========================================================================
00075470 6000 0000                  		bra.w	loc_72D30
00075474                            ; ===========================================================================
00075474 6000 0000                  		bra.w	loc_72D52
00075478                            ; ===========================================================================
00075478 6000 0000                  		bra.w	loc_72D58
0007547C                            ; ===========================================================================
0007547C 6000 0000                  		bra.w	loc_72E06
00075480                            ; ===========================================================================
00075480 6000 0000                  		bra.w	loc_72E20
00075484                            ; ===========================================================================
00075484 6000 0000                  		bra.w	loc_72E26
00075488                            ; ===========================================================================
00075488 6000 0000                  		bra.w	loc_72E2C
0007548C                            ; ===========================================================================
0007548C 6000 0000                  		bra.w	loc_72E38
00075490                            ; ===========================================================================
00075490 6000 0000                  		bra.w	loc_72E52
00075494                            ; ===========================================================================
00075494 6000 0000                  		bra.w	loc_72E64
00075498                            ; ===========================================================================
00075498                            
00075498                            loc_72ACC:				; XREF: loc_72A64
00075498 121C                       		move.b	(a4)+,d1
0007549A 4A2D 0001                  		tst.b	1(a5)
0007549E 6B00                       		bmi.s	locret_72AEA
000754A0 102D 000A                  		move.b	$A(a5),d0
000754A4 0200 0037                  		andi.b	#$37,d0
000754A8 8200                       		or.b	d0,d1
000754AA 1B41 000A                  		move.b	d1,$A(a5)
000754AE 103C 00B4                  		move.b	#$B4,d0
000754B2 6000 FC2E                  		bra.w	loc_72716
000754B6                            ; ===========================================================================
000754B6                            
000754B6                            locret_72AEA:
000754B6 4E75                       		rts	
000754B8                            ; ===========================================================================
000754B8                            
000754B8                            loc_72AEC:				; XREF: loc_72A64
000754B8 1B5C 001E                  		move.b	(a4)+,$1E(a5)
000754BC 4E75                       		rts	
000754BE                            ; ===========================================================================
000754BE                            
000754BE                            loc_72AF2:				; XREF: loc_72A64
000754BE 1D5C 0007                  		move.b	(a4)+,7(a6)
000754C2 4E75                       		rts	
000754C4                            ; ===========================================================================
000754C4                            
000754C4                            loc_72AF8:				; XREF: loc_72A64
000754C4 7000                       		moveq	#0,d0
000754C6 102D 000D                  		move.b	$D(a5),d0
000754CA 2875 0000                  		movea.l	(a5,d0.w),a4
000754CE 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000754D6 544C                       		addq.w	#2,a4
000754D8 5800                       		addq.b	#4,d0
000754DA 1B40 000D                  		move.b	d0,$D(a5)
000754DE 4E75                       		rts	
000754E0                            ; ===========================================================================
000754E0                            
000754E0                            loc_72B14:				; XREF: loc_72A64
000754E0 204E                       		movea.l	a6,a0
000754E2 43EE 03A0                  		lea	$3A0(a6),a1
000754E6 303C 0087                  		move.w	#$87,d0
000754EA                            
000754EA                            loc_72B1E:
000754EA 20D9                       		move.l	(a1)+,(a0)+
000754EC 51C8 FFFC                  		dbf	d0,loc_72B1E
000754F0                            
000754F0 08EE 0002 0040             		bset	#2,$40(a6)
000754F6 264D                       		movea.l	a5,a3
000754F8 1C3C 0028                  		move.b	#$28,d6
000754FC 9C2E 0026                  		sub.b	$26(a6),d6
00075500 7E05                       		moveq	#5,d7
00075502 4BEE 0070                  		lea	$70(a6),a5
00075506                            
00075506                            loc_72B3A:
00075506 0815 0007                  		btst	#7,(a5)
0007550A 6700                       		beq.s	loc_72B5C
0007550C 08D5 0001                  		bset	#1,(a5)
00075510 DD2D 0009                  		add.b	d6,9(a5)
00075514 0815 0002                  		btst	#2,(a5)
00075518 6600                       		bne.s	loc_72B5C
0007551A 7000                       		moveq	#0,d0
0007551C 102D 000B                  		move.b	$B(a5),d0
00075520 226E 0018                  		movea.l	$18(a6),a1
00075524 4EBA 0000                  		jsr	sub_72C4E(pc)
00075528                            
00075528                            loc_72B5C:
00075528 DAFC 0030                  		adda.w	#$30,a5
0007552C 51CF FFD8                  		dbf	d7,loc_72B3A
00075530                            
00075530 7E02                       		moveq	#2,d7
00075532                            
00075532                            loc_72B66:
00075532 0815 0007                  		btst	#7,(a5)
00075536 6700                       		beq.s	loc_72B78
00075538 08D5 0001                  		bset	#1,(a5)
0007553C 4EBA FE2E                  		jsr	sub_729A0(pc)
00075540 DD2D 0009                  		add.b	d6,9(a5)
00075544                            
00075544                            loc_72B78:
00075544 DAFC 0030                  		adda.w	#$30,a5
00075548 51CF FFE8                  		dbf	d7,loc_72B66
0007554C 2A4B                       		movea.l	a3,a5
0007554E 1D7C 0080 0024             		move.b	#$80,$24(a6)
00075554 1D7C 0028 0026             		move.b	#$28,$26(a6)
0007555A 422E 0027                  		clr.b	$27(a6)
0007555E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00075566 504F                       		addq.w	#8,sp
00075568 4E75                       		rts	
0007556A                            ; ===========================================================================
0007556A                            
0007556A                            loc_72B9E:				; XREF: loc_72A64
0007556A 1B5C 0002                  		move.b	(a4)+,2(a5)
0007556E 4E75                       		rts	
00075570                            ; ===========================================================================
00075570                            
00075570                            loc_72BA4:				; XREF: loc_72A64
00075570 101C                       		move.b	(a4)+,d0
00075572 D12D 0009                  		add.b	d0,9(a5)
00075576 6000 0000                  		bra.w	sub_72CB4
0007557A                            ; ===========================================================================
0007557A                            
0007557A                            loc_72BAE:				; XREF: loc_72A64
0007557A 08D5 0004                  		bset	#4,(a5)
0007557E 4E75                       		rts	
00075580                            ; ===========================================================================
00075580                            
00075580                            loc_72BB4:				; XREF: loc_72A64
00075580 1B54 0012                  		move.b	(a4),$12(a5)
00075584 1B5C 0013                  		move.b	(a4)+,$13(a5)
00075588 4E75                       		rts	
0007558A                            ; ===========================================================================
0007558A                            
0007558A                            loc_72BBE:				; XREF: loc_72A64
0007558A 101C                       		move.b	(a4)+,d0
0007558C D12D 0008                  		add.b	d0,8(a5)
00075590 4E75                       		rts	
00075592                            ; ===========================================================================
00075592                            
00075592                            loc_72BC6:				; XREF: loc_72A64
00075592 1D54 0002                  		move.b	(a4),2(a6)
00075596 1D5C 0001                  		move.b	(a4)+,1(a6)
0007559A 4E75                       		rts	
0007559C                            ; ===========================================================================
0007559C                            
0007559C                            loc_72BD0:				; XREF: loc_72A64
0007559C 41EE 0040                  		lea	$40(a6),a0
000755A0 101C                       		move.b	(a4)+,d0
000755A2 7230                       		moveq	#$30,d1
000755A4 7409                       		moveq	#9,d2
000755A6                            
000755A6                            loc_72BDA:
000755A6 1140 0002                  		move.b	d0,2(a0)
000755AA D0C1                       		adda.w	d1,a0
000755AC 51CA FFF8                  		dbf	d2,loc_72BDA
000755B0                            
000755B0 4E75                       		rts	
000755B2                            ; ===========================================================================
000755B2                            
000755B2                            loc_72BE6:				; XREF: loc_72A64
000755B2 101C                       		move.b	(a4)+,d0
000755B4 D12D 0009                  		add.b	d0,9(a5)
000755B8 4E75                       		rts	
000755BA                            ; ===========================================================================
000755BA                            
000755BA                            loc_72BEE:				; XREF: loc_72A64
000755BA 422E 002C                  		clr.b	$2C(a6)
000755BE 4E75                       		rts	
000755C0                            ; ===========================================================================
000755C0                            
000755C0                            loc_72BF4:				; XREF: loc_72A64
000755C0 0895 0007                  		bclr	#7,(a5)
000755C4 0895 0004                  		bclr	#4,(a5)
000755C8 4EBA FB00                  		jsr	sub_726FE(pc)
000755CC 4A2E 0250                  		tst.b	$250(a6)
000755D0 6B00                       		bmi.s	loc_72C22
000755D2 264D                       		movea.l	a5,a3
000755D4 4BEE 0100                  		lea	$100(a6),a5
000755D8 226E 0018                  		movea.l	$18(a6),a1
000755DC 0895 0002                  		bclr	#2,(a5)
000755E0 08D5 0001                  		bset	#1,(a5)
000755E4 102D 000B                  		move.b	$B(a5),d0
000755E8 4EBA 0000                  		jsr	sub_72C4E(pc)
000755EC 2A4B                       		movea.l	a3,a5
000755EE                            
000755EE                            loc_72C22:
000755EE 504F                       		addq.w	#8,sp
000755F0 4E75                       		rts	
000755F2                            ; ===========================================================================
000755F2                            
000755F2                            loc_72C26:				; XREF: loc_72A64
000755F2 7000                       		moveq	#0,d0
000755F4 101C                       		move.b	(a4)+,d0
000755F6 1B40 000B                  		move.b	d0,$B(a5)
000755FA 0815 0002                  		btst	#2,(a5)
000755FE 6600 0000                  		bne.w	locret_72CAA
00075602 226E 0018                  		movea.l	$18(a6),a1
00075606 4A2E 000E                  		tst.b	$E(a6)
0007560A 6700                       		beq.s	sub_72C4E
0007560C 226D 0020                  		movea.l	$20(a5),a1
00075610 4A2E 000E                  		tst.b	$E(a6)
00075614 6B00                       		bmi.s	sub_72C4E
00075616 226E 0020                  		movea.l	$20(a6),a1
0007561A                            
0007561A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007561A                            
0007561A                            
0007561A                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0007561A 5340                       		subq.w	#1,d0
0007561C 6B00                       		bmi.s	loc_72C5C
0007561E 323C 0019                  		move.w	#$19,d1
00075622                            
00075622                            loc_72C56:
00075622 D2C1                       		adda.w	d1,a1
00075624 51C8 FFFC                  		dbf	d0,loc_72C56
00075628                            
00075628                            loc_72C5C:
00075628 1219                       		move.b	(a1)+,d1
0007562A 1B41 001F                  		move.b	d1,$1F(a5)
0007562E 1801                       		move.b	d1,d4
00075630 103C 00B0                  		move.b	#$B0,d0
00075634 4EBA FAB8                  		jsr	sub_72722(pc)
00075638 45FA 0000                  		lea	byte_72D18(pc),a2
0007563C 7613                       		moveq	#$13,d3
0007563E                            
0007563E                            loc_72C72:
0007563E 101A                       		move.b	(a2)+,d0
00075640 1219                       		move.b	(a1)+,d1
00075642 4EBA FAAA                  		jsr	sub_72722(pc)
00075646 51CB FFF6                  		dbf	d3,loc_72C72
0007564A 7A03                       		moveq	#3,d5
0007564C 0244 0007                  		andi.w	#7,d4
00075650 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00075654 162D 0009                  		move.b	9(a5),d3
00075658                            
00075658                            loc_72C8C:
00075658 101A                       		move.b	(a2)+,d0
0007565A 1219                       		move.b	(a1)+,d1
0007565C E20C                       		lsr.b	#1,d4
0007565E 6400                       		bcc.s	loc_72C96
00075660 D203                       		add.b	d3,d1
00075662                            
00075662                            loc_72C96:
00075662 4EBA FA8A                  		jsr	sub_72722(pc)
00075666 51CD FFF0                  		dbf	d5,loc_72C8C
0007566A 103C 00B4                  		move.b	#$B4,d0
0007566E 122D 000A                  		move.b	$A(a5),d1
00075672 4EBA FA7A                  		jsr	sub_72722(pc)
00075676                            
00075676                            locret_72CAA:
00075676 4E75                       		rts	
00075678                            ; End of function sub_72C4E
00075678                            
00075678                            ; ===========================================================================
00075678 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00075680                            
00075680                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075680                            
00075680                            
00075680                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00075680 0815 0002                  		btst	#2,(a5)
00075684 6600                       		bne.s	locret_72D16
00075686 7000                       		moveq	#0,d0
00075688 102D 000B                  		move.b	$B(a5),d0
0007568C 226E 0018                  		movea.l	$18(a6),a1
00075690 4A2E 000E                  		tst.b	$E(a6)
00075694 6700                       		beq.s	loc_72CD8
00075696 226E 0020                  		movea.l	$20(a6),a1
0007569A 4A2E 000E                  		tst.b	$E(a6)
0007569E 6B00                       		bmi.s	loc_72CD8
000756A0 226E 0020                  		movea.l	$20(a6),a1
000756A4                            
000756A4                            loc_72CD8:
000756A4 5340                       		subq.w	#1,d0
000756A6 6B00                       		bmi.s	loc_72CE6
000756A8 323C 0019                  		move.w	#$19,d1
000756AC                            
000756AC                            loc_72CE0:
000756AC D2C1                       		adda.w	d1,a1
000756AE 51C8 FFFC                  		dbf	d0,loc_72CE0
000756B2                            
000756B2                            loc_72CE6:
000756B2 D2FC 0015                  		adda.w	#$15,a1
000756B6 45FA 0000                  		lea	byte_72D2C(pc),a2
000756BA 102D 001F                  		move.b	$1F(a5),d0
000756BE 0240 0007                  		andi.w	#7,d0
000756C2 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
000756C6 162D 0009                  		move.b	9(a5),d3
000756CA 6B00                       		bmi.s	locret_72D16
000756CC 7A03                       		moveq	#3,d5
000756CE                            
000756CE                            loc_72D02:
000756CE 101A                       		move.b	(a2)+,d0
000756D0 1219                       		move.b	(a1)+,d1
000756D2 E20C                       		lsr.b	#1,d4
000756D4 6400                       		bcc.s	loc_72D12
000756D6 D203                       		add.b	d3,d1
000756D8 6500                       		bcs.s	loc_72D12
000756DA 4EBA FA12                  		jsr	sub_72722(pc)
000756DE                            
000756DE                            loc_72D12:
000756DE 51CD FFEE                  		dbf	d5,loc_72D02
000756E2                            
000756E2                            locret_72D16:
000756E2 4E75                       		rts	
000756E4                            ; End of function sub_72CB4
000756E4                            
000756E4                            ; ===========================================================================
000756E4 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
000756EE 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
000756F8 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
000756FC                            ; ===========================================================================
000756FC                            
000756FC                            loc_72D30:				; XREF: loc_72A64
000756FC 08D5 0003                  		bset	#3,(a5)
00075700 2B4C 0014                  		move.l	a4,$14(a5)
00075704 1B5C 0018                  		move.b	(a4)+,$18(a5)
00075708 1B5C 0019                  		move.b	(a4)+,$19(a5)
0007570C 1B5C 001A                  		move.b	(a4)+,$1A(a5)
00075710 101C                       		move.b	(a4)+,d0
00075712 E208                       		lsr.b	#1,d0
00075714 1B40 001B                  		move.b	d0,$1B(a5)
00075718 426D 001C                  		clr.w	$1C(a5)
0007571C 4E75                       		rts	
0007571E                            ; ===========================================================================
0007571E                            
0007571E                            loc_72D52:				; XREF: loc_72A64
0007571E 08D5 0003                  		bset	#3,(a5)
00075722 4E75                       		rts	
00075724                            ; ===========================================================================
00075724                            
00075724                            loc_72D58:				; XREF: loc_72A64
00075724 0895 0007                  		bclr	#7,(a5)
00075728 0895 0004                  		bclr	#4,(a5)
0007572C 4A2D 0001                  		tst.b	1(a5)
00075730 6B00                       		bmi.s	loc_72D74
00075732 4A2E 0008                  		tst.b	8(a6)
00075736 6B00 0000                  		bmi.w	loc_72E02
0007573A 4EBA F98E                  		jsr	sub_726FE(pc)
0007573E 6000                       		bra.s	loc_72D78
00075740                            ; ===========================================================================
00075740                            
00075740                            loc_72D74:
00075740 4EBA FC2A                  		jsr	sub_729A0(pc)
00075744                            
00075744                            loc_72D78:
00075744 4A2E 000E                  		tst.b	$E(a6)
00075748 6A00 0000                  		bpl.w	loc_72E02
0007574C 4216                       		clr.b	0(a6)
0007574E 7000                       		moveq	#0,d0
00075750 102D 0001                  		move.b	1(a5),d0
00075754 6B00                       		bmi.s	loc_72DCC
00075756 41FA F546                  		lea	dword_722CC(pc),a0
0007575A 264D                       		movea.l	a5,a3
0007575C 0C00 0004                  		cmpi.b	#4,d0
00075760 6600                       		bne.s	loc_72DA8
00075762 4A2E 0340                  		tst.b	$340(a6)
00075766 6A00                       		bpl.s	loc_72DA8
00075768 4BEE 0340                  		lea	$340(a6),a5
0007576C 226E 0020                  		movea.l	$20(a6),a1
00075770 6000                       		bra.s	loc_72DB8
00075772                            ; ===========================================================================
00075772                            
00075772                            loc_72DA8:
00075772 5500                       		subq.b	#2,d0
00075774 E508                       		lsl.b	#2,d0
00075776 2A70 0000                  		movea.l	(a0,d0.w),a5
0007577A 4A15                       		tst.b	(a5)
0007577C 6A00                       		bpl.s	loc_72DC8
0007577E 226E 0018                  		movea.l	$18(a6),a1
00075782                            
00075782                            loc_72DB8:
00075782 0895 0002                  		bclr	#2,(a5)
00075786 08D5 0001                  		bset	#1,(a5)
0007578A 102D 000B                  		move.b	$B(a5),d0
0007578E 4EBA FE8A                  		jsr	sub_72C4E(pc)
00075792                            
00075792                            loc_72DC8:
00075792 2A4B                       		movea.l	a3,a5
00075794 6000                       		bra.s	loc_72E02
00075796                            ; ===========================================================================
00075796                            
00075796                            loc_72DCC:
00075796 41EE 0370                  		lea	$370(a6),a0
0007579A 4A10                       		tst.b	(a0)
0007579C 6A00                       		bpl.s	loc_72DE0
0007579E 0C00 00E0                  		cmpi.b	#$E0,d0
000757A2 6700                       		beq.s	loc_72DEA
000757A4 0C00 00C0                  		cmpi.b	#$C0,d0
000757A8 6700                       		beq.s	loc_72DEA
000757AA                            
000757AA                            loc_72DE0:
000757AA 41FA F4F2                  		lea	dword_722CC(pc),a0
000757AE E608                       		lsr.b	#3,d0
000757B0 2070 0000                  		movea.l	(a0,d0.w),a0
000757B4                            
000757B4                            loc_72DEA:
000757B4 0890 0002                  		bclr	#2,(a0)
000757B8 08D0 0001                  		bset	#1,(a0)
000757BC 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000757C2 6600                       		bne.s	loc_72E02
000757C4 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000757CC                            
000757CC                            loc_72E02:
000757CC 504F                       		addq.w	#8,sp
000757CE 4E75                       		rts	
000757D0                            ; ===========================================================================
000757D0                            
000757D0                            loc_72E06:				; XREF: loc_72A64
000757D0 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000757D6 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000757DA 0815 0002                  		btst	#2,(a5)
000757DE 6600                       		bne.s	locret_72E1E
000757E0 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
000757E8                            
000757E8                            locret_72E1E:
000757E8 4E75                       		rts	
000757EA                            ; ===========================================================================
000757EA                            
000757EA                            loc_72E20:				; XREF: loc_72A64
000757EA 0895 0003                  		bclr	#3,(a5)
000757EE 4E75                       		rts	
000757F0                            ; ===========================================================================
000757F0                            
000757F0                            loc_72E26:				; XREF: loc_72A64
000757F0 1B5C 000B                  		move.b	(a4)+,$B(a5)
000757F4 4E75                       		rts	
000757F6                            ; ===========================================================================
000757F6                            
000757F6                            loc_72E2C:				; XREF: loc_72A64
000757F6 101C                       		move.b	(a4)+,d0
000757F8 E148                       		lsl.w	#8,d0
000757FA 101C                       		move.b	(a4)+,d0
000757FC D8C0                       		adda.w	d0,a4
000757FE 534C                       		subq.w	#1,a4
00075800 4E75                       		rts	
00075802                            ; ===========================================================================
00075802                            
00075802                            loc_72E38:				; XREF: loc_72A64
00075802 7000                       		moveq	#0,d0
00075804 101C                       		move.b	(a4)+,d0
00075806 121C                       		move.b	(a4)+,d1
00075808 4A35 0024                  		tst.b	$24(a5,d0.w)
0007580C 6600                       		bne.s	loc_72E48
0007580E 1B81 0024                  		move.b	d1,$24(a5,d0.w)
00075812                            
00075812                            loc_72E48:
00075812 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00075816 66DE                       		bne.s	loc_72E2C
00075818 544C                       		addq.w	#2,a4
0007581A 4E75                       		rts	
0007581C                            ; ===========================================================================
0007581C                            
0007581C                            loc_72E52:				; XREF: loc_72A64
0007581C 7000                       		moveq	#0,d0
0007581E 102D 000D                  		move.b	$D(a5),d0
00075822 5900                       		subq.b	#4,d0
00075824 2B8C 0000                  		move.l	a4,(a5,d0.w)
00075828 1B40 000D                  		move.b	d0,$D(a5)
0007582C 60C8                       		bra.s	loc_72E2C
0007582E                            ; ===========================================================================
0007582E                            
0007582E                            loc_72E64:				; XREF: loc_72A64
0007582E 103C 0088                  		move.b	#$88,d0
00075832 123C 000F                  		move.b	#$F,d1
00075836 4EBA F8C2                  		jsr	sub_7272E(pc)
0007583A 103C 008C                  		move.b	#$8C,d0
0007583E 123C 000F                  		move.b	#$F,d1
00075842 6000 F8B6                  		bra.w	sub_7272E
00075846                            ; ===========================================================================
00075846                            Kos_Z80:	incbin	sound\z80_1.bin
000758F6 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
000758F8 21                         		dc.b $21
000758F9 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
000758FB                            		incbin	sound\z80_2.bin
00076FA6                            		even
00076FA6                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
0007D7A6                            		even
0007D7A6                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
00087044                            		even
00087044                            Music83:	incbin	sound\music83.bin ; Marble Act 1
000875D2                            		even
000875D2                            Music84:	include	sound\music84.asm ; Star Light Act 1
000875D2                            music84_Header:
000875D2 =00000001                  smpsHeaderStartSong = 1
000875D2 0000                       	smpsHeaderVoice     music84_Voices
000875D4 0603                       	smpsHeaderChan      $06, $03
000875D6 0205                       	smpsHeaderTempo     $02, $05
000875D8                            
000875DC 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
000875E0 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
000875E4 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
000875E8 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
000875EC 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
000875F0 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
000875F6 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
000875FC 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
00087602                            
00087602                            ; FM1 Data
00087602                            music84_FM1:
00087602 E0C0                       	smpsPan             panCenter, $00
00087606 E107                       	smpsAlterNote       $07
00087608 9B03 8007                  	dc.b	nD2, $03, nRst, $07
0008760C E106                       	smpsAlterNote       $06
0008760E 9903 800B                  	dc.b	nC2, $03, nRst, $0B
00087612 E10B                       	smpsAlterNote       $0B
00087614 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
0008761A E10C                       	smpsAlterNote       $0C
0008761C E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008761F E10B                       	smpsAlterNote       $0B
00087621 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00087624 E109                       	smpsAlterNote       $09
00087626 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
0008762B E108                       	smpsAlterNote       $08
0008762D 8001                       	dc.b	nRst, $01
0008762F E10B                       	smpsAlterNote       $0B
00087631 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00087637 E107                       	smpsAlterNote       $07
00087639 9B03                       	dc.b	nD2, $03
0008763B                            
0008763B                            music84_Jump04:
0008763B E107                       	smpsAlterNote       $07
0008763D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00087641 E10B                       	smpsAlterNote       $0B
00087643 A202 8001                  	dc.b	nA2, $02, nRst, $01
00087647 E107                       	smpsAlterNote       $07
00087649 9B03                       	dc.b	nD2, $03
0008764B E11A                       	smpsAlterNote       $1A
0008764D A301                       	dc.b	nBb2, $01
0008764F E1F2                       	smpsAlterNote       $F2
00087651 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087654 E1FF                       	smpsAlterNote       $FF
00087656 E701                       	dc.b	smpsNoAttack, $01
00087658 E111                       	smpsAlterNote       $11
0008765A E701                       	dc.b	smpsNoAttack, $01
0008765C E106                       	smpsAlterNote       $06
0008765E E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00087661 E107                       	smpsAlterNote       $07
00087663 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00087667 E108                       	smpsAlterNote       $08
00087669 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
00087671 E109                       	smpsAlterNote       $09
00087673 A003                       	dc.b	nG2, $03
00087675 E10C                       	smpsAlterNote       $0C
00087677 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008767B E1FD                       	smpsAlterNote       $FD
0008767D A401                       	dc.b	nB2, $01
0008767F E109                       	smpsAlterNote       $09
00087681 E701                       	dc.b	smpsNoAttack, $01
00087683 E106                       	smpsAlterNote       $06
00087685 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00087688 E109                       	smpsAlterNote       $09
0008768A A007                       	dc.b	nG2, $07
0008768C E108                       	smpsAlterNote       $08
0008768E 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00087692 E107                       	smpsAlterNote       $07
00087694 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008769A E10B                       	smpsAlterNote       $0B
0008769C A203 8001                  	dc.b	nA2, $03, nRst, $01
000876A0 E107                       	smpsAlterNote       $07
000876A2 9B03                       	dc.b	nD2, $03
000876A4 E11A                       	smpsAlterNote       $1A
000876A6 A301                       	dc.b	nBb2, $01
000876A8 E1F9                       	smpsAlterNote       $F9
000876AA E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000876AD E107                       	smpsAlterNote       $07
000876AF E701                       	dc.b	smpsNoAttack, $01
000876B1 E111                       	smpsAlterNote       $11
000876B3 E701                       	dc.b	smpsNoAttack, $01
000876B5 E106                       	smpsAlterNote       $06
000876B7 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000876BC E107                       	smpsAlterNote       $07
000876BE 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000876C6 E1EC                       	smpsAlterNote       $EC
000876C8 A101                       	dc.b	nAb2, $01
000876CA E108                       	smpsAlterNote       $08
000876CC E701                       	dc.b	smpsNoAttack, $01
000876CE E116                       	smpsAlterNote       $16
000876D0 E701                       	dc.b	smpsNoAttack, $01
000876D2 E1F5                       	smpsAlterNote       $F5
000876D4 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000876D7 E10B                       	smpsAlterNote       $0B
000876D9 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000876DD E107                       	smpsAlterNote       $07
000876DF 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000876E5 E109                       	smpsAlterNote       $09
000876E7 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000876EB E10B                       	smpsAlterNote       $0B
000876ED 9603                       	dc.b	nA1, $03
000876EF E107                       	smpsAlterNote       $07
000876F1 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000876F7 E10B                       	smpsAlterNote       $0B
000876F9 A203 8001                  	dc.b	nA2, $03, nRst, $01
000876FD E107                       	smpsAlterNote       $07
000876FF 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00087703 E11A                       	smpsAlterNote       $1A
00087705 A301                       	dc.b	nBb2, $01
00087707 E1F9                       	smpsAlterNote       $F9
00087709 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008770C E107                       	smpsAlterNote       $07
0008770E E701                       	dc.b	smpsNoAttack, $01
00087710 E1FB                       	smpsAlterNote       $FB
00087712 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00087715 E106                       	smpsAlterNote       $06
00087717 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008771B E107                       	smpsAlterNote       $07
0008771D 9B03                       	dc.b	nD2, $03
0008771F E108                       	smpsAlterNote       $08
00087721 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00087727 E109                       	smpsAlterNote       $09
00087729 A002 8001                  	dc.b	nG2, $02, nRst, $01
0008772D E10C                       	smpsAlterNote       $0C
0008772F A303                       	dc.b	nBb2, $03
00087731 E1F0                       	smpsAlterNote       $F0
00087733 A401                       	dc.b	nB2, $01
00087735 E1FD                       	smpsAlterNote       $FD
00087737 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
0008773C E106                       	smpsAlterNote       $06
0008773E 8001                       	dc.b	nRst, $01
00087740 E109                       	smpsAlterNote       $09
00087742 A006 8001                  	dc.b	nG2, $06, nRst, $01
00087746 E108                       	smpsAlterNote       $08
00087748 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
0008774C E107                       	smpsAlterNote       $07
0008774E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00087754 E10B                       	smpsAlterNote       $0B
00087756 A203                       	dc.b	nA2, $03
00087758 E107                       	smpsAlterNote       $07
0008775A 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008775E E1F2                       	smpsAlterNote       $F2
00087760 A401                       	dc.b	nB2, $01
00087762 E1FF                       	smpsAlterNote       $FF
00087764 E701                       	dc.b	smpsNoAttack, $01
00087766 E107                       	smpsAlterNote       $07
00087768 E701                       	dc.b	smpsNoAttack, $01
0008776A E1FB                       	smpsAlterNote       $FB
0008776C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008776F E106                       	smpsAlterNote       $06
00087771 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00087775 E107                       	smpsAlterNote       $07
00087777 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
00087781 E117                       	smpsAlterNote       $17
00087783 A001                       	dc.b	nG2, $01
00087785 E1FA                       	smpsAlterNote       $FA
00087787 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008778A E108                       	smpsAlterNote       $08
0008778C E701                       	dc.b	smpsNoAttack, $01
0008778E E1E7                       	smpsAlterNote       $E7
00087790 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00087793 E103                       	smpsAlterNote       $03
00087795 E701                       	dc.b	smpsNoAttack, $01
00087797 E10B                       	smpsAlterNote       $0B
00087799 E702                       	dc.b	smpsNoAttack, $02
0008779B E107                       	smpsAlterNote       $07
0008779D 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
000877A5 E106                       	smpsAlterNote       $06
000877A7 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
000877AD E10C                       	smpsAlterNote       $0C
000877AF 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
000877B5 E109                       	smpsAlterNote       $09
000877B7 9E03                       	dc.b	nF2, $03
000877B9 E10C                       	smpsAlterNote       $0C
000877BB 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000877BF E1EA                       	smpsAlterNote       $EA
000877C1 A201                       	dc.b	nA2, $01
000877C3 E106                       	smpsAlterNote       $06
000877C5 E701                       	dc.b	smpsNoAttack, $01
000877C7 E1E2                       	smpsAlterNote       $E2
000877C9 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000877CC E1F0                       	smpsAlterNote       $F0
000877CE E701                       	dc.b	smpsNoAttack, $01
000877D0 E10C                       	smpsAlterNote       $0C
000877D2 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000877DE E116                       	smpsAlterNote       $16
000877E0 9C01                       	dc.b	nEb2, $01
000877E2 E105                       	smpsAlterNote       $05
000877E4 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000877E7 E1F1                       	smpsAlterNote       $F1
000877E9 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000877EC E1FF                       	smpsAlterNote       $FF
000877EE E701                       	dc.b	smpsNoAttack, $01
000877F0 E109                       	smpsAlterNote       $09
000877F2 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000877F6 E10C                       	smpsAlterNote       $0C
000877F8 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00087804 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
0008780A E109                       	smpsAlterNote       $09
0008780C 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00087810 E10C                       	smpsAlterNote       $0C
00087812 9703                       	dc.b	nBb1, $03
00087814 E11A                       	smpsAlterNote       $1A
00087816 A101                       	dc.b	nAb2, $01
00087818 E1FB                       	smpsAlterNote       $FB
0008781A E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008781D E10A                       	smpsAlterNote       $0A
0008781F E701                       	dc.b	smpsNoAttack, $01
00087821 E1E8                       	smpsAlterNote       $E8
00087823 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00087826 E106                       	smpsAlterNote       $06
00087828 E701                       	dc.b	smpsNoAttack, $01
0008782A E10C                       	smpsAlterNote       $0C
0008782C E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
00087838 E1F9                       	smpsAlterNote       $F9
0008783A 9D01                       	dc.b	nE2, $01
0008783C E108                       	smpsAlterNote       $08
0008783E E701                       	dc.b	smpsNoAttack, $01
00087840 E1F6                       	smpsAlterNote       $F6
00087842 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00087845 E109                       	smpsAlterNote       $09
00087847 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
0008784B E10C                       	smpsAlterNote       $0C
0008784D 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
00087859 E108                       	smpsAlterNote       $08
0008785B 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00087861 E106                       	smpsAlterNote       $06
00087863 A403 8001                  	dc.b	nB2, $03, nRst, $01
00087867 E108                       	smpsAlterNote       $08
00087869 9D03                       	dc.b	nE2, $03
0008786B E1EB                       	smpsAlterNote       $EB
0008786D A801                       	dc.b	nEb3, $01
0008786F E109                       	smpsAlterNote       $09
00087871 E701                       	dc.b	smpsNoAttack, $01
00087873 E1FA                       	smpsAlterNote       $FA
00087875 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00087878 E108                       	smpsAlterNote       $08
0008787A E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
00087886 E1E9                       	smpsAlterNote       $E9
00087888 A301                       	dc.b	nBb2, $01
0008788A E107                       	smpsAlterNote       $07
0008788C E701                       	dc.b	smpsNoAttack, $01
0008788E E1F0                       	smpsAlterNote       $F0
00087890 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087893 E1F7                       	smpsAlterNote       $F7
00087895 E701                       	dc.b	smpsNoAttack, $01
00087897 E107                       	smpsAlterNote       $07
00087899 E701                       	dc.b	smpsNoAttack, $01
0008789B E106                       	smpsAlterNote       $06
0008789D E701                       	dc.b	smpsNoAttack, $01
0008789F E108                       	smpsAlterNote       $08
000878A1 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000878A7 E106                       	smpsAlterNote       $06
000878A9 A403 8001                  	dc.b	nB2, $03, nRst, $01
000878AD E108                       	smpsAlterNote       $08
000878AF 9D03                       	dc.b	nE2, $03
000878B1 E10B                       	smpsAlterNote       $0B
000878B3 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
000878BB E108                       	smpsAlterNote       $08
000878BD 9D03                       	dc.b	nE2, $03
000878BF E10B                       	smpsAlterNote       $0B
000878C1 9603 8001                  	dc.b	nA1, $03, nRst, $01
000878C5 E113                       	smpsAlterNote       $13
000878C7 A001                       	dc.b	nG2, $01
000878C9 E118                       	smpsAlterNote       $18
000878CB E701                       	dc.b	smpsNoAttack, $01
000878CD E1E9                       	smpsAlterNote       $E9
000878CF E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000878D2 E1F3                       	smpsAlterNote       $F3
000878D4 E701                       	dc.b	smpsNoAttack, $01
000878D6 E1FD                       	smpsAlterNote       $FD
000878D8 E701                       	dc.b	smpsNoAttack, $01
000878DA E102                       	smpsAlterNote       $02
000878DC E701                       	dc.b	smpsNoAttack, $01
000878DE E107                       	smpsAlterNote       $07
000878E0 8001                       	dc.b	nRst, $01
000878E2 E10B                       	smpsAlterNote       $0B
000878E4 9603                       	dc.b	nA1, $03
000878E6 E10C                       	smpsAlterNote       $0C
000878E8 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
000878EE E10B                       	smpsAlterNote       $0B
000878F0 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000878FC 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
00087902 E107                       	smpsAlterNote       $07
00087904 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008790A E10B                       	smpsAlterNote       $0B
0008790C A203                       	dc.b	nA2, $03
0008790E E107                       	smpsAlterNote       $07
00087910 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00087914 E1F2                       	smpsAlterNote       $F2
00087916 A401                       	dc.b	nB2, $01
00087918 E1FF                       	smpsAlterNote       $FF
0008791A E701                       	dc.b	smpsNoAttack, $01
0008791C E107                       	smpsAlterNote       $07
0008791E E701                       	dc.b	smpsNoAttack, $01
00087920 E1FB                       	smpsAlterNote       $FB
00087922 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00087925 E106                       	smpsAlterNote       $06
00087927 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008792B E107                       	smpsAlterNote       $07
0008792D 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00087931 E108                       	smpsAlterNote       $08
00087933 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00087939 E109                       	smpsAlterNote       $09
0008793B A003 8001                  	dc.b	nG2, $03, nRst, $01
0008793F E10C                       	smpsAlterNote       $0C
00087941 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00087945 E1F0                       	smpsAlterNote       $F0
00087947 A401                       	dc.b	nB2, $01
00087949 E109                       	smpsAlterNote       $09
0008794B E701                       	dc.b	smpsNoAttack, $01
0008794D E106                       	smpsAlterNote       $06
0008794F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00087952 E109                       	smpsAlterNote       $09
00087954 A007                       	dc.b	nG2, $07
00087956 E108                       	smpsAlterNote       $08
00087958 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008795C E107                       	smpsAlterNote       $07
0008795E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00087964 E10B                       	smpsAlterNote       $0B
00087966 A202 8001                  	dc.b	nA2, $02, nRst, $01
0008796A E107                       	smpsAlterNote       $07
0008796C 9B03                       	dc.b	nD2, $03
0008796E E11A                       	smpsAlterNote       $1A
00087970 A301                       	dc.b	nBb2, $01
00087972 E1F2                       	smpsAlterNote       $F2
00087974 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087977 E1FF                       	smpsAlterNote       $FF
00087979 E701                       	dc.b	smpsNoAttack, $01
0008797B E111                       	smpsAlterNote       $11
0008797D E701                       	dc.b	smpsNoAttack, $01
0008797F E106                       	smpsAlterNote       $06
00087981 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00087984 E107                       	smpsAlterNote       $07
00087986 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00087992 E117                       	smpsAlterNote       $17
00087994 A001                       	dc.b	nG2, $01
00087996 E1FA                       	smpsAlterNote       $FA
00087998 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008799B E116                       	smpsAlterNote       $16
0008799D E701                       	dc.b	smpsNoAttack, $01
0008799F E1F5                       	smpsAlterNote       $F5
000879A1 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000879A4 E103                       	smpsAlterNote       $03
000879A6 E701                       	dc.b	smpsNoAttack, $01
000879A8 E10B                       	smpsAlterNote       $0B
000879AA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000879AE E107                       	smpsAlterNote       $07
000879B0 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000879B6 E109                       	smpsAlterNote       $09
000879B8 9E03                       	dc.b	nF2, $03
000879BA E10B                       	smpsAlterNote       $0B
000879BC 9603 8001                  	dc.b	nA1, $03, nRst, $01
000879C0 E107                       	smpsAlterNote       $07
000879C2 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000879C8 E10B                       	smpsAlterNote       $0B
000879CA A203 8001                  	dc.b	nA2, $03, nRst, $01
000879CE E107                       	smpsAlterNote       $07
000879D0 9B03                       	dc.b	nD2, $03
000879D2 E11A                       	smpsAlterNote       $1A
000879D4 A301                       	dc.b	nBb2, $01
000879D6 E1F9                       	smpsAlterNote       $F9
000879D8 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000879DB E107                       	smpsAlterNote       $07
000879DD E701                       	dc.b	smpsNoAttack, $01
000879DF E111                       	smpsAlterNote       $11
000879E1 E701                       	dc.b	smpsNoAttack, $01
000879E3 E106                       	smpsAlterNote       $06
000879E5 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000879EA E107                       	smpsAlterNote       $07
000879EC 9B03                       	dc.b	nD2, $03
000879EE E108                       	smpsAlterNote       $08
000879F0 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000879F6 E109                       	smpsAlterNote       $09
000879F8 A003                       	dc.b	nG2, $03
000879FA E10C                       	smpsAlterNote       $0C
000879FC A303 8001                  	dc.b	nBb2, $03, nRst, $01
00087A00 E1FD                       	smpsAlterNote       $FD
00087A02 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
00087A07 E106                       	smpsAlterNote       $06
00087A09 8001                       	dc.b	nRst, $01
00087A0B E109                       	smpsAlterNote       $09
00087A0D A006 8001                  	dc.b	nG2, $06, nRst, $01
00087A11 E108                       	smpsAlterNote       $08
00087A13 9C03                       	dc.b	nEb2, $03
00087A15 E107                       	smpsAlterNote       $07
00087A17 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00087A1D E10B                       	smpsAlterNote       $0B
00087A1F A203 8001                  	dc.b	nA2, $03, nRst, $01
00087A23 E107                       	smpsAlterNote       $07
00087A25 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00087A29 E11A                       	smpsAlterNote       $1A
00087A2B A301                       	dc.b	nBb2, $01
00087A2D E1F9                       	smpsAlterNote       $F9
00087A2F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087A32 E107                       	smpsAlterNote       $07
00087A34 E701                       	dc.b	smpsNoAttack, $01
00087A36 E1FB                       	smpsAlterNote       $FB
00087A38 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00087A3B E106                       	smpsAlterNote       $06
00087A3D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00087A41 E107                       	smpsAlterNote       $07
00087A43 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00087A4B E1EC                       	smpsAlterNote       $EC
00087A4D A101                       	dc.b	nAb2, $01
00087A4F E108                       	smpsAlterNote       $08
00087A51 E701                       	dc.b	smpsNoAttack, $01
00087A53 E1E7                       	smpsAlterNote       $E7
00087A55 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00087A58 E1F5                       	smpsAlterNote       $F5
00087A5A E701                       	dc.b	smpsNoAttack, $01
00087A5C E10B                       	smpsAlterNote       $0B
00087A5E E702                       	dc.b	smpsNoAttack, $02
00087A60 E107                       	smpsAlterNote       $07
00087A62 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00087A68 E106                       	smpsAlterNote       $06
00087A6A 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00087A70 E10C                       	smpsAlterNote       $0C
00087A72 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00087A7A E109                       	smpsAlterNote       $09
00087A7C 9E03                       	dc.b	nF2, $03
00087A7E E10C                       	smpsAlterNote       $0C
00087A80 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00087A84 E1EA                       	smpsAlterNote       $EA
00087A86 A201                       	dc.b	nA2, $01
00087A88 E106                       	smpsAlterNote       $06
00087A8A E701                       	dc.b	smpsNoAttack, $01
00087A8C E114                       	smpsAlterNote       $14
00087A8E E701                       	dc.b	smpsNoAttack, $01
00087A90 E1F0                       	smpsAlterNote       $F0
00087A92 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00087A95 E10C                       	smpsAlterNote       $0C
00087A97 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00087AA3 9703                       	dc.b	nBb1, $03
00087AA5 E116                       	smpsAlterNote       $16
00087AA7 9C01                       	dc.b	nEb2, $01
00087AA9 E105                       	smpsAlterNote       $05
00087AAB E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00087AAE E113                       	smpsAlterNote       $13
00087AB0 E701                       	dc.b	smpsNoAttack, $01
00087AB2 E1FF                       	smpsAlterNote       $FF
00087AB4 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00087AB7 E109                       	smpsAlterNote       $09
00087AB9 E703                       	dc.b	smpsNoAttack, $03
00087ABB E10C                       	smpsAlterNote       $0C
00087ABD 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00087AC9 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00087AD1 E109                       	smpsAlterNote       $09
00087AD3 9E03                       	dc.b	nF2, $03
00087AD5 E10C                       	smpsAlterNote       $0C
00087AD7 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00087ADB E1EC                       	smpsAlterNote       $EC
00087ADD A201                       	dc.b	nA2, $01
00087ADF E10A                       	smpsAlterNote       $0A
00087AE1 E701                       	dc.b	smpsNoAttack, $01
00087AE3 E1E8                       	smpsAlterNote       $E8
00087AE5 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00087AE8 E1F7                       	smpsAlterNote       $F7
00087AEA E701                       	dc.b	smpsNoAttack, $01
00087AEC E10C                       	smpsAlterNote       $0C
00087AEE E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00087AFA E1EA                       	smpsAlterNote       $EA
00087AFC 9D01                       	dc.b	nE2, $01
00087AFE E108                       	smpsAlterNote       $08
00087B00 E701                       	dc.b	smpsNoAttack, $01
00087B02 E1F6                       	smpsAlterNote       $F6
00087B04 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00087B07 E105                       	smpsAlterNote       $05
00087B09 E701                       	dc.b	smpsNoAttack, $01
00087B0B E109                       	smpsAlterNote       $09
00087B0D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00087B11 E10C                       	smpsAlterNote       $0C
00087B13 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00087B1F E108                       	smpsAlterNote       $08
00087B21 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00087B27 E106                       	smpsAlterNote       $06
00087B29 A403 8001                  	dc.b	nB2, $03, nRst, $01
00087B2D E108                       	smpsAlterNote       $08
00087B2F 9D03                       	dc.b	nE2, $03
00087B31 E1EB                       	smpsAlterNote       $EB
00087B33 A801                       	dc.b	nEb3, $01
00087B35 E109                       	smpsAlterNote       $09
00087B37 E701                       	dc.b	smpsNoAttack, $01
00087B39 E1EB                       	smpsAlterNote       $EB
00087B3B E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00087B3E E108                       	smpsAlterNote       $08
00087B40 E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
00087B4C E1E9                       	smpsAlterNote       $E9
00087B4E A301                       	dc.b	nBb2, $01
00087B50 E1F8                       	smpsAlterNote       $F8
00087B52 E701                       	dc.b	smpsNoAttack, $01
00087B54 E116                       	smpsAlterNote       $16
00087B56 E701                       	dc.b	smpsNoAttack, $01
00087B58 E1F7                       	smpsAlterNote       $F7
00087B5A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087B5D E107                       	smpsAlterNote       $07
00087B5F E701                       	dc.b	smpsNoAttack, $01
00087B61 E1EE                       	smpsAlterNote       $EE
00087B63 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00087B66 E106                       	smpsAlterNote       $06
00087B68 8001                       	dc.b	nRst, $01
00087B6A E108                       	smpsAlterNote       $08
00087B6C 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00087B72 E106                       	smpsAlterNote       $06
00087B74 A402 8001                  	dc.b	nB2, $02, nRst, $01
00087B78 E108                       	smpsAlterNote       $08
00087B7A 9D03                       	dc.b	nE2, $03
00087B7C E10B                       	smpsAlterNote       $0B
00087B7E 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
00087B84 E108                       	smpsAlterNote       $08
00087B86 9D03 8001                  	dc.b	nE2, $03, nRst, $01
00087B8A E10B                       	smpsAlterNote       $0B
00087B8C 9603                       	dc.b	nA1, $03
00087B8E E10E                       	smpsAlterNote       $0E
00087B90 A001                       	dc.b	nG2, $01
00087B92 E118                       	smpsAlterNote       $18
00087B94 E701                       	dc.b	smpsNoAttack, $01
00087B96 E1E9                       	smpsAlterNote       $E9
00087B98 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00087B9B E1EE                       	smpsAlterNote       $EE
00087B9D E701                       	dc.b	smpsNoAttack, $01
00087B9F E1F8                       	smpsAlterNote       $F8
00087BA1 E701                       	dc.b	smpsNoAttack, $01
00087BA3 E102                       	smpsAlterNote       $02
00087BA5 E701                       	dc.b	smpsNoAttack, $01
00087BA7 E107                       	smpsAlterNote       $07
00087BA9 8001                       	dc.b	nRst, $01
00087BAB E10B                       	smpsAlterNote       $0B
00087BAD 9603                       	dc.b	nA1, $03
00087BAF E10C                       	smpsAlterNote       $0C
00087BB1 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00087BB7 E10B                       	smpsAlterNote       $0B
00087BB9 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00087BC5 8001 9603                  	dc.b	nRst, $01, nA1, $03
00087BC9 E10C                       	smpsAlterNote       $0C
00087BCB 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00087BD7 8001                       	dc.b	nRst, $01
00087BD9 E10B                       	smpsAlterNote       $0B
00087BDB 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00087BE3 E107                       	smpsAlterNote       $07
00087BE5 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00087BE9 E10B                       	smpsAlterNote       $0B
00087BEB 9603                       	dc.b	nA1, $03
00087BED E109                       	smpsAlterNote       $09
00087BEF 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00087BF3 E108                       	smpsAlterNote       $08
00087BF5 9D06                       	dc.b	nE2, $06
00087BF7 E107                       	smpsAlterNote       $07
00087BF9 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00087BFD E106                       	smpsAlterNote       $06
00087BFF 9903                       	dc.b	nC2, $03
00087C01 E10C                       	smpsAlterNote       $0C
00087C03 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00087C07 E10B                       	smpsAlterNote       $0B
00087C09 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00087C15 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00087C1F E10C                       	smpsAlterNote       $0C
00087C21 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
00087C2D 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00087C39 8001                       	dc.b	nRst, $01
00087C3B E10B                       	smpsAlterNote       $0B
00087C3D 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00087C49 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00087C55 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00087C61 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00087C6B E10C                       	smpsAlterNote       $0C
00087C6D 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00087C79 E10B                       	smpsAlterNote       $0B
00087C7B 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00087C83 E107                       	smpsAlterNote       $07
00087C85 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00087C89 E10B                       	smpsAlterNote       $0B
00087C8B 9603                       	dc.b	nA1, $03
00087C8D E109                       	smpsAlterNote       $09
00087C8F 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00087C93 E108                       	smpsAlterNote       $08
00087C95 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00087C99 E107                       	smpsAlterNote       $07
00087C9B 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00087C9F E106                       	smpsAlterNote       $06
00087CA1 9903                       	dc.b	nC2, $03
00087CA3 E10C                       	smpsAlterNote       $0C
00087CA5 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00087CA9 E10B                       	smpsAlterNote       $0B
00087CAB 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00087CB7 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00087CC1 E10C                       	smpsAlterNote       $0C
00087CC3 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
00087CCF 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00087CDB 8001                       	dc.b	nRst, $01
00087CDD E10B                       	smpsAlterNote       $0B
00087CDF 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00087CEB 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00087CF5 E10C                       	smpsAlterNote       $0C
00087CF7 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00087D03 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
00087D0F E10B                       	smpsAlterNote       $0B
00087D11 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00087D1D 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00087D27 E10C                       	smpsAlterNote       $0C
00087D29 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00087D35 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
00087D41 E10B                       	smpsAlterNote       $0B
00087D43 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
00087D4F 8001                       	dc.b	nRst, $01
00087D51 E1EC                       	smpsAlterNote       $EC
00087D53 A101                       	dc.b	nAb2, $01
00087D55 E1FA                       	smpsAlterNote       $FA
00087D57 E701                       	dc.b	smpsNoAttack, $01
00087D59 E116                       	smpsAlterNote       $16
00087D5B E701                       	dc.b	smpsNoAttack, $01
00087D5D E1F5                       	smpsAlterNote       $F5
00087D5F E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00087D62 E10B                       	smpsAlterNote       $0B
00087D64 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
00087D70 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
00087D7C E107                       	smpsAlterNote       $07
00087D7E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00087D84 E10B                       	smpsAlterNote       $0B
00087D86 A203                       	dc.b	nA2, $03
00087D88 E107                       	smpsAlterNote       $07
00087D8A 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00087D8E E1F3                       	smpsAlterNote       $F3
00087D90 A401                       	dc.b	nB2, $01
00087D92 E102                       	smpsAlterNote       $02
00087D94 E701                       	dc.b	smpsNoAttack, $01
00087D96 E109                       	smpsAlterNote       $09
00087D98 E701                       	dc.b	smpsNoAttack, $01
00087D9A E102                       	smpsAlterNote       $02
00087D9C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00087D9F E106                       	smpsAlterNote       $06
00087DA1 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00087DA5 E107                       	smpsAlterNote       $07
00087DA7 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00087DAB E108                       	smpsAlterNote       $08
00087DAD 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00087DB3 E109                       	smpsAlterNote       $09
00087DB5 A003 8001                  	dc.b	nG2, $03, nRst, $01
00087DB9 E1F2                       	smpsAlterNote       $F2
00087DBB A401                       	dc.b	nB2, $01
00087DBD E1FF                       	smpsAlterNote       $FF
00087DBF E701                       	dc.b	smpsNoAttack, $01
00087DC1 E111                       	smpsAlterNote       $11
00087DC3 E701                       	dc.b	smpsNoAttack, $01
00087DC5 E1FB                       	smpsAlterNote       $FB
00087DC7 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00087DCA E106                       	smpsAlterNote       $06
00087DCC E702                       	dc.b	smpsNoAttack, $02
00087DCE E109                       	smpsAlterNote       $09
00087DD0 A007                       	dc.b	nG2, $07
00087DD2 E108                       	smpsAlterNote       $08
00087DD4 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00087DD8 E107                       	smpsAlterNote       $07
00087DDA 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00087DE0 E10B                       	smpsAlterNote       $0B
00087DE2 A202 8001                  	dc.b	nA2, $02, nRst, $01
00087DE6 E107                       	smpsAlterNote       $07
00087DE8 9B03                       	dc.b	nD2, $03
00087DEA E11A                       	smpsAlterNote       $1A
00087DEC A301                       	dc.b	nBb2, $01
00087DEE E1F2                       	smpsAlterNote       $F2
00087DF0 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087DF3 E1FF                       	smpsAlterNote       $FF
00087DF5 E701                       	dc.b	smpsNoAttack, $01
00087DF7 E111                       	smpsAlterNote       $11
00087DF9 E701                       	dc.b	smpsNoAttack, $01
00087DFB E106                       	smpsAlterNote       $06
00087DFD E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00087E00 E107                       	smpsAlterNote       $07
00087E02 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00087E0E E117                       	smpsAlterNote       $17
00087E10 A001                       	dc.b	nG2, $01
00087E12 E1FA                       	smpsAlterNote       $FA
00087E14 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00087E17 E116                       	smpsAlterNote       $16
00087E19 E701                       	dc.b	smpsNoAttack, $01
00087E1B E1F5                       	smpsAlterNote       $F5
00087E1D E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00087E20 E103                       	smpsAlterNote       $03
00087E22 E701                       	dc.b	smpsNoAttack, $01
00087E24 E10B                       	smpsAlterNote       $0B
00087E26 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087E2A E107                       	smpsAlterNote       $07
00087E2C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00087E32 E109                       	smpsAlterNote       $09
00087E34 9E03                       	dc.b	nF2, $03
00087E36 E10B                       	smpsAlterNote       $0B
00087E38 9603 8001                  	dc.b	nA1, $03, nRst, $01
00087E3C E107                       	smpsAlterNote       $07
00087E3E 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00087E44 E10B                       	smpsAlterNote       $0B
00087E46 A203 8001                  	dc.b	nA2, $03, nRst, $01
00087E4A E107                       	smpsAlterNote       $07
00087E4C 9B03                       	dc.b	nD2, $03
00087E4E E11A                       	smpsAlterNote       $1A
00087E50 A301                       	dc.b	nBb2, $01
00087E52 E1F9                       	smpsAlterNote       $F9
00087E54 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087E57 E1FF                       	smpsAlterNote       $FF
00087E59 E701                       	dc.b	smpsNoAttack, $01
00087E5B E111                       	smpsAlterNote       $11
00087E5D E701                       	dc.b	smpsNoAttack, $01
00087E5F E106                       	smpsAlterNote       $06
00087E61 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00087E64 E107                       	smpsAlterNote       $07
00087E66 9B03                       	dc.b	nD2, $03
00087E68 E108                       	smpsAlterNote       $08
00087E6A 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00087E70 E109                       	smpsAlterNote       $09
00087E72 A003                       	dc.b	nG2, $03
00087E74 E1F0                       	smpsAlterNote       $F0
00087E76 A501                       	dc.b	nC3, $01
00087E78 E106                       	smpsAlterNote       $06
00087E7A E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00087E7E E109                       	smpsAlterNote       $09
00087E80 A006 8001                  	dc.b	nG2, $06, nRst, $01
00087E84 E108                       	smpsAlterNote       $08
00087E86 9C03                       	dc.b	nEb2, $03
00087E88 E107                       	smpsAlterNote       $07
00087E8A 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00087E90 E10B                       	smpsAlterNote       $0B
00087E92 A203 8001                  	dc.b	nA2, $03, nRst, $01
00087E96 E107                       	smpsAlterNote       $07
00087E98 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00087E9C E11A                       	smpsAlterNote       $1A
00087E9E A301                       	dc.b	nBb2, $01
00087EA0 E1F9                       	smpsAlterNote       $F9
00087EA2 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087EA5 E107                       	smpsAlterNote       $07
00087EA7 E701                       	dc.b	smpsNoAttack, $01
00087EA9 E1FB                       	smpsAlterNote       $FB
00087EAB E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00087EAE E106                       	smpsAlterNote       $06
00087EB0 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00087EB4 E107                       	smpsAlterNote       $07
00087EB6 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00087EBE E1EC                       	smpsAlterNote       $EC
00087EC0 A101                       	dc.b	nAb2, $01
00087EC2 E108                       	smpsAlterNote       $08
00087EC4 E701                       	dc.b	smpsNoAttack, $01
00087EC6 E1E7                       	smpsAlterNote       $E7
00087EC8 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00087ECB E1F5                       	smpsAlterNote       $F5
00087ECD E701                       	dc.b	smpsNoAttack, $01
00087ECF E10B                       	smpsAlterNote       $0B
00087ED1 E702                       	dc.b	smpsNoAttack, $02
00087ED3 E107                       	smpsAlterNote       $07
00087ED5 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00087EDB E106                       	smpsAlterNote       $06
00087EDD 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00087EE3 E10C                       	smpsAlterNote       $0C
00087EE5 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00087EED E109                       	smpsAlterNote       $09
00087EEF 9E03                       	dc.b	nF2, $03
00087EF1 E10C                       	smpsAlterNote       $0C
00087EF3 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00087EF7 E1EA                       	smpsAlterNote       $EA
00087EF9 A201                       	dc.b	nA2, $01
00087EFB E106                       	smpsAlterNote       $06
00087EFD E701                       	dc.b	smpsNoAttack, $01
00087EFF E114                       	smpsAlterNote       $14
00087F01 E701                       	dc.b	smpsNoAttack, $01
00087F03 E1F0                       	smpsAlterNote       $F0
00087F05 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00087F08 E10C                       	smpsAlterNote       $0C
00087F0A E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00087F16 9703                       	dc.b	nBb1, $03
00087F18 E116                       	smpsAlterNote       $16
00087F1A 9C01                       	dc.b	nEb2, $01
00087F1C E105                       	smpsAlterNote       $05
00087F1E E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00087F21 E113                       	smpsAlterNote       $13
00087F23 E701                       	dc.b	smpsNoAttack, $01
00087F25 E1FF                       	smpsAlterNote       $FF
00087F27 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00087F2A E109                       	smpsAlterNote       $09
00087F2C E703                       	dc.b	smpsNoAttack, $03
00087F2E E10C                       	smpsAlterNote       $0C
00087F30 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00087F3C 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00087F44 E109                       	smpsAlterNote       $09
00087F46 9E03                       	dc.b	nF2, $03
00087F48 E10C                       	smpsAlterNote       $0C
00087F4A 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00087F4E E1EA                       	smpsAlterNote       $EA
00087F50 A201                       	dc.b	nA2, $01
00087F52 E106                       	smpsAlterNote       $06
00087F54 E701                       	dc.b	smpsNoAttack, $01
00087F56 E1E2                       	smpsAlterNote       $E2
00087F58 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00087F5B E1F0                       	smpsAlterNote       $F0
00087F5D E701                       	dc.b	smpsNoAttack, $01
00087F5F E10C                       	smpsAlterNote       $0C
00087F61 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00087F6D E116                       	smpsAlterNote       $16
00087F6F 9C01                       	dc.b	nEb2, $01
00087F71 E105                       	smpsAlterNote       $05
00087F73 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00087F76 E1F1                       	smpsAlterNote       $F1
00087F78 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00087F7B E1FF                       	smpsAlterNote       $FF
00087F7D E701                       	dc.b	smpsNoAttack, $01
00087F7F E109                       	smpsAlterNote       $09
00087F81 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00087F85 E10C                       	smpsAlterNote       $0C
00087F87 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00087F93 E106                       	smpsAlterNote       $06
00087F95 9903                       	dc.b	nC2, $03
00087F97 E107                       	smpsAlterNote       $07
00087F99 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00087F9D E109                       	smpsAlterNote       $09
00087F9F 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00087FA5 E107                       	smpsAlterNote       $07
00087FA7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00087FAB E108                       	smpsAlterNote       $08
00087FAD 9D03                       	dc.b	nE2, $03
00087FAF E10B                       	smpsAlterNote       $0B
00087FB1 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00087FB7 E109                       	smpsAlterNote       $09
00087FB9 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
00087FBF E10C                       	smpsAlterNote       $0C
00087FC1 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00087FC7 E106                       	smpsAlterNote       $06
00087FC9 9903                       	dc.b	nC2, $03
00087FCB E11A                       	smpsAlterNote       $1A
00087FCD A301                       	dc.b	nBb2, $01
00087FCF E1F9                       	smpsAlterNote       $F9
00087FD1 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087FD4 E1FF                       	smpsAlterNote       $FF
00087FD6 E701                       	dc.b	smpsNoAttack, $01
00087FD8 E111                       	smpsAlterNote       $11
00087FDA E701                       	dc.b	smpsNoAttack, $01
00087FDC E106                       	smpsAlterNote       $06
00087FDE E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00087FE5 E109                       	smpsAlterNote       $09
00087FE7 A003                       	dc.b	nG2, $03
00087FE9 E106                       	smpsAlterNote       $06
00087FEB 9907                       	dc.b	nC2, $07
00087FED E107                       	smpsAlterNote       $07
00087FEF 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00087FF7 E10B                       	smpsAlterNote       $0B
00087FF9 A203                       	dc.b	nA2, $03
00087FFB E107                       	smpsAlterNote       $07
00087FFD 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088001 E1F2                       	smpsAlterNote       $F2
00088003 A401                       	dc.b	nB2, $01
00088005 E1F9                       	smpsAlterNote       $F9
00088007 E701                       	dc.b	smpsNoAttack, $01
00088009 E107                       	smpsAlterNote       $07
0008800B E701                       	dc.b	smpsNoAttack, $01
0008800D E1FB                       	smpsAlterNote       $FB
0008800F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088012 E106                       	smpsAlterNote       $06
00088014 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088018 E107                       	smpsAlterNote       $07
0008801A 9B03                       	dc.b	nD2, $03
0008801C E108                       	smpsAlterNote       $08
0008801E 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00088024 E109                       	smpsAlterNote       $09
00088026 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008802A E1F2                       	smpsAlterNote       $F2
0008802C A401                       	dc.b	nB2, $01
0008802E E1F9                       	smpsAlterNote       $F9
00088030 E701                       	dc.b	smpsNoAttack, $01
00088032 E107                       	smpsAlterNote       $07
00088034 E701                       	dc.b	smpsNoAttack, $01
00088036 E1FB                       	smpsAlterNote       $FB
00088038 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008803B E106                       	smpsAlterNote       $06
0008803D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088041 E108                       	smpsAlterNote       $08
00088043 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00088047 E10C                       	smpsAlterNote       $0C
00088049 A302 8001                  	dc.b	nBb2, $02, nRst, $01
0008804D E107                       	smpsAlterNote       $07
0008804F 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088055 E10B                       	smpsAlterNote       $0B
00088057 A203                       	dc.b	nA2, $03
00088059 E107                       	smpsAlterNote       $07
0008805B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008805F E1F2                       	smpsAlterNote       $F2
00088061 A401                       	dc.b	nB2, $01
00088063 E1FF                       	smpsAlterNote       $FF
00088065 E701                       	dc.b	smpsNoAttack, $01
00088067 E107                       	smpsAlterNote       $07
00088069 E701                       	dc.b	smpsNoAttack, $01
0008806B E1FB                       	smpsAlterNote       $FB
0008806D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088070 E106                       	smpsAlterNote       $06
00088072 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088076 E107                       	smpsAlterNote       $07
00088078 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008807C E108                       	smpsAlterNote       $08
0008807E 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00088084 E109                       	smpsAlterNote       $09
00088086 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008808A E1F2                       	smpsAlterNote       $F2
0008808C A401                       	dc.b	nB2, $01
0008808E E1FF                       	smpsAlterNote       $FF
00088090 E701                       	dc.b	smpsNoAttack, $01
00088092 E111                       	smpsAlterNote       $11
00088094 E701                       	dc.b	smpsNoAttack, $01
00088096 E1FB                       	smpsAlterNote       $FB
00088098 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008809B E106                       	smpsAlterNote       $06
0008809D E702                       	dc.b	smpsNoAttack, $02
0008809F E108                       	smpsAlterNote       $08
000880A1 9C07                       	dc.b	nEb2, $07
000880A3 E10C                       	smpsAlterNote       $0C
000880A5 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000880A9 E107                       	smpsAlterNote       $07
000880AB 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000880B1 E10B                       	smpsAlterNote       $0B
000880B3 A202 8001                  	dc.b	nA2, $02, nRst, $01
000880B7 E107                       	smpsAlterNote       $07
000880B9 9B03                       	dc.b	nD2, $03
000880BB E11A                       	smpsAlterNote       $1A
000880BD A301                       	dc.b	nBb2, $01
000880BF E1F2                       	smpsAlterNote       $F2
000880C1 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000880C4 E1FF                       	smpsAlterNote       $FF
000880C6 E701                       	dc.b	smpsNoAttack, $01
000880C8 E111                       	smpsAlterNote       $11
000880CA E701                       	dc.b	smpsNoAttack, $01
000880CC E106                       	smpsAlterNote       $06
000880CE E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000880D1 E107                       	smpsAlterNote       $07
000880D3 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000880D7 E108                       	smpsAlterNote       $08
000880D9 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
000880E1 E109                       	smpsAlterNote       $09
000880E3 A003                       	dc.b	nG2, $03
000880E5 E11A                       	smpsAlterNote       $1A
000880E7 A301                       	dc.b	nBb2, $01
000880E9 E1F2                       	smpsAlterNote       $F2
000880EB E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000880EE E1FF                       	smpsAlterNote       $FF
000880F0 E701                       	dc.b	smpsNoAttack, $01
000880F2 E111                       	smpsAlterNote       $11
000880F4 E701                       	dc.b	smpsNoAttack, $01
000880F6 E106                       	smpsAlterNote       $06
000880F8 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000880FB E108                       	smpsAlterNote       $08
000880FD 9C07                       	dc.b	nEb2, $07
000880FF E10C                       	smpsAlterNote       $0C
00088101 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00088105 E107                       	smpsAlterNote       $07
00088107 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
00088113 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
0008811D E108                       	smpsAlterNote       $08
0008811F 9C06                       	dc.b	nEb2, $06
00088121 E10C                       	smpsAlterNote       $0C
00088123 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088127 E108                       	smpsAlterNote       $08
00088129 9C03                       	dc.b	nEb2, $03
0008812B E109                       	smpsAlterNote       $09
0008812D A003 8001                  	dc.b	nG2, $03, nRst, $01
00088131 E10C                       	smpsAlterNote       $0C
00088133 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
0008813B E107                       	smpsAlterNote       $07
0008813D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088141 F6F4 F8                    	smpsJump            music84_Jump04
00088144                            
00088144                            ; FM2 Data
00088144                            music84_FM2:
00088144 E0C0                       	smpsPan             panCenter, $00
00088148 E10B                       	smpsAlterNote       $0B
0008814A C603 8007                  	dc.b	nA5, $03, nRst, $07
0008814E E109                       	smpsAlterNote       $09
00088150 C403 800B                  	dc.b	nG5, $03, nRst, $0B
00088154 E108                       	smpsAlterNote       $08
00088156 C103 8004                  	dc.b	nE5, $03, nRst, $04
0008815C E080                       	smpsPan             panLeft, $00
0008815E E10C                       	smpsAlterNote       $0C
00088160 E6F9                       	smpsAlterVol        $F9
00088162 C703                       	dc.b	nBb5, $03
00088164 E10B                       	smpsAlterNote       $0B
00088166 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008816A E109                       	smpsAlterNote       $09
0008816C C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00088172 E108                       	smpsAlterNote       $08
00088174 C103 8001                  	dc.b	nE5, $03, nRst, $01
00088178 E106                       	smpsAlterNote       $06
0008817A BD03                       	dc.b	nC5, $03
0008817C E10B                       	smpsAlterNote       $0B
0008817E BA03 8001                  	dc.b	nA4, $03, nRst, $01
00088184 E0C0                       	smpsPan             panCenter, $00
00088186 E107                       	smpsAlterNote       $07
00088188 E606                       	smpsAlterVol        $06
0008818A BF03                       	dc.b	nD5, $03
0008818C                            
0008818C                            music84_Jump03:
0008818C E108                       	smpsAlterNote       $08
0008818E C103 8001                  	dc.b	nE5, $03, nRst, $01
00088192 E109                       	smpsAlterNote       $09
00088194 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
0008819A E10B                       	smpsAlterNote       $0B
0008819C C607                       	dc.b	nA5, $07
0008819E E107                       	smpsAlterNote       $07
000881A0 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000881A4 E106                       	smpsAlterNote       $06
000881A6 C90D                       	dc.b	nC6, $0D
000881A8 E100                       	smpsAlterNote       $00
000881AA E701                       	dc.b	smpsNoAttack, $01
000881AC E1FF                       	smpsAlterNote       $FF
000881AE E701                       	dc.b	smpsNoAttack, $01
000881B0 E103                       	smpsAlterNote       $03
000881B2 E701                       	dc.b	smpsNoAttack, $01
000881B4 E109                       	smpsAlterNote       $09
000881B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000881BA E106                       	smpsAlterNote       $06
000881BC E701                       	dc.b	smpsNoAttack, $01
000881BE E100                       	smpsAlterNote       $00
000881C0 E701                       	dc.b	smpsNoAttack, $01
000881C2 E10C                       	smpsAlterNote       $0C
000881C4 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000881C8 E10B                       	smpsAlterNote       $0B
000881CA C603                       	dc.b	nA5, $03
000881CC E109                       	smpsAlterNote       $09
000881CE C403 8001                  	dc.b	nG5, $03, nRst, $01
000881D2 E10B                       	smpsAlterNote       $0B
000881D4 C60D                       	dc.b	nA5, $0D
000881D6 E105                       	smpsAlterNote       $05
000881D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000881DC E10B                       	smpsAlterNote       $0B
000881DE E701                       	dc.b	smpsNoAttack, $01
000881E0 E10E                       	smpsAlterNote       $0E
000881E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000881E6 E108                       	smpsAlterNote       $08
000881E8 E701                       	dc.b	smpsNoAttack, $01
000881EA E104                       	smpsAlterNote       $04
000881EC E701                       	dc.b	smpsNoAttack, $01
000881EE E105                       	smpsAlterNote       $05
000881F0 E701                       	dc.b	smpsNoAttack, $01
000881F2 E10B                       	smpsAlterNote       $0B
000881F4 E701                       	dc.b	smpsNoAttack, $01
000881F6 E10F                       	smpsAlterNote       $0F
000881F8 E701                       	dc.b	smpsNoAttack, $01
000881FA E10B                       	smpsAlterNote       $0B
000881FC E701                       	dc.b	smpsNoAttack, $01
000881FE E108                       	smpsAlterNote       $08
00088200 E701                       	dc.b	smpsNoAttack, $01
00088202 E104                       	smpsAlterNote       $04
00088204 E701                       	dc.b	smpsNoAttack, $01
00088206 E108                       	smpsAlterNote       $08
00088208 E701                       	dc.b	smpsNoAttack, $01
0008820A E10E                       	smpsAlterNote       $0E
0008820C E701                       	dc.b	smpsNoAttack, $01
0008820E E10F                       	smpsAlterNote       $0F
00088210 E701                       	dc.b	smpsNoAttack, $01
00088212 E10B                       	smpsAlterNote       $0B
00088214 E701                       	dc.b	smpsNoAttack, $01
00088216 E105                       	smpsAlterNote       $05
00088218 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008821C E108                       	smpsAlterNote       $08
0008821E E701                       	dc.b	smpsNoAttack, $01
00088220 E10E                       	smpsAlterNote       $0E
00088222 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088226 E108                       	smpsAlterNote       $08
00088228 E701                       	dc.b	smpsNoAttack, $01
0008822A E105                       	smpsAlterNote       $05
0008822C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088230 E10B                       	smpsAlterNote       $0B
00088232 E701                       	dc.b	smpsNoAttack, $01
00088234 E10F                       	smpsAlterNote       $0F
00088236 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008823A E107                       	smpsAlterNote       $07
0008823C BF03 8001                  	dc.b	nD5, $03, nRst, $01
00088240 E108                       	smpsAlterNote       $08
00088242 C103                       	dc.b	nE5, $03
00088244 E109                       	smpsAlterNote       $09
00088246 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008824E E10B                       	smpsAlterNote       $0B
00088250 C606 8001                  	dc.b	nA5, $06, nRst, $01
00088254 E107                       	smpsAlterNote       $07
00088256 BF03                       	dc.b	nD5, $03
00088258 E106                       	smpsAlterNote       $06
0008825A C90D 8001                  	dc.b	nC6, $0D, nRst, $01
0008825E E107                       	smpsAlterNote       $07
00088260 CB03                       	dc.b	nD6, $03
00088262 E10C                       	smpsAlterNote       $0C
00088264 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00088268 E10B                       	smpsAlterNote       $0B
0008826A C604 8001                  	dc.b	nA5, $04, nRst, $01
0008826E E109                       	smpsAlterNote       $09
00088270 C404                       	dc.b	nG5, $04
00088272 E10B                       	smpsAlterNote       $0B
00088274 C60D                       	dc.b	nA5, $0D
00088276 E108                       	smpsAlterNote       $08
00088278 E701                       	dc.b	smpsNoAttack, $01
0008827A E104                       	smpsAlterNote       $04
0008827C E701                       	dc.b	smpsNoAttack, $01
0008827E E108                       	smpsAlterNote       $08
00088280 E701                       	dc.b	smpsNoAttack, $01
00088282 E10B                       	smpsAlterNote       $0B
00088284 E701                       	dc.b	smpsNoAttack, $01
00088286 E10F                       	smpsAlterNote       $0F
00088288 E701                       	dc.b	smpsNoAttack, $01
0008828A E10B                       	smpsAlterNote       $0B
0008828C E701                       	dc.b	smpsNoAttack, $01
0008828E E105                       	smpsAlterNote       $05
00088290 E701                       	dc.b	smpsNoAttack, $01
00088292 E104                       	smpsAlterNote       $04
00088294 E701                       	dc.b	smpsNoAttack, $01
00088296 E108                       	smpsAlterNote       $08
00088298 E701                       	dc.b	smpsNoAttack, $01
0008829A E10E                       	smpsAlterNote       $0E
0008829C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000882A0 E10B                       	smpsAlterNote       $0B
000882A2 E701                       	dc.b	smpsNoAttack, $01
000882A4 E105                       	smpsAlterNote       $05
000882A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000882AA E10B                       	smpsAlterNote       $0B
000882AC E701                       	dc.b	smpsNoAttack, $01
000882AE E10E                       	smpsAlterNote       $0E
000882B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000882B4 E108                       	smpsAlterNote       $08
000882B6 E701                       	dc.b	smpsNoAttack, $01
000882B8 E104                       	smpsAlterNote       $04
000882BA E701                       	dc.b	smpsNoAttack, $01
000882BC E105                       	smpsAlterNote       $05
000882BE E701                       	dc.b	smpsNoAttack, $01
000882C0 E10B                       	smpsAlterNote       $0B
000882C2 E701                       	dc.b	smpsNoAttack, $01
000882C4 E10F                       	smpsAlterNote       $0F
000882C6 E701                       	dc.b	smpsNoAttack, $01
000882C8 E10B                       	smpsAlterNote       $0B
000882CA E701                       	dc.b	smpsNoAttack, $01
000882CC E108                       	smpsAlterNote       $08
000882CE E701                       	dc.b	smpsNoAttack, $01
000882D0 E105                       	smpsAlterNote       $05
000882D2 8001                       	dc.b	nRst, $01
000882D4 E109                       	smpsAlterNote       $09
000882D6 C401                       	dc.b	nG5, $01
000882D8 E10B                       	smpsAlterNote       $0B
000882DA E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
000882E3 E109                       	smpsAlterNote       $09
000882E5 C404 8001                  	dc.b	nG5, $04, nRst, $01
000882E9 E10B                       	smpsAlterNote       $0B
000882EB C604 8001                  	dc.b	nA5, $04, nRst, $01
000882EF E107                       	smpsAlterNote       $07
000882F1 BF0D                       	dc.b	nD5, $0D
000882F3 E101                       	smpsAlterNote       $01
000882F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000882F9 E104                       	smpsAlterNote       $04
000882FB E701                       	dc.b	smpsNoAttack, $01
000882FD E10A                       	smpsAlterNote       $0A
000882FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088303 E104                       	smpsAlterNote       $04
00088305 E701                       	dc.b	smpsNoAttack, $01
00088307 E101                       	smpsAlterNote       $01
00088309 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008830D E107                       	smpsAlterNote       $07
0008830F E701                       	dc.b	smpsNoAttack, $01
00088311 E10B                       	smpsAlterNote       $0B
00088313 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088317 E108                       	smpsAlterNote       $08
00088319 C101                       	dc.b	nE5, $01
0008831B E109                       	smpsAlterNote       $09
0008831D E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00088322 E10B                       	smpsAlterNote       $0B
00088324 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008832C E108                       	smpsAlterNote       $08
0008832E CD06                       	dc.b	nE6, $06
00088330 E109                       	smpsAlterNote       $09
00088332 CE07                       	dc.b	nF6, $07
00088334 E108                       	smpsAlterNote       $08
00088336 CD03 8001                  	dc.b	nE6, $03, nRst, $01
0008833A E106                       	smpsAlterNote       $06
0008833C C903                       	dc.b	nC6, $03
0008833E E109                       	smpsAlterNote       $09
00088340 C403 8001                  	dc.b	nG5, $03, nRst, $01
00088344 E10C                       	smpsAlterNote       $0C
00088346 C70D                       	dc.b	nBb5, $0D
00088348 E106                       	smpsAlterNote       $06
0008834A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008834E E109                       	smpsAlterNote       $09
00088350 E701                       	dc.b	smpsNoAttack, $01
00088352 E10F                       	smpsAlterNote       $0F
00088354 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088358 E109                       	smpsAlterNote       $09
0008835A E701                       	dc.b	smpsNoAttack, $01
0008835C E106                       	smpsAlterNote       $06
0008835E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088362 E10C                       	smpsAlterNote       $0C
00088364 E701                       	dc.b	smpsNoAttack, $01
00088366 E110                       	smpsAlterNote       $10
00088368 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008836C E10B                       	smpsAlterNote       $0B
0008836E C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
00088372 E105                       	smpsAlterNote       $05
00088374 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088378 E10B                       	smpsAlterNote       $0B
0008837A E701                       	dc.b	smpsNoAttack, $01
0008837C E10E                       	smpsAlterNote       $0E
0008837E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088382 E108                       	smpsAlterNote       $08
00088384 E701                       	dc.b	smpsNoAttack, $01
00088386 E104                       	smpsAlterNote       $04
00088388 E701                       	dc.b	smpsNoAttack, $01
0008838A E105                       	smpsAlterNote       $05
0008838C E701                       	dc.b	smpsNoAttack, $01
0008838E E10B                       	smpsAlterNote       $0B
00088390 E701                       	dc.b	smpsNoAttack, $01
00088392 E10F                       	smpsAlterNote       $0F
00088394 E701                       	dc.b	smpsNoAttack, $01
00088396 E10B                       	smpsAlterNote       $0B
00088398 E701                       	dc.b	smpsNoAttack, $01
0008839A E108                       	smpsAlterNote       $08
0008839C E701                       	dc.b	smpsNoAttack, $01
0008839E E104                       	smpsAlterNote       $04
000883A0 E701                       	dc.b	smpsNoAttack, $01
000883A2 E108                       	smpsAlterNote       $08
000883A4 E701                       	dc.b	smpsNoAttack, $01
000883A6 E10E                       	smpsAlterNote       $0E
000883A8 E701                       	dc.b	smpsNoAttack, $01
000883AA E10F                       	smpsAlterNote       $0F
000883AC E701                       	dc.b	smpsNoAttack, $01
000883AE E10B                       	smpsAlterNote       $0B
000883B0 E701                       	dc.b	smpsNoAttack, $01
000883B2 E105                       	smpsAlterNote       $05
000883B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000883B8 E108                       	smpsAlterNote       $08
000883BA E701                       	dc.b	smpsNoAttack, $01
000883BC E10E                       	smpsAlterNote       $0E
000883BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000883C2 E108                       	smpsAlterNote       $08
000883C4 E701                       	dc.b	smpsNoAttack, $01
000883C6 E105                       	smpsAlterNote       $05
000883C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000883CC E10B                       	smpsAlterNote       $0B
000883CE E701                       	dc.b	smpsNoAttack, $01
000883D0 E10F                       	smpsAlterNote       $0F
000883D2 E701                       	dc.b	smpsNoAttack, $01
000883D4 E10E                       	smpsAlterNote       $0E
000883D6 E701                       	dc.b	smpsNoAttack, $01
000883D8 E108                       	smpsAlterNote       $08
000883DA E701                       	dc.b	smpsNoAttack, $01
000883DC E104                       	smpsAlterNote       $04
000883DE E701                       	dc.b	smpsNoAttack, $01
000883E0 E108                       	smpsAlterNote       $08
000883E2 E701                       	dc.b	smpsNoAttack, $01
000883E4 E10E                       	smpsAlterNote       $0E
000883E6 E701                       	dc.b	smpsNoAttack, $01
000883E8 E10F                       	smpsAlterNote       $0F
000883EA E701                       	dc.b	smpsNoAttack, $01
000883EC E10B                       	smpsAlterNote       $0B
000883EE E701                       	dc.b	smpsNoAttack, $01
000883F0 E105                       	smpsAlterNote       $05
000883F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000883F6 E108                       	smpsAlterNote       $08
000883F8 E701                       	dc.b	smpsNoAttack, $01
000883FA E10E                       	smpsAlterNote       $0E
000883FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088400 E108                       	smpsAlterNote       $08
00088402 E701                       	dc.b	smpsNoAttack, $01
00088404 E105                       	smpsAlterNote       $05
00088406 E701                       	dc.b	smpsNoAttack, $01
00088408 E10B                       	smpsAlterNote       $0B
0008840A C60D                       	dc.b	nA5, $0D
0008840C E108                       	smpsAlterNote       $08
0008840E E701                       	dc.b	smpsNoAttack, $01
00088410 E104                       	smpsAlterNote       $04
00088412 E701                       	dc.b	smpsNoAttack, $01
00088414 E105                       	smpsAlterNote       $05
00088416 E701                       	dc.b	smpsNoAttack, $01
00088418 E10B                       	smpsAlterNote       $0B
0008841A E701                       	dc.b	smpsNoAttack, $01
0008841C E10F                       	smpsAlterNote       $0F
0008841E E701                       	dc.b	smpsNoAttack, $01
00088420 E10B                       	smpsAlterNote       $0B
00088422 E701                       	dc.b	smpsNoAttack, $01
00088424 E108                       	smpsAlterNote       $08
00088426 E701                       	dc.b	smpsNoAttack, $01
00088428 E104                       	smpsAlterNote       $04
0008842A E701                       	dc.b	smpsNoAttack, $01
0008842C E108                       	smpsAlterNote       $08
0008842E E701                       	dc.b	smpsNoAttack, $01
00088430 E10E                       	smpsAlterNote       $0E
00088432 E701                       	dc.b	smpsNoAttack, $01
00088434 E10F                       	smpsAlterNote       $0F
00088436 E701                       	dc.b	smpsNoAttack, $01
0008843A E109                       	smpsAlterNote       $09
0008843C E6FF                       	smpsAlterVol        $FF
0008843E C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00088448 E108                       	smpsAlterNote       $08
0008844A C103 800E                  	dc.b	nE5, $03, nRst, $0E
00088450 E107                       	smpsAlterNote       $07
00088452 E601                       	smpsAlterVol        $01
00088454 BF03                       	dc.b	nD5, $03
00088456 E108                       	smpsAlterNote       $08
00088458 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008845C E109                       	smpsAlterNote       $09
0008845E C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00088464 E10B                       	smpsAlterNote       $0B
00088466 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008846A E107                       	smpsAlterNote       $07
0008846C BF02 8001                  	dc.b	nD5, $02, nRst, $01
00088470 E106                       	smpsAlterNote       $06
00088472 C90D                       	dc.b	nC6, $0D
00088474 E103                       	smpsAlterNote       $03
00088476 E701                       	dc.b	smpsNoAttack, $01
00088478 E1FF                       	smpsAlterNote       $FF
0008847A E701                       	dc.b	smpsNoAttack, $01
0008847C E103                       	smpsAlterNote       $03
0008847E E701                       	dc.b	smpsNoAttack, $01
00088480 E109                       	smpsAlterNote       $09
00088482 E701                       	dc.b	smpsNoAttack, $01
00088484 E10A                       	smpsAlterNote       $0A
00088486 E701                       	dc.b	smpsNoAttack, $01
00088488 E106                       	smpsAlterNote       $06
0008848A E701                       	dc.b	smpsNoAttack, $01
0008848C E100                       	smpsAlterNote       $00
0008848E E701                       	dc.b	smpsNoAttack, $01
00088490 E10C                       	smpsAlterNote       $0C
00088492 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00088496 E10B                       	smpsAlterNote       $0B
00088498 C603                       	dc.b	nA5, $03
0008849A E109                       	smpsAlterNote       $09
0008849C C403 8001                  	dc.b	nG5, $03, nRst, $01
000884A0 E10B                       	smpsAlterNote       $0B
000884A2 C60D                       	dc.b	nA5, $0D
000884A4 E105                       	smpsAlterNote       $05
000884A6 E701                       	dc.b	smpsNoAttack, $01
000884A8 E104                       	smpsAlterNote       $04
000884AA E701                       	dc.b	smpsNoAttack, $01
000884AC E108                       	smpsAlterNote       $08
000884AE E701                       	dc.b	smpsNoAttack, $01
000884B0 E10E                       	smpsAlterNote       $0E
000884B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000884B6 E10B                       	smpsAlterNote       $0B
000884B8 E701                       	dc.b	smpsNoAttack, $01
000884BA E105                       	smpsAlterNote       $05
000884BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000884C0 E10B                       	smpsAlterNote       $0B
000884C2 E701                       	dc.b	smpsNoAttack, $01
000884C4 E10E                       	smpsAlterNote       $0E
000884C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000884CA E108                       	smpsAlterNote       $08
000884CC E701                       	dc.b	smpsNoAttack, $01
000884CE E104                       	smpsAlterNote       $04
000884D0 E701                       	dc.b	smpsNoAttack, $01
000884D2 E105                       	smpsAlterNote       $05
000884D4 E701                       	dc.b	smpsNoAttack, $01
000884D6 E10B                       	smpsAlterNote       $0B
000884D8 E701                       	dc.b	smpsNoAttack, $01
000884DA E10F                       	smpsAlterNote       $0F
000884DC E701                       	dc.b	smpsNoAttack, $01
000884DE E10B                       	smpsAlterNote       $0B
000884E0 E701                       	dc.b	smpsNoAttack, $01
000884E2 E108                       	smpsAlterNote       $08
000884E4 E701                       	dc.b	smpsNoAttack, $01
000884E6 E104                       	smpsAlterNote       $04
000884E8 E701                       	dc.b	smpsNoAttack, $01
000884EA E108                       	smpsAlterNote       $08
000884EC E701                       	dc.b	smpsNoAttack, $01
000884EE E10E                       	smpsAlterNote       $0E
000884F0 E701                       	dc.b	smpsNoAttack, $01
000884F2 E10F                       	smpsAlterNote       $0F
000884F4 E701                       	dc.b	smpsNoAttack, $01
000884F6 E10B                       	smpsAlterNote       $0B
000884F8 E701                       	dc.b	smpsNoAttack, $01
000884FA E105                       	smpsAlterNote       $05
000884FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088500 E108                       	smpsAlterNote       $08
00088502 E701                       	dc.b	smpsNoAttack, $01
00088504 E10E                       	smpsAlterNote       $0E
00088506 E701                       	dc.b	smpsNoAttack, $01
00088508 E10F                       	smpsAlterNote       $0F
0008850A 800F                       	dc.b	nRst, $0F
0008850C E107                       	smpsAlterNote       $07
0008850E BF02 8001                  	dc.b	nD5, $02, nRst, $01
00088512 E108                       	smpsAlterNote       $08
00088514 C103                       	dc.b	nE5, $03
00088516 E109                       	smpsAlterNote       $09
00088518 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0008851E E10B                       	smpsAlterNote       $0B
00088520 C606 8001                  	dc.b	nA5, $06, nRst, $01
00088524 E107                       	smpsAlterNote       $07
00088526 BF03                       	dc.b	nD5, $03
00088528 E106                       	smpsAlterNote       $06
0008852A C90E                       	dc.b	nC6, $0E
0008852C E107                       	smpsAlterNote       $07
0008852E CB03 8001                  	dc.b	nD6, $03, nRst, $01
00088532 E10C                       	smpsAlterNote       $0C
00088534 C704                       	dc.b	nBb5, $04
00088536 E10B                       	smpsAlterNote       $0B
00088538 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008853C E109                       	smpsAlterNote       $09
0008853E C404                       	dc.b	nG5, $04
00088540 E10B                       	smpsAlterNote       $0B
00088542 C60D                       	dc.b	nA5, $0D
00088544 E108                       	smpsAlterNote       $08
00088546 E701                       	dc.b	smpsNoAttack, $01
00088548 E105                       	smpsAlterNote       $05
0008854A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008854E E10B                       	smpsAlterNote       $0B
00088550 E701                       	dc.b	smpsNoAttack, $01
00088552 E10F                       	smpsAlterNote       $0F
00088554 E701                       	dc.b	smpsNoAttack, $01
00088556 E10E                       	smpsAlterNote       $0E
00088558 E701                       	dc.b	smpsNoAttack, $01
0008855A E108                       	smpsAlterNote       $08
0008855C E701                       	dc.b	smpsNoAttack, $01
0008855E E104                       	smpsAlterNote       $04
00088560 E701                       	dc.b	smpsNoAttack, $01
00088562 E108                       	smpsAlterNote       $08
00088564 E701                       	dc.b	smpsNoAttack, $01
00088566 E10B                       	smpsAlterNote       $0B
00088568 E701                       	dc.b	smpsNoAttack, $01
0008856A E10F                       	smpsAlterNote       $0F
0008856C E701                       	dc.b	smpsNoAttack, $01
0008856E E10B                       	smpsAlterNote       $0B
00088570 E701                       	dc.b	smpsNoAttack, $01
00088572 E105                       	smpsAlterNote       $05
00088574 E701                       	dc.b	smpsNoAttack, $01
00088576 E104                       	smpsAlterNote       $04
00088578 E701                       	dc.b	smpsNoAttack, $01
0008857A E108                       	smpsAlterNote       $08
0008857C E701                       	dc.b	smpsNoAttack, $01
0008857E E10E                       	smpsAlterNote       $0E
00088580 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088584 E10B                       	smpsAlterNote       $0B
00088586 E701                       	dc.b	smpsNoAttack, $01
00088588 E105                       	smpsAlterNote       $05
0008858A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008858E E10B                       	smpsAlterNote       $0B
00088590 E701                       	dc.b	smpsNoAttack, $01
00088592 E10E                       	smpsAlterNote       $0E
00088594 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088598 E108                       	smpsAlterNote       $08
0008859A E701                       	dc.b	smpsNoAttack, $01
0008859C E105                       	smpsAlterNote       $05
0008859E 8001                       	dc.b	nRst, $01
000885A0 E109                       	smpsAlterNote       $09
000885A2 C402                       	dc.b	nG5, $02
000885A4 E10B                       	smpsAlterNote       $0B
000885A6 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
000885AF E109                       	smpsAlterNote       $09
000885B1 C404                       	dc.b	nG5, $04
000885B3 E10B                       	smpsAlterNote       $0B
000885B5 C604 8001                  	dc.b	nA5, $04, nRst, $01
000885B9 E107                       	smpsAlterNote       $07
000885BB BF0D                       	dc.b	nD5, $0D
000885BD E101                       	smpsAlterNote       $01
000885BF E701                       	dc.b	smpsNoAttack, $01
000885C1 E100                       	smpsAlterNote       $00
000885C3 E701                       	dc.b	smpsNoAttack, $01
000885C5 E104                       	smpsAlterNote       $04
000885C7 E701                       	dc.b	smpsNoAttack, $01
000885C9 E10A                       	smpsAlterNote       $0A
000885CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000885CF E107                       	smpsAlterNote       $07
000885D1 E701                       	dc.b	smpsNoAttack, $01
000885D3 E101                       	smpsAlterNote       $01
000885D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000885D9 E107                       	smpsAlterNote       $07
000885DB E701                       	dc.b	smpsNoAttack, $01
000885DD E10A                       	smpsAlterNote       $0A
000885DF E701                       	dc.b	smpsNoAttack, $01
000885E1 E10B                       	smpsAlterNote       $0B
000885E3 8001                       	dc.b	nRst, $01
000885E5 E108                       	smpsAlterNote       $08
000885E7 C101                       	dc.b	nE5, $01
000885E9 E109                       	smpsAlterNote       $09
000885EB E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000885F0 E10B                       	smpsAlterNote       $0B
000885F2 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000885FA E108                       	smpsAlterNote       $08
000885FC CD06 8001                  	dc.b	nE6, $06, nRst, $01
00088600 E109                       	smpsAlterNote       $09
00088602 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00088606 E108                       	smpsAlterNote       $08
00088608 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008860C E106                       	smpsAlterNote       $06
0008860E C903                       	dc.b	nC6, $03
00088610 E109                       	smpsAlterNote       $09
00088612 C403 8001                  	dc.b	nG5, $03, nRst, $01
00088616 E10C                       	smpsAlterNote       $0C
00088618 C70D                       	dc.b	nBb5, $0D
0008861A E109                       	smpsAlterNote       $09
0008861C E701                       	dc.b	smpsNoAttack, $01
0008861E E105                       	smpsAlterNote       $05
00088620 E701                       	dc.b	smpsNoAttack, $01
00088622 E109                       	smpsAlterNote       $09
00088624 E701                       	dc.b	smpsNoAttack, $01
00088626 E10F                       	smpsAlterNote       $0F
00088628 E701                       	dc.b	smpsNoAttack, $01
0008862A E110                       	smpsAlterNote       $10
0008862C E701                       	dc.b	smpsNoAttack, $01
0008862E E10C                       	smpsAlterNote       $0C
00088630 E701                       	dc.b	smpsNoAttack, $01
00088632 E106                       	smpsAlterNote       $06
00088634 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088638 E109                       	smpsAlterNote       $09
0008863A E701                       	dc.b	smpsNoAttack, $01
0008863C E10F                       	smpsAlterNote       $0F
0008863E E701                       	dc.b	smpsNoAttack, $01
00088640 E110                       	smpsAlterNote       $10
00088642 8001                       	dc.b	nRst, $01
00088644 E10B                       	smpsAlterNote       $0B
00088646 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008864C E105                       	smpsAlterNote       $05
0008864E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088652 E108                       	smpsAlterNote       $08
00088654 E701                       	dc.b	smpsNoAttack, $01
00088656 E10E                       	smpsAlterNote       $0E
00088658 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008865C E108                       	smpsAlterNote       $08
0008865E E701                       	dc.b	smpsNoAttack, $01
00088660 E105                       	smpsAlterNote       $05
00088662 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088666 E10B                       	smpsAlterNote       $0B
00088668 E701                       	dc.b	smpsNoAttack, $01
0008866A E10F                       	smpsAlterNote       $0F
0008866C E701                       	dc.b	smpsNoAttack, $01
0008866E E10E                       	smpsAlterNote       $0E
00088670 E701                       	dc.b	smpsNoAttack, $01
00088672 E108                       	smpsAlterNote       $08
00088674 E701                       	dc.b	smpsNoAttack, $01
00088676 E104                       	smpsAlterNote       $04
00088678 E701                       	dc.b	smpsNoAttack, $01
0008867A E108                       	smpsAlterNote       $08
0008867C E701                       	dc.b	smpsNoAttack, $01
0008867E E10B                       	smpsAlterNote       $0B
00088680 E701                       	dc.b	smpsNoAttack, $01
00088682 E10F                       	smpsAlterNote       $0F
00088684 E701                       	dc.b	smpsNoAttack, $01
00088686 E10B                       	smpsAlterNote       $0B
00088688 E701                       	dc.b	smpsNoAttack, $01
0008868A E105                       	smpsAlterNote       $05
0008868C E701                       	dc.b	smpsNoAttack, $01
0008868E E104                       	smpsAlterNote       $04
00088690 E701                       	dc.b	smpsNoAttack, $01
00088692 E108                       	smpsAlterNote       $08
00088694 E701                       	dc.b	smpsNoAttack, $01
00088696 E10E                       	smpsAlterNote       $0E
00088698 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008869C E10B                       	smpsAlterNote       $0B
0008869E E701                       	dc.b	smpsNoAttack, $01
000886A0 E105                       	smpsAlterNote       $05
000886A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000886A6 E10B                       	smpsAlterNote       $0B
000886A8 E701                       	dc.b	smpsNoAttack, $01
000886AA E10E                       	smpsAlterNote       $0E
000886AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000886B0 E108                       	smpsAlterNote       $08
000886B2 E701                       	dc.b	smpsNoAttack, $01
000886B4 E104                       	smpsAlterNote       $04
000886B6 E701                       	dc.b	smpsNoAttack, $01
000886B8 E105                       	smpsAlterNote       $05
000886BA E701                       	dc.b	smpsNoAttack, $01
000886BC E10B                       	smpsAlterNote       $0B
000886BE E701                       	dc.b	smpsNoAttack, $01
000886C0 E10F                       	smpsAlterNote       $0F
000886C2 E701                       	dc.b	smpsNoAttack, $01
000886C4 E10B                       	smpsAlterNote       $0B
000886C6 E701                       	dc.b	smpsNoAttack, $01
000886C8 E108                       	smpsAlterNote       $08
000886CA E701                       	dc.b	smpsNoAttack, $01
000886CC E104                       	smpsAlterNote       $04
000886CE E701                       	dc.b	smpsNoAttack, $01
000886D0 E108                       	smpsAlterNote       $08
000886D2 E701                       	dc.b	smpsNoAttack, $01
000886D4 E10E                       	smpsAlterNote       $0E
000886D6 E701                       	dc.b	smpsNoAttack, $01
000886D8 E10F                       	smpsAlterNote       $0F
000886DA E701                       	dc.b	smpsNoAttack, $01
000886DC E10B                       	smpsAlterNote       $0B
000886DE E701                       	dc.b	smpsNoAttack, $01
000886E0 E105                       	smpsAlterNote       $05
000886E2 E701                       	dc.b	smpsNoAttack, $01
000886E4 E10B                       	smpsAlterNote       $0B
000886E6 C60E                       	dc.b	nA5, $0E
000886E8 E105                       	smpsAlterNote       $05
000886EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000886EE E10B                       	smpsAlterNote       $0B
000886F0 E701                       	dc.b	smpsNoAttack, $01
000886F2 E10E                       	smpsAlterNote       $0E
000886F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000886F8 E108                       	smpsAlterNote       $08
000886FA E701                       	dc.b	smpsNoAttack, $01
000886FC E104                       	smpsAlterNote       $04
000886FE E701                       	dc.b	smpsNoAttack, $01
00088700 E105                       	smpsAlterNote       $05
00088702 E701                       	dc.b	smpsNoAttack, $01
00088704 E10B                       	smpsAlterNote       $0B
00088706 E701                       	dc.b	smpsNoAttack, $01
00088708 E10F                       	smpsAlterNote       $0F
0008870A E701                       	dc.b	smpsNoAttack, $01
0008870C E10B                       	smpsAlterNote       $0B
0008870E E701                       	dc.b	smpsNoAttack, $01
00088710 E108                       	smpsAlterNote       $08
00088712 E701                       	dc.b	smpsNoAttack, $01
00088714 E104                       	smpsAlterNote       $04
00088716 E701                       	dc.b	smpsNoAttack, $01
00088718 E108                       	smpsAlterNote       $08
0008871A E701                       	dc.b	smpsNoAttack, $01
0008871C E10E                       	smpsAlterNote       $0E
0008871E E701                       	dc.b	smpsNoAttack, $01
00088720 E10F                       	smpsAlterNote       $0F
00088722 E701                       	dc.b	smpsNoAttack, $01
00088724 E10B                       	smpsAlterNote       $0B
00088726 E701                       	dc.b	smpsNoAttack, $01
00088728 E105                       	smpsAlterNote       $05
0008872A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008872E E108                       	smpsAlterNote       $08
00088730 E701                       	dc.b	smpsNoAttack, $01
00088732 E10E                       	smpsAlterNote       $0E
00088734 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088738 E108                       	smpsAlterNote       $08
0008873A E701                       	dc.b	smpsNoAttack, $01
0008873C E105                       	smpsAlterNote       $05
0008873E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088742 E10B                       	smpsAlterNote       $0B
00088744 E701                       	dc.b	smpsNoAttack, $01
00088746 E10F                       	smpsAlterNote       $0F
00088748 E701                       	dc.b	smpsNoAttack, $01
0008874A E10E                       	smpsAlterNote       $0E
0008874C E701                       	dc.b	smpsNoAttack, $01
0008874E E108                       	smpsAlterNote       $08
00088750 E701                       	dc.b	smpsNoAttack, $01
00088752 E104                       	smpsAlterNote       $04
00088754 E701                       	dc.b	smpsNoAttack, $01
00088756 E108                       	smpsAlterNote       $08
00088758 E701                       	dc.b	smpsNoAttack, $01
0008875A E10E                       	smpsAlterNote       $0E
0008875C E701                       	dc.b	smpsNoAttack, $01
0008875E E10F                       	smpsAlterNote       $0F
00088760 E701                       	dc.b	smpsNoAttack, $01
00088762 E10B                       	smpsAlterNote       $0B
00088764 E701                       	dc.b	smpsNoAttack, $01
00088766 E105                       	smpsAlterNote       $05
00088768 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008876C E108                       	smpsAlterNote       $08
0008876E E701                       	dc.b	smpsNoAttack, $01
00088770 E10E                       	smpsAlterNote       $0E
00088772 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088776 E108                       	smpsAlterNote       $08
00088778 E701                       	dc.b	smpsNoAttack, $01
0008877A E105                       	smpsAlterNote       $05
0008877C E701                       	dc.b	smpsNoAttack, $01
00088780 E10B                       	smpsAlterNote       $0B
00088782 E6FD                       	smpsAlterVol        $FD
00088784 C604 8001                  	dc.b	nA5, $04, nRst, $01
00088788 E109                       	smpsAlterNote       $09
0008878A C404                       	dc.b	nG5, $04
0008878C E10B                       	smpsAlterNote       $0B
0008878E C604 8001                  	dc.b	nA5, $04, nRst, $01
00088792 E107                       	smpsAlterNote       $07
00088794 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0008879A E10B                       	smpsAlterNote       $0B
0008879C C604                       	dc.b	nA5, $04
0008879E E109                       	smpsAlterNote       $09
000887A0 C404 8001                  	dc.b	nG5, $04, nRst, $01
000887A4 E10B                       	smpsAlterNote       $0B
000887A6 C604                       	dc.b	nA5, $04
000887A8 E108                       	smpsAlterNote       $08
000887AA C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
000887B2 E106                       	smpsAlterNote       $06
000887B4 C904 8001                  	dc.b	nC6, $04, nRst, $01
000887B8 E10C                       	smpsAlterNote       $0C
000887BA C704                       	dc.b	nBb5, $04
000887BC E10B                       	smpsAlterNote       $0B
000887BE C604 8001                  	dc.b	nA5, $04, nRst, $01
000887C2 E109                       	smpsAlterNote       $09
000887C4 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000887CE E10B                       	smpsAlterNote       $0B
000887D0 C60D                       	dc.b	nA5, $0D
000887D2 E108                       	smpsAlterNote       $08
000887D4 E701                       	dc.b	smpsNoAttack, $01
000887D6 E104                       	smpsAlterNote       $04
000887D8 E701                       	dc.b	smpsNoAttack, $01
000887DA E108                       	smpsAlterNote       $08
000887DC E701                       	dc.b	smpsNoAttack, $01
000887DE E10E                       	smpsAlterNote       $0E
000887E0 E701                       	dc.b	smpsNoAttack, $01
000887E2 E10F                       	smpsAlterNote       $0F
000887E4 E701                       	dc.b	smpsNoAttack, $01
000887E6 E10B                       	smpsAlterNote       $0B
000887E8 E701                       	dc.b	smpsNoAttack, $01
000887EA E105                       	smpsAlterNote       $05
000887EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000887F0 E108                       	smpsAlterNote       $08
000887F2 E701                       	dc.b	smpsNoAttack, $01
000887F4 E10E                       	smpsAlterNote       $0E
000887F6 E701                       	dc.b	smpsNoAttack, $01
000887F8 E10F                       	smpsAlterNote       $0F
000887FA 8001                       	dc.b	nRst, $01
000887FC E109                       	smpsAlterNote       $09
000887FE C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00088804 E108                       	smpsAlterNote       $08
00088806 C10D                       	dc.b	nE5, $0D
00088808 E102                       	smpsAlterNote       $02
0008880A E701                       	dc.b	smpsNoAttack, $01
0008880C E101                       	smpsAlterNote       $01
0008880E E701                       	dc.b	smpsNoAttack, $01
00088810 E105                       	smpsAlterNote       $05
00088812 E701                       	dc.b	smpsNoAttack, $01
00088814 E10B                       	smpsAlterNote       $0B
00088816 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008881A E108                       	smpsAlterNote       $08
0008881C E701                       	dc.b	smpsNoAttack, $01
0008881E E102                       	smpsAlterNote       $02
00088820 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088824 E108                       	smpsAlterNote       $08
00088826 E701                       	dc.b	smpsNoAttack, $01
00088828 E10B                       	smpsAlterNote       $0B
0008882A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008882E E105                       	smpsAlterNote       $05
00088830 E701                       	dc.b	smpsNoAttack, $01
00088832 E101                       	smpsAlterNote       $01
00088834 E701                       	dc.b	smpsNoAttack, $01
00088836 E102                       	smpsAlterNote       $02
00088838 E701                       	dc.b	smpsNoAttack, $01
0008883A E108                       	smpsAlterNote       $08
0008883C E701                       	dc.b	smpsNoAttack, $01
0008883E E10C                       	smpsAlterNote       $0C
00088840 E701                       	dc.b	smpsNoAttack, $01
00088842 E108                       	smpsAlterNote       $08
00088844 E701                       	dc.b	smpsNoAttack, $01
00088846 E105                       	smpsAlterNote       $05
00088848 E701                       	dc.b	smpsNoAttack, $01
0008884A E101                       	smpsAlterNote       $01
0008884C E701                       	dc.b	smpsNoAttack, $01
0008884E E105                       	smpsAlterNote       $05
00088850 E701                       	dc.b	smpsNoAttack, $01
00088852 E10B                       	smpsAlterNote       $0B
00088854 E701                       	dc.b	smpsNoAttack, $01
00088856 E10C                       	smpsAlterNote       $0C
00088858 E701                       	dc.b	smpsNoAttack, $01
0008885A E108                       	smpsAlterNote       $08
0008885C E701                       	dc.b	smpsNoAttack, $01
0008885E E102                       	smpsAlterNote       $02
00088860 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088864 E105                       	smpsAlterNote       $05
00088866 E701                       	dc.b	smpsNoAttack, $01
00088868 E10B                       	smpsAlterNote       $0B
0008886A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008886E E105                       	smpsAlterNote       $05
00088870 E701                       	dc.b	smpsNoAttack, $01
00088872 E102                       	smpsAlterNote       $02
00088874 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088878 E108                       	smpsAlterNote       $08
0008887A E701                       	dc.b	smpsNoAttack, $01
0008887C E10C                       	smpsAlterNote       $0C
0008887E E701                       	dc.b	smpsNoAttack, $01
00088880 E10B                       	smpsAlterNote       $0B
00088882 E701                       	dc.b	smpsNoAttack, $01
00088884 E105                       	smpsAlterNote       $05
00088886 E701                       	dc.b	smpsNoAttack, $01
00088888 E101                       	smpsAlterNote       $01
0008888A E701                       	dc.b	smpsNoAttack, $01
0008888C E105                       	smpsAlterNote       $05
0008888E E701                       	dc.b	smpsNoAttack, $01
00088890 E108                       	smpsAlterNote       $08
00088892 E701                       	dc.b	smpsNoAttack, $01
00088894 E10C                       	smpsAlterNote       $0C
00088896 E701                       	dc.b	smpsNoAttack, $01
00088898 E108                       	smpsAlterNote       $08
0008889A E701                       	dc.b	smpsNoAttack, $01
0008889C E102                       	smpsAlterNote       $02
0008889E E701                       	dc.b	smpsNoAttack, $01
000888A0 E101                       	smpsAlterNote       $01
000888A2 E701                       	dc.b	smpsNoAttack, $01
000888A4 E105                       	smpsAlterNote       $05
000888A6 E701                       	dc.b	smpsNoAttack, $01
000888A8 E10B                       	smpsAlterNote       $0B
000888AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000888AE E108                       	smpsAlterNote       $08
000888B0 E701                       	dc.b	smpsNoAttack, $01
000888B2 E102                       	smpsAlterNote       $02
000888B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000888B8 E108                       	smpsAlterNote       $08
000888BA E701                       	dc.b	smpsNoAttack, $01
000888BC E10B                       	smpsAlterNote       $0B
000888BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000888C2 E105                       	smpsAlterNote       $05
000888C4 E701                       	dc.b	smpsNoAttack, $01
000888C6 E101                       	smpsAlterNote       $01
000888C8 E701                       	dc.b	smpsNoAttack, $01
000888CA E102                       	smpsAlterNote       $02
000888CC E701                       	dc.b	smpsNoAttack, $01
000888CE E108                       	smpsAlterNote       $08
000888D0 E701                       	dc.b	smpsNoAttack, $01
000888D2 E10C                       	smpsAlterNote       $0C
000888D4 E701                       	dc.b	smpsNoAttack, $01
000888D6 E108                       	smpsAlterNote       $08
000888D8 E701                       	dc.b	smpsNoAttack, $01
000888DA E105                       	smpsAlterNote       $05
000888DC E701                       	dc.b	smpsNoAttack, $01
000888DE E101                       	smpsAlterNote       $01
000888E0 E701                       	dc.b	smpsNoAttack, $01
000888E2 E105                       	smpsAlterNote       $05
000888E4 E701                       	dc.b	smpsNoAttack, $01
000888E6 E10B                       	smpsAlterNote       $0B
000888E8 E701                       	dc.b	smpsNoAttack, $01
000888EA E10C                       	smpsAlterNote       $0C
000888EC E701                       	dc.b	smpsNoAttack, $01
000888EE E108                       	smpsAlterNote       $08
000888F0 E701                       	dc.b	smpsNoAttack, $01
000888F2 E102                       	smpsAlterNote       $02
000888F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000888F8 E105                       	smpsAlterNote       $05
000888FA E701                       	dc.b	smpsNoAttack, $01
000888FC E10B                       	smpsAlterNote       $0B
000888FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088902 E105                       	smpsAlterNote       $05
00088904 E701                       	dc.b	smpsNoAttack, $01
00088906 E101                       	smpsAlterNote       $01
00088908 E701                       	dc.b	smpsNoAttack, $01
0008890A E102                       	smpsAlterNote       $02
0008890C E701                       	dc.b	smpsNoAttack, $01
0008890E E108                       	smpsAlterNote       $08
00088910 E701                       	dc.b	smpsNoAttack, $01
00088912 E10C                       	smpsAlterNote       $0C
00088914 E701                       	dc.b	smpsNoAttack, $01
00088916 E108                       	smpsAlterNote       $08
00088918 E701                       	dc.b	smpsNoAttack, $01
0008891A E105                       	smpsAlterNote       $05
0008891C E701                       	dc.b	smpsNoAttack, $01
0008891E E101                       	smpsAlterNote       $01
00088920 E701                       	dc.b	smpsNoAttack, $01
00088922 E105                       	smpsAlterNote       $05
00088924 E701                       	dc.b	smpsNoAttack, $01
00088926 E10B                       	smpsAlterNote       $0B
00088928 E701                       	dc.b	smpsNoAttack, $01
0008892A E10C                       	smpsAlterNote       $0C
0008892C E701                       	dc.b	smpsNoAttack, $01
0008892E E108                       	smpsAlterNote       $08
00088930 E701                       	dc.b	smpsNoAttack, $01
00088932 E102                       	smpsAlterNote       $02
00088934 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088938 E105                       	smpsAlterNote       $05
0008893A E701                       	dc.b	smpsNoAttack, $01
0008893C E10B                       	smpsAlterNote       $0B
0008893E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088942 E105                       	smpsAlterNote       $05
00088944 E701                       	dc.b	smpsNoAttack, $01
00088946 E102                       	smpsAlterNote       $02
00088948 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008894C E108                       	smpsAlterNote       $08
0008894E E701                       	dc.b	smpsNoAttack, $01
00088950 E10C                       	smpsAlterNote       $0C
00088952 E701                       	dc.b	smpsNoAttack, $01
00088954 E10B                       	smpsAlterNote       $0B
00088956 E701                       	dc.b	smpsNoAttack, $01
00088958 E105                       	smpsAlterNote       $05
0008895A E701                       	dc.b	smpsNoAttack, $01
0008895C E101                       	smpsAlterNote       $01
0008895E E701                       	dc.b	smpsNoAttack, $01
00088960 E105                       	smpsAlterNote       $05
00088962 E701                       	dc.b	smpsNoAttack, $01
00088964 E108                       	smpsAlterNote       $08
00088966 E701                       	dc.b	smpsNoAttack, $01
00088968 E10C                       	smpsAlterNote       $0C
0008896A E701                       	dc.b	smpsNoAttack, $01
0008896E E10B                       	smpsAlterNote       $0B
00088970 C604 8001                  	dc.b	nA5, $04, nRst, $01
00088974 E109                       	smpsAlterNote       $09
00088976 C404                       	dc.b	nG5, $04
00088978 E10B                       	smpsAlterNote       $0B
0008897A C604 8001                  	dc.b	nA5, $04, nRst, $01
0008897E E107                       	smpsAlterNote       $07
00088980 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00088986 E10B                       	smpsAlterNote       $0B
00088988 C604                       	dc.b	nA5, $04
0008898A E109                       	smpsAlterNote       $09
0008898C C404 8001                  	dc.b	nG5, $04, nRst, $01
00088990 E10B                       	smpsAlterNote       $0B
00088992 C604                       	dc.b	nA5, $04
00088994 E108                       	smpsAlterNote       $08
00088996 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
0008899C E106                       	smpsAlterNote       $06
0008899E C904 8001                  	dc.b	nC6, $04, nRst, $01
000889A2 E10C                       	smpsAlterNote       $0C
000889A4 C704                       	dc.b	nBb5, $04
000889A6 E10B                       	smpsAlterNote       $0B
000889A8 C604 8001                  	dc.b	nA5, $04, nRst, $01
000889AC E109                       	smpsAlterNote       $09
000889AE C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000889B8 E10B                       	smpsAlterNote       $0B
000889BA C60D                       	dc.b	nA5, $0D
000889BC E108                       	smpsAlterNote       $08
000889BE E701                       	dc.b	smpsNoAttack, $01
000889C0 E104                       	smpsAlterNote       $04
000889C2 E701                       	dc.b	smpsNoAttack, $01
000889C4 E108                       	smpsAlterNote       $08
000889C6 E701                       	dc.b	smpsNoAttack, $01
000889C8 E10B                       	smpsAlterNote       $0B
000889CA E701                       	dc.b	smpsNoAttack, $01
000889CC E10F                       	smpsAlterNote       $0F
000889CE E701                       	dc.b	smpsNoAttack, $01
000889D0 E10B                       	smpsAlterNote       $0B
000889D2 E701                       	dc.b	smpsNoAttack, $01
000889D4 E105                       	smpsAlterNote       $05
000889D6 E701                       	dc.b	smpsNoAttack, $01
000889D8 E104                       	smpsAlterNote       $04
000889DA E701                       	dc.b	smpsNoAttack, $01
000889DC E108                       	smpsAlterNote       $08
000889DE E701                       	dc.b	smpsNoAttack, $01
000889E0 E10E                       	smpsAlterNote       $0E
000889E2 E701                       	dc.b	smpsNoAttack, $01
000889E4 E10F                       	smpsAlterNote       $0F
000889E6 8001                       	dc.b	nRst, $01
000889E8 E109                       	smpsAlterNote       $09
000889EA C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000889F0 E108                       	smpsAlterNote       $08
000889F2 C10D                       	dc.b	nE5, $0D
000889F4 E105                       	smpsAlterNote       $05
000889F6 E701                       	dc.b	smpsNoAttack, $01
000889F8 E101                       	smpsAlterNote       $01
000889FA E701                       	dc.b	smpsNoAttack, $01
000889FC E105                       	smpsAlterNote       $05
000889FE E701                       	dc.b	smpsNoAttack, $01
00088A00 E10B                       	smpsAlterNote       $0B
00088A02 E701                       	dc.b	smpsNoAttack, $01
00088A04 E10C                       	smpsAlterNote       $0C
00088A06 E701                       	dc.b	smpsNoAttack, $01
00088A08 E108                       	smpsAlterNote       $08
00088A0A E701                       	dc.b	smpsNoAttack, $01
00088A0C E102                       	smpsAlterNote       $02
00088A0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088A12 E105                       	smpsAlterNote       $05
00088A14 E701                       	dc.b	smpsNoAttack, $01
00088A16 E10B                       	smpsAlterNote       $0B
00088A18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088A1C E105                       	smpsAlterNote       $05
00088A1E E701                       	dc.b	smpsNoAttack, $01
00088A20 E102                       	smpsAlterNote       $02
00088A22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088A26 E108                       	smpsAlterNote       $08
00088A28 E701                       	dc.b	smpsNoAttack, $01
00088A2A E10C                       	smpsAlterNote       $0C
00088A2C E701                       	dc.b	smpsNoAttack, $01
00088A2E E10B                       	smpsAlterNote       $0B
00088A30 E701                       	dc.b	smpsNoAttack, $01
00088A32 E105                       	smpsAlterNote       $05
00088A34 E701                       	dc.b	smpsNoAttack, $01
00088A36 E101                       	smpsAlterNote       $01
00088A38 E701                       	dc.b	smpsNoAttack, $01
00088A3A E105                       	smpsAlterNote       $05
00088A3C E701                       	dc.b	smpsNoAttack, $01
00088A3E E108                       	smpsAlterNote       $08
00088A40 E701                       	dc.b	smpsNoAttack, $01
00088A42 E10C                       	smpsAlterNote       $0C
00088A44 E701                       	dc.b	smpsNoAttack, $01
00088A46 E108                       	smpsAlterNote       $08
00088A48 E701                       	dc.b	smpsNoAttack, $01
00088A4A E102                       	smpsAlterNote       $02
00088A4C E701                       	dc.b	smpsNoAttack, $01
00088A4E E101                       	smpsAlterNote       $01
00088A50 E701                       	dc.b	smpsNoAttack, $01
00088A52 E105                       	smpsAlterNote       $05
00088A54 E701                       	dc.b	smpsNoAttack, $01
00088A56 E10B                       	smpsAlterNote       $0B
00088A58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088A5C E108                       	smpsAlterNote       $08
00088A5E E701                       	dc.b	smpsNoAttack, $01
00088A60 E102                       	smpsAlterNote       $02
00088A62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088A66 E108                       	smpsAlterNote       $08
00088A68 E701                       	dc.b	smpsNoAttack, $01
00088A6A E10B                       	smpsAlterNote       $0B
00088A6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088A70 E105                       	smpsAlterNote       $05
00088A72 E701                       	dc.b	smpsNoAttack, $01
00088A74 E101                       	smpsAlterNote       $01
00088A76 E701                       	dc.b	smpsNoAttack, $01
00088A78 E102                       	smpsAlterNote       $02
00088A7A E701                       	dc.b	smpsNoAttack, $01
00088A7C E108                       	smpsAlterNote       $08
00088A7E E701                       	dc.b	smpsNoAttack, $01
00088A80 E10C                       	smpsAlterNote       $0C
00088A82 E701                       	dc.b	smpsNoAttack, $01
00088A84 E108                       	smpsAlterNote       $08
00088A86 E701                       	dc.b	smpsNoAttack, $01
00088A88 E105                       	smpsAlterNote       $05
00088A8A E701                       	dc.b	smpsNoAttack, $01
00088A8C E101                       	smpsAlterNote       $01
00088A8E E701                       	dc.b	smpsNoAttack, $01
00088A90 E105                       	smpsAlterNote       $05
00088A92 E701                       	dc.b	smpsNoAttack, $01
00088A94 E10B                       	smpsAlterNote       $0B
00088A96 E701                       	dc.b	smpsNoAttack, $01
00088A98 E10C                       	smpsAlterNote       $0C
00088A9A E701                       	dc.b	smpsNoAttack, $01
00088A9C E108                       	smpsAlterNote       $08
00088A9E E701                       	dc.b	smpsNoAttack, $01
00088AA0 E102                       	smpsAlterNote       $02
00088AA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088AA6 E108                       	smpsAlterNote       $08
00088AA8 E701                       	dc.b	smpsNoAttack, $01
00088AAA E10B                       	smpsAlterNote       $0B
00088AAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088AB0 E105                       	smpsAlterNote       $05
00088AB2 E701                       	dc.b	smpsNoAttack, $01
00088AB4 E101                       	smpsAlterNote       $01
00088AB6 E701                       	dc.b	smpsNoAttack, $01
00088AB8 E102                       	smpsAlterNote       $02
00088ABA E701                       	dc.b	smpsNoAttack, $01
00088ABC E108                       	smpsAlterNote       $08
00088ABE E701                       	dc.b	smpsNoAttack, $01
00088AC0 E10C                       	smpsAlterNote       $0C
00088AC2 E701                       	dc.b	smpsNoAttack, $01
00088AC4 E108                       	smpsAlterNote       $08
00088AC6 E701                       	dc.b	smpsNoAttack, $01
00088AC8 E105                       	smpsAlterNote       $05
00088ACA E701                       	dc.b	smpsNoAttack, $01
00088ACC E101                       	smpsAlterNote       $01
00088ACE E701                       	dc.b	smpsNoAttack, $01
00088AD0 E105                       	smpsAlterNote       $05
00088AD2 E701                       	dc.b	smpsNoAttack, $01
00088AD4 E10B                       	smpsAlterNote       $0B
00088AD6 E701                       	dc.b	smpsNoAttack, $01
00088AD8 E10C                       	smpsAlterNote       $0C
00088ADA E701                       	dc.b	smpsNoAttack, $01
00088ADC E108                       	smpsAlterNote       $08
00088ADE E701                       	dc.b	smpsNoAttack, $01
00088AE0 E102                       	smpsAlterNote       $02
00088AE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088AE6 E105                       	smpsAlterNote       $05
00088AE8 E701                       	dc.b	smpsNoAttack, $01
00088AEA E10B                       	smpsAlterNote       $0B
00088AEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088AF0 E105                       	smpsAlterNote       $05
00088AF2 E701                       	dc.b	smpsNoAttack, $01
00088AF4 E102                       	smpsAlterNote       $02
00088AF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088AFA E108                       	smpsAlterNote       $08
00088AFC E701                       	dc.b	smpsNoAttack, $01
00088AFE E10C                       	smpsAlterNote       $0C
00088B00 E701                       	dc.b	smpsNoAttack, $01
00088B02 E10B                       	smpsAlterNote       $0B
00088B04 E701                       	dc.b	smpsNoAttack, $01
00088B06 E105                       	smpsAlterNote       $05
00088B08 E701                       	dc.b	smpsNoAttack, $01
00088B0A E101                       	smpsAlterNote       $01
00088B0C E701                       	dc.b	smpsNoAttack, $01
00088B0E E105                       	smpsAlterNote       $05
00088B10 E701                       	dc.b	smpsNoAttack, $01
00088B12 E108                       	smpsAlterNote       $08
00088B14 E701                       	dc.b	smpsNoAttack, $01
00088B16 E10C                       	smpsAlterNote       $0C
00088B18 E701                       	dc.b	smpsNoAttack, $01
00088B1A E108                       	smpsAlterNote       $08
00088B1C E701                       	dc.b	smpsNoAttack, $01
00088B1E E102                       	smpsAlterNote       $02
00088B20 E701                       	dc.b	smpsNoAttack, $01
00088B22 E101                       	smpsAlterNote       $01
00088B24 E701                       	dc.b	smpsNoAttack, $01
00088B26 E105                       	smpsAlterNote       $05
00088B28 E701                       	dc.b	smpsNoAttack, $01
00088B2A E10B                       	smpsAlterNote       $0B
00088B2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B30 E108                       	smpsAlterNote       $08
00088B32 E701                       	dc.b	smpsNoAttack, $01
00088B34 E102                       	smpsAlterNote       $02
00088B36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B3A E108                       	smpsAlterNote       $08
00088B3C E701                       	dc.b	smpsNoAttack, $01
00088B3E E10B                       	smpsAlterNote       $0B
00088B40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B44 E105                       	smpsAlterNote       $05
00088B46 E701                       	dc.b	smpsNoAttack, $01
00088B48 E102                       	smpsAlterNote       $02
00088B4A 8001                       	dc.b	nRst, $01
00088B4C E107                       	smpsAlterNote       $07
00088B4E BF01 8001                  	dc.b	nD5, $01, nRst, $01
00088B52 E108                       	smpsAlterNote       $08
00088B54 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
00088B58 E102                       	smpsAlterNote       $02
00088B5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B5E E108                       	smpsAlterNote       $08
00088B60 E701                       	dc.b	smpsNoAttack, $01
00088B62 E10B                       	smpsAlterNote       $0B
00088B64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B68 E105                       	smpsAlterNote       $05
00088B6A E701                       	dc.b	smpsNoAttack, $01
00088B6C E101                       	smpsAlterNote       $01
00088B6E E701                       	dc.b	smpsNoAttack, $01
00088B70 E102                       	smpsAlterNote       $02
00088B72 E701                       	dc.b	smpsNoAttack, $01
00088B74 E108                       	smpsAlterNote       $08
00088B76 E701                       	dc.b	smpsNoAttack, $01
00088B78 E10C                       	smpsAlterNote       $0C
00088B7A E701                       	dc.b	smpsNoAttack, $01
00088B7C E108                       	smpsAlterNote       $08
00088B7E E701                       	dc.b	smpsNoAttack, $01
00088B80 E105                       	smpsAlterNote       $05
00088B82 E701                       	dc.b	smpsNoAttack, $01
00088B84 E101                       	smpsAlterNote       $01
00088B86 E701                       	dc.b	smpsNoAttack, $01
00088B88 E105                       	smpsAlterNote       $05
00088B8A E701                       	dc.b	smpsNoAttack, $01
00088B8C E10B                       	smpsAlterNote       $0B
00088B8E E701                       	dc.b	smpsNoAttack, $01
00088B90 E10C                       	smpsAlterNote       $0C
00088B92 E701                       	dc.b	smpsNoAttack, $01
00088B94 E108                       	smpsAlterNote       $08
00088B96 E701                       	dc.b	smpsNoAttack, $01
00088B98 E102                       	smpsAlterNote       $02
00088B9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B9E E105                       	smpsAlterNote       $05
00088BA0 E701                       	dc.b	smpsNoAttack, $01
00088BA2 E10B                       	smpsAlterNote       $0B
00088BA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088BA8 E105                       	smpsAlterNote       $05
00088BAA E701                       	dc.b	smpsNoAttack, $01
00088BAC E102                       	smpsAlterNote       $02
00088BAE E701                       	dc.b	smpsNoAttack, $01
00088BB0 E109                       	smpsAlterNote       $09
00088BB2 C40A C207                  	dc.b	nG5, $0A, nF5, $07
00088BB6 E108                       	smpsAlterNote       $08
00088BB8 C10D                       	dc.b	nE5, $0D
00088BBA E105                       	smpsAlterNote       $05
00088BBC E701                       	dc.b	smpsNoAttack, $01
00088BBE E101                       	smpsAlterNote       $01
00088BC0 E701                       	dc.b	smpsNoAttack, $01
00088BC2 E102                       	smpsAlterNote       $02
00088BC4 E701                       	dc.b	smpsNoAttack, $01
00088BC6 E108                       	smpsAlterNote       $08
00088BC8 E701                       	dc.b	smpsNoAttack, $01
00088BCA E10C                       	smpsAlterNote       $0C
00088BCC E701                       	dc.b	smpsNoAttack, $01
00088BCE E108                       	smpsAlterNote       $08
00088BD0 E701                       	dc.b	smpsNoAttack, $01
00088BD2 E105                       	smpsAlterNote       $05
00088BD4 E701                       	dc.b	smpsNoAttack, $01
00088BD6 E101                       	smpsAlterNote       $01
00088BD8 E701                       	dc.b	smpsNoAttack, $01
00088BDA E105                       	smpsAlterNote       $05
00088BDC E701                       	dc.b	smpsNoAttack, $01
00088BDE E10B                       	smpsAlterNote       $0B
00088BE0 E701                       	dc.b	smpsNoAttack, $01
00088BE2 E10C                       	smpsAlterNote       $0C
00088BE4 E701                       	dc.b	smpsNoAttack, $01
00088BE6 E108                       	smpsAlterNote       $08
00088BE8 E701                       	dc.b	smpsNoAttack, $01
00088BEA E102                       	smpsAlterNote       $02
00088BEC E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00088BF4 E10B                       	smpsAlterNote       $0B
00088BF6 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00088BFA E10C                       	smpsAlterNote       $0C
00088BFC BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00088C00 E10B                       	smpsAlterNote       $0B
00088C02 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
00088C08 E107                       	smpsAlterNote       $07
00088C0A BF03                       	dc.b	nD5, $03
00088C0C E108                       	smpsAlterNote       $08
00088C0E C103 8001                  	dc.b	nE5, $03, nRst, $01
00088C12 E109                       	smpsAlterNote       $09
00088C14 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00088C1A E10B                       	smpsAlterNote       $0B
00088C1C C606 8001                  	dc.b	nA5, $06, nRst, $01
00088C20 E107                       	smpsAlterNote       $07
00088C22 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00088C26 E106                       	smpsAlterNote       $06
00088C28 C90D                       	dc.b	nC6, $0D
00088C2A E103                       	smpsAlterNote       $03
00088C2C E701                       	dc.b	smpsNoAttack, $01
00088C2E E1FF                       	smpsAlterNote       $FF
00088C30 E701                       	dc.b	smpsNoAttack, $01
00088C32 E103                       	smpsAlterNote       $03
00088C34 E701                       	dc.b	smpsNoAttack, $01
00088C36 E109                       	smpsAlterNote       $09
00088C38 E701                       	dc.b	smpsNoAttack, $01
00088C3A E10A                       	smpsAlterNote       $0A
00088C3C E701                       	dc.b	smpsNoAttack, $01
00088C3E E106                       	smpsAlterNote       $06
00088C40 E701                       	dc.b	smpsNoAttack, $01
00088C42 E100                       	smpsAlterNote       $00
00088C44 E701                       	dc.b	smpsNoAttack, $01
00088C46 E10C                       	smpsAlterNote       $0C
00088C48 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00088C4C E10B                       	smpsAlterNote       $0B
00088C4E C603                       	dc.b	nA5, $03
00088C50 E109                       	smpsAlterNote       $09
00088C52 C403 8001                  	dc.b	nG5, $03, nRst, $01
00088C56 E10B                       	smpsAlterNote       $0B
00088C58 C60D                       	dc.b	nA5, $0D
00088C5A E105                       	smpsAlterNote       $05
00088C5C E701                       	dc.b	smpsNoAttack, $01
00088C5E E104                       	smpsAlterNote       $04
00088C60 E701                       	dc.b	smpsNoAttack, $01
00088C62 E108                       	smpsAlterNote       $08
00088C64 E701                       	dc.b	smpsNoAttack, $01
00088C66 E10E                       	smpsAlterNote       $0E
00088C68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C6C E10B                       	smpsAlterNote       $0B
00088C6E E701                       	dc.b	smpsNoAttack, $01
00088C70 E105                       	smpsAlterNote       $05
00088C72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C76 E10B                       	smpsAlterNote       $0B
00088C78 E701                       	dc.b	smpsNoAttack, $01
00088C7A E10E                       	smpsAlterNote       $0E
00088C7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C80 E108                       	smpsAlterNote       $08
00088C82 E701                       	dc.b	smpsNoAttack, $01
00088C84 E104                       	smpsAlterNote       $04
00088C86 E701                       	dc.b	smpsNoAttack, $01
00088C88 E105                       	smpsAlterNote       $05
00088C8A E701                       	dc.b	smpsNoAttack, $01
00088C8C E10B                       	smpsAlterNote       $0B
00088C8E E701                       	dc.b	smpsNoAttack, $01
00088C90 E10F                       	smpsAlterNote       $0F
00088C92 E701                       	dc.b	smpsNoAttack, $01
00088C94 E10B                       	smpsAlterNote       $0B
00088C96 E701                       	dc.b	smpsNoAttack, $01
00088C98 E108                       	smpsAlterNote       $08
00088C9A E701                       	dc.b	smpsNoAttack, $01
00088C9C E104                       	smpsAlterNote       $04
00088C9E E701                       	dc.b	smpsNoAttack, $01
00088CA0 E108                       	smpsAlterNote       $08
00088CA2 E701                       	dc.b	smpsNoAttack, $01
00088CA4 E10E                       	smpsAlterNote       $0E
00088CA6 E701                       	dc.b	smpsNoAttack, $01
00088CA8 E10F                       	smpsAlterNote       $0F
00088CAA E701                       	dc.b	smpsNoAttack, $01
00088CAC E10B                       	smpsAlterNote       $0B
00088CAE E701                       	dc.b	smpsNoAttack, $01
00088CB0 E105                       	smpsAlterNote       $05
00088CB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088CB6 E108                       	smpsAlterNote       $08
00088CB8 E701                       	dc.b	smpsNoAttack, $01
00088CBA E10E                       	smpsAlterNote       $0E
00088CBC E701                       	dc.b	smpsNoAttack, $01
00088CBE E10F                       	smpsAlterNote       $0F
00088CC0 800F                       	dc.b	nRst, $0F
00088CC2 E107                       	smpsAlterNote       $07
00088CC4 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00088CC8 E108                       	smpsAlterNote       $08
00088CCA C103                       	dc.b	nE5, $03
00088CCC E109                       	smpsAlterNote       $09
00088CCE C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00088CD4 E10B                       	smpsAlterNote       $0B
00088CD6 C607                       	dc.b	nA5, $07
00088CD8 E107                       	smpsAlterNote       $07
00088CDA BF03 8001                  	dc.b	nD5, $03, nRst, $01
00088CDE E106                       	smpsAlterNote       $06
00088CE0 C90D                       	dc.b	nC6, $0D
00088CE2 E107                       	smpsAlterNote       $07
00088CE4 CB03 8001                  	dc.b	nD6, $03, nRst, $01
00088CE8 E10C                       	smpsAlterNote       $0C
00088CEA C704                       	dc.b	nBb5, $04
00088CEC E10B                       	smpsAlterNote       $0B
00088CEE C604 8001                  	dc.b	nA5, $04, nRst, $01
00088CF2 E109                       	smpsAlterNote       $09
00088CF4 C404                       	dc.b	nG5, $04
00088CF6 E10B                       	smpsAlterNote       $0B
00088CF8 C60D                       	dc.b	nA5, $0D
00088CFA E108                       	smpsAlterNote       $08
00088CFC E701                       	dc.b	smpsNoAttack, $01
00088CFE E105                       	smpsAlterNote       $05
00088D00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D04 E10B                       	smpsAlterNote       $0B
00088D06 E701                       	dc.b	smpsNoAttack, $01
00088D08 E10F                       	smpsAlterNote       $0F
00088D0A E701                       	dc.b	smpsNoAttack, $01
00088D0C E10E                       	smpsAlterNote       $0E
00088D0E E701                       	dc.b	smpsNoAttack, $01
00088D10 E108                       	smpsAlterNote       $08
00088D12 E701                       	dc.b	smpsNoAttack, $01
00088D14 E104                       	smpsAlterNote       $04
00088D16 E701                       	dc.b	smpsNoAttack, $01
00088D18 E108                       	smpsAlterNote       $08
00088D1A E701                       	dc.b	smpsNoAttack, $01
00088D1C E10B                       	smpsAlterNote       $0B
00088D1E E701                       	dc.b	smpsNoAttack, $01
00088D20 E10F                       	smpsAlterNote       $0F
00088D22 E701                       	dc.b	smpsNoAttack, $01
00088D24 E10B                       	smpsAlterNote       $0B
00088D26 E701                       	dc.b	smpsNoAttack, $01
00088D28 E105                       	smpsAlterNote       $05
00088D2A E701                       	dc.b	smpsNoAttack, $01
00088D2C E104                       	smpsAlterNote       $04
00088D2E E701                       	dc.b	smpsNoAttack, $01
00088D30 E108                       	smpsAlterNote       $08
00088D32 E701                       	dc.b	smpsNoAttack, $01
00088D34 E10E                       	smpsAlterNote       $0E
00088D36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D3A E10B                       	smpsAlterNote       $0B
00088D3C E701                       	dc.b	smpsNoAttack, $01
00088D3E E105                       	smpsAlterNote       $05
00088D40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D44 E10B                       	smpsAlterNote       $0B
00088D46 E701                       	dc.b	smpsNoAttack, $01
00088D48 E10E                       	smpsAlterNote       $0E
00088D4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D4E E108                       	smpsAlterNote       $08
00088D50 E701                       	dc.b	smpsNoAttack, $01
00088D52 E105                       	smpsAlterNote       $05
00088D54 8001                       	dc.b	nRst, $01
00088D56 E109                       	smpsAlterNote       $09
00088D58 C401 8001                  	dc.b	nG5, $01, nRst, $01
00088D5C E10B                       	smpsAlterNote       $0B
00088D5E C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00088D66 E109                       	smpsAlterNote       $09
00088D68 C404                       	dc.b	nG5, $04
00088D6A E10B                       	smpsAlterNote       $0B
00088D6C C604 8001                  	dc.b	nA5, $04, nRst, $01
00088D70 E107                       	smpsAlterNote       $07
00088D72 BF0D                       	dc.b	nD5, $0D
00088D74 E101                       	smpsAlterNote       $01
00088D76 E701                       	dc.b	smpsNoAttack, $01
00088D78 E100                       	smpsAlterNote       $00
00088D7A E701                       	dc.b	smpsNoAttack, $01
00088D7C E104                       	smpsAlterNote       $04
00088D7E E701                       	dc.b	smpsNoAttack, $01
00088D80 E10A                       	smpsAlterNote       $0A
00088D82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D86 E107                       	smpsAlterNote       $07
00088D88 E701                       	dc.b	smpsNoAttack, $01
00088D8A E101                       	smpsAlterNote       $01
00088D8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D90 E107                       	smpsAlterNote       $07
00088D92 E701                       	dc.b	smpsNoAttack, $01
00088D94 E10A                       	smpsAlterNote       $0A
00088D96 E701                       	dc.b	smpsNoAttack, $01
00088D98 E10B                       	smpsAlterNote       $0B
00088D9A 8001                       	dc.b	nRst, $01
00088D9C E108                       	smpsAlterNote       $08
00088D9E 8001                       	dc.b	nRst, $01
00088DA0 E109                       	smpsAlterNote       $09
00088DA2 8001 C401                  	dc.b	nRst, $01, nG5, $01
00088DA6 E10B                       	smpsAlterNote       $0B
00088DA8 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00088DB0 E108                       	smpsAlterNote       $08
00088DB2 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00088DB6 E109                       	smpsAlterNote       $09
00088DB8 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00088DBC E108                       	smpsAlterNote       $08
00088DBE CD02 8001                  	dc.b	nE6, $02, nRst, $01
00088DC2 E106                       	smpsAlterNote       $06
00088DC4 C903                       	dc.b	nC6, $03
00088DC6 E109                       	smpsAlterNote       $09
00088DC8 C403 8001                  	dc.b	nG5, $03, nRst, $01
00088DCC E10C                       	smpsAlterNote       $0C
00088DCE C70D                       	dc.b	nBb5, $0D
00088DD0 E109                       	smpsAlterNote       $09
00088DD2 E701                       	dc.b	smpsNoAttack, $01
00088DD4 E105                       	smpsAlterNote       $05
00088DD6 E701                       	dc.b	smpsNoAttack, $01
00088DD8 E109                       	smpsAlterNote       $09
00088DDA E701                       	dc.b	smpsNoAttack, $01
00088DDC E10F                       	smpsAlterNote       $0F
00088DDE E701                       	dc.b	smpsNoAttack, $01
00088DE0 E110                       	smpsAlterNote       $10
00088DE2 E701                       	dc.b	smpsNoAttack, $01
00088DE4 E10C                       	smpsAlterNote       $0C
00088DE6 E701                       	dc.b	smpsNoAttack, $01
00088DE8 E106                       	smpsAlterNote       $06
00088DEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088DEE E109                       	smpsAlterNote       $09
00088DF0 E701                       	dc.b	smpsNoAttack, $01
00088DF2 E10F                       	smpsAlterNote       $0F
00088DF4 E701                       	dc.b	smpsNoAttack, $01
00088DF6 E110                       	smpsAlterNote       $10
00088DF8 8001                       	dc.b	nRst, $01
00088DFA E10B                       	smpsAlterNote       $0B
00088DFC C606 8001                  	dc.b	nA5, $06, nRst, $01
00088E00 E109                       	smpsAlterNote       $09
00088E02 C40D                       	dc.b	nG5, $0D
00088E04 E103                       	smpsAlterNote       $03
00088E06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E0A E106                       	smpsAlterNote       $06
00088E0C E701                       	dc.b	smpsNoAttack, $01
00088E0E E10C                       	smpsAlterNote       $0C
00088E10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E14 E106                       	smpsAlterNote       $06
00088E16 E701                       	dc.b	smpsNoAttack, $01
00088E18 E103                       	smpsAlterNote       $03
00088E1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E1E E109                       	smpsAlterNote       $09
00088E20 E701                       	dc.b	smpsNoAttack, $01
00088E22 E10D                       	smpsAlterNote       $0D
00088E24 E701                       	dc.b	smpsNoAttack, $01
00088E26 E10C                       	smpsAlterNote       $0C
00088E28 E701                       	dc.b	smpsNoAttack, $01
00088E2A E106                       	smpsAlterNote       $06
00088E2C E701                       	dc.b	smpsNoAttack, $01
00088E2E E102                       	smpsAlterNote       $02
00088E30 E701                       	dc.b	smpsNoAttack, $01
00088E32 E103                       	smpsAlterNote       $03
00088E34 8001                       	dc.b	nRst, $01
00088E36 E10B                       	smpsAlterNote       $0B
00088E38 C60D                       	dc.b	nA5, $0D
00088E3A E108                       	smpsAlterNote       $08
00088E3C E701                       	dc.b	smpsNoAttack, $01
00088E3E E104                       	smpsAlterNote       $04
00088E40 E701                       	dc.b	smpsNoAttack, $01
00088E42 E108                       	smpsAlterNote       $08
00088E44 E701                       	dc.b	smpsNoAttack, $01
00088E46 E10B                       	smpsAlterNote       $0B
00088E48 E701                       	dc.b	smpsNoAttack, $01
00088E4A E10F                       	smpsAlterNote       $0F
00088E4C E701                       	dc.b	smpsNoAttack, $01
00088E4E E10B                       	smpsAlterNote       $0B
00088E50 E701                       	dc.b	smpsNoAttack, $01
00088E52 E105                       	smpsAlterNote       $05
00088E54 E701                       	dc.b	smpsNoAttack, $01
00088E56 E104                       	smpsAlterNote       $04
00088E58 E701                       	dc.b	smpsNoAttack, $01
00088E5A E108                       	smpsAlterNote       $08
00088E5C E701                       	dc.b	smpsNoAttack, $01
00088E5E E10E                       	smpsAlterNote       $0E
00088E60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E64 E10B                       	smpsAlterNote       $0B
00088E66 E701                       	dc.b	smpsNoAttack, $01
00088E68 E105                       	smpsAlterNote       $05
00088E6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E6E E10C                       	smpsAlterNote       $0C
00088E70 C70E                       	dc.b	nBb5, $0E
00088E72 E106                       	smpsAlterNote       $06
00088E74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E78 E10C                       	smpsAlterNote       $0C
00088E7A E701                       	dc.b	smpsNoAttack, $01
00088E7C E10F                       	smpsAlterNote       $0F
00088E7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E82 E109                       	smpsAlterNote       $09
00088E84 E701                       	dc.b	smpsNoAttack, $01
00088E86 E105                       	smpsAlterNote       $05
00088E88 E701                       	dc.b	smpsNoAttack, $01
00088E8A E106                       	smpsAlterNote       $06
00088E8C E701                       	dc.b	smpsNoAttack, $01
00088E8E E10C                       	smpsAlterNote       $0C
00088E90 E701                       	dc.b	smpsNoAttack, $01
00088E92 E110                       	smpsAlterNote       $10
00088E94 E701                       	dc.b	smpsNoAttack, $01
00088E96 E10C                       	smpsAlterNote       $0C
00088E98 E701                       	dc.b	smpsNoAttack, $01
00088E9A E109                       	smpsAlterNote       $09
00088E9C E701                       	dc.b	smpsNoAttack, $01
00088E9E E105                       	smpsAlterNote       $05
00088EA0 E701                       	dc.b	smpsNoAttack, $01
00088EA2 E106                       	smpsAlterNote       $06
00088EA4 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00088EA8 E107                       	smpsAlterNote       $07
00088EAA CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
00088EAF E108                       	smpsAlterNote       $08
00088EB1 CD0D                       	dc.b	nE6, $0D
00088EB3 E107                       	smpsAlterNote       $07
00088EB5 CB0D                       	dc.b	nD6, $0D
00088EB7 E104                       	smpsAlterNote       $04
00088EB9 E701                       	dc.b	smpsNoAttack, $01
00088EBB E100                       	smpsAlterNote       $00
00088EBD E701                       	dc.b	smpsNoAttack, $01
00088EBF E101                       	smpsAlterNote       $01
00088EC1 E701                       	dc.b	smpsNoAttack, $01
00088EC3 E107                       	smpsAlterNote       $07
00088EC5 E701                       	dc.b	smpsNoAttack, $01
00088EC7 E10B                       	smpsAlterNote       $0B
00088EC9 E701                       	dc.b	smpsNoAttack, $01
00088ECB E107                       	smpsAlterNote       $07
00088ECD E701                       	dc.b	smpsNoAttack, $01
00088ECF E104                       	smpsAlterNote       $04
00088ED1 E701                       	dc.b	smpsNoAttack, $01
00088ED3 E100                       	smpsAlterNote       $00
00088ED5 E701                       	dc.b	smpsNoAttack, $01
00088ED7 E104                       	smpsAlterNote       $04
00088ED9 E701                       	dc.b	smpsNoAttack, $01
00088EDB E10A                       	smpsAlterNote       $0A
00088EDD E701                       	dc.b	smpsNoAttack, $01
00088EDF E10B                       	smpsAlterNote       $0B
00088EE1 E701                       	dc.b	smpsNoAttack, $01
00088EE3 E108                       	smpsAlterNote       $08
00088EE5 CC0D                       	dc.b	nEb6, $0D
00088EE7 E105                       	smpsAlterNote       $05
00088EE9 E701                       	dc.b	smpsNoAttack, $01
00088EEB E101                       	smpsAlterNote       $01
00088EED E701                       	dc.b	smpsNoAttack, $01
00088EEF E102                       	smpsAlterNote       $02
00088EF1 E701                       	dc.b	smpsNoAttack, $01
00088EF3 E108                       	smpsAlterNote       $08
00088EF5 E701                       	dc.b	smpsNoAttack, $01
00088EF7 E106                       	smpsAlterNote       $06
00088EF9 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00088F05 8001                       	dc.b	nRst, $01
00088F07 E107                       	smpsAlterNote       $07
00088F09 CB0D                       	dc.b	nD6, $0D
00088F0B E104                       	smpsAlterNote       $04
00088F0D E701                       	dc.b	smpsNoAttack, $01
00088F0F E100                       	smpsAlterNote       $00
00088F11 E701                       	dc.b	smpsNoAttack, $01
00088F13 E104                       	smpsAlterNote       $04
00088F15 E701                       	dc.b	smpsNoAttack, $01
00088F17 E107                       	smpsAlterNote       $07
00088F19 E701                       	dc.b	smpsNoAttack, $01
00088F1B E10B                       	smpsAlterNote       $0B
00088F1D E701                       	dc.b	smpsNoAttack, $01
00088F1F E107                       	smpsAlterNote       $07
00088F21 E701                       	dc.b	smpsNoAttack, $01
00088F23 E101                       	smpsAlterNote       $01
00088F25 E701                       	dc.b	smpsNoAttack, $01
00088F27 E100                       	smpsAlterNote       $00
00088F29 E701                       	dc.b	smpsNoAttack, $01
00088F2B E104                       	smpsAlterNote       $04
00088F2D E701                       	dc.b	smpsNoAttack, $01
00088F2F E10A                       	smpsAlterNote       $0A
00088F31 E701                       	dc.b	smpsNoAttack, $01
00088F33 E10B                       	smpsAlterNote       $0B
00088F35 8001                       	dc.b	nRst, $01
00088F37 E109                       	smpsAlterNote       $09
00088F39 CE0A                       	dc.b	nF6, $0A
00088F3B E108                       	smpsAlterNote       $08
00088F3D CC07                       	dc.b	nEb6, $07
00088F3F E106                       	smpsAlterNote       $06
00088F41 C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00088F4D E107                       	smpsAlterNote       $07
00088F4F CB0D                       	dc.b	nD6, $0D
00088F51 E101                       	smpsAlterNote       $01
00088F53 E701                       	dc.b	smpsNoAttack, $01
00088F55 E100                       	smpsAlterNote       $00
00088F57 E701                       	dc.b	smpsNoAttack, $01
00088F59 E104                       	smpsAlterNote       $04
00088F5B E701                       	dc.b	smpsNoAttack, $01
00088F5D E10A                       	smpsAlterNote       $0A
00088F5F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F63 E107                       	smpsAlterNote       $07
00088F65 E701                       	dc.b	smpsNoAttack, $01
00088F67 E101                       	smpsAlterNote       $01
00088F69 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F6D E107                       	smpsAlterNote       $07
00088F6F E701                       	dc.b	smpsNoAttack, $01
00088F71 E10A                       	smpsAlterNote       $0A
00088F73 E701                       	dc.b	smpsNoAttack, $01
00088F75 E10B                       	smpsAlterNote       $0B
00088F77 8001                       	dc.b	nRst, $01
00088F79 E108                       	smpsAlterNote       $08
00088F7B CC0D                       	dc.b	nEb6, $0D
00088F7D E102                       	smpsAlterNote       $02
00088F7F E701                       	dc.b	smpsNoAttack, $01
00088F81 E101                       	smpsAlterNote       $01
00088F83 E701                       	dc.b	smpsNoAttack, $01
00088F85 E105                       	smpsAlterNote       $05
00088F87 E701                       	dc.b	smpsNoAttack, $01
00088F89 E108                       	smpsAlterNote       $08
00088F8B 8001                       	dc.b	nRst, $01
00088F8D E106                       	smpsAlterNote       $06
00088F8F C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00088F9B 8001                       	dc.b	nRst, $01
00088F9D E107                       	smpsAlterNote       $07
00088F9F CB0D                       	dc.b	nD6, $0D
00088FA1 E101                       	smpsAlterNote       $01
00088FA3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FA7 E104                       	smpsAlterNote       $04
00088FA9 E701                       	dc.b	smpsNoAttack, $01
00088FAB E10A                       	smpsAlterNote       $0A
00088FAD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FB1 E104                       	smpsAlterNote       $04
00088FB3 E701                       	dc.b	smpsNoAttack, $01
00088FB5 E101                       	smpsAlterNote       $01
00088FB7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FBB E107                       	smpsAlterNote       $07
00088FBD E701                       	dc.b	smpsNoAttack, $01
00088FBF E10B                       	smpsAlterNote       $0B
00088FC1 E701                       	dc.b	smpsNoAttack, $01
00088FC3 E10A                       	smpsAlterNote       $0A
00088FC5 E701                       	dc.b	smpsNoAttack, $01
00088FC7 E104                       	smpsAlterNote       $04
00088FC9 E701                       	dc.b	smpsNoAttack, $01
00088FCB E100                       	smpsAlterNote       $00
00088FCD E701                       	dc.b	smpsNoAttack, $01
00088FCF E101                       	smpsAlterNote       $01
00088FD1 801C                       	dc.b	nRst, $1C
00088FD5 E107                       	smpsAlterNote       $07
00088FD7 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00088FDB E603                       	smpsAlterVol        $03
00088FDD F6F1 AD                    	smpsJump            music84_Jump03
00088FE0                            
00088FE0                            ; FM3 Data
00088FE0                            music84_FM3:
00088FE0 E0C0                       	smpsPan             panCenter, $00
00088FE4 E109                       	smpsAlterNote       $09
00088FE6 C203 8007                  	dc.b	nF5, $03, nRst, $07
00088FEA E108                       	smpsAlterNote       $08
00088FEC C103 800B                  	dc.b	nE5, $03, nRst, $0B
00088FF0 E10B                       	smpsAlterNote       $0B
00088FF2 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00088FF8 E040                       	smpsPan             panRight, $00
00088FFA E110                       	smpsAlterNote       $10
00088FFC E6F9                       	smpsAlterVol        $F9
00088FFE C702 8001                  	dc.b	nBb5, $02, nRst, $01
00089002 E10F                       	smpsAlterNote       $0F
00089004 C603                       	dc.b	nA5, $03
00089006 E10D                       	smpsAlterNote       $0D
00089008 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008900E E10C                       	smpsAlterNote       $0C
00089010 C103 8001                  	dc.b	nE5, $03, nRst, $01
00089014 E10A                       	smpsAlterNote       $0A
00089016 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008901A E10F                       	smpsAlterNote       $0F
0008901C BA01 8001                  	dc.b	nA4, $01, nRst, $01
00089020 E0C0                       	smpsPan             panCenter, $00
00089024 E109                       	smpsAlterNote       $09
00089026 E609                       	smpsAlterVol        $09
00089028 B603                       	dc.b	nF4, $03
0008902A                            
0008902A                            music84_Jump02:
0008902A E70A                       	dc.b	smpsNoAttack, $0A
0008902C E103                       	smpsAlterNote       $03
0008902E E701                       	dc.b	smpsNoAttack, $01
00089030 E102                       	smpsAlterNote       $02
00089032 E701                       	dc.b	smpsNoAttack, $01
00089034 E106                       	smpsAlterNote       $06
00089036 E701                       	dc.b	smpsNoAttack, $01
00089038 E10C                       	smpsAlterNote       $0C
0008903A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008903E E109                       	smpsAlterNote       $09
00089040 E701                       	dc.b	smpsNoAttack, $01
00089042 E103                       	smpsAlterNote       $03
00089044 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089048 E109                       	smpsAlterNote       $09
0008904A E701                       	dc.b	smpsNoAttack, $01
0008904C E10C                       	smpsAlterNote       $0C
0008904E E701                       	dc.b	smpsNoAttack, $01
00089050 E10D                       	smpsAlterNote       $0D
00089052 8001                       	dc.b	nRst, $01
00089054 E109                       	smpsAlterNote       $09
00089056 B80D                       	dc.b	nG4, $0D
00089058 E103                       	smpsAlterNote       $03
0008905A E701                       	dc.b	smpsNoAttack, $01
0008905C E102                       	smpsAlterNote       $02
0008905E E701                       	dc.b	smpsNoAttack, $01
00089060 E106                       	smpsAlterNote       $06
00089062 E701                       	dc.b	smpsNoAttack, $01
00089064 E10C                       	smpsAlterNote       $0C
00089066 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008906A E109                       	smpsAlterNote       $09
0008906C E701                       	dc.b	smpsNoAttack, $01
0008906E E103                       	smpsAlterNote       $03
00089070 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089074 E109                       	smpsAlterNote       $09
00089076 E701                       	dc.b	smpsNoAttack, $01
00089078 E10C                       	smpsAlterNote       $0C
0008907A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008907E E106                       	smpsAlterNote       $06
00089080 E701                       	dc.b	smpsNoAttack, $01
00089082 E102                       	smpsAlterNote       $02
00089084 E701                       	dc.b	smpsNoAttack, $01
00089086 E103                       	smpsAlterNote       $03
00089088 E701                       	dc.b	smpsNoAttack, $01
0008908A E109                       	smpsAlterNote       $09
0008908C E701                       	dc.b	smpsNoAttack, $01
0008908E E10D                       	smpsAlterNote       $0D
00089090 E701                       	dc.b	smpsNoAttack, $01
00089092 E109                       	smpsAlterNote       $09
00089094 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089098 E10B                       	smpsAlterNote       $0B
0008909A BA0D                       	dc.b	nA4, $0D
0008909C E105                       	smpsAlterNote       $05
0008909E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000890A2 E108                       	smpsAlterNote       $08
000890A4 E701                       	dc.b	smpsNoAttack, $01
000890A6 E10E                       	smpsAlterNote       $0E
000890A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000890AC E108                       	smpsAlterNote       $08
000890AE E701                       	dc.b	smpsNoAttack, $01
000890B0 E104                       	smpsAlterNote       $04
000890B2 E701                       	dc.b	smpsNoAttack, $01
000890B4 E105                       	smpsAlterNote       $05
000890B6 E701                       	dc.b	smpsNoAttack, $01
000890B8 E10B                       	smpsAlterNote       $0B
000890BA E701                       	dc.b	smpsNoAttack, $01
000890BC E10F                       	smpsAlterNote       $0F
000890BE E701                       	dc.b	smpsNoAttack, $01
000890C0 E10B                       	smpsAlterNote       $0B
000890C2 E701                       	dc.b	smpsNoAttack, $01
000890C4 E108                       	smpsAlterNote       $08
000890C6 E701                       	dc.b	smpsNoAttack, $01
000890C8 E104                       	smpsAlterNote       $04
000890CA E701                       	dc.b	smpsNoAttack, $01
000890CC E108                       	smpsAlterNote       $08
000890CE E701                       	dc.b	smpsNoAttack, $01
000890D0 E10E                       	smpsAlterNote       $0E
000890D2 E701                       	dc.b	smpsNoAttack, $01
000890D4 E10F                       	smpsAlterNote       $0F
000890D6 E701                       	dc.b	smpsNoAttack, $01
000890D8 E10B                       	smpsAlterNote       $0B
000890DA E701                       	dc.b	smpsNoAttack, $01
000890DC E105                       	smpsAlterNote       $05
000890DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000890E2 E108                       	smpsAlterNote       $08
000890E4 E701                       	dc.b	smpsNoAttack, $01
000890E6 E10E                       	smpsAlterNote       $0E
000890E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000890EC E108                       	smpsAlterNote       $08
000890EE E701                       	dc.b	smpsNoAttack, $01
000890F0 E105                       	smpsAlterNote       $05
000890F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000890F6 E10B                       	smpsAlterNote       $0B
000890F8 E701                       	dc.b	smpsNoAttack, $01
000890FA E10F                       	smpsAlterNote       $0F
000890FC E701                       	dc.b	smpsNoAttack, $01
000890FE E10E                       	smpsAlterNote       $0E
00089100 E701                       	dc.b	smpsNoAttack, $01
00089102 E108                       	smpsAlterNote       $08
00089104 E701                       	dc.b	smpsNoAttack, $01
00089106 E104                       	smpsAlterNote       $04
00089108 E701                       	dc.b	smpsNoAttack, $01
0008910A E105                       	smpsAlterNote       $05
0008910C 8001                       	dc.b	nRst, $01
0008910E E108                       	smpsAlterNote       $08
00089110 B50A                       	dc.b	nE4, $0A
00089112 E109                       	smpsAlterNote       $09
00089114 B60D                       	dc.b	nF4, $0D
00089116 E106                       	smpsAlterNote       $06
00089118 E701                       	dc.b	smpsNoAttack, $01
0008911A E103                       	smpsAlterNote       $03
0008911C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089120 E109                       	smpsAlterNote       $09
00089122 E701                       	dc.b	smpsNoAttack, $01
00089124 E10D                       	smpsAlterNote       $0D
00089126 E701                       	dc.b	smpsNoAttack, $01
00089128 E10C                       	smpsAlterNote       $0C
0008912A E701                       	dc.b	smpsNoAttack, $01
0008912C E106                       	smpsAlterNote       $06
0008912E E701                       	dc.b	smpsNoAttack, $01
00089130 E102                       	smpsAlterNote       $02
00089132 E701                       	dc.b	smpsNoAttack, $01
00089134 E106                       	smpsAlterNote       $06
00089136 E701                       	dc.b	smpsNoAttack, $01
00089138 E109                       	smpsAlterNote       $09
0008913A E701                       	dc.b	smpsNoAttack, $01
0008913C E10D                       	smpsAlterNote       $0D
0008913E E701                       	dc.b	smpsNoAttack, $01
00089140 E109                       	smpsAlterNote       $09
00089142 B80D                       	dc.b	nG4, $0D
00089144 E106                       	smpsAlterNote       $06
00089146 E701                       	dc.b	smpsNoAttack, $01
00089148 E103                       	smpsAlterNote       $03
0008914A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008914E E109                       	smpsAlterNote       $09
00089150 E701                       	dc.b	smpsNoAttack, $01
00089152 E10D                       	smpsAlterNote       $0D
00089154 E701                       	dc.b	smpsNoAttack, $01
00089156 E10C                       	smpsAlterNote       $0C
00089158 E701                       	dc.b	smpsNoAttack, $01
0008915A E106                       	smpsAlterNote       $06
0008915C E701                       	dc.b	smpsNoAttack, $01
0008915E E102                       	smpsAlterNote       $02
00089160 E701                       	dc.b	smpsNoAttack, $01
00089162 E106                       	smpsAlterNote       $06
00089164 E701                       	dc.b	smpsNoAttack, $01
00089166 E109                       	smpsAlterNote       $09
00089168 E701                       	dc.b	smpsNoAttack, $01
0008916A E10D                       	smpsAlterNote       $0D
0008916C E701                       	dc.b	smpsNoAttack, $01
0008916E E109                       	smpsAlterNote       $09
00089170 E701                       	dc.b	smpsNoAttack, $01
00089172 E103                       	smpsAlterNote       $03
00089174 E701                       	dc.b	smpsNoAttack, $01
00089176 E102                       	smpsAlterNote       $02
00089178 E701                       	dc.b	smpsNoAttack, $01
0008917A E106                       	smpsAlterNote       $06
0008917C E701                       	dc.b	smpsNoAttack, $01
0008917E E10C                       	smpsAlterNote       $0C
00089180 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089184 E109                       	smpsAlterNote       $09
00089186 E701                       	dc.b	smpsNoAttack, $01
00089188 E10B                       	smpsAlterNote       $0B
0008918A BA0D                       	dc.b	nA4, $0D
0008918C E108                       	smpsAlterNote       $08
0008918E E701                       	dc.b	smpsNoAttack, $01
00089190 E104                       	smpsAlterNote       $04
00089192 E701                       	dc.b	smpsNoAttack, $01
00089194 E108                       	smpsAlterNote       $08
00089196 E701                       	dc.b	smpsNoAttack, $01
00089198 E10B                       	smpsAlterNote       $0B
0008919A E701                       	dc.b	smpsNoAttack, $01
0008919C E10F                       	smpsAlterNote       $0F
0008919E E701                       	dc.b	smpsNoAttack, $01
000891A0 E10B                       	smpsAlterNote       $0B
000891A2 E701                       	dc.b	smpsNoAttack, $01
000891A4 E105                       	smpsAlterNote       $05
000891A6 E701                       	dc.b	smpsNoAttack, $01
000891A8 E104                       	smpsAlterNote       $04
000891AA E701                       	dc.b	smpsNoAttack, $01
000891AC E108                       	smpsAlterNote       $08
000891AE E701                       	dc.b	smpsNoAttack, $01
000891B0 E10E                       	smpsAlterNote       $0E
000891B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891B6 E10B                       	smpsAlterNote       $0B
000891B8 E701                       	dc.b	smpsNoAttack, $01
000891BA E105                       	smpsAlterNote       $05
000891BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891C0 E10B                       	smpsAlterNote       $0B
000891C2 E701                       	dc.b	smpsNoAttack, $01
000891C4 E10E                       	smpsAlterNote       $0E
000891C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891CA E108                       	smpsAlterNote       $08
000891CC E701                       	dc.b	smpsNoAttack, $01
000891CE E104                       	smpsAlterNote       $04
000891D0 E701                       	dc.b	smpsNoAttack, $01
000891D2 E105                       	smpsAlterNote       $05
000891D4 E701                       	dc.b	smpsNoAttack, $01
000891D6 E10B                       	smpsAlterNote       $0B
000891D8 E701                       	dc.b	smpsNoAttack, $01
000891DA E10F                       	smpsAlterNote       $0F
000891DC E701                       	dc.b	smpsNoAttack, $01
000891DE E10B                       	smpsAlterNote       $0B
000891E0 E701                       	dc.b	smpsNoAttack, $01
000891E2 E108                       	smpsAlterNote       $08
000891E4 E701                       	dc.b	smpsNoAttack, $01
000891E6 E105                       	smpsAlterNote       $05
000891E8 8001                       	dc.b	nRst, $01
000891EA E109                       	smpsAlterNote       $09
000891EC B609 8001                  	dc.b	nF4, $09, nRst, $01
000891F0 E108                       	smpsAlterNote       $08
000891F2 B506 8001                  	dc.b	nE4, $06, nRst, $01
000891F6 E107                       	smpsAlterNote       $07
000891F8 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000891FC E108                       	smpsAlterNote       $08
000891FE B502 8001                  	dc.b	nE4, $02, nRst, $01
00089202 E109                       	smpsAlterNote       $09
00089204 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
0008920A E10B                       	smpsAlterNote       $0B
0008920C BA0D                       	dc.b	nA4, $0D
0008920E E108                       	smpsAlterNote       $08
00089210 E701                       	dc.b	smpsNoAttack, $01
00089212 E104                       	smpsAlterNote       $04
00089214 E701                       	dc.b	smpsNoAttack, $01
00089216 E108                       	smpsAlterNote       $08
00089218 E701                       	dc.b	smpsNoAttack, $01
0008921A E10E                       	smpsAlterNote       $0E
0008921C E701                       	dc.b	smpsNoAttack, $01
0008921E E10F                       	smpsAlterNote       $0F
00089220 E701                       	dc.b	smpsNoAttack, $01
00089222 E10B                       	smpsAlterNote       $0B
00089224 E701                       	dc.b	smpsNoAttack, $01
00089226 E105                       	smpsAlterNote       $05
00089228 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008922C E108                       	smpsAlterNote       $08
0008922E E701                       	dc.b	smpsNoAttack, $01
00089230 E10E                       	smpsAlterNote       $0E
00089232 E701                       	dc.b	smpsNoAttack, $01
00089234 E10F                       	smpsAlterNote       $0F
00089236 8001                       	dc.b	nRst, $01
00089238 E109                       	smpsAlterNote       $09
0008923A C20D                       	dc.b	nF5, $0D
0008923C E103                       	smpsAlterNote       $03
0008923E E701                       	dc.b	smpsNoAttack, $01
00089240 E102                       	smpsAlterNote       $02
00089242 E701                       	dc.b	smpsNoAttack, $01
00089244 E106                       	smpsAlterNote       $06
00089246 E701                       	dc.b	smpsNoAttack, $01
00089248 E10C                       	smpsAlterNote       $0C
0008924A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008924E E109                       	smpsAlterNote       $09
00089250 E701                       	dc.b	smpsNoAttack, $01
00089252 E103                       	smpsAlterNote       $03
00089254 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089258 E109                       	smpsAlterNote       $09
0008925A E701                       	dc.b	smpsNoAttack, $01
0008925C E10C                       	smpsAlterNote       $0C
0008925E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089262 E106                       	smpsAlterNote       $06
00089264 E701                       	dc.b	smpsNoAttack, $01
00089266 E102                       	smpsAlterNote       $02
00089268 E701                       	dc.b	smpsNoAttack, $01
0008926A E103                       	smpsAlterNote       $03
0008926C E701                       	dc.b	smpsNoAttack, $01
0008926E E109                       	smpsAlterNote       $09
00089270 E701                       	dc.b	smpsNoAttack, $01
00089272 E10D                       	smpsAlterNote       $0D
00089274 E701                       	dc.b	smpsNoAttack, $01
00089276 E109                       	smpsAlterNote       $09
00089278 E701                       	dc.b	smpsNoAttack, $01
0008927A E106                       	smpsAlterNote       $06
0008927C E701                       	dc.b	smpsNoAttack, $01
0008927E E102                       	smpsAlterNote       $02
00089280 E701                       	dc.b	smpsNoAttack, $01
00089282 E106                       	smpsAlterNote       $06
00089284 E701                       	dc.b	smpsNoAttack, $01
00089286 E10C                       	smpsAlterNote       $0C
00089288 E701                       	dc.b	smpsNoAttack, $01
0008928A E10D                       	smpsAlterNote       $0D
0008928C E701                       	dc.b	smpsNoAttack, $01
0008928E E109                       	smpsAlterNote       $09
00089290 E701                       	dc.b	smpsNoAttack, $01
00089292 E103                       	smpsAlterNote       $03
00089294 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089298 E106                       	smpsAlterNote       $06
0008929A E701                       	dc.b	smpsNoAttack, $01
0008929C E10C                       	smpsAlterNote       $0C
0008929E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892A2 E106                       	smpsAlterNote       $06
000892A4 E701                       	dc.b	smpsNoAttack, $01
000892A6 E103                       	smpsAlterNote       $03
000892A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892AC E109                       	smpsAlterNote       $09
000892AE E701                       	dc.b	smpsNoAttack, $01
000892B0 E10D                       	smpsAlterNote       $0D
000892B2 E701                       	dc.b	smpsNoAttack, $01
000892B4 E10C                       	smpsAlterNote       $0C
000892B6 E701                       	dc.b	smpsNoAttack, $01
000892B8 E106                       	smpsAlterNote       $06
000892BA E701                       	dc.b	smpsNoAttack, $01
000892BC E102                       	smpsAlterNote       $02
000892BE E701                       	dc.b	smpsNoAttack, $01
000892C0 E106                       	smpsAlterNote       $06
000892C2 E701                       	dc.b	smpsNoAttack, $01
000892C4 E109                       	smpsAlterNote       $09
000892C6 E701                       	dc.b	smpsNoAttack, $01
000892C8 E10D                       	smpsAlterNote       $0D
000892CA E701                       	dc.b	smpsNoAttack, $01
000892CC E109                       	smpsAlterNote       $09
000892CE E701                       	dc.b	smpsNoAttack, $01
000892D0 E103                       	smpsAlterNote       $03
000892D2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000892D6 E109                       	smpsAlterNote       $09
000892D8 C206                       	dc.b	nF5, $06
000892DA E108                       	smpsAlterNote       $08
000892DC C10E                       	dc.b	nE5, $0E
000892DE E102                       	smpsAlterNote       $02
000892E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892E4 E108                       	smpsAlterNote       $08
000892E6 E701                       	dc.b	smpsNoAttack, $01
000892E8 E10B                       	smpsAlterNote       $0B
000892EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892EE E105                       	smpsAlterNote       $05
000892F0 E701                       	dc.b	smpsNoAttack, $01
000892F2 E101                       	smpsAlterNote       $01
000892F4 E701                       	dc.b	smpsNoAttack, $01
000892F6 E102                       	smpsAlterNote       $02
000892F8 E701                       	dc.b	smpsNoAttack, $01
000892FA E108                       	smpsAlterNote       $08
000892FC E701                       	dc.b	smpsNoAttack, $01
000892FE E10C                       	smpsAlterNote       $0C
00089300 E701                       	dc.b	smpsNoAttack, $01
00089302 E107                       	smpsAlterNote       $07
00089304 BF0E                       	dc.b	nD5, $0E
00089306 E101                       	smpsAlterNote       $01
00089308 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008930C E107                       	smpsAlterNote       $07
0008930E E701                       	dc.b	smpsNoAttack, $01
00089310 E10A                       	smpsAlterNote       $0A
00089312 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089316 E104                       	smpsAlterNote       $04
00089318 E701                       	dc.b	smpsNoAttack, $01
0008931A E100                       	smpsAlterNote       $00
0008931C E701                       	dc.b	smpsNoAttack, $01
0008931E E104                       	smpsAlterNote       $04
00089320 E701                       	dc.b	smpsNoAttack, $01
00089322 E107                       	smpsAlterNote       $07
00089324 E701                       	dc.b	smpsNoAttack, $01
00089326 E10B                       	smpsAlterNote       $0B
00089328 E701                       	dc.b	smpsNoAttack, $01
0008932A E107                       	smpsAlterNote       $07
0008932C E701                       	dc.b	smpsNoAttack, $01
0008932E E101                       	smpsAlterNote       $01
00089330 E701                       	dc.b	smpsNoAttack, $01
00089332 E100                       	smpsAlterNote       $00
00089334 E701                       	dc.b	smpsNoAttack, $01
00089336 E104                       	smpsAlterNote       $04
00089338 E701                       	dc.b	smpsNoAttack, $01
0008933A E10A                       	smpsAlterNote       $0A
0008933C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089340 E107                       	smpsAlterNote       $07
00089342 E701                       	dc.b	smpsNoAttack, $01
00089344 E101                       	smpsAlterNote       $01
00089346 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008934A E107                       	smpsAlterNote       $07
0008934C E701                       	dc.b	smpsNoAttack, $01
0008934E E10A                       	smpsAlterNote       $0A
00089350 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089354 E104                       	smpsAlterNote       $04
00089356 E701                       	dc.b	smpsNoAttack, $01
00089358 E100                       	smpsAlterNote       $00
0008935A E701                       	dc.b	smpsNoAttack, $01
0008935C E101                       	smpsAlterNote       $01
0008935E E701                       	dc.b	smpsNoAttack, $01
00089360 E107                       	smpsAlterNote       $07
00089362 E701                       	dc.b	smpsNoAttack, $01
00089364 E10B                       	smpsAlterNote       $0B
00089366 E701                       	dc.b	smpsNoAttack, $01
00089368 E107                       	smpsAlterNote       $07
0008936A E701                       	dc.b	smpsNoAttack, $01
0008936C E104                       	smpsAlterNote       $04
0008936E E701                       	dc.b	smpsNoAttack, $01
00089370 E100                       	smpsAlterNote       $00
00089372 E701                       	dc.b	smpsNoAttack, $01
00089374 E104                       	smpsAlterNote       $04
00089376 E701                       	dc.b	smpsNoAttack, $01
00089378 E10A                       	smpsAlterNote       $0A
0008937A E701                       	dc.b	smpsNoAttack, $01
0008937C E10B                       	smpsAlterNote       $0B
0008937E E701                       	dc.b	smpsNoAttack, $01
00089380 E107                       	smpsAlterNote       $07
00089382 E701                       	dc.b	smpsNoAttack, $01
00089384 E101                       	smpsAlterNote       $01
00089386 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008938A E104                       	smpsAlterNote       $04
0008938C E701                       	dc.b	smpsNoAttack, $01
0008938E E10A                       	smpsAlterNote       $0A
00089390 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089394 E104                       	smpsAlterNote       $04
00089396 E701                       	dc.b	smpsNoAttack, $01
00089398 E101                       	smpsAlterNote       $01
0008939A E701                       	dc.b	smpsNoAttack, $01
0008939E E107                       	smpsAlterNote       $07
000893A0 E6FF                       	smpsAlterVol        $FF
000893A2 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
000893AE 8004                       	dc.b	nRst, $04
000893B2 E109                       	smpsAlterNote       $09
000893B4 E602                       	smpsAlterVol        $02
000893B6 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
000893BC E108                       	smpsAlterNote       $08
000893BE B502 8001                  	dc.b	nE4, $02, nRst, $01
000893C2 E109                       	smpsAlterNote       $09
000893C4 B60D                       	dc.b	nF4, $0D
000893C6 E106                       	smpsAlterNote       $06
000893C8 E701                       	dc.b	smpsNoAttack, $01
000893CA E102                       	smpsAlterNote       $02
000893CC E701                       	dc.b	smpsNoAttack, $01
000893CE E106                       	smpsAlterNote       $06
000893D0 E701                       	dc.b	smpsNoAttack, $01
000893D2 E109                       	smpsAlterNote       $09
000893D4 E701                       	dc.b	smpsNoAttack, $01
000893D6 E10D                       	smpsAlterNote       $0D
000893D8 E701                       	dc.b	smpsNoAttack, $01
000893DA E109                       	smpsAlterNote       $09
000893DC E701                       	dc.b	smpsNoAttack, $01
000893DE E103                       	smpsAlterNote       $03
000893E0 E701                       	dc.b	smpsNoAttack, $01
000893E2 E102                       	smpsAlterNote       $02
000893E4 E701                       	dc.b	smpsNoAttack, $01
000893E6 E106                       	smpsAlterNote       $06
000893E8 E701                       	dc.b	smpsNoAttack, $01
000893EA E10C                       	smpsAlterNote       $0C
000893EC E701                       	dc.b	smpsNoAttack, $01
000893EE E10D                       	smpsAlterNote       $0D
000893F0 8001                       	dc.b	nRst, $01
000893F2 E109                       	smpsAlterNote       $09
000893F4 B80D                       	dc.b	nG4, $0D
000893F6 E106                       	smpsAlterNote       $06
000893F8 E701                       	dc.b	smpsNoAttack, $01
000893FA E102                       	smpsAlterNote       $02
000893FC E701                       	dc.b	smpsNoAttack, $01
000893FE E106                       	smpsAlterNote       $06
00089400 E701                       	dc.b	smpsNoAttack, $01
00089402 E10C                       	smpsAlterNote       $0C
00089404 E701                       	dc.b	smpsNoAttack, $01
00089406 E10D                       	smpsAlterNote       $0D
00089408 E701                       	dc.b	smpsNoAttack, $01
0008940A E109                       	smpsAlterNote       $09
0008940C E701                       	dc.b	smpsNoAttack, $01
0008940E E103                       	smpsAlterNote       $03
00089410 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089414 E106                       	smpsAlterNote       $06
00089416 E701                       	dc.b	smpsNoAttack, $01
00089418 E10C                       	smpsAlterNote       $0C
0008941A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008941E E106                       	smpsAlterNote       $06
00089420 E701                       	dc.b	smpsNoAttack, $01
00089422 E103                       	smpsAlterNote       $03
00089424 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089428 E109                       	smpsAlterNote       $09
0008942A E701                       	dc.b	smpsNoAttack, $01
0008942C E10D                       	smpsAlterNote       $0D
0008942E E701                       	dc.b	smpsNoAttack, $01
00089430 E10C                       	smpsAlterNote       $0C
00089432 E701                       	dc.b	smpsNoAttack, $01
00089434 E109                       	smpsAlterNote       $09
00089436 8001                       	dc.b	nRst, $01
00089438 E10B                       	smpsAlterNote       $0B
0008943A BA03                       	dc.b	nA4, $03
0008943C E10C                       	smpsAlterNote       $0C
0008943E BB03 8001                  	dc.b	nBb4, $03, nRst, $01
00089442 E10B                       	smpsAlterNote       $0B
00089444 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
0008944A E10C                       	smpsAlterNote       $0C
0008944C C703 8001                  	dc.b	nBb5, $03, nRst, $01
00089450 E10B                       	smpsAlterNote       $0B
00089452 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00089458 E10C                       	smpsAlterNote       $0C
0008945A D303                       	dc.b	nBb6, $03
0008945C E10B                       	smpsAlterNote       $0B
0008945E D20D                       	dc.b	nA6, $0D
00089460 E108                       	smpsAlterNote       $08
00089462 E701                       	dc.b	smpsNoAttack, $01
00089464 E104                       	smpsAlterNote       $04
00089466 E701                       	dc.b	smpsNoAttack, $01
00089468 E105                       	smpsAlterNote       $05
0008946A E701                       	dc.b	smpsNoAttack, $01
0008946C E10B                       	smpsAlterNote       $0B
0008946E E701                       	dc.b	smpsNoAttack, $01
00089470 E10F                       	smpsAlterNote       $0F
00089472 E701                       	dc.b	smpsNoAttack, $01
00089474 E10B                       	smpsAlterNote       $0B
00089476 E701                       	dc.b	smpsNoAttack, $01
00089478 E108                       	smpsAlterNote       $08
0008947A E701                       	dc.b	smpsNoAttack, $01
0008947C E104                       	smpsAlterNote       $04
0008947E E701                       	dc.b	smpsNoAttack, $01
00089480 E108                       	smpsAlterNote       $08
00089482 E701                       	dc.b	smpsNoAttack, $01
00089484 E10E                       	smpsAlterNote       $0E
00089486 E701                       	dc.b	smpsNoAttack, $01
00089488 E10F                       	smpsAlterNote       $0F
0008948A E701                       	dc.b	smpsNoAttack, $01
0008948C E10B                       	smpsAlterNote       $0B
0008948E E701                       	dc.b	smpsNoAttack, $01
00089490 E105                       	smpsAlterNote       $05
00089492 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00089498 E109                       	smpsAlterNote       $09
0008949A CE07                       	dc.b	nF6, $07
0008949C E108                       	smpsAlterNote       $08
0008949E CD06 8001                  	dc.b	nE6, $06, nRst, $01
000894A2 E109                       	smpsAlterNote       $09
000894A4 CE03 8001                  	dc.b	nF6, $03, nRst, $01
000894A8 E108                       	smpsAlterNote       $08
000894AA CC0D                       	dc.b	nEb6, $0D
000894AC E102                       	smpsAlterNote       $02
000894AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894B2 E108                       	smpsAlterNote       $08
000894B4 E701                       	dc.b	smpsNoAttack, $01
000894B6 E10B                       	smpsAlterNote       $0B
000894B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894BC E105                       	smpsAlterNote       $05
000894BE E701                       	dc.b	smpsNoAttack, $01
000894C0 E101                       	smpsAlterNote       $01
000894C2 E701                       	dc.b	smpsNoAttack, $01
000894C4 E102                       	smpsAlterNote       $02
000894C6 E701                       	dc.b	smpsNoAttack, $01
000894C8 E108                       	smpsAlterNote       $08
000894CA E701                       	dc.b	smpsNoAttack, $01
000894CC E10C                       	smpsAlterNote       $0C
000894CE E701                       	dc.b	smpsNoAttack, $01
000894D0 E108                       	smpsAlterNote       $08
000894D2 E701                       	dc.b	smpsNoAttack, $01
000894D4 E105                       	smpsAlterNote       $05
000894D6 E701                       	dc.b	smpsNoAttack, $01
000894D8 E101                       	smpsAlterNote       $01
000894DA E701                       	dc.b	smpsNoAttack, $01
000894DC E105                       	smpsAlterNote       $05
000894DE E701                       	dc.b	smpsNoAttack, $01
000894E0 E10B                       	smpsAlterNote       $0B
000894E2 E701                       	dc.b	smpsNoAttack, $01
000894E4 E10C                       	smpsAlterNote       $0C
000894E6 E701                       	dc.b	smpsNoAttack, $01
000894E8 E108                       	smpsAlterNote       $08
000894EA E701                       	dc.b	smpsNoAttack, $01
000894EC E107                       	smpsAlterNote       $07
000894EE CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
000894F8 E10B                       	smpsAlterNote       $0B
000894FA C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00089504 E109                       	smpsAlterNote       $09
00089506 C203                       	dc.b	nF5, $03
00089508 E108                       	smpsAlterNote       $08
0008950A C103 8001                  	dc.b	nE5, $03, nRst, $01
0008950E E109                       	smpsAlterNote       $09
00089510 C20D                       	dc.b	nF5, $0D
00089512 E108                       	smpsAlterNote       $08
00089514 C10E                       	dc.b	nE5, $0E
00089516 E107                       	smpsAlterNote       $07
00089518 BF0D                       	dc.b	nD5, $0D
0008951A E104                       	smpsAlterNote       $04
0008951C E701                       	dc.b	smpsNoAttack, $01
0008951E E100                       	smpsAlterNote       $00
00089520 E701                       	dc.b	smpsNoAttack, $01
00089522 E104                       	smpsAlterNote       $04
00089524 E701                       	dc.b	smpsNoAttack, $01
00089526 E107                       	smpsAlterNote       $07
00089528 E701                       	dc.b	smpsNoAttack, $01
0008952A E10B                       	smpsAlterNote       $0B
0008952C E701                       	dc.b	smpsNoAttack, $01
0008952E E107                       	smpsAlterNote       $07
00089530 E701                       	dc.b	smpsNoAttack, $01
00089532 E101                       	smpsAlterNote       $01
00089534 E701                       	dc.b	smpsNoAttack, $01
00089536 E100                       	smpsAlterNote       $00
00089538 E701                       	dc.b	smpsNoAttack, $01
0008953A E104                       	smpsAlterNote       $04
0008953C E701                       	dc.b	smpsNoAttack, $01
0008953E E10A                       	smpsAlterNote       $0A
00089540 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089544 E107                       	smpsAlterNote       $07
00089546 E701                       	dc.b	smpsNoAttack, $01
00089548 E101                       	smpsAlterNote       $01
0008954A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008954E E107                       	smpsAlterNote       $07
00089550 E701                       	dc.b	smpsNoAttack, $01
00089552 E10A                       	smpsAlterNote       $0A
00089554 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089558 E104                       	smpsAlterNote       $04
0008955A E701                       	dc.b	smpsNoAttack, $01
0008955C E100                       	smpsAlterNote       $00
0008955E E701                       	dc.b	smpsNoAttack, $01
00089560 E101                       	smpsAlterNote       $01
00089562 E701                       	dc.b	smpsNoAttack, $01
00089564 E107                       	smpsAlterNote       $07
00089566 E701                       	dc.b	smpsNoAttack, $01
00089568 E10B                       	smpsAlterNote       $0B
0008956A E701                       	dc.b	smpsNoAttack, $01
0008956C E107                       	smpsAlterNote       $07
0008956E E701                       	dc.b	smpsNoAttack, $01
00089570 E104                       	smpsAlterNote       $04
00089572 E701                       	dc.b	smpsNoAttack, $01
00089574 E100                       	smpsAlterNote       $00
00089576 E701                       	dc.b	smpsNoAttack, $01
00089578 E104                       	smpsAlterNote       $04
0008957A E701                       	dc.b	smpsNoAttack, $01
0008957C E10A                       	smpsAlterNote       $0A
0008957E E701                       	dc.b	smpsNoAttack, $01
00089580 E10B                       	smpsAlterNote       $0B
00089582 E701                       	dc.b	smpsNoAttack, $01
00089584 E107                       	smpsAlterNote       $07
00089586 E701                       	dc.b	smpsNoAttack, $01
00089588 E101                       	smpsAlterNote       $01
0008958A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008958E E104                       	smpsAlterNote       $04
00089590 E701                       	dc.b	smpsNoAttack, $01
00089592 E10A                       	smpsAlterNote       $0A
00089594 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089598 E104                       	smpsAlterNote       $04
0008959A E701                       	dc.b	smpsNoAttack, $01
0008959C E101                       	smpsAlterNote       $01
0008959E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895A2 E107                       	smpsAlterNote       $07
000895A4 E701                       	dc.b	smpsNoAttack, $01
000895A6 E10B                       	smpsAlterNote       $0B
000895A8 E701                       	dc.b	smpsNoAttack, $01
000895AA E10A                       	smpsAlterNote       $0A
000895AC E701                       	dc.b	smpsNoAttack, $01
000895AE E104                       	smpsAlterNote       $04
000895B0 E701                       	dc.b	smpsNoAttack, $01
000895B2 E100                       	smpsAlterNote       $00
000895B4 E701                       	dc.b	smpsNoAttack, $01
000895B6 E104                       	smpsAlterNote       $04
000895B8 E701                       	dc.b	smpsNoAttack, $01
000895BA E107                       	smpsAlterNote       $07
000895BC E701                       	dc.b	smpsNoAttack, $01
000895BE E10B                       	smpsAlterNote       $0B
000895C0 E701                       	dc.b	smpsNoAttack, $01
000895C2 E107                       	smpsAlterNote       $07
000895C4 E701                       	dc.b	smpsNoAttack, $01
000895C6 E101                       	smpsAlterNote       $01
000895C8 E701                       	dc.b	smpsNoAttack, $01
000895CA E100                       	smpsAlterNote       $00
000895CC E701                       	dc.b	smpsNoAttack, $01
000895CE E104                       	smpsAlterNote       $04
000895D0 E701                       	dc.b	smpsNoAttack, $01
000895D2 E10A                       	smpsAlterNote       $0A
000895D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895D8 E107                       	smpsAlterNote       $07
000895DA E701                       	dc.b	smpsNoAttack, $01
000895DC E101                       	smpsAlterNote       $01
000895DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895E2 E107                       	smpsAlterNote       $07
000895E4 E701                       	dc.b	smpsNoAttack, $01
000895E6 E10A                       	smpsAlterNote       $0A
000895E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895EC E104                       	smpsAlterNote       $04
000895EE E701                       	dc.b	smpsNoAttack, $01
000895F0 E100                       	smpsAlterNote       $00
000895F2 E701                       	dc.b	smpsNoAttack, $01
000895F4 E101                       	smpsAlterNote       $01
000895F6 E701                       	dc.b	smpsNoAttack, $01
000895F8 E107                       	smpsAlterNote       $07
000895FA E701                       	dc.b	smpsNoAttack, $01
000895FC E10B                       	smpsAlterNote       $0B
000895FE E701                       	dc.b	smpsNoAttack, $01
00089600 E107                       	smpsAlterNote       $07
00089602 E701                       	dc.b	smpsNoAttack, $01
00089604 E104                       	smpsAlterNote       $04
00089606 E701                       	dc.b	smpsNoAttack, $01
00089608 E100                       	smpsAlterNote       $00
0008960A E701                       	dc.b	smpsNoAttack, $01
0008960C E101                       	smpsAlterNote       $01
0008960E 8001                       	dc.b	nRst, $01
00089610 E109                       	smpsAlterNote       $09
00089612 C20D                       	dc.b	nF5, $0D
00089614 E106                       	smpsAlterNote       $06
00089616 E701                       	dc.b	smpsNoAttack, $01
00089618 E102                       	smpsAlterNote       $02
0008961A E701                       	dc.b	smpsNoAttack, $01
0008961C E106                       	smpsAlterNote       $06
0008961E E701                       	dc.b	smpsNoAttack, $01
00089620 E10C                       	smpsAlterNote       $0C
00089622 E701                       	dc.b	smpsNoAttack, $01
00089624 E10D                       	smpsAlterNote       $0D
00089626 E701                       	dc.b	smpsNoAttack, $01
00089628 E109                       	smpsAlterNote       $09
0008962A E701                       	dc.b	smpsNoAttack, $01
0008962C E103                       	smpsAlterNote       $03
0008962E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089632 E106                       	smpsAlterNote       $06
00089634 E701                       	dc.b	smpsNoAttack, $01
00089636 E10C                       	smpsAlterNote       $0C
00089638 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008963C E106                       	smpsAlterNote       $06
0008963E E701                       	dc.b	smpsNoAttack, $01
00089640 E103                       	smpsAlterNote       $03
00089642 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089646 E109                       	smpsAlterNote       $09
00089648 E701                       	dc.b	smpsNoAttack, $01
0008964A E10D                       	smpsAlterNote       $0D
0008964C E701                       	dc.b	smpsNoAttack, $01
0008964E E10C                       	smpsAlterNote       $0C
00089650 E701                       	dc.b	smpsNoAttack, $01
00089652 E109                       	smpsAlterNote       $09
00089654 8001                       	dc.b	nRst, $01
00089656 E108                       	smpsAlterNote       $08
00089658 C10D                       	dc.b	nE5, $0D
0008965A E109                       	smpsAlterNote       $09
0008965C C20A 8001                  	dc.b	nF5, $0A, nRst, $01
00089660 E108                       	smpsAlterNote       $08
00089662 C10D                       	dc.b	nE5, $0D
00089664 E102                       	smpsAlterNote       $02
00089666 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008966A E105                       	smpsAlterNote       $05
0008966C E701                       	dc.b	smpsNoAttack, $01
0008966E E108                       	smpsAlterNote       $08
00089670 8001                       	dc.b	nRst, $01
00089672 E107                       	smpsAlterNote       $07
00089674 BF0D                       	dc.b	nD5, $0D
00089676 E108                       	smpsAlterNote       $08
00089678 C107                       	dc.b	nE5, $07
0008967A E109                       	smpsAlterNote       $09
0008967C C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
00089682 E10B                       	smpsAlterNote       $0B
00089684 C603                       	dc.b	nA5, $03
00089686 E10C                       	smpsAlterNote       $0C
00089688 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008968E E10B                       	smpsAlterNote       $0B
00089690 C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
00089696 E109                       	smpsAlterNote       $09
00089698 D003                       	dc.b	nG6, $03
0008969A E108                       	smpsAlterNote       $08
0008969C CD02 8001                  	dc.b	nE6, $02, nRst, $01
000896A0 E10B                       	smpsAlterNote       $0B
000896A2 C601 8001                  	dc.b	nA5, $01, nRst, $01
000896A6 E108                       	smpsAlterNote       $08
000896A8 C102                       	dc.b	nE5, $02
000896AC E10C                       	smpsAlterNote       $0C
000896AE E6FB                       	smpsAlterVol        $FB
000896B0 A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
000896BC 8001                       	dc.b	nRst, $01
000896BE E10B                       	smpsAlterNote       $0B
000896C0 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000896C8 E107                       	smpsAlterNote       $07
000896CA A706 8001                  	dc.b	nD3, $06, nRst, $01
000896CE E10B                       	smpsAlterNote       $0B
000896D0 A203                       	dc.b	nA2, $03
000896D2 E109                       	smpsAlterNote       $09
000896D4 AA03 8001                  	dc.b	nF3, $03, nRst, $01
000896D8 E108                       	smpsAlterNote       $08
000896DA A906                       	dc.b	nE3, $06
000896DC E107                       	smpsAlterNote       $07
000896DE A703 8001                  	dc.b	nD3, $03, nRst, $01
000896E2 E106                       	smpsAlterNote       $06
000896E4 A503                       	dc.b	nC3, $03
000896E6 E10C                       	smpsAlterNote       $0C
000896E8 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000896EC E10B                       	smpsAlterNote       $0B
000896EE A203 8004                  	dc.b	nA2, $03, nRst, $04
000896F2 E11B                       	smpsAlterNote       $1B
000896F4 C401                       	dc.b	nG5, $01
000896F6 E1F4                       	smpsAlterNote       $F4
000896F8 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000896FB E106                       	smpsAlterNote       $06
000896FD E701                       	dc.b	smpsNoAttack, $01
000896FF E10F                       	smpsAlterNote       $0F
00089701 E701                       	dc.b	smpsNoAttack, $01
00089703 E1E4                       	smpsAlterNote       $E4
00089705 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00089708 E1F6                       	smpsAlterNote       $F6
0008970A E701                       	dc.b	smpsNoAttack, $01
0008970C E108                       	smpsAlterNote       $08
0008970E E701                       	dc.b	smpsNoAttack, $01
00089710 E10B                       	smpsAlterNote       $0B
00089712 E706                       	dc.b	smpsNoAttack, $06
00089714 E105                       	smpsAlterNote       $05
00089716 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008971A E108                       	smpsAlterNote       $08
0008971C E701                       	dc.b	smpsNoAttack, $01
0008971E E10E                       	smpsAlterNote       $0E
00089720 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089724 E108                       	smpsAlterNote       $08
00089726 E701                       	dc.b	smpsNoAttack, $01
00089728 E105                       	smpsAlterNote       $05
0008972A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008972E E10B                       	smpsAlterNote       $0B
00089730 E701                       	dc.b	smpsNoAttack, $01
00089732 E10F                       	smpsAlterNote       $0F
00089734 E701                       	dc.b	smpsNoAttack, $01
00089736 E10E                       	smpsAlterNote       $0E
00089738 E701                       	dc.b	smpsNoAttack, $01
0008973A E108                       	smpsAlterNote       $08
0008973C E701                       	dc.b	smpsNoAttack, $01
0008973E E104                       	smpsAlterNote       $04
00089740 E701                       	dc.b	smpsNoAttack, $01
00089742 E108                       	smpsAlterNote       $08
00089744 E701                       	dc.b	smpsNoAttack, $01
00089746 E10B                       	smpsAlterNote       $0B
00089748 E701                       	dc.b	smpsNoAttack, $01
0008974A E10F                       	smpsAlterNote       $0F
0008974C E701                       	dc.b	smpsNoAttack, $01
0008974E E10B                       	smpsAlterNote       $0B
00089750 E701                       	dc.b	smpsNoAttack, $01
00089752 E105                       	smpsAlterNote       $05
00089754 E701                       	dc.b	smpsNoAttack, $01
00089756 E104                       	smpsAlterNote       $04
00089758 E701                       	dc.b	smpsNoAttack, $01
0008975A E108                       	smpsAlterNote       $08
0008975C E701                       	dc.b	smpsNoAttack, $01
0008975E E10E                       	smpsAlterNote       $0E
00089760 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089764 E10B                       	smpsAlterNote       $0B
00089766 E701                       	dc.b	smpsNoAttack, $01
00089768 E105                       	smpsAlterNote       $05
0008976A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008976E E10B                       	smpsAlterNote       $0B
00089770 E701                       	dc.b	smpsNoAttack, $01
00089772 E10E                       	smpsAlterNote       $0E
00089774 E701                       	dc.b	smpsNoAttack, $01
00089776 E10F                       	smpsAlterNote       $0F
00089778 8001                       	dc.b	nRst, $01
0008977A E109                       	smpsAlterNote       $09
0008977C C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00089782 E108                       	smpsAlterNote       $08
00089784 C101 8001                  	dc.b	nE5, $01, nRst, $01
00089788 E109                       	smpsAlterNote       $09
0008978A C202                       	dc.b	nF5, $02
0008978C E108                       	smpsAlterNote       $08
0008978E C102                       	dc.b	nE5, $02
00089790 E107                       	smpsAlterNote       $07
00089792 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00089796 E108                       	smpsAlterNote       $08
00089798 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008979C E107                       	smpsAlterNote       $07
0008979E BF02                       	dc.b	nD5, $02
000897A0 E106                       	smpsAlterNote       $06
000897A2 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000897A6 E107                       	smpsAlterNote       $07
000897A8 BF01 8001                  	dc.b	nD5, $01, nRst, $01
000897AC E106                       	smpsAlterNote       $06
000897AE BD02                       	dc.b	nC5, $02
000897B0 E10C                       	smpsAlterNote       $0C
000897B2 BB02                       	dc.b	nBb4, $02
000897B4 E106                       	smpsAlterNote       $06
000897B6 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000897BA E10C                       	smpsAlterNote       $0C
000897BC BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000897C0 E10B                       	smpsAlterNote       $0B
000897C2 BA02                       	dc.b	nA4, $02
000897C4 E10C                       	smpsAlterNote       $0C
000897C6 BB02                       	dc.b	nBb4, $02
000897C8 E10B                       	smpsAlterNote       $0B
000897CA BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000897D4 E108                       	smpsAlterNote       $08
000897D6 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
000897DE E107                       	smpsAlterNote       $07
000897E0 BE02                       	dc.b	nCs5, $02
000897E2 E10B                       	smpsAlterNote       $0B
000897E4 BA02                       	dc.b	nA4, $02
000897E6 E109                       	smpsAlterNote       $09
000897E8 B802 8001                  	dc.b	nG4, $02, nRst, $01
000897EC E108                       	smpsAlterNote       $08
000897EE B501 8001                  	dc.b	nE4, $01, nRst, $01
000897F2 E10B                       	smpsAlterNote       $0B
000897F4 AE02                       	dc.b	nA3, $02
000897F6 E10C                       	smpsAlterNote       $0C
000897F8 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
00089804 E10B                       	smpsAlterNote       $0B
00089806 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008980E E107                       	smpsAlterNote       $07
00089810 A706 8001                  	dc.b	nD3, $06, nRst, $01
00089814 E10B                       	smpsAlterNote       $0B
00089816 A203                       	dc.b	nA2, $03
00089818 E109                       	smpsAlterNote       $09
0008981A AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008981E E108                       	smpsAlterNote       $08
00089820 A906 8001                  	dc.b	nE3, $06, nRst, $01
00089824 E107                       	smpsAlterNote       $07
00089826 A702 8001                  	dc.b	nD3, $02, nRst, $01
0008982A E106                       	smpsAlterNote       $06
0008982C A503                       	dc.b	nC3, $03
0008982E E10C                       	smpsAlterNote       $0C
00089830 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00089836 E107                       	smpsAlterNote       $07
00089838 B20D                       	dc.b	nCs4, $0D
0008983A E104                       	smpsAlterNote       $04
0008983C E701                       	dc.b	smpsNoAttack, $01
0008983E E100                       	smpsAlterNote       $00
00089840 E701                       	dc.b	smpsNoAttack, $01
00089842 E104                       	smpsAlterNote       $04
00089844 E701                       	dc.b	smpsNoAttack, $01
00089846 E10A                       	smpsAlterNote       $0A
00089848 E701                       	dc.b	smpsNoAttack, $01
0008984A E10B                       	smpsAlterNote       $0B
0008984C E701                       	dc.b	smpsNoAttack, $01
0008984E E107                       	smpsAlterNote       $07
00089850 E701                       	dc.b	smpsNoAttack, $01
00089852 E101                       	smpsAlterNote       $01
00089854 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089858 E104                       	smpsAlterNote       $04
0008985A E701                       	dc.b	smpsNoAttack, $01
0008985C E10A                       	smpsAlterNote       $0A
0008985E E701                       	dc.b	smpsNoAttack, $01
00089860 E10B                       	smpsAlterNote       $0B
00089862 8001                       	dc.b	nRst, $01
00089864 E107                       	smpsAlterNote       $07
00089866 B30D                       	dc.b	nD4, $0D
00089868 E104                       	smpsAlterNote       $04
0008986A E701                       	dc.b	smpsNoAttack, $01
0008986C E100                       	smpsAlterNote       $00
0008986E E701                       	dc.b	smpsNoAttack, $01
00089870 E104                       	smpsAlterNote       $04
00089872 E701                       	dc.b	smpsNoAttack, $01
00089874 E10A                       	smpsAlterNote       $0A
00089876 E701                       	dc.b	smpsNoAttack, $01
00089878 E10B                       	smpsAlterNote       $0B
0008987A E701                       	dc.b	smpsNoAttack, $01
0008987C E107                       	smpsAlterNote       $07
0008987E E701                       	dc.b	smpsNoAttack, $01
00089880 E101                       	smpsAlterNote       $01
00089882 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089886 E104                       	smpsAlterNote       $04
00089888 E701                       	dc.b	smpsNoAttack, $01
0008988A E10A                       	smpsAlterNote       $0A
0008988C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089890 E104                       	smpsAlterNote       $04
00089892 E701                       	dc.b	smpsNoAttack, $01
00089894 E101                       	smpsAlterNote       $01
00089896 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008989A E107                       	smpsAlterNote       $07
0008989C E701                       	dc.b	smpsNoAttack, $01
0008989E E10B                       	smpsAlterNote       $0B
000898A0 E701                       	dc.b	smpsNoAttack, $01
000898A2 E10A                       	smpsAlterNote       $0A
000898A4 E701                       	dc.b	smpsNoAttack, $01
000898A6 E107                       	smpsAlterNote       $07
000898A8 8001                       	dc.b	nRst, $01
000898AA E108                       	smpsAlterNote       $08
000898AC B50D                       	dc.b	nE4, $0D
000898AE E102                       	smpsAlterNote       $02
000898B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898B4 E105                       	smpsAlterNote       $05
000898B6 E701                       	dc.b	smpsNoAttack, $01
000898B8 E10B                       	smpsAlterNote       $0B
000898BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898BE E105                       	smpsAlterNote       $05
000898C0 E701                       	dc.b	smpsNoAttack, $01
000898C2 E102                       	smpsAlterNote       $02
000898C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898C8 E108                       	smpsAlterNote       $08
000898CA E701                       	dc.b	smpsNoAttack, $01
000898CC E10C                       	smpsAlterNote       $0C
000898CE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000898D2 E107                       	smpsAlterNote       $07
000898D4 B30D                       	dc.b	nD4, $0D
000898D6 E101                       	smpsAlterNote       $01
000898D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898DC E104                       	smpsAlterNote       $04
000898DE E701                       	dc.b	smpsNoAttack, $01
000898E0 E10A                       	smpsAlterNote       $0A
000898E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898E6 E104                       	smpsAlterNote       $04
000898E8 E701                       	dc.b	smpsNoAttack, $01
000898EA E101                       	smpsAlterNote       $01
000898EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898F0 E107                       	smpsAlterNote       $07
000898F2 E701                       	dc.b	smpsNoAttack, $01
000898F4 E10B                       	smpsAlterNote       $0B
000898F6 E701                       	dc.b	smpsNoAttack, $01
000898F8 E10A                       	smpsAlterNote       $0A
000898FA E701                       	dc.b	smpsNoAttack, $01
000898FC E104                       	smpsAlterNote       $04
000898FE E701                       	dc.b	smpsNoAttack, $01
00089900 E100                       	smpsAlterNote       $00
00089902 E701                       	dc.b	smpsNoAttack, $01
00089904 E104                       	smpsAlterNote       $04
00089906 E701                       	dc.b	smpsNoAttack, $01
00089908 E107                       	smpsAlterNote       $07
0008990A E701                       	dc.b	smpsNoAttack, $01
0008990C E10B                       	smpsAlterNote       $0B
0008990E E701                       	dc.b	smpsNoAttack, $01
00089910 E107                       	smpsAlterNote       $07
00089912 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
00089916 E101                       	smpsAlterNote       $01
00089918 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008991C E107                       	smpsAlterNote       $07
0008991E E701                       	dc.b	smpsNoAttack, $01
00089920 E10A                       	smpsAlterNote       $0A
00089922 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089926 E104                       	smpsAlterNote       $04
00089928 E701                       	dc.b	smpsNoAttack, $01
0008992A E100                       	smpsAlterNote       $00
0008992C E701                       	dc.b	smpsNoAttack, $01
0008992E E101                       	smpsAlterNote       $01
00089930 E701                       	dc.b	smpsNoAttack, $01
00089932 E107                       	smpsAlterNote       $07
00089934 E701                       	dc.b	smpsNoAttack, $01
00089936 E10B                       	smpsAlterNote       $0B
00089938 E701                       	dc.b	smpsNoAttack, $01
0008993A E107                       	smpsAlterNote       $07
0008993C B30E                       	dc.b	nD4, $0E
0008993E E101                       	smpsAlterNote       $01
00089940 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089944 E107                       	smpsAlterNote       $07
00089946 E701                       	dc.b	smpsNoAttack, $01
00089948 E10A                       	smpsAlterNote       $0A
0008994A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008994E E104                       	smpsAlterNote       $04
00089950 E701                       	dc.b	smpsNoAttack, $01
00089952 E100                       	smpsAlterNote       $00
00089954 E701                       	dc.b	smpsNoAttack, $01
00089956 E101                       	smpsAlterNote       $01
00089958 E701                       	dc.b	smpsNoAttack, $01
0008995A E107                       	smpsAlterNote       $07
0008995C E701                       	dc.b	smpsNoAttack, $01
0008995E E10B                       	smpsAlterNote       $0B
00089960 E701                       	dc.b	smpsNoAttack, $01
00089962 E107                       	smpsAlterNote       $07
00089964 E701                       	dc.b	smpsNoAttack, $01
00089966 E104                       	smpsAlterNote       $04
00089968 E701                       	dc.b	smpsNoAttack, $01
0008996A E100                       	smpsAlterNote       $00
0008996C E701                       	dc.b	smpsNoAttack, $01
0008996E E104                       	smpsAlterNote       $04
00089970 E701                       	dc.b	smpsNoAttack, $01
00089972 E10A                       	smpsAlterNote       $0A
00089974 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089978 E107                       	smpsAlterNote       $07
0008997A E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008997E E104                       	smpsAlterNote       $04
00089980 E701                       	dc.b	smpsNoAttack, $01
00089982 E100                       	smpsAlterNote       $00
00089984 E701                       	dc.b	smpsNoAttack, $01
00089986 E101                       	smpsAlterNote       $01
00089988 E701                       	dc.b	smpsNoAttack, $01
0008998A E107                       	smpsAlterNote       $07
0008998C E701                       	dc.b	smpsNoAttack, $01
0008998E E10B                       	smpsAlterNote       $0B
00089990 E701                       	dc.b	smpsNoAttack, $01
00089992 E107                       	smpsAlterNote       $07
00089994 E701                       	dc.b	smpsNoAttack, $01
00089996 E104                       	smpsAlterNote       $04
00089998 E701                       	dc.b	smpsNoAttack, $01
0008999A E100                       	smpsAlterNote       $00
0008999C E701                       	dc.b	smpsNoAttack, $01
0008999E E104                       	smpsAlterNote       $04
000899A0 E701                       	dc.b	smpsNoAttack, $01
000899A2 E10A                       	smpsAlterNote       $0A
000899A4 E701                       	dc.b	smpsNoAttack, $01
000899A6 E10B                       	smpsAlterNote       $0B
000899A8 E701                       	dc.b	smpsNoAttack, $01
000899AC E6FF                       	smpsAlterVol        $FF
000899AE A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
000899BA 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
000899C2 E109                       	smpsAlterNote       $09
000899C4 E601                       	smpsAlterVol        $01
000899C6 B60D                       	dc.b	nF4, $0D
000899C8 E106                       	smpsAlterNote       $06
000899CA E701                       	dc.b	smpsNoAttack, $01
000899CC E102                       	smpsAlterNote       $02
000899CE E701                       	dc.b	smpsNoAttack, $01
000899D0 E106                       	smpsAlterNote       $06
000899D2 E701                       	dc.b	smpsNoAttack, $01
000899D4 E109                       	smpsAlterNote       $09
000899D6 E701                       	dc.b	smpsNoAttack, $01
000899D8 E10D                       	smpsAlterNote       $0D
000899DA E701                       	dc.b	smpsNoAttack, $01
000899DC E109                       	smpsAlterNote       $09
000899DE E701                       	dc.b	smpsNoAttack, $01
000899E0 E103                       	smpsAlterNote       $03
000899E2 E701                       	dc.b	smpsNoAttack, $01
000899E4 E102                       	smpsAlterNote       $02
000899E6 E701                       	dc.b	smpsNoAttack, $01
000899E8 E106                       	smpsAlterNote       $06
000899EA E701                       	dc.b	smpsNoAttack, $01
000899EC E10C                       	smpsAlterNote       $0C
000899EE E701                       	dc.b	smpsNoAttack, $01
000899F0 E10D                       	smpsAlterNote       $0D
000899F2 8001                       	dc.b	nRst, $01
000899F4 E109                       	smpsAlterNote       $09
000899F6 B80D                       	dc.b	nG4, $0D
000899F8 E106                       	smpsAlterNote       $06
000899FA E701                       	dc.b	smpsNoAttack, $01
000899FC E102                       	smpsAlterNote       $02
000899FE E701                       	dc.b	smpsNoAttack, $01
00089A00 E106                       	smpsAlterNote       $06
00089A02 E701                       	dc.b	smpsNoAttack, $01
00089A04 E109                       	smpsAlterNote       $09
00089A06 E701                       	dc.b	smpsNoAttack, $01
00089A08 E10D                       	smpsAlterNote       $0D
00089A0A E701                       	dc.b	smpsNoAttack, $01
00089A0C E109                       	smpsAlterNote       $09
00089A0E E701                       	dc.b	smpsNoAttack, $01
00089A10 E103                       	smpsAlterNote       $03
00089A12 E701                       	dc.b	smpsNoAttack, $01
00089A14 E102                       	smpsAlterNote       $02
00089A16 E701                       	dc.b	smpsNoAttack, $01
00089A18 E106                       	smpsAlterNote       $06
00089A1A E701                       	dc.b	smpsNoAttack, $01
00089A1C E10C                       	smpsAlterNote       $0C
00089A1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A22 E106                       	smpsAlterNote       $06
00089A24 E701                       	dc.b	smpsNoAttack, $01
00089A26 E103                       	smpsAlterNote       $03
00089A28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A2C E109                       	smpsAlterNote       $09
00089A2E E701                       	dc.b	smpsNoAttack, $01
00089A30 E10D                       	smpsAlterNote       $0D
00089A32 E701                       	dc.b	smpsNoAttack, $01
00089A34 E10C                       	smpsAlterNote       $0C
00089A36 E701                       	dc.b	smpsNoAttack, $01
00089A38 E109                       	smpsAlterNote       $09
00089A3A 8001                       	dc.b	nRst, $01
00089A3C E10B                       	smpsAlterNote       $0B
00089A3E BA0D                       	dc.b	nA4, $0D
00089A40 E105                       	smpsAlterNote       $05
00089A42 E701                       	dc.b	smpsNoAttack, $01
00089A44 E104                       	smpsAlterNote       $04
00089A46 E701                       	dc.b	smpsNoAttack, $01
00089A48 E108                       	smpsAlterNote       $08
00089A4A E701                       	dc.b	smpsNoAttack, $01
00089A4C E10E                       	smpsAlterNote       $0E
00089A4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A52 E10B                       	smpsAlterNote       $0B
00089A54 E701                       	dc.b	smpsNoAttack, $01
00089A56 E105                       	smpsAlterNote       $05
00089A58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A5C E10B                       	smpsAlterNote       $0B
00089A5E E701                       	dc.b	smpsNoAttack, $01
00089A60 E10E                       	smpsAlterNote       $0E
00089A62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A66 E108                       	smpsAlterNote       $08
00089A68 E701                       	dc.b	smpsNoAttack, $01
00089A6A E104                       	smpsAlterNote       $04
00089A6C E701                       	dc.b	smpsNoAttack, $01
00089A6E E105                       	smpsAlterNote       $05
00089A70 E701                       	dc.b	smpsNoAttack, $01
00089A72 E10B                       	smpsAlterNote       $0B
00089A74 E701                       	dc.b	smpsNoAttack, $01
00089A76 E10F                       	smpsAlterNote       $0F
00089A78 E701                       	dc.b	smpsNoAttack, $01
00089A7A E10B                       	smpsAlterNote       $0B
00089A7C E701                       	dc.b	smpsNoAttack, $01
00089A7E E108                       	smpsAlterNote       $08
00089A80 E701                       	dc.b	smpsNoAttack, $01
00089A82 E104                       	smpsAlterNote       $04
00089A84 E701                       	dc.b	smpsNoAttack, $01
00089A86 E108                       	smpsAlterNote       $08
00089A88 E701                       	dc.b	smpsNoAttack, $01
00089A8A E10E                       	smpsAlterNote       $0E
00089A8C E701                       	dc.b	smpsNoAttack, $01
00089A8E E10F                       	smpsAlterNote       $0F
00089A90 E701                       	dc.b	smpsNoAttack, $01
00089A92 E10B                       	smpsAlterNote       $0B
00089A94 E701                       	dc.b	smpsNoAttack, $01
00089A96 E105                       	smpsAlterNote       $05
00089A98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A9C E108                       	smpsAlterNote       $08
00089A9E E701                       	dc.b	smpsNoAttack, $01
00089AA0 E10E                       	smpsAlterNote       $0E
00089AA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AA6 E108                       	smpsAlterNote       $08
00089AA8 E701                       	dc.b	smpsNoAttack, $01
00089AAA E105                       	smpsAlterNote       $05
00089AAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AB0 E108                       	smpsAlterNote       $08
00089AB2 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
00089AB6 E109                       	smpsAlterNote       $09
00089AB8 B60D                       	dc.b	nF4, $0D
00089ABA E103                       	smpsAlterNote       $03
00089ABC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AC0 E106                       	smpsAlterNote       $06
00089AC2 E701                       	dc.b	smpsNoAttack, $01
00089AC4 E10C                       	smpsAlterNote       $0C
00089AC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089ACA E106                       	smpsAlterNote       $06
00089ACC E701                       	dc.b	smpsNoAttack, $01
00089ACE E103                       	smpsAlterNote       $03
00089AD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AD4 E109                       	smpsAlterNote       $09
00089AD6 E701                       	dc.b	smpsNoAttack, $01
00089AD8 E10D                       	smpsAlterNote       $0D
00089ADA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089ADE E109                       	smpsAlterNote       $09
00089AE0 B80D                       	dc.b	nG4, $0D
00089AE2 E103                       	smpsAlterNote       $03
00089AE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AE8 E109                       	smpsAlterNote       $09
00089AEA E701                       	dc.b	smpsNoAttack, $01
00089AEC E10C                       	smpsAlterNote       $0C
00089AEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AF2 E106                       	smpsAlterNote       $06
00089AF4 E701                       	dc.b	smpsNoAttack, $01
00089AF6 E102                       	smpsAlterNote       $02
00089AF8 E701                       	dc.b	smpsNoAttack, $01
00089AFA E103                       	smpsAlterNote       $03
00089AFC E701                       	dc.b	smpsNoAttack, $01
00089AFE E109                       	smpsAlterNote       $09
00089B00 E701                       	dc.b	smpsNoAttack, $01
00089B02 E10D                       	smpsAlterNote       $0D
00089B04 E701                       	dc.b	smpsNoAttack, $01
00089B06 E109                       	smpsAlterNote       $09
00089B08 E701                       	dc.b	smpsNoAttack, $01
00089B0A E106                       	smpsAlterNote       $06
00089B0C E701                       	dc.b	smpsNoAttack, $01
00089B0E E102                       	smpsAlterNote       $02
00089B10 E701                       	dc.b	smpsNoAttack, $01
00089B12 E106                       	smpsAlterNote       $06
00089B14 E701                       	dc.b	smpsNoAttack, $01
00089B16 E10C                       	smpsAlterNote       $0C
00089B18 E701                       	dc.b	smpsNoAttack, $01
00089B1A E10D                       	smpsAlterNote       $0D
00089B1C E701                       	dc.b	smpsNoAttack, $01
00089B1E E109                       	smpsAlterNote       $09
00089B20 E701                       	dc.b	smpsNoAttack, $01
00089B22 E10B                       	smpsAlterNote       $0B
00089B24 BA0D                       	dc.b	nA4, $0D
00089B26 E108                       	smpsAlterNote       $08
00089B28 E701                       	dc.b	smpsNoAttack, $01
00089B2A E105                       	smpsAlterNote       $05
00089B2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B30 E10B                       	smpsAlterNote       $0B
00089B32 E701                       	dc.b	smpsNoAttack, $01
00089B34 E10F                       	smpsAlterNote       $0F
00089B36 E701                       	dc.b	smpsNoAttack, $01
00089B38 E10E                       	smpsAlterNote       $0E
00089B3A E701                       	dc.b	smpsNoAttack, $01
00089B3C E108                       	smpsAlterNote       $08
00089B3E E701                       	dc.b	smpsNoAttack, $01
00089B40 E104                       	smpsAlterNote       $04
00089B42 E701                       	dc.b	smpsNoAttack, $01
00089B44 E108                       	smpsAlterNote       $08
00089B46 E701                       	dc.b	smpsNoAttack, $01
00089B48 E10B                       	smpsAlterNote       $0B
00089B4A E701                       	dc.b	smpsNoAttack, $01
00089B4C E10F                       	smpsAlterNote       $0F
00089B4E E701                       	dc.b	smpsNoAttack, $01
00089B50 E10B                       	smpsAlterNote       $0B
00089B52 E701                       	dc.b	smpsNoAttack, $01
00089B54 E105                       	smpsAlterNote       $05
00089B56 E701                       	dc.b	smpsNoAttack, $01
00089B58 E104                       	smpsAlterNote       $04
00089B5A E701                       	dc.b	smpsNoAttack, $01
00089B5C E108                       	smpsAlterNote       $08
00089B5E E701                       	dc.b	smpsNoAttack, $01
00089B60 E10E                       	smpsAlterNote       $0E
00089B62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B66 E10B                       	smpsAlterNote       $0B
00089B68 E701                       	dc.b	smpsNoAttack, $01
00089B6A E105                       	smpsAlterNote       $05
00089B6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B70 E10B                       	smpsAlterNote       $0B
00089B72 E701                       	dc.b	smpsNoAttack, $01
00089B74 E10E                       	smpsAlterNote       $0E
00089B76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B7A E108                       	smpsAlterNote       $08
00089B7C E701                       	dc.b	smpsNoAttack, $01
00089B7E E105                       	smpsAlterNote       $05
00089B80 8001                       	dc.b	nRst, $01
00089B82 E109                       	smpsAlterNote       $09
00089B84 B60A                       	dc.b	nF4, $0A
00089B86 E108                       	smpsAlterNote       $08
00089B88 B507                       	dc.b	nE4, $07
00089B8A E107                       	smpsAlterNote       $07
00089B8C B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00089B90 E108                       	smpsAlterNote       $08
00089B92 B503                       	dc.b	nE4, $03
00089B94 E109                       	smpsAlterNote       $09
00089B96 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
00089B9E E10B                       	smpsAlterNote       $0B
00089BA0 BA0D                       	dc.b	nA4, $0D
00089BA2 E108                       	smpsAlterNote       $08
00089BA4 E701                       	dc.b	smpsNoAttack, $01
00089BA6 E104                       	smpsAlterNote       $04
00089BA8 E701                       	dc.b	smpsNoAttack, $01
00089BAA E108                       	smpsAlterNote       $08
00089BAC E701                       	dc.b	smpsNoAttack, $01
00089BAE E10B                       	smpsAlterNote       $0B
00089BB0 E701                       	dc.b	smpsNoAttack, $01
00089BB2 E10F                       	smpsAlterNote       $0F
00089BB4 E701                       	dc.b	smpsNoAttack, $01
00089BB6 E10B                       	smpsAlterNote       $0B
00089BB8 E701                       	dc.b	smpsNoAttack, $01
00089BBA E105                       	smpsAlterNote       $05
00089BBC E701                       	dc.b	smpsNoAttack, $01
00089BBE E104                       	smpsAlterNote       $04
00089BC0 E701                       	dc.b	smpsNoAttack, $01
00089BC2 E108                       	smpsAlterNote       $08
00089BC4 E701                       	dc.b	smpsNoAttack, $01
00089BC6 E10E                       	smpsAlterNote       $0E
00089BC8 E701                       	dc.b	smpsNoAttack, $01
00089BCA E10F                       	smpsAlterNote       $0F
00089BCC 8001                       	dc.b	nRst, $01
00089BCE E109                       	smpsAlterNote       $09
00089BD0 C20D                       	dc.b	nF5, $0D
00089BD2 E106                       	smpsAlterNote       $06
00089BD4 E701                       	dc.b	smpsNoAttack, $01
00089BD6 E102                       	smpsAlterNote       $02
00089BD8 E701                       	dc.b	smpsNoAttack, $01
00089BDA E106                       	smpsAlterNote       $06
00089BDC E701                       	dc.b	smpsNoAttack, $01
00089BDE E109                       	smpsAlterNote       $09
00089BE0 E701                       	dc.b	smpsNoAttack, $01
00089BE2 E10D                       	smpsAlterNote       $0D
00089BE4 E701                       	dc.b	smpsNoAttack, $01
00089BE6 E109                       	smpsAlterNote       $09
00089BE8 E701                       	dc.b	smpsNoAttack, $01
00089BEA E103                       	smpsAlterNote       $03
00089BEC E701                       	dc.b	smpsNoAttack, $01
00089BEE E102                       	smpsAlterNote       $02
00089BF0 E701                       	dc.b	smpsNoAttack, $01
00089BF2 E106                       	smpsAlterNote       $06
00089BF4 E701                       	dc.b	smpsNoAttack, $01
00089BF6 E10C                       	smpsAlterNote       $0C
00089BF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BFC E109                       	smpsAlterNote       $09
00089BFE E701                       	dc.b	smpsNoAttack, $01
00089C00 E103                       	smpsAlterNote       $03
00089C02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C06 E109                       	smpsAlterNote       $09
00089C08 E701                       	dc.b	smpsNoAttack, $01
00089C0A E10C                       	smpsAlterNote       $0C
00089C0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C10 E106                       	smpsAlterNote       $06
00089C12 E701                       	dc.b	smpsNoAttack, $01
00089C14 E102                       	smpsAlterNote       $02
00089C16 E701                       	dc.b	smpsNoAttack, $01
00089C18 E103                       	smpsAlterNote       $03
00089C1A E701                       	dc.b	smpsNoAttack, $01
00089C1C E109                       	smpsAlterNote       $09
00089C1E E701                       	dc.b	smpsNoAttack, $01
00089C20 E10D                       	smpsAlterNote       $0D
00089C22 E701                       	dc.b	smpsNoAttack, $01
00089C24 E109                       	smpsAlterNote       $09
00089C26 E701                       	dc.b	smpsNoAttack, $01
00089C28 E106                       	smpsAlterNote       $06
00089C2A E701                       	dc.b	smpsNoAttack, $01
00089C2C E102                       	smpsAlterNote       $02
00089C2E E701                       	dc.b	smpsNoAttack, $01
00089C30 E106                       	smpsAlterNote       $06
00089C32 E701                       	dc.b	smpsNoAttack, $01
00089C34 E10C                       	smpsAlterNote       $0C
00089C36 E701                       	dc.b	smpsNoAttack, $01
00089C38 E10D                       	smpsAlterNote       $0D
00089C3A E701                       	dc.b	smpsNoAttack, $01
00089C3C E109                       	smpsAlterNote       $09
00089C3E E701                       	dc.b	smpsNoAttack, $01
00089C40 E103                       	smpsAlterNote       $03
00089C42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C46 E106                       	smpsAlterNote       $06
00089C48 E701                       	dc.b	smpsNoAttack, $01
00089C4A E10C                       	smpsAlterNote       $0C
00089C4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C50 E106                       	smpsAlterNote       $06
00089C52 E701                       	dc.b	smpsNoAttack, $01
00089C54 E103                       	smpsAlterNote       $03
00089C56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C5A E109                       	smpsAlterNote       $09
00089C5C E701                       	dc.b	smpsNoAttack, $01
00089C5E E10D                       	smpsAlterNote       $0D
00089C60 E701                       	dc.b	smpsNoAttack, $01
00089C62 E10C                       	smpsAlterNote       $0C
00089C64 E701                       	dc.b	smpsNoAttack, $01
00089C66 E106                       	smpsAlterNote       $06
00089C68 E701                       	dc.b	smpsNoAttack, $01
00089C6A E103                       	smpsAlterNote       $03
00089C6C 8001                       	dc.b	nRst, $01
00089C6E E109                       	smpsAlterNote       $09
00089C70 C206 8001                  	dc.b	nF5, $06, nRst, $01
00089C76 E10C                       	smpsAlterNote       $0C
00089C78 E601                       	smpsAlterVol        $01
00089C7A BB0D                       	dc.b	nBb4, $0D
00089C7C E106                       	smpsAlterNote       $06
00089C7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C82 E109                       	smpsAlterNote       $09
00089C84 E701                       	dc.b	smpsNoAttack, $01
00089C86 E10F                       	smpsAlterNote       $0F
00089C88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C8C E109                       	smpsAlterNote       $09
00089C8E E701                       	dc.b	smpsNoAttack, $01
00089C90 E106                       	smpsAlterNote       $06
00089C92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C96 E10C                       	smpsAlterNote       $0C
00089C98 E701                       	dc.b	smpsNoAttack, $01
00089C9A E110                       	smpsAlterNote       $10
00089C9C E701                       	dc.b	smpsNoAttack, $01
00089C9E E10F                       	smpsAlterNote       $0F
00089CA0 E701                       	dc.b	smpsNoAttack, $01
00089CA2 E109                       	smpsAlterNote       $09
00089CA4 E701                       	dc.b	smpsNoAttack, $01
00089CA6 E105                       	smpsAlterNote       $05
00089CA8 E701                       	dc.b	smpsNoAttack, $01
00089CAA E106                       	smpsAlterNote       $06
00089CAC 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00089CB0 E103                       	smpsAlterNote       $03
00089CB2 E701                       	dc.b	smpsNoAttack, $01
00089CB4 E1FF                       	smpsAlterNote       $FF
00089CB6 E701                       	dc.b	smpsNoAttack, $01
00089CB8 E103                       	smpsAlterNote       $03
00089CBA E701                       	dc.b	smpsNoAttack, $01
00089CBC E106                       	smpsAlterNote       $06
00089CBE E701                       	dc.b	smpsNoAttack, $01
00089CC0 E10A                       	smpsAlterNote       $0A
00089CC2 E701                       	dc.b	smpsNoAttack, $01
00089CC4 E106                       	smpsAlterNote       $06
00089CC6 E701                       	dc.b	smpsNoAttack, $01
00089CC8 E100                       	smpsAlterNote       $00
00089CCA E701                       	dc.b	smpsNoAttack, $01
00089CCC E1FF                       	smpsAlterNote       $FF
00089CCE E701                       	dc.b	smpsNoAttack, $01
00089CD0 E103                       	smpsAlterNote       $03
00089CD2 E701                       	dc.b	smpsNoAttack, $01
00089CD4 E109                       	smpsAlterNote       $09
00089CD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CDA E106                       	smpsAlterNote       $06
00089CDC E701                       	dc.b	smpsNoAttack, $01
00089CDE E100                       	smpsAlterNote       $00
00089CE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CE4 E107                       	smpsAlterNote       $07
00089CE6 BF0E                       	dc.b	nD5, $0E
00089CE8 E101                       	smpsAlterNote       $01
00089CEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CEE E107                       	smpsAlterNote       $07
00089CF0 E701                       	dc.b	smpsNoAttack, $01
00089CF2 E10A                       	smpsAlterNote       $0A
00089CF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CF8 E104                       	smpsAlterNote       $04
00089CFA E701                       	dc.b	smpsNoAttack, $01
00089CFC E100                       	smpsAlterNote       $00
00089CFE E701                       	dc.b	smpsNoAttack, $01
00089D00 E101                       	smpsAlterNote       $01
00089D02 E701                       	dc.b	smpsNoAttack, $01
00089D04 E107                       	smpsAlterNote       $07
00089D06 E701                       	dc.b	smpsNoAttack, $01
00089D08 E10B                       	smpsAlterNote       $0B
00089D0A E701                       	dc.b	smpsNoAttack, $01
00089D0C E107                       	smpsAlterNote       $07
00089D0E E701                       	dc.b	smpsNoAttack, $01
00089D10 E104                       	smpsAlterNote       $04
00089D12 E701                       	dc.b	smpsNoAttack, $01
00089D14 E100                       	smpsAlterNote       $00
00089D16 E701                       	dc.b	smpsNoAttack, $01
00089D18 E101                       	smpsAlterNote       $01
00089D1A 8001                       	dc.b	nRst, $01
00089D1C E108                       	smpsAlterNote       $08
00089D1E C10C                       	dc.b	nE5, $0C
00089D20 E109                       	smpsAlterNote       $09
00089D22 C201 8001                  	dc.b	nF5, $01, nRst, $01
00089D26 E10A                       	smpsAlterNote       $0A
00089D28 8001                       	dc.b	nRst, $01
00089D2A E109                       	smpsAlterNote       $09
00089D2C C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00089D30 E106                       	smpsAlterNote       $06
00089D32 E701                       	dc.b	smpsNoAttack, $01
00089D34 E102                       	smpsAlterNote       $02
00089D36 E701                       	dc.b	smpsNoAttack, $01
00089D38 E103                       	smpsAlterNote       $03
00089D3A E701                       	dc.b	smpsNoAttack, $01
00089D3C E109                       	smpsAlterNote       $09
00089D3E E701                       	dc.b	smpsNoAttack, $01
00089D40 E10D                       	smpsAlterNote       $0D
00089D42 E701                       	dc.b	smpsNoAttack, $01
00089D44 E109                       	smpsAlterNote       $09
00089D46 E701                       	dc.b	smpsNoAttack, $01
00089D48 E106                       	smpsAlterNote       $06
00089D4A E701                       	dc.b	smpsNoAttack, $01
00089D4C E102                       	smpsAlterNote       $02
00089D4E E701                       	dc.b	smpsNoAttack, $01
00089D50 E106                       	smpsAlterNote       $06
00089D52 E701                       	dc.b	smpsNoAttack, $01
00089D54 E10C                       	smpsAlterNote       $0C
00089D56 E701                       	dc.b	smpsNoAttack, $01
00089D58 E10D                       	smpsAlterNote       $0D
00089D5A E701                       	dc.b	smpsNoAttack, $01
00089D5C E109                       	smpsAlterNote       $09
00089D5E C40D                       	dc.b	nG5, $0D
00089D60 E106                       	smpsAlterNote       $06
00089D62 E701                       	dc.b	smpsNoAttack, $01
00089D64 E102                       	smpsAlterNote       $02
00089D66 E701                       	dc.b	smpsNoAttack, $01
00089D68 E103                       	smpsAlterNote       $03
00089D6A E701                       	dc.b	smpsNoAttack, $01
00089D6C E109                       	smpsAlterNote       $09
00089D6E E701                       	dc.b	smpsNoAttack, $01
00089D70 E108                       	smpsAlterNote       $08
00089D72 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
00089D7E E109                       	smpsAlterNote       $09
00089D80 C20D                       	dc.b	nF5, $0D
00089D82 E106                       	smpsAlterNote       $06
00089D84 E701                       	dc.b	smpsNoAttack, $01
00089D86 E102                       	smpsAlterNote       $02
00089D88 E701                       	dc.b	smpsNoAttack, $01
00089D8A E106                       	smpsAlterNote       $06
00089D8C E701                       	dc.b	smpsNoAttack, $01
00089D8E E109                       	smpsAlterNote       $09
00089D90 E701                       	dc.b	smpsNoAttack, $01
00089D92 E10D                       	smpsAlterNote       $0D
00089D94 E701                       	dc.b	smpsNoAttack, $01
00089D96 E109                       	smpsAlterNote       $09
00089D98 E701                       	dc.b	smpsNoAttack, $01
00089D9A E103                       	smpsAlterNote       $03
00089D9C E701                       	dc.b	smpsNoAttack, $01
00089D9E E102                       	smpsAlterNote       $02
00089DA0 E701                       	dc.b	smpsNoAttack, $01
00089DA2 E106                       	smpsAlterNote       $06
00089DA4 E701                       	dc.b	smpsNoAttack, $01
00089DA6 E10C                       	smpsAlterNote       $0C
00089DA8 E701                       	dc.b	smpsNoAttack, $01
00089DAA E10D                       	smpsAlterNote       $0D
00089DAC 8001                       	dc.b	nRst, $01
00089DAE E112                       	smpsAlterNote       $12
00089DB0 C401                       	dc.b	nG5, $01
00089DB2 E1EB                       	smpsAlterNote       $EB
00089DB4 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00089DB7 E1FD                       	smpsAlterNote       $FD
00089DB9 E701                       	dc.b	smpsNoAttack, $01
00089DBB E10F                       	smpsAlterNote       $0F
00089DBD E701                       	dc.b	smpsNoAttack, $01
00089DBF E118                       	smpsAlterNote       $18
00089DC1 E701                       	dc.b	smpsNoAttack, $01
00089DC3 E1ED                       	smpsAlterNote       $ED
00089DC5 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00089DC8 E1FF                       	smpsAlterNote       $FF
00089DCA E701                       	dc.b	smpsNoAttack, $01
00089DCC E10B                       	smpsAlterNote       $0B
00089DCE E703                       	dc.b	smpsNoAttack, $03
00089DD0 E109                       	smpsAlterNote       $09
00089DD2 C407                       	dc.b	nG5, $07
00089DD4 E108                       	smpsAlterNote       $08
00089DD6 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
00089DE2 E109                       	smpsAlterNote       $09
00089DE4 C20D                       	dc.b	nF5, $0D
00089DE6 E103                       	smpsAlterNote       $03
00089DE8 E701                       	dc.b	smpsNoAttack, $01
00089DEA E102                       	smpsAlterNote       $02
00089DEC E701                       	dc.b	smpsNoAttack, $01
00089DEE E106                       	smpsAlterNote       $06
00089DF0 E701                       	dc.b	smpsNoAttack, $01
00089DF2 E10C                       	smpsAlterNote       $0C
00089DF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089DF8 E109                       	smpsAlterNote       $09
00089DFA E701                       	dc.b	smpsNoAttack, $01
00089DFC E103                       	smpsAlterNote       $03
00089DFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E02 E109                       	smpsAlterNote       $09
00089E04 E701                       	dc.b	smpsNoAttack, $01
00089E06 E10C                       	smpsAlterNote       $0C
00089E08 E701                       	dc.b	smpsNoAttack, $01
00089E0A E10D                       	smpsAlterNote       $0D
00089E0C 8001                       	dc.b	nRst, $01
00089E0E E10B                       	smpsAlterNote       $0B
00089E10 C609 8001                  	dc.b	nA5, $09, nRst, $01
00089E14 E109                       	smpsAlterNote       $09
00089E16 B806 8001                  	dc.b	nG4, $06, nRst, $01
00089E1A E108                       	smpsAlterNote       $08
00089E1C C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00089E28 8001                       	dc.b	nRst, $01
00089E2A E109                       	smpsAlterNote       $09
00089E2C C20D                       	dc.b	nF5, $0D
00089E2E E103                       	smpsAlterNote       $03
00089E30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E34 E106                       	smpsAlterNote       $06
00089E36 E701                       	dc.b	smpsNoAttack, $01
00089E38 E10C                       	smpsAlterNote       $0C
00089E3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E3E E106                       	smpsAlterNote       $06
00089E40 E701                       	dc.b	smpsNoAttack, $01
00089E42 E103                       	smpsAlterNote       $03
00089E44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E48 E109                       	smpsAlterNote       $09
00089E4A E701                       	dc.b	smpsNoAttack, $01
00089E4C E10D                       	smpsAlterNote       $0D
00089E4E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089E54 E108                       	smpsAlterNote       $08
00089E56 E6FF                       	smpsAlterVol        $FF
00089E58 A806                       	dc.b	nEb3, $06
00089E5A E10C                       	smpsAlterNote       $0C
00089E5C A303 8001                  	dc.b	nBb2, $03, nRst, $01
00089E60 E108                       	smpsAlterNote       $08
00089E62 A803                       	dc.b	nEb3, $03
00089E64 E109                       	smpsAlterNote       $09
00089E66 AC03 8001                  	dc.b	nG3, $03, nRst, $01
00089E6A E10C                       	smpsAlterNote       $0C
00089E6C AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
00089E76 E109                       	smpsAlterNote       $09
00089E78 E602                       	smpsAlterVol        $02
00089E7A B604                       	dc.b	nF4, $04
00089E7C E602                       	smpsAlterVol        $02
00089E7E F6F1 AA                    	smpsJump            music84_Jump02
00089E81                            
00089E81                            ; FM4 Data
00089E81                            music84_FM4:
00089E83 E040                       	smpsPan             panRight, $00
00089E85 8003                       	dc.b	nRst, $03
00089E87 E10F                       	smpsAlterNote       $0F
00089E89 C603 8008                  	dc.b	nA5, $03, nRst, $08
00089E8D E10D                       	smpsAlterNote       $0D
00089E8F C403 800A                  	dc.b	nG5, $03, nRst, $0A
00089E93 E10C                       	smpsAlterNote       $0C
00089E95 C103 8004                  	dc.b	nE5, $03, nRst, $04
00089E9B E6FE                       	smpsAlterVol        $FE
00089E9D E110                       	smpsAlterNote       $10
00089E9F C703 8001                  	dc.b	nBb5, $03, nRst, $01
00089EA3 E10F                       	smpsAlterNote       $0F
00089EA5 C602 8001                  	dc.b	nA5, $02, nRst, $01
00089EA9 E10D                       	smpsAlterNote       $0D
00089EAB C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
00089EB4 E10C                       	smpsAlterNote       $0C
00089EB6 C103                       	dc.b	nE5, $03
00089EB8 E10A                       	smpsAlterNote       $0A
00089EBA BD03 8001                  	dc.b	nC5, $03, nRst, $01
00089EC0 03                         	dc.b	$03
00089EC1                            
00089EC1                            music84_Jump01:
00089EC1 E10B                       	smpsAlterNote       $0B
00089EC3 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00089EC7 E10C                       	smpsAlterNote       $0C
00089EC9 C102 8001                  	dc.b	nE5, $02, nRst, $01
00089ECD E10D                       	smpsAlterNote       $0D
00089ECF C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00089ED9 E10B                       	smpsAlterNote       $0B
00089EDB BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00089EDF E107                       	smpsAlterNote       $07
00089EE1 E701                       	dc.b	smpsNoAttack, $01
00089EE3 E103                       	smpsAlterNote       $03
00089EE5 E701                       	dc.b	smpsNoAttack, $01
00089EE7 E104                       	smpsAlterNote       $04
00089EE9 E701                       	dc.b	smpsNoAttack, $01
00089EEB E10A                       	smpsAlterNote       $0A
00089EED E701                       	dc.b	smpsNoAttack, $01
00089EEF E10E                       	smpsAlterNote       $0E
00089EF1 E701                       	dc.b	smpsNoAttack, $01
00089EF3 E10A                       	smpsAlterNote       $0A
00089EF5 E701                       	dc.b	smpsNoAttack, $01
00089EF7 E107                       	smpsAlterNote       $07
00089EF9 E701                       	dc.b	smpsNoAttack, $01
00089EFB E104                       	smpsAlterNote       $04
00089EFD 8001                       	dc.b	nRst, $01
00089EFF E110                       	smpsAlterNote       $10
00089F01 C703                       	dc.b	nBb5, $03
00089F03 E10F                       	smpsAlterNote       $0F
00089F05 C603 8001                  	dc.b	nA5, $03, nRst, $01
00089F09 E10D                       	smpsAlterNote       $0D
00089F0B C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
00089F11 E10C                       	smpsAlterNote       $0C
00089F13 E701                       	dc.b	smpsNoAttack, $01
00089F15 E108                       	smpsAlterNote       $08
00089F17 E701                       	dc.b	smpsNoAttack, $01
00089F19 E10C                       	smpsAlterNote       $0C
00089F1B E701                       	dc.b	smpsNoAttack, $01
00089F1D E10F                       	smpsAlterNote       $0F
00089F1F E701                       	dc.b	smpsNoAttack, $01
00089F21 E113                       	smpsAlterNote       $13
00089F23 E701                       	dc.b	smpsNoAttack, $01
00089F25 E10F                       	smpsAlterNote       $0F
00089F27 E701                       	dc.b	smpsNoAttack, $01
00089F29 E109                       	smpsAlterNote       $09
00089F2B E701                       	dc.b	smpsNoAttack, $01
00089F2D E108                       	smpsAlterNote       $08
00089F2F E701                       	dc.b	smpsNoAttack, $01
00089F31 E10C                       	smpsAlterNote       $0C
00089F33 E701                       	dc.b	smpsNoAttack, $01
00089F35 E112                       	smpsAlterNote       $12
00089F37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F3B E10C                       	smpsAlterNote       $0C
00089F3D E701                       	dc.b	smpsNoAttack, $01
00089F3F E109                       	smpsAlterNote       $09
00089F41 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F45 E10F                       	smpsAlterNote       $0F
00089F47 E701                       	dc.b	smpsNoAttack, $01
00089F49 E113                       	smpsAlterNote       $13
00089F4B E701                       	dc.b	smpsNoAttack, $01
00089F4D E112                       	smpsAlterNote       $12
00089F4F E701                       	dc.b	smpsNoAttack, $01
00089F51 E10C                       	smpsAlterNote       $0C
00089F53 E701                       	dc.b	smpsNoAttack, $01
00089F55 E108                       	smpsAlterNote       $08
00089F57 E701                       	dc.b	smpsNoAttack, $01
00089F59 E10C                       	smpsAlterNote       $0C
00089F5B E701                       	dc.b	smpsNoAttack, $01
00089F5D E10F                       	smpsAlterNote       $0F
00089F5F E701                       	dc.b	smpsNoAttack, $01
00089F61 E113                       	smpsAlterNote       $13
00089F63 E701                       	dc.b	smpsNoAttack, $01
00089F65 E10F                       	smpsAlterNote       $0F
00089F67 E701                       	dc.b	smpsNoAttack, $01
00089F69 E109                       	smpsAlterNote       $09
00089F6B E701                       	dc.b	smpsNoAttack, $01
00089F6D E108                       	smpsAlterNote       $08
00089F6F E701                       	dc.b	smpsNoAttack, $01
00089F71 E10C                       	smpsAlterNote       $0C
00089F73 E701                       	dc.b	smpsNoAttack, $01
00089F75 E112                       	smpsAlterNote       $12
00089F77 E701                       	dc.b	smpsNoAttack, $01
00089F79 E113                       	smpsAlterNote       $13
00089F7B 800F                       	dc.b	nRst, $0F
00089F7D E10B                       	smpsAlterNote       $0B
00089F7F BF03                       	dc.b	nD5, $03
00089F81 E10C                       	smpsAlterNote       $0C
00089F83 C103 8001                  	dc.b	nE5, $03, nRst, $01
00089F87 E10D                       	smpsAlterNote       $0D
00089F89 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
00089F91 E10B                       	smpsAlterNote       $0B
00089F93 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
00089F9D E110                       	smpsAlterNote       $10
00089F9F C704                       	dc.b	nBb5, $04
00089FA1 E10F                       	smpsAlterNote       $0F
00089FA3 C604 8001                  	dc.b	nA5, $04, nRst, $01
00089FA7 E10D                       	smpsAlterNote       $0D
00089FA9 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00089FAF E109                       	smpsAlterNote       $09
00089FB1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089FB5 E10F                       	smpsAlterNote       $0F
00089FB7 E701                       	dc.b	smpsNoAttack, $01
00089FB9 E112                       	smpsAlterNote       $12
00089FBB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089FBF E10C                       	smpsAlterNote       $0C
00089FC1 E701                       	dc.b	smpsNoAttack, $01
00089FC3 E108                       	smpsAlterNote       $08
00089FC5 E701                       	dc.b	smpsNoAttack, $01
00089FC7 E109                       	smpsAlterNote       $09
00089FC9 E701                       	dc.b	smpsNoAttack, $01
00089FCB E10F                       	smpsAlterNote       $0F
00089FCD E701                       	dc.b	smpsNoAttack, $01
00089FCF E113                       	smpsAlterNote       $13
00089FD1 E701                       	dc.b	smpsNoAttack, $01
00089FD3 E10F                       	smpsAlterNote       $0F
00089FD5 E701                       	dc.b	smpsNoAttack, $01
00089FD7 E10C                       	smpsAlterNote       $0C
00089FD9 E701                       	dc.b	smpsNoAttack, $01
00089FDB E108                       	smpsAlterNote       $08
00089FDD E701                       	dc.b	smpsNoAttack, $01
00089FDF E10C                       	smpsAlterNote       $0C
00089FE1 E701                       	dc.b	smpsNoAttack, $01
00089FE3 E112                       	smpsAlterNote       $12
00089FE5 E701                       	dc.b	smpsNoAttack, $01
00089FE7 E113                       	smpsAlterNote       $13
00089FE9 E701                       	dc.b	smpsNoAttack, $01
00089FEB E10F                       	smpsAlterNote       $0F
00089FED E701                       	dc.b	smpsNoAttack, $01
00089FEF E109                       	smpsAlterNote       $09
00089FF1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089FF5 E10C                       	smpsAlterNote       $0C
00089FF7 E701                       	dc.b	smpsNoAttack, $01
00089FF9 E112                       	smpsAlterNote       $12
00089FFB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089FFF E10C                       	smpsAlterNote       $0C
0008A001 E701                       	dc.b	smpsNoAttack, $01
0008A003 E109                       	smpsAlterNote       $09
0008A005 E701                       	dc.b	smpsNoAttack, $01
0008A007 E10D                       	smpsAlterNote       $0D
0008A009 C401 8001                  	dc.b	nG5, $01, nRst, $01
0008A00D E10F                       	smpsAlterNote       $0F
0008A00F C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
0008A019 E10D                       	smpsAlterNote       $0D
0008A01B C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008A021 E10B                       	smpsAlterNote       $0B
0008A023 BF0D                       	dc.b	nD5, $0D
0008A025 E108                       	smpsAlterNote       $08
0008A027 E701                       	dc.b	smpsNoAttack, $01
0008A029 E104                       	smpsAlterNote       $04
0008A02B E701                       	dc.b	smpsNoAttack, $01
0008A02D E108                       	smpsAlterNote       $08
0008A02F E701                       	dc.b	smpsNoAttack, $01
0008A031 E10B                       	smpsAlterNote       $0B
0008A033 E701                       	dc.b	smpsNoAttack, $01
0008A035 E10F                       	smpsAlterNote       $0F
0008A037 E701                       	dc.b	smpsNoAttack, $01
0008A039 E10B                       	smpsAlterNote       $0B
0008A03B E701                       	dc.b	smpsNoAttack, $01
0008A03D E105                       	smpsAlterNote       $05
0008A03F E701                       	dc.b	smpsNoAttack, $01
0008A041 E104                       	smpsAlterNote       $04
0008A043 E701                       	dc.b	smpsNoAttack, $01
0008A045 E108                       	smpsAlterNote       $08
0008A047 E701                       	dc.b	smpsNoAttack, $01
0008A049 E10E                       	smpsAlterNote       $0E
0008A04B E701                       	dc.b	smpsNoAttack, $01
0008A04D E10F                       	smpsAlterNote       $0F
0008A04F 8001                       	dc.b	nRst, $01
0008A051 E10C                       	smpsAlterNote       $0C
0008A053 C101                       	dc.b	nE5, $01
0008A055 E10D                       	smpsAlterNote       $0D
0008A057 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
0008A05D E10F                       	smpsAlterNote       $0F
0008A05F C606 8001                  	dc.b	nA5, $06, nRst, $01
0008A063 E10C                       	smpsAlterNote       $0C
0008A065 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008A069 E10D                       	smpsAlterNote       $0D
0008A06B CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008A06F E10C                       	smpsAlterNote       $0C
0008A071 CD03                       	dc.b	nE6, $03
0008A073 E10A                       	smpsAlterNote       $0A
0008A075 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008A079 E10D                       	smpsAlterNote       $0D
0008A07B C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
0008A083 E109                       	smpsAlterNote       $09
0008A085 E701                       	dc.b	smpsNoAttack, $01
0008A087 E10D                       	smpsAlterNote       $0D
0008A089 E701                       	dc.b	smpsNoAttack, $01
0008A08B E110                       	smpsAlterNote       $10
0008A08D E701                       	dc.b	smpsNoAttack, $01
0008A08F E114                       	smpsAlterNote       $14
0008A091 E701                       	dc.b	smpsNoAttack, $01
0008A093 E110                       	smpsAlterNote       $10
0008A095 E701                       	dc.b	smpsNoAttack, $01
0008A097 E10A                       	smpsAlterNote       $0A
0008A099 E701                       	dc.b	smpsNoAttack, $01
0008A09B E109                       	smpsAlterNote       $09
0008A09D E701                       	dc.b	smpsNoAttack, $01
0008A09F E10D                       	smpsAlterNote       $0D
0008A0A1 E701                       	dc.b	smpsNoAttack, $01
0008A0A3 E113                       	smpsAlterNote       $13
0008A0A5 E701                       	dc.b	smpsNoAttack, $01
0008A0A7 E114                       	smpsAlterNote       $14
0008A0A9 8001                       	dc.b	nRst, $01
0008A0AB E10F                       	smpsAlterNote       $0F
0008A0AD C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008A0B3 E10C                       	smpsAlterNote       $0C
0008A0B5 E701                       	dc.b	smpsNoAttack, $01
0008A0B7 E108                       	smpsAlterNote       $08
0008A0B9 E701                       	dc.b	smpsNoAttack, $01
0008A0BB E10C                       	smpsAlterNote       $0C
0008A0BD E701                       	dc.b	smpsNoAttack, $01
0008A0BF E112                       	smpsAlterNote       $12
0008A0C1 E701                       	dc.b	smpsNoAttack, $01
0008A0C3 E113                       	smpsAlterNote       $13
0008A0C5 E701                       	dc.b	smpsNoAttack, $01
0008A0C7 E10F                       	smpsAlterNote       $0F
0008A0C9 E701                       	dc.b	smpsNoAttack, $01
0008A0CB E109                       	smpsAlterNote       $09
0008A0CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0D1 E10C                       	smpsAlterNote       $0C
0008A0D3 E701                       	dc.b	smpsNoAttack, $01
0008A0D5 E112                       	smpsAlterNote       $12
0008A0D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0DB E10C                       	smpsAlterNote       $0C
0008A0DD E701                       	dc.b	smpsNoAttack, $01
0008A0DF E109                       	smpsAlterNote       $09
0008A0E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A0E5 E10F                       	smpsAlterNote       $0F
0008A0E7 E701                       	dc.b	smpsNoAttack, $01
0008A0E9 E113                       	smpsAlterNote       $13
0008A0EB E701                       	dc.b	smpsNoAttack, $01
0008A0ED E112                       	smpsAlterNote       $12
0008A0EF E701                       	dc.b	smpsNoAttack, $01
0008A0F1 E10C                       	smpsAlterNote       $0C
0008A0F3 E701                       	dc.b	smpsNoAttack, $01
0008A0F5 E108                       	smpsAlterNote       $08
0008A0F7 E701                       	dc.b	smpsNoAttack, $01
0008A0F9 E10C                       	smpsAlterNote       $0C
0008A0FB E701                       	dc.b	smpsNoAttack, $01
0008A0FD E10F                       	smpsAlterNote       $0F
0008A0FF E701                       	dc.b	smpsNoAttack, $01
0008A101 E113                       	smpsAlterNote       $13
0008A103 E701                       	dc.b	smpsNoAttack, $01
0008A105 E10F                       	smpsAlterNote       $0F
0008A107 E701                       	dc.b	smpsNoAttack, $01
0008A109 E109                       	smpsAlterNote       $09
0008A10B E701                       	dc.b	smpsNoAttack, $01
0008A10D E108                       	smpsAlterNote       $08
0008A10F E701                       	dc.b	smpsNoAttack, $01
0008A111 E10C                       	smpsAlterNote       $0C
0008A113 E701                       	dc.b	smpsNoAttack, $01
0008A115 E112                       	smpsAlterNote       $12
0008A117 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A11B E10F                       	smpsAlterNote       $0F
0008A11D E701                       	dc.b	smpsNoAttack, $01
0008A11F E109                       	smpsAlterNote       $09
0008A121 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A125 E10F                       	smpsAlterNote       $0F
0008A127 E701                       	dc.b	smpsNoAttack, $01
0008A129 E113                       	smpsAlterNote       $13
0008A12B E701                       	dc.b	smpsNoAttack, $01
0008A12D E112                       	smpsAlterNote       $12
0008A12F E701                       	dc.b	smpsNoAttack, $01
0008A131 E10C                       	smpsAlterNote       $0C
0008A133 E701                       	dc.b	smpsNoAttack, $01
0008A135 E108                       	smpsAlterNote       $08
0008A137 E701                       	dc.b	smpsNoAttack, $01
0008A139 E10C                       	smpsAlterNote       $0C
0008A13B E701                       	dc.b	smpsNoAttack, $01
0008A13D E10F                       	smpsAlterNote       $0F
0008A13F E701                       	dc.b	smpsNoAttack, $01
0008A141 E113                       	smpsAlterNote       $13
0008A143 E701                       	dc.b	smpsNoAttack, $01
0008A145 E10F                       	smpsAlterNote       $0F
0008A147 E701                       	dc.b	smpsNoAttack, $01
0008A149 E109                       	smpsAlterNote       $09
0008A14B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A14F E10F                       	smpsAlterNote       $0F
0008A151 C60D                       	dc.b	nA5, $0D
0008A153 E109                       	smpsAlterNote       $09
0008A155 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A159 E10C                       	smpsAlterNote       $0C
0008A15B E701                       	dc.b	smpsNoAttack, $01
0008A15D E112                       	smpsAlterNote       $12
0008A15F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A163 E10C                       	smpsAlterNote       $0C
0008A165 E701                       	dc.b	smpsNoAttack, $01
0008A167 E109                       	smpsAlterNote       $09
0008A169 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A16D E10F                       	smpsAlterNote       $0F
0008A16F E701                       	dc.b	smpsNoAttack, $01
0008A171 E113                       	smpsAlterNote       $13
0008A173 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A179 E10D                       	smpsAlterNote       $0D
0008A17B C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
0008A183 E10C                       	smpsAlterNote       $0C
0008A185 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008A18B E6FF                       	smpsAlterVol        $FF
0008A18D E10B                       	smpsAlterNote       $0B
0008A18F BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008A193 E10C                       	smpsAlterNote       $0C
0008A195 C103                       	dc.b	nE5, $03
0008A197 E10D                       	smpsAlterNote       $0D
0008A199 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008A1A3 E10B                       	smpsAlterNote       $0B
0008A1A5 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008A1A9 E107                       	smpsAlterNote       $07
0008A1AB E701                       	dc.b	smpsNoAttack, $01
0008A1AD E104                       	smpsAlterNote       $04
0008A1AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1B3 E10A                       	smpsAlterNote       $0A
0008A1B5 E701                       	dc.b	smpsNoAttack, $01
0008A1B7 E10D                       	smpsAlterNote       $0D
0008A1B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1BD E107                       	smpsAlterNote       $07
0008A1BF E701                       	dc.b	smpsNoAttack, $01
0008A1C1 E104                       	smpsAlterNote       $04
0008A1C3 8001                       	dc.b	nRst, $01
0008A1C5 E110                       	smpsAlterNote       $10
0008A1C7 C703                       	dc.b	nBb5, $03
0008A1C9 E10F                       	smpsAlterNote       $0F
0008A1CB C603 8001                  	dc.b	nA5, $03, nRst, $01
0008A1CF E10D                       	smpsAlterNote       $0D
0008A1D1 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008A1D5 E10C                       	smpsAlterNote       $0C
0008A1D7 E701                       	dc.b	smpsNoAttack, $01
0008A1D9 E108                       	smpsAlterNote       $08
0008A1DB E701                       	dc.b	smpsNoAttack, $01
0008A1DD E109                       	smpsAlterNote       $09
0008A1DF E701                       	dc.b	smpsNoAttack, $01
0008A1E1 E10F                       	smpsAlterNote       $0F
0008A1E3 E701                       	dc.b	smpsNoAttack, $01
0008A1E5 E113                       	smpsAlterNote       $13
0008A1E7 E701                       	dc.b	smpsNoAttack, $01
0008A1E9 E10F                       	smpsAlterNote       $0F
0008A1EB E701                       	dc.b	smpsNoAttack, $01
0008A1ED E10C                       	smpsAlterNote       $0C
0008A1EF E701                       	dc.b	smpsNoAttack, $01
0008A1F1 E108                       	smpsAlterNote       $08
0008A1F3 E701                       	dc.b	smpsNoAttack, $01
0008A1F5 E10C                       	smpsAlterNote       $0C
0008A1F7 E701                       	dc.b	smpsNoAttack, $01
0008A1F9 E112                       	smpsAlterNote       $12
0008A1FB E701                       	dc.b	smpsNoAttack, $01
0008A1FD E113                       	smpsAlterNote       $13
0008A1FF E701                       	dc.b	smpsNoAttack, $01
0008A201 E10F                       	smpsAlterNote       $0F
0008A203 E701                       	dc.b	smpsNoAttack, $01
0008A205 E109                       	smpsAlterNote       $09
0008A207 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A20B E10C                       	smpsAlterNote       $0C
0008A20D E701                       	dc.b	smpsNoAttack, $01
0008A20F E112                       	smpsAlterNote       $12
0008A211 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A215 E10C                       	smpsAlterNote       $0C
0008A217 E701                       	dc.b	smpsNoAttack, $01
0008A219 E109                       	smpsAlterNote       $09
0008A21B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A21F E10F                       	smpsAlterNote       $0F
0008A221 E701                       	dc.b	smpsNoAttack, $01
0008A223 E113                       	smpsAlterNote       $13
0008A225 E701                       	dc.b	smpsNoAttack, $01
0008A227 E112                       	smpsAlterNote       $12
0008A229 E701                       	dc.b	smpsNoAttack, $01
0008A22B E10C                       	smpsAlterNote       $0C
0008A22D E701                       	dc.b	smpsNoAttack, $01
0008A22F E108                       	smpsAlterNote       $08
0008A231 E701                       	dc.b	smpsNoAttack, $01
0008A233 E10C                       	smpsAlterNote       $0C
0008A235 E701                       	dc.b	smpsNoAttack, $01
0008A237 E10F                       	smpsAlterNote       $0F
0008A239 E701                       	dc.b	smpsNoAttack, $01
0008A23B E113                       	smpsAlterNote       $13
0008A23D E701                       	dc.b	smpsNoAttack, $01
0008A23F E10F                       	smpsAlterNote       $0F
0008A241 BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008A245 E110                       	smpsAlterNote       $10
0008A247 BB03                       	dc.b	nBb4, $03
0008A249 E10F                       	smpsAlterNote       $0F
0008A24B BA06 8001                  	dc.b	nA4, $06, nRst, $01
0008A24F E10B                       	smpsAlterNote       $0B
0008A251 BF03                       	dc.b	nD5, $03
0008A253 E10C                       	smpsAlterNote       $0C
0008A255 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008A259 E10D                       	smpsAlterNote       $0D
0008A25B C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008A265 E10B                       	smpsAlterNote       $0B
0008A267 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008A273 E110                       	smpsAlterNote       $10
0008A275 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008A279 E10F                       	smpsAlterNote       $0F
0008A27B C604                       	dc.b	nA5, $04
0008A27D E10D                       	smpsAlterNote       $0D
0008A27F C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008A285 E109                       	smpsAlterNote       $09
0008A287 E701                       	dc.b	smpsNoAttack, $01
0008A289 E108                       	smpsAlterNote       $08
0008A28B E701                       	dc.b	smpsNoAttack, $01
0008A28D E10C                       	smpsAlterNote       $0C
0008A28F E701                       	dc.b	smpsNoAttack, $01
0008A291 E112                       	smpsAlterNote       $12
0008A293 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A297 E10F                       	smpsAlterNote       $0F
0008A299 E701                       	dc.b	smpsNoAttack, $01
0008A29B E109                       	smpsAlterNote       $09
0008A29D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A2A1 E10F                       	smpsAlterNote       $0F
0008A2A3 E701                       	dc.b	smpsNoAttack, $01
0008A2A5 E112                       	smpsAlterNote       $12
0008A2A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A2AB E10C                       	smpsAlterNote       $0C
0008A2AD E701                       	dc.b	smpsNoAttack, $01
0008A2AF E108                       	smpsAlterNote       $08
0008A2B1 E701                       	dc.b	smpsNoAttack, $01
0008A2B3 E109                       	smpsAlterNote       $09
0008A2B5 E701                       	dc.b	smpsNoAttack, $01
0008A2B7 E10F                       	smpsAlterNote       $0F
0008A2B9 E701                       	dc.b	smpsNoAttack, $01
0008A2BB E113                       	smpsAlterNote       $13
0008A2BD E701                       	dc.b	smpsNoAttack, $01
0008A2BF E10F                       	smpsAlterNote       $0F
0008A2C1 E701                       	dc.b	smpsNoAttack, $01
0008A2C3 E10C                       	smpsAlterNote       $0C
0008A2C5 E701                       	dc.b	smpsNoAttack, $01
0008A2C7 E108                       	smpsAlterNote       $08
0008A2C9 E701                       	dc.b	smpsNoAttack, $01
0008A2CB E10C                       	smpsAlterNote       $0C
0008A2CD E701                       	dc.b	smpsNoAttack, $01
0008A2CF E112                       	smpsAlterNote       $12
0008A2D1 E701                       	dc.b	smpsNoAttack, $01
0008A2D3 E113                       	smpsAlterNote       $13
0008A2D5 E701                       	dc.b	smpsNoAttack, $01
0008A2D7 E10F                       	smpsAlterNote       $0F
0008A2D9 E701                       	dc.b	smpsNoAttack, $01
0008A2DB E109                       	smpsAlterNote       $09
0008A2DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A2E1 E10C                       	smpsAlterNote       $0C
0008A2E3 E701                       	dc.b	smpsNoAttack, $01
0008A2E5 E112                       	smpsAlterNote       $12
0008A2E7 E701                       	dc.b	smpsNoAttack, $01
0008A2E9 E113                       	smpsAlterNote       $13
0008A2EB 8001                       	dc.b	nRst, $01
0008A2ED E10F                       	smpsAlterNote       $0F
0008A2EF C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
0008A2FB C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
0008A303 E10D                       	smpsAlterNote       $0D
0008A305 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008A30B E10B                       	smpsAlterNote       $0B
0008A30D BF0D                       	dc.b	nD5, $0D
0008A30F E108                       	smpsAlterNote       $08
0008A311 E701                       	dc.b	smpsNoAttack, $01
0008A313 E104                       	smpsAlterNote       $04
0008A315 E701                       	dc.b	smpsNoAttack, $01
0008A317 E105                       	smpsAlterNote       $05
0008A319 E701                       	dc.b	smpsNoAttack, $01
0008A31B E10B                       	smpsAlterNote       $0B
0008A31D E701                       	dc.b	smpsNoAttack, $01
0008A31F E10F                       	smpsAlterNote       $0F
0008A321 E701                       	dc.b	smpsNoAttack, $01
0008A323 E10B                       	smpsAlterNote       $0B
0008A325 E701                       	dc.b	smpsNoAttack, $01
0008A327 E108                       	smpsAlterNote       $08
0008A329 E701                       	dc.b	smpsNoAttack, $01
0008A32B E104                       	smpsAlterNote       $04
0008A32D E701                       	dc.b	smpsNoAttack, $01
0008A32F E108                       	smpsAlterNote       $08
0008A331 E701                       	dc.b	smpsNoAttack, $01
0008A333 E10E                       	smpsAlterNote       $0E
0008A335 E701                       	dc.b	smpsNoAttack, $01
0008A337 E10F                       	smpsAlterNote       $0F
0008A339 E701                       	dc.b	smpsNoAttack, $01
0008A33B E10C                       	smpsAlterNote       $0C
0008A33D C101                       	dc.b	nE5, $01
0008A33F E10D                       	smpsAlterNote       $0D
0008A341 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008A349 E10F                       	smpsAlterNote       $0F
0008A34B C607                       	dc.b	nA5, $07
0008A34D E10C                       	smpsAlterNote       $0C
0008A34F CD07                       	dc.b	nE6, $07
0008A351 E10D                       	smpsAlterNote       $0D
0008A353 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008A357 E10C                       	smpsAlterNote       $0C
0008A359 CD03                       	dc.b	nE6, $03
0008A35B E10A                       	smpsAlterNote       $0A
0008A35D C903 8001                  	dc.b	nC6, $03, nRst, $01
0008A361 E10D                       	smpsAlterNote       $0D
0008A363 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008A369 E10A                       	smpsAlterNote       $0A
0008A36B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A36F E110                       	smpsAlterNote       $10
0008A371 E701                       	dc.b	smpsNoAttack, $01
0008A373 E114                       	smpsAlterNote       $14
0008A375 E701                       	dc.b	smpsNoAttack, $01
0008A377 E113                       	smpsAlterNote       $13
0008A379 E701                       	dc.b	smpsNoAttack, $01
0008A37B E10D                       	smpsAlterNote       $0D
0008A37D E701                       	dc.b	smpsNoAttack, $01
0008A37F E109                       	smpsAlterNote       $09
0008A381 E701                       	dc.b	smpsNoAttack, $01
0008A383 E10D                       	smpsAlterNote       $0D
0008A385 E701                       	dc.b	smpsNoAttack, $01
0008A387 E110                       	smpsAlterNote       $10
0008A389 E701                       	dc.b	smpsNoAttack, $01
0008A38B E114                       	smpsAlterNote       $14
0008A38D E701                       	dc.b	smpsNoAttack, $01
0008A38F E10F                       	smpsAlterNote       $0F
0008A391 C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
0008A395 E10C                       	smpsAlterNote       $0C
0008A397 E701                       	dc.b	smpsNoAttack, $01
0008A399 E108                       	smpsAlterNote       $08
0008A39B E701                       	dc.b	smpsNoAttack, $01
0008A39D E10C                       	smpsAlterNote       $0C
0008A39F E701                       	dc.b	smpsNoAttack, $01
0008A3A1 E10F                       	smpsAlterNote       $0F
0008A3A3 E701                       	dc.b	smpsNoAttack, $01
0008A3A5 E113                       	smpsAlterNote       $13
0008A3A7 E701                       	dc.b	smpsNoAttack, $01
0008A3A9 E10F                       	smpsAlterNote       $0F
0008A3AB E701                       	dc.b	smpsNoAttack, $01
0008A3AD E109                       	smpsAlterNote       $09
0008A3AF E701                       	dc.b	smpsNoAttack, $01
0008A3B1 E108                       	smpsAlterNote       $08
0008A3B3 E701                       	dc.b	smpsNoAttack, $01
0008A3B5 E10C                       	smpsAlterNote       $0C
0008A3B7 E701                       	dc.b	smpsNoAttack, $01
0008A3B9 E112                       	smpsAlterNote       $12
0008A3BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3BF E10F                       	smpsAlterNote       $0F
0008A3C1 E701                       	dc.b	smpsNoAttack, $01
0008A3C3 E109                       	smpsAlterNote       $09
0008A3C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3C9 E10F                       	smpsAlterNote       $0F
0008A3CB E701                       	dc.b	smpsNoAttack, $01
0008A3CD E112                       	smpsAlterNote       $12
0008A3CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3D3 E10C                       	smpsAlterNote       $0C
0008A3D5 E701                       	dc.b	smpsNoAttack, $01
0008A3D7 E108                       	smpsAlterNote       $08
0008A3D9 E701                       	dc.b	smpsNoAttack, $01
0008A3DB E109                       	smpsAlterNote       $09
0008A3DD E701                       	dc.b	smpsNoAttack, $01
0008A3DF E10F                       	smpsAlterNote       $0F
0008A3E1 E701                       	dc.b	smpsNoAttack, $01
0008A3E3 E113                       	smpsAlterNote       $13
0008A3E5 E701                       	dc.b	smpsNoAttack, $01
0008A3E7 E10F                       	smpsAlterNote       $0F
0008A3E9 E701                       	dc.b	smpsNoAttack, $01
0008A3EB E10C                       	smpsAlterNote       $0C
0008A3ED E701                       	dc.b	smpsNoAttack, $01
0008A3EF E108                       	smpsAlterNote       $08
0008A3F1 E701                       	dc.b	smpsNoAttack, $01
0008A3F3 E10C                       	smpsAlterNote       $0C
0008A3F5 E701                       	dc.b	smpsNoAttack, $01
0008A3F7 E112                       	smpsAlterNote       $12
0008A3F9 E701                       	dc.b	smpsNoAttack, $01
0008A3FB E113                       	smpsAlterNote       $13
0008A3FD E701                       	dc.b	smpsNoAttack, $01
0008A3FF E10F                       	smpsAlterNote       $0F
0008A401 E701                       	dc.b	smpsNoAttack, $01
0008A403 E109                       	smpsAlterNote       $09
0008A405 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A409 E10C                       	smpsAlterNote       $0C
0008A40B E701                       	dc.b	smpsNoAttack, $01
0008A40D E112                       	smpsAlterNote       $12
0008A40F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A413 E10C                       	smpsAlterNote       $0C
0008A415 E701                       	dc.b	smpsNoAttack, $01
0008A417 E109                       	smpsAlterNote       $09
0008A419 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A41D E10F                       	smpsAlterNote       $0F
0008A41F E701                       	dc.b	smpsNoAttack, $01
0008A421 E113                       	smpsAlterNote       $13
0008A423 E701                       	dc.b	smpsNoAttack, $01
0008A425 E112                       	smpsAlterNote       $12
0008A427 E701                       	dc.b	smpsNoAttack, $01
0008A429 E10C                       	smpsAlterNote       $0C
0008A42B E701                       	dc.b	smpsNoAttack, $01
0008A42D E109                       	smpsAlterNote       $09
0008A42F 8001                       	dc.b	nRst, $01
0008A431 E10F                       	smpsAlterNote       $0F
0008A433 C60D                       	dc.b	nA5, $0D
0008A435 E10C                       	smpsAlterNote       $0C
0008A437 E701                       	dc.b	smpsNoAttack, $01
0008A439 E108                       	smpsAlterNote       $08
0008A43B E701                       	dc.b	smpsNoAttack, $01
0008A43D E10C                       	smpsAlterNote       $0C
0008A43F E701                       	dc.b	smpsNoAttack, $01
0008A441 E112                       	smpsAlterNote       $12
0008A443 E701                       	dc.b	smpsNoAttack, $01
0008A445 E113                       	smpsAlterNote       $13
0008A447 E701                       	dc.b	smpsNoAttack, $01
0008A449 E10F                       	smpsAlterNote       $0F
0008A44B E701                       	dc.b	smpsNoAttack, $01
0008A44D E109                       	smpsAlterNote       $09
0008A44F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A453 E10C                       	smpsAlterNote       $0C
0008A455 E701                       	dc.b	smpsNoAttack, $01
0008A457 E112                       	smpsAlterNote       $12
0008A459 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A45D E10C                       	smpsAlterNote       $0C
0008A45F E701                       	dc.b	smpsNoAttack, $01
0008A461 E109                       	smpsAlterNote       $09
0008A463 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A467 E10F                       	smpsAlterNote       $0F
0008A469 E701                       	dc.b	smpsNoAttack, $01
0008A46B E113                       	smpsAlterNote       $13
0008A46D E701                       	dc.b	smpsNoAttack, $01
0008A46F E112                       	smpsAlterNote       $12
0008A471 E701                       	dc.b	smpsNoAttack, $01
0008A473 E10C                       	smpsAlterNote       $0C
0008A475 E701                       	dc.b	smpsNoAttack, $01
0008A477 E108                       	smpsAlterNote       $08
0008A479 E701                       	dc.b	smpsNoAttack, $01
0008A47B E10C                       	smpsAlterNote       $0C
0008A47D E701                       	dc.b	smpsNoAttack, $01
0008A47F E10F                       	smpsAlterNote       $0F
0008A481 E701                       	dc.b	smpsNoAttack, $01
0008A483 E113                       	smpsAlterNote       $13
0008A485 E701                       	dc.b	smpsNoAttack, $01
0008A487 E10F                       	smpsAlterNote       $0F
0008A489 E701                       	dc.b	smpsNoAttack, $01
0008A48B E109                       	smpsAlterNote       $09
0008A48D E701                       	dc.b	smpsNoAttack, $01
0008A48F E108                       	smpsAlterNote       $08
0008A491 E701                       	dc.b	smpsNoAttack, $01
0008A493 E10C                       	smpsAlterNote       $0C
0008A495 E701                       	dc.b	smpsNoAttack, $01
0008A497 E112                       	smpsAlterNote       $12
0008A499 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A49D E10F                       	smpsAlterNote       $0F
0008A49F E701                       	dc.b	smpsNoAttack, $01
0008A4A1 E109                       	smpsAlterNote       $09
0008A4A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A4A7 E10F                       	smpsAlterNote       $0F
0008A4A9 E701                       	dc.b	smpsNoAttack, $01
0008A4AB E112                       	smpsAlterNote       $12
0008A4AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A4B1 E10C                       	smpsAlterNote       $0C
0008A4B3 E701                       	dc.b	smpsNoAttack, $01
0008A4B5 E108                       	smpsAlterNote       $08
0008A4B7 E701                       	dc.b	smpsNoAttack, $01
0008A4B9 E10C                       	smpsAlterNote       $0C
0008A4BB E701                       	dc.b	smpsNoAttack, $01
0008A4BD E10F                       	smpsAlterNote       $0F
0008A4BF E701                       	dc.b	smpsNoAttack, $01
0008A4C1 E113                       	smpsAlterNote       $13
0008A4C3 E701                       	dc.b	smpsNoAttack, $01
0008A4C5 E10F                       	smpsAlterNote       $0F
0008A4C7 E701                       	dc.b	smpsNoAttack, $01
0008A4C9 E109                       	smpsAlterNote       $09
0008A4CB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A4D1 E601                       	smpsAlterVol        $01
0008A4D3 E10F                       	smpsAlterNote       $0F
0008A4D5 C604                       	dc.b	nA5, $04
0008A4D7 E10D                       	smpsAlterNote       $0D
0008A4D9 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008A4DF E10B                       	smpsAlterNote       $0B
0008A4E1 BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
0008A4E9 E10F                       	smpsAlterNote       $0F
0008A4EB C604 8001                  	dc.b	nA5, $04, nRst, $01
0008A4EF E10D                       	smpsAlterNote       $0D
0008A4F1 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008A4F7 E10C                       	smpsAlterNote       $0C
0008A4F9 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
0008A4FF E10A                       	smpsAlterNote       $0A
0008A501 C904 8001                  	dc.b	nC6, $04, nRst, $01
0008A505 E110                       	smpsAlterNote       $10
0008A507 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008A50B E10F                       	smpsAlterNote       $0F
0008A50D C604                       	dc.b	nA5, $04
0008A50F E10D                       	smpsAlterNote       $0D
0008A511 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008A51D E109                       	smpsAlterNote       $09
0008A51F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A523 E10F                       	smpsAlterNote       $0F
0008A525 E701                       	dc.b	smpsNoAttack, $01
0008A527 E112                       	smpsAlterNote       $12
0008A529 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A52D E10C                       	smpsAlterNote       $0C
0008A52F E701                       	dc.b	smpsNoAttack, $01
0008A531 E108                       	smpsAlterNote       $08
0008A533 E701                       	dc.b	smpsNoAttack, $01
0008A535 E10C                       	smpsAlterNote       $0C
0008A537 E701                       	dc.b	smpsNoAttack, $01
0008A539 E10F                       	smpsAlterNote       $0F
0008A53B E701                       	dc.b	smpsNoAttack, $01
0008A53D E113                       	smpsAlterNote       $13
0008A53F E701                       	dc.b	smpsNoAttack, $01
0008A541 E10D                       	smpsAlterNote       $0D
0008A543 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008A549 E10C                       	smpsAlterNote       $0C
0008A54B C10D                       	dc.b	nE5, $0D
0008A54D E109                       	smpsAlterNote       $09
0008A54F E701                       	dc.b	smpsNoAttack, $01
0008A551 E105                       	smpsAlterNote       $05
0008A553 E701                       	dc.b	smpsNoAttack, $01
0008A555 E106                       	smpsAlterNote       $06
0008A557 E701                       	dc.b	smpsNoAttack, $01
0008A559 E10C                       	smpsAlterNote       $0C
0008A55B E701                       	dc.b	smpsNoAttack, $01
0008A55D E110                       	smpsAlterNote       $10
0008A55F E701                       	dc.b	smpsNoAttack, $01
0008A561 E10C                       	smpsAlterNote       $0C
0008A563 E701                       	dc.b	smpsNoAttack, $01
0008A565 E109                       	smpsAlterNote       $09
0008A567 E701                       	dc.b	smpsNoAttack, $01
0008A569 E105                       	smpsAlterNote       $05
0008A56B E701                       	dc.b	smpsNoAttack, $01
0008A56D E109                       	smpsAlterNote       $09
0008A56F E701                       	dc.b	smpsNoAttack, $01
0008A571 E10F                       	smpsAlterNote       $0F
0008A573 E701                       	dc.b	smpsNoAttack, $01
0008A575 E110                       	smpsAlterNote       $10
0008A577 E701                       	dc.b	smpsNoAttack, $01
0008A579 E10C                       	smpsAlterNote       $0C
0008A57B E701                       	dc.b	smpsNoAttack, $01
0008A57D E106                       	smpsAlterNote       $06
0008A57F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A583 E109                       	smpsAlterNote       $09
0008A585 E701                       	dc.b	smpsNoAttack, $01
0008A587 E10F                       	smpsAlterNote       $0F
0008A589 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A58D E109                       	smpsAlterNote       $09
0008A58F E701                       	dc.b	smpsNoAttack, $01
0008A591 E106                       	smpsAlterNote       $06
0008A593 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A597 E10C                       	smpsAlterNote       $0C
0008A599 E701                       	dc.b	smpsNoAttack, $01
0008A59B E110                       	smpsAlterNote       $10
0008A59D E701                       	dc.b	smpsNoAttack, $01
0008A59F E10F                       	smpsAlterNote       $0F
0008A5A1 E701                       	dc.b	smpsNoAttack, $01
0008A5A3 E109                       	smpsAlterNote       $09
0008A5A5 E701                       	dc.b	smpsNoAttack, $01
0008A5A7 E105                       	smpsAlterNote       $05
0008A5A9 E701                       	dc.b	smpsNoAttack, $01
0008A5AB E109                       	smpsAlterNote       $09
0008A5AD E701                       	dc.b	smpsNoAttack, $01
0008A5AF E10C                       	smpsAlterNote       $0C
0008A5B1 E701                       	dc.b	smpsNoAttack, $01
0008A5B3 E110                       	smpsAlterNote       $10
0008A5B5 E701                       	dc.b	smpsNoAttack, $01
0008A5B7 E10C                       	smpsAlterNote       $0C
0008A5B9 E701                       	dc.b	smpsNoAttack, $01
0008A5BB E106                       	smpsAlterNote       $06
0008A5BD E701                       	dc.b	smpsNoAttack, $01
0008A5BF E105                       	smpsAlterNote       $05
0008A5C1 E701                       	dc.b	smpsNoAttack, $01
0008A5C3 E109                       	smpsAlterNote       $09
0008A5C5 E701                       	dc.b	smpsNoAttack, $01
0008A5C7 E10F                       	smpsAlterNote       $0F
0008A5C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5CD E10C                       	smpsAlterNote       $0C
0008A5CF E701                       	dc.b	smpsNoAttack, $01
0008A5D1 E106                       	smpsAlterNote       $06
0008A5D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5D7 E10C                       	smpsAlterNote       $0C
0008A5D9 E701                       	dc.b	smpsNoAttack, $01
0008A5DB E10F                       	smpsAlterNote       $0F
0008A5DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5E1 E109                       	smpsAlterNote       $09
0008A5E3 E701                       	dc.b	smpsNoAttack, $01
0008A5E5 E105                       	smpsAlterNote       $05
0008A5E7 E701                       	dc.b	smpsNoAttack, $01
0008A5E9 E106                       	smpsAlterNote       $06
0008A5EB E701                       	dc.b	smpsNoAttack, $01
0008A5ED E10C                       	smpsAlterNote       $0C
0008A5EF E701                       	dc.b	smpsNoAttack, $01
0008A5F1 E110                       	smpsAlterNote       $10
0008A5F3 E701                       	dc.b	smpsNoAttack, $01
0008A5F5 E10C                       	smpsAlterNote       $0C
0008A5F7 E701                       	dc.b	smpsNoAttack, $01
0008A5F9 E109                       	smpsAlterNote       $09
0008A5FB E701                       	dc.b	smpsNoAttack, $01
0008A5FD E105                       	smpsAlterNote       $05
0008A5FF E701                       	dc.b	smpsNoAttack, $01
0008A601 E109                       	smpsAlterNote       $09
0008A603 E701                       	dc.b	smpsNoAttack, $01
0008A605 E10F                       	smpsAlterNote       $0F
0008A607 E701                       	dc.b	smpsNoAttack, $01
0008A609 E110                       	smpsAlterNote       $10
0008A60B E701                       	dc.b	smpsNoAttack, $01
0008A60D E10C                       	smpsAlterNote       $0C
0008A60F E701                       	dc.b	smpsNoAttack, $01
0008A611 E106                       	smpsAlterNote       $06
0008A613 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A617 E109                       	smpsAlterNote       $09
0008A619 E701                       	dc.b	smpsNoAttack, $01
0008A61B E10F                       	smpsAlterNote       $0F
0008A61D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A621 E109                       	smpsAlterNote       $09
0008A623 E701                       	dc.b	smpsNoAttack, $01
0008A625 E106                       	smpsAlterNote       $06
0008A627 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A62B E10C                       	smpsAlterNote       $0C
0008A62D E701                       	dc.b	smpsNoAttack, $01
0008A62F E110                       	smpsAlterNote       $10
0008A631 E701                       	dc.b	smpsNoAttack, $01
0008A633 E10F                       	smpsAlterNote       $0F
0008A635 E701                       	dc.b	smpsNoAttack, $01
0008A637 E109                       	smpsAlterNote       $09
0008A639 E701                       	dc.b	smpsNoAttack, $01
0008A63B E105                       	smpsAlterNote       $05
0008A63D E701                       	dc.b	smpsNoAttack, $01
0008A63F E109                       	smpsAlterNote       $09
0008A641 E701                       	dc.b	smpsNoAttack, $01
0008A643 E10C                       	smpsAlterNote       $0C
0008A645 E701                       	dc.b	smpsNoAttack, $01
0008A647 E110                       	smpsAlterNote       $10
0008A649 E701                       	dc.b	smpsNoAttack, $01
0008A64B E10C                       	smpsAlterNote       $0C
0008A64D E701                       	dc.b	smpsNoAttack, $01
0008A64F E106                       	smpsAlterNote       $06
0008A651 E701                       	dc.b	smpsNoAttack, $01
0008A653 E105                       	smpsAlterNote       $05
0008A655 E701                       	dc.b	smpsNoAttack, $01
0008A657 E109                       	smpsAlterNote       $09
0008A659 E701                       	dc.b	smpsNoAttack, $01
0008A65B E10F                       	smpsAlterNote       $0F
0008A65D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A661 E109                       	smpsAlterNote       $09
0008A663 E701                       	dc.b	smpsNoAttack, $01
0008A665 E106                       	smpsAlterNote       $06
0008A667 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A66B E10C                       	smpsAlterNote       $0C
0008A66D E701                       	dc.b	smpsNoAttack, $01
0008A66F E110                       	smpsAlterNote       $10
0008A671 E701                       	dc.b	smpsNoAttack, $01
0008A673 E10F                       	smpsAlterNote       $0F
0008A675 E701                       	dc.b	smpsNoAttack, $01
0008A677 E109                       	smpsAlterNote       $09
0008A679 E701                       	dc.b	smpsNoAttack, $01
0008A67B E105                       	smpsAlterNote       $05
0008A67D E701                       	dc.b	smpsNoAttack, $01
0008A67F E109                       	smpsAlterNote       $09
0008A681 E701                       	dc.b	smpsNoAttack, $01
0008A683 E10C                       	smpsAlterNote       $0C
0008A685 E701                       	dc.b	smpsNoAttack, $01
0008A687 E110                       	smpsAlterNote       $10
0008A689 E701                       	dc.b	smpsNoAttack, $01
0008A68B E10C                       	smpsAlterNote       $0C
0008A68D E701                       	dc.b	smpsNoAttack, $01
0008A68F E106                       	smpsAlterNote       $06
0008A691 E701                       	dc.b	smpsNoAttack, $01
0008A693 E105                       	smpsAlterNote       $05
0008A695 E701                       	dc.b	smpsNoAttack, $01
0008A697 E109                       	smpsAlterNote       $09
0008A699 E701                       	dc.b	smpsNoAttack, $01
0008A69B E10F                       	smpsAlterNote       $0F
0008A69D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A6A1 E10C                       	smpsAlterNote       $0C
0008A6A3 E701                       	dc.b	smpsNoAttack, $01
0008A6A5 E106                       	smpsAlterNote       $06
0008A6A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A6AB E10C                       	smpsAlterNote       $0C
0008A6AD E701                       	dc.b	smpsNoAttack, $01
0008A6AF E10F                       	smpsAlterNote       $0F
0008A6B1 E701                       	dc.b	smpsNoAttack, $01
0008A6B3 E110                       	smpsAlterNote       $10
0008A6B5 8001                       	dc.b	nRst, $01
0008A6B7 E10F                       	smpsAlterNote       $0F
0008A6B9 C604                       	dc.b	nA5, $04
0008A6BB E10D                       	smpsAlterNote       $0D
0008A6BD C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008A6C3 E10B                       	smpsAlterNote       $0B
0008A6C5 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
0008A6CB E10F                       	smpsAlterNote       $0F
0008A6CD C604 8001                  	dc.b	nA5, $04, nRst, $01
0008A6D1 E10D                       	smpsAlterNote       $0D
0008A6D3 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008A6D9 E10C                       	smpsAlterNote       $0C
0008A6DB C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
0008A6E1 E10A                       	smpsAlterNote       $0A
0008A6E3 C904                       	dc.b	nC6, $04
0008A6E5 E110                       	smpsAlterNote       $10
0008A6E7 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008A6EB E10F                       	smpsAlterNote       $0F
0008A6ED C604                       	dc.b	nA5, $04
0008A6EF E10D                       	smpsAlterNote       $0D
0008A6F1 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008A6FD E109                       	smpsAlterNote       $09
0008A6FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A703 E10F                       	smpsAlterNote       $0F
0008A705 E701                       	dc.b	smpsNoAttack, $01
0008A707 E112                       	smpsAlterNote       $12
0008A709 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A70D E10C                       	smpsAlterNote       $0C
0008A70F E701                       	dc.b	smpsNoAttack, $01
0008A711 E108                       	smpsAlterNote       $08
0008A713 E701                       	dc.b	smpsNoAttack, $01
0008A715 E109                       	smpsAlterNote       $09
0008A717 E701                       	dc.b	smpsNoAttack, $01
0008A719 E10F                       	smpsAlterNote       $0F
0008A71B E701                       	dc.b	smpsNoAttack, $01
0008A71D E113                       	smpsAlterNote       $13
0008A71F E701                       	dc.b	smpsNoAttack, $01
0008A721 E10D                       	smpsAlterNote       $0D
0008A723 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008A729 E10C                       	smpsAlterNote       $0C
0008A72B C10D                       	dc.b	nE5, $0D
0008A72D E109                       	smpsAlterNote       $09
0008A72F E701                       	dc.b	smpsNoAttack, $01
0008A731 E106                       	smpsAlterNote       $06
0008A733 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A737 E10C                       	smpsAlterNote       $0C
0008A739 E701                       	dc.b	smpsNoAttack, $01
0008A73B E110                       	smpsAlterNote       $10
0008A73D E701                       	dc.b	smpsNoAttack, $01
0008A73F E10F                       	smpsAlterNote       $0F
0008A741 E701                       	dc.b	smpsNoAttack, $01
0008A743 E109                       	smpsAlterNote       $09
0008A745 E701                       	dc.b	smpsNoAttack, $01
0008A747 E105                       	smpsAlterNote       $05
0008A749 E701                       	dc.b	smpsNoAttack, $01
0008A74B E109                       	smpsAlterNote       $09
0008A74D E701                       	dc.b	smpsNoAttack, $01
0008A74F E10C                       	smpsAlterNote       $0C
0008A751 E701                       	dc.b	smpsNoAttack, $01
0008A753 E110                       	smpsAlterNote       $10
0008A755 E701                       	dc.b	smpsNoAttack, $01
0008A757 E10C                       	smpsAlterNote       $0C
0008A759 E701                       	dc.b	smpsNoAttack, $01
0008A75B E106                       	smpsAlterNote       $06
0008A75D E701                       	dc.b	smpsNoAttack, $01
0008A75F E105                       	smpsAlterNote       $05
0008A761 E701                       	dc.b	smpsNoAttack, $01
0008A763 E109                       	smpsAlterNote       $09
0008A765 E701                       	dc.b	smpsNoAttack, $01
0008A767 E10F                       	smpsAlterNote       $0F
0008A769 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A76D E10C                       	smpsAlterNote       $0C
0008A76F E701                       	dc.b	smpsNoAttack, $01
0008A771 E106                       	smpsAlterNote       $06
0008A773 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A777 E10C                       	smpsAlterNote       $0C
0008A779 E701                       	dc.b	smpsNoAttack, $01
0008A77B E10F                       	smpsAlterNote       $0F
0008A77D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A781 E109                       	smpsAlterNote       $09
0008A783 E701                       	dc.b	smpsNoAttack, $01
0008A785 E105                       	smpsAlterNote       $05
0008A787 E701                       	dc.b	smpsNoAttack, $01
0008A789 E106                       	smpsAlterNote       $06
0008A78B E701                       	dc.b	smpsNoAttack, $01
0008A78D E10C                       	smpsAlterNote       $0C
0008A78F E701                       	dc.b	smpsNoAttack, $01
0008A791 E110                       	smpsAlterNote       $10
0008A793 E701                       	dc.b	smpsNoAttack, $01
0008A795 E10C                       	smpsAlterNote       $0C
0008A797 E701                       	dc.b	smpsNoAttack, $01
0008A799 E109                       	smpsAlterNote       $09
0008A79B E701                       	dc.b	smpsNoAttack, $01
0008A79D E105                       	smpsAlterNote       $05
0008A79F E701                       	dc.b	smpsNoAttack, $01
0008A7A1 E109                       	smpsAlterNote       $09
0008A7A3 E701                       	dc.b	smpsNoAttack, $01
0008A7A5 E10F                       	smpsAlterNote       $0F
0008A7A7 E701                       	dc.b	smpsNoAttack, $01
0008A7A9 E110                       	smpsAlterNote       $10
0008A7AB E701                       	dc.b	smpsNoAttack, $01
0008A7AD E10C                       	smpsAlterNote       $0C
0008A7AF E701                       	dc.b	smpsNoAttack, $01
0008A7B1 E106                       	smpsAlterNote       $06
0008A7B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A7B7 E109                       	smpsAlterNote       $09
0008A7B9 E701                       	dc.b	smpsNoAttack, $01
0008A7BB E10F                       	smpsAlterNote       $0F
0008A7BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A7C1 E109                       	smpsAlterNote       $09
0008A7C3 E701                       	dc.b	smpsNoAttack, $01
0008A7C5 E106                       	smpsAlterNote       $06
0008A7C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A7CB E10C                       	smpsAlterNote       $0C
0008A7CD E701                       	dc.b	smpsNoAttack, $01
0008A7CF E110                       	smpsAlterNote       $10
0008A7D1 E701                       	dc.b	smpsNoAttack, $01
0008A7D3 E10F                       	smpsAlterNote       $0F
0008A7D5 E701                       	dc.b	smpsNoAttack, $01
0008A7D7 E109                       	smpsAlterNote       $09
0008A7D9 E701                       	dc.b	smpsNoAttack, $01
0008A7DB E105                       	smpsAlterNote       $05
0008A7DD E701                       	dc.b	smpsNoAttack, $01
0008A7DF E109                       	smpsAlterNote       $09
0008A7E1 E701                       	dc.b	smpsNoAttack, $01
0008A7E3 E10F                       	smpsAlterNote       $0F
0008A7E5 E701                       	dc.b	smpsNoAttack, $01
0008A7E7 E110                       	smpsAlterNote       $10
0008A7E9 E701                       	dc.b	smpsNoAttack, $01
0008A7EB E10C                       	smpsAlterNote       $0C
0008A7ED E701                       	dc.b	smpsNoAttack, $01
0008A7EF E106                       	smpsAlterNote       $06
0008A7F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A7F5 E109                       	smpsAlterNote       $09
0008A7F7 E701                       	dc.b	smpsNoAttack, $01
0008A7F9 E10F                       	smpsAlterNote       $0F
0008A7FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A7FF E109                       	smpsAlterNote       $09
0008A801 E701                       	dc.b	smpsNoAttack, $01
0008A803 E106                       	smpsAlterNote       $06
0008A805 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A809 E10C                       	smpsAlterNote       $0C
0008A80B E701                       	dc.b	smpsNoAttack, $01
0008A80D E110                       	smpsAlterNote       $10
0008A80F E701                       	dc.b	smpsNoAttack, $01
0008A811 E10F                       	smpsAlterNote       $0F
0008A813 E701                       	dc.b	smpsNoAttack, $01
0008A815 E109                       	smpsAlterNote       $09
0008A817 E701                       	dc.b	smpsNoAttack, $01
0008A819 E105                       	smpsAlterNote       $05
0008A81B E701                       	dc.b	smpsNoAttack, $01
0008A81D E109                       	smpsAlterNote       $09
0008A81F E701                       	dc.b	smpsNoAttack, $01
0008A821 E10C                       	smpsAlterNote       $0C
0008A823 E701                       	dc.b	smpsNoAttack, $01
0008A825 E110                       	smpsAlterNote       $10
0008A827 E701                       	dc.b	smpsNoAttack, $01
0008A829 E10C                       	smpsAlterNote       $0C
0008A82B E701                       	dc.b	smpsNoAttack, $01
0008A82D E106                       	smpsAlterNote       $06
0008A82F E701                       	dc.b	smpsNoAttack, $01
0008A831 E105                       	smpsAlterNote       $05
0008A833 E701                       	dc.b	smpsNoAttack, $01
0008A835 E109                       	smpsAlterNote       $09
0008A837 E701                       	dc.b	smpsNoAttack, $01
0008A839 E10F                       	smpsAlterNote       $0F
0008A83B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A83F E10C                       	smpsAlterNote       $0C
0008A841 E701                       	dc.b	smpsNoAttack, $01
0008A843 E106                       	smpsAlterNote       $06
0008A845 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A849 E10C                       	smpsAlterNote       $0C
0008A84B E701                       	dc.b	smpsNoAttack, $01
0008A84D E10F                       	smpsAlterNote       $0F
0008A84F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A853 E109                       	smpsAlterNote       $09
0008A855 E701                       	dc.b	smpsNoAttack, $01
0008A857 E105                       	smpsAlterNote       $05
0008A859 E701                       	dc.b	smpsNoAttack, $01
0008A85B E106                       	smpsAlterNote       $06
0008A85D E701                       	dc.b	smpsNoAttack, $01
0008A85F E10C                       	smpsAlterNote       $0C
0008A861 E701                       	dc.b	smpsNoAttack, $01
0008A863 E110                       	smpsAlterNote       $10
0008A865 E701                       	dc.b	smpsNoAttack, $01
0008A867 E10C                       	smpsAlterNote       $0C
0008A869 E701                       	dc.b	smpsNoAttack, $01
0008A86B E109                       	smpsAlterNote       $09
0008A86D E701                       	dc.b	smpsNoAttack, $01
0008A86F E105                       	smpsAlterNote       $05
0008A871 E701                       	dc.b	smpsNoAttack, $01
0008A873 E109                       	smpsAlterNote       $09
0008A875 E701                       	dc.b	smpsNoAttack, $01
0008A877 E10F                       	smpsAlterNote       $0F
0008A879 E701                       	dc.b	smpsNoAttack, $01
0008A87B E110                       	smpsAlterNote       $10
0008A87D E701                       	dc.b	smpsNoAttack, $01
0008A87F E10C                       	smpsAlterNote       $0C
0008A881 E701                       	dc.b	smpsNoAttack, $01
0008A883 E106                       	smpsAlterNote       $06
0008A885 E701                       	dc.b	smpsNoAttack, $01
0008A887 E10B                       	smpsAlterNote       $0B
0008A889 BF02                       	dc.b	nD5, $02
0008A88B E10C                       	smpsAlterNote       $0C
0008A88D C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
0008A893 E109                       	smpsAlterNote       $09
0008A895 E701                       	dc.b	smpsNoAttack, $01
0008A897 E105                       	smpsAlterNote       $05
0008A899 E701                       	dc.b	smpsNoAttack, $01
0008A89B E109                       	smpsAlterNote       $09
0008A89D E701                       	dc.b	smpsNoAttack, $01
0008A89F E10F                       	smpsAlterNote       $0F
0008A8A1 E701                       	dc.b	smpsNoAttack, $01
0008A8A3 E110                       	smpsAlterNote       $10
0008A8A5 E701                       	dc.b	smpsNoAttack, $01
0008A8A7 E10C                       	smpsAlterNote       $0C
0008A8A9 E701                       	dc.b	smpsNoAttack, $01
0008A8AB E106                       	smpsAlterNote       $06
0008A8AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8B1 E109                       	smpsAlterNote       $09
0008A8B3 E701                       	dc.b	smpsNoAttack, $01
0008A8B5 E10F                       	smpsAlterNote       $0F
0008A8B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8BB E109                       	smpsAlterNote       $09
0008A8BD E701                       	dc.b	smpsNoAttack, $01
0008A8BF E106                       	smpsAlterNote       $06
0008A8C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8C5 E10C                       	smpsAlterNote       $0C
0008A8C7 E701                       	dc.b	smpsNoAttack, $01
0008A8C9 E110                       	smpsAlterNote       $10
0008A8CB E701                       	dc.b	smpsNoAttack, $01
0008A8CD E10F                       	smpsAlterNote       $0F
0008A8CF E701                       	dc.b	smpsNoAttack, $01
0008A8D1 E109                       	smpsAlterNote       $09
0008A8D3 E701                       	dc.b	smpsNoAttack, $01
0008A8D5 E105                       	smpsAlterNote       $05
0008A8D7 E701                       	dc.b	smpsNoAttack, $01
0008A8D9 E109                       	smpsAlterNote       $09
0008A8DB E701                       	dc.b	smpsNoAttack, $01
0008A8DD E10C                       	smpsAlterNote       $0C
0008A8DF E701                       	dc.b	smpsNoAttack, $01
0008A8E1 E110                       	smpsAlterNote       $10
0008A8E3 E701                       	dc.b	smpsNoAttack, $01
0008A8E5 E10C                       	smpsAlterNote       $0C
0008A8E7 E701                       	dc.b	smpsNoAttack, $01
0008A8E9 E106                       	smpsAlterNote       $06
0008A8EB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A8EF E10D                       	smpsAlterNote       $0D
0008A8F1 C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
0008A8F9 E10C                       	smpsAlterNote       $0C
0008A8FB C10D                       	dc.b	nE5, $0D
0008A8FD E106                       	smpsAlterNote       $06
0008A8FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A903 E109                       	smpsAlterNote       $09
0008A905 E701                       	dc.b	smpsNoAttack, $01
0008A907 E10F                       	smpsAlterNote       $0F
0008A909 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A90D E109                       	smpsAlterNote       $09
0008A90F E701                       	dc.b	smpsNoAttack, $01
0008A911 E106                       	smpsAlterNote       $06
0008A913 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A917 E10C                       	smpsAlterNote       $0C
0008A919 E701                       	dc.b	smpsNoAttack, $01
0008A91B E110                       	smpsAlterNote       $10
0008A91D E701                       	dc.b	smpsNoAttack, $01
0008A91F E10F                       	smpsAlterNote       $0F
0008A921 E701                       	dc.b	smpsNoAttack, $01
0008A923 E109                       	smpsAlterNote       $09
0008A925 E701                       	dc.b	smpsNoAttack, $01
0008A927 E105                       	smpsAlterNote       $05
0008A929 E701                       	dc.b	smpsNoAttack, $01
0008A92B E106                       	smpsAlterNote       $06
0008A92D 800F                       	dc.b	nRst, $0F
0008A931 E6FF                       	smpsAlterVol        $FF
0008A933 E10F                       	smpsAlterNote       $0F
0008A935 BA01                       	dc.b	nA4, $01
0008A937 E110                       	smpsAlterNote       $10
0008A939 BB02                       	dc.b	nBb4, $02
0008A93B E10F                       	smpsAlterNote       $0F
0008A93D BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
0008A943 E10B                       	smpsAlterNote       $0B
0008A945 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008A949 E10C                       	smpsAlterNote       $0C
0008A94B C103                       	dc.b	nE5, $03
0008A94D E10D                       	smpsAlterNote       $0D
0008A94F C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008A959 E10B                       	smpsAlterNote       $0B
0008A95B BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0008A95F E104                       	smpsAlterNote       $04
0008A961 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A965 E10A                       	smpsAlterNote       $0A
0008A967 E701                       	dc.b	smpsNoAttack, $01
0008A969 E10D                       	smpsAlterNote       $0D
0008A96B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A96F E107                       	smpsAlterNote       $07
0008A971 E701                       	dc.b	smpsNoAttack, $01
0008A973 E104                       	smpsAlterNote       $04
0008A975 8001                       	dc.b	nRst, $01
0008A977 E110                       	smpsAlterNote       $10
0008A979 C703                       	dc.b	nBb5, $03
0008A97B E10F                       	smpsAlterNote       $0F
0008A97D C603 8001                  	dc.b	nA5, $03, nRst, $01
0008A981 E10D                       	smpsAlterNote       $0D
0008A983 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008A987 E10C                       	smpsAlterNote       $0C
0008A989 E701                       	dc.b	smpsNoAttack, $01
0008A98B E108                       	smpsAlterNote       $08
0008A98D E701                       	dc.b	smpsNoAttack, $01
0008A98F E109                       	smpsAlterNote       $09
0008A991 E701                       	dc.b	smpsNoAttack, $01
0008A993 E10F                       	smpsAlterNote       $0F
0008A995 E701                       	dc.b	smpsNoAttack, $01
0008A997 E113                       	smpsAlterNote       $13
0008A999 E701                       	dc.b	smpsNoAttack, $01
0008A99B E10F                       	smpsAlterNote       $0F
0008A99D E701                       	dc.b	smpsNoAttack, $01
0008A99F E10C                       	smpsAlterNote       $0C
0008A9A1 E701                       	dc.b	smpsNoAttack, $01
0008A9A3 E108                       	smpsAlterNote       $08
0008A9A5 E701                       	dc.b	smpsNoAttack, $01
0008A9A7 E10C                       	smpsAlterNote       $0C
0008A9A9 E701                       	dc.b	smpsNoAttack, $01
0008A9AB E112                       	smpsAlterNote       $12
0008A9AD E701                       	dc.b	smpsNoAttack, $01
0008A9AF E113                       	smpsAlterNote       $13
0008A9B1 E701                       	dc.b	smpsNoAttack, $01
0008A9B3 E10F                       	smpsAlterNote       $0F
0008A9B5 E701                       	dc.b	smpsNoAttack, $01
0008A9B7 E109                       	smpsAlterNote       $09
0008A9B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A9BD E10C                       	smpsAlterNote       $0C
0008A9BF E701                       	dc.b	smpsNoAttack, $01
0008A9C1 E112                       	smpsAlterNote       $12
0008A9C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A9C7 E10C                       	smpsAlterNote       $0C
0008A9C9 E701                       	dc.b	smpsNoAttack, $01
0008A9CB E109                       	smpsAlterNote       $09
0008A9CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A9D1 E10F                       	smpsAlterNote       $0F
0008A9D3 E701                       	dc.b	smpsNoAttack, $01
0008A9D5 E113                       	smpsAlterNote       $13
0008A9D7 E701                       	dc.b	smpsNoAttack, $01
0008A9D9 E112                       	smpsAlterNote       $12
0008A9DB E701                       	dc.b	smpsNoAttack, $01
0008A9DD E10C                       	smpsAlterNote       $0C
0008A9DF E701                       	dc.b	smpsNoAttack, $01
0008A9E1 E108                       	smpsAlterNote       $08
0008A9E3 E701                       	dc.b	smpsNoAttack, $01
0008A9E5 E10C                       	smpsAlterNote       $0C
0008A9E7 E701                       	dc.b	smpsNoAttack, $01
0008A9E9 E10F                       	smpsAlterNote       $0F
0008A9EB E701                       	dc.b	smpsNoAttack, $01
0008A9ED E113                       	smpsAlterNote       $13
0008A9EF E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008A9F3 E10B                       	smpsAlterNote       $0B
0008A9F5 BF03                       	dc.b	nD5, $03
0008A9F7 E10C                       	smpsAlterNote       $0C
0008A9F9 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008A9FD E10D                       	smpsAlterNote       $0D
0008A9FF C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008AA09 E10B                       	smpsAlterNote       $0B
0008AA0B BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008AA17 E110                       	smpsAlterNote       $10
0008AA19 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008AA1D E10F                       	smpsAlterNote       $0F
0008AA1F C604                       	dc.b	nA5, $04
0008AA21 E10D                       	smpsAlterNote       $0D
0008AA23 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008AA29 E109                       	smpsAlterNote       $09
0008AA2B E701                       	dc.b	smpsNoAttack, $01
0008AA2D E108                       	smpsAlterNote       $08
0008AA2F E701                       	dc.b	smpsNoAttack, $01
0008AA31 E10C                       	smpsAlterNote       $0C
0008AA33 E701                       	dc.b	smpsNoAttack, $01
0008AA35 E112                       	smpsAlterNote       $12
0008AA37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA3B E10F                       	smpsAlterNote       $0F
0008AA3D E701                       	dc.b	smpsNoAttack, $01
0008AA3F E109                       	smpsAlterNote       $09
0008AA41 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA45 E10F                       	smpsAlterNote       $0F
0008AA47 E701                       	dc.b	smpsNoAttack, $01
0008AA49 E112                       	smpsAlterNote       $12
0008AA4B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA4F E10C                       	smpsAlterNote       $0C
0008AA51 E701                       	dc.b	smpsNoAttack, $01
0008AA53 E108                       	smpsAlterNote       $08
0008AA55 E701                       	dc.b	smpsNoAttack, $01
0008AA57 E109                       	smpsAlterNote       $09
0008AA59 E701                       	dc.b	smpsNoAttack, $01
0008AA5B E10F                       	smpsAlterNote       $0F
0008AA5D E701                       	dc.b	smpsNoAttack, $01
0008AA5F E113                       	smpsAlterNote       $13
0008AA61 E701                       	dc.b	smpsNoAttack, $01
0008AA63 E10F                       	smpsAlterNote       $0F
0008AA65 E701                       	dc.b	smpsNoAttack, $01
0008AA67 E10C                       	smpsAlterNote       $0C
0008AA69 E701                       	dc.b	smpsNoAttack, $01
0008AA6B E108                       	smpsAlterNote       $08
0008AA6D E701                       	dc.b	smpsNoAttack, $01
0008AA6F E10C                       	smpsAlterNote       $0C
0008AA71 E701                       	dc.b	smpsNoAttack, $01
0008AA73 E112                       	smpsAlterNote       $12
0008AA75 E701                       	dc.b	smpsNoAttack, $01
0008AA77 E113                       	smpsAlterNote       $13
0008AA79 E701                       	dc.b	smpsNoAttack, $01
0008AA7B E10F                       	smpsAlterNote       $0F
0008AA7D E701                       	dc.b	smpsNoAttack, $01
0008AA7F E109                       	smpsAlterNote       $09
0008AA81 E701                       	dc.b	smpsNoAttack, $01
0008AA83 E10D                       	smpsAlterNote       $0D
0008AA85 C402                       	dc.b	nG5, $02
0008AA87 E10F                       	smpsAlterNote       $0F
0008AA89 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
0008AA93 E10D                       	smpsAlterNote       $0D
0008AA95 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008AA9B E10B                       	smpsAlterNote       $0B
0008AA9D BF0D                       	dc.b	nD5, $0D
0008AA9F E108                       	smpsAlterNote       $08
0008AAA1 E701                       	dc.b	smpsNoAttack, $01
0008AAA3 E104                       	smpsAlterNote       $04
0008AAA5 E701                       	dc.b	smpsNoAttack, $01
0008AAA7 E105                       	smpsAlterNote       $05
0008AAA9 E701                       	dc.b	smpsNoAttack, $01
0008AAAB E10B                       	smpsAlterNote       $0B
0008AAAD E701                       	dc.b	smpsNoAttack, $01
0008AAAF E10F                       	smpsAlterNote       $0F
0008AAB1 E701                       	dc.b	smpsNoAttack, $01
0008AAB3 E10B                       	smpsAlterNote       $0B
0008AAB5 E701                       	dc.b	smpsNoAttack, $01
0008AAB7 E108                       	smpsAlterNote       $08
0008AAB9 E701                       	dc.b	smpsNoAttack, $01
0008AABB E104                       	smpsAlterNote       $04
0008AABD E701                       	dc.b	smpsNoAttack, $01
0008AABF E108                       	smpsAlterNote       $08
0008AAC1 E701                       	dc.b	smpsNoAttack, $01
0008AAC3 E10E                       	smpsAlterNote       $0E
0008AAC5 E701                       	dc.b	smpsNoAttack, $01
0008AAC7 E10F                       	smpsAlterNote       $0F
0008AAC9 E701                       	dc.b	smpsNoAttack, $01
0008AACB E10C                       	smpsAlterNote       $0C
0008AACD C101                       	dc.b	nE5, $01
0008AACF E10D                       	smpsAlterNote       $0D
0008AAD1 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008AAD9 E10F                       	smpsAlterNote       $0F
0008AADB C607                       	dc.b	nA5, $07
0008AADD E10C                       	smpsAlterNote       $0C
0008AADF CD07                       	dc.b	nE6, $07
0008AAE1 E10D                       	smpsAlterNote       $0D
0008AAE3 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008AAE7 E10C                       	smpsAlterNote       $0C
0008AAE9 CD03                       	dc.b	nE6, $03
0008AAEB E10A                       	smpsAlterNote       $0A
0008AAED C903 8001                  	dc.b	nC6, $03, nRst, $01
0008AAF1 E10D                       	smpsAlterNote       $0D
0008AAF3 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008AAF9 E10A                       	smpsAlterNote       $0A
0008AAFB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AAFF E110                       	smpsAlterNote       $10
0008AB01 E701                       	dc.b	smpsNoAttack, $01
0008AB03 E114                       	smpsAlterNote       $14
0008AB05 E701                       	dc.b	smpsNoAttack, $01
0008AB07 E113                       	smpsAlterNote       $13
0008AB09 E701                       	dc.b	smpsNoAttack, $01
0008AB0B E10D                       	smpsAlterNote       $0D
0008AB0D E701                       	dc.b	smpsNoAttack, $01
0008AB0F E109                       	smpsAlterNote       $09
0008AB11 E701                       	dc.b	smpsNoAttack, $01
0008AB13 E10D                       	smpsAlterNote       $0D
0008AB15 E701                       	dc.b	smpsNoAttack, $01
0008AB17 E110                       	smpsAlterNote       $10
0008AB19 E701                       	dc.b	smpsNoAttack, $01
0008AB1B E114                       	smpsAlterNote       $14
0008AB1D E701                       	dc.b	smpsNoAttack, $01
0008AB1F E10F                       	smpsAlterNote       $0F
0008AB21 C607                       	dc.b	nA5, $07
0008AB23 E10D                       	smpsAlterNote       $0D
0008AB25 C40D                       	dc.b	nG5, $0D
0008AB27 E10A                       	smpsAlterNote       $0A
0008AB29 E701                       	dc.b	smpsNoAttack, $01
0008AB2B E106                       	smpsAlterNote       $06
0008AB2D E701                       	dc.b	smpsNoAttack, $01
0008AB2F E10A                       	smpsAlterNote       $0A
0008AB31 E701                       	dc.b	smpsNoAttack, $01
0008AB33 E10D                       	smpsAlterNote       $0D
0008AB35 E701                       	dc.b	smpsNoAttack, $01
0008AB37 E111                       	smpsAlterNote       $11
0008AB39 E701                       	dc.b	smpsNoAttack, $01
0008AB3B E10D                       	smpsAlterNote       $0D
0008AB3D E701                       	dc.b	smpsNoAttack, $01
0008AB3F E107                       	smpsAlterNote       $07
0008AB41 E701                       	dc.b	smpsNoAttack, $01
0008AB43 E106                       	smpsAlterNote       $06
0008AB45 E701                       	dc.b	smpsNoAttack, $01
0008AB47 E10A                       	smpsAlterNote       $0A
0008AB49 E701                       	dc.b	smpsNoAttack, $01
0008AB4B E110                       	smpsAlterNote       $10
0008AB4D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB51 E10D                       	smpsAlterNote       $0D
0008AB53 E701                       	dc.b	smpsNoAttack, $01
0008AB55 E107                       	smpsAlterNote       $07
0008AB57 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB5B E10F                       	smpsAlterNote       $0F
0008AB5D C60E                       	dc.b	nA5, $0E
0008AB5F E109                       	smpsAlterNote       $09
0008AB61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB65 E10F                       	smpsAlterNote       $0F
0008AB67 E701                       	dc.b	smpsNoAttack, $01
0008AB69 E112                       	smpsAlterNote       $12
0008AB6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB6F E10C                       	smpsAlterNote       $0C
0008AB71 E701                       	dc.b	smpsNoAttack, $01
0008AB73 E108                       	smpsAlterNote       $08
0008AB75 E701                       	dc.b	smpsNoAttack, $01
0008AB77 E109                       	smpsAlterNote       $09
0008AB79 E701                       	dc.b	smpsNoAttack, $01
0008AB7B E10F                       	smpsAlterNote       $0F
0008AB7D E701                       	dc.b	smpsNoAttack, $01
0008AB7F E113                       	smpsAlterNote       $13
0008AB81 E701                       	dc.b	smpsNoAttack, $01
0008AB83 E10F                       	smpsAlterNote       $0F
0008AB85 E701                       	dc.b	smpsNoAttack, $01
0008AB87 E10C                       	smpsAlterNote       $0C
0008AB89 E701                       	dc.b	smpsNoAttack, $01
0008AB8B E108                       	smpsAlterNote       $08
0008AB8D E701                       	dc.b	smpsNoAttack, $01
0008AB8F E109                       	smpsAlterNote       $09
0008AB91 8001                       	dc.b	nRst, $01
0008AB93 E110                       	smpsAlterNote       $10
0008AB95 C70D                       	dc.b	nBb5, $0D
0008AB97 E10D                       	smpsAlterNote       $0D
0008AB99 E701                       	dc.b	smpsNoAttack, $01
0008AB9B E109                       	smpsAlterNote       $09
0008AB9D E701                       	dc.b	smpsNoAttack, $01
0008AB9F E10D                       	smpsAlterNote       $0D
0008ABA1 E701                       	dc.b	smpsNoAttack, $01
0008ABA3 E113                       	smpsAlterNote       $13
0008ABA5 E701                       	dc.b	smpsNoAttack, $01
0008ABA7 E114                       	smpsAlterNote       $14
0008ABA9 E701                       	dc.b	smpsNoAttack, $01
0008ABAB E110                       	smpsAlterNote       $10
0008ABAD E701                       	dc.b	smpsNoAttack, $01
0008ABAF E10A                       	smpsAlterNote       $0A
0008ABB1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABB5 E10D                       	smpsAlterNote       $0D
0008ABB7 E701                       	dc.b	smpsNoAttack, $01
0008ABB9 E113                       	smpsAlterNote       $13
0008ABBB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABBF E10D                       	smpsAlterNote       $0D
0008ABC1 E701                       	dc.b	smpsNoAttack, $01
0008ABC3 E10A                       	smpsAlterNote       $0A
0008ABC5 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
0008ABCF E10B                       	smpsAlterNote       $0B
0008ABD1 8001                       	dc.b	nRst, $01
0008ABD3 E10C                       	smpsAlterNote       $0C
0008ABD5 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
0008ABD9 E10B                       	smpsAlterNote       $0B
0008ABDB CB0D                       	dc.b	nD6, $0D
0008ABDD E105                       	smpsAlterNote       $05
0008ABDF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABE3 E108                       	smpsAlterNote       $08
0008ABE5 E701                       	dc.b	smpsNoAttack, $01
0008ABE7 E10E                       	smpsAlterNote       $0E
0008ABE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABED E108                       	smpsAlterNote       $08
0008ABEF E701                       	dc.b	smpsNoAttack, $01
0008ABF1 E105                       	smpsAlterNote       $05
0008ABF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABF7 E10B                       	smpsAlterNote       $0B
0008ABF9 E701                       	dc.b	smpsNoAttack, $01
0008ABFB E10F                       	smpsAlterNote       $0F
0008ABFD E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008AC01 E10C                       	smpsAlterNote       $0C
0008AC03 CC0D                       	dc.b	nEb6, $0D
0008AC05 E106                       	smpsAlterNote       $06
0008AC07 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC0B E109                       	smpsAlterNote       $09
0008AC0D E701                       	dc.b	smpsNoAttack, $01
0008AC0F E10C                       	smpsAlterNote       $0C
0008AC11 8001                       	dc.b	nRst, $01
0008AC13 E10A                       	smpsAlterNote       $0A
0008AC15 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008AC21 CB0E                       	dc.b	nD6, $0E
0008AC23 E105                       	smpsAlterNote       $05
0008AC25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC29 E10B                       	smpsAlterNote       $0B
0008AC2B E701                       	dc.b	smpsNoAttack, $01
0008AC2D E10E                       	smpsAlterNote       $0E
0008AC2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC33 E108                       	smpsAlterNote       $08
0008AC35 E701                       	dc.b	smpsNoAttack, $01
0008AC37 E104                       	smpsAlterNote       $04
0008AC39 E701                       	dc.b	smpsNoAttack, $01
0008AC3B E105                       	smpsAlterNote       $05
0008AC3D E701                       	dc.b	smpsNoAttack, $01
0008AC3F E10B                       	smpsAlterNote       $0B
0008AC41 E701                       	dc.b	smpsNoAttack, $01
0008AC43 E10F                       	smpsAlterNote       $0F
0008AC45 E701                       	dc.b	smpsNoAttack, $01
0008AC47 E10D                       	smpsAlterNote       $0D
0008AC49 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
0008AC4D E10C                       	smpsAlterNote       $0C
0008AC4F CC06 8001                  	dc.b	nEb6, $06, nRst, $01
0008AC53 E10A                       	smpsAlterNote       $0A
0008AC55 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
0008AC61 CB0D                       	dc.b	nD6, $0D
0008AC63 E108                       	smpsAlterNote       $08
0008AC65 E701                       	dc.b	smpsNoAttack, $01
0008AC67 E104                       	smpsAlterNote       $04
0008AC69 E701                       	dc.b	smpsNoAttack, $01
0008AC6B E105                       	smpsAlterNote       $05
0008AC6D E701                       	dc.b	smpsNoAttack, $01
0008AC6F E10B                       	smpsAlterNote       $0B
0008AC71 E701                       	dc.b	smpsNoAttack, $01
0008AC73 E10F                       	smpsAlterNote       $0F
0008AC75 E701                       	dc.b	smpsNoAttack, $01
0008AC77 E10B                       	smpsAlterNote       $0B
0008AC79 E701                       	dc.b	smpsNoAttack, $01
0008AC7B E108                       	smpsAlterNote       $08
0008AC7D E701                       	dc.b	smpsNoAttack, $01
0008AC7F E104                       	smpsAlterNote       $04
0008AC81 E701                       	dc.b	smpsNoAttack, $01
0008AC83 E108                       	smpsAlterNote       $08
0008AC85 E701                       	dc.b	smpsNoAttack, $01
0008AC87 E10E                       	smpsAlterNote       $0E
0008AC89 E701                       	dc.b	smpsNoAttack, $01
0008AC8B E10F                       	smpsAlterNote       $0F
0008AC8D E701                       	dc.b	smpsNoAttack, $01
0008AC8F E10C                       	smpsAlterNote       $0C
0008AC91 CC0D                       	dc.b	nEb6, $0D
0008AC93 E109                       	smpsAlterNote       $09
0008AC95 E701                       	dc.b	smpsNoAttack, $01
0008AC97 E105                       	smpsAlterNote       $05
0008AC99 E701                       	dc.b	smpsNoAttack, $01
0008AC9B E106                       	smpsAlterNote       $06
0008AC9D E701                       	dc.b	smpsNoAttack, $01
0008AC9F E10C                       	smpsAlterNote       $0C
0008ACA1 E701                       	dc.b	smpsNoAttack, $01
0008ACA3 E10A                       	smpsAlterNote       $0A
0008ACA5 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
0008ACB1 CB0D                       	dc.b	nD6, $0D
0008ACB3 E108                       	smpsAlterNote       $08
0008ACB5 E701                       	dc.b	smpsNoAttack, $01
0008ACB7 E104                       	smpsAlterNote       $04
0008ACB9 E701                       	dc.b	smpsNoAttack, $01
0008ACBB E108                       	smpsAlterNote       $08
0008ACBD E701                       	dc.b	smpsNoAttack, $01
0008ACBF E10B                       	smpsAlterNote       $0B
0008ACC1 E701                       	dc.b	smpsNoAttack, $01
0008ACC3 E10F                       	smpsAlterNote       $0F
0008ACC5 E701                       	dc.b	smpsNoAttack, $01
0008ACC7 E10B                       	smpsAlterNote       $0B
0008ACC9 E701                       	dc.b	smpsNoAttack, $01
0008ACCB E105                       	smpsAlterNote       $05
0008ACCD E701                       	dc.b	smpsNoAttack, $01
0008ACCF E104                       	smpsAlterNote       $04
0008ACD1 E701                       	dc.b	smpsNoAttack, $01
0008ACD3 E108                       	smpsAlterNote       $08
0008ACD5 E701                       	dc.b	smpsNoAttack, $01
0008ACD7 E10E                       	smpsAlterNote       $0E
0008ACD9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ACDD E10B                       	smpsAlterNote       $0B
0008ACDF E701                       	dc.b	smpsNoAttack, $01
0008ACE1 E105                       	smpsAlterNote       $05
0008ACE3 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
0008ACEB 03                         	dc.b	$03
0008ACEC E601                       	smpsAlterVol        $01
0008ACEE F6F1 D1                    	smpsJump            music84_Jump01
0008ACF1                            
0008ACF1                            ; FM5 Data
0008ACF1                            music84_FM5:
0008ACF3 E080                       	smpsPan             panLeft, $00
0008ACF5 8003                       	dc.b	nRst, $03
0008ACF7 E10D                       	smpsAlterNote       $0D
0008ACF9 C203 8008                  	dc.b	nF5, $03, nRst, $08
0008ACFD E10C                       	smpsAlterNote       $0C
0008ACFF C103 800A                  	dc.b	nE5, $03, nRst, $0A
0008AD03 E10F                       	smpsAlterNote       $0F
0008AD05 BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008AD0B E6FE                       	smpsAlterVol        $FE
0008AD0D C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
0008AD13 E10D                       	smpsAlterNote       $0D
0008AD15 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008AD1B E10C                       	smpsAlterNote       $0C
0008AD1D C102 8001                  	dc.b	nE5, $02, nRst, $01
0008AD21 E10A                       	smpsAlterNote       $0A
0008AD23 BD01 8001                  	dc.b	nC5, $01, nRst, $01
0008AD29 03                         	dc.b	$03
0008AD2A                            
0008AD2A                            music84_Jump00:
0008AD2A 8004                       	dc.b	nRst, $04
0008AD2C E602                       	smpsAlterVol        $02
0008AD2E E10D                       	smpsAlterNote       $0D
0008AD30 B60D                       	dc.b	nF4, $0D
0008AD32 E107                       	smpsAlterNote       $07
0008AD34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD38 E10A                       	smpsAlterNote       $0A
0008AD3A E701                       	dc.b	smpsNoAttack, $01
0008AD3C E110                       	smpsAlterNote       $10
0008AD3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD42 E10A                       	smpsAlterNote       $0A
0008AD44 E701                       	dc.b	smpsNoAttack, $01
0008AD46 E107                       	smpsAlterNote       $07
0008AD48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD4C E10D                       	smpsAlterNote       $0D
0008AD4E E701                       	dc.b	smpsNoAttack, $01
0008AD50 E111                       	smpsAlterNote       $11
0008AD52 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008AD56 E10D                       	smpsAlterNote       $0D
0008AD58 B80D                       	dc.b	nG4, $0D
0008AD5A E107                       	smpsAlterNote       $07
0008AD5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD60 E10A                       	smpsAlterNote       $0A
0008AD62 E701                       	dc.b	smpsNoAttack, $01
0008AD64 E110                       	smpsAlterNote       $10
0008AD66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD6A E10A                       	smpsAlterNote       $0A
0008AD6C E701                       	dc.b	smpsNoAttack, $01
0008AD6E E107                       	smpsAlterNote       $07
0008AD70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD74 E10D                       	smpsAlterNote       $0D
0008AD76 E701                       	dc.b	smpsNoAttack, $01
0008AD78 E111                       	smpsAlterNote       $11
0008AD7A E701                       	dc.b	smpsNoAttack, $01
0008AD7C E110                       	smpsAlterNote       $10
0008AD7E E701                       	dc.b	smpsNoAttack, $01
0008AD80 E10A                       	smpsAlterNote       $0A
0008AD82 E701                       	dc.b	smpsNoAttack, $01
0008AD84 E106                       	smpsAlterNote       $06
0008AD86 E701                       	dc.b	smpsNoAttack, $01
0008AD88 E10A                       	smpsAlterNote       $0A
0008AD8A E701                       	dc.b	smpsNoAttack, $01
0008AD8C E10D                       	smpsAlterNote       $0D
0008AD8E E701                       	dc.b	smpsNoAttack, $01
0008AD90 E111                       	smpsAlterNote       $11
0008AD92 E701                       	dc.b	smpsNoAttack, $01
0008AD94 E10D                       	smpsAlterNote       $0D
0008AD96 E701                       	dc.b	smpsNoAttack, $01
0008AD98 E10F                       	smpsAlterNote       $0F
0008AD9A BA0E                       	dc.b	nA4, $0E
0008AD9C E109                       	smpsAlterNote       $09
0008AD9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADA2 E10F                       	smpsAlterNote       $0F
0008ADA4 E701                       	dc.b	smpsNoAttack, $01
0008ADA6 E112                       	smpsAlterNote       $12
0008ADA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADAC E10C                       	smpsAlterNote       $0C
0008ADAE E701                       	dc.b	smpsNoAttack, $01
0008ADB0 E108                       	smpsAlterNote       $08
0008ADB2 E701                       	dc.b	smpsNoAttack, $01
0008ADB4 E109                       	smpsAlterNote       $09
0008ADB6 E701                       	dc.b	smpsNoAttack, $01
0008ADB8 E10F                       	smpsAlterNote       $0F
0008ADBA E701                       	dc.b	smpsNoAttack, $01
0008ADBC E113                       	smpsAlterNote       $13
0008ADBE E701                       	dc.b	smpsNoAttack, $01
0008ADC0 E10F                       	smpsAlterNote       $0F
0008ADC2 E701                       	dc.b	smpsNoAttack, $01
0008ADC4 E109                       	smpsAlterNote       $09
0008ADC6 E701                       	dc.b	smpsNoAttack, $01
0008ADC8 E108                       	smpsAlterNote       $08
0008ADCA E701                       	dc.b	smpsNoAttack, $01
0008ADCC E10C                       	smpsAlterNote       $0C
0008ADCE E701                       	dc.b	smpsNoAttack, $01
0008ADD0 E112                       	smpsAlterNote       $12
0008ADD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADD6 E10F                       	smpsAlterNote       $0F
0008ADD8 E701                       	dc.b	smpsNoAttack, $01
0008ADDA E109                       	smpsAlterNote       $09
0008ADDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADE0 E10F                       	smpsAlterNote       $0F
0008ADE2 E701                       	dc.b	smpsNoAttack, $01
0008ADE4 E112                       	smpsAlterNote       $12
0008ADE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADEA E10C                       	smpsAlterNote       $0C
0008ADEC E701                       	dc.b	smpsNoAttack, $01
0008ADEE E108                       	smpsAlterNote       $08
0008ADF0 E701                       	dc.b	smpsNoAttack, $01
0008ADF2 E109                       	smpsAlterNote       $09
0008ADF4 E701                       	dc.b	smpsNoAttack, $01
0008ADF6 E10F                       	smpsAlterNote       $0F
0008ADF8 E701                       	dc.b	smpsNoAttack, $01
0008ADFA E113                       	smpsAlterNote       $13
0008ADFC E701                       	dc.b	smpsNoAttack, $01
0008ADFE E10F                       	smpsAlterNote       $0F
0008AE00 E701                       	dc.b	smpsNoAttack, $01
0008AE02 E10C                       	smpsAlterNote       $0C
0008AE04 E701                       	dc.b	smpsNoAttack, $01
0008AE06 E108                       	smpsAlterNote       $08
0008AE08 E701                       	dc.b	smpsNoAttack, $01
0008AE0A E109                       	smpsAlterNote       $09
0008AE0C 8001                       	dc.b	nRst, $01
0008AE0E E10C                       	smpsAlterNote       $0C
0008AE10 B50A                       	dc.b	nE4, $0A
0008AE12 E10D                       	smpsAlterNote       $0D
0008AE14 B60D                       	dc.b	nF4, $0D
0008AE16 E10A                       	smpsAlterNote       $0A
0008AE18 E701                       	dc.b	smpsNoAttack, $01
0008AE1A E106                       	smpsAlterNote       $06
0008AE1C E701                       	dc.b	smpsNoAttack, $01
0008AE1E E107                       	smpsAlterNote       $07
0008AE20 E701                       	dc.b	smpsNoAttack, $01
0008AE22 E10D                       	smpsAlterNote       $0D
0008AE24 E701                       	dc.b	smpsNoAttack, $01
0008AE26 E111                       	smpsAlterNote       $11
0008AE28 E701                       	dc.b	smpsNoAttack, $01
0008AE2A E10D                       	smpsAlterNote       $0D
0008AE2C E701                       	dc.b	smpsNoAttack, $01
0008AE2E E10A                       	smpsAlterNote       $0A
0008AE30 E701                       	dc.b	smpsNoAttack, $01
0008AE32 E106                       	smpsAlterNote       $06
0008AE34 E701                       	dc.b	smpsNoAttack, $01
0008AE36 E10A                       	smpsAlterNote       $0A
0008AE38 E701                       	dc.b	smpsNoAttack, $01
0008AE3A E110                       	smpsAlterNote       $10
0008AE3C E701                       	dc.b	smpsNoAttack, $01
0008AE3E E111                       	smpsAlterNote       $11
0008AE40 E701                       	dc.b	smpsNoAttack, $01
0008AE42 E10D                       	smpsAlterNote       $0D
0008AE44 B80D                       	dc.b	nG4, $0D
0008AE46 E10A                       	smpsAlterNote       $0A
0008AE48 E701                       	dc.b	smpsNoAttack, $01
0008AE4A E106                       	smpsAlterNote       $06
0008AE4C E701                       	dc.b	smpsNoAttack, $01
0008AE4E E107                       	smpsAlterNote       $07
0008AE50 E701                       	dc.b	smpsNoAttack, $01
0008AE52 E10D                       	smpsAlterNote       $0D
0008AE54 E701                       	dc.b	smpsNoAttack, $01
0008AE56 E111                       	smpsAlterNote       $11
0008AE58 E701                       	dc.b	smpsNoAttack, $01
0008AE5A E10D                       	smpsAlterNote       $0D
0008AE5C E701                       	dc.b	smpsNoAttack, $01
0008AE5E E10A                       	smpsAlterNote       $0A
0008AE60 E701                       	dc.b	smpsNoAttack, $01
0008AE62 E106                       	smpsAlterNote       $06
0008AE64 E701                       	dc.b	smpsNoAttack, $01
0008AE66 E10A                       	smpsAlterNote       $0A
0008AE68 E701                       	dc.b	smpsNoAttack, $01
0008AE6A E110                       	smpsAlterNote       $10
0008AE6C E701                       	dc.b	smpsNoAttack, $01
0008AE6E E111                       	smpsAlterNote       $11
0008AE70 E701                       	dc.b	smpsNoAttack, $01
0008AE72 E10D                       	smpsAlterNote       $0D
0008AE74 E701                       	dc.b	smpsNoAttack, $01
0008AE76 E107                       	smpsAlterNote       $07
0008AE78 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE7C E10A                       	smpsAlterNote       $0A
0008AE7E E701                       	dc.b	smpsNoAttack, $01
0008AE80 E110                       	smpsAlterNote       $10
0008AE82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE86 E10D                       	smpsAlterNote       $0D
0008AE88 8001                       	dc.b	nRst, $01
0008AE8A E10F                       	smpsAlterNote       $0F
0008AE8C BA0D                       	dc.b	nA4, $0D
0008AE8E E10C                       	smpsAlterNote       $0C
0008AE90 E701                       	dc.b	smpsNoAttack, $01
0008AE92 E108                       	smpsAlterNote       $08
0008AE94 E701                       	dc.b	smpsNoAttack, $01
0008AE96 E10C                       	smpsAlterNote       $0C
0008AE98 E701                       	dc.b	smpsNoAttack, $01
0008AE9A E112                       	smpsAlterNote       $12
0008AE9C E701                       	dc.b	smpsNoAttack, $01
0008AE9E E113                       	smpsAlterNote       $13
0008AEA0 E701                       	dc.b	smpsNoAttack, $01
0008AEA2 E10F                       	smpsAlterNote       $0F
0008AEA4 E701                       	dc.b	smpsNoAttack, $01
0008AEA6 E109                       	smpsAlterNote       $09
0008AEA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AEAC E10C                       	smpsAlterNote       $0C
0008AEAE E701                       	dc.b	smpsNoAttack, $01
0008AEB0 E112                       	smpsAlterNote       $12
0008AEB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AEB6 E10C                       	smpsAlterNote       $0C
0008AEB8 E701                       	dc.b	smpsNoAttack, $01
0008AEBA E109                       	smpsAlterNote       $09
0008AEBC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AEC0 E10F                       	smpsAlterNote       $0F
0008AEC2 E701                       	dc.b	smpsNoAttack, $01
0008AEC4 E113                       	smpsAlterNote       $13
0008AEC6 E701                       	dc.b	smpsNoAttack, $01
0008AEC8 E112                       	smpsAlterNote       $12
0008AECA E701                       	dc.b	smpsNoAttack, $01
0008AECC E10C                       	smpsAlterNote       $0C
0008AECE E701                       	dc.b	smpsNoAttack, $01
0008AED0 E108                       	smpsAlterNote       $08
0008AED2 E701                       	dc.b	smpsNoAttack, $01
0008AED4 E10C                       	smpsAlterNote       $0C
0008AED6 E701                       	dc.b	smpsNoAttack, $01
0008AED8 E10F                       	smpsAlterNote       $0F
0008AEDA E701                       	dc.b	smpsNoAttack, $01
0008AEDC E113                       	smpsAlterNote       $13
0008AEDE E701                       	dc.b	smpsNoAttack, $01
0008AEE0 E10F                       	smpsAlterNote       $0F
0008AEE2 E701                       	dc.b	smpsNoAttack, $01
0008AEE4 E109                       	smpsAlterNote       $09
0008AEE6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008AEEA E10D                       	smpsAlterNote       $0D
0008AEEC B609 8001                  	dc.b	nF4, $09, nRst, $01
0008AEF0 E10C                       	smpsAlterNote       $0C
0008AEF2 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008AEF6 E10B                       	smpsAlterNote       $0B
0008AEF8 B30D                       	dc.b	nD4, $0D
0008AEFA E10C                       	smpsAlterNote       $0C
0008AEFC B503 8001                  	dc.b	nE4, $03, nRst, $01
0008AF00 E10D                       	smpsAlterNote       $0D
0008AF02 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
0008AF0A E109                       	smpsAlterNote       $09
0008AF0C E701                       	dc.b	smpsNoAttack, $01
0008AF0E E108                       	smpsAlterNote       $08
0008AF10 E701                       	dc.b	smpsNoAttack, $01
0008AF12 E10C                       	smpsAlterNote       $0C
0008AF14 E701                       	dc.b	smpsNoAttack, $01
0008AF16 E112                       	smpsAlterNote       $12
0008AF18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF1C E10F                       	smpsAlterNote       $0F
0008AF1E E701                       	dc.b	smpsNoAttack, $01
0008AF20 E109                       	smpsAlterNote       $09
0008AF22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF26 E10F                       	smpsAlterNote       $0F
0008AF28 E701                       	dc.b	smpsNoAttack, $01
0008AF2A E112                       	smpsAlterNote       $12
0008AF2C E701                       	dc.b	smpsNoAttack, $01
0008AF2E E113                       	smpsAlterNote       $13
0008AF30 8001                       	dc.b	nRst, $01
0008AF32 E10D                       	smpsAlterNote       $0D
0008AF34 C20D                       	dc.b	nF5, $0D
0008AF36 E107                       	smpsAlterNote       $07
0008AF38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF3C E10A                       	smpsAlterNote       $0A
0008AF3E E701                       	dc.b	smpsNoAttack, $01
0008AF40 E110                       	smpsAlterNote       $10
0008AF42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF46 E10A                       	smpsAlterNote       $0A
0008AF48 E701                       	dc.b	smpsNoAttack, $01
0008AF4A E107                       	smpsAlterNote       $07
0008AF4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF50 E10D                       	smpsAlterNote       $0D
0008AF52 E701                       	dc.b	smpsNoAttack, $01
0008AF54 E111                       	smpsAlterNote       $11
0008AF56 E701                       	dc.b	smpsNoAttack, $01
0008AF58 E110                       	smpsAlterNote       $10
0008AF5A E701                       	dc.b	smpsNoAttack, $01
0008AF5C E10A                       	smpsAlterNote       $0A
0008AF5E E701                       	dc.b	smpsNoAttack, $01
0008AF60 E106                       	smpsAlterNote       $06
0008AF62 E701                       	dc.b	smpsNoAttack, $01
0008AF64 E10A                       	smpsAlterNote       $0A
0008AF66 E701                       	dc.b	smpsNoAttack, $01
0008AF68 E10D                       	smpsAlterNote       $0D
0008AF6A E701                       	dc.b	smpsNoAttack, $01
0008AF6C E111                       	smpsAlterNote       $11
0008AF6E E701                       	dc.b	smpsNoAttack, $01
0008AF70 E10D                       	smpsAlterNote       $0D
0008AF72 E701                       	dc.b	smpsNoAttack, $01
0008AF74 E107                       	smpsAlterNote       $07
0008AF76 E701                       	dc.b	smpsNoAttack, $01
0008AF78 E106                       	smpsAlterNote       $06
0008AF7A E701                       	dc.b	smpsNoAttack, $01
0008AF7C E10A                       	smpsAlterNote       $0A
0008AF7E E701                       	dc.b	smpsNoAttack, $01
0008AF80 E110                       	smpsAlterNote       $10
0008AF82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF86 E10D                       	smpsAlterNote       $0D
0008AF88 E701                       	dc.b	smpsNoAttack, $01
0008AF8A E107                       	smpsAlterNote       $07
0008AF8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF90 E10D                       	smpsAlterNote       $0D
0008AF92 E701                       	dc.b	smpsNoAttack, $01
0008AF94 E110                       	smpsAlterNote       $10
0008AF96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF9A E10A                       	smpsAlterNote       $0A
0008AF9C E701                       	dc.b	smpsNoAttack, $01
0008AF9E E106                       	smpsAlterNote       $06
0008AFA0 E701                       	dc.b	smpsNoAttack, $01
0008AFA2 E107                       	smpsAlterNote       $07
0008AFA4 E701                       	dc.b	smpsNoAttack, $01
0008AFA6 E10D                       	smpsAlterNote       $0D
0008AFA8 E701                       	dc.b	smpsNoAttack, $01
0008AFAA E111                       	smpsAlterNote       $11
0008AFAC E701                       	dc.b	smpsNoAttack, $01
0008AFAE E10D                       	smpsAlterNote       $0D
0008AFB0 E701                       	dc.b	smpsNoAttack, $01
0008AFB2 E10A                       	smpsAlterNote       $0A
0008AFB4 E701                       	dc.b	smpsNoAttack, $01
0008AFB6 E106                       	smpsAlterNote       $06
0008AFB8 E701                       	dc.b	smpsNoAttack, $01
0008AFBA E10A                       	smpsAlterNote       $0A
0008AFBC E701                       	dc.b	smpsNoAttack, $01
0008AFBE E110                       	smpsAlterNote       $10
0008AFC0 E701                       	dc.b	smpsNoAttack, $01
0008AFC2 E111                       	smpsAlterNote       $11
0008AFC4 E701                       	dc.b	smpsNoAttack, $01
0008AFC6 E10D                       	smpsAlterNote       $0D
0008AFC8 E701                       	dc.b	smpsNoAttack, $01
0008AFCA E107                       	smpsAlterNote       $07
0008AFCC E701                       	dc.b	smpsNoAttack, $01
0008AFCE E10D                       	smpsAlterNote       $0D
0008AFD0 C207                       	dc.b	nF5, $07
0008AFD2 E10C                       	smpsAlterNote       $0C
0008AFD4 C10D                       	dc.b	nE5, $0D
0008AFD6 E109                       	smpsAlterNote       $09
0008AFD8 E701                       	dc.b	smpsNoAttack, $01
0008AFDA E106                       	smpsAlterNote       $06
0008AFDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AFE0 E10C                       	smpsAlterNote       $0C
0008AFE2 E701                       	dc.b	smpsNoAttack, $01
0008AFE4 E110                       	smpsAlterNote       $10
0008AFE6 E701                       	dc.b	smpsNoAttack, $01
0008AFE8 E10F                       	smpsAlterNote       $0F
0008AFEA E701                       	dc.b	smpsNoAttack, $01
0008AFEC E109                       	smpsAlterNote       $09
0008AFEE E701                       	dc.b	smpsNoAttack, $01
0008AFF0 E105                       	smpsAlterNote       $05
0008AFF2 E701                       	dc.b	smpsNoAttack, $01
0008AFF4 E109                       	smpsAlterNote       $09
0008AFF6 E701                       	dc.b	smpsNoAttack, $01
0008AFF8 E10C                       	smpsAlterNote       $0C
0008AFFA E701                       	dc.b	smpsNoAttack, $01
0008AFFC E110                       	smpsAlterNote       $10
0008AFFE E701                       	dc.b	smpsNoAttack, $01
0008B000 E10B                       	smpsAlterNote       $0B
0008B002 BF0D                       	dc.b	nD5, $0D
0008B004 E108                       	smpsAlterNote       $08
0008B006 E701                       	dc.b	smpsNoAttack, $01
0008B008 E105                       	smpsAlterNote       $05
0008B00A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B00E E10B                       	smpsAlterNote       $0B
0008B010 E701                       	dc.b	smpsNoAttack, $01
0008B012 E10F                       	smpsAlterNote       $0F
0008B014 E701                       	dc.b	smpsNoAttack, $01
0008B016 E10E                       	smpsAlterNote       $0E
0008B018 E701                       	dc.b	smpsNoAttack, $01
0008B01A E108                       	smpsAlterNote       $08
0008B01C E701                       	dc.b	smpsNoAttack, $01
0008B01E E104                       	smpsAlterNote       $04
0008B020 E701                       	dc.b	smpsNoAttack, $01
0008B022 E108                       	smpsAlterNote       $08
0008B024 E701                       	dc.b	smpsNoAttack, $01
0008B026 E10E                       	smpsAlterNote       $0E
0008B028 E701                       	dc.b	smpsNoAttack, $01
0008B02A E10F                       	smpsAlterNote       $0F
0008B02C E701                       	dc.b	smpsNoAttack, $01
0008B02E E10B                       	smpsAlterNote       $0B
0008B030 E701                       	dc.b	smpsNoAttack, $01
0008B032 E105                       	smpsAlterNote       $05
0008B034 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B038 E108                       	smpsAlterNote       $08
0008B03A E701                       	dc.b	smpsNoAttack, $01
0008B03C E10E                       	smpsAlterNote       $0E
0008B03E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B042 E108                       	smpsAlterNote       $08
0008B044 E701                       	dc.b	smpsNoAttack, $01
0008B046 E105                       	smpsAlterNote       $05
0008B048 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B04C E10B                       	smpsAlterNote       $0B
0008B04E E701                       	dc.b	smpsNoAttack, $01
0008B050 E10F                       	smpsAlterNote       $0F
0008B052 E701                       	dc.b	smpsNoAttack, $01
0008B054 E10E                       	smpsAlterNote       $0E
0008B056 E701                       	dc.b	smpsNoAttack, $01
0008B058 E108                       	smpsAlterNote       $08
0008B05A E701                       	dc.b	smpsNoAttack, $01
0008B05C E104                       	smpsAlterNote       $04
0008B05E E701                       	dc.b	smpsNoAttack, $01
0008B060 E108                       	smpsAlterNote       $08
0008B062 E701                       	dc.b	smpsNoAttack, $01
0008B064 E10B                       	smpsAlterNote       $0B
0008B066 E701                       	dc.b	smpsNoAttack, $01
0008B068 E10F                       	smpsAlterNote       $0F
0008B06A E701                       	dc.b	smpsNoAttack, $01
0008B06C E10B                       	smpsAlterNote       $0B
0008B06E E701                       	dc.b	smpsNoAttack, $01
0008B070 E105                       	smpsAlterNote       $05
0008B072 E701                       	dc.b	smpsNoAttack, $01
0008B074 E104                       	smpsAlterNote       $04
0008B076 E701                       	dc.b	smpsNoAttack, $01
0008B078 E108                       	smpsAlterNote       $08
0008B07A E701                       	dc.b	smpsNoAttack, $01
0008B07C E10E                       	smpsAlterNote       $0E
0008B07E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B082 E10B                       	smpsAlterNote       $0B
0008B084 E701                       	dc.b	smpsNoAttack, $01
0008B086 E105                       	smpsAlterNote       $05
0008B088 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B08C E10B                       	smpsAlterNote       $0B
0008B08E E701                       	dc.b	smpsNoAttack, $01
0008B090 E10E                       	smpsAlterNote       $0E
0008B092 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B096 E108                       	smpsAlterNote       $08
0008B098 E701                       	dc.b	smpsNoAttack, $01
0008B09A E105                       	smpsAlterNote       $05
0008B09C 8001                       	dc.b	nRst, $01
0008B0A0 E601                       	smpsAlterVol        $01
0008B0A2 E10B                       	smpsAlterNote       $0B
0008B0A4 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008B0B0 8004                       	dc.b	nRst, $04
0008B0B4 E6FF                       	smpsAlterVol        $FF
0008B0B6 E10D                       	smpsAlterNote       $0D
0008B0B8 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
0008B0C0 E10C                       	smpsAlterNote       $0C
0008B0C2 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
0008B0C7 E10D                       	smpsAlterNote       $0D
0008B0C9 B60D                       	dc.b	nF4, $0D
0008B0CB E10A                       	smpsAlterNote       $0A
0008B0CD E701                       	dc.b	smpsNoAttack, $01
0008B0CF E106                       	smpsAlterNote       $06
0008B0D1 E701                       	dc.b	smpsNoAttack, $01
0008B0D3 E10A                       	smpsAlterNote       $0A
0008B0D5 E701                       	dc.b	smpsNoAttack, $01
0008B0D7 E110                       	smpsAlterNote       $10
0008B0D9 E701                       	dc.b	smpsNoAttack, $01
0008B0DB E111                       	smpsAlterNote       $11
0008B0DD E701                       	dc.b	smpsNoAttack, $01
0008B0DF E10D                       	smpsAlterNote       $0D
0008B0E1 E701                       	dc.b	smpsNoAttack, $01
0008B0E3 E107                       	smpsAlterNote       $07
0008B0E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B0E9 E10A                       	smpsAlterNote       $0A
0008B0EB E701                       	dc.b	smpsNoAttack, $01
0008B0ED E110                       	smpsAlterNote       $10
0008B0EF E701                       	dc.b	smpsNoAttack, $01
0008B0F1 E111                       	smpsAlterNote       $11
0008B0F3 8001                       	dc.b	nRst, $01
0008B0F5 E10D                       	smpsAlterNote       $0D
0008B0F7 B80D                       	dc.b	nG4, $0D
0008B0F9 E10A                       	smpsAlterNote       $0A
0008B0FB E701                       	dc.b	smpsNoAttack, $01
0008B0FD E106                       	smpsAlterNote       $06
0008B0FF E701                       	dc.b	smpsNoAttack, $01
0008B101 E10A                       	smpsAlterNote       $0A
0008B103 E701                       	dc.b	smpsNoAttack, $01
0008B105 E110                       	smpsAlterNote       $10
0008B107 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B10B E10D                       	smpsAlterNote       $0D
0008B10D E701                       	dc.b	smpsNoAttack, $01
0008B10F E107                       	smpsAlterNote       $07
0008B111 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B115 E10D                       	smpsAlterNote       $0D
0008B117 E701                       	dc.b	smpsNoAttack, $01
0008B119 E110                       	smpsAlterNote       $10
0008B11B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B11F E10A                       	smpsAlterNote       $0A
0008B121 E701                       	dc.b	smpsNoAttack, $01
0008B123 E106                       	smpsAlterNote       $06
0008B125 E701                       	dc.b	smpsNoAttack, $01
0008B127 E107                       	smpsAlterNote       $07
0008B129 E701                       	dc.b	smpsNoAttack, $01
0008B12B E10D                       	smpsAlterNote       $0D
0008B12D E701                       	dc.b	smpsNoAttack, $01
0008B12F E111                       	smpsAlterNote       $11
0008B131 E701                       	dc.b	smpsNoAttack, $01
0008B133 E10D                       	smpsAlterNote       $0D
0008B135 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B139 E10F                       	smpsAlterNote       $0F
0008B13B BA02 8001                  	dc.b	nA4, $02, nRst, $01
0008B13F E110                       	smpsAlterNote       $10
0008B141 BB03                       	dc.b	nBb4, $03
0008B143 E10F                       	smpsAlterNote       $0F
0008B145 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
0008B14B E110                       	smpsAlterNote       $10
0008B14D C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008B151 E10F                       	smpsAlterNote       $0F
0008B153 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008B159 E110                       	smpsAlterNote       $10
0008B15B D302 8001                  	dc.b	nBb6, $02, nRst, $01
0008B15F E10F                       	smpsAlterNote       $0F
0008B161 D20D                       	dc.b	nA6, $0D
0008B163 E10C                       	smpsAlterNote       $0C
0008B165 E701                       	dc.b	smpsNoAttack, $01
0008B167 E108                       	smpsAlterNote       $08
0008B169 E701                       	dc.b	smpsNoAttack, $01
0008B16B E10C                       	smpsAlterNote       $0C
0008B16D E701                       	dc.b	smpsNoAttack, $01
0008B16F E10F                       	smpsAlterNote       $0F
0008B171 E701                       	dc.b	smpsNoAttack, $01
0008B173 E113                       	smpsAlterNote       $13
0008B175 E701                       	dc.b	smpsNoAttack, $01
0008B177 E10F                       	smpsAlterNote       $0F
0008B179 E701                       	dc.b	smpsNoAttack, $01
0008B17B E109                       	smpsAlterNote       $09
0008B17D E701                       	dc.b	smpsNoAttack, $01
0008B17F E108                       	smpsAlterNote       $08
0008B181 E701                       	dc.b	smpsNoAttack, $01
0008B183 E10C                       	smpsAlterNote       $0C
0008B185 E701                       	dc.b	smpsNoAttack, $01
0008B187 E112                       	smpsAlterNote       $12
0008B189 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B18D E10F                       	smpsAlterNote       $0F
0008B18F E701                       	dc.b	smpsNoAttack, $01
0008B191 E109                       	smpsAlterNote       $09
0008B193 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008B199 E10D                       	smpsAlterNote       $0D
0008B19B CE07                       	dc.b	nF6, $07
0008B19D E10C                       	smpsAlterNote       $0C
0008B19F CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008B1A3 E10D                       	smpsAlterNote       $0D
0008B1A5 CE03                       	dc.b	nF6, $03
0008B1A7 E10C                       	smpsAlterNote       $0C
0008B1A9 CC0D                       	dc.b	nEb6, $0D
0008B1AB E109                       	smpsAlterNote       $09
0008B1AD E701                       	dc.b	smpsNoAttack, $01
0008B1AF E106                       	smpsAlterNote       $06
0008B1B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B1B5 E10C                       	smpsAlterNote       $0C
0008B1B7 E701                       	dc.b	smpsNoAttack, $01
0008B1B9 E110                       	smpsAlterNote       $10
0008B1BB E701                       	dc.b	smpsNoAttack, $01
0008B1BD E10F                       	smpsAlterNote       $0F
0008B1BF E701                       	dc.b	smpsNoAttack, $01
0008B1C1 E109                       	smpsAlterNote       $09
0008B1C3 E701                       	dc.b	smpsNoAttack, $01
0008B1C5 E105                       	smpsAlterNote       $05
0008B1C7 E701                       	dc.b	smpsNoAttack, $01
0008B1C9 E109                       	smpsAlterNote       $09
0008B1CB E701                       	dc.b	smpsNoAttack, $01
0008B1CD E10C                       	smpsAlterNote       $0C
0008B1CF E701                       	dc.b	smpsNoAttack, $01
0008B1D1 E110                       	smpsAlterNote       $10
0008B1D3 E701                       	dc.b	smpsNoAttack, $01
0008B1D5 E10C                       	smpsAlterNote       $0C
0008B1D7 E701                       	dc.b	smpsNoAttack, $01
0008B1D9 E106                       	smpsAlterNote       $06
0008B1DB E701                       	dc.b	smpsNoAttack, $01
0008B1DD E105                       	smpsAlterNote       $05
0008B1DF E701                       	dc.b	smpsNoAttack, $01
0008B1E1 E109                       	smpsAlterNote       $09
0008B1E3 E701                       	dc.b	smpsNoAttack, $01
0008B1E5 E10F                       	smpsAlterNote       $0F
0008B1E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B1EB E10C                       	smpsAlterNote       $0C
0008B1ED E701                       	dc.b	smpsNoAttack, $01
0008B1EF E10B                       	smpsAlterNote       $0B
0008B1F1 CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
0008B1FB E10F                       	smpsAlterNote       $0F
0008B1FD C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008B207 E10D                       	smpsAlterNote       $0D
0008B209 C203                       	dc.b	nF5, $03
0008B20B E10C                       	smpsAlterNote       $0C
0008B20D C103 8001                  	dc.b	nE5, $03, nRst, $01
0008B211 E10D                       	smpsAlterNote       $0D
0008B213 C20D                       	dc.b	nF5, $0D
0008B215 E10C                       	smpsAlterNote       $0C
0008B217 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
0008B21B E10B                       	smpsAlterNote       $0B
0008B21D BF0D                       	dc.b	nD5, $0D
0008B21F E108                       	smpsAlterNote       $08
0008B221 E701                       	dc.b	smpsNoAttack, $01
0008B223 E104                       	smpsAlterNote       $04
0008B225 E701                       	dc.b	smpsNoAttack, $01
0008B227 E108                       	smpsAlterNote       $08
0008B229 E701                       	dc.b	smpsNoAttack, $01
0008B22B E10E                       	smpsAlterNote       $0E
0008B22D E701                       	dc.b	smpsNoAttack, $01
0008B22F E10F                       	smpsAlterNote       $0F
0008B231 E701                       	dc.b	smpsNoAttack, $01
0008B233 E10B                       	smpsAlterNote       $0B
0008B235 E701                       	dc.b	smpsNoAttack, $01
0008B237 E105                       	smpsAlterNote       $05
0008B239 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B23D E108                       	smpsAlterNote       $08
0008B23F E701                       	dc.b	smpsNoAttack, $01
0008B241 E10E                       	smpsAlterNote       $0E
0008B243 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B247 E108                       	smpsAlterNote       $08
0008B249 E701                       	dc.b	smpsNoAttack, $01
0008B24B E105                       	smpsAlterNote       $05
0008B24D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B251 E10B                       	smpsAlterNote       $0B
0008B253 E701                       	dc.b	smpsNoAttack, $01
0008B255 E10F                       	smpsAlterNote       $0F
0008B257 E701                       	dc.b	smpsNoAttack, $01
0008B259 E10E                       	smpsAlterNote       $0E
0008B25B E701                       	dc.b	smpsNoAttack, $01
0008B25D E108                       	smpsAlterNote       $08
0008B25F E701                       	dc.b	smpsNoAttack, $01
0008B261 E104                       	smpsAlterNote       $04
0008B263 E701                       	dc.b	smpsNoAttack, $01
0008B265 E108                       	smpsAlterNote       $08
0008B267 E701                       	dc.b	smpsNoAttack, $01
0008B269 E10B                       	smpsAlterNote       $0B
0008B26B E701                       	dc.b	smpsNoAttack, $01
0008B26D E10F                       	smpsAlterNote       $0F
0008B26F E701                       	dc.b	smpsNoAttack, $01
0008B271 E10B                       	smpsAlterNote       $0B
0008B273 E701                       	dc.b	smpsNoAttack, $01
0008B275 E105                       	smpsAlterNote       $05
0008B277 E701                       	dc.b	smpsNoAttack, $01
0008B279 E104                       	smpsAlterNote       $04
0008B27B E701                       	dc.b	smpsNoAttack, $01
0008B27D E108                       	smpsAlterNote       $08
0008B27F E701                       	dc.b	smpsNoAttack, $01
0008B281 E10E                       	smpsAlterNote       $0E
0008B283 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B287 E10B                       	smpsAlterNote       $0B
0008B289 E701                       	dc.b	smpsNoAttack, $01
0008B28B E105                       	smpsAlterNote       $05
0008B28D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B291 E10B                       	smpsAlterNote       $0B
0008B293 E701                       	dc.b	smpsNoAttack, $01
0008B295 E10E                       	smpsAlterNote       $0E
0008B297 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B29B E108                       	smpsAlterNote       $08
0008B29D E701                       	dc.b	smpsNoAttack, $01
0008B29F E104                       	smpsAlterNote       $04
0008B2A1 E701                       	dc.b	smpsNoAttack, $01
0008B2A3 E105                       	smpsAlterNote       $05
0008B2A5 E701                       	dc.b	smpsNoAttack, $01
0008B2A7 E10B                       	smpsAlterNote       $0B
0008B2A9 E701                       	dc.b	smpsNoAttack, $01
0008B2AB E10F                       	smpsAlterNote       $0F
0008B2AD E701                       	dc.b	smpsNoAttack, $01
0008B2AF E10B                       	smpsAlterNote       $0B
0008B2B1 E701                       	dc.b	smpsNoAttack, $01
0008B2B3 E108                       	smpsAlterNote       $08
0008B2B5 E701                       	dc.b	smpsNoAttack, $01
0008B2B7 E104                       	smpsAlterNote       $04
0008B2B9 E701                       	dc.b	smpsNoAttack, $01
0008B2BB E108                       	smpsAlterNote       $08
0008B2BD E701                       	dc.b	smpsNoAttack, $01
0008B2BF E10E                       	smpsAlterNote       $0E
0008B2C1 E701                       	dc.b	smpsNoAttack, $01
0008B2C3 E10F                       	smpsAlterNote       $0F
0008B2C5 E701                       	dc.b	smpsNoAttack, $01
0008B2C7 E10B                       	smpsAlterNote       $0B
0008B2C9 E701                       	dc.b	smpsNoAttack, $01
0008B2CB E105                       	smpsAlterNote       $05
0008B2CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2D1 E108                       	smpsAlterNote       $08
0008B2D3 E701                       	dc.b	smpsNoAttack, $01
0008B2D5 E10E                       	smpsAlterNote       $0E
0008B2D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2DB E108                       	smpsAlterNote       $08
0008B2DD E701                       	dc.b	smpsNoAttack, $01
0008B2DF E105                       	smpsAlterNote       $05
0008B2E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2E5 E10B                       	smpsAlterNote       $0B
0008B2E7 E701                       	dc.b	smpsNoAttack, $01
0008B2E9 E10F                       	smpsAlterNote       $0F
0008B2EB E701                       	dc.b	smpsNoAttack, $01
0008B2ED E10E                       	smpsAlterNote       $0E
0008B2EF E701                       	dc.b	smpsNoAttack, $01
0008B2F1 E108                       	smpsAlterNote       $08
0008B2F3 E701                       	dc.b	smpsNoAttack, $01
0008B2F5 E104                       	smpsAlterNote       $04
0008B2F7 E701                       	dc.b	smpsNoAttack, $01
0008B2F9 E108                       	smpsAlterNote       $08
0008B2FB E701                       	dc.b	smpsNoAttack, $01
0008B2FD E10B                       	smpsAlterNote       $0B
0008B2FF E701                       	dc.b	smpsNoAttack, $01
0008B301 E10F                       	smpsAlterNote       $0F
0008B303 E701                       	dc.b	smpsNoAttack, $01
0008B305 E10B                       	smpsAlterNote       $0B
0008B307 E701                       	dc.b	smpsNoAttack, $01
0008B309 E105                       	smpsAlterNote       $05
0008B30B E701                       	dc.b	smpsNoAttack, $01
0008B30D E104                       	smpsAlterNote       $04
0008B30F E701                       	dc.b	smpsNoAttack, $01
0008B311 E105                       	smpsAlterNote       $05
0008B313 8001                       	dc.b	nRst, $01
0008B315 E10D                       	smpsAlterNote       $0D
0008B317 C20D                       	dc.b	nF5, $0D
0008B319 E107                       	smpsAlterNote       $07
0008B31B E701                       	dc.b	smpsNoAttack, $01
0008B31D E106                       	smpsAlterNote       $06
0008B31F E701                       	dc.b	smpsNoAttack, $01
0008B321 E10A                       	smpsAlterNote       $0A
0008B323 E701                       	dc.b	smpsNoAttack, $01
0008B325 E110                       	smpsAlterNote       $10
0008B327 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B32B E10D                       	smpsAlterNote       $0D
0008B32D E701                       	dc.b	smpsNoAttack, $01
0008B32F E107                       	smpsAlterNote       $07
0008B331 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B335 E10D                       	smpsAlterNote       $0D
0008B337 E701                       	dc.b	smpsNoAttack, $01
0008B339 E110                       	smpsAlterNote       $10
0008B33B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B33F E10A                       	smpsAlterNote       $0A
0008B341 E701                       	dc.b	smpsNoAttack, $01
0008B343 E106                       	smpsAlterNote       $06
0008B345 E701                       	dc.b	smpsNoAttack, $01
0008B347 E107                       	smpsAlterNote       $07
0008B349 E701                       	dc.b	smpsNoAttack, $01
0008B34B E10D                       	smpsAlterNote       $0D
0008B34D E701                       	dc.b	smpsNoAttack, $01
0008B34F E111                       	smpsAlterNote       $11
0008B351 E701                       	dc.b	smpsNoAttack, $01
0008B353 E10D                       	smpsAlterNote       $0D
0008B355 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B359 E10C                       	smpsAlterNote       $0C
0008B35B C10D                       	dc.b	nE5, $0D
0008B35D E10D                       	smpsAlterNote       $0D
0008B35F C20A                       	dc.b	nF5, $0A
0008B361 E10C                       	smpsAlterNote       $0C
0008B363 C10E                       	dc.b	nE5, $0E
0008B365 E106                       	smpsAlterNote       $06
0008B367 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B36B E10C                       	smpsAlterNote       $0C
0008B36D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B371 E10B                       	smpsAlterNote       $0B
0008B373 BF0D                       	dc.b	nD5, $0D
0008B375 E10C                       	smpsAlterNote       $0C
0008B377 C107                       	dc.b	nE5, $07
0008B379 E10D                       	smpsAlterNote       $0D
0008B37B C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
0008B385 E110                       	smpsAlterNote       $10
0008B387 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008B38D E10F                       	smpsAlterNote       $0F
0008B38F C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
0008B397 E10D                       	smpsAlterNote       $0D
0008B399 D003                       	dc.b	nG6, $03
0008B39D E0C0                       	smpsPan             panCenter, $00
0008B39F E6FF                       	smpsAlterVol        $FF
0008B3A1 AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0008B3AD 8001                       	dc.b	nRst, $01
0008B3AF E10C                       	smpsAlterNote       $0C
0008B3B1 A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0008B3BB E604                       	smpsAlterVol        $04
0008B3BD E10B                       	smpsAlterNote       $0B
0008B3BF B306 8001                  	dc.b	nD4, $06, nRst, $01
0008B3C3 E10F                       	smpsAlterNote       $0F
0008B3C5 AE03                       	dc.b	nA3, $03
0008B3C7 E10D                       	smpsAlterNote       $0D
0008B3C9 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008B3CD E10C                       	smpsAlterNote       $0C
0008B3CF B506 8001                  	dc.b	nE4, $06, nRst, $01
0008B3D3 E10B                       	smpsAlterNote       $0B
0008B3D5 B302 8001                  	dc.b	nD4, $02, nRst, $01
0008B3D9 E10A                       	smpsAlterNote       $0A
0008B3DB B103                       	dc.b	nC4, $03
0008B3DD E110                       	smpsAlterNote       $10
0008B3DF AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008B3E3 E10F                       	smpsAlterNote       $0F
0008B3E5 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
0008B3E9 E080                       	smpsPan             panLeft, $00
0008B3EB 01                         	dc.b	$01
0008B3EE E6FB                       	smpsAlterVol        $FB
0008B3F0 E1E4                       	smpsAlterNote       $E4
0008B3F2 C501                       	dc.b	nAb5, $01
0008B3F4 E1F4                       	smpsAlterNote       $F4
0008B3F6 E701                       	dc.b	smpsNoAttack, $01
0008B3F8 E104                       	smpsAlterNote       $04
0008B3FA E701                       	dc.b	smpsNoAttack, $01
0008B3FC E114                       	smpsAlterNote       $14
0008B3FE E701                       	dc.b	smpsNoAttack, $01
0008B400 E11C                       	smpsAlterNote       $1C
0008B402 E701                       	dc.b	smpsNoAttack, $01
0008B404 E1EF                       	smpsAlterNote       $EF
0008B406 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008B409 E1FF                       	smpsAlterNote       $FF
0008B40B E701                       	dc.b	smpsNoAttack, $01
0008B40D E10F                       	smpsAlterNote       $0F
0008B40F C606                       	dc.b	nA5, $06
0008B411 E109                       	smpsAlterNote       $09
0008B413 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B417 E10F                       	smpsAlterNote       $0F
0008B419 E701                       	dc.b	smpsNoAttack, $01
0008B41B E112                       	smpsAlterNote       $12
0008B41D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B421 E10C                       	smpsAlterNote       $0C
0008B423 E701                       	dc.b	smpsNoAttack, $01
0008B425 E108                       	smpsAlterNote       $08
0008B427 E701                       	dc.b	smpsNoAttack, $01
0008B429 E109                       	smpsAlterNote       $09
0008B42B E701                       	dc.b	smpsNoAttack, $01
0008B42D E10F                       	smpsAlterNote       $0F
0008B42F E701                       	dc.b	smpsNoAttack, $01
0008B431 E113                       	smpsAlterNote       $13
0008B433 E701                       	dc.b	smpsNoAttack, $01
0008B435 E10F                       	smpsAlterNote       $0F
0008B437 E701                       	dc.b	smpsNoAttack, $01
0008B439 E10C                       	smpsAlterNote       $0C
0008B43B E701                       	dc.b	smpsNoAttack, $01
0008B43D E108                       	smpsAlterNote       $08
0008B43F E701                       	dc.b	smpsNoAttack, $01
0008B441 E10C                       	smpsAlterNote       $0C
0008B443 E701                       	dc.b	smpsNoAttack, $01
0008B445 E112                       	smpsAlterNote       $12
0008B447 E701                       	dc.b	smpsNoAttack, $01
0008B449 E113                       	smpsAlterNote       $13
0008B44B E701                       	dc.b	smpsNoAttack, $01
0008B44D E10F                       	smpsAlterNote       $0F
0008B44F E701                       	dc.b	smpsNoAttack, $01
0008B451 E109                       	smpsAlterNote       $09
0008B453 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B457 E10C                       	smpsAlterNote       $0C
0008B459 E701                       	dc.b	smpsNoAttack, $01
0008B45B E112                       	smpsAlterNote       $12
0008B45D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B461 E10C                       	smpsAlterNote       $0C
0008B463 E701                       	dc.b	smpsNoAttack, $01
0008B465 E109                       	smpsAlterNote       $09
0008B467 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B46B E10F                       	smpsAlterNote       $0F
0008B46D E701                       	dc.b	smpsNoAttack, $01
0008B46F E113                       	smpsAlterNote       $13
0008B471 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B475 E10D                       	smpsAlterNote       $0D
0008B477 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008B47D E10C                       	smpsAlterNote       $0C
0008B47F C102 8001                  	dc.b	nE5, $02, nRst, $01
0008B483 E10D                       	smpsAlterNote       $0D
0008B485 C201 8001                  	dc.b	nF5, $01, nRst, $01
0008B489 E10C                       	smpsAlterNote       $0C
0008B48B C102                       	dc.b	nE5, $02
0008B48D E10B                       	smpsAlterNote       $0B
0008B48F BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008B493 E10C                       	smpsAlterNote       $0C
0008B495 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008B499 E10B                       	smpsAlterNote       $0B
0008B49B BF02                       	dc.b	nD5, $02
0008B49D E10A                       	smpsAlterNote       $0A
0008B49F BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
0008B4A9 E110                       	smpsAlterNote       $10
0008B4AB BB02                       	dc.b	nBb4, $02
0008B4AD E10A                       	smpsAlterNote       $0A
0008B4AF BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008B4B3 E110                       	smpsAlterNote       $10
0008B4B5 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008B4B9 E10F                       	smpsAlterNote       $0F
0008B4BB BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008B4BF E110                       	smpsAlterNote       $10
0008B4C1 BB02                       	dc.b	nBb4, $02
0008B4C3 E10F                       	smpsAlterNote       $0F
0008B4C5 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008B4CF E10C                       	smpsAlterNote       $0C
0008B4D1 B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
0008B4D9 E10B                       	smpsAlterNote       $0B
0008B4DB BE01 8001                  	dc.b	nCs5, $01, nRst, $01
0008B4DF E10F                       	smpsAlterNote       $0F
0008B4E1 BA02                       	dc.b	nA4, $02
0008B4E5 E0C0                       	smpsPan             panCenter, $00
0008B4E7 E601                       	smpsAlterVol        $01
0008B4E9 E109                       	smpsAlterNote       $09
0008B4EB AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
0008B4F7 E108                       	smpsAlterNote       $08
0008B4F9 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
0008B4FF E107                       	smpsAlterNote       $07
0008B501 B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
0008B507 E109                       	smpsAlterNote       $09
0008B509 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008B50D E108                       	smpsAlterNote       $08
0008B50F B506 8001                  	dc.b	nE4, $06, nRst, $01
0008B513 E107                       	smpsAlterNote       $07
0008B515 B302 8001                  	dc.b	nD4, $02, nRst, $01
0008B519 E106                       	smpsAlterNote       $06
0008B51B B103                       	dc.b	nC4, $03
0008B51D E10C                       	smpsAlterNote       $0C
0008B51F AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008B525 E080                       	smpsPan             panLeft, $00
0008B527 07                         	dc.b	$07
0008B528 E6FE                       	smpsAlterVol        $FE
0008B52A E10B                       	smpsAlterNote       $0B
0008B52C B20D                       	dc.b	nCs4, $0D
0008B52E E105                       	smpsAlterNote       $05
0008B530 E701                       	dc.b	smpsNoAttack, $01
0008B532 E104                       	smpsAlterNote       $04
0008B534 E701                       	dc.b	smpsNoAttack, $01
0008B536 E108                       	smpsAlterNote       $08
0008B538 E701                       	dc.b	smpsNoAttack, $01
0008B53A E10E                       	smpsAlterNote       $0E
0008B53C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B540 E10B                       	smpsAlterNote       $0B
0008B542 E701                       	dc.b	smpsNoAttack, $01
0008B544 E105                       	smpsAlterNote       $05
0008B546 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B54A E10B                       	smpsAlterNote       $0B
0008B54C E701                       	dc.b	smpsNoAttack, $01
0008B54E E10E                       	smpsAlterNote       $0E
0008B550 E701                       	dc.b	smpsNoAttack, $01
0008B552 E10F                       	smpsAlterNote       $0F
0008B554 8001                       	dc.b	nRst, $01
0008B556 E10B                       	smpsAlterNote       $0B
0008B558 B30D                       	dc.b	nD4, $0D
0008B55A E105                       	smpsAlterNote       $05
0008B55C E701                       	dc.b	smpsNoAttack, $01
0008B55E E104                       	smpsAlterNote       $04
0008B560 E701                       	dc.b	smpsNoAttack, $01
0008B562 E108                       	smpsAlterNote       $08
0008B564 E701                       	dc.b	smpsNoAttack, $01
0008B566 E10E                       	smpsAlterNote       $0E
0008B568 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B56C E10B                       	smpsAlterNote       $0B
0008B56E E701                       	dc.b	smpsNoAttack, $01
0008B570 E105                       	smpsAlterNote       $05
0008B572 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B576 E10B                       	smpsAlterNote       $0B
0008B578 E701                       	dc.b	smpsNoAttack, $01
0008B57A E10E                       	smpsAlterNote       $0E
0008B57C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B580 E108                       	smpsAlterNote       $08
0008B582 E701                       	dc.b	smpsNoAttack, $01
0008B584 E104                       	smpsAlterNote       $04
0008B586 E701                       	dc.b	smpsNoAttack, $01
0008B588 E105                       	smpsAlterNote       $05
0008B58A E701                       	dc.b	smpsNoAttack, $01
0008B58C E10B                       	smpsAlterNote       $0B
0008B58E E701                       	dc.b	smpsNoAttack, $01
0008B590 E10F                       	smpsAlterNote       $0F
0008B592 E701                       	dc.b	smpsNoAttack, $01
0008B594 E10B                       	smpsAlterNote       $0B
0008B596 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B59A E10C                       	smpsAlterNote       $0C
0008B59C B50D                       	dc.b	nE4, $0D
0008B59E E106                       	smpsAlterNote       $06
0008B5A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B5A4 E10C                       	smpsAlterNote       $0C
0008B5A6 E701                       	dc.b	smpsNoAttack, $01
0008B5A8 E10F                       	smpsAlterNote       $0F
0008B5AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B5AE E109                       	smpsAlterNote       $09
0008B5B0 E701                       	dc.b	smpsNoAttack, $01
0008B5B2 E105                       	smpsAlterNote       $05
0008B5B4 E701                       	dc.b	smpsNoAttack, $01
0008B5B6 E106                       	smpsAlterNote       $06
0008B5B8 E701                       	dc.b	smpsNoAttack, $01
0008B5BA E10C                       	smpsAlterNote       $0C
0008B5BC E701                       	dc.b	smpsNoAttack, $01
0008B5BE E110                       	smpsAlterNote       $10
0008B5C0 E701                       	dc.b	smpsNoAttack, $01
0008B5C2 E10B                       	smpsAlterNote       $0B
0008B5C4 B30E                       	dc.b	nD4, $0E
0008B5C6 E105                       	smpsAlterNote       $05
0008B5C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B5CC E10B                       	smpsAlterNote       $0B
0008B5CE E701                       	dc.b	smpsNoAttack, $01
0008B5D0 E10E                       	smpsAlterNote       $0E
0008B5D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B5D6 E108                       	smpsAlterNote       $08
0008B5D8 E701                       	dc.b	smpsNoAttack, $01
0008B5DA E104                       	smpsAlterNote       $04
0008B5DC E701                       	dc.b	smpsNoAttack, $01
0008B5DE E105                       	smpsAlterNote       $05
0008B5E0 E701                       	dc.b	smpsNoAttack, $01
0008B5E2 E10B                       	smpsAlterNote       $0B
0008B5E4 E701                       	dc.b	smpsNoAttack, $01
0008B5E6 E10F                       	smpsAlterNote       $0F
0008B5E8 E701                       	dc.b	smpsNoAttack, $01
0008B5EA E10B                       	smpsAlterNote       $0B
0008B5EC E701                       	dc.b	smpsNoAttack, $01
0008B5EE E108                       	smpsAlterNote       $08
0008B5F0 E701                       	dc.b	smpsNoAttack, $01
0008B5F2 E104                       	smpsAlterNote       $04
0008B5F4 E701                       	dc.b	smpsNoAttack, $01
0008B5F6 E108                       	smpsAlterNote       $08
0008B5F8 E701                       	dc.b	smpsNoAttack, $01
0008B5FA E10E                       	smpsAlterNote       $0E
0008B5FC E701                       	dc.b	smpsNoAttack, $01
0008B5FE E10F                       	smpsAlterNote       $0F
0008B600 E701                       	dc.b	smpsNoAttack, $01
0008B602 E10B                       	smpsAlterNote       $0B
0008B604 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008B608 E108                       	smpsAlterNote       $08
0008B60A E701                       	dc.b	smpsNoAttack, $01
0008B60C E105                       	smpsAlterNote       $05
0008B60E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B612 E10B                       	smpsAlterNote       $0B
0008B614 E701                       	dc.b	smpsNoAttack, $01
0008B616 E10F                       	smpsAlterNote       $0F
0008B618 E701                       	dc.b	smpsNoAttack, $01
0008B61A E10E                       	smpsAlterNote       $0E
0008B61C E701                       	dc.b	smpsNoAttack, $01
0008B61E E108                       	smpsAlterNote       $08
0008B620 E701                       	dc.b	smpsNoAttack, $01
0008B622 E104                       	smpsAlterNote       $04
0008B624 E701                       	dc.b	smpsNoAttack, $01
0008B626 E108                       	smpsAlterNote       $08
0008B628 E701                       	dc.b	smpsNoAttack, $01
0008B62A E10B                       	smpsAlterNote       $0B
0008B62C E701                       	dc.b	smpsNoAttack, $01
0008B62E E10F                       	smpsAlterNote       $0F
0008B630 E701                       	dc.b	smpsNoAttack, $01
0008B632 E10B                       	smpsAlterNote       $0B
0008B634 B30D                       	dc.b	nD4, $0D
0008B636 E108                       	smpsAlterNote       $08
0008B638 E701                       	dc.b	smpsNoAttack, $01
0008B63A E105                       	smpsAlterNote       $05
0008B63C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B640 E10B                       	smpsAlterNote       $0B
0008B642 E701                       	dc.b	smpsNoAttack, $01
0008B644 E10F                       	smpsAlterNote       $0F
0008B646 E701                       	dc.b	smpsNoAttack, $01
0008B648 E10E                       	smpsAlterNote       $0E
0008B64A E701                       	dc.b	smpsNoAttack, $01
0008B64C E108                       	smpsAlterNote       $08
0008B64E E701                       	dc.b	smpsNoAttack, $01
0008B650 E104                       	smpsAlterNote       $04
0008B652 E701                       	dc.b	smpsNoAttack, $01
0008B654 E108                       	smpsAlterNote       $08
0008B656 E701                       	dc.b	smpsNoAttack, $01
0008B658 E10B                       	smpsAlterNote       $0B
0008B65A E701                       	dc.b	smpsNoAttack, $01
0008B65C E10F                       	smpsAlterNote       $0F
0008B65E E701                       	dc.b	smpsNoAttack, $01
0008B660 E10B                       	smpsAlterNote       $0B
0008B662 E701                       	dc.b	smpsNoAttack, $01
0008B664 E105                       	smpsAlterNote       $05
0008B666 E701                       	dc.b	smpsNoAttack, $01
0008B668 E104                       	smpsAlterNote       $04
0008B66A E701                       	dc.b	smpsNoAttack, $01
0008B66C E108                       	smpsAlterNote       $08
0008B66E E701                       	dc.b	smpsNoAttack, $01
0008B670 E10E                       	smpsAlterNote       $0E
0008B672 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B676 E10B                       	smpsAlterNote       $0B
0008B678 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0008B67C E108                       	smpsAlterNote       $08
0008B67E E701                       	dc.b	smpsNoAttack, $01
0008B680 E104                       	smpsAlterNote       $04
0008B682 E701                       	dc.b	smpsNoAttack, $01
0008B684 E108                       	smpsAlterNote       $08
0008B686 E701                       	dc.b	smpsNoAttack, $01
0008B688 E10B                       	smpsAlterNote       $0B
0008B68A E701                       	dc.b	smpsNoAttack, $01
0008B68E E0C0                       	smpsPan             panCenter, $00
0008B690 E601                       	smpsAlterVol        $01
0008B692 E108                       	smpsAlterNote       $08
0008B694 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
0008B6A0 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
0008B6A8 E080                       	smpsPan             panLeft, $00
0008B6AA 07                         	dc.b	$07
0008B6AB E6FF                       	smpsAlterVol        $FF
0008B6AD E10D                       	smpsAlterNote       $0D
0008B6AF B60D                       	dc.b	nF4, $0D
0008B6B1 E10A                       	smpsAlterNote       $0A
0008B6B3 E701                       	dc.b	smpsNoAttack, $01
0008B6B5 E106                       	smpsAlterNote       $06
0008B6B7 E701                       	dc.b	smpsNoAttack, $01
0008B6B9 E10A                       	smpsAlterNote       $0A
0008B6BB E701                       	dc.b	smpsNoAttack, $01
0008B6BD E110                       	smpsAlterNote       $10
0008B6BF E701                       	dc.b	smpsNoAttack, $01
0008B6C1 E111                       	smpsAlterNote       $11
0008B6C3 E701                       	dc.b	smpsNoAttack, $01
0008B6C5 E10D                       	smpsAlterNote       $0D
0008B6C7 E701                       	dc.b	smpsNoAttack, $01
0008B6C9 E107                       	smpsAlterNote       $07
0008B6CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6CF E10A                       	smpsAlterNote       $0A
0008B6D1 E701                       	dc.b	smpsNoAttack, $01
0008B6D3 E110                       	smpsAlterNote       $10
0008B6D5 E701                       	dc.b	smpsNoAttack, $01
0008B6D7 E111                       	smpsAlterNote       $11
0008B6D9 8001                       	dc.b	nRst, $01
0008B6DB E10D                       	smpsAlterNote       $0D
0008B6DD B80D                       	dc.b	nG4, $0D
0008B6DF E10A                       	smpsAlterNote       $0A
0008B6E1 E701                       	dc.b	smpsNoAttack, $01
0008B6E3 E106                       	smpsAlterNote       $06
0008B6E5 E701                       	dc.b	smpsNoAttack, $01
0008B6E7 E10A                       	smpsAlterNote       $0A
0008B6E9 E701                       	dc.b	smpsNoAttack, $01
0008B6EB E110                       	smpsAlterNote       $10
0008B6ED E701                       	dc.b	smpsNoAttack, $01
0008B6EF E111                       	smpsAlterNote       $11
0008B6F1 E701                       	dc.b	smpsNoAttack, $01
0008B6F3 E10D                       	smpsAlterNote       $0D
0008B6F5 E701                       	dc.b	smpsNoAttack, $01
0008B6F7 E107                       	smpsAlterNote       $07
0008B6F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6FD E10D                       	smpsAlterNote       $0D
0008B6FF E701                       	dc.b	smpsNoAttack, $01
0008B701 E110                       	smpsAlterNote       $10
0008B703 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B707 E10A                       	smpsAlterNote       $0A
0008B709 E701                       	dc.b	smpsNoAttack, $01
0008B70B E106                       	smpsAlterNote       $06
0008B70D E701                       	dc.b	smpsNoAttack, $01
0008B70F E107                       	smpsAlterNote       $07
0008B711 E701                       	dc.b	smpsNoAttack, $01
0008B713 E10D                       	smpsAlterNote       $0D
0008B715 E701                       	dc.b	smpsNoAttack, $01
0008B717 E111                       	smpsAlterNote       $11
0008B719 E701                       	dc.b	smpsNoAttack, $01
0008B71B E10D                       	smpsAlterNote       $0D
0008B71D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B721 E10F                       	smpsAlterNote       $0F
0008B723 BA0D                       	dc.b	nA4, $0D
0008B725 E109                       	smpsAlterNote       $09
0008B727 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B72B E10C                       	smpsAlterNote       $0C
0008B72D E701                       	dc.b	smpsNoAttack, $01
0008B72F E112                       	smpsAlterNote       $12
0008B731 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B735 E10C                       	smpsAlterNote       $0C
0008B737 E701                       	dc.b	smpsNoAttack, $01
0008B739 E109                       	smpsAlterNote       $09
0008B73B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B73F E10F                       	smpsAlterNote       $0F
0008B741 E701                       	dc.b	smpsNoAttack, $01
0008B743 E113                       	smpsAlterNote       $13
0008B745 E701                       	dc.b	smpsNoAttack, $01
0008B747 E112                       	smpsAlterNote       $12
0008B749 E701                       	dc.b	smpsNoAttack, $01
0008B74B E10C                       	smpsAlterNote       $0C
0008B74D E701                       	dc.b	smpsNoAttack, $01
0008B74F E108                       	smpsAlterNote       $08
0008B751 E701                       	dc.b	smpsNoAttack, $01
0008B753 E10C                       	smpsAlterNote       $0C
0008B755 E701                       	dc.b	smpsNoAttack, $01
0008B757 E10F                       	smpsAlterNote       $0F
0008B759 E701                       	dc.b	smpsNoAttack, $01
0008B75B E113                       	smpsAlterNote       $13
0008B75D E701                       	dc.b	smpsNoAttack, $01
0008B75F E10F                       	smpsAlterNote       $0F
0008B761 E701                       	dc.b	smpsNoAttack, $01
0008B763 E109                       	smpsAlterNote       $09
0008B765 E701                       	dc.b	smpsNoAttack, $01
0008B767 E108                       	smpsAlterNote       $08
0008B769 E701                       	dc.b	smpsNoAttack, $01
0008B76B E10C                       	smpsAlterNote       $0C
0008B76D E701                       	dc.b	smpsNoAttack, $01
0008B76F E112                       	smpsAlterNote       $12
0008B771 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B775 E10F                       	smpsAlterNote       $0F
0008B777 E701                       	dc.b	smpsNoAttack, $01
0008B779 E109                       	smpsAlterNote       $09
0008B77B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B77F E10F                       	smpsAlterNote       $0F
0008B781 E701                       	dc.b	smpsNoAttack, $01
0008B783 E112                       	smpsAlterNote       $12
0008B785 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B789 E10C                       	smpsAlterNote       $0C
0008B78B E701                       	dc.b	smpsNoAttack, $01
0008B78D E108                       	smpsAlterNote       $08
0008B78F E701                       	dc.b	smpsNoAttack, $01
0008B791 E109                       	smpsAlterNote       $09
0008B793 E701                       	dc.b	smpsNoAttack, $01
0008B795 E10C                       	smpsAlterNote       $0C
0008B797 B50A                       	dc.b	nE4, $0A
0008B799 E10D                       	smpsAlterNote       $0D
0008B79B B60E                       	dc.b	nF4, $0E
0008B79D E107                       	smpsAlterNote       $07
0008B79F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7A3 E10D                       	smpsAlterNote       $0D
0008B7A5 E701                       	dc.b	smpsNoAttack, $01
0008B7A7 E110                       	smpsAlterNote       $10
0008B7A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7AD E10A                       	smpsAlterNote       $0A
0008B7AF E701                       	dc.b	smpsNoAttack, $01
0008B7B1 E106                       	smpsAlterNote       $06
0008B7B3 E701                       	dc.b	smpsNoAttack, $01
0008B7B5 E107                       	smpsAlterNote       $07
0008B7B7 E701                       	dc.b	smpsNoAttack, $01
0008B7B9 E10D                       	smpsAlterNote       $0D
0008B7BB E701                       	dc.b	smpsNoAttack, $01
0008B7BD E111                       	smpsAlterNote       $11
0008B7BF E701                       	dc.b	smpsNoAttack, $01
0008B7C1 E10D                       	smpsAlterNote       $0D
0008B7C3 B80D                       	dc.b	nG4, $0D
0008B7C5 E10A                       	smpsAlterNote       $0A
0008B7C7 E701                       	dc.b	smpsNoAttack, $01
0008B7C9 E107                       	smpsAlterNote       $07
0008B7CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7CF E10D                       	smpsAlterNote       $0D
0008B7D1 E701                       	dc.b	smpsNoAttack, $01
0008B7D3 E111                       	smpsAlterNote       $11
0008B7D5 E701                       	dc.b	smpsNoAttack, $01
0008B7D7 E110                       	smpsAlterNote       $10
0008B7D9 E701                       	dc.b	smpsNoAttack, $01
0008B7DB E10A                       	smpsAlterNote       $0A
0008B7DD E701                       	dc.b	smpsNoAttack, $01
0008B7DF E106                       	smpsAlterNote       $06
0008B7E1 E701                       	dc.b	smpsNoAttack, $01
0008B7E3 E10A                       	smpsAlterNote       $0A
0008B7E5 E701                       	dc.b	smpsNoAttack, $01
0008B7E7 E10D                       	smpsAlterNote       $0D
0008B7E9 E701                       	dc.b	smpsNoAttack, $01
0008B7EB E111                       	smpsAlterNote       $11
0008B7ED E701                       	dc.b	smpsNoAttack, $01
0008B7EF E10D                       	smpsAlterNote       $0D
0008B7F1 E701                       	dc.b	smpsNoAttack, $01
0008B7F3 E107                       	smpsAlterNote       $07
0008B7F5 E701                       	dc.b	smpsNoAttack, $01
0008B7F7 E106                       	smpsAlterNote       $06
0008B7F9 E701                       	dc.b	smpsNoAttack, $01
0008B7FB E10A                       	smpsAlterNote       $0A
0008B7FD E701                       	dc.b	smpsNoAttack, $01
0008B7FF E110                       	smpsAlterNote       $10
0008B801 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B805 E10D                       	smpsAlterNote       $0D
0008B807 E701                       	dc.b	smpsNoAttack, $01
0008B809 E10F                       	smpsAlterNote       $0F
0008B80B BA0D                       	dc.b	nA4, $0D
0008B80D E10C                       	smpsAlterNote       $0C
0008B80F E701                       	dc.b	smpsNoAttack, $01
0008B811 E108                       	smpsAlterNote       $08
0008B813 E701                       	dc.b	smpsNoAttack, $01
0008B815 E109                       	smpsAlterNote       $09
0008B817 E701                       	dc.b	smpsNoAttack, $01
0008B819 E10F                       	smpsAlterNote       $0F
0008B81B E701                       	dc.b	smpsNoAttack, $01
0008B81D E113                       	smpsAlterNote       $13
0008B81F E701                       	dc.b	smpsNoAttack, $01
0008B821 E10F                       	smpsAlterNote       $0F
0008B823 E701                       	dc.b	smpsNoAttack, $01
0008B825 E10C                       	smpsAlterNote       $0C
0008B827 E701                       	dc.b	smpsNoAttack, $01
0008B829 E108                       	smpsAlterNote       $08
0008B82B E701                       	dc.b	smpsNoAttack, $01
0008B82D E10C                       	smpsAlterNote       $0C
0008B82F E701                       	dc.b	smpsNoAttack, $01
0008B831 E112                       	smpsAlterNote       $12
0008B833 E701                       	dc.b	smpsNoAttack, $01
0008B835 E113                       	smpsAlterNote       $13
0008B837 E701                       	dc.b	smpsNoAttack, $01
0008B839 E10F                       	smpsAlterNote       $0F
0008B83B E701                       	dc.b	smpsNoAttack, $01
0008B83D E109                       	smpsAlterNote       $09
0008B83F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B843 E10C                       	smpsAlterNote       $0C
0008B845 E701                       	dc.b	smpsNoAttack, $01
0008B847 E112                       	smpsAlterNote       $12
0008B849 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B84D E10C                       	smpsAlterNote       $0C
0008B84F E701                       	dc.b	smpsNoAttack, $01
0008B851 E109                       	smpsAlterNote       $09
0008B853 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B857 E10F                       	smpsAlterNote       $0F
0008B859 E701                       	dc.b	smpsNoAttack, $01
0008B85B E113                       	smpsAlterNote       $13
0008B85D E701                       	dc.b	smpsNoAttack, $01
0008B85F E112                       	smpsAlterNote       $12
0008B861 E701                       	dc.b	smpsNoAttack, $01
0008B863 E10C                       	smpsAlterNote       $0C
0008B865 E701                       	dc.b	smpsNoAttack, $01
0008B867 E109                       	smpsAlterNote       $09
0008B869 8001                       	dc.b	nRst, $01
0008B86B E10D                       	smpsAlterNote       $0D
0008B86D B60A                       	dc.b	nF4, $0A
0008B86F E10C                       	smpsAlterNote       $0C
0008B871 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008B875 E10B                       	smpsAlterNote       $0B
0008B877 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008B87B E10C                       	smpsAlterNote       $0C
0008B87D B503                       	dc.b	nE4, $03
0008B87F E10D                       	smpsAlterNote       $0D
0008B881 B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0008B88B E10C                       	smpsAlterNote       $0C
0008B88D E701                       	dc.b	smpsNoAttack, $01
0008B88F E108                       	smpsAlterNote       $08
0008B891 E701                       	dc.b	smpsNoAttack, $01
0008B893 E10C                       	smpsAlterNote       $0C
0008B895 E701                       	dc.b	smpsNoAttack, $01
0008B897 E112                       	smpsAlterNote       $12
0008B899 E701                       	dc.b	smpsNoAttack, $01
0008B89B E113                       	smpsAlterNote       $13
0008B89D E701                       	dc.b	smpsNoAttack, $01
0008B89F E10F                       	smpsAlterNote       $0F
0008B8A1 E701                       	dc.b	smpsNoAttack, $01
0008B8A3 E109                       	smpsAlterNote       $09
0008B8A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8A9 E10C                       	smpsAlterNote       $0C
0008B8AB E701                       	dc.b	smpsNoAttack, $01
0008B8AD E112                       	smpsAlterNote       $12
0008B8AF E701                       	dc.b	smpsNoAttack, $01
0008B8B1 E113                       	smpsAlterNote       $13
0008B8B3 8001                       	dc.b	nRst, $01
0008B8B5 E10D                       	smpsAlterNote       $0D
0008B8B7 C20D                       	dc.b	nF5, $0D
0008B8B9 E10A                       	smpsAlterNote       $0A
0008B8BB E701                       	dc.b	smpsNoAttack, $01
0008B8BD E106                       	smpsAlterNote       $06
0008B8BF E701                       	dc.b	smpsNoAttack, $01
0008B8C1 E10A                       	smpsAlterNote       $0A
0008B8C3 E701                       	dc.b	smpsNoAttack, $01
0008B8C5 E110                       	smpsAlterNote       $10
0008B8C7 E701                       	dc.b	smpsNoAttack, $01
0008B8C9 E111                       	smpsAlterNote       $11
0008B8CB E701                       	dc.b	smpsNoAttack, $01
0008B8CD E10D                       	smpsAlterNote       $0D
0008B8CF E701                       	dc.b	smpsNoAttack, $01
0008B8D1 E107                       	smpsAlterNote       $07
0008B8D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8D7 E10A                       	smpsAlterNote       $0A
0008B8D9 E701                       	dc.b	smpsNoAttack, $01
0008B8DB E110                       	smpsAlterNote       $10
0008B8DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8E1 E10A                       	smpsAlterNote       $0A
0008B8E3 E701                       	dc.b	smpsNoAttack, $01
0008B8E5 E107                       	smpsAlterNote       $07
0008B8E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8EB E10D                       	smpsAlterNote       $0D
0008B8ED E701                       	dc.b	smpsNoAttack, $01
0008B8EF E111                       	smpsAlterNote       $11
0008B8F1 E701                       	dc.b	smpsNoAttack, $01
0008B8F3 E110                       	smpsAlterNote       $10
0008B8F5 E701                       	dc.b	smpsNoAttack, $01
0008B8F7 E10A                       	smpsAlterNote       $0A
0008B8F9 E701                       	dc.b	smpsNoAttack, $01
0008B8FB E106                       	smpsAlterNote       $06
0008B8FD E701                       	dc.b	smpsNoAttack, $01
0008B8FF E10A                       	smpsAlterNote       $0A
0008B901 E701                       	dc.b	smpsNoAttack, $01
0008B903 E10D                       	smpsAlterNote       $0D
0008B905 E701                       	dc.b	smpsNoAttack, $01
0008B907 E111                       	smpsAlterNote       $11
0008B909 E701                       	dc.b	smpsNoAttack, $01
0008B90B E10D                       	smpsAlterNote       $0D
0008B90D E701                       	dc.b	smpsNoAttack, $01
0008B90F E107                       	smpsAlterNote       $07
0008B911 E701                       	dc.b	smpsNoAttack, $01
0008B913 E106                       	smpsAlterNote       $06
0008B915 E701                       	dc.b	smpsNoAttack, $01
0008B917 E10A                       	smpsAlterNote       $0A
0008B919 E701                       	dc.b	smpsNoAttack, $01
0008B91B E110                       	smpsAlterNote       $10
0008B91D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B921 E10D                       	smpsAlterNote       $0D
0008B923 E701                       	dc.b	smpsNoAttack, $01
0008B925 E107                       	smpsAlterNote       $07
0008B927 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B92B E10D                       	smpsAlterNote       $0D
0008B92D E701                       	dc.b	smpsNoAttack, $01
0008B92F E110                       	smpsAlterNote       $10
0008B931 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B935 E10A                       	smpsAlterNote       $0A
0008B937 E701                       	dc.b	smpsNoAttack, $01
0008B939 E106                       	smpsAlterNote       $06
0008B93B E701                       	dc.b	smpsNoAttack, $01
0008B93D E107                       	smpsAlterNote       $07
0008B93F E701                       	dc.b	smpsNoAttack, $01
0008B941 E10D                       	smpsAlterNote       $0D
0008B943 E701                       	dc.b	smpsNoAttack, $01
0008B945 E111                       	smpsAlterNote       $11
0008B947 E701                       	dc.b	smpsNoAttack, $01
0008B949 E10D                       	smpsAlterNote       $0D
0008B94B E701                       	dc.b	smpsNoAttack, $01
0008B94D E10A                       	smpsAlterNote       $0A
0008B94F E701                       	dc.b	smpsNoAttack, $01
0008B951 E107                       	smpsAlterNote       $07
0008B953 8001                       	dc.b	nRst, $01
0008B955 E10D                       	smpsAlterNote       $0D
0008B957 C206 8001                  	dc.b	nF5, $06, nRst, $01
0008B95D E601                       	smpsAlterVol        $01
0008B95F E110                       	smpsAlterNote       $10
0008B961 BB0D                       	dc.b	nBb4, $0D
0008B963 E10A                       	smpsAlterNote       $0A
0008B965 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B969 E110                       	smpsAlterNote       $10
0008B96B E701                       	dc.b	smpsNoAttack, $01
0008B96D E113                       	smpsAlterNote       $13
0008B96F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B973 E10D                       	smpsAlterNote       $0D
0008B975 E701                       	dc.b	smpsNoAttack, $01
0008B977 E109                       	smpsAlterNote       $09
0008B979 E701                       	dc.b	smpsNoAttack, $01
0008B97B E10A                       	smpsAlterNote       $0A
0008B97D E701                       	dc.b	smpsNoAttack, $01
0008B97F E110                       	smpsAlterNote       $10
0008B981 E701                       	dc.b	smpsNoAttack, $01
0008B983 E114                       	smpsAlterNote       $14
0008B985 E701                       	dc.b	smpsNoAttack, $01
0008B987 E110                       	smpsAlterNote       $10
0008B989 E701                       	dc.b	smpsNoAttack, $01
0008B98B E10D                       	smpsAlterNote       $0D
0008B98D E701                       	dc.b	smpsNoAttack, $01
0008B98F E109                       	smpsAlterNote       $09
0008B991 E701                       	dc.b	smpsNoAttack, $01
0008B993 E10A                       	smpsAlterNote       $0A
0008B995 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008B999 E107                       	smpsAlterNote       $07
0008B99B E701                       	dc.b	smpsNoAttack, $01
0008B99D E103                       	smpsAlterNote       $03
0008B99F E701                       	dc.b	smpsNoAttack, $01
0008B9A1 E107                       	smpsAlterNote       $07
0008B9A3 E701                       	dc.b	smpsNoAttack, $01
0008B9A5 E10D                       	smpsAlterNote       $0D
0008B9A7 E701                       	dc.b	smpsNoAttack, $01
0008B9A9 E10E                       	smpsAlterNote       $0E
0008B9AB E701                       	dc.b	smpsNoAttack, $01
0008B9AD E10A                       	smpsAlterNote       $0A
0008B9AF E701                       	dc.b	smpsNoAttack, $01
0008B9B1 E104                       	smpsAlterNote       $04
0008B9B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9B7 E107                       	smpsAlterNote       $07
0008B9B9 E701                       	dc.b	smpsNoAttack, $01
0008B9BB E10D                       	smpsAlterNote       $0D
0008B9BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9C1 E107                       	smpsAlterNote       $07
0008B9C3 E701                       	dc.b	smpsNoAttack, $01
0008B9C5 E104                       	smpsAlterNote       $04
0008B9C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9CB E10B                       	smpsAlterNote       $0B
0008B9CD BF0D                       	dc.b	nD5, $0D
0008B9CF E108                       	smpsAlterNote       $08
0008B9D1 E701                       	dc.b	smpsNoAttack, $01
0008B9D3 E105                       	smpsAlterNote       $05
0008B9D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9D9 E10B                       	smpsAlterNote       $0B
0008B9DB E701                       	dc.b	smpsNoAttack, $01
0008B9DD E10F                       	smpsAlterNote       $0F
0008B9DF E701                       	dc.b	smpsNoAttack, $01
0008B9E1 E10E                       	smpsAlterNote       $0E
0008B9E3 E701                       	dc.b	smpsNoAttack, $01
0008B9E5 E108                       	smpsAlterNote       $08
0008B9E7 E701                       	dc.b	smpsNoAttack, $01
0008B9E9 E104                       	smpsAlterNote       $04
0008B9EB E701                       	dc.b	smpsNoAttack, $01
0008B9ED E108                       	smpsAlterNote       $08
0008B9EF E701                       	dc.b	smpsNoAttack, $01
0008B9F1 E10B                       	smpsAlterNote       $0B
0008B9F3 E701                       	dc.b	smpsNoAttack, $01
0008B9F5 E10F                       	smpsAlterNote       $0F
0008B9F7 E701                       	dc.b	smpsNoAttack, $01
0008B9F9 E10B                       	smpsAlterNote       $0B
0008B9FB E701                       	dc.b	smpsNoAttack, $01
0008B9FD E105                       	smpsAlterNote       $05
0008B9FF E701                       	dc.b	smpsNoAttack, $01
0008BA01 E104                       	smpsAlterNote       $04
0008BA03 E701                       	dc.b	smpsNoAttack, $01
0008BA05 E105                       	smpsAlterNote       $05
0008BA07 8001                       	dc.b	nRst, $01
0008BA09 E10C                       	smpsAlterNote       $0C
0008BA0B C10C                       	dc.b	nE5, $0C
0008BA0D E10D                       	smpsAlterNote       $0D
0008BA0F C201                       	dc.b	nF5, $01
0008BA11 E10E                       	smpsAlterNote       $0E
0008BA13 C301 8001                  	dc.b	nFs5, $01, nRst, $01
0008BA17 E10D                       	smpsAlterNote       $0D
0008BA19 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008BA1D E10A                       	smpsAlterNote       $0A
0008BA1F E701                       	dc.b	smpsNoAttack, $01
0008BA21 E106                       	smpsAlterNote       $06
0008BA23 E701                       	dc.b	smpsNoAttack, $01
0008BA25 E10A                       	smpsAlterNote       $0A
0008BA27 E701                       	dc.b	smpsNoAttack, $01
0008BA29 E10D                       	smpsAlterNote       $0D
0008BA2B E701                       	dc.b	smpsNoAttack, $01
0008BA2D E111                       	smpsAlterNote       $11
0008BA2F E701                       	dc.b	smpsNoAttack, $01
0008BA31 E10D                       	smpsAlterNote       $0D
0008BA33 E701                       	dc.b	smpsNoAttack, $01
0008BA35 E107                       	smpsAlterNote       $07
0008BA37 E701                       	dc.b	smpsNoAttack, $01
0008BA39 E106                       	smpsAlterNote       $06
0008BA3B E701                       	dc.b	smpsNoAttack, $01
0008BA3D E10A                       	smpsAlterNote       $0A
0008BA3F E701                       	dc.b	smpsNoAttack, $01
0008BA41 E110                       	smpsAlterNote       $10
0008BA43 E701                       	dc.b	smpsNoAttack, $01
0008BA45 E111                       	smpsAlterNote       $11
0008BA47 8001                       	dc.b	nRst, $01
0008BA49 E10D                       	smpsAlterNote       $0D
0008BA4B C40D                       	dc.b	nG5, $0D
0008BA4D E10A                       	smpsAlterNote       $0A
0008BA4F E701                       	dc.b	smpsNoAttack, $01
0008BA51 E106                       	smpsAlterNote       $06
0008BA53 E701                       	dc.b	smpsNoAttack, $01
0008BA55 E10A                       	smpsAlterNote       $0A
0008BA57 E701                       	dc.b	smpsNoAttack, $01
0008BA59 E10D                       	smpsAlterNote       $0D
0008BA5B E701                       	dc.b	smpsNoAttack, $01
0008BA5D E10C                       	smpsAlterNote       $0C
0008BA5F C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
0008BA6B 8001                       	dc.b	nRst, $01
0008BA6D E10D                       	smpsAlterNote       $0D
0008BA6F C20D                       	dc.b	nF5, $0D
0008BA71 E10A                       	smpsAlterNote       $0A
0008BA73 E701                       	dc.b	smpsNoAttack, $01
0008BA75 E106                       	smpsAlterNote       $06
0008BA77 E701                       	dc.b	smpsNoAttack, $01
0008BA79 E10A                       	smpsAlterNote       $0A
0008BA7B E701                       	dc.b	smpsNoAttack, $01
0008BA7D E110                       	smpsAlterNote       $10
0008BA7F E701                       	dc.b	smpsNoAttack, $01
0008BA81 E111                       	smpsAlterNote       $11
0008BA83 E701                       	dc.b	smpsNoAttack, $01
0008BA85 E10D                       	smpsAlterNote       $0D
0008BA87 E701                       	dc.b	smpsNoAttack, $01
0008BA89 E107                       	smpsAlterNote       $07
0008BA8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA8F E10A                       	smpsAlterNote       $0A
0008BA91 E701                       	dc.b	smpsNoAttack, $01
0008BA93 E110                       	smpsAlterNote       $10
0008BA95 E701                       	dc.b	smpsNoAttack, $01
0008BA97 E111                       	smpsAlterNote       $11
0008BA99 8001                       	dc.b	nRst, $01
0008BA9B E10F                       	smpsAlterNote       $0F
0008BA9D C60A                       	dc.b	nA5, $0A
0008BA9F E10D                       	smpsAlterNote       $0D
0008BAA1 C406 8001                  	dc.b	nG5, $06, nRst, $01
0008BAA5 E10C                       	smpsAlterNote       $0C
0008BAA7 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008BAB3 8001                       	dc.b	nRst, $01
0008BAB5 E10D                       	smpsAlterNote       $0D
0008BAB7 C20D                       	dc.b	nF5, $0D
0008BAB9 E107                       	smpsAlterNote       $07
0008BABB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BABF E10A                       	smpsAlterNote       $0A
0008BAC1 E701                       	dc.b	smpsNoAttack, $01
0008BAC3 E110                       	smpsAlterNote       $10
0008BAC5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BAC9 E10A                       	smpsAlterNote       $0A
0008BACB E701                       	dc.b	smpsNoAttack, $01
0008BACD E107                       	smpsAlterNote       $07
0008BACF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BAD3 E10D                       	smpsAlterNote       $0D
0008BAD5 E701                       	dc.b	smpsNoAttack, $01
0008BAD7 E111                       	smpsAlterNote       $11
0008BAD9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BADD E10D                       	smpsAlterNote       $0D
0008BADF C40D                       	dc.b	nG5, $0D
0008BAE1 E107                       	smpsAlterNote       $07
0008BAE3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BAE7 E10A                       	smpsAlterNote       $0A
0008BAE9 E701                       	dc.b	smpsNoAttack, $01
0008BAEB E10D                       	smpsAlterNote       $0D
0008BAED 8001                       	dc.b	nRst, $01
0008BAEF E10C                       	smpsAlterNote       $0C
0008BAF1 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008BAFD E10D                       	smpsAlterNote       $0D
0008BAFF C20E                       	dc.b	nF5, $0E
0008BB01 E107                       	smpsAlterNote       $07
0008BB03 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB07 E10D                       	smpsAlterNote       $0D
0008BB09 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BB0F E0C0                       	smpsPan             panCenter, $00
0008BB11 E603                       	smpsAlterVol        $03
0008BB13 E108                       	smpsAlterNote       $08
0008BB15 B406                       	dc.b	nEb4, $06
0008BB17 E10C                       	smpsAlterNote       $0C
0008BB19 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008BB1D E108                       	smpsAlterNote       $08
0008BB1F B403                       	dc.b	nEb4, $03
0008BB21 E109                       	smpsAlterNote       $09
0008BB23 B803 8001                  	dc.b	nG4, $03, nRst, $01
0008BB27 E10C                       	smpsAlterNote       $0C
0008BB29 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
0008BB31 03                         	dc.b	$03
0008BB32 E6FD                       	smpsAlterVol        $FD
0008BB34 F6F1 F4                    	smpsJump            music84_Jump00
0008BB37                            
0008BB37                            ; PSG1 Data
0008BB37                            music84_PSG1:
0008BB37 E1FD                       	smpsAlterNote       $FD
0008BB39 EC04                       	smpsPSGAlterVol     $04
0008BB3B 9203                       	dc.b	nF1, $03
0008BB3D E1FE                       	smpsAlterNote       $FE
0008BB3F 9603                       	dc.b	nA1, $03
0008BB41 EC04                       	smpsPSGAlterVol     $04
0008BB43 E701                       	dc.b	smpsNoAttack, $01
0008BB45 E1FF                       	smpsAlterNote       $FF
0008BB47 ECFC                       	smpsPSGAlterVol     $FC
0008BB49 9B03                       	dc.b	nD2, $03
0008BB4B E1FD                       	smpsAlterNote       $FD
0008BB4D 9403                       	dc.b	nG1, $03
0008BB4F EC04                       	smpsPSGAlterVol     $04
0008BB51 E701                       	dc.b	smpsNoAttack, $01
0008BB53 E1FE                       	smpsAlterNote       $FE
0008BB55 ECFC                       	smpsPSGAlterVol     $FC
0008BB57 9703                       	dc.b	nBb1, $03
0008BB59 E1FF                       	smpsAlterNote       $FF
0008BB5B 9B03                       	dc.b	nD2, $03
0008BB5D EC04                       	smpsPSGAlterVol     $04
0008BB5F E701                       	dc.b	smpsNoAttack, $01
0008BB61 E1FE                       	smpsAlterNote       $FE
0008BB63 ECFC                       	smpsPSGAlterVol     $FC
0008BB65 A002                       	dc.b	nG2, $02
0008BB67 EC04                       	smpsPSGAlterVol     $04
0008BB69 E701                       	dc.b	smpsNoAttack, $01
0008BB6B E1FF                       	smpsAlterNote       $FF
0008BB6D ECFC                       	smpsPSGAlterVol     $FC
0008BB6F A203                       	dc.b	nA2, $03
0008BB71 EC0B                       	smpsPSGAlterVol     $0B
0008BB73 800A                       	dc.b	nRst, $0A
0008BB75 E105                       	smpsAlterNote       $05
0008BB77 01                         	dc.b	$01
0008BB78 E1FC                       	smpsAlterNote       $FC
0008BB7A 01                         	dc.b	$01
0008BB7B E105                       	smpsAlterNote       $05
0008BB7D 01                         	dc.b	$01
0008BB7E E1FD                       	smpsAlterNote       $FD
0008BB80 01                         	dc.b	$01
0008BB81 E105                       	smpsAlterNote       $05
0008BB83 01                         	dc.b	$01
0008BB84 E1FD                       	smpsAlterNote       $FD
0008BB86 01                         	dc.b	$01
0008BB87 E1FA                       	smpsAlterNote       $FA
0008BB89 01                         	dc.b	$01
0008BB8A E1FC                       	smpsAlterNote       $FC
0008BB8C 01                         	dc.b	$01
0008BB8D E105                       	smpsAlterNote       $05
0008BB8F 01                         	dc.b	$01
0008BB90 E108                       	smpsAlterNote       $08
0008BB92 0101                       	dc.b	$01, $01
0008BB94 E105                       	smpsAlterNote       $05
0008BB96 01                         	dc.b	$01
0008BB97 E1FA                       	smpsAlterNote       $FA
0008BB99 0101                       	dc.b	$01, $01
0008BB9B E1FD                       	smpsAlterNote       $FD
0008BB9D 01                         	dc.b	$01
0008BB9E E105                       	smpsAlterNote       $05
0008BBA0 01                         	dc.b	$01
0008BBA1 E108                       	smpsAlterNote       $08
0008BBA3 01                         	dc.b	$01
0008BBA4 E105                       	smpsAlterNote       $05
0008BBA6 01                         	dc.b	$01
0008BBA7 E1FC                       	smpsAlterNote       $FC
0008BBA9 01                         	dc.b	$01
0008BBAA E105                       	smpsAlterNote       $05
0008BBAC 01                         	dc.b	$01
0008BBAD E1FD                       	smpsAlterNote       $FD
0008BBAF 01                         	dc.b	$01
0008BBB0                            
0008BBB0                            music84_Jump07:
0008BBB0 E105                       	smpsAlterNote       $05
0008BBB2 8001                       	dc.b	nRst, $01
0008BBB4 E1FD                       	smpsAlterNote       $FD
0008BBB6 01                         	dc.b	$01
0008BBB7 E1FA                       	smpsAlterNote       $FA
0008BBB9 01                         	dc.b	$01
0008BBBA E1FC                       	smpsAlterNote       $FC
0008BBBC 01                         	dc.b	$01
0008BBBD E1FD                       	smpsAlterNote       $FD
0008BBBF ECF5                       	smpsPSGAlterVol     $F5
0008BBC1 9206                       	dc.b	nF1, $06
0008BBC3 EC04                       	smpsPSGAlterVol     $04
0008BBC5 E701                       	dc.b	smpsNoAttack, $01
0008BBC7 EC07                       	smpsPSGAlterVol     $07
0008BBC9 8003                       	dc.b	nRst, $03
0008BBCB ECF5                       	smpsPSGAlterVol     $F5
0008BBCD 9206                       	dc.b	nF1, $06
0008BBCF EC04                       	smpsPSGAlterVol     $04
0008BBD1 E701                       	dc.b	smpsNoAttack, $01
0008BBD3 EC07                       	smpsPSGAlterVol     $07
0008BBD5 8006                       	dc.b	nRst, $06
0008BBD7 E100                       	smpsAlterNote       $00
0008BBD9 01                         	dc.b	$01
0008BBDA E104                       	smpsAlterNote       $04
0008BBDC 01                         	dc.b	$01
0008BBDD E100                       	smpsAlterNote       $00
0008BBDF 01                         	dc.b	$01
0008BBE0 E1FB                       	smpsAlterNote       $FB
0008BBE2 01                         	dc.b	$01
0008BBE3 E1FD                       	smpsAlterNote       $FD
0008BBE5 ECF5                       	smpsPSGAlterVol     $F5
0008BBE7 9406                       	dc.b	nG1, $06
0008BBE9 EC04                       	smpsPSGAlterVol     $04
0008BBEB E701                       	dc.b	smpsNoAttack, $01
0008BBED EC07                       	smpsPSGAlterVol     $07
0008BBEF 8003                       	dc.b	nRst, $03
0008BBF1 ECF5                       	smpsPSGAlterVol     $F5
0008BBF3 9407                       	dc.b	nG1, $07
0008BBF5 EC0B                       	smpsPSGAlterVol     $0B
0008BBF7 8006                       	dc.b	nRst, $06
0008BBF9 E100                       	smpsAlterNote       $00
0008BBFB 01                         	dc.b	$01
0008BBFC E103                       	smpsAlterNote       $03
0008BBFE 0101                       	dc.b	$01, $01
0008BC00 E1FD                       	smpsAlterNote       $FD
0008BC02 01                         	dc.b	$01
0008BC03 ECF5                       	smpsPSGAlterVol     $F5
0008BC05 9207                       	dc.b	nF1, $07
0008BC07 EC0B                       	smpsPSGAlterVol     $0B
0008BC09 8004                       	dc.b	nRst, $04
0008BC0B ECF5                       	smpsPSGAlterVol     $F5
0008BC0D 9206                       	dc.b	nF1, $06
0008BC0F EC04                       	smpsPSGAlterVol     $04
0008BC11 E701                       	dc.b	smpsNoAttack, $01
0008BC13 EC07                       	smpsPSGAlterVol     $07
0008BC15 8006                       	dc.b	nRst, $06
0008BC17 E103                       	smpsAlterNote       $03
0008BC19 01                         	dc.b	$01
0008BC1A E104                       	smpsAlterNote       $04
0008BC1C 01                         	dc.b	$01
0008BC1D E100                       	smpsAlterNote       $00
0008BC1F 01                         	dc.b	$01
0008BC20 E1FA                       	smpsAlterNote       $FA
0008BC22 01                         	dc.b	$01
0008BC23 E1FD                       	smpsAlterNote       $FD
0008BC25 ECF5                       	smpsPSGAlterVol     $F5
0008BC27 9206                       	dc.b	nF1, $06
0008BC29 EC04                       	smpsPSGAlterVol     $04
0008BC2B E701                       	dc.b	smpsNoAttack, $01
0008BC2D EC07                       	smpsPSGAlterVol     $07
0008BC2F 8003                       	dc.b	nRst, $03
0008BC31 ECF5                       	smpsPSGAlterVol     $F5
0008BC33 9106                       	dc.b	nE1, $06
0008BC35 EC04                       	smpsPSGAlterVol     $04
0008BC37 E701                       	dc.b	smpsNoAttack, $01
0008BC39 EC07                       	smpsPSGAlterVol     $07
0008BC3B 8006                       	dc.b	nRst, $06
0008BC3D E100                       	smpsAlterNote       $00
0008BC3F 01                         	dc.b	$01
0008BC40 E104                       	smpsAlterNote       $04
0008BC42 01                         	dc.b	$01
0008BC43 E100                       	smpsAlterNote       $00
0008BC45 01                         	dc.b	$01
0008BC46 E1FD                       	smpsAlterNote       $FD
0008BC48 01                         	dc.b	$01
0008BC49 ECF5                       	smpsPSGAlterVol     $F5
0008BC4B 9206                       	dc.b	nF1, $06
0008BC4D EC04                       	smpsPSGAlterVol     $04
0008BC4F E701                       	dc.b	smpsNoAttack, $01
0008BC51 EC07                       	smpsPSGAlterVol     $07
0008BC53 8003                       	dc.b	nRst, $03
0008BC55 ECF5                       	smpsPSGAlterVol     $F5
0008BC57 9207                       	dc.b	nF1, $07
0008BC59 EC0B                       	smpsPSGAlterVol     $0B
0008BC5B 8007                       	dc.b	nRst, $07
0008BC5D E103                       	smpsAlterNote       $03
0008BC5F 0101                       	dc.b	$01, $01
0008BC61 E1FD                       	smpsAlterNote       $FD
0008BC63 01                         	dc.b	$01
0008BC64 E1FB                       	smpsAlterNote       $FB
0008BC66 01                         	dc.b	$01
0008BC67 E1FD                       	smpsAlterNote       $FD
0008BC69 ECF5                       	smpsPSGAlterVol     $F5
0008BC6B 9406                       	dc.b	nG1, $06
0008BC6D EC0B                       	smpsPSGAlterVol     $0B
0008BC6F 8004                       	dc.b	nRst, $04
0008BC71 ECF5                       	smpsPSGAlterVol     $F5
0008BC73 9406                       	dc.b	nG1, $06
0008BC75 EC04                       	smpsPSGAlterVol     $04
0008BC77 E701                       	dc.b	smpsNoAttack, $01
0008BC79 EC07                       	smpsPSGAlterVol     $07
0008BC7B 8006                       	dc.b	nRst, $06
0008BC7D E100                       	smpsAlterNote       $00
0008BC7F 01                         	dc.b	$01
0008BC80 E104                       	smpsAlterNote       $04
0008BC82 01                         	dc.b	$01
0008BC83 E100                       	smpsAlterNote       $00
0008BC85 01                         	dc.b	$01
0008BC86 E1F9                       	smpsAlterNote       $F9
0008BC88 01                         	dc.b	$01
0008BC89 E1FD                       	smpsAlterNote       $FD
0008BC8B ECF5                       	smpsPSGAlterVol     $F5
0008BC8D 9206                       	dc.b	nF1, $06
0008BC8F EC04                       	smpsPSGAlterVol     $04
0008BC91 E701                       	dc.b	smpsNoAttack, $01
0008BC93 EC07                       	smpsPSGAlterVol     $07
0008BC95 8003                       	dc.b	nRst, $03
0008BC97 ECF5                       	smpsPSGAlterVol     $F5
0008BC99 9207                       	dc.b	nF1, $07
0008BC9B EC0B                       	smpsPSGAlterVol     $0B
0008BC9D 8006                       	dc.b	nRst, $06
0008BC9F E100                       	smpsAlterNote       $00
0008BCA1 01                         	dc.b	$01
0008BCA2 E104                       	smpsAlterNote       $04
0008BCA4 01                         	dc.b	$01
0008BCA5 E103                       	smpsAlterNote       $03
0008BCA7 01                         	dc.b	$01
0008BCA8 E1FD                       	smpsAlterNote       $FD
0008BCAA 01                         	dc.b	$01
0008BCAB ECF5                       	smpsPSGAlterVol     $F5
0008BCAD 9207                       	dc.b	nF1, $07
0008BCAF EC0B                       	smpsPSGAlterVol     $0B
0008BCB1 8004                       	dc.b	nRst, $04
0008BCB3 ECF5                       	smpsPSGAlterVol     $F5
0008BCB5 9206                       	dc.b	nF1, $06
0008BCB7 EC0B                       	smpsPSGAlterVol     $0B
0008BCB9 8007                       	dc.b	nRst, $07
0008BCBB E103                       	smpsAlterNote       $03
0008BCBD 0101                       	dc.b	$01, $01
0008BCBF E100                       	smpsAlterNote       $00
0008BCC1 01                         	dc.b	$01
0008BCC2 E1FA                       	smpsAlterNote       $FA
0008BCC4 01                         	dc.b	$01
0008BCC5 E1FD                       	smpsAlterNote       $FD
0008BCC7 ECF5                       	smpsPSGAlterVol     $F5
0008BCC9 9206                       	dc.b	nF1, $06
0008BCCB EC04                       	smpsPSGAlterVol     $04
0008BCCD E701                       	dc.b	smpsNoAttack, $01
0008BCCF EC07                       	smpsPSGAlterVol     $07
0008BCD1 8003                       	dc.b	nRst, $03
0008BCD3 ECF5                       	smpsPSGAlterVol     $F5
0008BCD5 9206                       	dc.b	nF1, $06
0008BCD7 EC04                       	smpsPSGAlterVol     $04
0008BCD9 E701                       	dc.b	smpsNoAttack, $01
0008BCDB EC07                       	smpsPSGAlterVol     $07
0008BCDD 8006                       	dc.b	nRst, $06
0008BCDF E100                       	smpsAlterNote       $00
0008BCE1 01                         	dc.b	$01
0008BCE2 E104                       	smpsAlterNote       $04
0008BCE4 01                         	dc.b	$01
0008BCE5 E100                       	smpsAlterNote       $00
0008BCE7 01                         	dc.b	$01
0008BCE8 E1FD                       	smpsAlterNote       $FD
0008BCEA 01                         	dc.b	$01
0008BCEB ECF5                       	smpsPSGAlterVol     $F5
0008BCED 9206                       	dc.b	nF1, $06
0008BCEF EC04                       	smpsPSGAlterVol     $04
0008BCF1 E701                       	dc.b	smpsNoAttack, $01
0008BCF3 EC07                       	smpsPSGAlterVol     $07
0008BCF5 8003                       	dc.b	nRst, $03
0008BCF7 ECF5                       	smpsPSGAlterVol     $F5
0008BCF9 9207                       	dc.b	nF1, $07
0008BCFB EC0B                       	smpsPSGAlterVol     $0B
0008BCFD 8007                       	dc.b	nRst, $07
0008BCFF E103                       	smpsAlterNote       $03
0008BD01 0101                       	dc.b	$01, $01
0008BD03 E1FD                       	smpsAlterNote       $FD
0008BD05 01                         	dc.b	$01
0008BD06 E1FA                       	smpsAlterNote       $FA
0008BD08 01                         	dc.b	$01
0008BD09 E1FD                       	smpsAlterNote       $FD
0008BD0B ECF5                       	smpsPSGAlterVol     $F5
0008BD0D 9206                       	dc.b	nF1, $06
0008BD0F EC0B                       	smpsPSGAlterVol     $0B
0008BD11 8004                       	dc.b	nRst, $04
0008BD13 ECF5                       	smpsPSGAlterVol     $F5
0008BD15 9206                       	dc.b	nF1, $06
0008BD17 EC04                       	smpsPSGAlterVol     $04
0008BD19 E701                       	dc.b	smpsNoAttack, $01
0008BD1B EC07                       	smpsPSGAlterVol     $07
0008BD1D 8006                       	dc.b	nRst, $06
0008BD1F E103                       	smpsAlterNote       $03
0008BD21 01                         	dc.b	$01
0008BD22 E104                       	smpsAlterNote       $04
0008BD24 01                         	dc.b	$01
0008BD25 E100                       	smpsAlterNote       $00
0008BD27 01                         	dc.b	$01
0008BD28 E1FA                       	smpsAlterNote       $FA
0008BD2A 01                         	dc.b	$01
0008BD2B E1FD                       	smpsAlterNote       $FD
0008BD2D ECF5                       	smpsPSGAlterVol     $F5
0008BD2F 9206                       	dc.b	nF1, $06
0008BD31 EC04                       	smpsPSGAlterVol     $04
0008BD33 E701                       	dc.b	smpsNoAttack, $01
0008BD35 EC07                       	smpsPSGAlterVol     $07
0008BD37 8003                       	dc.b	nRst, $03
0008BD39 ECF5                       	smpsPSGAlterVol     $F5
0008BD3B 9206                       	dc.b	nF1, $06
0008BD3D EC04                       	smpsPSGAlterVol     $04
0008BD3F E701                       	dc.b	smpsNoAttack, $01
0008BD41 EC07                       	smpsPSGAlterVol     $07
0008BD43 8006                       	dc.b	nRst, $06
0008BD45 E100                       	smpsAlterNote       $00
0008BD47 01                         	dc.b	$01
0008BD48 E104                       	smpsAlterNote       $04
0008BD4A 01                         	dc.b	$01
0008BD4B E103                       	smpsAlterNote       $03
0008BD4D 01                         	dc.b	$01
0008BD4E E1FD                       	smpsAlterNote       $FD
0008BD50 01                         	dc.b	$01
0008BD51 ECF5                       	smpsPSGAlterVol     $F5
0008BD53 9107                       	dc.b	nE1, $07
0008BD55 EC0B                       	smpsPSGAlterVol     $0B
0008BD57 8004                       	dc.b	nRst, $04
0008BD59 ECF5                       	smpsPSGAlterVol     $F5
0008BD5B 9106                       	dc.b	nE1, $06
0008BD5D EC0B                       	smpsPSGAlterVol     $0B
0008BD5F 8007                       	dc.b	nRst, $07
0008BD61 E103                       	smpsAlterNote       $03
0008BD63 0101                       	dc.b	$01, $01
0008BD65 E100                       	smpsAlterNote       $00
0008BD67 01                         	dc.b	$01
0008BD68 E1FA                       	smpsAlterNote       $FA
0008BD6A 01                         	dc.b	$01
0008BD6B E1FD                       	smpsAlterNote       $FD
0008BD6D ECF5                       	smpsPSGAlterVol     $F5
0008BD6F 9106                       	dc.b	nE1, $06
0008BD71 EC04                       	smpsPSGAlterVol     $04
0008BD73 E701                       	dc.b	smpsNoAttack, $01
0008BD75 EC07                       	smpsPSGAlterVol     $07
0008BD77 8003                       	dc.b	nRst, $03
0008BD79 ECF5                       	smpsPSGAlterVol     $F5
0008BD7B 9106                       	dc.b	nE1, $06
0008BD7D EC04                       	smpsPSGAlterVol     $04
0008BD7F E701                       	dc.b	smpsNoAttack, $01
0008BD81 EC07                       	smpsPSGAlterVol     $07
0008BD83 8006                       	dc.b	nRst, $06
0008BD85 E100                       	smpsAlterNote       $00
0008BD87 01                         	dc.b	$01
0008BD88 E104                       	smpsAlterNote       $04
0008BD8A 01                         	dc.b	$01
0008BD8B E100                       	smpsAlterNote       $00
0008BD8D 01                         	dc.b	$01
0008BD8E E1FA                       	smpsAlterNote       $FA
0008BD90 01                         	dc.b	$01
0008BD91 E1FD                       	smpsAlterNote       $FD
0008BD93 ECF5                       	smpsPSGAlterVol     $F5
0008BD95 9106                       	dc.b	nE1, $06
0008BD97 EC04                       	smpsPSGAlterVol     $04
0008BD99 E701                       	dc.b	smpsNoAttack, $01
0008BD9B EC07                       	smpsPSGAlterVol     $07
0008BD9D 8003                       	dc.b	nRst, $03
0008BD9F ECF5                       	smpsPSGAlterVol     $F5
0008BDA1 9107 9106                  	dc.b	nE1, $07, nE1, $06
0008BDA5 EC04                       	smpsPSGAlterVol     $04
0008BDA7 E701                       	dc.b	smpsNoAttack, $01
0008BDA9 ECFC                       	smpsPSGAlterVol     $FC
0008BDAB 9103 9103                  	dc.b	nE1, $03, nE1, $03
0008BDAF EC04                       	smpsPSGAlterVol     $04
0008BDB1 E701                       	dc.b	smpsNoAttack, $01
0008BDB3 ECFC                       	smpsPSGAlterVol     $FC
0008BDB5 9106                       	dc.b	nE1, $06
0008BDB7 EC04                       	smpsPSGAlterVol     $04
0008BDB9 E701                       	dc.b	smpsNoAttack, $01
0008BDBB EC07                       	smpsPSGAlterVol     $07
0008BDBD 8006                       	dc.b	nRst, $06
0008BDBF E100                       	smpsAlterNote       $00
0008BDC1 01                         	dc.b	$01
0008BDC2 E104                       	smpsAlterNote       $04
0008BDC4 01                         	dc.b	$01
0008BDC5 E100                       	smpsAlterNote       $00
0008BDC7 01                         	dc.b	$01
0008BDC8 E1FA                       	smpsAlterNote       $FA
0008BDCA 01                         	dc.b	$01
0008BDCB E1F9                       	smpsAlterNote       $F9
0008BDCD 01                         	dc.b	$01
0008BDCE E1FD                       	smpsAlterNote       $FD
0008BDD0 01                         	dc.b	$01
0008BDD1 E103                       	smpsAlterNote       $03
0008BDD3 01                         	dc.b	$01
0008BDD4 E104                       	smpsAlterNote       $04
0008BDD6 01                         	dc.b	$01
0008BDD7 E100                       	smpsAlterNote       $00
0008BDD9 01                         	dc.b	$01
0008BDDA E1FA                       	smpsAlterNote       $FA
0008BDDC 0101                       	dc.b	$01, $01
0008BDDE E1FD                       	smpsAlterNote       $FD
0008BDE0 ECF5                       	smpsPSGAlterVol     $F5
0008BDE2 9206                       	dc.b	nF1, $06
0008BDE4 EC04                       	smpsPSGAlterVol     $04
0008BDE6 E701                       	dc.b	smpsNoAttack, $01
0008BDE8 EC07                       	smpsPSGAlterVol     $07
0008BDEA 8003                       	dc.b	nRst, $03
0008BDEC ECF5                       	smpsPSGAlterVol     $F5
0008BDEE 9206                       	dc.b	nF1, $06
0008BDF0 EC04                       	smpsPSGAlterVol     $04
0008BDF2 E701                       	dc.b	smpsNoAttack, $01
0008BDF4 EC07                       	smpsPSGAlterVol     $07
0008BDF6 8006                       	dc.b	nRst, $06
0008BDF8 E100                       	smpsAlterNote       $00
0008BDFA 01                         	dc.b	$01
0008BDFB E104                       	smpsAlterNote       $04
0008BDFD 01                         	dc.b	$01
0008BDFE E103                       	smpsAlterNote       $03
0008BE00 01                         	dc.b	$01
0008BE01 E1FD                       	smpsAlterNote       $FD
0008BE03 01                         	dc.b	$01
0008BE04 ECF5                       	smpsPSGAlterVol     $F5
0008BE06 9407                       	dc.b	nG1, $07
0008BE08 EC0B                       	smpsPSGAlterVol     $0B
0008BE0A 8004                       	dc.b	nRst, $04
0008BE0C ECF5                       	smpsPSGAlterVol     $F5
0008BE0E 9406                       	dc.b	nG1, $06
0008BE10 EC0B                       	smpsPSGAlterVol     $0B
0008BE12 8007                       	dc.b	nRst, $07
0008BE14 E103                       	smpsAlterNote       $03
0008BE16 0101                       	dc.b	$01, $01
0008BE18 E1FD                       	smpsAlterNote       $FD
0008BE1A 01                         	dc.b	$01
0008BE1B E1F9                       	smpsAlterNote       $F9
0008BE1D 01                         	dc.b	$01
0008BE1E E1FD                       	smpsAlterNote       $FD
0008BE20 ECF5                       	smpsPSGAlterVol     $F5
0008BE22 9206                       	dc.b	nF1, $06
0008BE24 EC04                       	smpsPSGAlterVol     $04
0008BE26 E701                       	dc.b	smpsNoAttack, $01
0008BE28 EC07                       	smpsPSGAlterVol     $07
0008BE2A 8003                       	dc.b	nRst, $03
0008BE2C ECF5                       	smpsPSGAlterVol     $F5
0008BE2E 9206                       	dc.b	nF1, $06
0008BE30 EC04                       	smpsPSGAlterVol     $04
0008BE32 E701                       	dc.b	smpsNoAttack, $01
0008BE34 EC07                       	smpsPSGAlterVol     $07
0008BE36 8006                       	dc.b	nRst, $06
0008BE38 E100                       	smpsAlterNote       $00
0008BE3A 01                         	dc.b	$01
0008BE3B E104                       	smpsAlterNote       $04
0008BE3D 01                         	dc.b	$01
0008BE3E E100                       	smpsAlterNote       $00
0008BE40 01                         	dc.b	$01
0008BE41 E1FA                       	smpsAlterNote       $FA
0008BE43 01                         	dc.b	$01
0008BE44 E1FD                       	smpsAlterNote       $FD
0008BE46 ECF5                       	smpsPSGAlterVol     $F5
0008BE48 9206                       	dc.b	nF1, $06
0008BE4A EC04                       	smpsPSGAlterVol     $04
0008BE4C E701                       	dc.b	smpsNoAttack, $01
0008BE4E EC07                       	smpsPSGAlterVol     $07
0008BE50 8003                       	dc.b	nRst, $03
0008BE52 ECF5                       	smpsPSGAlterVol     $F5
0008BE54 9107                       	dc.b	nE1, $07
0008BE56 EC0B                       	smpsPSGAlterVol     $0B
0008BE58 8006                       	dc.b	nRst, $06
0008BE5A E100                       	smpsAlterNote       $00
0008BE5C 01                         	dc.b	$01
0008BE5D E103                       	smpsAlterNote       $03
0008BE5F 0101                       	dc.b	$01, $01
0008BE61 E1FD                       	smpsAlterNote       $FD
0008BE63 01                         	dc.b	$01
0008BE64 ECF5                       	smpsPSGAlterVol     $F5
0008BE66 9207                       	dc.b	nF1, $07
0008BE68 EC0B                       	smpsPSGAlterVol     $0B
0008BE6A 8004                       	dc.b	nRst, $04
0008BE6C ECF5                       	smpsPSGAlterVol     $F5
0008BE6E 9206                       	dc.b	nF1, $06
0008BE70 EC04                       	smpsPSGAlterVol     $04
0008BE72 E701                       	dc.b	smpsNoAttack, $01
0008BE74 EC07                       	smpsPSGAlterVol     $07
0008BE76 8006                       	dc.b	nRst, $06
0008BE78 E103                       	smpsAlterNote       $03
0008BE7A 01                         	dc.b	$01
0008BE7B E104                       	smpsAlterNote       $04
0008BE7D 01                         	dc.b	$01
0008BE7E E100                       	smpsAlterNote       $00
0008BE80 01                         	dc.b	$01
0008BE81 E1FB                       	smpsAlterNote       $FB
0008BE83 01                         	dc.b	$01
0008BE84 E1FD                       	smpsAlterNote       $FD
0008BE86 ECF5                       	smpsPSGAlterVol     $F5
0008BE88 9406                       	dc.b	nG1, $06
0008BE8A EC04                       	smpsPSGAlterVol     $04
0008BE8C E701                       	dc.b	smpsNoAttack, $01
0008BE8E EC07                       	smpsPSGAlterVol     $07
0008BE90 8003                       	dc.b	nRst, $03
0008BE92 ECF5                       	smpsPSGAlterVol     $F5
0008BE94 9406                       	dc.b	nG1, $06
0008BE96 EC04                       	smpsPSGAlterVol     $04
0008BE98 E701                       	dc.b	smpsNoAttack, $01
0008BE9A EC07                       	smpsPSGAlterVol     $07
0008BE9C 8006                       	dc.b	nRst, $06
0008BE9E E100                       	smpsAlterNote       $00
0008BEA0 01                         	dc.b	$01
0008BEA1 E104                       	smpsAlterNote       $04
0008BEA3 01                         	dc.b	$01
0008BEA4 E100                       	smpsAlterNote       $00
0008BEA6 01                         	dc.b	$01
0008BEA7 E1FD                       	smpsAlterNote       $FD
0008BEA9 01                         	dc.b	$01
0008BEAA ECF5                       	smpsPSGAlterVol     $F5
0008BEAC 9206                       	dc.b	nF1, $06
0008BEAE EC04                       	smpsPSGAlterVol     $04
0008BEB0 E701                       	dc.b	smpsNoAttack, $01
0008BEB2 EC07                       	smpsPSGAlterVol     $07
0008BEB4 8003                       	dc.b	nRst, $03
0008BEB6 ECF5                       	smpsPSGAlterVol     $F5
0008BEB8 9207                       	dc.b	nF1, $07
0008BEBA EC0B                       	smpsPSGAlterVol     $0B
0008BEBC 8007                       	dc.b	nRst, $07
0008BEBE E103                       	smpsAlterNote       $03
0008BEC0 0101                       	dc.b	$01, $01
0008BEC2 E1FD                       	smpsAlterNote       $FD
0008BEC4 01                         	dc.b	$01
0008BEC5 E1FA                       	smpsAlterNote       $FA
0008BEC7 01                         	dc.b	$01
0008BEC8 E1FD                       	smpsAlterNote       $FD
0008BECA ECF5                       	smpsPSGAlterVol     $F5
0008BECC 9206                       	dc.b	nF1, $06
0008BECE EC0B                       	smpsPSGAlterVol     $0B
0008BED0 8004                       	dc.b	nRst, $04
0008BED2 ECF5                       	smpsPSGAlterVol     $F5
0008BED4 9206                       	dc.b	nF1, $06
0008BED6 EC04                       	smpsPSGAlterVol     $04
0008BED8 E701                       	dc.b	smpsNoAttack, $01
0008BEDA EC07                       	smpsPSGAlterVol     $07
0008BEDC 8006                       	dc.b	nRst, $06
0008BEDE E100                       	smpsAlterNote       $00
0008BEE0 01                         	dc.b	$01
0008BEE1 E104                       	smpsAlterNote       $04
0008BEE3 01                         	dc.b	$01
0008BEE4 E100                       	smpsAlterNote       $00
0008BEE6 01                         	dc.b	$01
0008BEE7 E1FA                       	smpsAlterNote       $FA
0008BEE9 01                         	dc.b	$01
0008BEEA E1FD                       	smpsAlterNote       $FD
0008BEEC ECF5                       	smpsPSGAlterVol     $F5
0008BEEE 9206                       	dc.b	nF1, $06
0008BEF0 EC04                       	smpsPSGAlterVol     $04
0008BEF2 E704                       	dc.b	smpsNoAttack, $04
0008BEF4 ECFC                       	smpsPSGAlterVol     $FC
0008BEF6 9207                       	dc.b	nF1, $07
0008BEF8 EC0B                       	smpsPSGAlterVol     $0B
0008BEFA 8006                       	dc.b	nRst, $06
0008BEFC E100                       	smpsAlterNote       $00
0008BEFE 01                         	dc.b	$01
0008BEFF E104                       	smpsAlterNote       $04
0008BF01 01                         	dc.b	$01
0008BF02 E103                       	smpsAlterNote       $03
0008BF04 01                         	dc.b	$01
0008BF05 E1FD                       	smpsAlterNote       $FD
0008BF07 01                         	dc.b	$01
0008BF08 ECF5                       	smpsPSGAlterVol     $F5
0008BF0A 9207                       	dc.b	nF1, $07
0008BF0C EC0B                       	smpsPSGAlterVol     $0B
0008BF0E 8004                       	dc.b	nRst, $04
0008BF10 ECF5                       	smpsPSGAlterVol     $F5
0008BF12 9206                       	dc.b	nF1, $06
0008BF14 EC0B                       	smpsPSGAlterVol     $0B
0008BF16 8007                       	dc.b	nRst, $07
0008BF18 E103                       	smpsAlterNote       $03
0008BF1A 0101                       	dc.b	$01, $01
0008BF1C E100                       	smpsAlterNote       $00
0008BF1E 01                         	dc.b	$01
0008BF1F E1FA                       	smpsAlterNote       $FA
0008BF21 01                         	dc.b	$01
0008BF22 E1FD                       	smpsAlterNote       $FD
0008BF24 ECF5                       	smpsPSGAlterVol     $F5
0008BF26 9206                       	dc.b	nF1, $06
0008BF28 EC04                       	smpsPSGAlterVol     $04
0008BF2A E704                       	dc.b	smpsNoAttack, $04
0008BF2C ECFC                       	smpsPSGAlterVol     $FC
0008BF2E 9206                       	dc.b	nF1, $06
0008BF30 EC04                       	smpsPSGAlterVol     $04
0008BF32 E701                       	dc.b	smpsNoAttack, $01
0008BF34 EC07                       	smpsPSGAlterVol     $07
0008BF36 8006                       	dc.b	nRst, $06
0008BF38 E100                       	smpsAlterNote       $00
0008BF3A 01                         	dc.b	$01
0008BF3B E104                       	smpsAlterNote       $04
0008BF3D 01                         	dc.b	$01
0008BF3E E100                       	smpsAlterNote       $00
0008BF40 01                         	dc.b	$01
0008BF41 E1FD                       	smpsAlterNote       $FD
0008BF43 01                         	dc.b	$01
0008BF44 ECF5                       	smpsPSGAlterVol     $F5
0008BF46 9206                       	dc.b	nF1, $06
0008BF48 EC04                       	smpsPSGAlterVol     $04
0008BF4A E701                       	dc.b	smpsNoAttack, $01
0008BF4C EC07                       	smpsPSGAlterVol     $07
0008BF4E 8003                       	dc.b	nRst, $03
0008BF50 ECF5                       	smpsPSGAlterVol     $F5
0008BF52 9207                       	dc.b	nF1, $07
0008BF54 EC0B                       	smpsPSGAlterVol     $0B
0008BF56 8007                       	dc.b	nRst, $07
0008BF58 E103                       	smpsAlterNote       $03
0008BF5A 0101                       	dc.b	$01, $01
0008BF5C E1FD                       	smpsAlterNote       $FD
0008BF5E 01                         	dc.b	$01
0008BF5F E1FA                       	smpsAlterNote       $FA
0008BF61 01                         	dc.b	$01
0008BF62 E1FD                       	smpsAlterNote       $FD
0008BF64 ECF5                       	smpsPSGAlterVol     $F5
0008BF66 9106                       	dc.b	nE1, $06
0008BF68 EC0B                       	smpsPSGAlterVol     $0B
0008BF6A 8004                       	dc.b	nRst, $04
0008BF6C ECF5                       	smpsPSGAlterVol     $F5
0008BF6E 9106                       	dc.b	nE1, $06
0008BF70 EC04                       	smpsPSGAlterVol     $04
0008BF72 E701                       	dc.b	smpsNoAttack, $01
0008BF74 EC07                       	smpsPSGAlterVol     $07
0008BF76 8006                       	dc.b	nRst, $06
0008BF78 E100                       	smpsAlterNote       $00
0008BF7A 01                         	dc.b	$01
0008BF7B E104                       	smpsAlterNote       $04
0008BF7D 01                         	dc.b	$01
0008BF7E E100                       	smpsAlterNote       $00
0008BF80 01                         	dc.b	$01
0008BF81 E1FA                       	smpsAlterNote       $FA
0008BF83 01                         	dc.b	$01
0008BF84 E1FD                       	smpsAlterNote       $FD
0008BF86 ECF5                       	smpsPSGAlterVol     $F5
0008BF88 9106                       	dc.b	nE1, $06
0008BF8A EC04                       	smpsPSGAlterVol     $04
0008BF8C E701                       	dc.b	smpsNoAttack, $01
0008BF8E EC07                       	smpsPSGAlterVol     $07
0008BF90 8003                       	dc.b	nRst, $03
0008BF92 ECF5                       	smpsPSGAlterVol     $F5
0008BF94 9106                       	dc.b	nE1, $06
0008BF96 EC04                       	smpsPSGAlterVol     $04
0008BF98 E701                       	dc.b	smpsNoAttack, $01
0008BF9A EC07                       	smpsPSGAlterVol     $07
0008BF9C 8006                       	dc.b	nRst, $06
0008BF9E E100                       	smpsAlterNote       $00
0008BFA0 01                         	dc.b	$01
0008BFA1 E104                       	smpsAlterNote       $04
0008BFA3 01                         	dc.b	$01
0008BFA4 E103                       	smpsAlterNote       $03
0008BFA6 01                         	dc.b	$01
0008BFA7 E1FD                       	smpsAlterNote       $FD
0008BFA9 01                         	dc.b	$01
0008BFAA ECF5                       	smpsPSGAlterVol     $F5
0008BFAC 9107                       	dc.b	nE1, $07
0008BFAE EC0B                       	smpsPSGAlterVol     $0B
0008BFB0 8004                       	dc.b	nRst, $04
0008BFB2 ECF5                       	smpsPSGAlterVol     $F5
0008BFB4 9106                       	dc.b	nE1, $06
0008BFB6 EC0B                       	smpsPSGAlterVol     $0B
0008BFB8 8007                       	dc.b	nRst, $07
0008BFBA E103                       	smpsAlterNote       $03
0008BFBC 0101                       	dc.b	$01, $01
0008BFBE E100                       	smpsAlterNote       $00
0008BFC0 01                         	dc.b	$01
0008BFC1 E1FA                       	smpsAlterNote       $FA
0008BFC3 01                         	dc.b	$01
0008BFC4 E1FD                       	smpsAlterNote       $FD
0008BFC6 ECF5                       	smpsPSGAlterVol     $F5
0008BFC8 9106                       	dc.b	nE1, $06
0008BFCA EC04                       	smpsPSGAlterVol     $04
0008BFCC E701                       	dc.b	smpsNoAttack, $01
0008BFCE EC07                       	smpsPSGAlterVol     $07
0008BFD0 8003                       	dc.b	nRst, $03
0008BFD2 ECF5                       	smpsPSGAlterVol     $F5
0008BFD4 9106                       	dc.b	nE1, $06
0008BFD6 EC04                       	smpsPSGAlterVol     $04
0008BFD8 E701                       	dc.b	smpsNoAttack, $01
0008BFDA EC07                       	smpsPSGAlterVol     $07
0008BFDC 8003                       	dc.b	nRst, $03
0008BFDE ECF5                       	smpsPSGAlterVol     $F5
0008BFE0 9207                       	dc.b	nF1, $07
0008BFE2 EC0B                       	smpsPSGAlterVol     $0B
0008BFE4 8006                       	dc.b	nRst, $06
0008BFE6 E100                       	smpsAlterNote       $00
0008BFE8 01                         	dc.b	$01
0008BFE9 E104                       	smpsAlterNote       $04
0008BFEB 01                         	dc.b	$01
0008BFEC E103                       	smpsAlterNote       $03
0008BFEE 01                         	dc.b	$01
0008BFEF E1FD                       	smpsAlterNote       $FD
0008BFF1 01                         	dc.b	$01
0008BFF2 E1F9                       	smpsAlterNote       $F9
0008BFF4 01                         	dc.b	$01
0008BFF5 E1FD                       	smpsAlterNote       $FD
0008BFF7 01                         	dc.b	$01
0008BFF8 E100                       	smpsAlterNote       $00
0008BFFA 01                         	dc.b	$01
0008BFFB E104                       	smpsAlterNote       $04
0008BFFD 01                         	dc.b	$01
0008BFFE E1FD                       	smpsAlterNote       $FD
0008C000 ECF5                       	smpsPSGAlterVol     $F5
0008C002 9203 9203                  	dc.b	nF1, $03, nF1, $03
0008C006 EC04                       	smpsPSGAlterVol     $04
0008C008 E701                       	dc.b	smpsNoAttack, $01
0008C00A EC07                       	smpsPSGAlterVol     $07
0008C00C 8009                       	dc.b	nRst, $09
0008C00E E100                       	smpsAlterNote       $00
0008C010 01                         	dc.b	$01
0008C011 E104                       	smpsAlterNote       $04
0008C013 01                         	dc.b	$01
0008C014 E103                       	smpsAlterNote       $03
0008C016 01                         	dc.b	$01
0008C017 E1FD                       	smpsAlterNote       $FD
0008C019 01                         	dc.b	$01
0008C01A E1F9                       	smpsAlterNote       $F9
0008C01C 01                         	dc.b	$01
0008C01D E1FD                       	smpsAlterNote       $FD
0008C01F 01                         	dc.b	$01
0008C020 E100                       	smpsAlterNote       $00
0008C022 01                         	dc.b	$01
0008C023 E104                       	smpsAlterNote       $04
0008C025 01                         	dc.b	$01
0008C026 E100                       	smpsAlterNote       $00
0008C028 01                         	dc.b	$01
0008C029 E1FA                       	smpsAlterNote       $FA
0008C02B 01                         	dc.b	$01
0008C02C E1F9                       	smpsAlterNote       $F9
0008C02E 01                         	dc.b	$01
0008C02F E1FD                       	smpsAlterNote       $FD
0008C031 01                         	dc.b	$01
0008C032 E103                       	smpsAlterNote       $03
0008C034 0101                       	dc.b	$01, $01
0008C036 E100                       	smpsAlterNote       $00
0008C038 01                         	dc.b	$01
0008C039 E1FD                       	smpsAlterNote       $FD
0008C03B ECF5                       	smpsPSGAlterVol     $F5
0008C03D 9202                       	dc.b	nF1, $02
0008C03F EC04                       	smpsPSGAlterVol     $04
0008C041 E701                       	dc.b	smpsNoAttack, $01
0008C043 ECFC                       	smpsPSGAlterVol     $FC
0008C045 9106                       	dc.b	nE1, $06
0008C047 EC04                       	smpsPSGAlterVol     $04
0008C049 E701                       	dc.b	smpsNoAttack, $01
0008C04B EC07                       	smpsPSGAlterVol     $07
0008C04D 8006                       	dc.b	nRst, $06
0008C04F E100                       	smpsAlterNote       $00
0008C051 01                         	dc.b	$01
0008C052 E104                       	smpsAlterNote       $04
0008C054 01                         	dc.b	$01
0008C055 E100                       	smpsAlterNote       $00
0008C057 01                         	dc.b	$01
0008C058 E1FD                       	smpsAlterNote       $FD
0008C05A 01                         	dc.b	$01
0008C05B E1F9                       	smpsAlterNote       $F9
0008C05D 01                         	dc.b	$01
0008C05E E1FD                       	smpsAlterNote       $FD
0008C060 01                         	dc.b	$01
0008C061 E103                       	smpsAlterNote       $03
0008C063 01                         	dc.b	$01
0008C064 E104                       	smpsAlterNote       $04
0008C066 01                         	dc.b	$01
0008C067 E1FD                       	smpsAlterNote       $FD
0008C069 ECF5                       	smpsPSGAlterVol     $F5
0008C06B 9102                       	dc.b	nE1, $02
0008C06D EC04                       	smpsPSGAlterVol     $04
0008C06F E701                       	dc.b	smpsNoAttack, $01
0008C071 ECFC                       	smpsPSGAlterVol     $FC
0008C073 920D                       	dc.b	nF1, $0D
0008C075 E100                       	smpsAlterNote       $00
0008C077 E701                       	dc.b	smpsNoAttack, $01
0008C079 E104                       	smpsAlterNote       $04
0008C07B E701                       	dc.b	smpsNoAttack, $01
0008C07D E100                       	smpsAlterNote       $00
0008C07F E701                       	dc.b	smpsNoAttack, $01
0008C081 E1FD                       	smpsAlterNote       $FD
0008C083 E701                       	dc.b	smpsNoAttack, $01
0008C085 E1F9                       	smpsAlterNote       $F9
0008C087 E701                       	dc.b	smpsNoAttack, $01
0008C089 E1FD                       	smpsAlterNote       $FD
0008C08B E701                       	dc.b	smpsNoAttack, $01
0008C08D E103                       	smpsAlterNote       $03
0008C08F E701                       	dc.b	smpsNoAttack, $01
0008C091 E104                       	smpsAlterNote       $04
0008C093 E701                       	dc.b	smpsNoAttack, $01
0008C095 E100                       	smpsAlterNote       $00
0008C097 E701                       	dc.b	smpsNoAttack, $01
0008C099 E1FA                       	smpsAlterNote       $FA
0008C09B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C09F E1FD                       	smpsAlterNote       $FD
0008C0A1 E701                       	dc.b	smpsNoAttack, $01
0008C0A3 E103                       	smpsAlterNote       $03
0008C0A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0A9 E1FD                       	smpsAlterNote       $FD
0008C0AB E701                       	dc.b	smpsNoAttack, $01
0008C0AD E1F9                       	smpsAlterNote       $F9
0008C0AF E701                       	dc.b	smpsNoAttack, $01
0008C0B1 E1FA                       	smpsAlterNote       $FA
0008C0B3 E701                       	dc.b	smpsNoAttack, $01
0008C0B5 E100                       	smpsAlterNote       $00
0008C0B7 EC04                       	smpsPSGAlterVol     $04
0008C0B9 E701                       	dc.b	smpsNoAttack, $01
0008C0BB EC07                       	smpsPSGAlterVol     $07
0008C0BD E104                       	smpsAlterNote       $04
0008C0BF 8001                       	dc.b	nRst, $01
0008C0C1 E100                       	smpsAlterNote       $00
0008C0C3 01                         	dc.b	$01
0008C0C4 E1FD                       	smpsAlterNote       $FD
0008C0C6 01                         	dc.b	$01
0008C0C7 E1F9                       	smpsAlterNote       $F9
0008C0C9 01                         	dc.b	$01
0008C0CA E1FD                       	smpsAlterNote       $FD
0008C0CC 01                         	dc.b	$01
0008C0CD E103                       	smpsAlterNote       $03
0008C0CF 01                         	dc.b	$01
0008C0D0 E104                       	smpsAlterNote       $04
0008C0D2 01                         	dc.b	$01
0008C0D3 E1FD                       	smpsAlterNote       $FD
0008C0D5 ECF5                       	smpsPSGAlterVol     $F5
0008C0D7 9106                       	dc.b	nE1, $06
0008C0D9 EC04                       	smpsPSGAlterVol     $04
0008C0DB E701                       	dc.b	smpsNoAttack, $01
0008C0DD EC07                       	smpsPSGAlterVol     $07
0008C0DF 8003                       	dc.b	nRst, $03
0008C0E1 ECF5                       	smpsPSGAlterVol     $F5
0008C0E3 9106                       	dc.b	nE1, $06
0008C0E5 EC04                       	smpsPSGAlterVol     $04
0008C0E7 E701                       	dc.b	smpsNoAttack, $01
0008C0E9 EC07                       	smpsPSGAlterVol     $07
0008C0EB 8006                       	dc.b	nRst, $06
0008C0ED E100                       	smpsAlterNote       $00
0008C0EF 01                         	dc.b	$01
0008C0F0 E104                       	smpsAlterNote       $04
0008C0F2 01                         	dc.b	$01
0008C0F3 E100                       	smpsAlterNote       $00
0008C0F5 01                         	dc.b	$01
0008C0F6 E1FA                       	smpsAlterNote       $FA
0008C0F8 01                         	dc.b	$01
0008C0F9 E1FD                       	smpsAlterNote       $FD
0008C0FB ECF5                       	smpsPSGAlterVol     $F5
0008C0FD 9206                       	dc.b	nF1, $06
0008C0FF EC04                       	smpsPSGAlterVol     $04
0008C101 E701                       	dc.b	smpsNoAttack, $01
0008C103 EC07                       	smpsPSGAlterVol     $07
0008C105 8003                       	dc.b	nRst, $03
0008C107 ECF5                       	smpsPSGAlterVol     $F5
0008C109 9207                       	dc.b	nF1, $07
0008C10B EC0B                       	smpsPSGAlterVol     $0B
0008C10D 8006                       	dc.b	nRst, $06
0008C10F E100                       	smpsAlterNote       $00
0008C111 01                         	dc.b	$01
0008C112 E103                       	smpsAlterNote       $03
0008C114 0101                       	dc.b	$01, $01
0008C116 E1FD                       	smpsAlterNote       $FD
0008C118 01                         	dc.b	$01
0008C119 ECF5                       	smpsPSGAlterVol     $F5
0008C11B 9107                       	dc.b	nE1, $07
0008C11D EC0B                       	smpsPSGAlterVol     $0B
0008C11F 8004                       	dc.b	nRst, $04
0008C121 ECF5                       	smpsPSGAlterVol     $F5
0008C123 9106                       	dc.b	nE1, $06
0008C125 EC04                       	smpsPSGAlterVol     $04
0008C127 E701                       	dc.b	smpsNoAttack, $01
0008C129 EC07                       	smpsPSGAlterVol     $07
0008C12B 8006                       	dc.b	nRst, $06
0008C12D E103                       	smpsAlterNote       $03
0008C12F 01                         	dc.b	$01
0008C130 E104                       	smpsAlterNote       $04
0008C132 01                         	dc.b	$01
0008C133 E100                       	smpsAlterNote       $00
0008C135 01                         	dc.b	$01
0008C136 E1FA                       	smpsAlterNote       $FA
0008C138 01                         	dc.b	$01
0008C139 E1FD                       	smpsAlterNote       $FD
0008C13B ECF5                       	smpsPSGAlterVol     $F5
0008C13D 9106                       	dc.b	nE1, $06
0008C13F EC04                       	smpsPSGAlterVol     $04
0008C141 E701                       	dc.b	smpsNoAttack, $01
0008C143 EC07                       	smpsPSGAlterVol     $07
0008C145 8003                       	dc.b	nRst, $03
0008C147 ECF5                       	smpsPSGAlterVol     $F5
0008C149 9106                       	dc.b	nE1, $06
0008C14B EC04                       	smpsPSGAlterVol     $04
0008C14D E701                       	dc.b	smpsNoAttack, $01
0008C14F EC07                       	smpsPSGAlterVol     $07
0008C151 8003                       	dc.b	nRst, $03
0008C153 ECF5                       	smpsPSGAlterVol     $F5
0008C155 9207                       	dc.b	nF1, $07
0008C157 EC0B                       	smpsPSGAlterVol     $0B
0008C159 8006                       	dc.b	nRst, $06
0008C15B E100                       	smpsAlterNote       $00
0008C15D 01                         	dc.b	$01
0008C15E E103                       	smpsAlterNote       $03
0008C160 0101                       	dc.b	$01, $01
0008C162 E1FD                       	smpsAlterNote       $FD
0008C164 01                         	dc.b	$01
0008C165 E1F9                       	smpsAlterNote       $F9
0008C167 01                         	dc.b	$01
0008C168 E1FA                       	smpsAlterNote       $FA
0008C16A 01                         	dc.b	$01
0008C16B E100                       	smpsAlterNote       $00
0008C16D 01                         	dc.b	$01
0008C16E E104                       	smpsAlterNote       $04
0008C170 01                         	dc.b	$01
0008C171 E1FD                       	smpsAlterNote       $FD
0008C173 ECF5                       	smpsPSGAlterVol     $F5
0008C175 9203 9203                  	dc.b	nF1, $03, nF1, $03
0008C179 EC04                       	smpsPSGAlterVol     $04
0008C17B E701                       	dc.b	smpsNoAttack, $01
0008C17D EC07                       	smpsPSGAlterVol     $07
0008C17F 8009                       	dc.b	nRst, $09
0008C181 E100                       	smpsAlterNote       $00
0008C183 01                         	dc.b	$01
0008C184 E103                       	smpsAlterNote       $03
0008C186 0101                       	dc.b	$01, $01
0008C188 E1FD                       	smpsAlterNote       $FD
0008C18A 01                         	dc.b	$01
0008C18B E1F9                       	smpsAlterNote       $F9
0008C18D 01                         	dc.b	$01
0008C18E E1FA                       	smpsAlterNote       $FA
0008C190 01                         	dc.b	$01
0008C191 E100                       	smpsAlterNote       $00
0008C193 01                         	dc.b	$01
0008C194 E104                       	smpsAlterNote       $04
0008C196 01                         	dc.b	$01
0008C197 E100                       	smpsAlterNote       $00
0008C199 01                         	dc.b	$01
0008C19A E1FD                       	smpsAlterNote       $FD
0008C19C 01                         	dc.b	$01
0008C19D E1F9                       	smpsAlterNote       $F9
0008C19F 01                         	dc.b	$01
0008C1A0 E1FD                       	smpsAlterNote       $FD
0008C1A2 01                         	dc.b	$01
0008C1A3 E103                       	smpsAlterNote       $03
0008C1A5 01                         	dc.b	$01
0008C1A6 E104                       	smpsAlterNote       $04
0008C1A8 01                         	dc.b	$01
0008C1A9 E100                       	smpsAlterNote       $00
0008C1AB 01                         	dc.b	$01
0008C1AC E1FD                       	smpsAlterNote       $FD
0008C1AE ECF5                       	smpsPSGAlterVol     $F5
0008C1B0 9203 9106                  	dc.b	nF1, $03, nE1, $06
0008C1B4 EC04                       	smpsPSGAlterVol     $04
0008C1B6 E701                       	dc.b	smpsNoAttack, $01
0008C1B8 EC07                       	smpsPSGAlterVol     $07
0008C1BA 8006                       	dc.b	nRst, $06
0008C1BC E100                       	smpsAlterNote       $00
0008C1BE 01                         	dc.b	$01
0008C1BF E104                       	smpsAlterNote       $04
0008C1C1 01                         	dc.b	$01
0008C1C2 E103                       	smpsAlterNote       $03
0008C1C4 01                         	dc.b	$01
0008C1C5 E1FD                       	smpsAlterNote       $FD
0008C1C7 01                         	dc.b	$01
0008C1C8 E1F9                       	smpsAlterNote       $F9
0008C1CA 01                         	dc.b	$01
0008C1CB E1FD                       	smpsAlterNote       $FD
0008C1CD 01                         	dc.b	$01
0008C1CE E100                       	smpsAlterNote       $00
0008C1D0 01                         	dc.b	$01
0008C1D1 E104                       	smpsAlterNote       $04
0008C1D3 01                         	dc.b	$01
0008C1D4 E1FD                       	smpsAlterNote       $FD
0008C1D6 ECF5                       	smpsPSGAlterVol     $F5
0008C1D8 9103 920D                  	dc.b	nE1, $03, nF1, $0D
0008C1DC E100                       	smpsAlterNote       $00
0008C1DE E701                       	dc.b	smpsNoAttack, $01
0008C1E0 E104                       	smpsAlterNote       $04
0008C1E2 E701                       	dc.b	smpsNoAttack, $01
0008C1E4 E100                       	smpsAlterNote       $00
0008C1E6 E701                       	dc.b	smpsNoAttack, $01
0008C1E8 E1FD                       	smpsAlterNote       $FD
0008C1EA E701                       	dc.b	smpsNoAttack, $01
0008C1EC E1F9                       	smpsAlterNote       $F9
0008C1EE E701                       	dc.b	smpsNoAttack, $01
0008C1F0 E1FD                       	smpsAlterNote       $FD
0008C1F2 E701                       	dc.b	smpsNoAttack, $01
0008C1F4 E103                       	smpsAlterNote       $03
0008C1F6 E701                       	dc.b	smpsNoAttack, $01
0008C1F8 E104                       	smpsAlterNote       $04
0008C1FA E701                       	dc.b	smpsNoAttack, $01
0008C1FC E100                       	smpsAlterNote       $00
0008C1FE E701                       	dc.b	smpsNoAttack, $01
0008C200 E1FA                       	smpsAlterNote       $FA
0008C202 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C206 E1FD                       	smpsAlterNote       $FD
0008C208 E701                       	dc.b	smpsNoAttack, $01
0008C20A E103                       	smpsAlterNote       $03
0008C20C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C210 E100                       	smpsAlterNote       $00
0008C212 E701                       	dc.b	smpsNoAttack, $01
0008C214 E1FA                       	smpsAlterNote       $FA
0008C216 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C21A E100                       	smpsAlterNote       $00
0008C21C EC04                       	smpsPSGAlterVol     $04
0008C21E E701                       	dc.b	smpsNoAttack, $01
0008C220 EC07                       	smpsPSGAlterVol     $07
0008C222 E104                       	smpsAlterNote       $04
0008C224 8001                       	dc.b	nRst, $01
0008C226 E103                       	smpsAlterNote       $03
0008C228 01                         	dc.b	$01
0008C229 E1FD                       	smpsAlterNote       $FD
0008C22B 01                         	dc.b	$01
0008C22C E1F9                       	smpsAlterNote       $F9
0008C22E 01                         	dc.b	$01
0008C22F E1FD                       	smpsAlterNote       $FD
0008C231 01                         	dc.b	$01
0008C232 E100                       	smpsAlterNote       $00
0008C234 01                         	dc.b	$01
0008C235 E104                       	smpsAlterNote       $04
0008C237 01                         	dc.b	$01
0008C238 E1FD                       	smpsAlterNote       $FD
0008C23A ECF5                       	smpsPSGAlterVol     $F5
0008C23C 9106                       	dc.b	nE1, $06
0008C23E EC04                       	smpsPSGAlterVol     $04
0008C240 E701                       	dc.b	smpsNoAttack, $01
0008C242 EC07                       	smpsPSGAlterVol     $07
0008C244 8003                       	dc.b	nRst, $03
0008C246 ECF5                       	smpsPSGAlterVol     $F5
0008C248 9106                       	dc.b	nE1, $06
0008C24A EC04                       	smpsPSGAlterVol     $04
0008C24C E701                       	dc.b	smpsNoAttack, $01
0008C24E EC07                       	smpsPSGAlterVol     $07
0008C250 8006                       	dc.b	nRst, $06
0008C252 E100                       	smpsAlterNote       $00
0008C254 01                         	dc.b	$01
0008C255 E104                       	smpsAlterNote       $04
0008C257 01                         	dc.b	$01
0008C258 E100                       	smpsAlterNote       $00
0008C25A 01                         	dc.b	$01
0008C25B E1FD                       	smpsAlterNote       $FD
0008C25D 01                         	dc.b	$01
0008C25E ECF5                       	smpsPSGAlterVol     $F5
0008C260 9206                       	dc.b	nF1, $06
0008C262 EC04                       	smpsPSGAlterVol     $04
0008C264 E701                       	dc.b	smpsNoAttack, $01
0008C266 EC07                       	smpsPSGAlterVol     $07
0008C268 8003                       	dc.b	nRst, $03
0008C26A ECF5                       	smpsPSGAlterVol     $F5
0008C26C 9207                       	dc.b	nF1, $07
0008C26E EC0B                       	smpsPSGAlterVol     $0B
0008C270 8007                       	dc.b	nRst, $07
0008C272 E103                       	smpsAlterNote       $03
0008C274 0101                       	dc.b	$01, $01
0008C276 E1FD                       	smpsAlterNote       $FD
0008C278 01                         	dc.b	$01
0008C279 E1FA                       	smpsAlterNote       $FA
0008C27B 01                         	dc.b	$01
0008C27C E1FD                       	smpsAlterNote       $FD
0008C27E ECF5                       	smpsPSGAlterVol     $F5
0008C280 9106                       	dc.b	nE1, $06
0008C282 EC0B                       	smpsPSGAlterVol     $0B
0008C284 8004                       	dc.b	nRst, $04
0008C286 ECF5                       	smpsPSGAlterVol     $F5
0008C288 9106                       	dc.b	nE1, $06
0008C28A EC04                       	smpsPSGAlterVol     $04
0008C28C E701                       	dc.b	smpsNoAttack, $01
0008C28E EC07                       	smpsPSGAlterVol     $07
0008C290 8006                       	dc.b	nRst, $06
0008C292 E100                       	smpsAlterNote       $00
0008C294 01                         	dc.b	$01
0008C295 E104                       	smpsAlterNote       $04
0008C297 01                         	dc.b	$01
0008C298 E100                       	smpsAlterNote       $00
0008C29A 01                         	dc.b	$01
0008C29B E1FA                       	smpsAlterNote       $FA
0008C29D 01                         	dc.b	$01
0008C29E E1FD                       	smpsAlterNote       $FD
0008C2A0 ECF5                       	smpsPSGAlterVol     $F5
0008C2A2 9206                       	dc.b	nF1, $06
0008C2A4 EC04                       	smpsPSGAlterVol     $04
0008C2A6 E701                       	dc.b	smpsNoAttack, $01
0008C2A8 EC07                       	smpsPSGAlterVol     $07
0008C2AA 8003                       	dc.b	nRst, $03
0008C2AC ECF5                       	smpsPSGAlterVol     $F5
0008C2AE 9206                       	dc.b	nF1, $06
0008C2B0 EC04                       	smpsPSGAlterVol     $04
0008C2B2 E701                       	dc.b	smpsNoAttack, $01
0008C2B4 EC07                       	smpsPSGAlterVol     $07
0008C2B6 8006                       	dc.b	nRst, $06
0008C2B8 E100                       	smpsAlterNote       $00
0008C2BA 01                         	dc.b	$01
0008C2BB E104                       	smpsAlterNote       $04
0008C2BD 01                         	dc.b	$01
0008C2BE E103                       	smpsAlterNote       $03
0008C2C0 01                         	dc.b	$01
0008C2C1 E1FD                       	smpsAlterNote       $FD
0008C2C3 01                         	dc.b	$01
0008C2C4 ECF5                       	smpsPSGAlterVol     $F5
0008C2C6 9107                       	dc.b	nE1, $07
0008C2C8 EC0B                       	smpsPSGAlterVol     $0B
0008C2CA 8004                       	dc.b	nRst, $04
0008C2CC ECF5                       	smpsPSGAlterVol     $F5
0008C2CE 9106                       	dc.b	nE1, $06
0008C2D0 EC0B                       	smpsPSGAlterVol     $0B
0008C2D2 8007                       	dc.b	nRst, $07
0008C2D4 E103                       	smpsAlterNote       $03
0008C2D6 0101                       	dc.b	$01, $01
0008C2D8 E100                       	smpsAlterNote       $00
0008C2DA 01                         	dc.b	$01
0008C2DB E1FA                       	smpsAlterNote       $FA
0008C2DD 01                         	dc.b	$01
0008C2DE E1FD                       	smpsAlterNote       $FD
0008C2E0 ECF5                       	smpsPSGAlterVol     $F5
0008C2E2 9206                       	dc.b	nF1, $06
0008C2E4 EC04                       	smpsPSGAlterVol     $04
0008C2E6 E701                       	dc.b	smpsNoAttack, $01
0008C2E8 EC07                       	smpsPSGAlterVol     $07
0008C2EA 8003                       	dc.b	nRst, $03
0008C2EC ECF5                       	smpsPSGAlterVol     $F5
0008C2EE 9206                       	dc.b	nF1, $06
0008C2F0 EC04                       	smpsPSGAlterVol     $04
0008C2F2 E701                       	dc.b	smpsNoAttack, $01
0008C2F4 EC07                       	smpsPSGAlterVol     $07
0008C2F6 8006                       	dc.b	nRst, $06
0008C2F8 E100                       	smpsAlterNote       $00
0008C2FA 01                         	dc.b	$01
0008C2FB E104                       	smpsAlterNote       $04
0008C2FD 01                         	dc.b	$01
0008C2FE E100                       	smpsAlterNote       $00
0008C300 01                         	dc.b	$01
0008C301 E1FD                       	smpsAlterNote       $FD
0008C303 01                         	dc.b	$01
0008C304 ECF5                       	smpsPSGAlterVol     $F5
0008C306 9106                       	dc.b	nE1, $06
0008C308 EC04                       	smpsPSGAlterVol     $04
0008C30A E701                       	dc.b	smpsNoAttack, $01
0008C30C EC07                       	smpsPSGAlterVol     $07
0008C30E 8003                       	dc.b	nRst, $03
0008C310 ECF5                       	smpsPSGAlterVol     $F5
0008C312 9107 9106                  	dc.b	nE1, $07, nE1, $06
0008C316 EC04                       	smpsPSGAlterVol     $04
0008C318 E701                       	dc.b	smpsNoAttack, $01
0008C31A ECFC                       	smpsPSGAlterVol     $FC
0008C31C 9103                       	dc.b	nE1, $03
0008C31E EC04                       	smpsPSGAlterVol     $04
0008C320 E701                       	dc.b	smpsNoAttack, $01
0008C322 ECFC                       	smpsPSGAlterVol     $FC
0008C324 9102                       	dc.b	nE1, $02
0008C326 EC04                       	smpsPSGAlterVol     $04
0008C328 E701                       	dc.b	smpsNoAttack, $01
0008C32A ECFC                       	smpsPSGAlterVol     $FC
0008C32C 9103                       	dc.b	nE1, $03
0008C32E EC0B                       	smpsPSGAlterVol     $0B
0008C330 800A                       	dc.b	nRst, $0A
0008C332 E100                       	smpsAlterNote       $00
0008C334 01                         	dc.b	$01
0008C335 E104                       	smpsAlterNote       $04
0008C337 01                         	dc.b	$01
0008C338 E100                       	smpsAlterNote       $00
0008C33A 01                         	dc.b	$01
0008C33B E1FA                       	smpsAlterNote       $FA
0008C33D 01                         	dc.b	$01
0008C33E E1F9                       	smpsAlterNote       $F9
0008C340 01                         	dc.b	$01
0008C341 E1FD                       	smpsAlterNote       $FD
0008C343 01                         	dc.b	$01
0008C344 E103                       	smpsAlterNote       $03
0008C346 0101                       	dc.b	$01, $01
0008C348 E100                       	smpsAlterNote       $00
0008C34A 01                         	dc.b	$01
0008C34B E1FA                       	smpsAlterNote       $FA
0008C34D 0101                       	dc.b	$01, $01
0008C34F E1FD                       	smpsAlterNote       $FD
0008C351 ECF5                       	smpsPSGAlterVol     $F5
0008C353 9206                       	dc.b	nF1, $06
0008C355 EC04                       	smpsPSGAlterVol     $04
0008C357 E704                       	dc.b	smpsNoAttack, $04
0008C359 ECFC                       	smpsPSGAlterVol     $FC
0008C35B 9206                       	dc.b	nF1, $06
0008C35D EC04                       	smpsPSGAlterVol     $04
0008C35F E701                       	dc.b	smpsNoAttack, $01
0008C361 EC07                       	smpsPSGAlterVol     $07
0008C363 8006                       	dc.b	nRst, $06
0008C365 E100                       	smpsAlterNote       $00
0008C367 01                         	dc.b	$01
0008C368 E104                       	smpsAlterNote       $04
0008C36A 01                         	dc.b	$01
0008C36B E103                       	smpsAlterNote       $03
0008C36D 01                         	dc.b	$01
0008C36E E1FD                       	smpsAlterNote       $FD
0008C370 01                         	dc.b	$01
0008C371 ECF5                       	smpsPSGAlterVol     $F5
0008C373 9407                       	dc.b	nG1, $07
0008C375 EC0B                       	smpsPSGAlterVol     $0B
0008C377 8004                       	dc.b	nRst, $04
0008C379 ECF5                       	smpsPSGAlterVol     $F5
0008C37B 9406                       	dc.b	nG1, $06
0008C37D EC0B                       	smpsPSGAlterVol     $0B
0008C37F 8007                       	dc.b	nRst, $07
0008C381 E103                       	smpsAlterNote       $03
0008C383 0101                       	dc.b	$01, $01
0008C385 E1FD                       	smpsAlterNote       $FD
0008C387 01                         	dc.b	$01
0008C388 E1F9                       	smpsAlterNote       $F9
0008C38A 01                         	dc.b	$01
0008C38B E1FD                       	smpsAlterNote       $FD
0008C38D ECF5                       	smpsPSGAlterVol     $F5
0008C38F 9206                       	dc.b	nF1, $06
0008C391 EC04                       	smpsPSGAlterVol     $04
0008C393 E701                       	dc.b	smpsNoAttack, $01
0008C395 EC07                       	smpsPSGAlterVol     $07
0008C397 8003                       	dc.b	nRst, $03
0008C399 ECF5                       	smpsPSGAlterVol     $F5
0008C39B 9206                       	dc.b	nF1, $06
0008C39D EC04                       	smpsPSGAlterVol     $04
0008C39F E701                       	dc.b	smpsNoAttack, $01
0008C3A1 EC07                       	smpsPSGAlterVol     $07
0008C3A3 8006                       	dc.b	nRst, $06
0008C3A5 E100                       	smpsAlterNote       $00
0008C3A7 01                         	dc.b	$01
0008C3A8 E104                       	smpsAlterNote       $04
0008C3AA 01                         	dc.b	$01
0008C3AB E100                       	smpsAlterNote       $00
0008C3AD 01                         	dc.b	$01
0008C3AE E1FA                       	smpsAlterNote       $FA
0008C3B0 01                         	dc.b	$01
0008C3B1 E1FD                       	smpsAlterNote       $FD
0008C3B3 ECF5                       	smpsPSGAlterVol     $F5
0008C3B5 9206                       	dc.b	nF1, $06
0008C3B7 EC04                       	smpsPSGAlterVol     $04
0008C3B9 E701                       	dc.b	smpsNoAttack, $01
0008C3BB EC07                       	smpsPSGAlterVol     $07
0008C3BD 8003                       	dc.b	nRst, $03
0008C3BF ECF5                       	smpsPSGAlterVol     $F5
0008C3C1 9107                       	dc.b	nE1, $07
0008C3C3 EC0B                       	smpsPSGAlterVol     $0B
0008C3C5 8006                       	dc.b	nRst, $06
0008C3C7 E100                       	smpsAlterNote       $00
0008C3C9 01                         	dc.b	$01
0008C3CA E103                       	smpsAlterNote       $03
0008C3CC 0101                       	dc.b	$01, $01
0008C3CE E1FD                       	smpsAlterNote       $FD
0008C3D0 01                         	dc.b	$01
0008C3D1 ECF5                       	smpsPSGAlterVol     $F5
0008C3D3 9207                       	dc.b	nF1, $07
0008C3D5 EC0B                       	smpsPSGAlterVol     $0B
0008C3D7 8004                       	dc.b	nRst, $04
0008C3D9 ECF5                       	smpsPSGAlterVol     $F5
0008C3DB 9206                       	dc.b	nF1, $06
0008C3DD EC04                       	smpsPSGAlterVol     $04
0008C3DF E701                       	dc.b	smpsNoAttack, $01
0008C3E1 EC07                       	smpsPSGAlterVol     $07
0008C3E3 8006                       	dc.b	nRst, $06
0008C3E5 E103                       	smpsAlterNote       $03
0008C3E7 01                         	dc.b	$01
0008C3E8 E104                       	smpsAlterNote       $04
0008C3EA 01                         	dc.b	$01
0008C3EB E100                       	smpsAlterNote       $00
0008C3ED 01                         	dc.b	$01
0008C3EE E1FB                       	smpsAlterNote       $FB
0008C3F0 01                         	dc.b	$01
0008C3F1 E1FD                       	smpsAlterNote       $FD
0008C3F3 ECF5                       	smpsPSGAlterVol     $F5
0008C3F5 9406                       	dc.b	nG1, $06
0008C3F7 EC04                       	smpsPSGAlterVol     $04
0008C3F9 E701                       	dc.b	smpsNoAttack, $01
0008C3FB EC07                       	smpsPSGAlterVol     $07
0008C3FD 8003                       	dc.b	nRst, $03
0008C3FF ECF5                       	smpsPSGAlterVol     $F5
0008C401 9406                       	dc.b	nG1, $06
0008C403 EC04                       	smpsPSGAlterVol     $04
0008C405 E701                       	dc.b	smpsNoAttack, $01
0008C407 EC07                       	smpsPSGAlterVol     $07
0008C409 8006                       	dc.b	nRst, $06
0008C40B E100                       	smpsAlterNote       $00
0008C40D 01                         	dc.b	$01
0008C40E E104                       	smpsAlterNote       $04
0008C410 01                         	dc.b	$01
0008C411 E100                       	smpsAlterNote       $00
0008C413 01                         	dc.b	$01
0008C414 E1FD                       	smpsAlterNote       $FD
0008C416 01                         	dc.b	$01
0008C417 ECF5                       	smpsPSGAlterVol     $F5
0008C419 9206                       	dc.b	nF1, $06
0008C41B EC04                       	smpsPSGAlterVol     $04
0008C41D E701                       	dc.b	smpsNoAttack, $01
0008C41F EC07                       	smpsPSGAlterVol     $07
0008C421 8003                       	dc.b	nRst, $03
0008C423 ECF5                       	smpsPSGAlterVol     $F5
0008C425 9207                       	dc.b	nF1, $07
0008C427 EC0B                       	smpsPSGAlterVol     $0B
0008C429 8007                       	dc.b	nRst, $07
0008C42B E103                       	smpsAlterNote       $03
0008C42D 0101                       	dc.b	$01, $01
0008C42F E1FD                       	smpsAlterNote       $FD
0008C431 01                         	dc.b	$01
0008C432 E1FA                       	smpsAlterNote       $FA
0008C434 01                         	dc.b	$01
0008C435 E1FD                       	smpsAlterNote       $FD
0008C437 ECF5                       	smpsPSGAlterVol     $F5
0008C439 9206                       	dc.b	nF1, $06
0008C43B EC0B                       	smpsPSGAlterVol     $0B
0008C43D 8004                       	dc.b	nRst, $04
0008C43F ECF5                       	smpsPSGAlterVol     $F5
0008C441 9206                       	dc.b	nF1, $06
0008C443 EC04                       	smpsPSGAlterVol     $04
0008C445 E701                       	dc.b	smpsNoAttack, $01
0008C447 EC07                       	smpsPSGAlterVol     $07
0008C449 8006                       	dc.b	nRst, $06
0008C44B E100                       	smpsAlterNote       $00
0008C44D 01                         	dc.b	$01
0008C44E E104                       	smpsAlterNote       $04
0008C450 01                         	dc.b	$01
0008C451 E100                       	smpsAlterNote       $00
0008C453 01                         	dc.b	$01
0008C454 E1FA                       	smpsAlterNote       $FA
0008C456 01                         	dc.b	$01
0008C457 E1FD                       	smpsAlterNote       $FD
0008C459 ECF5                       	smpsPSGAlterVol     $F5
0008C45B 9206                       	dc.b	nF1, $06
0008C45D EC04                       	smpsPSGAlterVol     $04
0008C45F E701                       	dc.b	smpsNoAttack, $01
0008C461 EC07                       	smpsPSGAlterVol     $07
0008C463 8003                       	dc.b	nRst, $03
0008C465 ECF5                       	smpsPSGAlterVol     $F5
0008C467 9207                       	dc.b	nF1, $07
0008C469 EC0B                       	smpsPSGAlterVol     $0B
0008C46B 8006                       	dc.b	nRst, $06
0008C46D E100                       	smpsAlterNote       $00
0008C46F 01                         	dc.b	$01
0008C470 E103                       	smpsAlterNote       $03
0008C472 0101                       	dc.b	$01, $01
0008C474 E1FD                       	smpsAlterNote       $FD
0008C476 01                         	dc.b	$01
0008C477 ECF5                       	smpsPSGAlterVol     $F5
0008C479 9207                       	dc.b	nF1, $07
0008C47B EC0B                       	smpsPSGAlterVol     $0B
0008C47D 8004                       	dc.b	nRst, $04
0008C47F ECF5                       	smpsPSGAlterVol     $F5
0008C481 9206                       	dc.b	nF1, $06
0008C483 EC0B                       	smpsPSGAlterVol     $0B
0008C485 8007                       	dc.b	nRst, $07
0008C487 E103                       	smpsAlterNote       $03
0008C489 0101                       	dc.b	$01, $01
0008C48B E100                       	smpsAlterNote       $00
0008C48D 01                         	dc.b	$01
0008C48E E1FA                       	smpsAlterNote       $FA
0008C490 01                         	dc.b	$01
0008C491 E1FD                       	smpsAlterNote       $FD
0008C493 ECF5                       	smpsPSGAlterVol     $F5
0008C495 9206                       	dc.b	nF1, $06
0008C497 EC04                       	smpsPSGAlterVol     $04
0008C499 E701                       	dc.b	smpsNoAttack, $01
0008C49B EC07                       	smpsPSGAlterVol     $07
0008C49D 8003                       	dc.b	nRst, $03
0008C49F ECF5                       	smpsPSGAlterVol     $F5
0008C4A1 9206                       	dc.b	nF1, $06
0008C4A3 EC04                       	smpsPSGAlterVol     $04
0008C4A5 E701                       	dc.b	smpsNoAttack, $01
0008C4A7 EC07                       	smpsPSGAlterVol     $07
0008C4A9 8006                       	dc.b	nRst, $06
0008C4AB E100                       	smpsAlterNote       $00
0008C4AD 01                         	dc.b	$01
0008C4AE E104                       	smpsAlterNote       $04
0008C4B0 01                         	dc.b	$01
0008C4B1 E100                       	smpsAlterNote       $00
0008C4B3 01                         	dc.b	$01
0008C4B4 E1FD                       	smpsAlterNote       $FD
0008C4B6 01                         	dc.b	$01
0008C4B7 ECF5                       	smpsPSGAlterVol     $F5
0008C4B9 9206                       	dc.b	nF1, $06
0008C4BB EC04                       	smpsPSGAlterVol     $04
0008C4BD E701                       	dc.b	smpsNoAttack, $01
0008C4BF EC07                       	smpsPSGAlterVol     $07
0008C4C1 8003                       	dc.b	nRst, $03
0008C4C3 ECF5                       	smpsPSGAlterVol     $F5
0008C4C5 9207                       	dc.b	nF1, $07
0008C4C7 EC0B                       	smpsPSGAlterVol     $0B
0008C4C9 8007                       	dc.b	nRst, $07
0008C4CB E104                       	smpsAlterNote       $04
0008C4CD 0101                       	dc.b	$01, $01
0008C4CF E1FB                       	smpsAlterNote       $FB
0008C4D1 01                         	dc.b	$01
0008C4D2 E1F6                       	smpsAlterNote       $F6
0008C4D4 0101                       	dc.b	$01, $01
0008C4D6 E1FF                       	smpsAlterNote       $FF
0008C4D8 01                         	dc.b	$01
0008C4D9 E105                       	smpsAlterNote       $05
0008C4DB 01                         	dc.b	$01
0008C4DC E104                       	smpsAlterNote       $04
0008C4DE 01                         	dc.b	$01
0008C4DF E1FB                       	smpsAlterNote       $FB
0008C4E1 01                         	dc.b	$01
0008C4E2 E1F5                       	smpsAlterNote       $F5
0008C4E4 01                         	dc.b	$01
0008C4E5 E1FC                       	smpsAlterNote       $FC
0008C4E7 ECF5                       	smpsPSGAlterVol     $F5
0008C4E9 8B0E                       	dc.b	nBb0, $0E
0008C4EB E102                       	smpsAlterNote       $02
0008C4ED EC0B                       	smpsPSGAlterVol     $0B
0008C4EF 8001                       	dc.b	nRst, $01
0008C4F1 E101                       	smpsAlterNote       $01
0008C4F3 01                         	dc.b	$01
0008C4F4 E1FC                       	smpsAlterNote       $FC
0008C4F6 01                         	dc.b	$01
0008C4F7 E1F9                       	smpsAlterNote       $F9
0008C4F9 0101                       	dc.b	$01, $01
0008C4FB E1FF                       	smpsAlterNote       $FF
0008C4FD 01                         	dc.b	$01
0008C4FE E102                       	smpsAlterNote       $02
0008C500 01                         	dc.b	$01
0008C501 E1FF                       	smpsAlterNote       $FF
0008C503 01                         	dc.b	$01
0008C504 E1FC                       	smpsAlterNote       $FC
0008C506 01                         	dc.b	$01
0008C507 E1F8                       	smpsAlterNote       $F8
0008C509 01                         	dc.b	$01
0008C50A E1FC                       	smpsAlterNote       $FC
0008C50C 01                         	dc.b	$01
0008C50D E101                       	smpsAlterNote       $01
0008C50F 01                         	dc.b	$01
0008C510 E102                       	smpsAlterNote       $02
0008C512 01                         	dc.b	$01
0008C513 E1FF                       	smpsAlterNote       $FF
0008C515 01                         	dc.b	$01
0008C516 E1FB                       	smpsAlterNote       $FB
0008C518 ECF5                       	smpsPSGAlterVol     $F5
0008C51A 8D0D                       	dc.b	nC1, $0D
0008C51C E101                       	smpsAlterNote       $01
0008C51E EC0B                       	smpsPSGAlterVol     $0B
0008C520 8001                       	dc.b	nRst, $01
0008C522 E102                       	smpsAlterNote       $02
0008C524 01                         	dc.b	$01
0008C525 E1FF                       	smpsAlterNote       $FF
0008C527 01                         	dc.b	$01
0008C528 E1F9                       	smpsAlterNote       $F9
0008C52A 0101                       	dc.b	$01, $01
0008C52C E1FC                       	smpsAlterNote       $FC
0008C52E 01                         	dc.b	$01
0008C52F E101                       	smpsAlterNote       $01
0008C531 0101                       	dc.b	$01, $01
0008C533 E1FC                       	smpsAlterNote       $FC
0008C535 01                         	dc.b	$01
0008C536 E1F9                       	smpsAlterNote       $F9
0008C538 0101                       	dc.b	$01, $01
0008C53A E1FF                       	smpsAlterNote       $FF
0008C53C 01                         	dc.b	$01
0008C53D E102                       	smpsAlterNote       $02
0008C53F 01                         	dc.b	$01
0008C540 E101                       	smpsAlterNote       $01
0008C542 01                         	dc.b	$01
0008C543 E1FC                       	smpsAlterNote       $FC
0008C545 ECF5                       	smpsPSGAlterVol     $F5
0008C547 8F0D                       	dc.b	nD1, $0D
0008C549 E1FF                       	smpsAlterNote       $FF
0008C54B EC04                       	smpsPSGAlterVol     $04
0008C54D E701                       	dc.b	smpsNoAttack, $01
0008C54F EC07                       	smpsPSGAlterVol     $07
0008C551 E103                       	smpsAlterNote       $03
0008C553 8001                       	dc.b	nRst, $01
0008C555 E102                       	smpsAlterNote       $02
0008C557 01                         	dc.b	$01
0008C558 E1FD                       	smpsAlterNote       $FD
0008C55A 01                         	dc.b	$01
0008C55B E1F9                       	smpsAlterNote       $F9
0008C55D 01                         	dc.b	$01
0008C55E E1FD                       	smpsAlterNote       $FD
0008C560 01                         	dc.b	$01
0008C561 E100                       	smpsAlterNote       $00
0008C563 01                         	dc.b	$01
0008C564 E103                       	smpsAlterNote       $03
0008C566 01                         	dc.b	$01
0008C567 E100                       	smpsAlterNote       $00
0008C569 01                         	dc.b	$01
0008C56A E1FA                       	smpsAlterNote       $FA
0008C56C 01                         	dc.b	$01
0008C56D E1F9                       	smpsAlterNote       $F9
0008C56F 01                         	dc.b	$01
0008C570 E1FD                       	smpsAlterNote       $FD
0008C572 01                         	dc.b	$01
0008C573 E102                       	smpsAlterNote       $02
0008C575 0101                       	dc.b	$01, $01
0008C577 E100                       	smpsAlterNote       $00
0008C579 01                         	dc.b	$01
0008C57A E1FD                       	smpsAlterNote       $FD
0008C57C ECF5                       	smpsPSGAlterVol     $F5
0008C57E 910D                       	dc.b	nE1, $0D
0008C580 E103                       	smpsAlterNote       $03
0008C582 EC0B                       	smpsPSGAlterVol     $0B
0008C584 8001 01                    	dc.b	nRst, $01, $01
0008C587 E100                       	smpsAlterNote       $00
0008C589 01                         	dc.b	$01
0008C58A E1FA                       	smpsAlterNote       $FA
0008C58C 0101                       	dc.b	$01, $01
0008C58E E100                       	smpsAlterNote       $00
0008C590 01                         	dc.b	$01
0008C591 E103                       	smpsAlterNote       $03
0008C593 01                         	dc.b	$01
0008C594 E1FD                       	smpsAlterNote       $FD
0008C596 ECF5                       	smpsPSGAlterVol     $F5
0008C598 9206                       	dc.b	nF1, $06
0008C59A EC04                       	smpsPSGAlterVol     $04
0008C59C E701                       	dc.b	smpsNoAttack, $01
0008C59E EC07                       	smpsPSGAlterVol     $07
0008C5A0 8003                       	dc.b	nRst, $03
0008C5A2 ECF5                       	smpsPSGAlterVol     $F5
0008C5A4 9207                       	dc.b	nF1, $07
0008C5A6 EC0B                       	smpsPSGAlterVol     $0B
0008C5A8 8006                       	dc.b	nRst, $06
0008C5AA E100                       	smpsAlterNote       $00
0008C5AC 01                         	dc.b	$01
0008C5AD E103                       	smpsAlterNote       $03
0008C5AF 0101                       	dc.b	$01, $01
0008C5B1 E1FD                       	smpsAlterNote       $FD
0008C5B3 01                         	dc.b	$01
0008C5B4 ECF5                       	smpsPSGAlterVol     $F5
0008C5B6 9407                       	dc.b	nG1, $07
0008C5B8 EC0B                       	smpsPSGAlterVol     $0B
0008C5BA 8004                       	dc.b	nRst, $04
0008C5BC ECF5                       	smpsPSGAlterVol     $F5
0008C5BE 9406                       	dc.b	nG1, $06
0008C5C0 EC04                       	smpsPSGAlterVol     $04
0008C5C2 E701                       	dc.b	smpsNoAttack, $01
0008C5C4 EC07                       	smpsPSGAlterVol     $07
0008C5C6 8006                       	dc.b	nRst, $06
0008C5C8 E103                       	smpsAlterNote       $03
0008C5CA 01                         	dc.b	$01
0008C5CB E104                       	smpsAlterNote       $04
0008C5CD 01                         	dc.b	$01
0008C5CE E100                       	smpsAlterNote       $00
0008C5D0 01                         	dc.b	$01
0008C5D1 E1F9                       	smpsAlterNote       $F9
0008C5D3 01                         	dc.b	$01
0008C5D4 E1FD                       	smpsAlterNote       $FD
0008C5D6 ECF5                       	smpsPSGAlterVol     $F5
0008C5D8 9206                       	dc.b	nF1, $06
0008C5DA EC04                       	smpsPSGAlterVol     $04
0008C5DC E701                       	dc.b	smpsNoAttack, $01
0008C5DE EC07                       	smpsPSGAlterVol     $07
0008C5E0 8003                       	dc.b	nRst, $03
0008C5E2 ECF5                       	smpsPSGAlterVol     $F5
0008C5E4 9206                       	dc.b	nF1, $06
0008C5E6 EC04                       	smpsPSGAlterVol     $04
0008C5E8 E701                       	dc.b	smpsNoAttack, $01
0008C5EA EC07                       	smpsPSGAlterVol     $07
0008C5EC 8006                       	dc.b	nRst, $06
0008C5EE E100                       	smpsAlterNote       $00
0008C5F0 01                         	dc.b	$01
0008C5F1 E104                       	smpsAlterNote       $04
0008C5F3 01                         	dc.b	$01
0008C5F4 E103                       	smpsAlterNote       $03
0008C5F6 01                         	dc.b	$01
0008C5F7 E1FD                       	smpsAlterNote       $FD
0008C5F9 01                         	dc.b	$01
0008C5FA ECF5                       	smpsPSGAlterVol     $F5
0008C5FC 9407                       	dc.b	nG1, $07
0008C5FE EC0B                       	smpsPSGAlterVol     $0B
0008C600 8004                       	dc.b	nRst, $04
0008C602 ECF5                       	smpsPSGAlterVol     $F5
0008C604 9406                       	dc.b	nG1, $06
0008C606 EC0B                       	smpsPSGAlterVol     $0B
0008C608 8007                       	dc.b	nRst, $07
0008C60A E103                       	smpsAlterNote       $03
0008C60C 0101                       	dc.b	$01, $01
0008C60E E100                       	smpsAlterNote       $00
0008C610 01                         	dc.b	$01
0008C611 E1F9                       	smpsAlterNote       $F9
0008C613 01                         	dc.b	$01
0008C614 E1FD                       	smpsAlterNote       $FD
0008C616 ECF5                       	smpsPSGAlterVol     $F5
0008C618 9206                       	dc.b	nF1, $06
0008C61A EC04                       	smpsPSGAlterVol     $04
0008C61C E701                       	dc.b	smpsNoAttack, $01
0008C61E EC07                       	smpsPSGAlterVol     $07
0008C620 8003                       	dc.b	nRst, $03
0008C622 ECF5                       	smpsPSGAlterVol     $F5
0008C624 9206                       	dc.b	nF1, $06
0008C626 EC04                       	smpsPSGAlterVol     $04
0008C628 E701                       	dc.b	smpsNoAttack, $01
0008C62A EC07                       	smpsPSGAlterVol     $07
0008C62C 8006                       	dc.b	nRst, $06
0008C62E E100                       	smpsAlterNote       $00
0008C630 01                         	dc.b	$01
0008C631 E104                       	smpsAlterNote       $04
0008C633 01                         	dc.b	$01
0008C634 E100                       	smpsAlterNote       $00
0008C636 01                         	dc.b	$01
0008C637 E1FB                       	smpsAlterNote       $FB
0008C639 01                         	dc.b	$01
0008C63A E1FD                       	smpsAlterNote       $FD
0008C63C ECF5                       	smpsPSGAlterVol     $F5
0008C63E 9406                       	dc.b	nG1, $06
0008C640 EC04                       	smpsPSGAlterVol     $04
0008C642 E701                       	dc.b	smpsNoAttack, $01
0008C644 EC07                       	smpsPSGAlterVol     $07
0008C646 8003                       	dc.b	nRst, $03
0008C648 ECF5                       	smpsPSGAlterVol     $F5
0008C64A 9407                       	dc.b	nG1, $07
0008C64C EC0B                       	smpsPSGAlterVol     $0B
0008C64E 8006                       	dc.b	nRst, $06
0008C650 E100                       	smpsAlterNote       $00
0008C652 01                         	dc.b	$01
0008C653 E103                       	smpsAlterNote       $03
0008C655 0101                       	dc.b	$01, $01
0008C657 E1FD                       	smpsAlterNote       $FD
0008C659 01                         	dc.b	$01
0008C65A ECF5                       	smpsPSGAlterVol     $F5
0008C65C 9207                       	dc.b	nF1, $07
0008C65E EC0B                       	smpsPSGAlterVol     $0B
0008C660 8004                       	dc.b	nRst, $04
0008C662 ECF5                       	smpsPSGAlterVol     $F5
0008C664 9206                       	dc.b	nF1, $06
0008C666 EC04                       	smpsPSGAlterVol     $04
0008C668 E701                       	dc.b	smpsNoAttack, $01
0008C66A ECFC                       	smpsPSGAlterVol     $FC
0008C66C E1FC                       	smpsAlterNote       $FC
0008C66E 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
0008C672 EC04                       	smpsPSGAlterVol     $04
0008C674 E701                       	dc.b	smpsNoAttack, $01
0008C676 ECFC                       	smpsPSGAlterVol     $FC
0008C678 9003                       	dc.b	nEb1, $03
0008C67A E1FD                       	smpsAlterNote       $FD
0008C67C 9403                       	dc.b	nG1, $03
0008C67E EC04                       	smpsPSGAlterVol     $04
0008C680 E701                       	dc.b	smpsNoAttack, $01
0008C682 E1FE                       	smpsAlterNote       $FE
0008C684 ECFC                       	smpsPSGAlterVol     $FC
0008C686 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008C68A EC04                       	smpsPSGAlterVol     $04
0008C68C E701                       	dc.b	smpsNoAttack, $01
0008C68E EC07                       	smpsPSGAlterVol     $07
0008C690 8009                       	dc.b	nRst, $09
0008C692 E100                       	smpsAlterNote       $00
0008C694 01                         	dc.b	$01
0008C695 F6F5 19                    	smpsJump            music84_Jump07
0008C698                            
0008C698                            ; PSG2 Data
0008C698                            music84_PSG2:
0008C698 E1FC                       	smpsAlterNote       $FC
0008C69A EC04                       	smpsPSGAlterVol     $04
0008C69C 8F03                       	dc.b	nD1, $03
0008C69E E1FD                       	smpsAlterNote       $FD
0008C6A0 9203                       	dc.b	nF1, $03
0008C6A2 EC04                       	smpsPSGAlterVol     $04
0008C6A4 E701                       	dc.b	smpsNoAttack, $01
0008C6A6 E1FE                       	smpsAlterNote       $FE
0008C6A8 ECFC                       	smpsPSGAlterVol     $FC
0008C6AA 9603                       	dc.b	nA1, $03
0008C6AC E1FD                       	smpsAlterNote       $FD
0008C6AE 9103                       	dc.b	nE1, $03
0008C6B0 EC04                       	smpsPSGAlterVol     $04
0008C6B2 E701                       	dc.b	smpsNoAttack, $01
0008C6B4 ECFC                       	smpsPSGAlterVol     $FC
0008C6B6 9403                       	dc.b	nG1, $03
0008C6B8 E1FE                       	smpsAlterNote       $FE
0008C6BA 9703                       	dc.b	nBb1, $03
0008C6BC EC04                       	smpsPSGAlterVol     $04
0008C6BE E701                       	dc.b	smpsNoAttack, $01
0008C6C0 E1FF                       	smpsAlterNote       $FF
0008C6C2 ECFC                       	smpsPSGAlterVol     $FC
0008C6C4 9B02                       	dc.b	nD2, $02
0008C6C6 EC04                       	smpsPSGAlterVol     $04
0008C6C8 E701                       	dc.b	smpsNoAttack, $01
0008C6CA ECFC                       	smpsPSGAlterVol     $FC
0008C6CC E1FE                       	smpsAlterNote       $FE
0008C6CE 9A03                       	dc.b	nCs2, $03
0008C6D0 EC0B                       	smpsPSGAlterVol     $0B
0008C6D2 800A                       	dc.b	nRst, $0A
0008C6D4 E102                       	smpsAlterNote       $02
0008C6D6 01                         	dc.b	$01
0008C6D7 E10A                       	smpsAlterNote       $0A
0008C6D9 01                         	dc.b	$01
0008C6DA E102                       	smpsAlterNote       $02
0008C6DC 01                         	dc.b	$01
0008C6DD E1FC                       	smpsAlterNote       $FC
0008C6DF 01                         	dc.b	$01
0008C6E0 E10A                       	smpsAlterNote       $0A
0008C6E2 01                         	dc.b	$01
0008C6E3 E1FC                       	smpsAlterNote       $FC
0008C6E5 01                         	dc.b	$01
0008C6E6 E108                       	smpsAlterNote       $08
0008C6E8 01                         	dc.b	$01
0008C6E9 E10A                       	smpsAlterNote       $0A
0008C6EB 01                         	dc.b	$01
0008C6EC E102                       	smpsAlterNote       $02
0008C6EE 01                         	dc.b	$01
0008C6EF E1F7                       	smpsAlterNote       $F7
0008C6F1 0101                       	dc.b	$01, $01
0008C6F3 E102                       	smpsAlterNote       $02
0008C6F5 01                         	dc.b	$01
0008C6F6 E108                       	smpsAlterNote       $08
0008C6F8 0101                       	dc.b	$01, $01
0008C6FA E1FC                       	smpsAlterNote       $FC
0008C6FC 01                         	dc.b	$01
0008C6FD E10A                       	smpsAlterNote       $0A
0008C6FF 01                         	dc.b	$01
0008C700 E1F7                       	smpsAlterNote       $F7
0008C702 01                         	dc.b	$01
0008C703 E102                       	smpsAlterNote       $02
0008C705 01                         	dc.b	$01
0008C706 E10A                       	smpsAlterNote       $0A
0008C708 01                         	dc.b	$01
0008C709 E102                       	smpsAlterNote       $02
0008C70B 01                         	dc.b	$01
0008C70C E1FC                       	smpsAlterNote       $FC
0008C70E 01                         	dc.b	$01
0008C70F                            
0008C70F                            music84_Jump06:
0008C70F E10A                       	smpsAlterNote       $0A
0008C711 8001                       	dc.b	nRst, $01
0008C713 E1FC                       	smpsAlterNote       $FC
0008C715 01                         	dc.b	$01
0008C716 E108                       	smpsAlterNote       $08
0008C718 01                         	dc.b	$01
0008C719 E10A                       	smpsAlterNote       $0A
0008C71B 01                         	dc.b	$01
0008C71C E1FC                       	smpsAlterNote       $FC
0008C71E ECF5                       	smpsPSGAlterVol     $F5
0008C720 8F06                       	dc.b	nD1, $06
0008C722 EC04                       	smpsPSGAlterVol     $04
0008C724 E701                       	dc.b	smpsNoAttack, $01
0008C726 EC07                       	smpsPSGAlterVol     $07
0008C728 8003                       	dc.b	nRst, $03
0008C72A ECF5                       	smpsPSGAlterVol     $F5
0008C72C 8F06                       	dc.b	nD1, $06
0008C72E EC04                       	smpsPSGAlterVol     $04
0008C730 E701                       	dc.b	smpsNoAttack, $01
0008C732 EC07                       	smpsPSGAlterVol     $07
0008C734 8006                       	dc.b	nRst, $06
0008C736 E1FF                       	smpsAlterNote       $FF
0008C738 01                         	dc.b	$01
0008C739 E102                       	smpsAlterNote       $02
0008C73B 01                         	dc.b	$01
0008C73C E1FF                       	smpsAlterNote       $FF
0008C73E 01                         	dc.b	$01
0008C73F E1F9                       	smpsAlterNote       $F9
0008C741 01                         	dc.b	$01
0008C742 E1FC                       	smpsAlterNote       $FC
0008C744 ECF5                       	smpsPSGAlterVol     $F5
0008C746 9006                       	dc.b	nEb1, $06
0008C748 EC04                       	smpsPSGAlterVol     $04
0008C74A E701                       	dc.b	smpsNoAttack, $01
0008C74C EC07                       	smpsPSGAlterVol     $07
0008C74E 8003                       	dc.b	nRst, $03
0008C750 ECF5                       	smpsPSGAlterVol     $F5
0008C752 9007                       	dc.b	nEb1, $07
0008C754 EC0B                       	smpsPSGAlterVol     $0B
0008C756 8006                       	dc.b	nRst, $06
0008C758 E1FF                       	smpsAlterNote       $FF
0008C75A 01                         	dc.b	$01
0008C75B E103                       	smpsAlterNote       $03
0008C75D 0101                       	dc.b	$01, $01
0008C75F E1FC                       	smpsAlterNote       $FC
0008C761 01                         	dc.b	$01
0008C762 ECF5                       	smpsPSGAlterVol     $F5
0008C764 8F07                       	dc.b	nD1, $07
0008C766 EC0B                       	smpsPSGAlterVol     $0B
0008C768 8004                       	dc.b	nRst, $04
0008C76A ECF5                       	smpsPSGAlterVol     $F5
0008C76C 8F06                       	dc.b	nD1, $06
0008C76E EC04                       	smpsPSGAlterVol     $04
0008C770 E701                       	dc.b	smpsNoAttack, $01
0008C772 EC07                       	smpsPSGAlterVol     $07
0008C774 8006                       	dc.b	nRst, $06
0008C776 E102                       	smpsAlterNote       $02
0008C778 01                         	dc.b	$01
0008C779 E103                       	smpsAlterNote       $03
0008C77B 01                         	dc.b	$01
0008C77C E1FF                       	smpsAlterNote       $FF
0008C77E 01                         	dc.b	$01
0008C77F E1F9                       	smpsAlterNote       $F9
0008C781 01                         	dc.b	$01
0008C782 E1FC                       	smpsAlterNote       $FC
0008C784 ECF5                       	smpsPSGAlterVol     $F5
0008C786 8F06                       	dc.b	nD1, $06
0008C788 EC04                       	smpsPSGAlterVol     $04
0008C78A E701                       	dc.b	smpsNoAttack, $01
0008C78C EC07                       	smpsPSGAlterVol     $07
0008C78E 8003                       	dc.b	nRst, $03
0008C790 ECF5                       	smpsPSGAlterVol     $F5
0008C792 8F06                       	dc.b	nD1, $06
0008C794 EC04                       	smpsPSGAlterVol     $04
0008C796 E701                       	dc.b	smpsNoAttack, $01
0008C798 EC07                       	smpsPSGAlterVol     $07
0008C79A 8006                       	dc.b	nRst, $06
0008C79C E1FF                       	smpsAlterNote       $FF
0008C79E 01                         	dc.b	$01
0008C79F E103                       	smpsAlterNote       $03
0008C7A1 01                         	dc.b	$01
0008C7A2 E1FF                       	smpsAlterNote       $FF
0008C7A4 01                         	dc.b	$01
0008C7A5 E1FC                       	smpsAlterNote       $FC
0008C7A7 01                         	dc.b	$01
0008C7A8 ECF5                       	smpsPSGAlterVol     $F5
0008C7AA 8F06                       	dc.b	nD1, $06
0008C7AC EC04                       	smpsPSGAlterVol     $04
0008C7AE E701                       	dc.b	smpsNoAttack, $01
0008C7B0 EC07                       	smpsPSGAlterVol     $07
0008C7B2 8003                       	dc.b	nRst, $03
0008C7B4 ECF5                       	smpsPSGAlterVol     $F5
0008C7B6 8F07                       	dc.b	nD1, $07
0008C7B8 EC0B                       	smpsPSGAlterVol     $0B
0008C7BA 8007                       	dc.b	nRst, $07
0008C7BC E101                       	smpsAlterNote       $01
0008C7BE 0101                       	dc.b	$01, $01
0008C7C0 E1FC                       	smpsAlterNote       $FC
0008C7C2 01                         	dc.b	$01
0008C7C3 E1F9                       	smpsAlterNote       $F9
0008C7C5 01                         	dc.b	$01
0008C7C6 E1FC                       	smpsAlterNote       $FC
0008C7C8 ECF5                       	smpsPSGAlterVol     $F5
0008C7CA 9006                       	dc.b	nEb1, $06
0008C7CC EC0B                       	smpsPSGAlterVol     $0B
0008C7CE 8004                       	dc.b	nRst, $04
0008C7D0 ECF5                       	smpsPSGAlterVol     $F5
0008C7D2 9006                       	dc.b	nEb1, $06
0008C7D4 EC04                       	smpsPSGAlterVol     $04
0008C7D6 E701                       	dc.b	smpsNoAttack, $01
0008C7D8 EC07                       	smpsPSGAlterVol     $07
0008C7DA 8006                       	dc.b	nRst, $06
0008C7DC E100                       	smpsAlterNote       $00
0008C7DE 01                         	dc.b	$01
0008C7DF E102                       	smpsAlterNote       $02
0008C7E1 01                         	dc.b	$01
0008C7E2 E100                       	smpsAlterNote       $00
0008C7E4 01                         	dc.b	$01
0008C7E5 E1FD                       	smpsAlterNote       $FD
0008C7E7 01                         	dc.b	$01
0008C7E8 E1FF                       	smpsAlterNote       $FF
0008C7EA ECF5                       	smpsPSGAlterVol     $F5
0008C7EC 9B06                       	dc.b	nD2, $06
0008C7EE EC04                       	smpsPSGAlterVol     $04
0008C7F0 E701                       	dc.b	smpsNoAttack, $01
0008C7F2 EC07                       	smpsPSGAlterVol     $07
0008C7F4 8003                       	dc.b	nRst, $03
0008C7F6 ECF5                       	smpsPSGAlterVol     $F5
0008C7F8 9B07                       	dc.b	nD2, $07
0008C7FA EC0B                       	smpsPSGAlterVol     $0B
0008C7FC 8006                       	dc.b	nRst, $06
0008C7FE E102                       	smpsAlterNote       $02
0008C800 01                         	dc.b	$01
0008C801 E106                       	smpsAlterNote       $06
0008C803 01                         	dc.b	$01
0008C804 E105                       	smpsAlterNote       $05
0008C806 01                         	dc.b	$01
0008C807 E1FF                       	smpsAlterNote       $FF
0008C809 01                         	dc.b	$01
0008C80A ECF5                       	smpsPSGAlterVol     $F5
0008C80C 9B07                       	dc.b	nD2, $07
0008C80E EC0B                       	smpsPSGAlterVol     $0B
0008C810 8004                       	dc.b	nRst, $04
0008C812 ECF5                       	smpsPSGAlterVol     $F5
0008C814 9B06                       	dc.b	nD2, $06
0008C816 EC0B                       	smpsPSGAlterVol     $0B
0008C818 8007                       	dc.b	nRst, $07
0008C81A E105                       	smpsAlterNote       $05
0008C81C 0101                       	dc.b	$01, $01
0008C81E E102                       	smpsAlterNote       $02
0008C820 01                         	dc.b	$01
0008C821 E1FC                       	smpsAlterNote       $FC
0008C823 01                         	dc.b	$01
0008C824 E1FF                       	smpsAlterNote       $FF
0008C826 ECF5                       	smpsPSGAlterVol     $F5
0008C828 9B06                       	dc.b	nD2, $06
0008C82A EC04                       	smpsPSGAlterVol     $04
0008C82C E701                       	dc.b	smpsNoAttack, $01
0008C82E EC07                       	smpsPSGAlterVol     $07
0008C830 8003                       	dc.b	nRst, $03
0008C832 ECF5                       	smpsPSGAlterVol     $F5
0008C834 9B06                       	dc.b	nD2, $06
0008C836 EC04                       	smpsPSGAlterVol     $04
0008C838 E701                       	dc.b	smpsNoAttack, $01
0008C83A EC07                       	smpsPSGAlterVol     $07
0008C83C 8006                       	dc.b	nRst, $06
0008C83E E102                       	smpsAlterNote       $02
0008C840 01                         	dc.b	$01
0008C841 E106                       	smpsAlterNote       $06
0008C843 01                         	dc.b	$01
0008C844 E102                       	smpsAlterNote       $02
0008C846 01                         	dc.b	$01
0008C847 E1FF                       	smpsAlterNote       $FF
0008C849 01                         	dc.b	$01
0008C84A ECF5                       	smpsPSGAlterVol     $F5
0008C84C 9B06                       	dc.b	nD2, $06
0008C84E EC04                       	smpsPSGAlterVol     $04
0008C850 E701                       	dc.b	smpsNoAttack, $01
0008C852 EC07                       	smpsPSGAlterVol     $07
0008C854 8003                       	dc.b	nRst, $03
0008C856 ECF5                       	smpsPSGAlterVol     $F5
0008C858 9B07                       	dc.b	nD2, $07
0008C85A EC0B                       	smpsPSGAlterVol     $0B
0008C85C 8007                       	dc.b	nRst, $07
0008C85E E105                       	smpsAlterNote       $05
0008C860 0101                       	dc.b	$01, $01
0008C862 E1FF                       	smpsAlterNote       $FF
0008C864 01                         	dc.b	$01
0008C865 E1FC                       	smpsAlterNote       $FC
0008C867 01                         	dc.b	$01
0008C868 E1FF                       	smpsAlterNote       $FF
0008C86A ECF5                       	smpsPSGAlterVol     $F5
0008C86C 9B06                       	dc.b	nD2, $06
0008C86E EC0B                       	smpsPSGAlterVol     $0B
0008C870 8004                       	dc.b	nRst, $04
0008C872 ECF5                       	smpsPSGAlterVol     $F5
0008C874 9B06                       	dc.b	nD2, $06
0008C876 EC04                       	smpsPSGAlterVol     $04
0008C878 E701                       	dc.b	smpsNoAttack, $01
0008C87A EC07                       	smpsPSGAlterVol     $07
0008C87C 8006                       	dc.b	nRst, $06
0008C87E E105                       	smpsAlterNote       $05
0008C880 01                         	dc.b	$01
0008C881 E106                       	smpsAlterNote       $06
0008C883 01                         	dc.b	$01
0008C884 E102                       	smpsAlterNote       $02
0008C886 01                         	dc.b	$01
0008C887 E1FC                       	smpsAlterNote       $FC
0008C889 01                         	dc.b	$01
0008C88A E1FF                       	smpsAlterNote       $FF
0008C88C ECF5                       	smpsPSGAlterVol     $F5
0008C88E 9B06                       	dc.b	nD2, $06
0008C890 EC04                       	smpsPSGAlterVol     $04
0008C892 E701                       	dc.b	smpsNoAttack, $01
0008C894 EC07                       	smpsPSGAlterVol     $07
0008C896 8003                       	dc.b	nRst, $03
0008C898 ECF5                       	smpsPSGAlterVol     $F5
0008C89A 9B06                       	dc.b	nD2, $06
0008C89C EC04                       	smpsPSGAlterVol     $04
0008C89E E701                       	dc.b	smpsNoAttack, $01
0008C8A0 EC07                       	smpsPSGAlterVol     $07
0008C8A2 8006                       	dc.b	nRst, $06
0008C8A4 E102                       	smpsAlterNote       $02
0008C8A6 01                         	dc.b	$01
0008C8A7 E106                       	smpsAlterNote       $06
0008C8A9 01                         	dc.b	$01
0008C8AA E105                       	smpsAlterNote       $05
0008C8AC 01                         	dc.b	$01
0008C8AD E1FF                       	smpsAlterNote       $FF
0008C8AF 01                         	dc.b	$01
0008C8B0 ECF5                       	smpsPSGAlterVol     $F5
0008C8B2 9B07                       	dc.b	nD2, $07
0008C8B4 EC0B                       	smpsPSGAlterVol     $0B
0008C8B6 8004                       	dc.b	nRst, $04
0008C8B8 ECF5                       	smpsPSGAlterVol     $F5
0008C8BA 9B06                       	dc.b	nD2, $06
0008C8BC EC0B                       	smpsPSGAlterVol     $0B
0008C8BE 8007                       	dc.b	nRst, $07
0008C8C0 E105                       	smpsAlterNote       $05
0008C8C2 0101                       	dc.b	$01, $01
0008C8C4 E102                       	smpsAlterNote       $02
0008C8C6 01                         	dc.b	$01
0008C8C7 E1FC                       	smpsAlterNote       $FC
0008C8C9 01                         	dc.b	$01
0008C8CA E1FF                       	smpsAlterNote       $FF
0008C8CC ECF5                       	smpsPSGAlterVol     $F5
0008C8CE 9B06                       	dc.b	nD2, $06
0008C8D0 EC04                       	smpsPSGAlterVol     $04
0008C8D2 E701                       	dc.b	smpsNoAttack, $01
0008C8D4 EC07                       	smpsPSGAlterVol     $07
0008C8D6 8003                       	dc.b	nRst, $03
0008C8D8 ECF5                       	smpsPSGAlterVol     $F5
0008C8DA 9B06                       	dc.b	nD2, $06
0008C8DC EC04                       	smpsPSGAlterVol     $04
0008C8DE E701                       	dc.b	smpsNoAttack, $01
0008C8E0 EC07                       	smpsPSGAlterVol     $07
0008C8E2 8006                       	dc.b	nRst, $06
0008C8E4 E102                       	smpsAlterNote       $02
0008C8E6 01                         	dc.b	$01
0008C8E7 E106                       	smpsAlterNote       $06
0008C8E9 01                         	dc.b	$01
0008C8EA E102                       	smpsAlterNote       $02
0008C8EC 01                         	dc.b	$01
0008C8ED E1FF                       	smpsAlterNote       $FF
0008C8EF 01                         	dc.b	$01
0008C8F0 ECF5                       	smpsPSGAlterVol     $F5
0008C8F2 9B06                       	dc.b	nD2, $06
0008C8F4 EC04                       	smpsPSGAlterVol     $04
0008C8F6 E701                       	dc.b	smpsNoAttack, $01
0008C8F8 EC07                       	smpsPSGAlterVol     $07
0008C8FA 8003                       	dc.b	nRst, $03
0008C8FC ECF5                       	smpsPSGAlterVol     $F5
0008C8FE 9B07                       	dc.b	nD2, $07
0008C900 E1FE                       	smpsAlterNote       $FE
0008C902 9706                       	dc.b	nBb1, $06
0008C904 EC04                       	smpsPSGAlterVol     $04
0008C906 E701                       	dc.b	smpsNoAttack, $01
0008C908 ECFC                       	smpsPSGAlterVol     $FC
0008C90A 9703                       	dc.b	nBb1, $03
0008C90C EC04                       	smpsPSGAlterVol     $04
0008C90E E701                       	dc.b	smpsNoAttack, $01
0008C910 ECFC                       	smpsPSGAlterVol     $FC
0008C912 9702                       	dc.b	nBb1, $02
0008C914 EC04                       	smpsPSGAlterVol     $04
0008C916 E701                       	dc.b	smpsNoAttack, $01
0008C918 ECFC                       	smpsPSGAlterVol     $FC
0008C91A 9606                       	dc.b	nA1, $06
0008C91C EC04                       	smpsPSGAlterVol     $04
0008C91E E701                       	dc.b	smpsNoAttack, $01
0008C920 EC07                       	smpsPSGAlterVol     $07
0008C922 8006                       	dc.b	nRst, $06
0008C924 E101                       	smpsAlterNote       $01
0008C926 01                         	dc.b	$01
0008C927 E107                       	smpsAlterNote       $07
0008C929 01                         	dc.b	$01
0008C92A E101                       	smpsAlterNote       $01
0008C92C 01                         	dc.b	$01
0008C92D E1F8                       	smpsAlterNote       $F8
0008C92F 01                         	dc.b	$01
0008C930 E1F7                       	smpsAlterNote       $F7
0008C932 01                         	dc.b	$01
0008C933 E1FC                       	smpsAlterNote       $FC
0008C935 01                         	dc.b	$01
0008C936 E106                       	smpsAlterNote       $06
0008C938 01                         	dc.b	$01
0008C939 E107                       	smpsAlterNote       $07
0008C93B 01                         	dc.b	$01
0008C93C E101                       	smpsAlterNote       $01
0008C93E 01                         	dc.b	$01
0008C93F E1F8                       	smpsAlterNote       $F8
0008C941 0101                       	dc.b	$01, $01
0008C943 E1FC                       	smpsAlterNote       $FC
0008C945 ECF5                       	smpsPSGAlterVol     $F5
0008C947 8F06                       	dc.b	nD1, $06
0008C949 EC04                       	smpsPSGAlterVol     $04
0008C94B E701                       	dc.b	smpsNoAttack, $01
0008C94D EC07                       	smpsPSGAlterVol     $07
0008C94F 8003                       	dc.b	nRst, $03
0008C951 ECF5                       	smpsPSGAlterVol     $F5
0008C953 8F06                       	dc.b	nD1, $06
0008C955 EC04                       	smpsPSGAlterVol     $04
0008C957 E701                       	dc.b	smpsNoAttack, $01
0008C959 EC07                       	smpsPSGAlterVol     $07
0008C95B 8006                       	dc.b	nRst, $06
0008C95D E1FF                       	smpsAlterNote       $FF
0008C95F 01                         	dc.b	$01
0008C960 E102                       	smpsAlterNote       $02
0008C962 01                         	dc.b	$01
0008C963 E101                       	smpsAlterNote       $01
0008C965 01                         	dc.b	$01
0008C966 E1FC                       	smpsAlterNote       $FC
0008C968 01                         	dc.b	$01
0008C969 ECF5                       	smpsPSGAlterVol     $F5
0008C96B 9007                       	dc.b	nEb1, $07
0008C96D EC0B                       	smpsPSGAlterVol     $0B
0008C96F 8004                       	dc.b	nRst, $04
0008C971 ECF5                       	smpsPSGAlterVol     $F5
0008C973 9006                       	dc.b	nEb1, $06
0008C975 EC0B                       	smpsPSGAlterVol     $0B
0008C977 8007                       	dc.b	nRst, $07
0008C979 E103                       	smpsAlterNote       $03
0008C97B 0101                       	dc.b	$01, $01
0008C97D E1FC                       	smpsAlterNote       $FC
0008C97F 01                         	dc.b	$01
0008C980 E1F9                       	smpsAlterNote       $F9
0008C982 01                         	dc.b	$01
0008C983 E1FC                       	smpsAlterNote       $FC
0008C985 ECF5                       	smpsPSGAlterVol     $F5
0008C987 8F06                       	dc.b	nD1, $06
0008C989 EC04                       	smpsPSGAlterVol     $04
0008C98B E701                       	dc.b	smpsNoAttack, $01
0008C98D EC07                       	smpsPSGAlterVol     $07
0008C98F 8003                       	dc.b	nRst, $03
0008C991 ECF5                       	smpsPSGAlterVol     $F5
0008C993 8F06                       	dc.b	nD1, $06
0008C995 EC04                       	smpsPSGAlterVol     $04
0008C997 E701                       	dc.b	smpsNoAttack, $01
0008C999 EC07                       	smpsPSGAlterVol     $07
0008C99B 8006                       	dc.b	nRst, $06
0008C99D E1FF                       	smpsAlterNote       $FF
0008C99F 01                         	dc.b	$01
0008C9A0 E103                       	smpsAlterNote       $03
0008C9A2 01                         	dc.b	$01
0008C9A3 E1FF                       	smpsAlterNote       $FF
0008C9A5 01                         	dc.b	$01
0008C9A6 E1F9                       	smpsAlterNote       $F9
0008C9A8 01                         	dc.b	$01
0008C9A9 E1FC                       	smpsAlterNote       $FC
0008C9AB ECF5                       	smpsPSGAlterVol     $F5
0008C9AD 8F06                       	dc.b	nD1, $06
0008C9AF EC04                       	smpsPSGAlterVol     $04
0008C9B1 E701                       	dc.b	smpsNoAttack, $01
0008C9B3 EC07                       	smpsPSGAlterVol     $07
0008C9B5 8003                       	dc.b	nRst, $03
0008C9B7 ECF5                       	smpsPSGAlterVol     $F5
0008C9B9 8F07                       	dc.b	nD1, $07
0008C9BB EC0B                       	smpsPSGAlterVol     $0B
0008C9BD 8006                       	dc.b	nRst, $06
0008C9BF E1FF                       	smpsAlterNote       $FF
0008C9C1 01                         	dc.b	$01
0008C9C2 E102                       	smpsAlterNote       $02
0008C9C4 0101                       	dc.b	$01, $01
0008C9C6 E1FC                       	smpsAlterNote       $FC
0008C9C8 01                         	dc.b	$01
0008C9C9 ECF5                       	smpsPSGAlterVol     $F5
0008C9CB 8F07                       	dc.b	nD1, $07
0008C9CD EC0B                       	smpsPSGAlterVol     $0B
0008C9CF 8004                       	dc.b	nRst, $04
0008C9D1 ECF5                       	smpsPSGAlterVol     $F5
0008C9D3 8F06                       	dc.b	nD1, $06
0008C9D5 EC04                       	smpsPSGAlterVol     $04
0008C9D7 E701                       	dc.b	smpsNoAttack, $01
0008C9D9 EC07                       	smpsPSGAlterVol     $07
0008C9DB 8006                       	dc.b	nRst, $06
0008C9DD E101                       	smpsAlterNote       $01
0008C9DF 01                         	dc.b	$01
0008C9E0 E102                       	smpsAlterNote       $02
0008C9E2 01                         	dc.b	$01
0008C9E3 E1FF                       	smpsAlterNote       $FF
0008C9E5 01                         	dc.b	$01
0008C9E6 E1F9                       	smpsAlterNote       $F9
0008C9E8 01                         	dc.b	$01
0008C9E9 E1FC                       	smpsAlterNote       $FC
0008C9EB ECF5                       	smpsPSGAlterVol     $F5
0008C9ED 9006                       	dc.b	nEb1, $06
0008C9EF EC04                       	smpsPSGAlterVol     $04
0008C9F1 E701                       	dc.b	smpsNoAttack, $01
0008C9F3 EC07                       	smpsPSGAlterVol     $07
0008C9F5 8003                       	dc.b	nRst, $03
0008C9F7 ECF5                       	smpsPSGAlterVol     $F5
0008C9F9 9006                       	dc.b	nEb1, $06
0008C9FB EC04                       	smpsPSGAlterVol     $04
0008C9FD E701                       	dc.b	smpsNoAttack, $01
0008C9FF EC07                       	smpsPSGAlterVol     $07
0008CA01 8006                       	dc.b	nRst, $06
0008CA03 E100                       	smpsAlterNote       $00
0008CA05 01                         	dc.b	$01
0008CA06 E102                       	smpsAlterNote       $02
0008CA08 01                         	dc.b	$01
0008CA09 E100                       	smpsAlterNote       $00
0008CA0B 01                         	dc.b	$01
0008CA0C E1FF                       	smpsAlterNote       $FF
0008CA0E 01                         	dc.b	$01
0008CA0F ECF5                       	smpsPSGAlterVol     $F5
0008CA11 9B06                       	dc.b	nD2, $06
0008CA13 EC04                       	smpsPSGAlterVol     $04
0008CA15 E701                       	dc.b	smpsNoAttack, $01
0008CA17 EC07                       	smpsPSGAlterVol     $07
0008CA19 8003                       	dc.b	nRst, $03
0008CA1B ECF5                       	smpsPSGAlterVol     $F5
0008CA1D 9B07                       	dc.b	nD2, $07
0008CA1F EC0B                       	smpsPSGAlterVol     $0B
0008CA21 8007                       	dc.b	nRst, $07
0008CA23 E105                       	smpsAlterNote       $05
0008CA25 0101                       	dc.b	$01, $01
0008CA27 E1FF                       	smpsAlterNote       $FF
0008CA29 01                         	dc.b	$01
0008CA2A E1FC                       	smpsAlterNote       $FC
0008CA2C 01                         	dc.b	$01
0008CA2D E1FF                       	smpsAlterNote       $FF
0008CA2F ECF5                       	smpsPSGAlterVol     $F5
0008CA31 9B06                       	dc.b	nD2, $06
0008CA33 EC0B                       	smpsPSGAlterVol     $0B
0008CA35 8004                       	dc.b	nRst, $04
0008CA37 ECF5                       	smpsPSGAlterVol     $F5
0008CA39 9B06                       	dc.b	nD2, $06
0008CA3B EC04                       	smpsPSGAlterVol     $04
0008CA3D E701                       	dc.b	smpsNoAttack, $01
0008CA3F EC07                       	smpsPSGAlterVol     $07
0008CA41 8006                       	dc.b	nRst, $06
0008CA43 E102                       	smpsAlterNote       $02
0008CA45 01                         	dc.b	$01
0008CA46 E106                       	smpsAlterNote       $06
0008CA48 01                         	dc.b	$01
0008CA49 E102                       	smpsAlterNote       $02
0008CA4B 01                         	dc.b	$01
0008CA4C E1FC                       	smpsAlterNote       $FC
0008CA4E 01                         	dc.b	$01
0008CA4F E1FF                       	smpsAlterNote       $FF
0008CA51 ECF5                       	smpsPSGAlterVol     $F5
0008CA53 9B06                       	dc.b	nD2, $06
0008CA55 EC04                       	smpsPSGAlterVol     $04
0008CA57 E701                       	dc.b	smpsNoAttack, $01
0008CA59 EC07                       	smpsPSGAlterVol     $07
0008CA5B 8003                       	dc.b	nRst, $03
0008CA5D ECF5                       	smpsPSGAlterVol     $F5
0008CA5F 9B07                       	dc.b	nD2, $07
0008CA61 EC0B                       	smpsPSGAlterVol     $0B
0008CA63 8006                       	dc.b	nRst, $06
0008CA65 E102                       	smpsAlterNote       $02
0008CA67 01                         	dc.b	$01
0008CA68 E105                       	smpsAlterNote       $05
0008CA6A 0101                       	dc.b	$01, $01
0008CA6C E1FF                       	smpsAlterNote       $FF
0008CA6E 01                         	dc.b	$01
0008CA6F ECF5                       	smpsPSGAlterVol     $F5
0008CA71 9B07                       	dc.b	nD2, $07
0008CA73 EC0B                       	smpsPSGAlterVol     $0B
0008CA75 8004                       	dc.b	nRst, $04
0008CA77 ECF5                       	smpsPSGAlterVol     $F5
0008CA79 9B06                       	dc.b	nD2, $06
0008CA7B EC0B                       	smpsPSGAlterVol     $0B
0008CA7D 8007                       	dc.b	nRst, $07
0008CA7F E105                       	smpsAlterNote       $05
0008CA81 0101                       	dc.b	$01, $01
0008CA83 E102                       	smpsAlterNote       $02
0008CA85 01                         	dc.b	$01
0008CA86 E1FC                       	smpsAlterNote       $FC
0008CA88 01                         	dc.b	$01
0008CA89 E1FF                       	smpsAlterNote       $FF
0008CA8B ECF5                       	smpsPSGAlterVol     $F5
0008CA8D 9B06                       	dc.b	nD2, $06
0008CA8F EC04                       	smpsPSGAlterVol     $04
0008CA91 E701                       	dc.b	smpsNoAttack, $01
0008CA93 EC07                       	smpsPSGAlterVol     $07
0008CA95 8003                       	dc.b	nRst, $03
0008CA97 ECF5                       	smpsPSGAlterVol     $F5
0008CA99 9B06                       	dc.b	nD2, $06
0008CA9B EC04                       	smpsPSGAlterVol     $04
0008CA9D E701                       	dc.b	smpsNoAttack, $01
0008CA9F EC07                       	smpsPSGAlterVol     $07
0008CAA1 8006                       	dc.b	nRst, $06
0008CAA3 E102                       	smpsAlterNote       $02
0008CAA5 01                         	dc.b	$01
0008CAA6 E106                       	smpsAlterNote       $06
0008CAA8 01                         	dc.b	$01
0008CAA9 E102                       	smpsAlterNote       $02
0008CAAB 01                         	dc.b	$01
0008CAAC E1FF                       	smpsAlterNote       $FF
0008CAAE 01                         	dc.b	$01
0008CAAF ECF5                       	smpsPSGAlterVol     $F5
0008CAB1 9B06                       	dc.b	nD2, $06
0008CAB3 EC04                       	smpsPSGAlterVol     $04
0008CAB5 E701                       	dc.b	smpsNoAttack, $01
0008CAB7 EC07                       	smpsPSGAlterVol     $07
0008CAB9 8003                       	dc.b	nRst, $03
0008CABB ECF5                       	smpsPSGAlterVol     $F5
0008CABD 9B07                       	dc.b	nD2, $07
0008CABF EC0B                       	smpsPSGAlterVol     $0B
0008CAC1 8007                       	dc.b	nRst, $07
0008CAC3 E105                       	smpsAlterNote       $05
0008CAC5 0101                       	dc.b	$01, $01
0008CAC7 E1FF                       	smpsAlterNote       $FF
0008CAC9 01                         	dc.b	$01
0008CACA E1FC                       	smpsAlterNote       $FC
0008CACC 01                         	dc.b	$01
0008CACD E1FF                       	smpsAlterNote       $FF
0008CACF ECF5                       	smpsPSGAlterVol     $F5
0008CAD1 9B06                       	dc.b	nD2, $06
0008CAD3 EC0B                       	smpsPSGAlterVol     $0B
0008CAD5 8004                       	dc.b	nRst, $04
0008CAD7 ECF5                       	smpsPSGAlterVol     $F5
0008CAD9 9B06                       	dc.b	nD2, $06
0008CADB EC04                       	smpsPSGAlterVol     $04
0008CADD E701                       	dc.b	smpsNoAttack, $01
0008CADF EC07                       	smpsPSGAlterVol     $07
0008CAE1 8006                       	dc.b	nRst, $06
0008CAE3 E102                       	smpsAlterNote       $02
0008CAE5 01                         	dc.b	$01
0008CAE6 E106                       	smpsAlterNote       $06
0008CAE8 01                         	dc.b	$01
0008CAE9 E102                       	smpsAlterNote       $02
0008CAEB 01                         	dc.b	$01
0008CAEC E1FC                       	smpsAlterNote       $FC
0008CAEE 01                         	dc.b	$01
0008CAEF E1FF                       	smpsAlterNote       $FF
0008CAF1 ECF5                       	smpsPSGAlterVol     $F5
0008CAF3 9B06                       	dc.b	nD2, $06
0008CAF5 EC04                       	smpsPSGAlterVol     $04
0008CAF7 E701                       	dc.b	smpsNoAttack, $01
0008CAF9 EC07                       	smpsPSGAlterVol     $07
0008CAFB 8003                       	dc.b	nRst, $03
0008CAFD ECF5                       	smpsPSGAlterVol     $F5
0008CAFF 9B06                       	dc.b	nD2, $06
0008CB01 EC04                       	smpsPSGAlterVol     $04
0008CB03 E701                       	dc.b	smpsNoAttack, $01
0008CB05 EC07                       	smpsPSGAlterVol     $07
0008CB07 8006                       	dc.b	nRst, $06
0008CB09 E102                       	smpsAlterNote       $02
0008CB0B 01                         	dc.b	$01
0008CB0C E106                       	smpsAlterNote       $06
0008CB0E 01                         	dc.b	$01
0008CB0F E105                       	smpsAlterNote       $05
0008CB11 01                         	dc.b	$01
0008CB12 E1FF                       	smpsAlterNote       $FF
0008CB14 01                         	dc.b	$01
0008CB15 ECF5                       	smpsPSGAlterVol     $F5
0008CB17 9B07                       	dc.b	nD2, $07
0008CB19 EC0B                       	smpsPSGAlterVol     $0B
0008CB1B 8004                       	dc.b	nRst, $04
0008CB1D ECF5                       	smpsPSGAlterVol     $F5
0008CB1F 9B06                       	dc.b	nD2, $06
0008CB21 EC0B                       	smpsPSGAlterVol     $0B
0008CB23 8007                       	dc.b	nRst, $07
0008CB25 E105                       	smpsAlterNote       $05
0008CB27 0101                       	dc.b	$01, $01
0008CB29 E101                       	smpsAlterNote       $01
0008CB2B 01                         	dc.b	$01
0008CB2C E1FB                       	smpsAlterNote       $FB
0008CB2E 01                         	dc.b	$01
0008CB2F E1FE                       	smpsAlterNote       $FE
0008CB31 ECF5                       	smpsPSGAlterVol     $F5
0008CB33 9A06                       	dc.b	nCs2, $06
0008CB35 EC04                       	smpsPSGAlterVol     $04
0008CB37 E701                       	dc.b	smpsNoAttack, $01
0008CB39 EC07                       	smpsPSGAlterVol     $07
0008CB3B 8003                       	dc.b	nRst, $03
0008CB3D ECF5                       	smpsPSGAlterVol     $F5
0008CB3F 9A06                       	dc.b	nCs2, $06
0008CB41 EC04                       	smpsPSGAlterVol     $04
0008CB43 E701                       	dc.b	smpsNoAttack, $01
0008CB45 EC07                       	smpsPSGAlterVol     $07
0008CB47 8003                       	dc.b	nRst, $03
0008CB49 E1FC                       	smpsAlterNote       $FC
0008CB4B ECF5                       	smpsPSGAlterVol     $F5
0008CB4D 8F07                       	dc.b	nD1, $07
0008CB4F EC0B                       	smpsPSGAlterVol     $0B
0008CB51 8006                       	dc.b	nRst, $06
0008CB53 E1FF                       	smpsAlterNote       $FF
0008CB55 01                         	dc.b	$01
0008CB56 E103                       	smpsAlterNote       $03
0008CB58 01                         	dc.b	$01
0008CB59 E102                       	smpsAlterNote       $02
0008CB5B 01                         	dc.b	$01
0008CB5C E1FC                       	smpsAlterNote       $FC
0008CB5E 01                         	dc.b	$01
0008CB5F E1F8                       	smpsAlterNote       $F8
0008CB61 01                         	dc.b	$01
0008CB62 E1FC                       	smpsAlterNote       $FC
0008CB64 01                         	dc.b	$01
0008CB65 E1FF                       	smpsAlterNote       $FF
0008CB67 01                         	dc.b	$01
0008CB68 E103                       	smpsAlterNote       $03
0008CB6A 01                         	dc.b	$01
0008CB6B E1FC                       	smpsAlterNote       $FC
0008CB6D ECF5                       	smpsPSGAlterVol     $F5
0008CB6F 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0008CB73 EC04                       	smpsPSGAlterVol     $04
0008CB75 E701                       	dc.b	smpsNoAttack, $01
0008CB77 EC07                       	smpsPSGAlterVol     $07
0008CB79 8009                       	dc.b	nRst, $09
0008CB7B E1FF                       	smpsAlterNote       $FF
0008CB7D 01                         	dc.b	$01
0008CB7E E103                       	smpsAlterNote       $03
0008CB80 01                         	dc.b	$01
0008CB81 E102                       	smpsAlterNote       $02
0008CB83 01                         	dc.b	$01
0008CB84 E1FC                       	smpsAlterNote       $FC
0008CB86 01                         	dc.b	$01
0008CB87 E1F8                       	smpsAlterNote       $F8
0008CB89 01                         	dc.b	$01
0008CB8A E1FC                       	smpsAlterNote       $FC
0008CB8C 01                         	dc.b	$01
0008CB8D E1FF                       	smpsAlterNote       $FF
0008CB8F 01                         	dc.b	$01
0008CB90 E103                       	smpsAlterNote       $03
0008CB92 01                         	dc.b	$01
0008CB93 E1FF                       	smpsAlterNote       $FF
0008CB95 01                         	dc.b	$01
0008CB96 E1F9                       	smpsAlterNote       $F9
0008CB98 01                         	dc.b	$01
0008CB99 E1F8                       	smpsAlterNote       $F8
0008CB9B 01                         	dc.b	$01
0008CB9C E1FC                       	smpsAlterNote       $FC
0008CB9E 01                         	dc.b	$01
0008CB9F E102                       	smpsAlterNote       $02
0008CBA1 0101                       	dc.b	$01, $01
0008CBA3 E1FF                       	smpsAlterNote       $FF
0008CBA5 01                         	dc.b	$01
0008CBA6 E1FC                       	smpsAlterNote       $FC
0008CBA8 ECF5                       	smpsPSGAlterVol     $F5
0008CBAA 8F02                       	dc.b	nD1, $02
0008CBAC EC04                       	smpsPSGAlterVol     $04
0008CBAE E701                       	dc.b	smpsNoAttack, $01
0008CBB0 ECFC                       	smpsPSGAlterVol     $FC
0008CBB2 E1FB                       	smpsAlterNote       $FB
0008CBB4 8D06                       	dc.b	nC1, $06
0008CBB6 EC04                       	smpsPSGAlterVol     $04
0008CBB8 E701                       	dc.b	smpsNoAttack, $01
0008CBBA EC07                       	smpsPSGAlterVol     $07
0008CBBC 8006                       	dc.b	nRst, $06
0008CBBE E1FE                       	smpsAlterNote       $FE
0008CBC0 01                         	dc.b	$01
0008CBC1 E102                       	smpsAlterNote       $02
0008CBC3 01                         	dc.b	$01
0008CBC4 E1FE                       	smpsAlterNote       $FE
0008CBC6 01                         	dc.b	$01
0008CBC7 E1FB                       	smpsAlterNote       $FB
0008CBC9 01                         	dc.b	$01
0008CBCA E1F7                       	smpsAlterNote       $F7
0008CBCC 01                         	dc.b	$01
0008CBCD E1FB                       	smpsAlterNote       $FB
0008CBCF 01                         	dc.b	$01
0008CBD0 E101                       	smpsAlterNote       $01
0008CBD2 01                         	dc.b	$01
0008CBD3 E102                       	smpsAlterNote       $02
0008CBD5 01                         	dc.b	$01
0008CBD6 E1FB                       	smpsAlterNote       $FB
0008CBD8 ECF5                       	smpsPSGAlterVol     $F5
0008CBDA 8D02                       	dc.b	nC1, $02
0008CBDC EC04                       	smpsPSGAlterVol     $04
0008CBDE E701                       	dc.b	smpsNoAttack, $01
0008CBE0 E1FC                       	smpsAlterNote       $FC
0008CBE2 ECFC                       	smpsPSGAlterVol     $FC
0008CBE4 8F0D                       	dc.b	nD1, $0D
0008CBE6 E1FF                       	smpsAlterNote       $FF
0008CBE8 E701                       	dc.b	smpsNoAttack, $01
0008CBEA E103                       	smpsAlterNote       $03
0008CBEC E701                       	dc.b	smpsNoAttack, $01
0008CBEE E1FF                       	smpsAlterNote       $FF
0008CBF0 E701                       	dc.b	smpsNoAttack, $01
0008CBF2 E1FC                       	smpsAlterNote       $FC
0008CBF4 E701                       	dc.b	smpsNoAttack, $01
0008CBF6 E1F8                       	smpsAlterNote       $F8
0008CBF8 E701                       	dc.b	smpsNoAttack, $01
0008CBFA E1FC                       	smpsAlterNote       $FC
0008CBFC E701                       	dc.b	smpsNoAttack, $01
0008CBFE E102                       	smpsAlterNote       $02
0008CC00 E701                       	dc.b	smpsNoAttack, $01
0008CC02 E103                       	smpsAlterNote       $03
0008CC04 E701                       	dc.b	smpsNoAttack, $01
0008CC06 E1FF                       	smpsAlterNote       $FF
0008CC08 E701                       	dc.b	smpsNoAttack, $01
0008CC0A E1F9                       	smpsAlterNote       $F9
0008CC0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC10 E1FC                       	smpsAlterNote       $FC
0008CC12 E701                       	dc.b	smpsNoAttack, $01
0008CC14 E102                       	smpsAlterNote       $02
0008CC16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC1A E1FC                       	smpsAlterNote       $FC
0008CC1C E701                       	dc.b	smpsNoAttack, $01
0008CC1E E1F9                       	smpsAlterNote       $F9
0008CC20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC24 E1FF                       	smpsAlterNote       $FF
0008CC26 EC04                       	smpsPSGAlterVol     $04
0008CC28 E701                       	dc.b	smpsNoAttack, $01
0008CC2A EC07                       	smpsPSGAlterVol     $07
0008CC2C E103                       	smpsAlterNote       $03
0008CC2E 8001                       	dc.b	nRst, $01
0008CC30 E102                       	smpsAlterNote       $02
0008CC32 01                         	dc.b	$01
0008CC33 E1FB                       	smpsAlterNote       $FB
0008CC35 01                         	dc.b	$01
0008CC36 E1F7                       	smpsAlterNote       $F7
0008CC38 01                         	dc.b	$01
0008CC39 E1FB                       	smpsAlterNote       $FB
0008CC3B 01                         	dc.b	$01
0008CC3C E102                       	smpsAlterNote       $02
0008CC3E 01                         	dc.b	$01
0008CC3F E103                       	smpsAlterNote       $03
0008CC41 01                         	dc.b	$01
0008CC42 E1FB                       	smpsAlterNote       $FB
0008CC44 ECF5                       	smpsPSGAlterVol     $F5
0008CC46 8E06                       	dc.b	nCs1, $06
0008CC48 EC04                       	smpsPSGAlterVol     $04
0008CC4A E701                       	dc.b	smpsNoAttack, $01
0008CC4C EC07                       	smpsPSGAlterVol     $07
0008CC4E 8003                       	dc.b	nRst, $03
0008CC50 ECF5                       	smpsPSGAlterVol     $F5
0008CC52 8E06                       	dc.b	nCs1, $06
0008CC54 EC04                       	smpsPSGAlterVol     $04
0008CC56 E701                       	dc.b	smpsNoAttack, $01
0008CC58 EC07                       	smpsPSGAlterVol     $07
0008CC5A 8006                       	dc.b	nRst, $06
0008CC5C E1FE                       	smpsAlterNote       $FE
0008CC5E 01                         	dc.b	$01
0008CC5F E102                       	smpsAlterNote       $02
0008CC61 01                         	dc.b	$01
0008CC62 E1FE                       	smpsAlterNote       $FE
0008CC64 01                         	dc.b	$01
0008CC65 E1F9                       	smpsAlterNote       $F9
0008CC67 01                         	dc.b	$01
0008CC68 E1FC                       	smpsAlterNote       $FC
0008CC6A ECF5                       	smpsPSGAlterVol     $F5
0008CC6C 8F06                       	dc.b	nD1, $06
0008CC6E EC04                       	smpsPSGAlterVol     $04
0008CC70 E701                       	dc.b	smpsNoAttack, $01
0008CC72 EC07                       	smpsPSGAlterVol     $07
0008CC74 8003                       	dc.b	nRst, $03
0008CC76 ECF5                       	smpsPSGAlterVol     $F5
0008CC78 8F07                       	dc.b	nD1, $07
0008CC7A EC0B                       	smpsPSGAlterVol     $0B
0008CC7C 8006                       	dc.b	nRst, $06
0008CC7E E1FF                       	smpsAlterNote       $FF
0008CC80 01                         	dc.b	$01
0008CC81 E102                       	smpsAlterNote       $02
0008CC83 0101                       	dc.b	$01, $01
0008CC85 E1FB                       	smpsAlterNote       $FB
0008CC87 01                         	dc.b	$01
0008CC88 ECF5                       	smpsPSGAlterVol     $F5
0008CC8A 8E07                       	dc.b	nCs1, $07
0008CC8C EC0B                       	smpsPSGAlterVol     $0B
0008CC8E 8004                       	dc.b	nRst, $04
0008CC90 ECF5                       	smpsPSGAlterVol     $F5
0008CC92 8E06                       	dc.b	nCs1, $06
0008CC94 EC04                       	smpsPSGAlterVol     $04
0008CC96 E701                       	dc.b	smpsNoAttack, $01
0008CC98 EC07                       	smpsPSGAlterVol     $07
0008CC9A 8006                       	dc.b	nRst, $06
0008CC9C E101                       	smpsAlterNote       $01
0008CC9E 01                         	dc.b	$01
0008CC9F E102                       	smpsAlterNote       $02
0008CCA1 01                         	dc.b	$01
0008CCA2 E1FE                       	smpsAlterNote       $FE
0008CCA4 01                         	dc.b	$01
0008CCA5 E1F8                       	smpsAlterNote       $F8
0008CCA7 01                         	dc.b	$01
0008CCA8 E1FB                       	smpsAlterNote       $FB
0008CCAA ECF5                       	smpsPSGAlterVol     $F5
0008CCAC 8E06                       	dc.b	nCs1, $06
0008CCAE EC04                       	smpsPSGAlterVol     $04
0008CCB0 E701                       	dc.b	smpsNoAttack, $01
0008CCB2 EC07                       	smpsPSGAlterVol     $07
0008CCB4 8003                       	dc.b	nRst, $03
0008CCB6 ECF5                       	smpsPSGAlterVol     $F5
0008CCB8 8E06                       	dc.b	nCs1, $06
0008CCBA EC04                       	smpsPSGAlterVol     $04
0008CCBC E701                       	dc.b	smpsNoAttack, $01
0008CCBE EC07                       	smpsPSGAlterVol     $07
0008CCC0 8004                       	dc.b	nRst, $04
0008CCC2 E1FC                       	smpsAlterNote       $FC
0008CCC4 ECF5                       	smpsPSGAlterVol     $F5
0008CCC6 8F06                       	dc.b	nD1, $06
0008CCC8 EC0B                       	smpsPSGAlterVol     $0B
0008CCCA 8006                       	dc.b	nRst, $06
0008CCCC E1FF                       	smpsAlterNote       $FF
0008CCCE 01                         	dc.b	$01
0008CCCF E102                       	smpsAlterNote       $02
0008CCD1 0101                       	dc.b	$01, $01
0008CCD3 E1FC                       	smpsAlterNote       $FC
0008CCD5 01                         	dc.b	$01
0008CCD6 E1F8                       	smpsAlterNote       $F8
0008CCD8 01                         	dc.b	$01
0008CCD9 E1F9                       	smpsAlterNote       $F9
0008CCDB 01                         	dc.b	$01
0008CCDC E1FF                       	smpsAlterNote       $FF
0008CCDE 01                         	dc.b	$01
0008CCDF E103                       	smpsAlterNote       $03
0008CCE1 01                         	dc.b	$01
0008CCE2 E1FC                       	smpsAlterNote       $FC
0008CCE4 ECF5                       	smpsPSGAlterVol     $F5
0008CCE6 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0008CCEA EC04                       	smpsPSGAlterVol     $04
0008CCEC E701                       	dc.b	smpsNoAttack, $01
0008CCEE EC07                       	smpsPSGAlterVol     $07
0008CCF0 8009                       	dc.b	nRst, $09
0008CCF2 E1FF                       	smpsAlterNote       $FF
0008CCF4 01                         	dc.b	$01
0008CCF5 E102                       	smpsAlterNote       $02
0008CCF7 0101                       	dc.b	$01, $01
0008CCF9 E1FC                       	smpsAlterNote       $FC
0008CCFB 01                         	dc.b	$01
0008CCFC E1F8                       	smpsAlterNote       $F8
0008CCFE 01                         	dc.b	$01
0008CCFF E1F9                       	smpsAlterNote       $F9
0008CD01 01                         	dc.b	$01
0008CD02 E1FF                       	smpsAlterNote       $FF
0008CD04 01                         	dc.b	$01
0008CD05 E103                       	smpsAlterNote       $03
0008CD07 01                         	dc.b	$01
0008CD08 E1FF                       	smpsAlterNote       $FF
0008CD0A 01                         	dc.b	$01
0008CD0B E1FC                       	smpsAlterNote       $FC
0008CD0D 01                         	dc.b	$01
0008CD0E E1F8                       	smpsAlterNote       $F8
0008CD10 01                         	dc.b	$01
0008CD11 E1FC                       	smpsAlterNote       $FC
0008CD13 01                         	dc.b	$01
0008CD14 E102                       	smpsAlterNote       $02
0008CD16 01                         	dc.b	$01
0008CD17 E103                       	smpsAlterNote       $03
0008CD19 01                         	dc.b	$01
0008CD1A E1FF                       	smpsAlterNote       $FF
0008CD1C 01                         	dc.b	$01
0008CD1D E1FC                       	smpsAlterNote       $FC
0008CD1F ECF5                       	smpsPSGAlterVol     $F5
0008CD21 8F03                       	dc.b	nD1, $03
0008CD23 E1FB                       	smpsAlterNote       $FB
0008CD25 8D06                       	dc.b	nC1, $06
0008CD27 EC04                       	smpsPSGAlterVol     $04
0008CD29 E701                       	dc.b	smpsNoAttack, $01
0008CD2B EC07                       	smpsPSGAlterVol     $07
0008CD2D 8006                       	dc.b	nRst, $06
0008CD2F E1FE                       	smpsAlterNote       $FE
0008CD31 01                         	dc.b	$01
0008CD32 E102                       	smpsAlterNote       $02
0008CD34 01                         	dc.b	$01
0008CD35 E101                       	smpsAlterNote       $01
0008CD37 01                         	dc.b	$01
0008CD38 E1FB                       	smpsAlterNote       $FB
0008CD3A 01                         	dc.b	$01
0008CD3B E1F7                       	smpsAlterNote       $F7
0008CD3D 01                         	dc.b	$01
0008CD3E E1FB                       	smpsAlterNote       $FB
0008CD40 01                         	dc.b	$01
0008CD41 E1FE                       	smpsAlterNote       $FE
0008CD43 01                         	dc.b	$01
0008CD44 E102                       	smpsAlterNote       $02
0008CD46 01                         	dc.b	$01
0008CD47 E1FB                       	smpsAlterNote       $FB
0008CD49 ECF5                       	smpsPSGAlterVol     $F5
0008CD4B 8D03                       	dc.b	nC1, $03
0008CD4D E1FC                       	smpsAlterNote       $FC
0008CD4F 8F0D                       	dc.b	nD1, $0D
0008CD51 E1FF                       	smpsAlterNote       $FF
0008CD53 E701                       	dc.b	smpsNoAttack, $01
0008CD55 E103                       	smpsAlterNote       $03
0008CD57 E701                       	dc.b	smpsNoAttack, $01
0008CD59 E1FF                       	smpsAlterNote       $FF
0008CD5B E701                       	dc.b	smpsNoAttack, $01
0008CD5D E1FC                       	smpsAlterNote       $FC
0008CD5F E701                       	dc.b	smpsNoAttack, $01
0008CD61 E1F8                       	smpsAlterNote       $F8
0008CD63 E701                       	dc.b	smpsNoAttack, $01
0008CD65 E1FC                       	smpsAlterNote       $FC
0008CD67 E701                       	dc.b	smpsNoAttack, $01
0008CD69 E102                       	smpsAlterNote       $02
0008CD6B E701                       	dc.b	smpsNoAttack, $01
0008CD6D E103                       	smpsAlterNote       $03
0008CD6F E701                       	dc.b	smpsNoAttack, $01
0008CD71 E1FF                       	smpsAlterNote       $FF
0008CD73 E701                       	dc.b	smpsNoAttack, $01
0008CD75 E1F9                       	smpsAlterNote       $F9
0008CD77 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD7B E1FC                       	smpsAlterNote       $FC
0008CD7D E701                       	dc.b	smpsNoAttack, $01
0008CD7F E102                       	smpsAlterNote       $02
0008CD81 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD85 E1FF                       	smpsAlterNote       $FF
0008CD87 E701                       	dc.b	smpsNoAttack, $01
0008CD89 E1F9                       	smpsAlterNote       $F9
0008CD8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD8F E1FF                       	smpsAlterNote       $FF
0008CD91 EC04                       	smpsPSGAlterVol     $04
0008CD93 E701                       	dc.b	smpsNoAttack, $01
0008CD95 EC07                       	smpsPSGAlterVol     $07
0008CD97 E103                       	smpsAlterNote       $03
0008CD99 8001                       	dc.b	nRst, $01
0008CD9B E102                       	smpsAlterNote       $02
0008CD9D 01                         	dc.b	$01
0008CD9E E1FB                       	smpsAlterNote       $FB
0008CDA0 01                         	dc.b	$01
0008CDA1 E1F7                       	smpsAlterNote       $F7
0008CDA3 01                         	dc.b	$01
0008CDA4 E1FB                       	smpsAlterNote       $FB
0008CDA6 01                         	dc.b	$01
0008CDA7 E1FF                       	smpsAlterNote       $FF
0008CDA9 01                         	dc.b	$01
0008CDAA E103                       	smpsAlterNote       $03
0008CDAC 01                         	dc.b	$01
0008CDAD E1FB                       	smpsAlterNote       $FB
0008CDAF ECF5                       	smpsPSGAlterVol     $F5
0008CDB1 8E06                       	dc.b	nCs1, $06
0008CDB3 EC04                       	smpsPSGAlterVol     $04
0008CDB5 E701                       	dc.b	smpsNoAttack, $01
0008CDB7 EC07                       	smpsPSGAlterVol     $07
0008CDB9 8003                       	dc.b	nRst, $03
0008CDBB ECF5                       	smpsPSGAlterVol     $F5
0008CDBD 8E06                       	dc.b	nCs1, $06
0008CDBF EC04                       	smpsPSGAlterVol     $04
0008CDC1 E701                       	dc.b	smpsNoAttack, $01
0008CDC3 EC07                       	smpsPSGAlterVol     $07
0008CDC5 8006                       	dc.b	nRst, $06
0008CDC7 E1FE                       	smpsAlterNote       $FE
0008CDC9 01                         	dc.b	$01
0008CDCA E102                       	smpsAlterNote       $02
0008CDCC 01                         	dc.b	$01
0008CDCD E1FE                       	smpsAlterNote       $FE
0008CDCF 01                         	dc.b	$01
0008CDD0 E1FC                       	smpsAlterNote       $FC
0008CDD2 01                         	dc.b	$01
0008CDD3 ECF5                       	smpsPSGAlterVol     $F5
0008CDD5 8F06                       	dc.b	nD1, $06
0008CDD7 EC04                       	smpsPSGAlterVol     $04
0008CDD9 E701                       	dc.b	smpsNoAttack, $01
0008CDDB EC07                       	smpsPSGAlterVol     $07
0008CDDD 8003                       	dc.b	nRst, $03
0008CDDF ECF5                       	smpsPSGAlterVol     $F5
0008CDE1 8F07                       	dc.b	nD1, $07
0008CDE3 EC0B                       	smpsPSGAlterVol     $0B
0008CDE5 8007                       	dc.b	nRst, $07
0008CDE7 E102                       	smpsAlterNote       $02
0008CDE9 0101                       	dc.b	$01, $01
0008CDEB E1FB                       	smpsAlterNote       $FB
0008CDED 01                         	dc.b	$01
0008CDEE E1F8                       	smpsAlterNote       $F8
0008CDF0 01                         	dc.b	$01
0008CDF1 E1FB                       	smpsAlterNote       $FB
0008CDF3 ECF5                       	smpsPSGAlterVol     $F5
0008CDF5 8E06                       	dc.b	nCs1, $06
0008CDF7 EC0B                       	smpsPSGAlterVol     $0B
0008CDF9 8004                       	dc.b	nRst, $04
0008CDFB ECF5                       	smpsPSGAlterVol     $F5
0008CDFD 8E06                       	dc.b	nCs1, $06
0008CDFF EC04                       	smpsPSGAlterVol     $04
0008CE01 E701                       	dc.b	smpsNoAttack, $01
0008CE03 EC07                       	smpsPSGAlterVol     $07
0008CE05 8006                       	dc.b	nRst, $06
0008CE07 E1FE                       	smpsAlterNote       $FE
0008CE09 01                         	dc.b	$01
0008CE0A E102                       	smpsAlterNote       $02
0008CE0C 01                         	dc.b	$01
0008CE0D E1FE                       	smpsAlterNote       $FE
0008CE0F 01                         	dc.b	$01
0008CE10 E1F9                       	smpsAlterNote       $F9
0008CE12 01                         	dc.b	$01
0008CE13 E1FC                       	smpsAlterNote       $FC
0008CE15 ECF5                       	smpsPSGAlterVol     $F5
0008CE17 8F06                       	dc.b	nD1, $06
0008CE19 EC04                       	smpsPSGAlterVol     $04
0008CE1B E701                       	dc.b	smpsNoAttack, $01
0008CE1D EC07                       	smpsPSGAlterVol     $07
0008CE1F 8003                       	dc.b	nRst, $03
0008CE21 ECF5                       	smpsPSGAlterVol     $F5
0008CE23 8F06                       	dc.b	nD1, $06
0008CE25 EC04                       	smpsPSGAlterVol     $04
0008CE27 E701                       	dc.b	smpsNoAttack, $01
0008CE29 EC07                       	smpsPSGAlterVol     $07
0008CE2B 8006                       	dc.b	nRst, $06
0008CE2D E1FF                       	smpsAlterNote       $FF
0008CE2F 01                         	dc.b	$01
0008CE30 E103                       	smpsAlterNote       $03
0008CE32 01                         	dc.b	$01
0008CE33 E102                       	smpsAlterNote       $02
0008CE35 01                         	dc.b	$01
0008CE36 E1FB                       	smpsAlterNote       $FB
0008CE38 01                         	dc.b	$01
0008CE39 ECF5                       	smpsPSGAlterVol     $F5
0008CE3B 8E07                       	dc.b	nCs1, $07
0008CE3D EC0B                       	smpsPSGAlterVol     $0B
0008CE3F 8004                       	dc.b	nRst, $04
0008CE41 ECF5                       	smpsPSGAlterVol     $F5
0008CE43 8E06                       	dc.b	nCs1, $06
0008CE45 EC0B                       	smpsPSGAlterVol     $0B
0008CE47 8007                       	dc.b	nRst, $07
0008CE49 E101                       	smpsAlterNote       $01
0008CE4B 0101                       	dc.b	$01, $01
0008CE4D E1FE                       	smpsAlterNote       $FE
0008CE4F 01                         	dc.b	$01
0008CE50 E1F9                       	smpsAlterNote       $F9
0008CE52 01                         	dc.b	$01
0008CE53 E1FC                       	smpsAlterNote       $FC
0008CE55 ECF5                       	smpsPSGAlterVol     $F5
0008CE57 8F06                       	dc.b	nD1, $06
0008CE59 EC04                       	smpsPSGAlterVol     $04
0008CE5B E701                       	dc.b	smpsNoAttack, $01
0008CE5D EC07                       	smpsPSGAlterVol     $07
0008CE5F 8003                       	dc.b	nRst, $03
0008CE61 ECF5                       	smpsPSGAlterVol     $F5
0008CE63 8F06                       	dc.b	nD1, $06
0008CE65 EC04                       	smpsPSGAlterVol     $04
0008CE67 E701                       	dc.b	smpsNoAttack, $01
0008CE69 EC07                       	smpsPSGAlterVol     $07
0008CE6B 8006                       	dc.b	nRst, $06
0008CE6D E1FF                       	smpsAlterNote       $FF
0008CE6F 01                         	dc.b	$01
0008CE70 E103                       	smpsAlterNote       $03
0008CE72 01                         	dc.b	$01
0008CE73 E1FF                       	smpsAlterNote       $FF
0008CE75 01                         	dc.b	$01
0008CE76 E1FB                       	smpsAlterNote       $FB
0008CE78 01                         	dc.b	$01
0008CE79 ECF5                       	smpsPSGAlterVol     $F5
0008CE7B 8E06                       	dc.b	nCs1, $06
0008CE7D EC04                       	smpsPSGAlterVol     $04
0008CE7F E701                       	dc.b	smpsNoAttack, $01
0008CE81 EC07                       	smpsPSGAlterVol     $07
0008CE83 8003                       	dc.b	nRst, $03
0008CE85 ECF5                       	smpsPSGAlterVol     $F5
0008CE87 8E07                       	dc.b	nCs1, $07
0008CE89 E1FF                       	smpsAlterNote       $FF
0008CE8B 9B06                       	dc.b	nD2, $06
0008CE8D EC04                       	smpsPSGAlterVol     $04
0008CE8F E701                       	dc.b	smpsNoAttack, $01
0008CE91 ECFC                       	smpsPSGAlterVol     $FC
0008CE93 9B03                       	dc.b	nD2, $03
0008CE95 EC04                       	smpsPSGAlterVol     $04
0008CE97 E701                       	dc.b	smpsNoAttack, $01
0008CE99 ECFC                       	smpsPSGAlterVol     $FC
0008CE9B 9B02                       	dc.b	nD2, $02
0008CE9D EC04                       	smpsPSGAlterVol     $04
0008CE9F E701                       	dc.b	smpsNoAttack, $01
0008CEA1 ECFC                       	smpsPSGAlterVol     $FC
0008CEA3 E1FE                       	smpsAlterNote       $FE
0008CEA5 9A03                       	dc.b	nCs2, $03
0008CEA7 EC0B                       	smpsPSGAlterVol     $0B
0008CEA9 800A                       	dc.b	nRst, $0A
0008CEAB E102                       	smpsAlterNote       $02
0008CEAD 01                         	dc.b	$01
0008CEAE E10A                       	smpsAlterNote       $0A
0008CEB0 01                         	dc.b	$01
0008CEB1 E102                       	smpsAlterNote       $02
0008CEB3 01                         	dc.b	$01
0008CEB4 E1F7                       	smpsAlterNote       $F7
0008CEB6 01                         	dc.b	$01
0008CEB7 E10A                       	smpsAlterNote       $0A
0008CEB9 01                         	dc.b	$01
0008CEBA E1FC                       	smpsAlterNote       $FC
0008CEBC 01                         	dc.b	$01
0008CEBD E108                       	smpsAlterNote       $08
0008CEBF 0101                       	dc.b	$01, $01
0008CEC1 E102                       	smpsAlterNote       $02
0008CEC3 01                         	dc.b	$01
0008CEC4 E1F7                       	smpsAlterNote       $F7
0008CEC6 0101                       	dc.b	$01, $01
0008CEC8 E1FC                       	smpsAlterNote       $FC
0008CECA ECF5                       	smpsPSGAlterVol     $F5
0008CECC 8F06                       	dc.b	nD1, $06
0008CECE EC04                       	smpsPSGAlterVol     $04
0008CED0 E701                       	dc.b	smpsNoAttack, $01
0008CED2 EC07                       	smpsPSGAlterVol     $07
0008CED4 8003                       	dc.b	nRst, $03
0008CED6 ECF5                       	smpsPSGAlterVol     $F5
0008CED8 8F06                       	dc.b	nD1, $06
0008CEDA EC04                       	smpsPSGAlterVol     $04
0008CEDC E701                       	dc.b	smpsNoAttack, $01
0008CEDE EC07                       	smpsPSGAlterVol     $07
0008CEE0 8006                       	dc.b	nRst, $06
0008CEE2 E1FF                       	smpsAlterNote       $FF
0008CEE4 01                         	dc.b	$01
0008CEE5 E102                       	smpsAlterNote       $02
0008CEE7 01                         	dc.b	$01
0008CEE8 E101                       	smpsAlterNote       $01
0008CEEA 01                         	dc.b	$01
0008CEEB E1FC                       	smpsAlterNote       $FC
0008CEED 01                         	dc.b	$01
0008CEEE ECF5                       	smpsPSGAlterVol     $F5
0008CEF0 9007                       	dc.b	nEb1, $07
0008CEF2 EC0B                       	smpsPSGAlterVol     $0B
0008CEF4 8004                       	dc.b	nRst, $04
0008CEF6 ECF5                       	smpsPSGAlterVol     $F5
0008CEF8 9006                       	dc.b	nEb1, $06
0008CEFA EC0B                       	smpsPSGAlterVol     $0B
0008CEFC 8007                       	dc.b	nRst, $07
0008CEFE E103                       	smpsAlterNote       $03
0008CF00 0101                       	dc.b	$01, $01
0008CF02 E1FF                       	smpsAlterNote       $FF
0008CF04 01                         	dc.b	$01
0008CF05 E1F9                       	smpsAlterNote       $F9
0008CF07 01                         	dc.b	$01
0008CF08 E1FC                       	smpsAlterNote       $FC
0008CF0A ECF5                       	smpsPSGAlterVol     $F5
0008CF0C 8F06                       	dc.b	nD1, $06
0008CF0E EC04                       	smpsPSGAlterVol     $04
0008CF10 E701                       	dc.b	smpsNoAttack, $01
0008CF12 EC07                       	smpsPSGAlterVol     $07
0008CF14 8003                       	dc.b	nRst, $03
0008CF16 ECF5                       	smpsPSGAlterVol     $F5
0008CF18 8F06                       	dc.b	nD1, $06
0008CF1A EC04                       	smpsPSGAlterVol     $04
0008CF1C E701                       	dc.b	smpsNoAttack, $01
0008CF1E EC07                       	smpsPSGAlterVol     $07
0008CF20 8006                       	dc.b	nRst, $06
0008CF22 E1FF                       	smpsAlterNote       $FF
0008CF24 01                         	dc.b	$01
0008CF25 E103                       	smpsAlterNote       $03
0008CF27 01                         	dc.b	$01
0008CF28 E1FF                       	smpsAlterNote       $FF
0008CF2A 01                         	dc.b	$01
0008CF2B E1F9                       	smpsAlterNote       $F9
0008CF2D 01                         	dc.b	$01
0008CF2E E1FC                       	smpsAlterNote       $FC
0008CF30 ECF5                       	smpsPSGAlterVol     $F5
0008CF32 8F06                       	dc.b	nD1, $06
0008CF34 EC04                       	smpsPSGAlterVol     $04
0008CF36 E701                       	dc.b	smpsNoAttack, $01
0008CF38 EC07                       	smpsPSGAlterVol     $07
0008CF3A 8003                       	dc.b	nRst, $03
0008CF3C ECF5                       	smpsPSGAlterVol     $F5
0008CF3E 8F07                       	dc.b	nD1, $07
0008CF40 EC0B                       	smpsPSGAlterVol     $0B
0008CF42 8006                       	dc.b	nRst, $06
0008CF44 E1FF                       	smpsAlterNote       $FF
0008CF46 01                         	dc.b	$01
0008CF47 E102                       	smpsAlterNote       $02
0008CF49 0101                       	dc.b	$01, $01
0008CF4B E1FC                       	smpsAlterNote       $FC
0008CF4D 01                         	dc.b	$01
0008CF4E ECF5                       	smpsPSGAlterVol     $F5
0008CF50 8F07                       	dc.b	nD1, $07
0008CF52 EC0B                       	smpsPSGAlterVol     $0B
0008CF54 8004                       	dc.b	nRst, $04
0008CF56 ECF5                       	smpsPSGAlterVol     $F5
0008CF58 8F06                       	dc.b	nD1, $06
0008CF5A EC04                       	smpsPSGAlterVol     $04
0008CF5C E701                       	dc.b	smpsNoAttack, $01
0008CF5E EC07                       	smpsPSGAlterVol     $07
0008CF60 8006                       	dc.b	nRst, $06
0008CF62 E101                       	smpsAlterNote       $01
0008CF64 01                         	dc.b	$01
0008CF65 E102                       	smpsAlterNote       $02
0008CF67 01                         	dc.b	$01
0008CF68 E1FF                       	smpsAlterNote       $FF
0008CF6A 01                         	dc.b	$01
0008CF6B E1F9                       	smpsAlterNote       $F9
0008CF6D 01                         	dc.b	$01
0008CF6E E1FC                       	smpsAlterNote       $FC
0008CF70 ECF5                       	smpsPSGAlterVol     $F5
0008CF72 9006                       	dc.b	nEb1, $06
0008CF74 EC04                       	smpsPSGAlterVol     $04
0008CF76 E701                       	dc.b	smpsNoAttack, $01
0008CF78 EC07                       	smpsPSGAlterVol     $07
0008CF7A 8003                       	dc.b	nRst, $03
0008CF7C ECF5                       	smpsPSGAlterVol     $F5
0008CF7E 9006                       	dc.b	nEb1, $06
0008CF80 EC04                       	smpsPSGAlterVol     $04
0008CF82 E701                       	dc.b	smpsNoAttack, $01
0008CF84 EC07                       	smpsPSGAlterVol     $07
0008CF86 8006                       	dc.b	nRst, $06
0008CF88 E100                       	smpsAlterNote       $00
0008CF8A 01                         	dc.b	$01
0008CF8B E102                       	smpsAlterNote       $02
0008CF8D 01                         	dc.b	$01
0008CF8E E100                       	smpsAlterNote       $00
0008CF90 01                         	dc.b	$01
0008CF91 E1FF                       	smpsAlterNote       $FF
0008CF93 01                         	dc.b	$01
0008CF94 ECF5                       	smpsPSGAlterVol     $F5
0008CF96 9B06                       	dc.b	nD2, $06
0008CF98 EC04                       	smpsPSGAlterVol     $04
0008CF9A E701                       	dc.b	smpsNoAttack, $01
0008CF9C EC07                       	smpsPSGAlterVol     $07
0008CF9E 8003                       	dc.b	nRst, $03
0008CFA0 ECF5                       	smpsPSGAlterVol     $F5
0008CFA2 9B07                       	dc.b	nD2, $07
0008CFA4 EC0B                       	smpsPSGAlterVol     $0B
0008CFA6 8007                       	dc.b	nRst, $07
0008CFA8 E105                       	smpsAlterNote       $05
0008CFAA 0101                       	dc.b	$01, $01
0008CFAC E1FF                       	smpsAlterNote       $FF
0008CFAE 01                         	dc.b	$01
0008CFAF E1FC                       	smpsAlterNote       $FC
0008CFB1 01                         	dc.b	$01
0008CFB2 E1FF                       	smpsAlterNote       $FF
0008CFB4 ECF5                       	smpsPSGAlterVol     $F5
0008CFB6 9B06                       	dc.b	nD2, $06
0008CFB8 EC0B                       	smpsPSGAlterVol     $0B
0008CFBA 8004                       	dc.b	nRst, $04
0008CFBC ECF5                       	smpsPSGAlterVol     $F5
0008CFBE 9B06                       	dc.b	nD2, $06
0008CFC0 EC04                       	smpsPSGAlterVol     $04
0008CFC2 E701                       	dc.b	smpsNoAttack, $01
0008CFC4 EC07                       	smpsPSGAlterVol     $07
0008CFC6 8006                       	dc.b	nRst, $06
0008CFC8 E102                       	smpsAlterNote       $02
0008CFCA 01                         	dc.b	$01
0008CFCB E106                       	smpsAlterNote       $06
0008CFCD 01                         	dc.b	$01
0008CFCE E102                       	smpsAlterNote       $02
0008CFD0 01                         	dc.b	$01
0008CFD1 E1FC                       	smpsAlterNote       $FC
0008CFD3 01                         	dc.b	$01
0008CFD4 E1FF                       	smpsAlterNote       $FF
0008CFD6 ECF5                       	smpsPSGAlterVol     $F5
0008CFD8 9B06                       	dc.b	nD2, $06
0008CFDA EC04                       	smpsPSGAlterVol     $04
0008CFDC E701                       	dc.b	smpsNoAttack, $01
0008CFDE EC07                       	smpsPSGAlterVol     $07
0008CFE0 8003                       	dc.b	nRst, $03
0008CFE2 ECF5                       	smpsPSGAlterVol     $F5
0008CFE4 9B07                       	dc.b	nD2, $07
0008CFE6 EC0B                       	smpsPSGAlterVol     $0B
0008CFE8 8006                       	dc.b	nRst, $06
0008CFEA E102                       	smpsAlterNote       $02
0008CFEC 01                         	dc.b	$01
0008CFED E105                       	smpsAlterNote       $05
0008CFEF 0101                       	dc.b	$01, $01
0008CFF1 E1FF                       	smpsAlterNote       $FF
0008CFF3 01                         	dc.b	$01
0008CFF4 ECF5                       	smpsPSGAlterVol     $F5
0008CFF6 9B07                       	dc.b	nD2, $07
0008CFF8 EC0B                       	smpsPSGAlterVol     $0B
0008CFFA 8004                       	dc.b	nRst, $04
0008CFFC ECF5                       	smpsPSGAlterVol     $F5
0008CFFE 9B06                       	dc.b	nD2, $06
0008D000 EC04                       	smpsPSGAlterVol     $04
0008D002 E701                       	dc.b	smpsNoAttack, $01
0008D004 EC07                       	smpsPSGAlterVol     $07
0008D006 8006                       	dc.b	nRst, $06
0008D008 E105                       	smpsAlterNote       $05
0008D00A 0101                       	dc.b	$01, $01
0008D00C E102                       	smpsAlterNote       $02
0008D00E 01                         	dc.b	$01
0008D00F E1FC                       	smpsAlterNote       $FC
0008D011 01                         	dc.b	$01
0008D012 E1FF                       	smpsAlterNote       $FF
0008D014 ECF5                       	smpsPSGAlterVol     $F5
0008D016 9B06                       	dc.b	nD2, $06
0008D018 EC04                       	smpsPSGAlterVol     $04
0008D01A E701                       	dc.b	smpsNoAttack, $01
0008D01C EC07                       	smpsPSGAlterVol     $07
0008D01E 8003                       	dc.b	nRst, $03
0008D020 ECF5                       	smpsPSGAlterVol     $F5
0008D022 9B06                       	dc.b	nD2, $06
0008D024 EC04                       	smpsPSGAlterVol     $04
0008D026 E701                       	dc.b	smpsNoAttack, $01
0008D028 EC07                       	smpsPSGAlterVol     $07
0008D02A 8006                       	dc.b	nRst, $06
0008D02C E102                       	smpsAlterNote       $02
0008D02E 01                         	dc.b	$01
0008D02F E106                       	smpsAlterNote       $06
0008D031 01                         	dc.b	$01
0008D032 E102                       	smpsAlterNote       $02
0008D034 01                         	dc.b	$01
0008D035 E1FF                       	smpsAlterNote       $FF
0008D037 01                         	dc.b	$01
0008D038 ECF5                       	smpsPSGAlterVol     $F5
0008D03A 9B06                       	dc.b	nD2, $06
0008D03C EC04                       	smpsPSGAlterVol     $04
0008D03E E701                       	dc.b	smpsNoAttack, $01
0008D040 EC07                       	smpsPSGAlterVol     $07
0008D042 8003                       	dc.b	nRst, $03
0008D044 ECF5                       	smpsPSGAlterVol     $F5
0008D046 9B07                       	dc.b	nD2, $07
0008D048 EC0B                       	smpsPSGAlterVol     $0B
0008D04A 8007                       	dc.b	nRst, $07
0008D04C E107                       	smpsAlterNote       $07
0008D04E 0101                       	dc.b	$01, $01
0008D050 E1FE                       	smpsAlterNote       $FE
0008D052 01                         	dc.b	$01
0008D053 E1FA                       	smpsAlterNote       $FA
0008D055 0101                       	dc.b	$01, $01
0008D057 E103                       	smpsAlterNote       $03
0008D059 01                         	dc.b	$01
0008D05A E109                       	smpsAlterNote       $09
0008D05C 01                         	dc.b	$01
0008D05D E107                       	smpsAlterNote       $07
0008D05F 01                         	dc.b	$01
0008D060 E1FE                       	smpsAlterNote       $FE
0008D062 01                         	dc.b	$01
0008D063 E108                       	smpsAlterNote       $08
0008D065 01                         	dc.b	$01
0008D066 E1FD                       	smpsAlterNote       $FD
0008D068 ECF5                       	smpsPSGAlterVol     $F5
0008D06A 940E                       	dc.b	nG1, $0E
0008D06C E103                       	smpsAlterNote       $03
0008D06E EC0B                       	smpsPSGAlterVol     $0B
0008D070 8001 01                    	dc.b	nRst, $01, $01
0008D073 E1FD                       	smpsAlterNote       $FD
0008D075 01                         	dc.b	$01
0008D076 E1FB                       	smpsAlterNote       $FB
0008D078 0101                       	dc.b	$01, $01
0008D07A E100                       	smpsAlterNote       $00
0008D07C 01                         	dc.b	$01
0008D07D E103                       	smpsAlterNote       $03
0008D07F 01                         	dc.b	$01
0008D080 E100                       	smpsAlterNote       $00
0008D082 01                         	dc.b	$01
0008D083 E1FD                       	smpsAlterNote       $FD
0008D085 01                         	dc.b	$01
0008D086 E1FA                       	smpsAlterNote       $FA
0008D088 01                         	dc.b	$01
0008D089 E1FD                       	smpsAlterNote       $FD
0008D08B 01                         	dc.b	$01
0008D08C E103                       	smpsAlterNote       $03
0008D08E 0101                       	dc.b	$01, $01
0008D090 E100                       	smpsAlterNote       $00
0008D092 01                         	dc.b	$01
0008D093 E1FE                       	smpsAlterNote       $FE
0008D095 ECF5                       	smpsPSGAlterVol     $F5
0008D097 960D                       	dc.b	nA1, $0D
0008D099 E104                       	smpsAlterNote       $04
0008D09B EC0B                       	smpsPSGAlterVol     $0B
0008D09D 8001 01                    	dc.b	nRst, $01, $01
0008D0A0 E101                       	smpsAlterNote       $01
0008D0A2 01                         	dc.b	$01
0008D0A3 E1FB                       	smpsAlterNote       $FB
0008D0A5 0101                       	dc.b	$01, $01
0008D0A7 E1FE                       	smpsAlterNote       $FE
0008D0A9 01                         	dc.b	$01
0008D0AA E104                       	smpsAlterNote       $04
0008D0AC 0101                       	dc.b	$01, $01
0008D0AE E1FE                       	smpsAlterNote       $FE
0008D0B0 01                         	dc.b	$01
0008D0B1 E1FB                       	smpsAlterNote       $FB
0008D0B3 0101                       	dc.b	$01, $01
0008D0B5 E101                       	smpsAlterNote       $01
0008D0B7 01                         	dc.b	$01
0008D0B8 E104                       	smpsAlterNote       $04
0008D0BA 0101                       	dc.b	$01, $01
0008D0BC E1FE                       	smpsAlterNote       $FE
0008D0BE ECF5                       	smpsPSGAlterVol     $F5
0008D0C0 970D                       	dc.b	nBb1, $0D
0008D0C2 E101                       	smpsAlterNote       $01
0008D0C4 EC04                       	smpsPSGAlterVol     $04
0008D0C6 E701                       	dc.b	smpsNoAttack, $01
0008D0C8 EC07                       	smpsPSGAlterVol     $07
0008D0CA E104                       	smpsAlterNote       $04
0008D0CC 8001                       	dc.b	nRst, $01
0008D0CE E103                       	smpsAlterNote       $03
0008D0D0 01                         	dc.b	$01
0008D0D1 E1FE                       	smpsAlterNote       $FE
0008D0D3 01                         	dc.b	$01
0008D0D4 E1FA                       	smpsAlterNote       $FA
0008D0D6 01                         	dc.b	$01
0008D0D7 E1FE                       	smpsAlterNote       $FE
0008D0D9 01                         	dc.b	$01
0008D0DA E101                       	smpsAlterNote       $01
0008D0DC 01                         	dc.b	$01
0008D0DD E104                       	smpsAlterNote       $04
0008D0DF 01                         	dc.b	$01
0008D0E0 E101                       	smpsAlterNote       $01
0008D0E2 01                         	dc.b	$01
0008D0E3 E1FB                       	smpsAlterNote       $FB
0008D0E5 01                         	dc.b	$01
0008D0E6 E1FA                       	smpsAlterNote       $FA
0008D0E8 01                         	dc.b	$01
0008D0E9 E1FE                       	smpsAlterNote       $FE
0008D0EB 01                         	dc.b	$01
0008D0EC E103                       	smpsAlterNote       $03
0008D0EE 0101                       	dc.b	$01, $01
0008D0F0 E101                       	smpsAlterNote       $01
0008D0F2 01                         	dc.b	$01
0008D0F3 E1FE                       	smpsAlterNote       $FE
0008D0F5 ECF5                       	smpsPSGAlterVol     $F5
0008D0F7 990D                       	dc.b	nC2, $0D
0008D0F9 E104                       	smpsAlterNote       $04
0008D0FB EC0B                       	smpsPSGAlterVol     $0B
0008D0FD 8001 01                    	dc.b	nRst, $01, $01
0008D100 E102                       	smpsAlterNote       $02
0008D102 01                         	dc.b	$01
0008D103 E1FC                       	smpsAlterNote       $FC
0008D105 0101                       	dc.b	$01, $01
0008D107 E102                       	smpsAlterNote       $02
0008D109 01                         	dc.b	$01
0008D10A E104                       	smpsAlterNote       $04
0008D10C 01                         	dc.b	$01
0008D10D E1FF                       	smpsAlterNote       $FF
0008D10F ECF5                       	smpsPSGAlterVol     $F5
0008D111 9B06                       	dc.b	nD2, $06
0008D113 EC04                       	smpsPSGAlterVol     $04
0008D115 E701                       	dc.b	smpsNoAttack, $01
0008D117 EC07                       	smpsPSGAlterVol     $07
0008D119 8003                       	dc.b	nRst, $03
0008D11B ECF5                       	smpsPSGAlterVol     $F5
0008D11D 9B07                       	dc.b	nD2, $07
0008D11F EC0B                       	smpsPSGAlterVol     $0B
0008D121 8006                       	dc.b	nRst, $06
0008D123 E101                       	smpsAlterNote       $01
0008D125 01                         	dc.b	$01
0008D126 E104                       	smpsAlterNote       $04
0008D128 0101                       	dc.b	$01, $01
0008D12A E1FE                       	smpsAlterNote       $FE
0008D12C 01                         	dc.b	$01
0008D12D E1FC                       	smpsAlterNote       $FC
0008D12F 01                         	dc.b	$01
0008D130 E1FE                       	smpsAlterNote       $FE
0008D132 ECF5                       	smpsPSGAlterVol     $F5
0008D134 9C06                       	dc.b	nEb2, $06
0008D136 EC0B                       	smpsPSGAlterVol     $0B
0008D138 8004                       	dc.b	nRst, $04
0008D13A ECF5                       	smpsPSGAlterVol     $F5
0008D13C 9C06                       	dc.b	nEb2, $06
0008D13E EC04                       	smpsPSGAlterVol     $04
0008D140 E701                       	dc.b	smpsNoAttack, $01
0008D142 EC07                       	smpsPSGAlterVol     $07
0008D144 8006                       	dc.b	nRst, $06
0008D146 E105                       	smpsAlterNote       $05
0008D148 01                         	dc.b	$01
0008D149 E106                       	smpsAlterNote       $06
0008D14B 01                         	dc.b	$01
0008D14C E102                       	smpsAlterNote       $02
0008D14E 01                         	dc.b	$01
0008D14F E1FB                       	smpsAlterNote       $FB
0008D151 01                         	dc.b	$01
0008D152 E1FF                       	smpsAlterNote       $FF
0008D154 ECF5                       	smpsPSGAlterVol     $F5
0008D156 9B06                       	dc.b	nD2, $06
0008D158 EC04                       	smpsPSGAlterVol     $04
0008D15A E701                       	dc.b	smpsNoAttack, $01
0008D15C EC07                       	smpsPSGAlterVol     $07
0008D15E 8003                       	dc.b	nRst, $03
0008D160 ECF5                       	smpsPSGAlterVol     $F5
0008D162 9B06                       	dc.b	nD2, $06
0008D164 EC04                       	smpsPSGAlterVol     $04
0008D166 E701                       	dc.b	smpsNoAttack, $01
0008D168 EC07                       	smpsPSGAlterVol     $07
0008D16A 8006                       	dc.b	nRst, $06
0008D16C E101                       	smpsAlterNote       $01
0008D16E 01                         	dc.b	$01
0008D16F E105                       	smpsAlterNote       $05
0008D171 01                         	dc.b	$01
0008D172 E104                       	smpsAlterNote       $04
0008D174 01                         	dc.b	$01
0008D175 E1FE                       	smpsAlterNote       $FE
0008D177 01                         	dc.b	$01
0008D178 ECF5                       	smpsPSGAlterVol     $F5
0008D17A 9C07                       	dc.b	nEb2, $07
0008D17C EC0B                       	smpsPSGAlterVol     $0B
0008D17E 8004                       	dc.b	nRst, $04
0008D180 ECF5                       	smpsPSGAlterVol     $F5
0008D182 9C06                       	dc.b	nEb2, $06
0008D184 EC0B                       	smpsPSGAlterVol     $0B
0008D186 8007                       	dc.b	nRst, $07
0008D188 E105                       	smpsAlterNote       $05
0008D18A 0101                       	dc.b	$01, $01
0008D18C E102                       	smpsAlterNote       $02
0008D18E 01                         	dc.b	$01
0008D18F E1FB                       	smpsAlterNote       $FB
0008D191 01                         	dc.b	$01
0008D192 E1FF                       	smpsAlterNote       $FF
0008D194 ECF5                       	smpsPSGAlterVol     $F5
0008D196 9B06                       	dc.b	nD2, $06
0008D198 EC04                       	smpsPSGAlterVol     $04
0008D19A E701                       	dc.b	smpsNoAttack, $01
0008D19C EC07                       	smpsPSGAlterVol     $07
0008D19E 8003                       	dc.b	nRst, $03
0008D1A0 ECF5                       	smpsPSGAlterVol     $F5
0008D1A2 9B06                       	dc.b	nD2, $06
0008D1A4 EC04                       	smpsPSGAlterVol     $04
0008D1A6 E701                       	dc.b	smpsNoAttack, $01
0008D1A8 EC07                       	smpsPSGAlterVol     $07
0008D1AA 8006                       	dc.b	nRst, $06
0008D1AC E101                       	smpsAlterNote       $01
0008D1AE 01                         	dc.b	$01
0008D1AF E105                       	smpsAlterNote       $05
0008D1B1 01                         	dc.b	$01
0008D1B2 E101                       	smpsAlterNote       $01
0008D1B4 01                         	dc.b	$01
0008D1B5 E1FC                       	smpsAlterNote       $FC
0008D1B7 01                         	dc.b	$01
0008D1B8 E1FE                       	smpsAlterNote       $FE
0008D1BA ECF5                       	smpsPSGAlterVol     $F5
0008D1BC 9C06                       	dc.b	nEb2, $06
0008D1BE EC04                       	smpsPSGAlterVol     $04
0008D1C0 E701                       	dc.b	smpsNoAttack, $01
0008D1C2 EC07                       	smpsPSGAlterVol     $07
0008D1C4 8003                       	dc.b	nRst, $03
0008D1C6 ECF5                       	smpsPSGAlterVol     $F5
0008D1C8 9C07                       	dc.b	nEb2, $07
0008D1CA EC0B                       	smpsPSGAlterVol     $0B
0008D1CC 8006                       	dc.b	nRst, $06
0008D1CE E102                       	smpsAlterNote       $02
0008D1D0 01                         	dc.b	$01
0008D1D1 E105                       	smpsAlterNote       $05
0008D1D3 0101                       	dc.b	$01, $01
0008D1D5 E1FF                       	smpsAlterNote       $FF
0008D1D7 01                         	dc.b	$01
0008D1D8 ECF5                       	smpsPSGAlterVol     $F5
0008D1DA 9B07                       	dc.b	nD2, $07
0008D1DC EC0B                       	smpsPSGAlterVol     $0B
0008D1DE 8004                       	dc.b	nRst, $04
0008D1E0 ECF5                       	smpsPSGAlterVol     $F5
0008D1E2 9B06                       	dc.b	nD2, $06
0008D1E4 EC04                       	smpsPSGAlterVol     $04
0008D1E6 E701                       	dc.b	smpsNoAttack, $01
0008D1E8 EC07                       	smpsPSGAlterVol     $07
0008D1EA 8002                       	dc.b	nRst, $02
0008D1EC E1FC                       	smpsAlterNote       $FC
0008D1EE ECF5                       	smpsPSGAlterVol     $F5
0008D1F0 9006                       	dc.b	nEb1, $06
0008D1F2 EC04                       	smpsPSGAlterVol     $04
0008D1F4 E701                       	dc.b	smpsNoAttack, $01
0008D1F6 ECFC                       	smpsPSGAlterVol     $FC
0008D1F8 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
0008D1FC EC04                       	smpsPSGAlterVol     $04
0008D1FE E701                       	dc.b	smpsNoAttack, $01
0008D200 E1FD                       	smpsAlterNote       $FD
0008D202 ECFC                       	smpsPSGAlterVol     $FC
0008D204 9402                       	dc.b	nG1, $02
0008D206 EC04                       	smpsPSGAlterVol     $04
0008D208 E701                       	dc.b	smpsNoAttack, $01
0008D20A E1FE                       	smpsAlterNote       $FE
0008D20C ECFC                       	smpsPSGAlterVol     $FC
0008D20E 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008D212 EC04                       	smpsPSGAlterVol     $04
0008D214 E701                       	dc.b	smpsNoAttack, $01
0008D216 EC07                       	smpsPSGAlterVol     $07
0008D218 8008                       	dc.b	nRst, $08
0008D21A F6F4 F3                    	smpsJump            music84_Jump06
0008D21D                            
0008D21D                            ; PSG3 Data
0008D21D                            music84_PSG3:
0008D21D F500                       	smpsPSGvoice        $00
0008D21F E1FF                       	smpsAlterNote       $FF
0008D221 EC0F                       	smpsPSGAlterVol     $0F
0008D223 803A                       	dc.b	nRst, $3A
0008D225                            
0008D225                            music84_Jump05:
0008D225 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
0008D231 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
0008D23B F6FF E8                    	smpsJump            music84_Jump05
0008D23E                            
0008D23E                            ; DAC Data
0008D23E                            music84_DAC:
0008D23E E0C0                       	smpsPan             panCenter, $00
0008D240 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
0008D24C 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
0008D258 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
0008D264 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008D270 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008D27C 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
0008D288 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008D294 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
0008D2A0 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008D2AC 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
0008D2B8 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008D2C4 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
0008D2D0 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008D2DC 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008D2E8 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
0008D2F4 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
0008D300 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
0008D30C 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
0008D318 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
0008D324 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008D330 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008D33C 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008D348 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
0008D354 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008D360 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
0008D36C 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
0008D378 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
0008D384 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008D390 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008D39C 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008D3A8 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008D3B4 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008D3C0 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
0008D3CC 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
0008D3D8 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
0008D3E4 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008D3F0 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
0008D3FC 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
0008D408 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008D414 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
0008D420 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
0008D42C 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
0008D438 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008D444 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008D450 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008D45C 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008D468 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008D474 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
0008D480 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
0008D48C 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
0008D498 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
0008D4A4 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
0008D4B0 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
0008D4BC 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
0008D4C8 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008D4D4 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
0008D4E0 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
0008D4EC 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008D4F8 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008D504 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008D510 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
0008D51C 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
0008D528 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
0008D534 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
0008D540 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
0008D54C 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
0008D558 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
0008D564 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
0008D570 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0008D57C 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008D588 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
0008D594 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008D5A0 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
0008D5AC 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
0008D5B8 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
0008D5C4 E0C0                       	smpsPan             panCenter, $00
0008D5C6 F2                         	smpsStop
0008D5C7                            
0008D5C7                            music84_Voices:
0008D5C7                            ;	Voice $00
0008D5C7                            ;	$3D
0008D5C7                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
0008D5C7                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
0008D5C7                            	smpsVcAlgorithm     $05
0008D5C7                            	smpsVcFeedback      $07
0008D5C7                            	smpsVcUnusedBits    $00
0008D5C7                            	smpsVcDetune        $05, $04, $03, $04
0008D5C7                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008D5C7                            	smpsVcRateScale     $00, $00, $00, $00
0008D5C7                            	smpsVcAttackRate    $11, $11, $11, $11
0008D5C7                            	smpsVcAmpMod        $00, $00, $00, $00
0008D5C7                            	smpsVcDecayRate1    $00, $00, $00, $0A
0008D5C7                            	smpsVcDecayRate2    $00, $00, $00, $0B
0008D5C7                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008D5C7                            	smpsVcReleaseRate   $08, $08, $08, $07
0008D5C7 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
0008D5E0                            
0008D5E0                            ;	Voice $01
0008D5E0                            ;	$04
0008D5E0                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
0008D5E0                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
0008D5E0                            	smpsVcAlgorithm     $04
0008D5E0                            	smpsVcFeedback      $00
0008D5E0                            	smpsVcUnusedBits    $00
0008D5E0                            	smpsVcDetune        $04, $03, $04, $05
0008D5E0                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
0008D5E0                            	smpsVcRateScale     $00, $01, $00, $01
0008D5E0                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0008D5E0                            	smpsVcAmpMod        $00, $00, $00, $00
0008D5E0                            	smpsVcDecayRate1    $0E, $00, $0E, $00
0008D5E0                            	smpsVcDecayRate2    $05, $00, $05, $00
0008D5E0                            	smpsVcDecayLevel    $08, $0E, $08, $0E
0008D5E0                            	smpsVcReleaseRate   $06, $06, $06, $06
0008D5E0 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
0008D5F9                            
0008D5F9                            ;	Voice $02
0008D5F9                            ;	$30
0008D5F9                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
0008D5F9                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
0008D5F9                            	smpsVcAlgorithm     $00
0008D5F9                            	smpsVcFeedback      $06
0008D5F9                            	smpsVcUnusedBits    $00
0008D5F9                            	smpsVcDetune        $04, $02, $00, $06
0008D5F9                            	smpsVcCoarseFreq    $01, $01, $03, $0C
0008D5F9                            	smpsVcRateScale     $00, $00, $00, $00
0008D5F9                            	smpsVcAttackRate    $1F, $1F, $1F, $14
0008D5F9                            	smpsVcAmpMod        $00, $00, $00, $00
0008D5F9                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
0008D5F9                            	smpsVcDecayRate2    $01, $01, $01, $01
0008D5F9                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
0008D5F9                            	smpsVcReleaseRate   $09, $0B, $08, $0F
0008D5F9 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
0008D612                            
0008D612                            ;	Voice $03
0008D612                            ;	$3A
0008D612                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
0008D612                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
0008D612                            	smpsVcAlgorithm     $02
0008D612                            	smpsVcFeedback      $07
0008D612                            	smpsVcUnusedBits    $00
0008D612                            	smpsVcDetune        $04, $06, $02, $00
0008D612                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008D612                            	smpsVcRateScale     $00, $00, $00, $00
0008D612                            	smpsVcAttackRate    $18, $19, $14, $14
0008D612                            	smpsVcAmpMod        $00, $00, $00, $00
0008D612                            	smpsVcDecayRate1    $09, $0D, $09, $09
0008D612                            	smpsVcDecayRate2    $00, $00, $00, $00
0008D612                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
0008D612                            	smpsVcReleaseRate   $08, $0F, $0F, $07
0008D612 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
0008D62B                            
0008D62B                            ;	Voice $04
0008D62B                            ;	$3C
0008D62B                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
0008D62B                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
0008D62B                            	smpsVcAlgorithm     $04
0008D62B                            	smpsVcFeedback      $07
0008D62B                            	smpsVcUnusedBits    $00
0008D62B                            	smpsVcDetune        $07, $00, $00, $03
0008D62B                            	smpsVcCoarseFreq    $00, $00, $02, $0A
0008D62B                            	smpsVcRateScale     $00, $00, $00, $00
0008D62B                            	smpsVcAttackRate    $10, $1F, $10, $1F
0008D62B                            	smpsVcAmpMod        $00, $00, $00, $00
0008D62B                            	smpsVcDecayRate1    $00, $00, $00, $00
0008D62B                            	smpsVcDecayRate2    $00, $00, $00, $00
0008D62B                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008D62B                            	smpsVcReleaseRate   $0A, $02, $0A, $02
0008D62B 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
0008D644                            
0008D644                            ;	Voice $05
0008D644                            ;	$38
0008D644                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
0008D644                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
0008D644                            	smpsVcAlgorithm     $00
0008D644                            	smpsVcFeedback      $07
0008D644                            	smpsVcUnusedBits    $00
0008D644                            	smpsVcDetune        $04, $06, $02, $00
0008D644                            	smpsVcCoarseFreq    $01, $01, $01, $00
0008D644                            	smpsVcRateScale     $00, $00, $00, $00
0008D644                            	smpsVcAttackRate    $1F, $1F, $1F, $10
0008D644                            	smpsVcAmpMod        $00, $00, $00, $00
0008D644                            	smpsVcDecayRate1    $00, $03, $00, $17
0008D644                            	smpsVcDecayRate2    $00, $08, $08, $0B
0008D644                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
0008D644                            	smpsVcReleaseRate   $08, $05, $05, $05
0008D644 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0008D65D                            
0008D65D                            
0008D65E 00                         		even
0008D65E                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
0009186E                            		even
0009186E                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
000953C6 00                         		even
000953C6                            Music87:	include	sound\music87.asm; Invincibility
000953C6                            triple_Header:
000953C6 =00000001                  smpsHeaderStartSong = 1
000953C6 0000                       	smpsHeaderVoice     triple_Voices
000953C8 0501                       	smpsHeaderChan      $05, $01
000953CA 0200                       	smpsHeaderTempo     $02, $00
000953CC                            
000953D0 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
000953D4 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
000953D8 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
000953DC 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
000953E0 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
000953E6                            
000953E6                            ; DAC Data
000953E6                            triple_DAC:
000953E6 E0C0                       	smpsPan             panCenter, $00
000953E8 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
000953EE                            
000953EE                            triple_Loop01:
000953EE 8282 82                    	dc.b	dSnare, dSnare, dSnare
000953F1                            
000953F1                            triple_Loop00:
000953F1 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
000953FD 06                         	dc.b	$06
000953FE F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
00095403 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
0009540F 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
00095416 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
0009541B 0303 1B                    	dc.b	$03, $03, $1B
0009541E E0C0                       	smpsPan             panCenter, $00
00095420 F6FF C4                    	smpsJump triple_DAC
00095423                            
00095423                            ; FM1 Data
00095423                            triple_FM1:
00095423 E0C0                       	smpsPan             panCenter, $00
00095427 8018                       	dc.b	nRst, $18
00095429                            
00095429                            triple_Loop0B:
00095429 AC06 B8                    	dc.b	nG3, $06, nG4
0009542C F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
00095431                            
00095431                            triple_Loop0C:
00095431 A7B3                       	dc.b	nD3, nD4
00095433 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
00095438                            
00095438                            triple_Loop0D:
00095438 A9B5                       	dc.b	nE3, nE4
0009543A F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
0009543F A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
00095447 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
0009544C A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
00095458 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
00095464 AD                         	dc.b	nAb3
00095465 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
0009546A 8018                       	dc.b	nRst, $18
0009546C E0C0                       	smpsPan             panCenter, $00
00095470 F6FF B1                    	smpsJump triple_FM1
00095473                            
00095473                            ; FM2 Data
00095473                            triple_FM2:
00095473 E0C0                       	smpsPan             panCenter, $00
00095477 8018                       	dc.b	nRst, $18
00095479                            
00095479                            triple_Loop07:
00095479 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00095485 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00095491 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
00095496 8003                       	dc.b	nRst, $03
00095498                            
00095498                            triple_Loop08:
00095498 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0009549E F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
000954A3 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000954A9                            
000954A9                            triple_Loop09:
000954A9 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000954B5 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000954C1 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
000954C6 8003                       	dc.b	nRst, $03
000954C8                            
000954C8                            triple_Loop0A:
000954C8 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000954CE F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
000954D3 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000954D9 E0C0                       	smpsPan             panCenter, $00
000954DD F6FF 94                    	smpsJump triple_FM2
000954E0                            
000954E0                            ; FM3 Data
000954E0                            triple_FM3:
000954E0 E0C0                       	smpsPan             panCenter, $00
000954E4 8018                       	dc.b	nRst, $18
000954E6                            
000954E6                            triple_Loop06:
000954E6 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
000954ED F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
000954F2 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
000954FE BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
0009550A C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
0009550D F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
00095512 8018                       	dc.b	nRst, $18
00095514 E0C0                       	smpsPan             panCenter, $00
00095518 F6FF C6                    	smpsJump triple_FM3
0009551B                            
0009551B                            ; FM4 Data
0009551B                            triple_FM4:
0009551B E103                       	smpsAlterNote       $03
0009551F E0C0                       	smpsPan             panCenter, $00
00095521 8018                       	dc.b	nRst, $18
00095523                            
00095523                            triple_Loop02:
00095523 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0009552F C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0009553B F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
00095540 8003                       	dc.b	nRst, $03
00095542                            
00095542                            triple_Loop03:
00095542 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00095548 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
0009554D B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00095553                            
00095553                            triple_Loop04:
00095553 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0009555F C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0009556B F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
00095570 8003                       	dc.b	nRst, $03
00095572                            
00095572                            triple_Loop05:
00095572 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00095578 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
0009557D B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00095583 E0C0                       	smpsPan             panCenter, $00
00095585 F6FF 94                    	smpsJump triple_FM4
00095588                            
00095588                            ; PSG1 Data
00095588                            triple_PSG1:
00095588 8018                       	dc.b	nRst, $18
0009558A                            
0009558A                            triple_Loop0E:
0009558A A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00095596 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000955A2 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000955AE 9402 8004                  	dc.b	nG1, $02, nRst, $04
000955B2 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
000955B7 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000955C3 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000955CF 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000955DB 9402 8007                  	dc.b	nG1, $02, nRst, $07
000955DF                            
000955DF                            triple_Loop0F:
000955DF 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000955E5 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
000955EA 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
000955F0                            
000955F0                            triple_Loop10:
000955F0 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000955FC 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00095608 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00095614 9402 8004                  	dc.b	nG1, $02, nRst, $04
00095618 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
0009561D A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00095629 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00095635 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00095641 9402 8007                  	dc.b	nG1, $02, nRst, $07
00095645                            
00095645                            triple_Loop11:
00095645 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
0009564B F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
00095650 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
00095656 F500                       	smpsPSGvoice        $00
00095658 F6FF 2E                    	smpsJump triple_PSG1
0009565B                            
0009565B                            triple_Voices:
0009565B                            ;	Voice $00
0009565B                            ;	$3A
0009565B                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
0009565B                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
0009565B                            	smpsVcAlgorithm     $02
0009565B                            	smpsVcFeedback      $07
0009565B                            	smpsVcUnusedBits    $00
0009565B                            	smpsVcDetune        $00, $00, $00, $00
0009565B                            	smpsVcCoarseFreq    $01, $01, $07, $01
0009565B                            	smpsVcRateScale     $01, $02, $02, $02
0009565B                            	smpsVcAttackRate    $13, $0D, $0E, $0E
0009565B                            	smpsVcAmpMod        $00, $00, $00, $00
0009565B                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
0009565B                            	smpsVcDecayRate2    $00, $00, $00, $00
0009565B                            	smpsVcDecayLevel    $00, $01, $0F, $01
0009565B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009565B 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
00095674                            
00095674                            ;	Voice $01
00095674                            ;	$20
00095674                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
00095674                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
00095674                            	smpsVcAlgorithm     $00
00095674                            	smpsVcFeedback      $04
00095674                            	smpsVcUnusedBits    $00
00095674                            	smpsVcDetune        $00, $00, $03, $07
00095674                            	smpsVcCoarseFreq    $00, $00, $01, $0A
00095674                            	smpsVcRateScale     $03, $03, $03, $02
00095674                            	smpsVcAttackRate    $1F, $1C, $18, $1F
00095674                            	smpsVcAmpMod        $00, $00, $00, $00
00095674                            	smpsVcDecayRate1    $04, $04, $0A, $10
00095674                            	smpsVcDecayRate2    $08, $08, $08, $0F
00095674                            	smpsVcDecayLevel    $0B, $0B, $05, $05
00095674                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00095674 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00095674 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
0009568E 00                         		even
0009568E                            Music88:	incbin	sound\music88.bin; Extra Life
0009577C                            		even
0009577C                            Music89:	incbin	sound\music89.bin; Special Stage
00099644 00                         		even
00099644                            Music8A:	incbin	sound\music8A.bin; Title Screen
0009980E                            		even
0009980E                            Music8B:	incbin	sound\music8B.bin; Ending Theme
00099AA8                            		even
00099AA8                            Music8C:	incbin	sound\music8C.bin; VS Boss
00099CC4                            		even
00099CC4                            Music8D:	incbin	sound\music8D.bin; Final Zone
00099EE0                            		even
00099EE0                            Music8E:	incbin	sound\fle.bin ;		Act Clear
0009A34E 00                         		even
0009A34E                            Music8F:	incbin	sound\music8F.bin ; Game Over
0009A98E 00                         		even
0009A98E                            Music90:	incbin	sound\music90.bin ; Continue
0009AAEC                            		even
0009AAEC                            Music91:	incbin	sound\music91.bin ; Credits
0009BDBA                            		even
0009BDBA                            Music92:	incbin	sound\music92.bin ; Drowning
0009BEE4                            		even
0009BEE4                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
0009BFB4                            		even
0009BFB4                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
0009BFEE 00                         		even
0009BFEE                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
0009C028 00                         		even
0009C028                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
0009C062 00                         		even
0009C062                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
0009C09C 00                         		even
0009C09C                            Music98:	incbin	sound\music98.bin ; Marble Act 2
0009C0D6 00                         		even
0009C0D6                            Music99:	incbin	sound\music99.bin ; Marble Act 3
0009C110 00                         		even
0009C110                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
0009C14A 00                         		even
0009C14A                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
0009C184 00                         		even
0009C184                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
0009C1BE 00                         		even
0009C1BE                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
0009C1F8 00                         		even
0009C1F8                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
0009C6E8                            		even
0009C6E8                            Music9F:	incbin	sound\music9F.bin ; Scrap Brain Act 3
0009C722 00                         		even
0009C722                            ; ---------------------------------------------------------------------------
0009C722                            ; Sound	effect pointers
0009C722                            ; ---------------------------------------------------------------------------
0009C722 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
0009C72E 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
0009C73A 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
0009C746 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
0009C752 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
0009C75E 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
0009C76A 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
0009C776 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
0009C782 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
0009C78E 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
0009C79A 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
0009C7A6 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
0009C7B2 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
0009C7BE 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
0009C7CA 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
0009C7D6 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
0009C7E2 0000 0000                  SoundD0Index:	dc.l SoundD0
0009C7E6                            SoundA0:	incbin	sound\soundA0.bin
0009C7FC                            		even
0009C7FC                            SoundA1:	incbin	sound\soundA1.bin
0009C826                            		even
0009C826                            SoundA2:	incbin	sound\soundA2.bin
0009C846                            		even
0009C846                            SoundA3:	incbin	sound\soundA3.bin
0009C878                            		even
0009C878                            SoundA4:	incbin	sound\soundA4.bin
0009C8AE                            		even
0009C8AE                            SoundA5:	incbin	sound\soundA5.bin
0009C8DA                            		even
0009C8DA                            SoundA6:	incbin	sound\soundA6.bin
0009C90A                            		even
0009C90A                            SoundA7:	incbin	sound\soundA7.bin
0009C93A                            		even
0009C93A                            SoundA8:	incbin	sound\soundA8.bin
0009C96E                            		even
0009C96E                            SoundA9:	incbin	sound\soundA9.bin
0009C980                            		even
0009C980                            SoundAA:	incbin	sound\soundAA.bin
0009C9C2                            		even
0009C9C2                            SoundAB:	incbin	sound\soundAB.bin
0009C9E2                            		even
0009C9E2                            SoundAC:	incbin	sound\soundAC.bin
0009CA16                            		even
0009CA16                            SoundAD:	incbin	sound\soundAD.bin
0009CA4C                            		even
0009CA4C                            SoundAE:	incbin	sound\soundAE.bin
0009CA96                            		even
0009CA96                            SoundAF:	incbin	sound\soundAF.bin
0009CAC4                            		even
0009CAC4                            SoundB0:	incbin	sound\soundB0.bin
0009CAF6                            		even
0009CAF6                            SoundB1:	incbin	sound\soundB1.bin
0009CB22                            		even
0009CB22                            SoundB2:	incbin	sound\soundB2.bin
0009CB72                            		even
0009CB72                            SoundB3:	incbin	sound\soundB3.bin
0009CBBC                            		even
0009CBBC                            SoundB4:	include	sound\soundB4.asm
0009CBBC                            SndB4_Bumper_Header:
0009CBBC =00000001                  smpsHeaderStartSong = 1
0009CBBC 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
0009CBBE 01                         	smpsHeaderTempoSFX  $01
0009CBBF 03                         	smpsHeaderChanSFX   $03
0009CBC0                            
0009CBD2                            
0009CBD2                            ; FM5 Data
0009CBD2                            SndB4_Bumper_FM5:
0009CBD4 F600 00                    	smpsJump            SndB4_Bumper_Jump00
0009CBD7                            
0009CBD7                            ; FM4 Data
0009CBD7                            SndB4_Bumper_FM4:
0009CBD7 F2                         	smpsStop
0009CBD8                            
0009CBD8                            SndB4_Bumper_Jump00:
0009CBD8 A020                       	dc.b	nG2, $20
0009CBDA F2                         	smpsStop
0009CBDB                            
0009CBDB                            ; FM3 Data
0009CBDB                            SndB4_Bumper_FM3:
0009CBDB F2                         	smpsStop
0009CBDC                            
0009CBDC                            SndB4_Bumper_Voices:
0009CBDC                            ;	Voice $00
0009CBDC                            ;	$32
0009CBDC                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
0009CBDC                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
0009CBDC                            	smpsVcAlgorithm     $02
0009CBDC                            	smpsVcFeedback      $06
0009CBDC                            	smpsVcUnusedBits    $00
0009CBDC                            	smpsVcDetune        $07, $07, $02, $00
0009CBDC                            	smpsVcCoarseFreq    $00, $00, $00, $04
0009CBDC                            	smpsVcRateScale     $00, $00, $00, $00
0009CBDC                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CBDC                            	smpsVcAmpMod        $00, $00, $00, $00
0009CBDC                            	smpsVcDecayRate1    $08, $00, $00, $09
0009CBDC                            	smpsVcDecayRate2    $0B, $00, $00, $09
0009CBDC                            	smpsVcDecayLevel    $00, $00, $00, $00
0009CBDC                            	smpsVcReleaseRate   $0F, $00, $00, $00
0009CBDC 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
0009CBDC 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
0009CBF6 00                         		even
0009CBF6                            SoundB5:	incbin	sound\soundB5.bin
0009CC14 00                         		even
0009CC14                            SoundB6:	incbin	sound\soundB6.bin
0009CC32                            		even
0009CC32                            SoundB7:	incbin	sound\soundB7.bin
0009CC6E                            		even
0009CC6E                            SoundB8:	incbin	sound\soundB8.bin
0009CC8C                            		even
0009CC8C                            SoundB9:	incbin	sound\soundB9.bin
0009CCF0                            		even
0009CCF0                            SoundBA:	incbin	sound\soundBA.bin
0009CD18                            		even
0009CD18                            SoundBB:	incbin	sound\soundBB.bin
0009CD44                            		even
0009CD44                            SoundBC:	incbin	sound\soundBC.bin
0009CD86                            		even
0009CD86                            SoundBD:	incbin	sound\soundBD.bin
0009CDDA                            		even
0009CDDA                            SoundBE:	incbin	sound\soundBE.bin
0009CE14                            		even
0009CE14                            SoundBF:	incbin	sound\soundBF.bin
0009CE86                            		even
0009CE86                            SoundC0:	incbin	sound\soundC0.bin
0009CEB4                            		even
0009CEB4                            SoundC1:	incbin	sound\soundC1.bin
0009CF0E                            		even
0009CF0E                            SoundC2:	incbin	sound\soundC2.bin
0009CF38                            		even
0009CF38                            SoundC3:	incbin	sound\soundC3.bin
0009CFB2                            		even
0009CFB2                            SoundC4:	incbin	sound\soundC4.bin
0009D0B0                            		even
0009D0B0                            SoundC5:	incbin	sound\soundC5.bin
0009D118                            		even
0009D118                            SoundC6:	incbin	sound\soundC6.bin
0009D15A                            		even
0009D15A                            SoundC7:	incbin	sound\soundC7.bin
0009D188                            		even
0009D188                            SoundC8:	incbin	sound\soundC8.bin
0009D19A                            		even
0009D19A                            SoundC9:	incbin	sound\soundC9.bin
0009D1C8                            		even
0009D1C8                            SoundCA:	incbin	sound\soundCA.bin
0009D1F6                            		even
0009D1F6                            SoundCB:	incbin	sound\soundCB.bin
0009D242                            		even
0009D242                            SoundCC:	incbin	sound\C9.ssf
0009D270                            		even
0009D270                            SoundCD:	incbin	sound\soundCD.bin
0009D27E                            		even
0009D27E                            SoundCE:	incbin	sound\soundCE.bin
0009D29C 00                         		even
0009D29C                            SoundCF:	incbin	sound\soundCF.bin
0009D2D4                            		even
0009D2D4                            SoundD0:	incbin	sound\soundD0.bin
0009D30E                            		even
0009D30E                            SegaPCM:	incbin	sound\segapcm.bin
000B7464                            SegaPCM_end:	even
000B7464                            
000B7464                            IdiotPCM:	incbin	sound\youare.bin
000C1536 00                         IdiotPCM_end:	even
000C1536                            
000C1536                            ; end of 'ROM'
000C1536                            EndOfRom:
000C1536                            
000C1536                            
